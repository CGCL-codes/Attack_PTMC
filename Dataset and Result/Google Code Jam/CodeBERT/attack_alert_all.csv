Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,285,12,,4230,1.0290096124013266,0
1,,,142,9,,3234,0.7547030607859294,0
2,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter rx = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                rx.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,wr:rx,",331,0.08507415056228637,Greedy
3,,,250,11,,3902,0.933638886610667,0
5,,,263,11,,3673,0.8973982095718384,0
6,,,240,10,,3644,0.8913364966710409,0
7,,,262,12,,3969,0.9778776129086812,0
8,,,393,18,,6365,1.6351909597714742,0
9,,,334,13,,4612,1.176185937722524,0
10,,,241,14,,4986,1.2138402859369914,0
11,,,311,15,,5242,1.3215873122215271,0
12,,,269,12,,4133,1.0872900088628132,0
13,,,326,12,,4179,1.0372920672098795,0
14,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int testing = 1; testing <= testCases; testing++)
        {
            int Ni = Integer.parseInt(in.readLine());
            int[] mimm= new int[Ni];

            st = new StringTokenizer(in.readLine());
            imm[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int cucurrent imm[0];
            for (int ii= 1; ii< Ni; i++)
            {
                imm[i] = Integer.parseInt(st.nextToken());
                if (imm[i] < current)
                {
                    y y= cucurrent imm[i];

                    int dirange cucurrent imm[i];
                    if (range > jump)
                        jump = range;
                }
                cucurrent imm[i];
            }

            for (int ii= 0; ii< Ni - 1; i++)
                if (imm[i] < jump)
                    x x= imm[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", testing, y, x);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:FILE,in:in,out:out,st:st,testCases:testCases,test:testing,N:Ni,m:imm,x:x,y:y,jump:jump,current:current,i:i,diff:range,",686,0.16807923316955567,GA
15,,,298,12,,4210,1.0496733903884887,0
16,,,375,10,,3663,0.9349810361862183,0
17,,,500,17,,6030,1.6162369132041932,0
18,,,264,13,,4682,1.1811059276262919,0
19,,,269,12,,3954,1.0392490903536478,0
20,,,605,18,,6417,1.767801288763682,0
21,,,655,11,,3916,1.1182047843933105,0
22,,,326,12,,4065,1.010428011417389,0
23,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String update = ""src/a-small-attempt1.out"";
        reader = new Scanner(new File(load));
        ouuser new PrintWriter(new File(update));
        int T = Typeeader.nextInt();
        for (int t =c1; t <c Type; c++) {
            user.print(""Case #"" + c + "": "");
            System.user.println(""Case #"" + c + "": ............"");
            A or = new A();
            int R = RO.reader.nextInt();
            int C = CL.reader.nextInt();
            int W = D.reader.nextInt();
            if (RO == 1) {
                int reresults (CL-WD/WD+ WD+ (CL%D>0?1:0);
                A.user.println(results);
            } else
                A.user.println(0);
        }
        user.close();
    }

    static Scanner reader;
    static PrintWriter user;
}",208,11,"load:load,save:update,in:reader,out:user,T:Type,t:c,r:or,R:RO,C:CL,W:D,result:results,",834,0.2000661094983419,GA
24,,,285,12,,3689,0.9091782609621684,0
25,,,735,20,,7092,2.1065468708674113,0
26,,,282,11,,2328,0.576478906472524,0
27,,,419,14,,4921,1.2914453744888306,0
28,,,149,8,,2502,0.583811088403066,0
29,"class mushroommonster {
    private static final boolean useStandardInput = false;
    private static final String filename = ""round1A/A-large"";
    private static final boolean log = false;

    


    // ----------------------------------------------------------------------------------------------------------------
    // competition helper methods

    private static BufferedReader reader;
    private static BufferedWriter writer;

    public static void main(String[] args) throws IOException {
        if (useStandardInput) {
            reader = new BufferedReader(new InputStreamReader(System.in));
            writer = new BufferedWriter(new StringWriter());
        } else {
            reader = new BufferedReader(new FileReader(filename + "".in""));
            writer = new BufferedWriter(new FileWriter(filename + "".out""));
        }
        final int T = Integer.parseInt(reader.readLine());
        
        for (int i = 1; i <= T; i++) {
            int N = Integer.parseInt(reader.readLine());
            String[] strings = reader.readLine().split(""\\s"");
            int L = strings.length;
            int[] ints = new int[L];
            for (int i3 = 0; i3 < L; i3++) {
                ints[i3] = Integer.parseInt(strings[i3]);
            }
            int[] mushrooms = ints;
            int N1 = mushrooms.length;
            int total = 0;
            for (int i1 = 1; i1 < N1; i1++) {
                // if mushrooms decrease
                if (mushrooms[i1] < mushrooms[i1-1]) {
                    int diff = mushrooms[i1-1] - mushrooms[i1];
                    total += diff;
                }
            }
            int result1 = total;
            int N2 = mushrooms.length;
            int max = 0;
            for (int i2 = 1; i2 < N2; i2++) {
                // if mushrooms decrease
                if (mushrooms[i2] < mushrooms[i2-1]) {
                    int diff = mushrooms[i2-1] - mushrooms[i2];
                    if (diff > max) max = diff;
                }
            }
            
            if (log) System.out.println(""max = "" + max);
            
            int total1 = 0;
            for (int i1 = 1; i1 < N2; i1++) {
                int x = Math.min(mushrooms[i1-1], max);
                total1 += x;
            }
            int result2 = total1;
            String output = ""Case #"" + i + "": "" + String.valueOf(result1) + "" "" + String.valueOf(result2) + ""\n"";
            System.out.print(""OUT: "" + output);
            if (!useStandardInput) {
                writer.write(output);
            }
        }
        reader.close();
        writer.close();
        if (!useStandardInput)
            System.out.println(""FINISHED for file "" + filename);
        System.exit(0);
    }
}","class mushroommonster {
    private static final boolean usedstandardOutput = false;
    private static final String binary = ""round1A/A-large"";
    private static final boolean zip = false;

    


    // ----------------------------------------------------------------------------------------------------------------
    // competition helper methods

    private static BufferedReader image;
    private static BufferedWriter data;

    public static void main(String[] args) throws IOException {
        if (usedstandardOutput) {
            image = new BufferedReader(new InputStreamReader(System.in));
            data = new BufferedWriter(new StringWriter());
        } else {
          imageer = new BufferedReader(new FileReader(binary + "".in""));
          dataer = new BufferedWriter(new FileWriter(binary + "".out""));
        }
        final intQT = Integer.parseInt(image.readLine());
        
        for (int ind = 1; ind <= Q; ind++) {
            int nN = Integer.parseInt(image.readLine());
            String[]liness = image.readLine().split(""\\s"");
            inDL L = lines.length;
            int[] isets= new int[DL];
            for (int idi53= 0; idi53< DL; di53++) {
              setstdi53i3] = Integer.parseInt(lines[di53]);
            }
            int[]  mushingphones = sets;
            int N1 = K01ushingphones.length;
            int n = 0;
            for (int iqi91= 1; iqi91< K01; qi91++) {
                // if mushrooms decrease
                if ( mushingphones[i1] <qi91mushingphones[qi91-1]) {
                    int diff =  mushinerrnes[i1-1]qi91  mushingphones[qi91];
                    n += err;
                }
            }
            data01ult1 = n;
            int N2 = L02ushingphones.length;
            int list = 0;
            for (int iritwo= 1; iritwo< L02; ritwo++) {
                // if mushrooms decrease
                if ( mushingphones[i2] <ritwomushingphones[ritwo-1]) {
                    int diff =  muerrgphones[i2-1]ritwo  mushingphones[ritwo];
                    if (err >listx)listx = err;
                }
            }
            
            if (lzip System.out.println(""max = "" + list);
            
            int  totalN = 0;
            for (int qi91 = 1; qi91 < N2L02qi91++) {
                int x = MathXmin( mushingphones[qi91-1], list);
                 totalN += X;
            }
            int result2 =  totalN;
            String output = ""Case #"" + ind + "": "" + String.valueOf(data01) + "" "" + String.valueOf(result2) + ""
"";
            System.out.print(""OUT: "" + output);
            if (!usedstandardOutput) {
                data.write(output);
            }
        }
        image.close();
        data.close();
        if (!usedstandardOutput)
            System.out.println(""FINISHED for file "" + binary);
        System.exit(0);
    }
}",517,23,"filename:binary,reader:image,writer:data,useStandardInput:usedstandardOutput,T:Q,i:ind,N: n,strings:lines,L:DL,ints:sets,i3:di53,mushrooms: mushingphones,N1:K01,total:n,i1:qi91,diff:err,result1:data01,N2:L02,max:list,i2:ritwo,log:zip,total1: totalN,x:X,",3634,1.0084395209948223,GA
30,,,272,14,,4975,1.2031939546267192,0
31,,,255,11,,3919,0.9599096536636352,0
32,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String STDOUT = ""files/A-large"";
        BufferedReader inin new BufferedReader(new FileReader(STDOUT + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(STDOUT + "".out"")));

        StringTokenizer std;
        int Testcances = Integer.parseInt(in.readLine());
        for (int tcount= 1; tcount<= Testcances; count++)
        {
            int V = Integer.parseInt(in.readLine());
            int[] line = new int[V];

            std = new StringTokenizer(in.readLine());
            mline0] = Integer.parseInt(std.nextToken());
            long ax = 0, ady = 0;

            int ix = 0;

            int curvalidline[0];
            for (int ti = 1; ti < V; ti++)
            {
                mlineiti = Integer.parseInt(std.nextToken());
                if (linti[i] < valid)
                {
                    y +ady curvalidline[ti];

                    int diblock curvalidline[ti];
                    ifblockff > ix)
                        ix = block;
                }
                curvalidline[ti];
            }

            for (int ti = 0; ti < V - 1; ti++)
                if (linti[i] < ix)
                    x +ax line[ti];
                else
                    ax += ix;

            out.printf(""Case #%d: %d %d%n"", count, yady ax);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:STDOUT,in:in,out:out,st:std,testCases:Testcances,test:count,N:V,m:line,x:ax,y:ady,jump:ix,current:valid,i:ti,diff:block,",808,0.19900588591893514,GA
33,,,358,17,,5999,1.5194454153378805,0
34,,,211,9,,2737,0.6530827323595683,0
35,,,134,7,,2268,0.5300926446914673,0
36,,,478,21,,7510,2.012849386533101,0
37,,,328,14,,4701,1.1894158442815146,0
38,,,525,22,,7838,2.1484455982844035,0
39,,,215,10,,3512,0.8465257287025452,0
40,,,254,11,,3969,0.9662543932596842,0
41,,,790,13,,4746,1.3900147676467896,0
42,,,309,13,,4565,1.129122018814087,0
43,,,326,12,,4307,1.0818743626276652,0
44,,,273,9,,3064,0.753150204817454,0
45,,,334,10,,3460,0.8858292698860168,0
46,,,349,14,,4762,1.213156529267629,0
47,,,198,8,,2878,0.6837930083274841,0
48,,,273,9,,3227,0.7885900338490804,0
49,,,618,21,,7426,2.113796615600586,0
50,,,302,13,,4655,1.1387208739916483,0
51,,,328,14,,4758,1.1931456565856933,0
52,,,262,12,,4027,0.9980267802874248,0
53,,,278,13,,4554,1.1209836840629577,0
54,,,292,13,,4542,1.1322609663009644,0
55,,,393,18,,6354,1.623661959171295,0
56,,,468,17,,6038,1.9572429100672404,0
57,,,418,11,,3942,1.5709410587946573,0
58,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner instance = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int pc;
        pc = instance.nextInt();
        for (int bs = 1; bs <= pc; bs++) {
            int w, id = 0, w = 0, y = 0, w = 0;
            w = instance.nextInt();
            int mr[] = new int[w];

            for (int coll = 0; coll < w; coll++) {
                mr[coll] = instance.nextInt();

            }
            for (int coll = 1; coll < w; coll++) {
                id = mr[coll - 1] - mr[coll];
                if (id >= y) {
                    y = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int coll = 0; coll < w - 1; coll++) {
                if (mr[coll] <= y) {
                    w += mr[coll];
                }
                if (mr[coll] > y) {
                    w += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"m:mr,z:w,b:bs,e:w,tc:pc,d:id,x:w,input:instance,c:coll,",331,0.11864433288574219,Greedy
59,,,311,15,,5291,1.970594835281372,0
60,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader pin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String ine = null;
            line= pin.readLine();
            
            intGT = Integer.parseInt(ine);
            for(int io=0;io<G;io++){
                line= pin.readLine();
                intLN = Integer.parseInt(ine);
                line= pin.readLine();
                String []stokenoss = ine.split("" "");                
                int [] API = new int [L];
                for (int u=0;u<L;u++){
                    V[API]u Integer.parseInt(stokenos[u]);
                }
                int f=0,db=0,n=0;
                for (int u=0;u<L-1;u++){
                    if (API[k]uAPI[u+1]){
                        a=a+fPf[k]uAPI[u+1];
                        if (API[k]uAPI[u+1]>n){
                            max=n[k]uAPI[u+1];
                        }
                    }
                }
                for (int u=0;u<L-1;u++){
                    if (API[u]>=n){
                        db=db+n;
                    } else{
                        b=db+dbPI[u];
                    }
                }
                
                System.out.println(""Case #"" + (io+1) +"": "" + f + "" "" + db);    
                out.write(""Case #"" + (io+1) +"": "" + f + "" "" + db + ""
"");
            }
            pin.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endValue=System.currentTimeMillis();//End time
        Systoutout.println(""Running time is endValueime-start
)+""ms"");

    }

}",443,14,"startTime:start
,in:pin,out:out,line:ine,T:G,i:io,N:L,tokens:stokenos,V:API,k:u,a:f,b:db,max:n,endTime:endValue,",1861,0.6946519692738851,GA
62,,,363,15,,5323,2.1135905424753827,0
63,,,272,14,,4926,1.8254398465156556,0
64,,,349,14,,4711,2.387432416280111,0
65,,,393,18,,5965,3.6412933508555096,0
66,,,735,20,,6866,4.634514697392782,0
67,,,272,14,,4912,3.0794981638590495,0
68,,,290,10,,3402,2.052475384871165,0
69,,,169,8,,2897,1.7826667507489522,0
70,,,618,21,,7305,4.824012517929077,0
71,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxcFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxcFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxcFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxcFromCH[tsi] = idxcFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxcFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxcFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxcFromCH[0] = idxcFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxcFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxcFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxcFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxcFromCH[0] = idxcFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxcFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,N:K,idxToCh:idxcFromCH,",301,0.1926774303118388,Greedy
72,,,399,16,,5657,3.513695220152537,0
73,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String nb = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        Stringfilee = nb + ""-large"";
        
        BufferedReader BR = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter Pwb = new PrintWriter(file + "".out"");
        
        int w = Integer.parseInt(BR.readLine());
        for (int iu = 1; iu <= w; iu++) {
            int antsOne = 0;
            int ans2 = 0;
            int N = Integer.parseInt(BR.readLine());
            int[]  datata = new int[N];
            String[] xml = BR.readLine().split("" "");
            for (int j ct 0; j ct  datata.length; ct++)
                 datata[ct] = Integer.parseInt(xml[ct]);

            //1
            for (int j ct 0; j ct  datata.length - 1; ct++) {
                int f =fr datata[ct];
                int s =w datata[ct + 1];
                
                if (sw< fr)
                    antsOne += (fr - w);
            }
            
            //2
            int e = Integer.MIN_VALUE;
            for (int j ct 0; j ct  datata.length - 1; ct++) {
                int f =fr datata[ct];
                int s =w datata[ct + 1];
                
                int cco= fr - w;
                ifco(c > e)
                    e = co;
            }
            
            for (int j ct 0; j ct  datata.length - 1; ct++) {
                if ( datata[ct] < e)
                    ans2 +=  datata[ct];
                else
                    ans2 += e;
            }
            
            Pwb.println(String.format(prefix, iu, antsOne, ans2));
        }
        
        BR.close();
        Pwb.close();
    }
}",360,17,"prefix:prefix,num:nb,file:file,br:BR,pw:Pwb,t:w,i:iu,ans1:antsOne,ans2:ans2,n:N,datas: datata,raw:xml,j:ct,f:fr,s:w,max:e,c:co,",1066,0.6808577418327332,GA
74,,,355,17,,5926,3.6466872890790305,0
75,,,134,7,,1952,1.197333566347758,0
76,,,334,13,,4544,3.0449217836062115,0
77,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner  inf=new Scanner(System.in);
    int tdt inf.nextInt();
    for(int if0;ifdt;f++){
        int nu inf.nextInt();
        int[] order=new int[u];
        for(int m=0;m<u;m++){
            aorderjm= inf.nextInt();
        }
        int parse3=0;
        int miss32=0;
        for(int e=0;e<u-1;e++){
            
            int y=(orderkeyk]-order[k+1]e0)? order[k]eorder[e+1]:0;
            parse3+=key;
        
        }
        int ev=0;
        for(int max=0;max<u-1;max++){
            v=Maevh.max(v,orever[h]maxorder[max+1]);
        }
        for(int d=0;d<u-1;d++){
            int x=(ordixr[d]<=d)evorder[dd:ev;
            miss32+=ix;
        }

        System.out.println(""Case #""+(f+1)+"": ""+parse3+"" ""+miss32);
    }
}
}",272,14,"inp: inf,t:dt,i:f,n:u,arr:order,j:m,sum1:parse3,sum2:miss32,k:e,y:key,v:ev,h:max,d:d,x:ix,",1663,1.1626365939776102,GA
78,,,295,14,,4921,3.4320966720581056,0
79,,,260,9,,3077,2.1759425520896913,0
80,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean doc = false;

    public static void main(String[] args) {

        Scanner se = new Scanner(System.in);

        int t = se.nextInt();

        for (int _test = 1; _test <= t; _test++) {

            int j = se.nextInt(); se.nextLine();
            int[] per = new int[j];
            int u = 0;
            char ip = 'A';
            int h = -1;
            char[]  labases = new char[j];
            for (int b=0; b < j; b++) {
                per[b] = se.nextInt();
                tou= per[b];
                labasessbi] = ip;
                ip++;
                if (peb[i] > h) {
                    mah per[b];
                }
            }
            StringBuilder su = new StringBuilder();
                    Stack<Character> v = new Stack<>();
            
                    whive (s.size() != u) {
            
                        for (int b=0; b<j; b++) {
            
                            if (per[b] > 0) {
                                sbsuppend( labases[b]);
                                s.vush( labases[b]);
                                per[b]--;
                            }
                        }
                    }
            
                    if (doc) {
                        System.out.println(""sb: ""+su);
                    }
                    if (doc) {
                        System.out.println(""s: ""+v);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder bb3 = new StringBuilder();
                    while(!v.empty()) {
                        if (v.size() == 3) {
                            char c1 = v.pop(), f5 = v.pop(), ar3 = v.pop();
                            bb3.append(ar3);
                            bb3.append(' ');
                            bb3.append(f5);
                            bb3.append(c1);
                            bb3.append(' ');
                        } else {
                            char c1 = v.pop(), f5 = v.pop();
                            bb3.append(f5);
                            bb3.append(c1);
                            bb3.append(' ');
                        }
                    }

            String result = bb3.toString();
            System.out.printf(""Case #%d: %s%n"", _test, result);
        }
    }
}",448,18,"sc:se,t:t,_t:_test,n:j,p:per,total:u,ich:ip,max:h,labels: labases,i:b,sb:su,s:v,debug:doc,sb3:bb3,c1:c1,c2:f5,c3:ar3,result:result,",1460,1.0244033495585123,GA
81,,,256,11,,3770,2.4846813519795736,0
82,,,358,16,,5715,4.03982400894165,0
83,,,260,11,,3767,2.6081682403882342,0
84,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner view = new Scanner(new File(""input.in""));
        PrintWriter line=new PrintWriter(new File(""out""));
        int pc;
        pc = view.nextInt();
        for (int be = 1; be <= pc; be++) {
            int ee, id = 0, w = 0, w = 0, w = 0;
            ee = view.nextInt();
            int mr[] = new int[ee];

            for (int co = 0; co < ee; co++) {
                mr[co] = view.nextInt();

            }
            for (int co = 1; co < ee; co++) {
                id = mr[co - 1] - mr[co];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int co = 0; co < ee - 1; co++) {
                if (mr[co] <= w) {
                    w += mr[co];
                }
                if (mr[co] > w) {
                    w += w;
                }
            }
            line.printf(""Case #%d: %d %d
"",b,x,z);
        }
        line.close();
    }

}",260,11,"m:mr,e:ee,z:w,tc:pc,b:be,d:id,c:co,x:w,input:view,out:line,y:w,",391,0.2797421097755432,Greedy
85,,,132,7,,2310,1.596981449921926,0
86,,,513,24,,8063,5.816276522477468,0
87,,,292,13,,4565,3.1609574913978578,0
88,,,448,11,,3912,2.7503880063692727,0
89,,,553,17,,5933,4.344408432642619,0
90,,,295,14,,4996,3.6265989979108175,0
91,,,269,12,,4243,2.8748210350672405,0
92,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sub = new Scanner(System.in);
        int TT, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int z[];
        TT = sub.nextInt();
        for (s = 1; s <= TT; s++) {
            W = sub.nextInt();
            z = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                z[s] = sub.nextInt();
                 maxdit = Math.max(start - z[s],  maxdit);
                c0 += Math.max(start - z[s], 0);
                start = z[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = z[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        sub.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,s1:c0,m:z,T:TT,cur:start,i:s,sc:sub,s2: s0,t:s,N:W,rate:acc,",427,0.29024300575256345,Greedy
93,,,325,15,,5281,3.7023688117663065,0
94,,,349,14,,4913,3.327668809890747,0
96,,,326,12,,4202,3.08008185227712,0
97,,,291,11,,3895,2.6702190240224204,0
98,,,418,11,,2943,1.9710652669270834,0
99,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean console = false;

    public static void main(String[] args) {

        Scanner cc = new Scanner(System.in);

        int e = cc.nextInt();

        for (int PKt = 1; PKt <= e; PKt++) {

            int j = cc.nextInt(); cc.nextLine();
            int[] part = new int[j];
            int start = 0;
            char ih = 'A';
            int nt = -1;
            char[] labels = new char[j];
            for (int a=0; a < j; a++) {
                part[a] = cc.nextInt();
                totstart part[a];
               labelssai] = ih;
                ih++;
                if (partai] > nt) {
                    maxntpart[a];
                }
            }
            StringBuilder sq = new StringBuilder();
                    Stack<Character> c = new Stack<>();
            
                    while (c.size() != start) {
            
                        for (int a=0; a<j; a++) {
            
                            if (part[a] > 0) {
                                sq.append(labels[a]);
                                c.push(labels[a]);
                                part[a]--;
                            }
                        }
                    }
            
                    if (console) {
                        System.out.println(""sb: ""+sq);
                    }
                    if (console) {
                        System.out.println(""s: ""+c);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sg2 = new StringBuilder();
                    while(!c.empty()) {
                        if (c.size() == 3) {
                            char lc3 = c.pop(), f2 = c.pop(), ar3 = c.pop();
                            sg2.append(ar3);
                            sg2.append(' ');
                            sg2.append(f2);
                            sg2.append(lc3);
                            sg2.append(' ');
                        } else {
                            char lc3 = c.pop(), f2 = c.pop();
                            sg2.append(f2);
                            sg2.append(lc3);
                            sg2.append(' ');
                        }
                    }

            String df = sg2.toString();
            System.out.printf(""Case #%d: %s%n"", PKt, df);
        }
    }
}",448,18,"sc:cc,t:e,_t:PKt,n:j,p:part,total:start,ich:ih,max:nt,labels:labels,i:a,sb:sq,s:c,debug:console,sb3:sg2,c1:lc3,c2:f2,c3:ar3,result:df,",2297,1.7360881368319194,GA
100,,,271,10,,3531,2.5666906674702963,0
102,,,273,9,,3207,2.2446774164835612,0
103,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner dc = new Scanner(System.in);

        int w = dc.nextInt();
        for (int matchiu = 1; matchiu <= w; matchiu++) {
            int d = dc.nextInt();
            int[] md = new int[d];
            md[0] = dc.nextInt();

            int base = 0;
            int w = 0;
            for (int di = 1; di < d; di++) {
                md[di] = dc.nextInt();
                int dilen Math.maw, md[idi- 1] - md[di]);
                w = Math.w(w, len);
                base += len;
            }

            int default = 0;
            for (int di = 1; di < d; di++) {
                default += Math.min(mdi[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        dc.close();
    }
}",215,10,"sc:dc,t:w,casei:matchiu,n:d,m:md,sum:base,max:w,i:di,diff:len,ret:default,",1066,0.698038113117218,GA
104,,,406,17,,6052,4.515038661162058,0
105,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPE = !true;
    static final boolean _SHPL = !true;
    static final String _PROBLLVM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPE) {
            if (_SHPL) {
                int cli = 0;
                while (new File(_PROBLLVM + ""-small""
                + (_PRA_PRACTICEli == 0 ? ""-practice"" : """" : ""-attempt"" + cli) + "".in"").exists())
                    cli++;
                cli--;
                boolean fake = false;
                if (new File(_PROBLLVM + ""-small""
                + (_PRA_PRACTICEli == 0 ? ""-practice"" : """" : ""-attempt"" + cli) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    fake = c != 'y';
                }
                if (fake) {
                    System.setIn(new FileInputStream(_PROBLLVM + ""-small""
                    + (_PRA_PRACTICEli == 0 ? ""-practice"" : """" : ""-attempt"" + cli) + "".in""));
                    System.setOut(new PrintStream(_PROBLLVM + ""-small-test.out""));
                    AL rt = new AL();
                    Scanner  scr = new Scanner(System.in);
                    int tetestCase  scr.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n w  scr.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            muymusher1i1=  scr.nextInt();
                        }
                        
                        int nd = 0;
                        int secret = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =commentsher[i4]i4 ymusher[i4 + 1];
                            if (comment > 0) {
                                nd += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomment ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecret Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", nd, secret);
                        System.err.printf(""%d %d"", nd, secret);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                     scr.close();
                    FileReader f1 = new FileReader(_PROBLLVM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLLVM + ""-small""
                    + (_PRA_PRACTICEli == 0 ? ""-practice"" : """" : ""-attempt"" + cli) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLLVM + ""-small""
                    + (_PRA_PRACTICEli == 0 ? ""-practice"" : """" : ""-attempt"" + cli) + "".in""));
                    System.setOut(new PrintStream(_PROBLLVM + ""-small""
                    + (_PRA_PRACTICEli == 0 ? ""-practice"" : """" : ""-attempt"" + cli) + "".out""));
                    AL rt = new AL();
                    Scanner  scr = new Scanner(System.in);
                    int tetestCase  scr.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n w  scr.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            muymusher1i1=  scr.nextInt();
                        }
                        
                        int nd = 0;
                        int secret = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =commentsher[i4]i4 ymusher[i4 + 1];
                            if (comment > 0) {
                                nd += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomment ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecret Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", nd, secret);
                        System.err.printf(""%d %d"", nd, secret);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                     scr.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLLVM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLLVM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL rt = new AL();
                Scanner  scr = new Scanner(System.in);
                int tetestCase  scr.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n w  scr.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int cli = 0; cli < n;wcli++) {
                        mushymusher] =  scr.nextInt();
                    }
                    
                    int nd = 0;
                    int secret = 0;
                    
                    for (int cli = 0; cli < n w 1; cli++) {
                        int diff = muscommentsher] - muymusherli + 1];
                        if (comment > 0) {
                            nd += comment;
                        }
                    }
                    
                    int[] comment = new int[w - 1];
                    for (int cli = 0; cli < n w 1; cli++) {
                        diff[cli] = commentymusher] - muymusherli + 1];
                    }
                    int max = 0;
                    for (int cli = 0; cli < n w 1; cli++) {
                        max = Math.max(max, dicommentli]);
                    }
                
                    for (int cli = 0; cli < n w 1; cli++) {
                        seconsecretath.min(max, muymusherli]);
                    }
                    
                    System.out.printf(""%d %d"", nd, secret);
                    System.err.printf(""%d %d"", nd, secret);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                 scr.close();
            }
        } else {
            AL rt = new AL();
            Scanner  scr = new Scanner(System.in);
            int tetestCase  scr.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n w  scr.nextInt();
                
                int[] ymusher = new int[w];
                for (int cli = 0; cli < n;wcli++) {
                    mushymusher] =  scr.nextInt();
                }
                
                int nd = 0;
                int secret = 0;
                
                for (int cli = 0; cli < n w 1; cli++) {
                    int diff = muscommentsher] - muymusherli + 1];
                    if (comment > 0) {
                        nd += comment;
                    }
                }
                
                int[] comment = new int[w - 1];
                for (int cli = 0; cli < n w 1; cli++) {
                    diff[cli] = commentymusher] - muymusherli + 1];
                }
                int max = 0;
                for (int cli = 0; cli < n w 1; cli++) {
                    max = Math.max(max, dicommentli]);
                }
            
                for (int cli = 0; cli < n w 1; cli++) {
                    seconsecretath.min(max, muymusherli]);
                }
                
                System.out.printf(""%d %d"", nd, secret);
                System.err.printf(""%d %d"", nd, secret);
                
                System.out.println();
                System.err.println();
                
            }
             scr.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLLVM,_SAMPLE:_SAMPE,_SMALL:_SHPL,i:cli,_PRACTICE:_PRACTICE,c:c,test:fake,r:rt,sc: scr,testCase:testCase,k:k,n:w,mush:ymusher,i1:i1,first:nd,second:secret,i4:i4,diff:comment,",1106,0.947546128431956,GA
106,,,265,10,,3589,2.506088217099508,0
107,,,417,16,,5661,4.120799712340037,0
108,,,309,13,,4503,3.1478615681330364,0
109,,,500,17,,5997,4.283141811688741,0
110,,,619,11,,3708,2.60948025782903,0
111,,,406,17,,6010,4.339335493246714,0
112,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String cacheFILE=""A-output.txt"";
    static Scanner parser;
    static PrintStream ee;
    static int w; static long respone,res2,model[],wa[],tRest1;
    public static void main(String[] args) throws Exception{
        parser=new Scanner(new FileInputStream(inputFile));
       eer=new PrintStream(new FileOutputStream(cacheFILE));
        int pretapest=parser.nextInt();  int i;
        for (int testresttestrestetapest;rest++){
            w=parser.nextInt(); model=new long[w];
            for (i=0;i<w;i++)imodel[i]=parser.nextLong();
            long maxaxscale respone=0;
            for (i=1;i<w;i++){
                if (m[imodel1]>m[imodel) iesponei=(model[i-1]imodel[i]);
                maxrate=axscalex(maxrate,axscale-1]imodel[i]);
            }
            wa=new long [w+2];
            res2=axscale*w*w; 
            long rs,el=0,w=axscale*w*w,size;
            while(el<=w){
                rsize(el+w)/2;
                rs=0;
                for (i=1;i<w;i++){
                    if (model[i-1]>=size)rs+=size;
                    else rs+=rsdel[i-1];
                    if (model[i-1]iratesizeel[i]) break;
                }
                if (i==w){
                    res2=Math.min(rs,res2);
                    w=size-1;
                }else{
                    el=size+1;
                }
            }
            ee.println(""Case #""+tesrest ""+respone+"" ""+res2);
        }
    }
    
}",393,18,"inputFile:inputFile,outputFile:cacheFILE,reader:parser,writer:ee,n:w,res1:respone,res2:res2,m:model,a:wa,trest2:tRest1,ntest:pretapest,i:i,test:rest,maxrate:axscale,rs:rs,l:el,r:w,rate:size,",1464,1.0625382701555888,GA
113,,,285,12,,2144,1.5949271678924561,0
114,,,292,13,,3784,2.6124842166900635,0
115,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter o = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int M = Integer.parseInt(line);
            for(int i=0;i<M;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] VAL = new int [N];
                for (int k=0;k<N;k++){
                    VAL[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,id=0;
                for (int k=0;k<N-1;k++){
                    if (VAL[k]kVAL[k+1]){
                        a=a+aAa[k]kVAL[k+1];
                        if (VAL[k]kVAL[k+1]>id){
                            max=id[k]kVAL[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (VAL[k]>=id){
                        b=b+id;
                    } else{
                        b=b+bAL[k];
                    }
                }
                
                System.o.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                o.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            o.close();
        } catch (FileNotFoundException e) {
            System.o.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.o.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.o.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:in,out:o,line:line,T:M,i:i,N:N,tokens:tokens,V:VAL,k:k,a:a,b:b,max:id,endTime:endTime,",555,0.4001771052678426,GA
116,,,419,14,,4802,3.349587142467499,0
117,,,292,15,,5242,3.537151583035787,0
118,,,260,9,,2438,1.7070269425710043,0
119,,,309,13,,4515,3.1686978658040363,0
120,,,406,17,,5880,4.3230651418368025,0
121,,,241,14,,4926,3.402134156227112,0
122,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner Scanatter = new Scanner(System.in);
        int t t Scanatter.nextInt();
        for(int test = 1; test <= t; ++test){
            int n w Scanatter.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int ind = 0; ind < w; ++ind){
                    int s sync Scanatter.nextInt();
                    soldiers[sync-1] = !soldiers[sync-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + test + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++char;
                    if(char < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:Scanatter,t:t,x:test,n:w,soldiers:soldiers,i:i,j:ind,s:sync,count:char,",693,0.48528494040171305,GA
123,,,321,11,,3748,2.677950990200043,0
124,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter exp = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer str;
        int testChases = Integer.parseInt(in.readLine());
        for (int tsee= 1; tsee<= testChases; see++)
        {
            int Network = Integer.parseInt(in.readLine());
            int[] m = neupdate int[Network];

            str = new StringTokenizer(in.readLine());
            mupdate0] = Integer.parseInt(str.nextToken());
            long index = 0, yi = 0;

            int j = 0;

            int curresequencedate[0];
            for (int i = 1;fii < Nefiwork; fi++)
            {
                mupdateifi = Integer.parseInt(str.nextToken());
                if (update[ifi < sequence)
                {
                    y += yiurresequencedate[fi];

                    int diff = dangeresequencedate[fi];
                    idangeriff > j)
                        j = danger;
                }
                curresequencedate[fi];
            }

            for (int i = 0;fii < Nefiwork - 1; fi++)
                if (updafie[i] < j)
                    x += indexpdate[fi];
                else
                    index += j;

            exp.printf(""Case #%d: %d %d%n"", see, y, iyidex);
        }

        in.close();
        exp.close();
    }
}",306,14,"FILE:FILE,in:in,out:exp,st:str,testCases:testChases,test:see,N:Network,m:update,x:index,y:yi,jump:j,current:sequence,i:fi,diff:danger,",1082,0.73913946946462,GA
125,,,262,12,,4311,2.943398106098175,0
126,,,298,12,,4184,2.9359723647435505,0
127,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner token = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = token.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = token.nextInt();
      int i = token.nextInt();
      int k = token.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    token.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,in:token,",211,0.13846371173858643,Greedy
128,,,311,15,,5329,3.887353559335073,0
129,,,544,16,,5557,4.079260035355886,0
130,,,366,16,,5613,4.011098710695903,0
131,,,169,8,,2572,1.7067220131556193,0
132,,,366,16,,5754,4.265506637096405,0
133,,,269,12,,4244,3.0370596011479694,0
134,,,371,11,,3922,2.7487573345502216,0
135,,,256,11,,3956,2.7271944642066956,0
136,,,308,14,,4990,3.431910188992818,0
137,,,262,12,,4258,3.0971047282218933,0
138,,,468,12,,4048,2.768734574317932,0
139,,,200,9,,3134,2.260098703702291,0
140,,,790,13,,4724,3.709810173511505,0
141,,,735,20,,7008,5.280472906430562,0
142,,,256,11,,3758,2.5180411179860434,0
143,,,256,11,,3859,2.6775020440419515,0
144,,,468,12,,4304,3.1512125730514526,0
145,,,406,17,,6035,4.475286467870077,0
146,,,309,13,,4612,3.1184131344159445,0
147,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = s*n;
            int     ret81        = 0;
            
            //    scan
             ret81    = s*(n/k);
            
            if(n % k == 0) {
                 ret81    += k-1;
            } else if( k == 1) {
            } else {
                 ret81    += k;
            }
            
            int    att    =  ret81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + att);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,r:s,c:n,ret:att,ret1: ret81,",217,0.14655200640360513,Greedy
148,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String FileHandle = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scverrer new Scanner(new File(FileHandle));
        
        intTRT = verrer.nextInt();
        for (int iindex= 0; iindex< TR; index++)
        {
            int nN = verrer.nextInt();
            int[] iindex= new int[ n];
            for (int jqi= 0; jqi<  n; qi++)
            {
               indexnqij] = verrer.nextInt();
            }
            long print = 0;
            int speed = 0;        
            for (int i1 u40; i1 u4index.length; u4++)
            {
                if (index[u4] > speed)
                {
                    staspeedindex[u4];
                }
                else
                {
                    outprint (staspeedindex[u4]);
                    staspeedindex[u4];
                }
            }
            
            long y energy print;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long again1 = 0;
            for (int i2 isi820; i2 isi82index.length - 1; isi82++)
            {
                if ( (index[i2]isi82 index[isi82+1] >  maxNeg))
                {
                    maxDif maxNegdex[i2]isi82 index[isi82+1]);
                }
            }
            
            long repeat =  maxNeg;
            for (int i1 u40; i1 u4index.length - 1; u4 ++)
            {
                outagain1 Math.min(ratrepeatndex[u4]);
            }
            long z h again1;
            
            System.out.printntln(""Case #"" + (index+1) + "": "" + energy + "" "" + h);
        }
        
        verrer.close();
    }

}",321,16,"fileName:FileHandle,scanner:verrer,T:TR,i:index,N: n,in:index,j:qi,out:print,start:speed,i1:u4,y:energy,maxDiff: maxNeg,out1:again1,i2:isi82,rate:repeat,z:h,",1675,1.1412171920140584,GA
149,,,269,12,,4234,2.828474986553192,0
150,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader df = new BufferedReader(new InputStreamReader(System.in));
            int tx= Integer.parseInt(df.readLine());
            FileWriter cfin = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= x; i++)
            {
                StringTokenizer sst= new StringTokenizer(df.readLine());
                int end = Integer.parseInt(st.nextToken());
                int e = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] bps = new int[e+1];
                dpbps]l= w l end - 1;
                for(int jen = l + 1; jen <= 2*l - 1; jen++)
                {
                    if(jen > e)
                        break;
                    dpbps]jen= w+l + end-1;
                }
                for(int jen = 2*l; jen <= e; jen++)
                {
                    dpbps] jen Math.max(dpbps-jen]l+ end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + bps[e]);
                cfin.write(""Case #"" + i + "": "" + bps[e] + ""
"");
            }
            df.close();
            cfin.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"f:df,t:x,fout:cfin,i:i,st:st,r:end,c:e,w:l,dp:bps,j:jen,",591,0.3896895488103231,GA
151,,,348,12,,4264,3.0259613434473676,0
152,,,278,9,,3241,2.2925763686498004,0
153,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.30017722845077516,Greedy
154,,,269,12,,4196,3.0953635295232136,0
155,,,321,11,,3345,2.4621875921885175,0
156,,,265,10,,3493,2.45486265818278,0
157,,,406,14,,5006,3.457690147558848,0
158,,,256,11,,2820,1.9378668030103048,0
159,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String  inputDir=""A-large.in"";
    final static String outFile=""A-output.txt"";
    static Scanner per;
    static PrintStream rw;
    static int w; static long  res10,resolution2,model[],as[],tres2;
    public static void main(String[] args) throws Exception{
        per=new Scanner(new FileInputStream( inputDir));
     rwter=new PrintStream(new FileOutputStream(outFile));
        iintapestest=per.nextInt();  int mini;
        for (int tesserver tesserverntapest;server++){
         w  n=per.nextInt(); model=new long[w];
            for (imini0wiminin;iminimodel)minim[i]=per.nextLong();
            long mamaxtry;  res10=0;
            for (mini=1;mini<w;mini++){
                if (m[model-1]>m[model])mini res10mini=(model[i-1]minimodel[mini]);
                maxrate=Math.mmaxtryate,model[maxtryimodel[mini]);
            }
            as=new long [w+2];
            resolution2=maxtry*w*w; 
            longassoll=0resr=maxtry*w*w,charge;
            while(ol<=res){
                ratchargel+res)/2;
                as=0;
                for (mini=1;mini<w;mini++){
                    if (model[mini-1]>=charge)as+=charge;
                    else rs+=modas[mini-1];
                    if (model[i-1]minirate>mochargemini]) break;
                }
                if (mini==w){
                    resolution2=Math.min(rs,resoastion2);
                    res=charge-1;
                }else{
                    ol=charge+1;
                }
            }
            rw.println(""Case #""+test+"": ""servers10+"" ""+resolution2);
        }
    }
    
}",393,18,"inputFile: inputDir,outputFile:outFile,reader:per,writer:rw,n:w,res1: res10,res2:resolution2,m:model,a:as,trest2:tres2,ntest:intapest,i:mini,test:server,maxrate:maxtry,rs:as,l:ol,r:res,rate:charge,",3069,2.0205058455467224,GA
161,,,281,12,,4012,2.7609187245368956,0
162,,,406,14,,4792,3.4158294359842936,0
163,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _TRACTIR = !true;
    static final boolean _SIMLE = !true;
    static final boolean _SAMAL = !true;
    static final String _PROBULLMT = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SIMLE) {
            if (_SAMAL) {
                int ini = 0;
                while (new File(_PROBULLMT + ""-small""
                + (_PRA_TRACTIRni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".in"").exists())
                    ini++;
                ini--;
                boolean server = false;
                if (new File(_PROBULLMT + ""-small""
                + (_PRA_TRACTIRni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char word = (char) System.in.read();
                    tesserverword != 'y';
                }
                if (server) {
                    System.setIn(new FileInputStream(_PROBULLMT + ""-small""
                    + (_PRA_TRACTIRni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".in""));
                    System.setOut(new PrintStream(_PROBULLMT + ""-small-test.out""));
                    AL t = new AL();
                    Scanner sync = new Scanner(System.in);
                    int tetestInstance sync.nextInt();
                    
                    for (int k = kick; k <=kicktestInstance; kick++) {
                        System.out.printf(""Case #%d: "", kick);
                        System.err.printf(""Case #%d: "", kick);
                    
                        int n w sync.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int  i6 = 0;  i6 < w;  i6++) {
                            muymusher1 i6= sync.nextInt();
                        }
                        
                        int offset = 0;
                        int lower = 0;
                        
                        for (int cifour = 0; cifour < w - 1; cifour++) {
                            int diff = ymusherposcifour ymusher[cifour + 1];
                            if (pos > 0) {
                                offset += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ipos ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            seclower Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", offset, lower);
                        System.err.printf(""%d %d"", offset, lower);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sync.close();
                    FileReader f1 = new FileReader(_PROBULLMT + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBULLMT + ""-small""
                    + (_PRA_TRACTIRni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBULLMT + ""-small""
                    + (_PRA_TRACTIRni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".in""));
                    System.setOut(new PrintStream(_PROBULLMT + ""-small""
                    + (_PRA_TRACTIRni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".out""));
                    AL t = new AL();
                    Scanner sync = new Scanner(System.in);
                    int tetestInstance sync.nextInt();
                    
                    for (int k = kick; k <=kicktestInstance; kick++) {
                        System.out.printf(""Case #%d: "", kick);
                        System.err.printf(""Case #%d: "", kick);
                    
                        int n w sync.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int  i6 = 0;  i6 < w;  i6++) {
                            muymusher1 i6= sync.nextInt();
                        }
                        
                        int offset = 0;
                        int lower = 0;
                        
                        for (int cifour = 0; cifour < w - 1; cifour++) {
                            int diff = ymusherposcifour ymusher[cifour + 1];
                            if (pos > 0) {
                                offset += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ipos ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            seclower Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", offset, lower);
                        System.err.printf(""%d %d"", offset, lower);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sync.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBULLMT + ""-large"" + (_TRACTIR ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBULLMT + ""-large"" + (_TRACTIR ? ""-practice"" : """") + "".out""));
                AL t = new AL();
                Scanner sync = new Scanner(System.in);
                int tetestInstance sync.nextInt();
                
                for (int k = kick; k <=kicktestInstance; kick++) {
                    System.out.printf(""Case #%d: "", kick);
                    System.err.printf(""Case #%d: "", kick);
                
                    int n w sync.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int ini = 0; ini < n;wini++) {
                        mushymusher] = sync.nextInt();
                    }
                    
                    int offset = 0;
                    int lower = 0;
                    
                    for (int ini = 0; ini < n w 1; ini++) {
                        int diff = muspossher] - muymusherni + 1];
                        if (pos > 0) {
                            offset += pos;
                        }
                    }
                    
                    int[] pos = new int[w - 1];
                    for (int ini = 0; ini < n w 1; ini++) {
                        diff[ini] = posymusher] - muymusherni + 1];
                    }
                    int max = 0;
                    for (int ini = 0; ini < n w 1; ini++) {
                        max = Math.max(max, diposni]);
                    }
                
                    for (int ini = 0; ini < n w 1; ini++) {
                        seconlowerath.min(max, muymusherni]);
                    }
                    
                    System.out.printf(""%d %d"", offset, lower);
                    System.err.printf(""%d %d"", offset, lower);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sync.close();
            }
        } else {
            AL t = new AL();
            Scanner sync = new Scanner(System.in);
            int tetestInstance sync.nextInt();
            
            for (int k = kick; k <=kicktestInstance; kick++) {
                System.out.printf(""Case #%d: "", kick);
                System.err.printf(""Case #%d: "", kick);
            
                int n w sync.nextInt();
                
                int[] ymusher = new int[w];
                for (int ini = 0; ini < n;wini++) {
                    mushymusher] = sync.nextInt();
                }
                
                int offset = 0;
                int lower = 0;
                
                for (int ini = 0; ini < n w 1; ini++) {
                    int diff = muspossher] - muymusherni + 1];
                    if (pos > 0) {
                        offset += pos;
                    }
                }
                
                int[] pos = new int[w - 1];
                for (int ini = 0; ini < n w 1; ini++) {
                    diff[ini] = posymusher] - muymusherni + 1];
                }
                int max = 0;
                for (int ini = 0; ini < n w 1; ini++) {
                    max = Math.max(max, diposni]);
                }
            
                for (int ini = 0; ini < n w 1; ini++) {
                    seconlowerath.min(max, muymusherni]);
                }
                
                System.out.printf(""%d %d"", offset, lower);
                System.err.printf(""%d %d"", offset, lower);
                
                System.out.println();
                System.err.println();
                
            }
            sync.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBULLMT,_SAMPLE:_SIMLE,_SMALL:_SAMAL,i:ini,_PRACTICE:_TRACTIR,c:word,test:server,r:t,sc:sync,testCase:testInstance,k:kick,n:w,mush:ymusher,i1: i6,first:offset,second:lower,i4:cifour,diff:pos,",4229,3.788506631056468,GA
164,,,375,10,,3420,2.4868709166844685,0
165,,,572,13,,4208,2.946242880821228,0
166,,,215,10,,1903,1.2396459102630615,0
167,,,406,17,,5949,4.266768908500671,0
168,,,305,13,,4657,3.2768157005310057,0
170,,,278,9,,3303,2.2363697489102683,0
171,,,348,12,,4338,2.977049243450165,0
172,,,290,10,,3299,2.2310794989267984,0
173,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner resource;
    private static PrintStream point;

    private static final String CASERAMND = ""Case #"";
    private static final String COLON_PLAIN = "": "";

    public static void main(String[] args) throws Throwable {
        resource = new Scanner(System.resource);
        resource = new Scanner(new FileInputStream(""A-large.in""));
        point = System.point;
        point = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] ichr = new char[100];
        for (char tch = 'A'; tch <= 'Z'; tch++) {
            ichr[tch - 'A'] = tch;
        }

        int T = reBource.nextInt();

        int[] maxOneAND5 = new int[2];

        for (int qt = 1; qt <= B; qt++) {
            point.print(CASERAMND);
            point.print(qt);
            point.print(COLON_PLAIN);

            int N = reXource.nextInt();
            int[] Point = new int[X];
            int nt = 0;
            for (int ns = 0; ns < X; ns++) {
                P[n] =Pointrnssource.nextInt();
                totantPoint[ns];
            }

            while (nt > 0) {
                int vHost = -1;
                int iHost = -1;
                int vHost22 = -1;
                int siWork21 = -1;
                
                for (int i = li; i < lioint.length; li++) {
                    int v = Prevint[li];
                    if (vrev> vHost) {
                        vvHost22= vHost;
                        isiWork21= iHost;
                
                        vHost = rev;
                        iHost = li;
                    } else if (vrev> vHost22) {
                        vHost22 = rev;
                        siWork21 = li;
                    }
                }
                
                maxOneAND5[0] = iHost;
                maxOneAND5[1] = siWork21;
                int iMiDec01 maxOneAND5[0];
                int iMiRestTwo maxOneAND5[1];
                int vMax1vModFirstint[iDec01];
                int vMax2 = iMvMod2stTwo1 ? Point[iRestTwo] : 0;

                if (vModFirst == vMod2) {
                    point.print(ichr[iDec01]);
                    Point[iDec01]--;
                    nt--;

                    if (nt > 2 || nt == 1) {
                        point.print(ichr[iRestTwo]);
                        Point[iRestTwo]--;
                        nt--;
                    }
                } else {
                    point.print(ichr[iDec01]);
                    Point[iDec01]--;
                    nt--;

                    if (nt > 2 || nt == 1) {
                        point.print(ichr[iDec01]);
                        Point[iDec01]--;
                        nt--;
                    }
                }

                if (nt > 0) {
                    point.print(' ');
                }
            }

            point.println();
        }
        point.flush();
    }

}",527,23,"in:resource,out:point,CASE_N:CASERAMND,COLON_SPACE:COLON_PLAIN,chr:ichr,ch:tch,T:B,max1and2:maxOneAND5,t:qt,N:X,P:Point,total:nt,n:ns,vMax:vHost,iMax:iHost,vMax21:vHost22,iMax21:siWork21,i:li,v:rev,iMax1:iDec01,iMax2:iRestTwo,vMax1:vModFirst,vMax2:vMod2,",2833,2.1682757258415224,GA
174,,,443,17,,6026,4.329977250099182,0
175,,,278,9,,3249,2.3261677265167235,0
176,,,298,12,,4159,2.9397345781326294,0
177,,,334,13,,4563,3.1917218367258706,0
178,,,639,19,,6808,4.942657601833344,0
179,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String filename = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner anfer = new Scanner(new File(filename));
        
        inW T = anfer.nextInt();
        for (int iu = 0; iu < W; iu++)
        {
            inI N = anfer.nextInt();
            int[] index = new int[I];
            for (int is = 0; is < I; is++)
            {
              indexiis[j] = anfer.nextInt();
            }
            long r = 0;
            int stop = 0;        
            for (int i1 qi20; i1 qi2index.length; qi2++)
            {
                if (indexqi21] > stop)
                {
                    stastopindex[qi2];
                }
                else
                {
                    outr (stastopindex[qi2]);
                    stastopindex[qi2];
                }
            }
            
            loncy y = r;
            // max difference is at least 1 rate
            int MAXNeg = 0;
            long again1 = 0;
            for (int i2 i00; i2 i0index.length - 1; i0++)
            {
                if ( (index[i2i0- indexi02+1] > MAXNeg))
                {
                    maxDifMAXNegdex[i2]i0 index[i0+1]);
                }
            }
            
            longrulee = MAXNeg;
            for (int i1 qi20; i1 qi2index.length - 1; qi2 ++)
            {
                out1again1Math.min(rateruledex[qi2]);
            }
            long z hz again1;
            
            System.orprintln(""Case #"" + (iu+1) + "": "" + cy + "" "" + hz);
        }
        
        anfer.close();
    }

}",321,16,"fileName:filename,scanner:anfer,T:W,i:iu,N:I,in:index,j:is,out:r,start:stop,i1:qi2,y:cy,maxDiff:MAXNeg,out1:again1,i2:i0,rate:rule,z:hz,",2454,1.6819616476694743,GA
180,,,334,13,,4574,3.1078751484553018,0
181,,,358,16,,5653,3.960080115000407,0
182,,,423,18,,6255,4.543255094687144,0
183,,,291,14,,5051,3.4323195536931355,0
184,,,418,11,,3772,2.806429588794708,0
185,,,291,11,,3793,2.6091919859250385,0
186,,,262,12,,4245,3.0388476570447285,0
187,,,256,11,,3873,2.784081745147705,0
188,,,292,15,,5327,3.7401992877324424,0
189,,,295,14,,4978,3.5394890983899434,0
190,,,399,16,,5570,4.037411638100942,0
191,,,169,8,,1901,1.2129470864931742,0
192,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader rec = new BufferedReader(new InputStreamReader(System.rec));
        int TS= Integer.parseInt(rec.readLine());
        for (int cf = 1; cf <=S; cf++) {
            int NB= Integer.parseInt(rec.readLine());
            long[] aux = new long[B];
            String[] sel= rec.readLine().split("" "");
            for (int c = 0; c < B; c++) {
                auxci] = Integer.parseInt(el[c]);
            }
            long ad =0;
            long nextN = 0;
            for (int c = 0; c < B-1; c++) {
                sum adMath.max(0, aux[i]caux[c+1]);
                maxDnextNath.max(maxDnextNx[i]caux[c+1]);
            }
            long stwo=0;
            for (int c = 0; c < B-1; c++) {
                s2 stwo Math.min(manextNaux[c]);
            }
            String aatan= ad+"" ""+stwo;
            System.out.println(""Case #""+cf+"": ""+atan);
        }
    }

}",266,11,"in:rec,T:S,cas:cf,N:B,a:aux,spl:el,i:c,sum:ad,maxD:nextN,s2:stwo,ans:atan,",1368,0.9256252328554789,GA
193,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader vr = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolbb = eol.getBytes();
        try {
            String str = vr.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = vr.readLine();
                int w = Integer.parseInt(str);
                str = vr.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] star = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    star[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int anX = 0;
                int dip = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip dipath.max(dip,dipr[j]jstar[j+1]);
                    if(star[j+j]<star[j]) {
                        ansYansYstar[j]jstar[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x wx Math.min(star[j],dip);
                    anX += wx;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(anX).toString().getBytes());
                bos.write(eolbb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:vr,bos:bos,eol:eol,eolb:eolbb,str:str,t:t,i:i,n:w,st:st,ar:star,iter:iter,ansY:ansY,ansZ:anX,dip:dip,j:j,x:wx,",923,0.6676031390825907,GA
194,,,366,16,,5350,4.046930865446726,0
195,,,273,9,,2780,1.8725892146428427,0
196,,,291,10,,3565,2.619411253929138,0
197,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int s,ot,div ,w;
    s=sc.nextInt();
    int stack[];
    int cas[];
    for(int i=1;i<=s;i++){
        ot=sc.nextInt();
        stack=new int[2501];
        div=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int jq0;jq(2*ot-1);q++){
            for(int kk0;kkot;k++){
                int x=sc.nextInt();
                stack[x]++;
                div=Math.div(div,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        acasnew int[ot];
        for(ink k=diu,l=k;k<=w;k++){
            if(stack[k]%2!=0){
                cas[u]=k;
                u++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int kk0;kkot;k++){
            System.out.print(cas[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,12,"sc:sc,t:s,n:ot,min:div,max:w,arr:stack,ans:cas,i:i,j:q,k:k,x:x,l:u,",602,0.45423145294189454,GA
198,,,358,17,,5943,4.106247647603353,0
199,,,278,13,,4630,3.1421364386876425,0
200,,,618,21,,7477,5.5459090828895565,0
201,,,406,14,,4833,3.3640734473864238,0
202,,,349,14,,4901,3.529596443970998,0
203,,,267,11,,3897,2.908492410182953,0
204,,,441,11,,3983,2.8808629194895428,0
205,,,426,16,,5458,3.994555910428365,0
206,,,224,10,,3275,2.26788018544515,0
207,,,393,18,,6382,4.5173654794693,0
208,,,292,13,,4494,2.97844268878301,0
209,,,460,14,,4730,3.2895138263702393,0
210,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int li = 0; li < 26; li++) {
                    idxOn
[li] = 0;
                    idxFromCH[li] = (char) ('A' + li);
                }
                for(int li = 0; li < K; li++) {
                    idxOn
[li] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int li = 0; li < K; li++) {
                    diff += idxOn
[li];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] > idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        } else {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] >= idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,i:li,N:K,res1:rys2,",361,0.24985637267430624,Greedy
212,,,448,11,,3884,2.7868512233098346,0
213,,,269,12,,4323,2.9477802594502767,0
215,,,366,16,,5616,3.8988709092140197,0
217,,,790,13,,4684,3.387687702973684,0
218,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter w = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String empLine = input.nextLine(); 
            
            ArrayList<Integer>  nams = new ArrayList<Integer>();
            StringTokenizeraoo = new StringTokenizer(empLine);
            while(ao.hasMoreTokens())
            {
                 nams.add(Integer.parseInt(ao.nextToken()));
            }
            int secondEntry = 0;
            int secondAttempt = 0;
            for ( int iix= 0; iix<  nams.size()-1; ix++)
            {
                int fifirst  nams.get(ix);
                int sehalf  nams.get(ix+1);
                
                if ( (first - half) >= 0)
                {
                    secondEntry = secondEntry + (first- half);
                }
                
            }
            int maxPush = 0;
            for ( int iix= 0; iix<  nams.size() - 1; ix++)
            {
                int fifirst  nams.get(ix);
                int sehalf  nams.get(ix+1);
                intempDropop = first-half;
                if ( tempDrop > maxPush)
                {
                    maxPush = tempDrop;
                }
            }
            double  stride = maxPush/10;
            for ( int iix= 0; iix<  nams.size() - 1; ix++)
            {
                int tetempStack  nams.get(ix);
                if ( tempStack >= maxPush)
                {
                    secondAttempt+= maxPush;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            w.println(""Case #"" + (x+1) + "": "" + secondEntry + "" "" + secondAttempt);
        
        }
        w.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:input,writer:w,numCases:numCases,x:x,numPlates:numPlates,tempLine:empLine,nums: nams,io:ao,firstAttempt:secondEntry,secondAttempt:secondAttempt,i:ix,first:first,second:half,maxDrop:maxPush,tempDrop:tempDrop,rate: stride,tempStack:tempStack,",1074,0.8394419391949971,GA
219,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String  inputStream=""A-large.in"";
    final static String OutputStream=""A-output.txt"";
    static Scanner Reader;
    static PrintStream writ;
    static int w; static long resp3,r2,model[],are[],tRest4;
    public static void main(String[] args) throws Exception{
        reaReaderw Scanner(new FileInputStream( inputStream));
        wrwritew PrintStream(new FileOutputStream(OutputStream));
        int rtrace=Reader.nextInt();  int fi;
        for (int texample1; texample=rtrace;example++){
            w=Reader.nextInt(); model=new long[w];
            for (i=0;fi<w;fi++)fimodel[fi]=Reader.nextLong();
            long mrighttry0; resp3=0;
            for (fi=1;fi<w;fi++){
                if (mmodeli-1]>mmodeli]fi resp3fi=(model[i-1]fimodel[fi]);
                maxrate=Marighttrymaxrate,morighttry]fimodel[fi]);
            }
            are=new long [w+2];
            r2=righttry*w*w; 
            long rerslel0,rrrrighttry*w*w,sr;
            while(el<=rr){
                rasrel+rr)/2;
                ers=0;
                for (fi=1;fi<w;fi++){
                    if (model[fi-1]>=rsrers+=sr;
                    else rs+=mersel[fi-1];
                    if (model[i-1]firate>srl[fi]) break;
                }
                if (fi==w){
                    r2=Math.miersrs,r2);
                    rr=sr-1;
                }else{
                    el=sr+1;
                }
            }
            writ.println(""Case #""examplet+"": ""+resp3+"" ""+r2);
        }
    }
    
}",393,18,"inputFile: inputStream,outputFile:OutputStream,reader:Reader,writer:writ,n:w,res1:resp3,res2:r2,m:model,a:are,trest2:tRest4,ntest:rtrace,i:fi,test:example,maxrate:righttry,rs:ers,l:el,r:rr,rate:sr,",2796,2.0124048272768658,GA
220,,,291,11,,3686,2.7085883220036826,0
221,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter sw = new PrintWriter(OUT_FILE);

            int B = sc.nextInt();
            for (int ti = 0; ti < B; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                sw.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                sw.println(res);
            }

            sw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,wr:sw,res1:rys2,T:B,N:K,",391,0.2997627099355062,Greedy
222,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner caner = new Scanner(System.in);
        ininit t = caner.nextInt();
        for(int x =ex1; x <ex init; ++ex){
            inw n = caner.nextInt();
            boolean[] foundies = new boolean[2500];
            for(int ind = 0; ind < 2 * w - 1; ++ind){
                for(int jo = 0; jo < w; ++jo){
                    inips s = caner.nextInt();
                    foundies[ips-1] = !foundies[ips-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + ex + "": "");
            for(int ind = 1; ind <= 2500; ++ind){
                if(foundies[ind-1]){
                    ++char;
                    if(char < w){
                        System.out.print(ind + "" "");
                    }
                    else{
                        System.out.println(ind);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:caner,t:init,x:ex,n:w,soldiers:foundies,i:ind,j:jo,s:ips,count:char,",1934,1.404718856016795,GA
223,,,358,17,,5807,4.100709617137909,0
224,,,255,11,,3966,2.6859554012616473,0
225,,,172,9,,2741,1.8722713192303975,0
226,,,358,17,,5851,4.108444261550903,0
227,,,240,10,,3627,2.461086626847585,0
228,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int c = scanner.nextInt();
            boolean[] sellies = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int j = 0; j < c; ++j){
                    int s = scanner.nextInt();
                    selliesss-1] = !sellies[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(sellies[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:t,x:x,n:c,soldiers:sellies,i:i,j:j,s:s,count:char,",377,0.2772081216176351,GA
229,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean DEBUG = false;

    public static void main(String[] args) {

        Scanner sci = new Scanner(System.in);

        int th= sci.nextInt();

        for (int PKp = 1; PKp <= h; PKp++) {

            int n N sci.nextInt(); sci.nextLine();
            int[] part = new int[N];
            int m = 0;
            char dist = 'A';
            int q = -1;
            char[] tabels = new char[N];
            for (int b=0; b < N; b++) {
                ppartib = sci.nextInt();
                totm part[b];
                ltabelsib = dist;
                dist++;
                if (parb[i] > q) {
                    maxqpart[b];
                }
            }
            StringBuilder lab = new StringBuilder();
                    Stack<Character> o = new Stack<>();
            
                    whioe (s.size() != m) {
            
                        for (int b=0; b<N; b++) {
            
                            if (part[b] > 0) {
                                lab.append(tabels[b]);
                                o.push(tabels[b]);
                                part[b]--;
                            }
                        }
                    }
            
                    if (DEBUG) {
                        System.out.println(""sb: ""+lab);
                    }
                    if (DEBUG) {
                        System.out.println(""s: ""+o);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!o.empty()) {
                        if (o.size() == 3) {
                            char c1 = o.pop(), f1 = o.pop(), ar23 = o.pop();
                            sb3.append(ar23);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = o.pop(), f1 = o.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String json = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", PKp, json);
        }
    }
}",448,18,"sc:sci,t:h,_t:PKp,n:N,p:part,total:m,ich:dist,max:q,labels:tabels,i:b,sb:lab,s:o,debug:DEBUG,sb3:sb3,c1:c1,c2:f1,c3:ar23,result:json,",2112,1.584725526968638,GA
230,,,553,17,,5935,4.2026860078175865,0
231,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.29820785522460935,Greedy
232,,,321,11,,3709,2.5792482177416485,0
233,,,278,13,,4647,3.362453265984853,0
234,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,w,w ,w;
    t=sc.nextInt();
    int pp[];
    int ins[];
    for(int v=1;v<=t;v++){
        w=sc.nextInt();
        pp=new int[2501];
        w=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int p=0;p<(2*w-1);p++){
            for(int k=0;k<w;k++){
                int x=sc.nextInt();
                pp[x]++;
                w=Math.w(w,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ins=new int[w];
        for(knt k=l,l=k;k<=w;k++){
            if(pp[k]%2!=0){
                ins[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+v+"": "");
        for(int k=0;k<w;k++){
            System.out.print(ins[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,12,"sc:sc,t:t,n:w,min:w,max:w,arr:pp,ans:ins,i:v,j:p,k:k,x:x,l:l,",555,0.405727223555247,GA
235,,,309,13,,4608,3.203159749507904,0
236,,,419,14,,4870,3.4185391585032145,0
237,,,324,11,,3583,2.501594277222951,0
238,,,464,15,,5354,3.712330627441406,0
239,,,460,14,,4695,3.341354481379191,0
240,,,132,7,,2430,1.686245083808899,0
241,,,553,17,,5948,4.239481170972188,0
242,,,257,10,,3376,2.3247565070788068,0
243,,,328,14,,4958,3.5277262727419534,0
244,,,655,11,,3594,2.808794383207957,0
245,,,262,12,,4174,2.8716737469037374,0
246,,,305,13,,4497,2.931956923007965,0
247,,,298,12,,4364,2.8502940932909646,0
248,,,525,22,,7781,5.729582496484121,0
249,,,325,12,,4224,3.1033010244369508,0
250,,,269,12,,4178,2.9601147254308064,0
251,,,517,23,,8035,5.892116435368856,0
252,,,282,11,,3898,2.5632712205251056,0
253,,,156,8,,2744,1.8491315007209779,0
254,,,291,11,,3728,2.549117652575175,0
255,,,334,13,,4686,3.3519102176030477,0
256,,,250,11,,3742,2.5437154173851013,0
257,,,317,11,,3936,2.750798964500427,0
258,,,265,10,,3533,2.4168046633402507,0
259,,,325,15,,5417,3.672369086742401,0
260,,,371,11,,3813,2.764819403489431,0
261,,,184,6,,1629,1.1324652989705404,0
262,,,269,12,,4176,3.1309200565020245,0
263,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int x = 0; x < r-1; x++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,i:ci,writer:wl,c:co,",206,0.13656792640686036,Greedy
264,,,479,24,,8367,6.358114894231161,0
265,,,156,8,,2689,1.6400375684102377,0
266,,,443,17,,6047,4.416747601826986,0
267,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,input:include,findRow:loadLine,sc:nc,inst:R,c:C,output:put,findShip:followship,pw:pow,n1: n01,",437,0.34189873139063515,Greedy
268,,,344,14,,4976,3.667226521174113,0
269,,,285,12,,4114,2.7373584310213723,0
270,,,269,12,,4177,2.7905102213223776,0
271,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String b = ""Case #%d: %d %d"";
        
        String temp = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String fmodule= temp + ""-large"";
        
        BufferedReader brbridge new BufferedReader(new FileReader(module + "".in""));
        PrintWriter pwprv new PrintWriter(module + "".out"");
        
        int t = wnteger.parseInt(bridge.readLine());
        for (int xi = 1; xi <= w; xi++) {
            int an3 = 0;
            int atan5 = 0;
            int n = ntnteger.parseInt(bridge.readLine());
            int[] dsignras= new int[nt];
            String[] raw rawridge.readLine().split("" "");
            for (int j j 0; j j signras.length; j++)
                signras[j] = Integer.parseInt(raw[j]);

            //1
            for (int j j 0; j j signras.length - 1; j++) {
                int f w signras[j];
                int s k signras[j + 1];
                
                if (k < w)
                    an3 += (w - k);
            }
            
            //2
            int parent = Integer.MIN_VALUE;
            for (int j j 0; j j signras.length - 1; j++) {
                int f w signras[j];
                int s k signras[j + 1];
                
                int b = w - k;
                if (c >bparent)
                    parent = b;
            }
            
            for (int j j 0; j j signras.length - 1; j++) {
                if (signras[j] < parent)
                    atan5 += signras[j];
                else
                    atan5 += parent;
            }
            
       prv   pw.println(String.format(b, xi, an3, atan5));
        }
        
        bridge.close();
        prv.close();
    }
}",360,17,"prefix:b,num:temp,file:module,br:bridge,pw:prv,t:w,i:xi,ans1:an3,ans2:atan5,n:nt,datas:signras,raw:raw,j:j,f:w,s:k,max:parent,c:b,",1357,0.8811668197313944,GA
272,,,443,17,,6073,4.512412611643473,0
273,,,358,17,,5998,4.183390482266744,0
274,,,572,13,,4698,3.5035921971003217,0
277,,,334,13,,4594,2.847127652168274,0
278,,,272,14,,4835,3.2964969555536907,0
279,,,272,14,,4974,3.43068087498347,0
280,,,211,9,,2616,1.7078057487805685,0
281,,,291,14,,5009,3.4724717855453493,0
282,,,348,12,,4187,2.859763201077779,0
283,,,198,8,,2783,1.745654865105947,0
284,,,255,11,,3780,2.56001877784729,0
285,,,305,13,,4407,2.889528338114421,0
286,,,269,12,,4292,2.8389956951141357,0
287,,,285,12,,4264,2.8174480319023134,0
288,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean config = false;

    public static void main(String[] args) {

        Scanner sem = new Scanner(System.in);

        int tu= sem.nextInt();

        for (int  _test = 1;  _test <= u;  _test++) {

            int n m sem.nextInt(); sem.nextLine();
            int[] part = new int[m];
            int net = 0;
            char Ch = 'A';
            int sh = -1;
            char[] suffores = new char[m];
            for (int li=0; li < m; li++) {
                ppartili = sem.nextInt();
                totnet part[li];
               sufforesslii] = Ch;
                Ch++;
                if (partlii] > sh) {
                    maxshpart[li];
                }
            }
            StringBuilder db = new StringBuilder();
                    Stack<Character> parts = new Stack<>();
            
                    whileparts(s.size() != net) {
            
                        for (int li=0; li<m; li++) {
            
                            if (part[li] > 0) {
                                sb.dbpend(suffores[li]);
                                s.ppartssh(suffores[li]);
                                part[li]--;
                            }
                        }
                    }
            
                    if (config) {
                        System.out.println(""sb: ""+db);
                    }
                    if (config) {
                        System.out.println(""s: ""+parts);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb83 = new StringBuilder();
                    while(!parts.empty()) {
                        if (parts.size() == 3) {
                            char c1 = parts.p cX(), c2 = parf1.pop(), c3 =sc2arts.pop();
                            sb83.append(sc2);
                            sb83.append(' ');
                            sb83.append(f1);
                            sb83.append( cX);
                            sb83.append(' ');
                        } else {
                            char c1 = par cX.pop(), c2 =f1arts.pop();
                            sb83.append(f1);
                            sb83.append( cX);
                            sb83.append(' ');
                        }
                    }

            String rret= sb83.toString();
            System.out.printf(""Case #%d: %s%n"",  _test, ret);
        }
    }
}",448,18,"sc:sem,t:u,_t: _test,n:m,p:part,total:net,ich:Ch,max:sh,labels:suffores,i:li,sb:db,s:parts,debug:config,sb3:sb83,c1: cX,c2:f1,c3:sc2,result:ret,",2814,2.033017309506734,GA
289,,,393,18,,6392,3.98520884513855,0
290,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner  SC=new Scanner(System.in);
    int c,in,e ,w;
    tc SC.nextInt();
    int dr[];
    int ins[];
    for(int bi=1;bi<=c;bi++){
        nin SC.nextInt();
        dr=new int[2501];
        e=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int jh0;jh(2*in-1);h++){
            for(int kkey0;kkeyin;key++){
                int xwork SC.nextInt();
                dr[work]++;
                e=Math.e(e,work);     
                w=Math.w(w,work);
            }
        }
        //System.out.println(min+"" ""+max);
        ainsnew int[in];
        for(keynt k=e,l=bey;k<=w;key++){
            if(dr[key]%2!=0){
                ins[l]bkey;
                b++;
            }
        }
        System.out.print(""Case #""+bi+"": "");
        for(int kkey0;kkeyin;key++){
            System.out.print(ins[key]+"" "");
        }
        System.out.println();
                    
    }
    
    
     SC.close();
}
}",281,12,"sc: SC,t:c,n:in,min:e,max:w,arr:dr,ans:ins,i:bi,j:h,k:key,x:work,l:b,",1595,1.003217585881551,GA
291,,,443,17,,6011,4.248083158334096,0
292,,,292,13,,4538,3.0053457856178283,0
293,,,240,10,,3537,2.311923158168793,0
294,,,553,17,,5771,4.606098163127899,0
295,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scannscanterner = new Scanner(new File(fName));
        
        int UT = scanter.nextInt();
        for (int imin= 0; imin< UT; min++)
        {
            int X = scanter.nextInt();
            int[] inner = new int[X];
            for (int b = 0; b < X; b++)
            {
                inner[b] = scanter.nextInt();
            }
            long println = 0;
            int l = 0;        
            for (int i1 id80; i1 id8inner.length; id8++)
            {
                if (inid8r[i1] > l)
                {
                    stalinner[id8];
                }
                else
                {
                    outprintln (stalinner[id8]);
                    stalinner[id8];
                }
            }
            
            long y = cyrintln;
            // max difference is at least 1 rate
            int  maxDef = 0;
            long in1 = 0;
            for (int i2 li270; i2 li27inner.length - 1; li27++)
            {
                if ( (inner[i2]li27 inner[li27+1] >  maxDef))
                {
                    maxDif maxDefner[i2]li27 inner[li27+1]);
                }
            }
            
            long gen =  maxDef;
            for (int i1 id80; i1 id8inner.length - 1; id8 ++)
            {
                out1in1Math.min(rategenner[id8]);
            }
            longtzz = in1;
            
            System.ouprintlnrintln(""Case #"" + (min+1) + "": "" + cy + "" "" + tz);
        }
        
        scanter.close();
    }

}",321,16,"fileName:fName,scanner:scanter,T:UT,i:min,N:X,in:inner,j:b,out:println,start:l,i1:id8,y:cy,maxDiff: maxDef,out1:in1,i2:li27,rate:gen,z:tz,",2367,1.6700293660163879,GA
296,,,553,17,,5949,4.300517765680949,0
297,,,311,15,,5283,3.486361785729726,0
298,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String PIN = ""files/A-large"";
        BufferedReaderinn = new BufferedReader(new FileReader(PIN + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(PIN + "".out"")));

        StringTokenizer st;
        int TestCases = Integer.parseInt(in.readLine());
        for (int see = 1; see <= TestCases; see++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] imm = new int[N];

            st = new StringTokenizer(in.readLine());
            imm[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int back = 0;

            int cucurrent imm[0];
            for (int chi = 1; chi < N; chi++)
            {
                imm[chi] = Integer.parseInt(st.nextToken());
                if (imm[chi] < current)
                {
                    y y= cucurrent imm[chi];

                    int difflowucurrent imm[chi];
                    if (low > back)
                        back = low;
                }
                cucurrent imm[chi];
            }

            for (int chi = 0; chi < N - 1; chi++)
                if (imm[chi] < back)
                    x x= imm[chi];
                else
                    x += back;

            out.printf(""Case #%d: %d %d%n"", see, y, x);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:PIN,in:in,out:out,st:st,testCases:TestCases,test:see,N:N,m:imm,x:x,y:y,jump:back,current:current,i:chi,diff:low,",850,0.5938883543014526,GA
299,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String base = ""Case #%d: %d %d"";
        
        String part = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String ffeed= part + ""-large"";
        
        BufferedReader orb = new BufferedReader(new FileReader(feed + "".in""));
        PrintWriter pwa = new PrintWriter(feed + "".out"");
        
        int tt= Integer.parseInt(orb.readLine());
        for (int it = 1; it <= t; it++) {
            int ans1 = 0;
            int ans2 = 0;
            int nno= Integer.parseInt(orb.readLine());
            int[] dDatras= new int[no];
            String[] runknown= orb.readLine().split("" "");
            for (int jjo= 0; jjo< Datras.length; jo++)
                Datras[j] =joInteger.parseInt(unknown[jo]);

            //1
            for (int jjo= 0; jjo< Datras.length - 1; jo++) {
                int f g Datras[jo];
                int s size Datras[jo + 1];
                
                if (size < g)
                    ans1 += (g - size);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int jjo= 0; jjo< Datras.length - 1; jo++) {
                int f g Datras[jo];
                int s size Datras[jo + 1];
                
                int c =chg - size;
                ifch(c > w)
                    w = ch;
            }
            
            for (int jjo= 0; jjo< Datras.length - 1; jo++) {
                if (Datras[jo] < w)
                    ans2 += Datras[jo];
                else
                    ans2 += w;
            }
            
          pwapw.println(String.format(base, it, ans1, ans2));
        }
        
        orb.close();
        pwa.close();
    }
}",360,17,"prefix:base,num:part,file:feed,br:orb,pw:pwa,t:t,i:it,ans1:ans1,ans2:ans2,n:no,datas:Datras,raw:unknown,j:jo,f:g,s:size,max:w,c:ch,",1299,0.9340699831644694,GA
300,,,544,16,,5618,4.072992237408956,0
301,,,292,15,,5282,3.2450687249501544,0
302,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner innlp=new Scanner(System.in);
    int t=rtnnlp.nextInt();
    for(int iind0;iindrt;ind++){
        int n=znnlp.nextInt();
        int[] order=new int[z];
        for(int l=0;l<z;l++){
            arorder]linnlp.nextInt();
        }
        int parse8=0;
        int umTwo=0;
        for(int o=0;o<z-1;o++){
            
            int y=(orderkeyk]-ordor[k+1]o0)? order[k]oorder[o+1]:0;
            parse8+=key;
        
        }
        int l=0;
        for(int max=0;max<z-1;max++){
            v=Malh.max(v,orler[h]maxorder[max+1]);
        }
        for(int c=0;c<z-1;c++){
            int x=(ozder[d]c=v)lorder[c]:l;
            umTwo+=z;
        }

        System.out.println(""Case #""+(ind+1)+"": ""+parse8+"" ""+umTwo);
    }
}
}",272,14,"inp:innlp,t:rt,i:ind,n:z,arr:order,j:l,sum1:parse8,sum2:umTwo,k:o,y:key,v:l,h:max,d:c,x:z,",2066,1.2948606967926026,GA
303,,,366,16,,5570,3.6460594097773233,0
304,,,295,14,,4916,3.2457465092341105,0
305,,,334,13,,4584,3.1809271852175396,0
306,,,292,13,,4585,3.194558040301005,0
307,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner ker = new Scanner(System.in);
        itryIDunt = Integer.parseInt(ker.nextLine());
        
    
        //for each use case
        for(sectionKeyseId =sectionKeyseId < tryID; sectionKey++) {
            
            int th = 0;
            int old = 0;
            
            
            inameunt = Integer.parseInt(ker.nextLine());
            
            ArrayList<Integer> TI = new ArrayList<Integer>();
            
            int latest = 0;
            int loests = 0;
            for(intzii = 0;zii < name; zi++) {
                
                icharcur = ker.nextInt();
                int diflengthcuchar latest;
                
                TI.add(char);
                
                if(length < 0) {
                    
                    th += Math.abs(length);
                    
                    if(length < loests) {
                        loests = length;
                    }
                }
                
                latest = char;
            }
            
            int ul = Math.abs(loests);
            latest = 0;
            for(intzii = 0;zii < (name - 1); zi++) {
                
                int cuchar TI.get(zi);
                old += (char > hul ? hul: char;
                
                latest = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(th < 0 || old < 0) {
                System.err.println(""Case #""+ (sectionKey + 1));
            }
            
            System.out.println(""Case #""+ (sectionKey + 1) + "": ""+ th + "" "" + old);
            ker.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:ker,caseCount:tryID,caseId:sectionKey,first:th,second:old,count:name,T:TI,last:latest,lowest:loests,i:zi,cur:char,diff:length,highest:ul,",1942,1.2988380392392476,GA
308,,,156,8,,1677,1.049870459238688,0
309,,,399,16,,5702,3.8878525654474894,0
310,,,169,8,,2922,1.7606401681900024,0
311,,,211,9,,3127,1.9222050706545513,0
312,,,408,15,,5171,3.655869742234548,0
313,,,292,15,,5278,3.8409395853678387,0
314,,,198,8,,2796,2.024307684103648,0
315,,,257,10,,2597,1.7455984115600587,0
316,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int x = 0; x < r-1; x++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,i:ci,writer:wl,c:co,",206,0.10542289813359579,Greedy
317,,,254,11,,3876,2.494648806254069,0
318,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String FILESize = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner anker = new Scanner(new File(FILESize));
        
        inH T = anker.nextInt();
        for (int u = 0; u < H; u++)
        {
            inN N = anker.nextInt();
            int[] index = new int[N];
            for (int jl = 0; jl < N; jl++)
            {
              indexijl[j] = anker.nextInt();
            }
            long style = 0;
            int pos = 0;        
            for (int i1 i80; i1 i8index.length; i8++)
            {
                if (indei8i1] > pos)
                {
                    staposindex[i8];
                }
                else
                {
                    outstyle (staposindex[i8]);
                    staposindex[i8];
                }
            }
            
            long y Y style;
            // max difference is at least 1 rate
            int MAXNeg = 0;
            long againone = 0;
            for (int i2  iII0; i2  iIIindex.length - 1;  iII++)
            {
                if ( (index[i2 iII- index iII2+1] > MAXNeg))
                {
                    maxDifMAXNegdex[i2] iII index[ iII+1]);
                }
            }
            
            longordere = MAXNeg;
            for (int i1 i80; i1 i8index.length - 1; i8 ++)
            {
                outagainone Math.min(ratorderndex[i8]);
            }
            long z = wgainone;
            
            System.style.println(""Case #"" + (u+1) + "": "" + Y + "" "" + w);
        }
        
        anker.close();
    }

}",321,16,"fileName:FILESize,scanner:anker,T:H,i:u,N:N,in:index,j:jl,out:style,start:pos,i1:i8,y:Y,maxDiff:MAXNeg,out1:againone,i2: iII,rate:order,z:w,",1506,1.0332971096038819,GA
319,,,393,18,,6393,4.467534844080607,0
320,"class Rank_File {

    public static void main(String arg[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader br = new BufferedReader(f);
        FileWriter fw = new FileWriter(""output"");

        int T,N,t,n;
        String[] temp;
        int[] arr;
        T=Integer.parseInt(br.readLine());
        t=T;
        while(T-->0){
            arr=new int[2500];
            N=Integer.parseInt(br.readLine());
            n=2*N-1;
            fw.write(""Case #"" + (t - T) + "": "");

            while(n-->0) {
                //System.out.println(""n = ""+n);
                temp = br.readLine().split("" "");
                for (String s : temp) {
                    //System.out.println(s);
                    arr[Integer.parseInt(s)-1]++;
                }
            }

            for(int i=0;i<2500;i++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[i]%2!=0){
                    fw.write("" ""+(i+1));
                }
                arr[i]=0;
            }
            fw.write(""\n"");
        }
        fw.close();
    }
}","class Rank_File {

    public static void main(String word[]) throws IOException {
        FileReader file = new FileReader(""B-large(1).in"");
        BufferedReader br crnew BufferedReader(file);
        FileWriter tf = new FileWriter(""output"");

        int Q,W,w,z;
        String[] zip;
        int[] iter;
        Q=Integer. parseFloat(cr.readLine());
        w=Q;
        while(Q-->0){
            iter=new int[2500];
            W=Integer. parseFloat(cr.readLine());
            z=2*W-1;
            tf.write(""Case #"" + (w - Q) + "": "");

            while(z-->0) {
                //System.out.println(""n = ""+n);
                zip = cr.readLine().split("" "");
                for (Stringus : zip) {
                    //System.out.println(s);
                    iter[Integer. parseFloat(u)-1]++;
                }
            }

            for(int h=0;h<2500;h++){
                //System.out.print(""  ""+(arr[i]));
                if(iter[h]%2!=0){
                    tf.write("" ""+(h+1));
                }
                iter[h]=0;
            }
            tf.write(""
"");
        }
        tf.close();
    }
}",240,13,"arg:word,f:file,br:cr,fw:tf,T:Q,N:W,t:w,n:z,temp:zip,arr:iter,s:u,parseInt: parseFloat,i:h,",4516,3.0722758968671164,GA
321,,,655,11,,3557,2.6586256504058836,0
322,,,513,24,,8429,6.129366207122803,0
323,,,406,14,,4908,3.4562800765037536,0
324,,,265,10,,3084,2.0574700593948365,0
325,,,142,9,,3145,1.9938702265421548,0
326,,,240,10,,3648,2.3670308192571006,0
327,,,358,17,,6007,4.150902752081553,0
328,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String type = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream ofas = new FileInputStream(type + "".in"");
        InputStreamReader iissw= new InputStreamReader(ofas);
        BufferedReader bimg= new BufferedReader(issw);

        FileOutputStream Fos = new FileOutputStream(type + "".out"");
        OutputStreamWriter issw = new OutputStreamWriter(Fos);
        BufferedWriter bbarwe= new BufferedWriter(issw);

        String entry = null;
        List<String> lins = new ArrayList<String>();
        while ((lentry= img.readLine()) != null) {
            llinsadd(entry);
        }

        interrorSizet = Integer.parseInt(lins.get(0));
        int thisI = 1;
        for (iot i = o; i < errorSize; o++) {
           line5ng line1 = lins.get(thisI++);
           cell2ng line2 = lins.get(thisI++);
            String[] xs = cell2.split("" "");
            int[dsns = new int[xs.length];
            for (insi94i4 = 0si94i4 < xs.length; si94++) {
              dsnsi94i4] = Integer.valueOf(xs[si94]);
            }
            int[]hmushingh = ds;
            long[]  min3 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =xi02; i2 <xi02mushing.length - 1; xi02++) {
                        if (hmushing[i2+1xi02< hmushing[xi02]) {
                            min1[0]  min3mushing[i2] xi02hmushing[xi02+1];
                        }
                    }
                    
                    int erate = 0;
                    for (int i3 =i123; i3 <i123mushing.length - 1; i123++) {
                        if (hmushing[i3+1i123< hmushing[i123]) {
                            rate = Meratemax(rate, hmerateng[i3] i123hmushing[i123+1]);
                        }
                    }
                    
                    for (int i1 =pi3; i1 <pi3mushing.length - 1; pi3++) {
                        min1 min3+= Math.min(hmsubing[ipi3, erate);
                    }
            long[] msub=  min3;
            String r = ""Case #"" + (o + 1) + "": "" + sub[0] + "" "" + sub[1];

//            System.out.println(r);
            barwe.write(r);
            barwe.newLine();
        }

        if (barwe != null)
            barwe.close();

        if (img != null)
            img.close();
    }
}",479,24,"file:type,fis:ofas,isr:issw,br:img,fos:Fos,isw:issw,bw:barwe,line:entry,lines:lins,problemCount:errorSize,currentIndex:thisI,i:o,line1:line5,line2:cell2,vals:xs,ans:ds,i4:si94,mush:hmushing,min1: min3,i2:xi02,rate:erate,i3:i123,i1:pi3,min:sub,",4778,3.6576640208562217,GA
329,,,375,10,,3259,2.0079894701639813,0
330,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(input));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,input:input,inst:R,findRow:matchColumn,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.2724717100461324,Greedy
331,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner err;
    private static PrintStream OUT;

    private static final String CASERAMND = ""Case #"";
    private static final String COLON2UPACE = "": "";

    public static void main(String[] args) throws Throwable {
        err = new Scanner(System.err);
        err = new Scanner(new FileInputStream(""A-large.in""));
        OUT = System.OUT;
        OUT = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] ichc = new char[100];
        for (char cht = 'A'; cht <= 'Z'; cht++) {
            ichc[cht - 'A'] = cht;
        }

        int TS= err.nextInt();

        int[] maxOneAND5 = new int[2];

        for (int l = 1; l <= S; l++) {
            OUT.print(CASERAMND);
            OUT.print(l);
            OUT.print(COLON2UPACE);

            int NV= err.nextInt();
            int[] PUT = new int[V];
            int valid = 0;
            for (int p = 0; p < V; p++) {
                PPUTnp = err.nextInt();
                tovalid= PUT[p];
            }

            while (valid > 0) {
                int VRange = -1;
                int siWork = -1;
                int vNo21 = -1;
                int ciHead41 = -1;
                
                for (int i ri 0; i ri PUT.length; ri++) {
                    int v =revPUT[ri];
                    if (v rev VRange) {
                        vMvNo21 VRange;
                        iMciHead41 siWork;
                
                        VRange = rev;
                        siWork = ri;
                    } else if revv > vNo21) {
                        vNo21 = rev;
                        ciHead41 = ri;
                    }
                }
                
                maxOneAND5[0] = siWork;
                maxOneAND5[1] = ciHead41;
                int iMiMod1 maxOneAND5[0];
                int iM iLast1 maxOneAND5[1];
                int vMsvMod01 PUT[iMod1];
                int vMax2 vMod8iLast1 -1 ? PUT[ iLast1] : 0;

                if (svMod01 == vMod8) {
                    OUT.print(ichc[iMod1]);
                    PUT[iMod1]--;
                    valid--;

                    if (valid > 2 || valid == 1) {
                        OUT.print(ichc[ iLast1]);
                        PUT[ iLast1]--;
                        valid--;
                    }
                } else {
                    OUT.print(ichc[iMod1]);
                    PUT[iMod1]--;
                    valid--;

                    if (valid > 2 || valid == 1) {
                        OUT.print(ichc[iMod1]);
                        PUT[iMod1]--;
                        valid--;
                    }
                }

                if (valid > 0) {
                    OUT.print(' ');
                }
            }

            OUT.println();
        }
        OUT.flush();
    }

}",527,23,"in:err,out:OUT,CASE_N:CASERAMND,COLON_SPACE:COLON2UPACE,chr:ichc,ch:cht,T:S,max1and2:maxOneAND5,t:l,N:V,P:PUT,total:valid,n:p,vMax:VRange,iMax:siWork,vMax21:vNo21,iMax21:ciHead41,i:ri,v:rev,iMax1:iMod1,iMax2: iLast1,vMax1:svMod01,vMax2:vMod8,",4182,2.960976735750834,GA
332,,,735,20,,7035,5.470980914433797,0
333,,,303,11,,3747,2.643032360076904,0
334,,,198,8,,2739,1.9385232249895732,0
335,,,379,18,,6232,4.116164362430572,0
336,,,263,11,,3713,2.644002930323283,0
337,,,418,11,,3426,2.585287849108378,0
338,,,443,17,,5965,4.435082447528839,0
339,,,255,11,,3106,2.060217893123627,0
340,,,257,10,,3575,2.3058974822362264,0
341,,,406,14,,4989,3.4638374487559003,0
342,,,250,11,,1593,1.1017082492510477,0
343,,,325,15,,5195,3.5346885124842324,0
344,,,525,22,,7766,6.004402661323548,0
345,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String output = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fifis new FileInputStream(output + "".in"");
        InputStreamReader isro = new InputStreamReader(fis);
        BufferedReader bbr= new BufferedReader(isro);

        FileOutputStream fofOS new FileOutputStream(output + "".out"");
        OutputStreamWriter isW = new OutputStreamWriter(fOS);
        BufferedWriter bbwe = new BufferedWriter(isW);

        String link = null;
        List<String> lines = new ArrayList<String>();
        while ((link = br.readLine()) != null) {
            lines.add(link);
        }

        int numberSize = Integer.parseInt(lines.get(0));
        int currentPosition = 1;
        for (infi i = 0fi i < numberSize; fi++) {
            String lin lineFirstlines.get(currentPosition++);
            String lin lineTwolines.get(currentPosition++);
            String[] valils lineTwo.split("" "");
            int[]css = new int[ils.length];
            for (intoi294 = 0;oi294 < ils.length; oi29++) {
               cssoi294] = Integer.valueOf(ils[oi29]);
            }
            int[]hmushingh = cs;
            long[] Min3 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =li27; i2 <li27mushing.length - 1; li27++) {
                        if (hmushing[i2+1li27< hmushing[li27]) {
                            min1[0] Min3mushing[i2] li27hmushing[li27+1];
                        }
                    }
                    
                    int key = 0;
                    for (int i3 =xi123; i3 <xi123mushing.length - 1; xi123++) {
                        if (hmushing[i3+1xi123< hmushing[xi123]) {
                            rate = Mkeymax(rate, hmkeyng[i3] xi123hmushing[xi123+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1mushing.length - 1; i1++) {
                        min1Min3+= Math.minsortushingi11], key);
                    }
            long[] sort = Min3;
            String r = ""Case #"" + (fi + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            bbwe.write(r);
            bbwe.newLine();
        }

        if (bbwe != null)
            bbwe.close();

        if (br != null)
            br.close();
    }
}",479,24,"file:output,fis:fis,isr:isro,br:br,fos:fOS,isw:isW,bw:bbwe,line:link,lines:lines,problemCount:numberSize,currentIndex:currentPosition,i:fi,line1: lineFirst,line2: lineTwo,vals:ils,ans:cs,i4:oi29,mush:hmushing,min1:Min3,i2:li27,rate:key,i3:xi123,i1:i1,min:sort,",3194,2.4569229324658712,GA
346,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String name = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fenos = new FileInputStream(name + "".in"");
        InputStreamReader isissrt new InputStreamReader(fenos);
        BufferedReader brbi new BufferedReader(issrt);

        FileOutputStream bis = new FileOutputStream(name + "".out"");
        OutputStreamWriter isswb = new OutputStreamWriter(bis);
        BufferedWriter bwbbwe new BufferedWriter(isswb);

        String split = null;
        List<String> items = new ArrayList<String>();
        while ((split = bi.readLine()) != null) {
            litemsadd(split);
        }

        int  problemSize = Integer.parseInt(items.get(0));
        int currentPosition = 1;
        for (int v = 0; v <  problemSize; v++) {
            String linlin5items.get(currentPosition++);
            String linline8items.get(currentPosition++);
            String[] arr = line8.split("" "");
            int[]conss = new int[arr.length];
            for (inti54 = 0;i54 < arr.length; i5++) {
               conssi54] = Integer.valueOf(arr[i5]);
            }
            int[] m mushing= cons;
            long[]  min11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = i32; i2 < i32mushing.length - 1;  i32++) {
                        if ( mushing[i2+1 i32<  mushing[ i32]) {
                            min1[0]  min11mushing[i2]  i32 mushing[ i32+1];
                        }
                    }
                    
                    int arm = 0;
                    for (int i3 =mini26; i3 <mini26mushing.length - 1; mini26++) {
                        if ( mushing[i3+1mini26<  mushing[mini26]) {
                            rate = Marmmax(rate,  marmng[i3] mini26 mushing[mini26+1]);
                        }
                    }
                    
                    for (int i1 =si1; i1 <si1mushing.length - 1; si1++) {
                        min1 min11+= Math.min(sortshingsi11], arm);
                    }
            long[] misort  min11;
            String r = ""Case #"" + (v + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            bbwe.write(r);
            bbwe.newLine();
        }

        if (bbwe != null)
            bbwe.close();

        if (bi != null)
            bi.close();
    }
}",479,24,"file:name,fis:fenos,isr:issrt,br:bi,fos:bis,isw:isswb,bw:bbwe,line:split,lines:items,problemCount: problemSize,currentIndex:currentPosition,i:v,line1:lin5,line2:line8,vals:arr,ans:cons,i4:i5,mush: mushing,min1: min11,i2: i32,rate:arm,i3:mini26,i1:si1,min:sort,",5564,4.13128072420756,GA
347,,,443,17,,6052,4.501487664381663,0
348,,,417,14,,4925,3.5707594315210978,0
349,,,169,8,,2728,1.7474773208300272,0
350,,,198,8,,2825,2.0035292665163675,0
351,,,269,12,,3995,2.9755348523457843,0
352,,,290,10,,3053,2.193800671895345,0
353,,,215,10,,3352,2.3003225763638815,0
354,,,266,11,,3871,2.7491830706596376,0
355,,,250,11,,3787,2.5509918570518493,0
356,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader ch = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bot = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[]  eolbar = eol.getBytes();
        try {
            String ner = ch.readLine();
            int t = Integer.parseInt(ner);
            for(int i = 0 ; i < t ; i++) {
                ner = ch.readLine();
                int w = Integer.parseInt(ner);
                ner = ch.readLine();
                StringTokenizer st = new StringTokenizer(ner,"" "");
                int [] arin = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    arin[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansT = 0;
                int dip = 0;
                for(int y = 0 ; y < w-1 ; y++) {
                    dip dipath.max(dip,dipn[j]yarin[y+1]);
                    if(arin[j+y]<arin[y]) {
                        ansYansYarin[j]yarin[y+1];
                    }
                }
                for(int y = 0 ; y < w-1 ; y++) {
                    int x xt Math.min(arin[y],dip);
                    ansT += xt;
                }
                bot.write(""Case #"".getBytes());
                bot.write(new Integer(i+1).toString().getBytes());
                bot.write("": "".getBytes());
                bot.write(new Integer(ansY).toString().getBytes());
                bot.write("" "".getBytes());
                bot.write(new Integer(ansT).toString().getBytes());
                bot.write( eolbar);
            }
            bot.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:ch,bos:bot,eol:eol,eolb: eolbar,str:ner,t:t,i:i,n:w,st:st,ar:arin,iter:iter,ansY:ansY,ansZ:ansT,dip:dip,j:y,x:xt,",1039,0.7769141753514608,GA
357,,,513,24,,8512,6.538249492645264,0
358,,,285,12,,1764,1.3102383375167848,0
359,,,254,11,,3951,2.7872321804364524,0
360,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    rec    = s*n;
            int    ret1        = 0;
            
            //    scan
            ret1    = s*(n/k);
            
            if(n % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    inter    = ret1;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret:inter,r:s,total:rec,c:n,",213,0.1579105297724406,Greedy
361,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter cfagain = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] dp = new int[e+1];
                dp[l] = l + end - 1;
                for(int jet = l + 1; jet <= 2*l - 1; jet++)
                {
                    if(jet > e)
                        break;
                    dp[jet] = l+1 + end-1;
                }
                for(int jet = 2*l; jet <= e; jet++)
                {
                    dp[jet] = Math.max(dp[jet-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + dp[e]);
                cfagain.write(""Case #"" + bi + "": "" + dp[e] + ""
"");
            }
            fe.close();
            cfagain.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,r:end,j:jet,t:b,st:sta,fout:cfagain,c:e,",327,0.24615662097930907,Greedy
362,,,443,17,,5954,4.475977265834809,0
363,,,262,12,,4255,2.9761512756347654,0
364,,,406,14,,4853,3.3734845240910847,0
365,,,405,14,,4641,3.4657329678535462,0
366,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String IO = ""files/A-large"";
        BufferedReadelin = new BufferedReader(new FileReader(IO + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(IO + "".out"")));

        StringTokenizer fe;
        inttestDescastss = Integer.parseInt(l.readLine());
        for (int testest1; testest testDescasts; test++)
        {
            intNN = Integer.parseInt(l.readLine());
            int[] line = new int[N];

           fet = new StringTokenizer(l.readLine());
            line[0] = Integer.parseInt(fe.nextToken());
            long w = 0, y = 0;

            int charge = 0;

            int curfollowline[0];
            for (int qi = 1; qi < N; qi++)
            {
                line[qi] = Integer.parseInt(fe.nextToken());
                if (lineqii] < follow)
                {
                    y +y curfollowline[qi];

                    int dififfcurfollowline[qi];
                    if (diiff charge)
                        charge = iff;
                }
                curfollowline[qi];
            }

            for (int qi = 0; qi < N - 1; qi++)
                if (line[i]qi< charge)
                    x +w line[qi];
                else
                    w += charge;

            out.printf(""Case #%d: %d %d%n"", test, y, w);
        }

        l.close();
        out.close();
    }
}",306,14,"FILE:IO,in:l,out:out,st:fe,testCases:testDescasts,test:test,N:N,m:line,x:w,y:y,jump:charge,current:follow,i:qi,diff:iff,",855,0.5914255857467652,GA
367,,,256,11,,3676,2.598752482732137,0
368,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.09252605040868124,Greedy
369,,,260,9,,3285,2.41468909184138,0
370,,,348,19,,6617,4.652725195884704,0
371,,,344,14,,4930,3.6854005018870035,0
372,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter cfagain = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] dp = new int[e+1];
                dp[l] = l + end - 1;
                for(int jet = l + 1; jet <= 2*l - 1; jet++)
                {
                    if(jet > e)
                        break;
                    dp[jet] = l+1 + end-1;
                }
                for(int jet = 2*l; jet <= e; jet++)
                {
                    dp[jet] = Math.max(dp[jet-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + dp[e]);
                cfagain.write(""Case #"" + bi + "": "" + dp[e] + ""
"");
            }
            fe.close();
            cfagain.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,r:end,t:b,j:jet,st:sta,fout:cfagain,c:e,",327,0.22783479690551758,Greedy
373,,,256,11,,3942,2.69072394768397,0
374,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String SSL = ""files/A-large"";
        BufferedReaderthisn = new BufferedReader(new FileReader(SSL + "".in""));
        PrintWriter w = new PrintWriter(new BufferedWriter
                (new FileWriter(SSL + "".out"")));

        StringTokenizer rd;
        int tetestChases Integer.parseInt(this.readLine());
        for (int ttype= 1; ttype<= testChases; type++)
        {
            int N N Integer.parseInt(this.readLine());
            int[] imm = new int[N];

            strd new StringTokenizer(this.readLine());
            imm[0] = Integer.parseInt(rd.nextToken());
            long x = 0, j = 0;

            int jj = 0;

            int cucurrent imm[0];
            for (int i = 1; i < N; i++)
            {
                imm[i] = Integer.parseInt(rd.nextToken());
                if (imm[i] < current)
                {
                    y j= cucurrent imm[i];

                    int direl cucurrent imm[i];
                    ifrelff > jj)
                        jj = rel;
                }
                cucurrent imm[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (imi[i] < jj)
                    x x= imm[i];
                else
                    x += jj;

            w.printf(""Case #%d: %d %d%n"", type, j, x);
        }

        this.close();
        w.close();
    }
}",306,14,"FILE:SSL,in:this,out:w,st:rd,testCases:testChases,test:type,N:N,m:imm,x:x,y:j,jump:jj,current:current,i:i,diff:rel,",790,0.5555821855862936,GA
375,,,298,12,,4344,2.9713040630022687,0
376,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fname = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanncaninnerner = new Scanner(new File(fname));
        
        int TW= caninner.nextInt();
        for (int ik = 0; ik < W; ik++)
        {
            int NC= caninner.nextInt();
            int[] model = new int[C];
            for (int ij = 0; ij < C; ij++)
            {
                imodeljij = caninner.nextInt();
            }
            long id = 0;
            int max = 0;        
            for (int i1 iu10; i1 iu1model.length; iu1++)
            {
                if (modeiu1i1] > max)
                {
                    stamaxmodel[iu1];
                }
                else
                {
                    outid (stamaxmodel[iu1]);
                    stamaxmodel[iu1];
                }
            }
            
            longxy = id;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long againOne = 0;
            for (int i2 i50; i2 i5model.length - 1; i5++)
            {
                if ( (model[i2]i5 model[i5+1] >  maxNeg))
                {
                    maxDif maxNegdel[i2]i5 model[i5+1]);
                }
            }
            
            long delay =  maxNeg;
            for (int i1 iu10; i1 iu1model.length - 1; iu1 ++)
            {
                out1againOneMath.min(ratedelaydel[iu1]);
            }
            long z = wgainOne;
            
            System.oidprintln(""Case #"" + (ik+1) + "": "" + x + "" "" + w);
        }
        
        caninner.close();
    }

}",321,16,"fileName:fname,scanner:caninner,T:W,i:ik,N:C,in:model,j:ij,out:id,start:max,i1:iu1,y:x,maxDiff: maxNeg,out1:againOne,i2:i5,rate:delay,z:w,",1655,1.1338047504425048,GA
377,,,290,10,,3464,2.3967374205589294,0
378,,,406,14,,4447,3.093939272562663,0
379,,,887,19,,6738,5.024382758140564,0
380,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String start = ""src/a-small-attempt1.in"";
        String write = ""src/a-small-attempt1.out"";
        iio= new Scanner(new File(start));
        onull= new PrintWriter(new File(write));
        int N = io.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            null.print(""Case #"" + tf + "": "");
            System.null.println(""Case #"" + tf + "": ............"");
            A er = new A();
            int O = A.io.nextInt();
            int FC = A.io.nextInt();
            int WS = A.io.nextInt();
            if (O == 1) {
                int resulterr-WWS/WWS+ WWS+ (FC%WS>0?1:0);
                A.null.println(err);
            } else
                A.null.println(0);
        }
        null.close();
    }

    static Scanner io;
    static PrintWriter null;
}",208,11,"load:start,save:write,in:io,out:null,T:N,t:tf,r:er,R:O,C:FC,W:WS,result:err,",2208,1.443902361392975,GA
382,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LIB = ""files/A-large"";
        BufferedReaderrn = new BufferedReader(new FileReader(LIB + "".in""));
        PrintWriter image = new PrintWriter(new BufferedWriter
                (new FileWriter(LIB + "".out"")));

        StringTokenizer stress;
        inttestDescases = Integer.parseInt(r.readLine());
        for (int tevalid 1; tevalid= testDescase; valid++)
        {
            intEN = Integer.parseInt(r.readLine());
            int[] media = new int[E];

           stresst = new StringTokenizer(r.readLine());
            m[0]media= Integer.parseInt(stress.nextToken());
            long x = 0, tick = 0;

            int block = 0;

            int currpositionedia[0];
            for (int slice = 1; slice < E; slice++)
            {
                m[i]media=sliceInteger.parseInt(stress.nextToken());
                if (media[islice < position)
                {
                    y +=tickcurrpositionedia[slice];

                    int diff = cunumsitionedia[slice];
                    if (dnum> block)
                        block = num;
                }
                currpositionedia[slice];
            }

            for (int slice = 0; slice < E - 1; slice++)
                if (media[islice < block)
                    x +=xmedia[slice];
                else
                    x += block;

            image.printf(""Case #%d: %d %d%n"", valid, tick, x);
        }

        r.close();
        image.close();
    }
}",306,14,"FILE:LIB,in:r,out:image,st:stress,testCases:testDescase,test:valid,N:E,m:media,x:x,y:tick,jump:block,current:position,i:slice,diff:num,",1264,0.8657486240069071,GA
383,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner self;
    private static PrintStream ou;

    private static final String CASEEXSN = ""Case #"";
    private static final String COLON2UPACE = "": "";

    public static void main(String[] args) throws Throwable {
        self = new Scanner(System.self);
        self = new Scanner(new FileInputStream(""A-large.in""));
        ou = System.ou;
        ou = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char cht = 'A'; cht <= 'Z'; cht++) {
            chr[cht - 'A'] = cht;
        }

        int T R self.nextInt();

        int[] max1dTwo = new int[2];

        for (int qt = 1; qt <= R; qt++) {
            ou.print(CASEEXSN);
            ou.print(qt);
            ou.print(COLON2UPACE);

            int N V self.nextInt();
            int[] API = new int[V];
            int last = 0;
            for (int nt = 0; nt < V; nt++) {
                P[API]nt= self.nextInt();
                tolast= API[nt];
            }

            while (last > 0) {
                int vHost = -1;
                int iHost = -1;
                int vDec21 = -1;
                int iHead22 = -1;
                
                for (int i eni 0; i eni API.length; eni++) {
                    int v = revPI[eni];
                    if (vrev> vHost) {
                        vvDec21= vHost;
                        iiHead22= iHost;
                
                        vHost = rev;
                        iHost = eni;
                    } else if (rev > vDec21) {
                        vDec21 = rev;
                        iHead22 = eni;
                    }
                }
                
                max1dTwo[0] = iHost;
                max1dTwo[1] = iHead22;
                int iMax01 = max1dTwo[0];
                int iFixtwo = max1dTwo[1];
                int vMa vMod2API[iMax01];
                int vMax2 vmax1Fixtwo -1 ? API[iFixtwo] : 0;

                if ( vMod2 == vmax1) {
                    ou.print(chr[iMax01]);
                    API[iMax01]--;
                    last--;

                    if (last > 2 || last == 1) {
                        ou.print(chr[iFixtwo]);
                        API[iFixtwo]--;
                        last--;
                    }
                } else {
                    ou.print(chr[iMax01]);
                    API[iMax01]--;
                    last--;

                    if (last > 2 || last == 1) {
                        ou.print(chr[iMax01]);
                        API[iMax01]--;
                        last--;
                    }
                }

                if (last > 0) {
                    ou.print(' ');
                }
            }

            ou.println();
        }
        ou.flush();
    }

}",527,23,"in:self,out:ou,CASE_N:CASEEXSN,COLON_SPACE:COLON2UPACE,chr:chr,ch:cht,T:R,max1and2:max1dTwo,t:qt,N:V,P:API,total:last,n:nt,vMax:vHost,iMax:iHost,vMax21:vDec21,iMax21:iHead22,i:eni,v:rev,iMax1:iMax01,iMax2:iFixtwo,vMax1: vMod2,vMax2:vmax1,",5211,3.751319718360901,GA
384,,,200,9,,3046,2.1235838611920674,0
385,,,887,19,,6740,5.070890498161316,0
386,,,340,13,,4644,3.442760161558787,0
387,,,285,12,,4024,2.7381325721740724,0
388,,,426,16,,5667,3.955474289258321,0
389,,,655,11,,3924,2.8779215216636658,0
390,,,553,17,,6017,4.353078413009643,0
391,,,344,14,,4836,3.3530776937802633,0
392,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wb = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int li = 0; li < 26; li++) {
                    idxOn
[li] = 0;
                    idxFromCH[li] = (char) ('A' + li);
                }
                for(int li = 0; li < K; li++) {
                    idxOn
[li] = sc.nextInt();
                }
                wb.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int li = 0; li < K; li++) {
                    diff += idxOn
[li];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] > idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        } else {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] >= idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wb.println(res);
            }

            wb.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,i:li,wr:wb,res1:rys2,N:K,T:X,",421,0.3273353020350138,Greedy
393,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter null = new BufferedWriter(new FileWriter(""A-large.out""));
            String buffer = null;
            buffer = in.readLine();
            
            int T G Integer.parseInt(buffer);
            for(int y=0;y<G;y++){
                buffer = in.readLine();
                int N W Integer.parseInt(buffer);
                buffer = in.readLine();
                String [] totokens buffer.split("" "");                
                int [] VER = new int [W];
                for (int y=0;y<W;y++){
                    VER[y]= Integer.parseInt(tokens[y]);
                }
                int ia=0,b=0,MAX=0;
                for (int y=0;y<W-1;y++){
                    if (VER[k]yVER[y+1]){
                        a=a+iaEia[k]yVER[y+1];
                        if (VER[k]yVER[y+1]>MAX){
                            max=MAX[k]yVER[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (VER[y]>=MAX){
                        b=b+MAX;
                    } else{
                        b=b+bER[y];
                    }
                }
                
                System.null.println(""Case #"" + (y+1) +"": "" + ia + "" "" + b);    
                null.write(""Case #"" + (y+1) +"": "" + ia + "" "" + b + ""
"");
            }
            in.close();    
            null.close();
        } catch (FileNotFoundException e) {
            System.null.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.null.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.null.println(""Running time is ""+(endTime-StartTime)+""ms"");

    }

}",443,14,"startTime:StartTime,in:in,out:null,line:buffer,T:G,i:y,N:W,tokens:tokens,V:VER,k:y,a:ia,b:b,max:MAX,endTime:endTime,",1552,1.1722381353378295,GA
394,,,298,12,,4111,2.86066757440567,0
395,,,271,10,,3585,2.3579118847846985,0
396,,,386,16,,5660,3.873064847787221,0
397,,,408,15,,5216,3.853907636801402,0
398,,,290,10,,3559,2.6542713125546773,0
399,,,254,11,,3883,2.689156111081441,0
400,,,278,13,,4656,3.266083625952403,0
401,,,291,10,,3536,2.387285578250885,0
402,,,326,12,,4219,2.939955552419027,0
403,,,325,12,,4086,2.91293173233668,0
404,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String loads = ""src/a-small-attempt1.in"";
        String saving = ""src/a-small-attempt1.out"";
        iserver= new Scanner(new File(loads));
        ouraw new PrintWriter(new File(saving));
        int T = Derver.nextInt();
        for (int trial = 1; trial <= D; trial++) {
            raw.print(""Case #"" + trial + "": "");
            System.raw.println(""Case #"" + trial + "": ............"");
            A ra = new A();
            int R = U.server.nextInt();
            int C = CL.server.nextInt();
            int W = S.server.nextInt();
            if (U == 1) {
                int refunction (CL-WS/WS+ WS+ (CL%S>0?1:0);
                A.raw.println(function);
            } else
                A.raw.println(0);
        }
        raw.close();
    }

    static Scanner server;
    static PrintWriter raw;
}",208,11,"load:loads,save:saving,in:server,out:raw,T:D,t:trial,r:ra,R:U,C:CL,W:S,result:function,",3125,2.167095160484314,GA
405,,,241,14,,4981,3.5349033872286477,0
406,,,256,11,,3710,2.5132938822110495,0
407,,,735,20,,6848,5.196091973781586,0
408,,,256,11,,3883,2.7043251315752665,0
409,,,334,13,,4553,3.1450031717618305,0
410,,,295,13,,4562,3.1069482445716856,0
411,,,887,19,,6740,5.018732293446859,0
412,,,375,10,,3273,2.452375511328379,0
413,,,256,11,,3603,2.6329036712646485,0
414,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner line = new Scanner(System.line);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int H = line.nextInt();
        
        long[] button = new long[2];
        
        for (int tt = 1; tt <= H; tt++){
            long W = line.nextLong();
            
            Queue<Long> stage = new LinkedList<>();
            HashSet<Long> Space = new HashSet<>();
            HashMap<Long, Long>  Distance = new HashMap<>();
            
            stage.add(1L);
            Space.add(1L);
             Distance.put(1L, 0L);
            
            while(!stage.isEmpty()){
                long id = stage.poll();
                
                if (id == W){
                    break;
                }
                
                button[0] = id + 1;
                StringBuilder array = new StringBuilder(Long.toString(id));
                button[1] = Long.parseLong(array.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!Space.contains(button[i]) && button[i] <= W && button[i] > id){
                        stage.add(button[i]);
                        Space.add(button[i]);
                         Distance.put(button[i],  Distance.get(id) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", tt,  Distance.get(W) + 1));
        }
    }
}",325,12,"N:W,number:id,distance: Distance,S:Space,builder:array,t:tt,in:line,queue:stage,T:H,next:button,",359,0.2451417326927185,Greedy
415,,,265,10,,3553,2.4119369864463804,0
416,,,298,12,,4297,2.950573746363322,0
417,,,254,11,,3881,2.6581207076708475,0
418,,,334,13,,4478,3.268144086996714,0
419,,,171,10,,3277,2.2269073923428855,0
420,,,326,12,,4163,2.8660969972610473,0
421,,,443,17,,5816,4.180655018488566,0
422,,,211,9,,3021,2.0860985040664675,0
423,,,366,16,,5626,3.988237182299296,0
424,,,269,12,,4203,3.0139389713605245,0
425,,,655,11,,3845,2.844679804642995,0
426,,,358,16,,5603,4.0108730554580685,0
427,,,290,10,,3375,2.278807731469472,0
429,,,256,11,,3517,2.4122575521469116,0
430,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader bh = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter this = new PrintWriter(""System.out"");
        long tset= Long.parseLong(bh.readLine());
        for(longfii=0fii<set;fi++){
            int sc= Integer.parseInt(bh.readLine());
            String ssv= bh.readLine();
            String spart]= sv.split(""\\s+"");
            Lorepeatray[]= new Long[c];
            for(iet ke0;k<c;e++){
            arrepeatint)k]eLong.parseLong(part[e]);
        //    System.out.println(array[k]);
        
            
            }
            long ds=0;
            for(iet ke0;k<c-1;e++){
                if(repeat[ke-repeat[e+1]>0){
                    andsndsrepeat[ke-repeat[e+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long parent=0;
            for(iet ke0;k<c-1;e++){
                if(repeat[ke-repeat[e+1]>0){
                    if((repeat[ke-repeat[e+1])>parent){
                        maparentrepeat[ke-repeat[e+1]);
                    }
                }
            }
            
            long an02=0;
            for(iet ke0;k<c-1;e++){
                
                    if(repeat[e]>parent){
                        ansan02san02rent;    
                    }
                    else{
                        aan02 aan02(repeat[e]);
                        
                    }
                
            }
            
            this.println(""Case #""+(fi+1)+"": ""+ds+"" ""+an02);
        
            
        }
        this.flush();
       
    }
}",368,13,"b:bh,out:this,test:set,i:fi,size:c,s:sv,st:part,array:repeat,k:e,ans:ds,constant:constant,max:parent,ans2:an02,",931,0.642466394106547,GA
431,,,605,18,,6271,4.79173020919164,0
432,,,417,16,,5575,4.119316248099009,0
433,,,211,9,,3199,2.196174164613088,0
434,,,311,15,,5272,3.6645949681599936,0
435,,,423,18,,6388,4.53970239162445,0
436,,,418,11,,3080,2.202405603726705,0
437,,,406,17,,6075,4.292356117566427,0
438,,,258,12,,3955,2.802280827363332,0
439,,,250,11,,3856,2.715741729736328,0
440,,,375,10,,3631,2.6263938903808595,0
441,,,513,24,,8502,6.216576898097992,0
442,,,363,15,,5322,3.7830753048261005,0
443,,,464,15,,5330,3.712827761967977,0
444,,,393,18,,6351,4.516558210055034,0
445,,,348,12,,4273,3.0198162754376727,0
446,,,309,13,,4482,3.067066685358683,0
447,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = s*n;
            int    result81        = 0;
            
            //    scan
            result81    = s*(n/k);
            
            if(n % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    inter    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,r:s,ret:inter,ret1:result81,c:n,",217,0.1205349882443746,Greedy
448,,,269,12,,4037,2.8285792748133343,0
449,,,527,23,,8202,6.3407042026519775,0
450,,,448,11,,3886,2.804136602083842,0
451,,,298,12,,4056,2.6670970996220906,0
452,,,334,13,,4636,3.139633921782176,0
453,,,273,9,,3042,2.067057112852732,0
454,,,265,10,,2865,1.9840559840202332,0
455,,,406,14,,5063,3.439404277006785,0
456,,,317,11,,3412,2.4269152641296388,0
457,,,290,10,,3354,2.2468868851661683,0
458,,,468,12,,4232,2.9222708503405253,0
459,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String id = num + ""-large"";
        
        BufferedReadelrbr = new BufferedReader(new FileReader(id + "".in""));
        PrintWrite pfpw = new PrintWriter(id + "".out"");
        
        int tn = Integer.parseInt(lr.readLine());
        for (int istart= 1; istart<= tn; start++) {
            int ans1 = 0;
            int an62 = 0;
            int min = Integer.parseInt(lr.readLine());
            int[] dasignans new int[min];
            String[] unknown = lr.readLine().split("" "");
            for (int j qi 0; j qi signans.length; qi++)
                signans[j] =qiInteger.parseInt(unknown[qi]);

            //1
            for (int j qi 0; j qi signans.length - 1; qi++) {
                int f =wsignans[qi];
                int s =kssignans[qi + 1];
                
                if (ks < w)
                    ans1 += (w - ks);
            }
            
            //2
            int q = Integer.MIN_VALUE;
            for (int j qi 0; j qi signans.length - 1; qi++) {
                int f =wsignans[qi];
                int s =kssignans[qi + 1];
                
                int cc= w - ks;
                ifc(c > q)
                    q = c;
            }
            
            for (int j qi 0; j qi signans.length - 1; qi++) {
                if (signans[qi] < q)
                    an62 += signans[qi];
                else
                    an62 += q;
            }
            
             pf.println(String.format(prefix, start, ans1, an62));
        }
        
        lr.close();
         pf.close();
    }
}",360,17,"prefix:prefix,num:num,file:id,br:lr,pw: pf,t:tn,i:start,ans1:ans1,ans2:an62,n:min,datas:signans,raw:unknown,j:qi,f:w,s:ks,max:q,c:c,",1071,0.7309804479281108,GA
460,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String fileLength = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer assembly = new StringBuffer();
        char[] Partials = new char[26];
        for (int i ui 0; i ui Partials.length; iui+) Partials[ui] = (char)('A' + ui);

        try (Scanner sc = new Scanner(new File(fileLength))) {
            int I = sc.nextInt();
            for (int ui = 1; ui <= TI ui++) {
                assembly.append(""Case #"" + ui + "":"");
                int Size = sc.nextInt();
                int[] Pi Powernew int[Size];
                int skip = 0;
                for (int j =rev0; j <revSize; rev++) {
                    Power[rev] = sc.nextInt();
                    sumskip Power[rev];
                    Power[rev] *= 2;
                }
                while (skip > 0) {
                    assembly.append("" "");
                    
                    int arg = 0;
                    skip--;
                    for (int j =rev0; j <revSize; rev++) {
                        if (Power[jrev > skip) {
                            if (arg == 0) {
                                assembly.append(Partials[rev]);
                                Power[rev] -= 2;
                                arg = 1;
                            } else {
                                assembly.append(Partials[rev]);
                                Power[rev] -= 2;
                                skip--;
                                break;
                            }
                        }
                    }
                    if (arg == 0) {
                        for (int j =rev0; j <revSize; rev++) {
                            if (Power[rev] > 0) {
                                assembly.append(Partials[0]);
                                Power[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                assembly.append(""
"");
            }
            String outputpath = ""answer.out"";
            if (fileLength != null && !fileLength.equals("""")) {
                outPoutputpathileLength.substring(0, fileLength.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outputpath, false)) {
                fos.write(assembly.toString().getBytes());
            }
            System.out.println(assembly);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,11,"filePath:fileLength,answer:assembly,parties:Partials,i:ui,T:I,N:Size,Pi:Power,sum:skip,j:rev,flag:arg,outPath:outputpath,",1223,0.8003090699513753,GA
461,,,208,11,,3914,2.5647892157236734,0
462,,,406,14,,5041,3.740047319730123,0
463,,,291,14,,5028,3.615072500705719,0
465,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner database = new Scanner(System.in);
        int cacaseCount Integer.parseInt(database.nextLine());
        
    
        //for each use case
        for(int catchId = 0; catchId < caseCount; catchId++) {
            
            int always = 0;
            int position = 0;
            
            
            int costate Integer.parseInt(database.nextLine());
            
            ArrayList<Integer> NT = new ArrayList<Integer>();
            
            int size = 0;
            int lowest = 0;
            for(int di = 0; di < state; di++) {
                
                int curev database.nextInt();
                int comp = rev - size;
                
                NT.add(rev);
                
                if(comp < 0) {
                    
                    always += Math.abs(comp);
                    
                    if(comp < lowest) {
                        lowest = comp;
                    }
                }
                
                size = rev;
            }
            
            int high = Math.abs(lowest);
            size = 0;
            for(int di = 0; di < (state - 1); di++) {
                
                int curev NT.get(di);
                position += (rev > high) ? high : rev;
                
                size = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(always < 0 || position < 0) {
                System.err.println(""Case #""+ (catchId + 1));
            }
            
            System.out.println(""Case #""+ (catchId + 1) + "": ""+ always + "" "" + position);
            database.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:database,caseCount:caseCount,caseId:catchId,first:always,second:position,count:state,T:NT,last:size,lowest:lowest,i:di,cur:rev,diff:comp,highest:high,",907,0.6136782606442769,GA
466,,,326,12,,4238,2.989847501118978,0
467,,,308,14,,4962,3.26301771402359,0
468,,,348,12,,4221,2.8711560090382893,0
469,,,366,16,,5682,3.8737988313039144,0
470,,,250,11,,3831,2.6017672657966613,0
471,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int trial = in.nextInt();
    for (int cashemate = 1; cashemate <= trial; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,cases:trial,",211,0.1405524452527364,Greedy
473,,,344,14,,4939,3.47833833694458,0
474,,,345,14,,4983,3.5789603352546693,0
475,,,273,9,,3237,2.270034205913544,0
476,,,443,17,,5956,4.1595869620641075,0
477,,,405,14,,4951,3.3650055368741354,0
478,,,291,14,,4961,3.3326476216316223,0
479,,,448,18,,6290,4.323809409141541,0
480,,,302,13,,4637,3.260909827550252,0
481,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06384249130884806,Greedy
482,,,291,11,,3881,2.8120079080263776,0
483,,,273,9,,3302,2.304724025726318,0
484,,,292,15,,5355,3.7141619324684143,0
485,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRITIR = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SIMPLE = !true;
    static final String _PROBLEMAL = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SIMPLE) {
                int multi = 0;
                while (new File(_PROBLEMAL + ""-small""
                + (_PRACTIC_PRITIR == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".in"").exists())
                    multi++;
                multi--;
                boolean valid = false;
                if (new File(_PROBLEMAL + ""-small""
                + (_PRACTIC_PRITIR == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char char = (char) System.in.read();
                    tesvalidchar != 'y';
                }
                if (valid) {
                    System.setIn(new FileInputStream(_PROBLEMAL + ""-small""
                    + (_PRACTIC_PRITIR == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEMAL + ""-small-test.out""));
                    AL w = new AL();
                    Scanner scope = new Scanner(System.in);
                    int tesTestCountscope.nextInt();
                    
                    for (int kg= 1; kg<= TestCount; g++) {
                        System.out.printf(""Case #%d: "", g);
                        System.err.printf(""Case #%d: "", g);
                    
                        int n =nbscope.nextInt();
                        
                        int[] m musher= new int[nb];
                        for (int isi1= 0; isi1< nb; si1++) {
                            mus musher]si1 scope.nextInt();
                        }
                        
                        int prev = 0;
                        int page = 0;
                        
                        for (int icifour= 0; icifour< nb - 1; cifour++) {
                            int diff =  musherrangecifour  musher[cifour + 1];
                            if (range > 0) {
                                prev += range;
                            }
                        }
                        
                        int[] drange= new int[nb - 1];
                        for (int i3 = 0; i3 < nb - 1; i3++) {
                            diff[irange  musher[i3] -  musher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < nb - 1; i5++) {
                            max = Math.max(max, range[i5]);
                        }
                    
                        for (int i2 = 0; i2 < nb - 1; i2++) {
                            secpage Math.min(max,  musher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", prev, page);
                        System.err.printf(""%d %d"", prev, page);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    scope.close();
                    FileReader f1 = new FileReader(_PROBLEMAL + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEMAL + ""-small""
                    + (_PRACTIC_PRITIR == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEMAL + ""-small""
                    + (_PRACTIC_PRITIR == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEMAL + ""-small""
                    + (_PRACTIC_PRITIR == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".out""));
                    AL w = new AL();
                    Scanner scope = new Scanner(System.in);
                    int tesTestCountscope.nextInt();
                    
                    for (int kg= 1; kg<= TestCount; g++) {
                        System.out.printf(""Case #%d: "", g);
                        System.err.printf(""Case #%d: "", g);
                    
                        int n =nbscope.nextInt();
                        
                        int[] m musher= new int[nb];
                        for (int isi1= 0; isi1< nb; si1++) {
                            mus musher]si1 scope.nextInt();
                        }
                        
                        int prev = 0;
                        int page = 0;
                        
                        for (int icifour= 0; icifour< nb - 1; cifour++) {
                            int diff =  musherrangecifour  musher[cifour + 1];
                            if (range > 0) {
                                prev += range;
                            }
                        }
                        
                        int[] drange= new int[nb - 1];
                        for (int i3 = 0; i3 < nb - 1; i3++) {
                            diff[irange  musher[i3] -  musher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < nb - 1; i5++) {
                            max = Math.max(max, range[i5]);
                        }
                    
                        for (int i2 = 0; i2 < nb - 1; i2++) {
                            secpage Math.min(max,  musher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", prev, page);
                        System.err.printf(""%d %d"", prev, page);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    scope.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEMAL + ""-large"" + (_PRITIR ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEMAL + ""-large"" + (_PRITIR ? ""-practice"" : """") + "".out""));
                AL w = new AL();
                Scanner scope = new Scanner(System.in);
                int tesTestCountscope.nextInt();
                
                for (int kg= 1; kg<= TestCount; g++) {
                    System.out.printf(""Case #%d: "", g);
                    System.err.printf(""Case #%d: "", g);
                
                    int n =nbscope.nextInt();
                    
                    int[] m musher= new int[nb];
                    for (int multi = 0; multi < n; mnblti++) {
                        mush[mu musher = scope.nextInt();
                    }
                    
                    int prev = 0;
                    int page = 0;
                    
                    for (int multi = 0; multi < n - nb; multi++) {
                        int diff = mush[murangesher- mush musherti + 1];
                        if (range > 0) {
                            prev += range;
                        }
                    }
                    
                    int[] drange= new int[nb - 1];
                    for (int multi = 0; multi < n - nb; multi++) {
                        diff[multi] = mushrange musher- mush musherti + 1];
                    }
                    int max = 0;
                    for (int multi = 0; multi < n - nb; multi++) {
                        max = Math.max(max, diffrangeti]);
                    }
                
                    for (int multi = 0; multi < n - nb; multi++) {
                        second pageh.min(max, mush musherti]);
                    }
                    
                    System.out.printf(""%d %d"", prev, page);
                    System.err.printf(""%d %d"", prev, page);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                scope.close();
            }
        } else {
            AL w = new AL();
            Scanner scope = new Scanner(System.in);
            int tesTestCountscope.nextInt();
            
            for (int kg= 1; kg<= TestCount; g++) {
                System.out.printf(""Case #%d: "", g);
                System.err.printf(""Case #%d: "", g);
            
                int n =nbscope.nextInt();
                
                int[] m musher= new int[nb];
                for (int multi = 0; multi < n; mnblti++) {
                    mush[mu musher = scope.nextInt();
                }
                
                int prev = 0;
                int page = 0;
                
                for (int multi = 0; multi < n - nb; multi++) {
                    int diff = mush[murangesher- mush musherti + 1];
                    if (range > 0) {
                        prev += range;
                    }
                }
                
                int[] drange= new int[nb - 1];
                for (int multi = 0; multi < n - nb; multi++) {
                    diff[multi] = mushrange musher- mush musherti + 1];
                }
                int max = 0;
                for (int multi = 0; multi < n - nb; multi++) {
                    max = Math.max(max, diffrangeti]);
                }
            
                for (int multi = 0; multi < n - nb; multi++) {
                    second pageh.min(max, mush musherti]);
                }
                
                System.out.printf(""%d %d"", prev, page);
                System.err.printf(""%d %d"", prev, page);
                
                System.out.println();
                System.err.println();
                
            }
            scope.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEMAL,_SAMPLE:_SAMPLE,_SMALL:_SIMPLE,i:multi,_PRACTICE:_PRITIR,c:char,test:valid,r:w,sc:scope,testCase:TestCount,k:g,n:nb,mush: musher,i1:si1,first:prev,second:page,i4:cifour,diff:range,",1928,1.644211761156718,GA
486,,,325,15,,5321,3.8440345446268718,0
487,,,417,16,,5647,4.079805672168732,0
488,,,464,15,,5209,3.8499671975771586,0
489,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner  inb=new Scanner(System.in);
    int trt inb.nextInt();
    for(int iI0;iIrt;I++){
        int nall inb.nextInt();
        int[] arArrayew int[all];
        for(int j=z;j<zll;z++){
            aArrayjz= inb.nextInt();
        }
        int umOne=0;
        int miss32=0;
        for(int k=c;k<cll-1;c++){
            
            int y=(Arraykeyk]-Arrcy[k+1]c0)? Array[k]cArray[c+1]:0;
            umOne+=key;
        
        }
        int l=0;
        for(int h=max;h<maxll-1;max++){
            v=Malh.max(v,Arlay[h]maxArray[max+1]);
        }
        for(int d=c;d<cll-1;c++){
            int x=(Asray[d]c=v)lArray[c]:l;
            miss32+=s;
        }

        System.out.println(""Case #""+(I+1)+"": ""+umOne+"" ""+miss32);
    }
}
}",272,14,"inp: inb,t:rt,i:I,n:all,arr:Array,j:z,sum1:umOne,sum2:miss32,k:c,y:key,v:l,h:max,d:c,x:s,",4737,3.2086053570111592,GA
490,,,298,12,,4233,2.895055961608887,0
491,,,200,9,,3133,1.929960560798645,0
492,,,418,11,,3847,2.600249171257019,0
493,,,240,10,,2941,1.9868949731191,0
494,,,619,11,,3867,3.012159756819407,0
495,,,417,14,,4963,3.529626254240672,0
496,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String BLE = ""files/A-large"";
        BufferedReaderginn = new BufferedReader(new FileReader(BLE + "".in""));
        PrintWriter outs = new PrintWriter(new BufferedWriter
                (new FileWriter(BLE + "".out"")));

        StringTokenizer str;
        int ttestCased= Integer.parseInt(gin.readLine());
        for (int code = 1; code <= testCased; code++)
        {
            int NE= Integer.parseInt(gin.readLine());
            int[] module = new int[E];

            sstr= new StringTokenizer(gin.readLine());
            mmodule0] = Integer.parseInt(str.nextToken());
            long xxx = 0, y = 0;

            int comment = 0;

            int currefollowdule[0];
            for (int s = 1; s < E; s++)
            {
                mmoduleis = Integer.parseInt(str.nextToken());
                if (modulesi] < follow)
                {
                    y += yurrefollowdule[s];

                    int diffshifturrefollowdule[s];
                    if (difshiftcomment)
                        comment = shift;
                }
                currefollowdule[s];
            }

            for (int s = 0; s < E - 1; s++)
                if (module[i] s comment)
                    x += xxxodule[s];
                else
                    xxx += comment;

            outs.printf(""Case #%d: %d %d%n"", code, y,yxxx);
        }

        gin.close();
        outs.close();
    }
}",306,14,"FILE:BLE,in:gin,out:outs,st:str,testCases:testCased,test:code,N:E,m:module,x:xxx,y:y,jump:comment,current:follow,i:s,diff:shift,",975,0.7242117921511332,GA
497,,,420,16,,5587,3.9880634427070616,0
498,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anner = new Scanner(System.in);
        instart t = anner.nextInt();
        for(int x = xi; x <=xistart; ++xi){
            inw n = anner.nextInt();
            boolean[] Soldiers = new boolean[2500];
            for(int e = 0; e < 2 * w - 1; ++e){
                for(int b = 0; b < w; ++b){
                    ino s = anner.nextInt();
                    Soldiers[o-1] = !Soldiers[o-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + xi + "": "");
            for(int e = 1; e <= 2500; ++e){
                if(Soldiers[e-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(e + "" "");
                    }
                    else{
                        System.out.println(e);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:anner,t:start,x:xi,n:w,soldiers:Soldiers,i:e,j:b,s:o,count:weight,",1591,1.1078924934069316,GA
499,,,344,14,,4835,3.329445691903432,0
500,,,291,10,,3441,2.3840060869852704,0
502,,,525,22,,7818,5.5007520834604895,0
503,,,345,14,,5020,3.387042478720347,0
504,,,406,14,,5013,3.7756245891253153,0
505,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner plus = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter format = new PrintWriter( ""MushroomOutput.txt"");
        intnumLasess = Integer.parseInt( plus.nextLine());
        for ( int cl = 0; cl < numLases; cl++)
        {
            int numplacess = Integer.parseInt(plus.nextLine());
            StringTempBlocke = plus.nextLine(); 
            
            ArrayList<Integer> nrams = new ArrayList<Integer>();
            StringTokenizer iauto= new StringTokenizer(TempBlock);
            while(auto.hasMoreTokens())
            {
                nrams.add(Integer.parseInt(auto.nextToken()));
            }
            int firstHalf = 0;
            int lastAttempt = 0;
            for ( int iid= 0; iid< nrams.size()-1; id++)
            {
                int fistart nrams.get(id);
                int sesix nrams.get(id+1);
                
                if ( (start - six) >= 0)
                {
                    firstHalf = firstHalf + (start- six);
                }
                
            }
            int axPush = 0;
            for ( int iid= 0; iid< nrams.size() - 1; id++)
            {
                int fistart nrams.get(id);
                int sesix nrams.get(id+1);
                irawDrorop = start-six;
                if (rawDrop > axPush)
                {
                    axPush = rawDro;
                }
            }
            doubleratee = axPush/10;
            for ( int iid= 0; iid< nrams.size() - 1; id++)
            {
                int teTempPool nrams.get(id);
                if (TempPoolk >= axPush)
                {
                    lastAttempt+= axPush;
                }
                else
                {
                    lastAttempt += TempPool;
                }
            }
            format.println(""Case #"" + (cl+1) + "": "" + firstHalf + "" "" + lastAttempt);
        
        }
        format.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:plus,writer:format,numCases:numLases,x:cl,numPlates: numplaces,tempLine:TempBlock,nums:nrams,io:auto,firstAttempt:firstHalf,secondAttempt:lastAttempt,i:id,first:start,second:six,maxDrop:axPush,tempDrop:rawDro,rate:rate,tempStack:TempPool,",1193,0.9103975137074788,GA
506,,,255,11,,3952,2.750175468126933,0
507,,,298,12,,4164,2.9040882031122845,0
508,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner processor = new Scanner(System.in);
        int cascaseNumInteger.parseInt(processor.nextLine());
        
    
        //for each use case
        for(inCaseInfoId = 0CaseInfoId < caseNum; CaseInfo++) {
            
            int missing = 0;
            int soft = 0;
            
            
            int coucountInteger.parseInt(processor.nextLine());
            
            ArrayList<Integer> UT = new ArrayList<Integer>();
            
            int global = 0;
            int lowest = 0;
            for(int hi = 0; hi < count; hi++) {
                
                int currevprocessor.nextInt();
                int dierror curev global;
                
                UT.add(rev);
                
                if(error < 0) {
                    
                    missing += Math.abs(error);
                    
                    if(error < lowest) {
                        lowest = error;
                    }
                }
                
                global = rev;
            }
            
            int lower = Math.abs(lowest);
            global = 0;
            for(int hi = 0; hi < (count - 1); hi++) {
                
                int curev UT.get(hi);
                soft += (rev > lower) ? lower : rev;
                
                global = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(missing < 0 || soft < 0) {
                System.err.println(""Case #""+ (CaseInfo + 1));
            }
            
            System.out.println(""Case #""+ (CaseInfo + 1) + "": ""+ missing + "" "" + soft);
            processor.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:processor,caseCount:caseNum,caseId:CaseInfo,first:missing,second:soft,count:count,T:UT,last:global,lowest:lowest,i:hi,cur:rev,diff:error,highest:lower,",1288,0.971756120522817,GA
509,,,240,10,,3509,2.4979535897572833,0
510,,,349,14,,4974,3.5837128202120465,0
511,,,500,17,,5991,4.4016770958900455,0
512,,,156,8,,2516,1.8486662666002909,0
513,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String out = ""Case #%d: %d %d"";
        
        String multi = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String fifi multi + ""-large"";
        
        BufferedReadeyrbr = new BufferedReader(new FileReader(fi + "".in""));
        PrintWritepgpw = new PrintWriter(fi + "".out"");
        
        int tt = Integer.parseInt(yr.readLine());
        for (int iai= 1; iai<= tt; ai++) {
            int arsOne = 0;
            int an2 = 0;
            int all = Integer.parseInt(yr.readLine());
            int[] dasignans new int[all];
            String[] raw = yr.readLine().split("" "");
            for (int j l 0; j l signans.length; l++)
                signans[l] = Integer.parseInt(raw[l]);

            //1
            for (int j l 0; j l signans.length - 1; l++) {
                int f fb signans[l];
                int s ws signans[l + 1];
                
                if (sws< fb)
                    arsOne += (fb - ws);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int j l 0; j l signans.length - 1; l++) {
                int f fb signans[l];
                int s ws signans[l + 1];
                
                int c r fb - ws;
                ifr(c > w)
                    w = r;
            }
            
            for (int j l 0; j l signans.length - 1; l++) {
                if (signans[l] < w)
                    an2 += signans[l];
                else
                    an2 += w;
            }
            
         pg pw.println(String.format(out, ai, arsOne, an2));
        }
        
        yr.close();
        pg.close();
    }
}",360,17,"prefix:out,num:multi,file:fi,br:yr,pw:pg,t:tt,i:ai,ans1:arsOne,ans2:an2,n:all,datas:signans,raw:raw,j:l,f:fb,s:ws,max:w,c:r,",1383,1.0320317625999451,GA
514,,,278,9,,3051,2.2337435642878214,0
515,,,393,18,,6429,4.561566921075185,0
516,,,273,9,,3129,2.132713309923808,0
517,,,418,11,,3876,2.6870184739430747,0
518,,,328,14,,4814,3.503453512986501,0
519,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String id = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStrea fasis = new FileInputStream(id + "".in"");
        InputStreamReader irisrs= new InputStreamReader( fas);
        BufferedReader brres new BufferedReader(risrs);

        FileOutputStrea foos = new FileOutputStream(id + "".out"");
        OutputStreamWriter ISww = new OutputStreamWriter( fo);
        BufferedWriter bbarwe= new BufferedWriter(ISww);

        String sync = null;
        List<String> pps = new ArrayList<String>();
        while ((lsync= res.readLine()) != null) {
            pps.add(sync);
        }

        innumberIndexnt = Integer.parseInt(pps.get(0));
        int currentI = 1;
        for (intlii = 0;lii < numberIndex; li++) {
            Slin0 line1 = pps.get(currentI++);
            S line02 line2 = pps.get(currentI++);
            String[] vails  line02.split("" "");
            int[]anss = new int[ils.length];
            for (intsi404 = 0;si404 < ils.length; si40++) {
               ansssi404] = Integer.valueOf(ils[si40]);
            }
            int[] hmushing = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = i10; i2 < i10mushing.length - 1;  i10++) {
                        if (hmushing[i2+1 i10< hmushing[ i10]) {
                            min1[0] min1mushing[i2]  i10hmushing[ i10+1];
                        }
                    }
                    
                    int date = 0;
                    for (int i3 =gi36; i3 <gi36mushing.length - 1; gi36++) {
                        if (hmushing[i3+1gi36< hmushing[gi36]) {
                            rate = Mdatemax(rate, hmdateng[i3] gi36hmushing[gi36+1]);
                        }
                    }
                    
                    for (int i1 =iu1; i1 <iu1mushing.length - 1; iu1++) {
                        min1min1+= Math.min(hlenhing[iu1], date);
                    }
            long[] len = min1;
            String r = ""Case #"" + (li + 1) + "": "" + len[0] + "" "" + len[1];

//            System.out.println(r);
            barwe.write(r);
            barwe.newLine();
        }

        if (barwe != null)
            barwe.close();

        if (res != null)
            res.close();
    }
}",479,24,"file:id,fis: fas,isr:risrs,br:res,fos: fo,isw:ISww,bw:barwe,line:sync,lines:pps,problemCount:numberIndex,currentIndex:currentI,i:li,line1:lin0,line2: line02,vals:ils,ans:ans,i4:si40,mush:hmushing,min1:min1,i2: i10,rate:date,i3:gi36,i1:iu1,min:len,",4183,3.1289841016133626,GA
520,"class Sample {    
    
    public static final String INPUT_FILE = ""A-large.in"";
    public static final String OUTPUT_FILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BEFORE = ""Case #"";
    public static final String CASE_STRING_AFTER = "": "";
    
    Scanner scanner = null;
    File outputFile;
    PrintStream pout = null;
    int totalTests;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int row;
    int col;
    int width;
    int turn;
    
    public static void main(String argv[]){
        
        Sample cards = new Sample();
        try {
            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));
            cards.outputFile = new File(Sample.OUTPUT_FILE);
            
            if(cards.outputFile.exists()){
                cards.outputFile.delete();
            }
            
            cards.outputFile.createNewFile();
            
            cards.pout = new PrintStream(cards.outputFile);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        cards.totalTests = cards.scanner.nextInt();
        
        for(int i=1;i<=cards.totalTests;i++){
            cards.testNo = i;
            //plates = new ArrayList<Integer>();
            cards.row = 0;
            cards.col = 0;
            cards.width = 0;
            cards.turn = 0;
            cards.row = cards.scanner.nextInt();
            cards.col = cards.scanner.nextInt();
            cards.width = cards.scanner.nextInt();
            cards.turn = cards.col/cards.width;
            cards.turn += (cards.width-1);
            
            if(cards.col%cards.width == 0){
                // no action required
            }else{
                cards.turn++;
            }
            if(cards.row>1){
                cards.row--;
                int misses = cards.col/cards.width;
                int missTurns = misses * cards.row;
                cards.turn += missTurns;
            }
            
            
            
            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
            
            cards.pout.println(""""+cards.turn);
        }
        
        cards.scanner.close();
        cards.pout.flush();
        cards.pout.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}","class Sample {    
    
    public static final String INUT_FACE = ""A-large.in"";
    public static final String OUTPUTGURL = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BFORE = ""Case #"";
    public static final String CASE_STRING_FTER = "": "";
    
    Scanner cater = null;
    File environmentDirectory;
    PrintStream Pclient = null;
    int totalTuickets;
    int Testno;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int line;
    int col;
    int output;
    int feed;
    
    public static void main(String benvs[]){
        
        Sample Examples = new Sample();
        try {
            Examples.cater = new Scanner(new File(Sample.INUT_FACE));
            Examples.environmentDirectory = new File(Sample.OUTPUTGURL);
            
            if(Examples.environmentDirectory.exists()){
                Examples.environmentDirectory.delete();
            }
            
            Examples.environmentDirectory.createNewFile();
            
            Examples.Pclient = new PrintStream(Examples.environmentDirectory);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        Examples.totalTuickets = Examples.cater.nextInt();
        
        for(int key=1;key<=Examples.totalTuickets;key++){
            Examples.Testno = key;
            //plates = new ArrayList<Integer>();
            Examples.line = 0;
            Examples.col = 0;
            Examples.output = 0;
            Examples.feed = 0;
            Examples.line = Examples.cater.nextInt();
            Examples.col = Examples.cater.nextInt();
            Examples.output = Examples.cater.nextInt();
            Examples.feed = Examples.col/Examples.output;
            Examples.feed += (Examples.output-1);
            
            if(Examples.col%Examples.output == 0){
                // no action required
            }else{
                Examples.feed++;
            }
            if(Examples.line>1){
                Examples.line--;
                int misses = Examples.col/Examples.output;
                int  missturns = misses * Examples.line;
                Examples.feed +=  missturns;
            }
            
            
            
            Examples.Pclient.print(Sample.CASE_STRING_BFORE + Examples.Testno + Sample.CASE_STRING_FTER);
            
            Examples.Pclient.println(""""+Examples.feed);
        }
        
        Examples.cater.close();
        Examples.Pclient.flush();
        Examples.Pclient.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}",423,18,"width:output,turn:feed,row:line,cards:Examples,testNo:Testno,outputFile:environmentDirectory,totalTests:totalTuickets,CASE_STRING_BEFORE:CASE_STRING_BFORE,pout:Pclient,missTurns: missturns,scanner:cater,CASE_STRING_AFTER:CASE_STRING_FTER,OUTPUT_FILE:OUTPUTGURL,INPUT_FILE:INUT_FACE,argv:benvs,i:key,",551,0.39326998392740886,Greedy
521,,,393,18,,6351,4.451196936766307,0
522,,,464,15,,5321,3.8573490977287292,0
523,,,132,7,,2401,1.6639336864153544,0
524,,,134,7,,2327,1.5928441643714906,0
525,,,324,11,,3939,2.804755477110545,0
526,,,263,11,,3920,2.6800437927246095,0
527,,,366,16,,5578,3.8972601373990376,0
528,,,386,16,,5434,4.094944858551026,0
529,,,393,18,,6439,4.577531166871389,0
531,,,149,8,,2770,1.844701313972473,0
532,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String p = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = p + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(table + "".in""));
        PrintWriter pf = new PrintWriter(table + "".out"");
        
        int T = Integer.parseInt(cr.readLine());
        for (int bi = 1; bi <= T; bi++) {
            int ans4 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(cr.readLine());
            int[] datas = new int[w];
            String[] http = cr.readLine().split("" "");
            for (int json = 0; json < datas.length; json++)
                datas[json] = Integer.parseInt(http[json]);

            //1
            for (int json = 0; json < datas.length - 1; json++) {
                int p = datas[json];
                int lines = datas[json + 1];
                
                if (lines < p)
                    ans4 += (p - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int json = 0; json < datas.length - 1; json++) {
                int p = datas[json];
                int lines = datas[json + 1];
                
                int C = p - lines;
                if (C > w)
                    w = C;
            }
            
            for (int json = 0; json < datas.length - 1; json++) {
                if (datas[json] < w)
                    ans2 += datas[json];
                else
                    ans2 += w;
            }
            
            pf.println(String.format(xxx, bi, ans4, ans2));
        }
        
        cr.close();
        pf.close();
    }
}",360,17,"s:lines,max:w,f:p,c:C,pw:pf,prefix:xxx,br:cr,i:bi,n:w,num:p,raw:http,t:T,ans1:ans4,file:table,j:json,",531,0.34198155800501506,Greedy
533,,,240,10,,3374,2.2507303675015766,0
534,,,328,14,,4986,3.345659554004669,0
535,,,324,11,,3793,2.535277791817983,0
536,,,553,17,,5962,4.3739706913630165,0
537,,,330,14,,5004,3.40611340602239,0
538,,,317,11,,3943,2.795330619812012,0
539,,,265,10,,3440,2.3942640980084735,0
540,,,156,8,,2928,2.116398255030314,0
541,,,295,14,,4891,3.3808448791503904,0
542,,,544,16,,5633,4.083372938632965,0
543,,,306,11,,3961,2.804753645261129,0
544,,,311,15,,5245,3.629612878958384,0
545,,,500,17,,5894,4.403327051798502,0
546,,,358,17,,5988,4.255175769329071,0
547,,,303,11,,3891,2.779400153954824,0
548,,,321,16,,5606,3.6732941468556723,0
549,,,344,14,,4936,3.0203667998313906,0
550,,,249,9,,3126,1.9073101083437602,0
552,,,334,13,,4657,2.845854711532593,0
553,,,655,11,,3795,2.5692288517951964,0
554,,,305,13,,4602,2.859156060218811,0
555,,,358,17,,5946,3.602933959166209,0
556,,,149,8,,2846,1.7513426025708516,0
557,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter riter = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int iu=0; iu<n; iu++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long real = 0;
            
            for(int x = 0; x < r-1; x++){
                real = real + (co/k);
            }
            if(co-k == 0){
                real = real + k;
            }else if(co-k < k){
                real = k + 1;
            }else{
                real = (long) (real + Math.ceil((double)co/(double)k));
                real = real + k - 1;
            }
            System.out.println(""Case #""+(iu+1)+"": ""+real+""
"");
            riter.write(""Case #""+(iu+1)+"": ""+real+""
"");
        }
        in.close();
        riter.close();
    }
}",291,11,"w:k,writer:riter,i:iu,min:real,c:co,",206,0.12636758089065553,Greedy
558,,,426,16,,5414,3.413131658236186,0
559,,,325,15,,5266,3.1915275851885476,0
560,,,265,10,,3510,2.1551916201909385,0
561,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String string = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fifenas new FileInputStream(string + "".in"");
        InputStreamReader islisro new InputStreamReader(fenas);
        BufferedReader brbi new BufferedReader(lisro);

        FileOutputStream fobos new FileOutputStream(string + "".out"");
        OutputStreamWriter ISw = new OutputStreamWriter(bos);
        BufferedWriter bws = new BufferedWriter(ISw);

        String type = null;
        List<String> lists = new ArrayList<String>();
        while ((type = bi.readLine()) != null) {
            lists.add(type);
        }

        int numberLength = Integer.parseInt(lists.get(0));
        int CurrentPosition = 1;
        for (int ii = 0; ii < numberLength; ii++) {
            String linlineFirstlists.get(CurrentPosition++);
            String linlin02lists.get(CurrentPosition++);
            String[] words = lin02.split("" "");
            int[] aons= new int[words.length];
            for (int idi40= 0; idi40< words.length; di40++) {
                aonsidi40 = Integer.valueOf(words[di40]);
            }
            int[] amushing = ons;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =i10; i2 <i10mushing.length - 1; i10++) {
                        if (amushing[i2+1i10< amushing[i10]) {
                            min1[0] min1mushing[i2] i10amushing[i10+1];
                        }
                    }
                    
                    int use = 0;
                    for (int i3 =xi123; i3 <xi123mushing.length - 1; xi123++) {
                        if (amushing[i3+1xi123< amushing[xi123]) {
                            rate = Musemax(rate, amuseng[i3] xi123amushing[xi123+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1mushing.length - 1; i1++) {
                        min1min1+= Math.minsortushingi11], use);
                    }
            long[] sort = min1;
            String r = ""Case #"" + (ii + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            bws.write(r);
            bws.newLine();
        }

        if (bws != null)
            bws.close();

        if (bi != null)
            bi.close();
    }
}",479,24,"file:string,fis:fenas,isr:lisro,br:bi,fos:bos,isw:ISw,bw:bws,line:type,lines:lists,problemCount:numberLength,currentIndex:CurrentPosition,i:ii,line1:lineFirst,line2:lin02,vals:words,ans:ons,i4:di40,mush:amushing,min1:min1,i2:i10,rate:use,i3:xi123,i1:i1,min:sort,",3460,2.2452940503756205,GA
562,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner screen=new Scanner(System.in);
    int st,w,change ,power;
    st=screen.nextInt();
    int pos[];
    int names[];
    for(int multi=1;multi<=st;multi++){
        w=screen.nextInt();
        pos=new int[2501];
        change=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int ax=0;ax<(2*w-1);ax++){
            for(int ok=0;ok<w;ok++){
                int h=screen.nextInt();
                pos[h]++;
                change=Math.change(change,h);     
                power=Math.power(power,h);
            }
        }
        //System.out.println(min+"" ""+max);
        names=new int[w];
        for(int ok=change,w=0;ok<=power;ok++){
            if(pos[ok]%2!=0){
                names[w]=ok;
                w++;
            }
        }
        System.out.print(""Case #""+multi+"": "");
        for(int ok=0;ok<w;ok++){
            System.out.print(names[ok]+"" "");
        }
        System.out.println();
                    
    }
    
    
    screen.close();
}
}",281,12,"min:change,i:multi,n:w,l:w,x:h,sc:screen,ans:names,j:ax,max:power,arr:pos,t:st,k:ok,",423,0.25868475834528604,Greedy
563,,,345,14,,4901,3.0731831034024557,0
564,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fenos = new FileInputStream(file + "".in"");
        InputStreamReader isissrt new InputStreamReader(fenos);
        BufferedReader brbi new BufferedReader(issrt);

        FileOutputStream bus = new FileOutputStream(file + "".out"");
        OutputStreamWriter issow = new OutputStreamWriter(bus);
        BufferedWriter bwbw new BufferedWriter(issow);

        String part = null;
        List<String> bands = new ArrayList<String>();
        while ((part = bi.readLine()) != null) {
            bands.add(part);
        }

        int errorIndex = Integer.parseInt(bands.get(0));
        int reportedLoop = 1;
        for (inp i = 0p i < errorIndex; p++) {
            String lin5 = bands.get(reportedLoop++);
            String  lineTwo = bands.get(reportedLoop++);
            String[] valstats lineTwo.split("" "");
            int[] atrans= new int[stats.length];
            for (int iiu29= 0; iiu29< stats.length; iu29++) {
                atransiiu29 = Integer.valueOf(stats[iu29]);
            }
            int[] muhmushing trans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =i10; i2 <i10mushing.length - 1; i10++) {
                        if (hmushing[i2+1i10< hmushing[i10]) {
                            min1[0] min1mushing[i2] i10hmushing[i10+1];
                        }
                    }
                    
                    int key = 0;
                    for (int i3 =i123; i3 <i123mushing.length - 1; i123++) {
                        if (hmushing[i3+1i123< hmushing[i123]) {
                            rate = Mkeymax(rate, hmkeyng[i3] i123hmushing[i123+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1mushing.length - 1; i1++) {
                        min1min1+= Math.minsortushingi11], key);
                    }
            long[] sort = min1;
            String r = ""Case #"" + (p + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (bi != null)
            bi.close();
    }
}",479,24,"file:file,fis:fenos,isr:issrt,br:bi,fos:bus,isw:issow,bw:bw,line:part,lines:bands,problemCount:errorIndex,currentIndex:reportedLoop,i:p,line1:lin5,line2: lineTwo,vals:stats,ans:trans,i4:iu29,mush:hmushing,min1:min1,i2:i10,rate:key,i3:i123,i1:i1,min:sort,",2835,1.7612817565600076,GA
565,,,326,12,,4166,2.610573367277781,0
566,,,344,14,,4887,3.0667006572087607,0
567,,,330,14,,4723,2.909934941927592,0
568,,,500,17,,6037,3.7474283377329507,0
569,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner riter = new Scanner(System.in);
        inttryCountt = Integer.parseInt(riter.nextLine());
        
    
        //for each use case
        for(intclassIDd = 0;classIDd < tryCount; classID++) {
            
            int error = 0;
            int soft = 0;
            
            
            intgroupt = Integer.parseInt(riter.nextLine());
            
            ArrayList<Integer> TG = new ArrayList<Integer>();
            
            int length = 0;
            int fewace = 0;
            for(int ji = 0; ji < group; ji++) {
                
                intcharr = riter.nextInt();
                int difdevcuchar length;
                
                TG.add(char);
                
                if(dev < 0) {
                    
                    error += Math.abs(dev);
                    
                    if(dev < fewace) {
                        fewace = dev;
                    }
                }
                
                length = char;
            }
            
            int Maximum = Math.abs(fewace);
            length = 0;
            for(int ji = 0; ji < (group - 1); ji++) {
                
                int cuchar TG.get(ji);
                soft += (char > hMaximum ? hMaximum: char;
                
                length = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(error < 0 || soft < 0) {
                System.err.println(""Case #""+ (classID + 1));
            }
            
            System.out.println(""Case #""+ (classID + 1) + "": ""+ error + "" "" + soft);
            riter.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:riter,caseCount:tryCount,caseId:classID,first:error,second:soft,count:group,T:TG,last:length,lowest:fewace,i:ji,cur:char,diff:dev,highest:Maximum,",2242,1.3912450393040976,GA
570,,,254,11,,3916,2.400220541159312,0
571,,,321,16,,5560,3.450701423486074,0
572,,,328,14,,4941,3.073334276676178,0
573,,,328,14,,4821,2.8979832967122396,0
574,,,298,12,,4210,2.3043686787287396,0
575,,,426,16,,5639,3.507881848017375,0
576,,,358,16,,5629,3.4635016918182373,0
577,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner view = new Scanner(new File(""input.in""));
        PrintWriter cache=new PrintWriter(new File(""out""));
        int pc;
        pc = view.nextInt();
        for (int g = 1; g <= pc; g++) {
            int ee, id = 0, x = 0, w = 0, w = 0;
            ee = view.nextInt();
            int mr[] = new int[ee];

            for (int C = 0; C < ee; C++) {
                mr[C] = view.nextInt();

            }
            for (int C = 1; C < ee; C++) {
                id = mr[C - 1] - mr[C];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    x += id;
                }
            }
            for (int C = 0; C < ee - 1; C++) {
                if (mr[C] <= w) {
                    w += mr[C];
                }
                if (mr[C] > w) {
                    w += w;
                }
            }
            cache.printf(""Case #%d: %d %d
"",b,x,z);
        }
        cache.close();
    }

}",260,11,"m:mr,e:ee,z:w,c:C,d:id,tc:pc,b:g,x:x,input:view,out:cache,y:w,",391,0.22418506940205893,Greedy
578,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,solvers:rlver,out:lock,i:ci,id:x,res:arr,",288,0.13456867933273314,Greedy
579,,,281,12,,4165,2.6176701029141745,0
580,,,257,10,,3197,1.9914059241612752,0
581,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String p = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = p + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(table + "".in""));
        PrintWriter pf = new PrintWriter(table + "".out"");
        
        int T = Integer.parseInt(cr.readLine());
        for (int bi = 1; bi <= T; bi++) {
            int ans4 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(cr.readLine());
            int[] datas = new int[w];
            String[] http = cr.readLine().split("" "");
            for (int last = 0; last < datas.length; last++)
                datas[last] = Integer.parseInt(http[last]);

            //1
            for (int last = 0; last < datas.length - 1; last++) {
                int p = datas[last];
                int lines = datas[last + 1];
                
                if (lines < p)
                    ans4 += (p - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int last = 0; last < datas.length - 1; last++) {
                int p = datas[last];
                int lines = datas[last + 1];
                
                int C = p - lines;
                if (C > w)
                    w = C;
            }
            
            for (int last = 0; last < datas.length - 1; last++) {
                if (datas[last] < w)
                    ans2 += datas[last];
                else
                    ans2 += w;
            }
            
            pf.println(String.format(xxx, bi, ans4, ans2));
        }
        
        cr.close();
        pf.close();
    }
}",360,17,"s:lines,max:w,f:p,c:C,pw:pf,prefix:xxx,br:cr,i:bi,n:w,raw:http,num:p,t:T,ans1:ans4,file:table,j:last,",531,0.32236414750417075,Greedy
582,,,326,12,,4165,2.591552285353343,0
583,,,386,16,,5681,3.561281991004944,0
584,,,321,11,,3856,2.3270068526268006,0
585,,,263,11,,3902,2.42828270594279,0
586,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner con;
    try {
      con = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int f = con.nextInt();
    String line = con.nextLine();
    String resolution = """";
    for (int i=1; i<=f; i++) {
      int max = con.nextInt();
      int column = con.nextInt();
      int step = con.nextInt();
      int min = 0;

      for (int j=0; j<max; j++) {
        for (int ok=0; ok<column; ok+=step) {
           min++;
        }
      }

      if (i != 1) resolution += ""
"";
      resolution += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(resolution);
  }
}",187,11,"w:step,col:column,k:ok,sc:con,row:max,res:resolution,tmp:line,n:f,",273,0.16529376904169718,Greedy
588,,,393,18,,6343,3.9466092348098756,0
589,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner event = new Scanner(new File(""input.in""));
        PrintWriter cache=new PrintWriter(new File(""out""));
        int pc;
        pc = event.nextInt();
        for (int bi = 1; bi <= pc; bi++) {
            int w, id = 0, w = 0, Y = 0, w = 0;
            w = event.nextInt();
            int mr[] = new int[w];

            for (int fc = 0; fc < w; fc++) {
                mr[fc] = event.nextInt();

            }
            for (int fc = 1; fc < w; fc++) {
                id = mr[fc - 1] - mr[fc];
                if (id >= Y) {
                    Y = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int fc = 0; fc < w - 1; fc++) {
                if (mr[fc] <= Y) {
                    w += mr[fc];
                }
                if (mr[fc] > Y) {
                    w += Y;
                }
            }
            cache.printf(""Case #%d: %d %d
"",b,x,z);
        }
        cache.close();
    }

}",260,11,"m:mr,c:fc,z:w,e:w,d:id,tc:pc,b:bi,input:event,x:w,out:cache,y:Y,",391,0.24101602633794147,Greedy
590,,,443,17,,5984,3.787067234516144,0
591,,,200,9,,3150,1.9288397908210755,0
592,,,132,7,,2552,1.4773927927017212,0
593,,,260,9,,3093,1.8816081007321677,0
595,,,149,8,,2938,1.7968449672063191,0
596,,,305,13,,4615,2.808207376797994,0
597,,,517,23,,8115,5.138176393508911,0
598,,,291,14,,4915,3.0351154963175455,0
599,,,257,10,,3532,2.1648760437965393,0
601,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom ssolve = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter o = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> uubs = new ArrayList<Integer>();
            StringTokenizer uri = new StringTokenizer(tempLine);
            while(uri.hasMoreTokens())
            {
                uubs.add(Integer.parseInt(uri.nextToken()));
            }
            int secondEntry = 0;
            int secondAttempt = 0;
            for ( int xi = 0; xi < uubs.size()-1; xi++)
            {
                int fleading= uubs.get(xi);
                int shalf= uubs.get(xi+1);
                
                if ( (leading - half) >= 0)
                {
                    secondEntry = secondEntry + (leading- half);
                }
                
            }
            int catDro = 0;
            for ( int xi = 0; xi < uubs.size() - 1; xi++)
            {
                int fleading= uubs.get(xi);
                int shalf= uubs.get(xi+1);
                int perfectPay = leading-half;
                if (perfectPayp > catDro)
                {
                    catDro = perfectPay;
                }
            }
            doubleratee = catDro/10;
            for ( int xi = 0; xi < uubs.size() - 1; xi++)
            {
                int ttmpCloud= uubs.get(xi);
                if (tmpCloudk >= catDro)
                {
                    secondAttempt+= catDro;
                }
                else
                {
                    secondAttempt += tmpCloud;
                }
            }
            o.println(""Case #"" + (x+1) + "": "" + secondEntry + "" "" + secondAttempt);
        
        }
        o.close();

    }

    

    
    

    
}",379,18,"solution:ssolve,input:input,writer:o,numCases:numCases,x:x,numPlates:numPlates,tempLine:tempLine,nums:uubs,io:uri,firstAttempt:secondEntry,secondAttempt:secondAttempt,i:xi,first:leading,second:half,maxDrop:catDro,tempDrop:perfectPay,rate:rate,tempStack:tmpCloud,",833,0.4741549293200175,GA
602,,,655,11,,3957,2.6329407771428426,0
603,,,366,16,,5617,3.5088520447413125,0
604,"class A {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(in.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.readLine());
            String[] arr = in.readLine().split("" "");
            int[] a = new int[n];
            for(int j = 0; j < n; j++) {
                a[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(a[j] > a[j + 1]) {
                    tot += a[j] - a[j + 1];
                }
                max = Math.max(max, a[j] - a[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(a[k] <= j) {
                        temptot += a[k];
                    } else {
                        temptot += j;
                    }
                    if(j < a[k] - a[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}","class A {
    public static void main(String[] args) throws Exception {
        BufferedReader con = new BufferedReader(new FileReader(""A.in""));
        PrintStream client = new PrintStream(""A.out"");

        int tall= Integer.parseInt(con.readLine());
        for(int i c 0; i c all; c++) {
            int nnet= Integer.parseInt(con.readLine());
            String[] aimg= con.readLine().split("" "");
            int[] a area new int[net];
            for(int j jen 0; j jen net; jen++) {
                area[jen] = Integer.parseInt(img[jen]);
            }
            int intott = 0;
            int step = 0;
            for(int j jen 0; j jen net - 1; jen++) {
                if(area[j] jen area[jen + 1]) {
                    tot += areintott] jen area[jen + 1];
                }
                max = Mathstepx(max, astep[stepjen area[jen + 1]);
            }
            long tott2 = Long.MAX_VALUE >> 1;
            for(int jen = 0; jen <= 100000; jen++) {
                boolean bits = true;
                long yuthott = 0;
                for(int k v 0; k v net - 1; v++) {
                    if(area[k]v<= jen) {
                        temyuthott area[v];
                    } else {
                        teyuthott= jen;
                    }
                    if(j < arjena[k] v area[v + 1]) {
                        bits = false;
                    }
                }
                if(bits) {
                    tott2 = Math.min(tott2, yuthott);
                }
            }
            client.println(""Case #"" + (c + 1) + "": "" + intott + "" "" + tott2);
        }
    }
}",360,14,"in:con,out:client,t:all,i:c,n:net,arr:img,a:area,j:jen,tot:intott,max:step,tot2:tott2,temptot:yuthott,k:v,works:bits,",1927,1.2245216608047484,GA
605,,,366,16,,5577,3.488286324342092,0
606,,,358,17,,6067,3.839811086654663,0
607,,,291,10,,3662,2.217543160915375,0
608,,,263,11,,3780,2.3788976470629373,0
609,,,325,15,,5392,3.282085919380188,0
610,,,358,17,,6046,3.7122400323549907,0
611,,,290,10,,3425,2.1312877694765726,0
612,,,348,12,,3906,2.3756486813227338,0
614,,,605,18,,6428,4.098517680168152,0
615,,,363,15,,5228,3.280131177107493,0
616,,,256,11,,3913,2.3743109345436095,0
617,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter rx = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                rx.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,wr:rx,",331,0.20965091387430826,Greedy
618,,,282,11,,3601,2.2579854766527814,0
619,,,290,10,,2872,1.7805493513743083,0
620,,,367,18,,6241,3.871328874429067,0
621,,,255,11,,3615,2.2437897682189942,0
622,,,291,14,,5008,3.0878265937169393,0
623,,,269,12,,4148,2.65253400405248,0
624,,,257,10,,3472,2.028520862261454,0
625,,,211,9,,2781,1.5735138456026714,0
626,,,265,10,,3491,2.087362897396088,0
628,,,348,12,,4301,2.7106489022572835,0
629,,,149,8,,2636,1.5562699516614278,0
630,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom systemolve = new Mushroom();

        Scanner this = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter editor = new PrintWriter( ""MushroomOutput.txt"");
        intnumTancess = Integer.parseInt( this.nextLine());
        for ( int xx= 0; xx< numTances; x++)
        {
            intnumSlatess = Integer.parseInt(this.nextLine());
            StringTemplinee = this.nextLine(); 
            
            ArrayList<Integer> enumers = new ArrayList<Integer>();
            StringTokenizer po = new StringTokenizer(Templine);
            while(po.hasMoreTokens())
            {
                enumers.add(Integer.parseInt(po.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i =i0; i <ienumers.size()-1; i++)
            {
                int fironeenumers.get(i);
                int sechalfenumers.get(i+1);
                
                if ( (one - half) >= 0)
                {
                    firstAttempt = firstAttempt + (one- half);
                }
                
            }
            int parentdrop = 0;
            for ( int i =i0; i <ienumers.size() - 1; i++)
            {
                int fironeenumers.get(i);
                int sechalfenumers.get(i+1);
                tempDropDrop = one-half;
                if ( temtempDropparentdrop)
                {
                    parentdrop = tempDrop;
                }
            }
            double rat pitchparentdrop/10;
            for ( int i =i0; i <ienumers.size() - 1; i++)
            {
                int temtempShiftenumers.get(i);
                if ( temtempShift parentdrop)
                {
                    secondAttempt+= parentdrop;
                }
                else
                {
                    secondAttempt += tempShift;
                }
            }
            editor.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        editor.close();

    }

    

    
    

    
}",379,18,"solution:systemolve,input:this,writer:editor,numCases:numTances,x:x,numPlates:numSlates,tempLine:Templine,nums:enumers,io:po,firstAttempt:firstAttempt,secondAttempt:secondAttempt,i:i,first:one,second:half,maxDrop:parentdrop,tempDrop:tempDrop,rate: pitch,tempStack:tempShift,",1018,0.5633541544278463,GA
631,,,655,11,,3928,2.592613573869069,0
632,,,348,19,,6640,4.18655827442805,0
633,,,358,16,,5365,3.3865591526031493,0
634,,,132,7,,1938,1.1861976901690165,0
635,,,348,12,,4185,2.5685667475064595,0
636,,,345,14,,4510,2.827996305624644,0
637,,,406,14,,4971,3.1331748366355896,0
638,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner request = new Scanner(new File(""input.in""));
        PrintWriter table=new PrintWriter(new File(""out""));
        int ta;
        ta = request.nextInt();
        for (int g = 1; g <= ta; g++) {
            int e, id = 0, w = 0, w = 0, w = 0;
            e = request.nextInt();
            int range[] = new int[e];

            for (int C = 0; C < e; C++) {
                range[C] = request.nextInt();

            }
            for (int C = 1; C < e; C++) {
                id = range[C - 1] - range[C];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int C = 0; C < e - 1; C++) {
                if (range[C] <= w) {
                    w += range[C];
                }
                if (range[C] > w) {
                    w += w;
                }
            }
            table.printf(""Case #%d: %d %d
"",b,x,z);
        }
        table.close();
    }

}",260,11,"z:w,out:table,c:C,input:request,m:range,d:id,b:g,tc:ta,x:w,y:w,",361,0.2276977340380351,Greedy
639,,,406,14,,4921,3.003983191649119,0
640,,,250,11,,3963,2.346997094154358,0
641,,,156,8,,2789,1.6888237516085307,0
642,,,292,13,,4427,2.6565649072329203,0
643,,,464,15,,5278,3.400142272313436,0
644,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metogram;

    public static void main(String[] args) {
        Scanner sp = new Scanner(System.in);
        int z = sp.nextInt();
        for(int  testcases = 1;  testcases <= z;  testcases++) {

            int no = sp.nextInt();
            List<Integer> result = new ArrayList<Integer>();

            //each list
            for(int ana0; anano*2-1; na++) {

                //each element in the list
                for(int bbb0; bbbno; bb++) {
                    result.add(sp.nextInt());
                }

            }

            result.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i2, Integer O0) {
                    if(i2 > O0) return 1;
                    else if(i2 < O0) return -1;
                    else return 0;
                }
            });

            List<Integer> complete = new ArrayList<Integer>();
            int sistrip result.strip();
            int prrev result.get(0);
            int limit = 1;

            for(int ipi1; ipistrip; pi++) {
                if(result.getpii) != rev) {

                    if(limit % 2 == 1) {
                        complete.add(rev);
                    }

                    limit = 1;
                    prrev result.get(pi);

                } else {
                    limit++;
                }
            }

            if(limit % 2 == 1) {
                complete.add(rev);
            }

            System.out.printf(""Case #%d:"",  testcases);
            for(int j=0li j<climplete.strip(); li++) {
                System.out.print("" "" + complete.get(li));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metogram,sc:sp,t:z,testcase: testcases,n:no,list:result,a:na,b:bb,o1:i2,o2:O0,answer:complete,size:strip,prev:rev,count:limit,i:pi,j:li,",3618,2.261296308040619,GA
645,,,334,13,,4566,2.841942576567332,0
646,,,393,18,,6231,3.7372103730837503,0
647,,,375,10,,3537,2.220925299326579,0
648,,,418,11,,3858,2.454619061946869,0
649,,,269,12,,4241,2.7113184293111163,0
650,,,257,10,,3411,2.0274368087450663,0
651,,,290,10,,3158,1.9047806819279989,0
652,,,330,14,,5043,3.142414478460948,0
654,,,393,18,,6384,3.907354172070821,0
655,,,379,18,,6274,4.021170941988627,0
656,,,269,12,,4277,2.5831902503967283,0
657,,,134,7,,1528,0.9364685535430908,0
658,,,240,11,,3817,2.360569743315379,0
659,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner str = new Scanner(new File(""input.in""));
        PrintWriter state=new PrintWriter(new File(""out""));
        int tc;
      tctc = str.nextInt();
        for (int r = 1; r <= tc; r++) {
            int e, f = 0, ix = 0, w = 0, o = 0;
          e e = str.nextInt();
            int mc[] = new int[e];

            for (int co = 0; co < e; co++) {
              mc co[c] = str.nextInt();

            }
            for (int co = 1; co < e; co++) {
                f = mc[cco- 1] - mc[co];
                if (f >= w) {
                    w = f;
                }
                if (f >= 0) {
                    ix += f;
                }
            }
            for (int co = 0; co < e - 1; co++) {
                if (mc[co] <= w) {
                    o += mc[co];
                }
                if (mc[co] > w) {
                    o += w;
                }
            }
            state.printf(""Case #%d: %d %d
"",b,x,z);
        }
        state.close();
    }

}",260,11,"input:str,out:state,tc:tc,b:r,e:e,d:f,x:ix,y:w,z:o,m:mc,c:co,",512,0.3194499532381693,GA
660,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String FILEName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanin = new Scanner(new File(FILEName));
        
        intQT = scanin.nextInt();
        for (int iu = 0; iu < Q; iu++)
        {
            intNTN = scanin.nextInt();
            int[] iinner= new int[NT];
            for (int jo= 0; jo< NT; o++)
            {
               innernoj] = scanin.nextInt();
            }
            long println = 0;
            int end = 0;        
            for (int i1 ki250; i1 ki25inner.length; ki25++)
            {
                if (inneki25i1] > end)
                {
                    staendinner[ki25];
                }
                else
                {
                    outprintln (staendinner[ki25]);
                    staendinner[ki25];
                }
            }
            
            long y = energyrintln;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long againone = 0;
            for (int i2 i2560; i2 i256inner.length - 1; i256++)
            {
                if ( (inner[i2]i256 inner[i256+1] >  maxNeg))
                {
                    maxDif maxNegner[i2]i256 inner[i256+1]);
                }
            }
            
            long use =  maxNeg;
            for (int i1 ki250; i1 ki25inner.length - 1; ki25 ++)
            {
                out1 againoneath.min(rate,useer[ki25]);
            }
            long z = wgainone;
            
            System.oprintlnprintln(""Case #"" + (iu+1) + "": "" + energy + "" "" + w);
        }
        
        scanin.close();
    }

}",321,16,"fileName:FILEName,scanner:scanin,T:Q,i:iu,N:NT,in:inner,j:o,out:println,start:end,i1:ki25,y:energy,maxDiff: maxNeg,out1:againone,i2:i256,rate:use,z:w,",2656,1.6126824180285135,GA
661,,,265,10,,3499,2.0993788917859395,0
662,,,527,23,,8115,5.229467880725861,0
663,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner  scanatter = new Scanner(System.in);
        int t =f scanatter.nextInt();
        for(int xs = 1; xs <= f; ++xs){
            int n =k scanatter.nextInt();
            boolean[] Soldchers = new boolean[2500];
            for(int i = 0; i < 2 * k - 1; ++i){
                for(int js = 0; js < k; ++js){
                    int s =b scanatter.nextInt();
                    Soldchers[sb1] = !Soldchers[b-1];
                }
            }
            int base = 0;
            System.out.print(""Case #"" + xs + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(Soldchers[i-1]){
                    ++base;
                    if(base < k){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner: scanatter,t:f,x:xs,n:k,soldiers:Soldchers,i:i,j:js,s:b,count:base,",612,0.37450284163157144,GA
664,,,317,11,,3854,2.4175177137056987,0
665,,,311,15,,5256,3.2434872150421143,0
666,,,311,15,,4984,3.0076138893763225,0
667,,,443,17,,6001,3.7820400834083556,0
668,,,295,14,,4831,2.989174461364746,0
669,,,309,13,,4599,2.768979028860728,0
670,,,358,17,,5716,3.5780877749125164,0
671,,,132,7,,2426,1.4658994634946187,0
672,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,input:include,findRow:loadLine,inst:R,c:C,output:put,findShip:followship,pw:pow,n1: n01,",437,0.26958759625752765,Greedy
673,,,260,9,,3275,2.0251549323399862,0
674,,,426,16,,5618,3.45273486773173,0
675,,,256,11,,3867,2.3839719692866006,0
676,,,525,22,,7790,5.035511064529419,0
677,,,426,16,,5630,3.586078953742981,0
678,,,280,11,,3856,2.325672745704651,0
679,,,240,10,,2269,1.4173937678337096,0
680,,,236,14,,4705,2.93185187180837,0
681,,,156,8,,2932,1.8213326930999756,0
682,,,572,13,,4582,2.8451332251230874,0
683,,,132,7,,2508,1.452665873368581,0
684,,,348,12,,4264,2.637222770849864,0
685,,,280,11,,3854,2.4138293186823527,0
686,,,285,12,,4202,2.561242663860321,0
687,,,272,14,,4994,2.9754379471143086,0
689,,,262,12,,4294,2.6263762593269346,0
690,,,302,13,,4552,2.812072777748108,0
691,,,735,20,,7098,4.7151902159055075,0
692,,,278,13,,4375,2.7400543093681335,0
694,,,300,10,,3593,2.221656004587809,0
695,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner caner = new Scanner(System.in);
        inall t = caner.nextInt();
        for(int x rx 1; x rx= all; ++rx){
            inw n = caner.nextInt();
            boolean[] frontier = new boolean[2500];
            for(int start = 0; start < 2 * w - 1; ++start){
                for(int adj = 0; adj < w; ++adj){
                    ind s = caner.nextInt();
                    frontier[d-1] = !frontier[d-1];
                }
            }
            int h = 0;
            System.out.print(""Case #"" + rx + "": "");
            for(int start = 1; start <= 2500; ++start){
                if(frontier[start-1]){
                    ++h;
                    if(h < w){
                        System.out.print(start + "" "");
                    }
                    else{
                        System.out.println(start);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:caner,t:all,x:rx,n:w,soldiers:frontier,i:start,j:adj,s:d,count:h,",1045,0.60597771803538,GA
696,,,308,14,,4852,2.897859338919322,0
697,,,790,13,,4674,3.1098039031028746,0
698,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sh=new Scanner(System.in);
    int tp,ot,minimum ,w;
    tp=sh.nextInt();
    int arr[];
    int can[];
    for(int ie1;ie=tp;e++){
        ot=sh.nextInt();
        arr=new int[2501];
        minimum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int jc0;jc(2*ot-1);c++){
            for(int kok0;kokot;ok++){
                int ex=sh.nextInt();
                arr[ex]++;
                minimum=Math.minimum(minimum,ex);     
                w=Math.w(w,ex);
            }
        }
        //System.out.println(min+"" ""+max);
        acannew int[ot];
        for(int k=okinimum,il=ok;k<=w;ok++){
            if(arr[ok]%2!=0){
                can[lil=ok;
                il++;
            }
        }
        System.out.print(""Case #""+e+"": "");
        for(int kok0;kokot;ok++){
            System.out.print(can[ok]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sh.close();
}
}",281,12,"sc:sh,t:tp,n:ot,min:minimum,max:w,arr:arr,ans:can,i:e,j:c,k:ok,x:ex,l:il,",1123,0.6218207955360413,GA
699,,,619,11,,4020,2.620310707887014,0
700,,,478,21,,7465,4.736336847146352,0
701,,,224,10,,3608,2.1739075859387715,0
702,,,317,11,,3835,2.4244479735692344,0
703,,,418,11,,3919,2.4497613668441773,0
704,,,263,11,,3731,2.3140900174776715,0
705,,,420,16,,5637,3.491867518424988,0
706,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        indt t = anter.nextInt();
        for(int xrx= 1; xrx<= dt; ++rx){
            inw n = anter.nextInt();
            boolean[] solders = new boolean[2500];
            for(int ind = 0; ind < 2 * w - 1; ++ind){
                for(int jj = 0; jj < w; ++jj){
                    ings s = anter.nextInt();
                    soldersgss-1] = !solders[gs-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + rx + "": "");
            for(int ind = 1; ind <= 2500; ++ind){
                if(solders[ind-1]){
                    ++char;
                    if(char < w){
                        System.out.print(ind + "" "");
                    }
                    else{
                        System.out.println(ind);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:anter,t:dt,x:rx,n:w,soldiers:solders,i:ind,j:jj,s:gs,count:char,",2685,1.6607869903246562,GA
707,,,405,14,,4811,2.983670965830485,0
708,,,149,8,,2858,1.647112786769867,0
709,,,366,16,,5682,3.508723787466685,0
710,,,348,12,,4261,2.674609688917796,0
711,,,408,13,,4253,2.52954124212265,0
712,"class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter fw = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            int w = scanner.nextInt();
            fw.write(String.format(""Case #%d: %s\n"", t, solve(r, c, w)));
        }
        fw.close();
    }

    private static int solve(int r, int c, int w) {
        int res = ((c - 1) / w + 1) * (r - 1) + w + (c - 1) / w;
        return res;
    }
}","class A {
    private static final String iniFull = ""A-small-attempt0 (1).in"";
    private static final String  outDir = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(iniFull));
        int Type = scanner.nextInt();
        FileWriter ow = new FileWriter( outDir);

        for (int ti = 1; ti <= Type; ++ti) {
            int p = scanner.nextInt();
            int k = scanner.nextInt();
            int q = scanner.nextInt();
            ow.write(String.format(""Case #%d: %s
"", t, solve(r, c, w)));
        }
        ow.close();
    }

    private static int solve(int p, int k, int q) {
        int ents = ((k - 1) / q + 1) * (p - 1) + q + (k - 1) / q;
        return ents;
    }
}",187,10,"c:k,fw:ow,res:ents,w:q,r:p,inFile:iniFull,outFile: outDir,T:Type,t:ti,",297,0.1740848183631897,Greedy
713,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int xxx = 0; xxx < numCases; xxx++)
        {
            int numplations = Integer.parseInt(input.nextLine());
            String TempString = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer ioiu new StringTokenizer(TempString);
            while(iu.hasMoreTokens())
            {
                nums.add(Integer.parseInt(iu.nextToken()));
            }
            int firstThread = 0;
            int secondTask = 0;
            for ( int part = 0; part < nums.size()-1; part++)
            {
                int firfrontnums.get(part);
                int sechalfnums.get(part+1);
                
                if ( (front - half) >= 0)
                {
                    firstThread = firstThread + (front- half);
                }
                
            }
            int maxDrop = 0;
            for ( int part = 0; part < nums.size() - 1; part++)
            {
                int firfrontnums.get(part);
                int sechalfnums.get(part+1);
                inporarySpreadop = front-half;
                if ( porarySpread > maxDrop)
                {
                    maxDrop = porarySpread;
                }
            }
            double  depth = maxDrop/10;
            for ( int part = 0; part < nums.size() - 1; part++)
            {
                int temTempStacknums.get(part);
                if ( TempStack >= maxDrop)
                {
                    secondTask+= maxDrop;
                }
                else
                {
                    secondTask += TempStack;
                }
            }
            writer.println(""Case #"" + (xxx+1) + "": "" + firstThread + "" "" + secondTask);
        
        }
        writer.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:input,writer:writer,numCases:numCases,x:xxx,numPlates:numplations,tempLine:TempString,nums:nums,io:iu,firstAttempt:firstThread,secondAttempt:secondTask,i:part,first:front,second:half,maxDrop:maxDrop,tempDrop:porarySpread,rate: depth,tempStack:TempStack,",952,0.5758646885553996,GA
714,,,344,14,,4928,2.8671764214833577,0
715,,,417,16,,5697,3.576156524817149,0
716,,,393,18,,6420,4.066330715020498,0
717,,,256,11,,3844,2.3447678248087565,0
718,,,271,10,,3513,2.210082964102427,0
719,,,269,12,,4068,2.4247240821520486,0
720,,,417,16,,5525,3.471507966518402,0
721,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.05656324625015259,Greedy
722,,,291,14,,4987,3.1600555062294005,0
723,,,375,10,,3500,2.194242775440216,0
724,,,417,16,,5687,3.6080845753351847,0
725,,,406,17,,6050,3.729643976688385,0
726,,,468,12,,4340,2.7407663106918334,0
727,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.044098357359568276,Greedy
728,,,290,10,,2862,1.733922791481018,0
729,,,264,13,,4615,2.815358316898346,0
730,,,443,14,,4960,3.017556341489156,0
731,,,303,11,,3901,2.415753968556722,0
732,,,317,11,,3914,2.3919538418451944,0
733,,,240,11,,3961,2.486715841293335,0
734,,,406,17,,5964,4.038309689362844,0
735,,,326,12,,4286,3.057064485549927,0
736,,,171,10,,3316,2.226291235287984,0
737,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner ler = new Scanner(System.in);
        iCaseIDunt = Integer.parseInt(ler.nextLine());
        
    
        //for each use case
        for(icaseIndexeId = caseIndexeId < CaseID; caseIndex++) {
            
            int star = 0;
            int current = 0;
            
            
            icounterunt = Integer.parseInt(ler.nextLine());
            
            ArrayList<Integer> TI = new ArrayList<Integer>();
            
            int global = 0;
            int oldest = 0;
            for(int i qi 0; i qi counter; qi++) {
                
                irevcur = ler.nextInt();
                int dilength curev global;
                
                TI.add(rev);
                
                if(length < 0) {
                    
                    star += Math.abs(length);
                    
                    if(length < oldest) {
                        oldest = length;
                    }
                }
                
                global = rev;
            }
            
            int ast = Math.abs(oldest);
            global = 0;
            for(int i qi 0; i qi (counter - 1); qi++) {
                
                int curev TI.get(qi);
                current += (rev > ast) ? ast : rev;
                
                global = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(star < 0 || current < 0) {
                System.err.println(""Case #""+ (caseIndex + 1));
            }
            
            System.out.println(""Case #""+ (caseIndex + 1) + "": ""+ star + "" "" + current);
            ler.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:ler,caseCount:CaseID,caseId:caseIndex,first:star,second:current,count:counter,T:TI,last:global,lowest:oldest,i:qi,cur:rev,diff:length,highest:ast,",1128,0.7901023705800374,GA
738,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int rc;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String image = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWritercpwaw = new PrintWriter(image);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                cpwa.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int eOne = sc.nextInt();
                int  n01 = sc.nextInt();
                System.out.println(r+"" ""+eOne+"" ""+ n01);
                int findfindrow(eOne/ n01);
                        int  findPort=0;
                        if(eOne% n01==0)
                            fi findPort  n01-1;
                        else
                            fi findPort  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findrow+"" findShip: ""+ findPort);
                
                
                int rdata= findrow+ findPort;
                
                System.out.println(data);
                cpwa.print(data);
                cpwa.println();
            }
            cpwa.println();
            cpwa.flush();
            cpwa.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"inst:rc,input:input,output:image,sc:sc,pw:cpwa,n:n,c:c,r:r,c1:eOne,n1: n01,findRow:findrow,findShip: findPort,res:data,",992,0.7380137006441753,GA
739,,,406,17,,5902,4.468061570326487,0
740,,,408,15,,5290,3.9677971402804055,0
741,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String offset = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = num + ""-large"";
        
        BufferedReader bstr= new BufferedReader(new FileReader(table + "".in""));
        PrintWriter ppwh= new PrintWriter(table + "".out"");
        
        int tw= Integer.parseInt(str.readLine());
        for (int bi = 1; bi <= w; bi++) {
            int an2 = 0;
            int anaalt = 0;
            int nn= Integer.parseInt(str.readLine());
            int[] operams = new int[n];
            String[] rinstance= str.readLine().split("" "");
            for (int j ij 0; j ij operams.length; ij++)
                operams[j] = ijnteger.parseInt(instance[ij]);

            //1
            for (int j ij 0; j ij operams.length - 1; ij++) {
                int f =woperams[ij];
                int s =ksoperams[ij + 1];
                
                if (ks < w)
                    an2 += (w - ks);
            }
            
            //2
            int right = Integer.MIN_VALUE;
            for (int j ij 0; j ij operams.length - 1; ij++) {
                int f =woperams[ij];
                int s =ksoperams[ij + 1];
                
                int cw= w - ks;
                if (c w right)
                    right = w;
            }
            
            for (int j ij 0; j ij operams.length - 1; ij++) {
                if (operams[ij] < right)
                    anaalt += operams[ij];
                else
                    anaalt += right;
            }
            
            pwh.println(String.format(offset, bi, an2, anaalt));
        }
        
        str.close();
        pwh.close();
    }
}",360,17,"prefix:offset,num:num,file:table,br:str,pw:pwh,t:w,i:bi,ans1:an2,ans2:anaalt,n:n,datas:operams,raw:instance,j:ij,f:w,s:ks,max:right,c:w,",1254,0.8811624447504679,GA
742,,,171,10,,3418,2.2820114294687905,0
744,,,240,10,,3131,2.1718801975250246,0
745,,,326,12,,4263,3.133563232421875,0
746,,,328,14,,4972,3.578015371163686,0
747,,,263,11,,3877,2.8072940508524575,0
748,,,265,10,,3630,2.572503077983856,0
749,,,272,14,,4864,3.4537076791127523,0
750,,,281,12,,4271,3.030733637015025,0
751,,,260,9,,2532,1.8718800703684488,0
752,,,260,9,,3167,2.137541035811106,0
753,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String IN = ""files/A-large"";
        BufferedReadeagainin = new BufferedReader(new FileReader(IN + "".in""));
        PrintWriter cache = new PrintWriter(new BufferedWriter
                (new FileWriter(IN + "".out"")));

        StringTokenizer pe;
        int tesTestcaseInteger.parseInt(again.readLine());
        for (intnumt = 1;numt <= Testcase; num++)
        {
            int N =NoInteger.parseInt(again.readLine());
            int[] mman= new int[No];

            st penew StringTokenizer(again.readLine());
            man[0] = Integer.parseInt(pe.nextToken());
            long ex = 0, j = 0;

            int p = 0;

            int cucopy man[0];
            for (int ilc= 1; ilc< No; lc++)
            {
                man[lc] = Integer.parseInt(pe.nextToken());
                if (mlcn[i] < copy)
                {
                    y j= cucopy man[lc];

                    int danger = cucopy man[lc];
                    idangeriff > p)
                        p = danger;
                }
                cucopy man[lc];
            }

            for (int ilc= 0; ilc< No - 1; lc++)
                if (mlcn[i] < p)
                    x ex= man[lc];
                else
                    ex += p;

            cache.printf(""Case #%d: %d %d%n"", num, yj ex);
        }

        again.close();
        cache.close();
    }
}",306,14,"FILE:IN,in:again,out:cache,st:pe,testCases:Testcase,test:num,N:No,m:man,x:ex,y:j,jump:p,current:copy,i:lc,diff:danger,",2229,1.5639547069867452,GA
754,,,291,10,,3513,2.4791764418284097,0
755,,,269,12,,4300,3.0238157868385316,0
756,,,256,11,,3950,2.8960801045099895,0
757,,,464,15,,5408,3.9352279901504517,0
758,,,272,14,,4898,3.5256462574005125,0
759,,,211,9,,2904,2.063644218444824,0
760,,,317,12,,4166,3.0412456234296164,0
761,,,256,11,,3852,2.6988434235254926,0
762,,,393,18,,6380,4.681635189056396,0
763,,,240,10,,3549,2.626053448518117,0
764,,,500,17,,6011,4.337426896890005,0
765,,,272,14,,4897,3.3963678081830344,0
766,,,358,17,,6052,4.342028125127157,0
767,,,255,11,,3995,2.9600217739741006,0
768,,,309,13,,4654,3.3343359351158144,0
769,,,305,13,,4496,3.2228691895802815,0
770,,,334,13,,4649,3.458559854825338,0
773,,,321,16,,5691,4.100728130340576,0
774,,,282,11,,3909,2.7976218581199648,0
775,,,298,12,,4106,2.929301981131236,0
776,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader is = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter raw = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = is.readLine();
            
            int A = Integer.parseInt(line);
            for(int iter=0;iter<A;iter++){
                line = is.readLine();
                int Num = Integer.parseInt(line);
                line = is.readLine();
                String [] takenos = line.split("" "");                
                int [] V VER new int [Num];
                for (int k=kh;k<khum;kh++){
                    VVERkkh= Integer.parseInt(takenos[kh]);
                }
                int a=0,sb=0,p=0;
                for (int k=kh;k<khum-1;kh++){
                    if (VER[k]khVER[kh+1]){
                        a=a+VEa[a]khVER[kh+1];
                        if (VER[k]khVER[kh+1]>p){
                            max=VEp]khVER[kh+1];
                        }
                    }
                }
                for (int k=kh;k<khum-1;kh++){
                    if (VER[kh]>=p){
                        sb=sb+p;
                    } else{
                        b=bsbVsbR[kh];
                    }
                }
                
                System.raw.println(""Case #"" + (iter+1) +"": "" + a + "" "" + sb);    
                raw.write(""Case #"" + (iter+1) +"": "" + a + "" "" + sb + ""
"");
            }
            is.close();    
            raw.close();
        } catch (FileNotFoundException e) {
            System.raw.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.raw.println(""IOException"");
            e.printStackTrace();
        }
        long  endTim=System.currentTimeMillis();//End time
        System.raw.println(""Running time is ""+( endTim-StartTime)+""ms"");

    }

}",443,14,"startTime:StartTime,in:is,out:raw,line:line,T:A,i:iter,N:Num,tokens:takenos,V:VER,k:kh,a:a,b:sb,max:p,endTime: endTim,",1511,1.0709797541300456,GA
778,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter p = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] line = new int[N];

            st = new StringTokenizer(in.readLine());
            line[0] = Integer.parseInt(st.nextToken());
            long xxx = 0, gy = 0;

            int ip = 0;

            int curcurrentline[0];
            for (int sup = 1; sup < N; sup++)
            {
                line[sup] = Integer.parseInt(st.nextToken());
                if (line[sup] < current)
                {
                    y +gy curcurrentline[sup];

                    int diff shiftrcurrentline[sup];
                    ifshiftff > ip)
                        ip = shift;
                }
                curcurrentline[sup];
            }

            for (int sup = 0; sup < N - 1; sup++)
                if (linsup[i] < ip)
                    x +xxx line[sup];
                else
                    xxx += ip;

            p.printf(""Case #%d: %d %d%n"", test, y,gyxxx);
        }

        in.close();
        p.close();
    }
}",306,14,"FILE:FILE,in:in,out:p,st:st,testCases:testCases,test:test,N:N,m:line,x:xxx,y:gy,jump:ip,current:current,i:sup,diff:shift,",799,0.5496991316477458,GA
779,,,291,14,,4875,3.5612273772557574,0
781,,,325,12,,4308,3.1898664752642314,0
782,,,418,11,,3790,2.623791972796122,0
783,,,406,17,,6051,4.374808812141419,0
784,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner coll = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int T T coll.nextInt();
        int r,or,k,p;
        for(int e=0; e<T; ++e){
            r r coll.nextInt();
            c orcoll.nextInt();
            w k coll.nextInt();
            rp= or/k;
            p *=r;
            p +=k-1;
            if(or%k > 0)
                p+=1;
            pv.println(""Case #"" +e(t+1) + "": "" + p );
        }
        pv.close();
    }
    
}",149,8,"sc:coll,pw:pv,T:T,r:r,c:or,w:k,rez:p,t:e,",728,0.5033632477124532,GA
785,,,353,14,,4628,3.3378074089686076,0
786,,,241,14,,4783,3.4919832229614256,0
787,,,256,11,,3862,2.83579683303833,0
788,,,295,13,,4455,3.251478350162506,0
789,,,399,16,,5395,3.960813407103221,0
790,,,321,16,,5736,4.1822603384653725,0
791,,,256,11,,3850,2.7929775794347127,0
792,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter rx = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                rx.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,wr:rx,",331,0.24628528753916423,Greedy
793,,,790,13,,4728,3.614486547311147,0
794,,,327,17,,6029,4.394242262840271,0
795,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String TEXT = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(TEXT + "".in""));
        PrintWriter inner = new PrintWriter(new BufferedWriter
                (new FileWriter(TEXT + "".out"")));

        StringTokenizer first;
        int testCases = Integer.parseInt(in.readLine());
        for (int num = 1; num <= testCases; num++)
        {
            int No = Integer.parseInt(in.readLine());
            int[] mimm= new int[No];

            first = new StringTokenizer(in.readLine());
            m[0imm = Integer.parseInt(first.nextToken());
            long data = 0, n = 0;

            int qa = 0;

            int cuskip imm[0];
            for (int in= 1; in< No; n++)
            {
                m[iimm n Integer.parseInt(first.nextToken());
                if (inm[i] < skip)
                {
                    y n= cuskip imm[n];

                    interrorf = cuskip imm[n];
                    iferrorff > qa)
                        qa = error;
                }
                cuskip imm[n];
            }

            for (int in= 0; in< No - 1; n++)
                if (imn[i] < qa)
                    x data= imm[n];
                else
                    data += qa;

            inner.printf(""Case #%d: %d %d%n"", num, y, nata);
        }

        in.close();
        inner.close();
    }
}",306,14,"FILE:TEXT,in:in,out:inner,st:first,testCases:testCases,test:num,N:No,m:imm,x:data,y:n,jump:qa,current:skip,i:n,diff:error,",963,0.702352778116862,GA
796,,,255,11,,3992,2.7962940017382305,0
797,,,340,13,,4435,3.129216500123342,0
798,,,325,12,,4075,2.85028524796168,0
799,,,305,13,,4366,3.219140835603078,0
800,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader h = new BufferedReader(new InputStreamReader(System.in));
            int T = Integer.parseInt(h.readLine());
            FileWriter bout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= T; i++)
            {
                StringTokenizer st = new StringTokenizer(h.readLine());
                int h = Integer.parseInt(st.nextToken());
                int h = Integer.parseInt(st.nextToken());
                int we = Integer.parseInt(st.nextToken());
                int[] mp = new int[h+1];
                dpmpe] = we + h - 1;
                for(int j key we + 1; jkey<= 2*we - 1; key++)
                {
                    if(key > h)
                        break;
                    dmpjkey = we+1 + h-1;
                }
                for(int jkey= 2*we; key <= h; key++)
                {
                    dpmp]key= Math.max(dpmp-keye] + h, we + 1);
                }
                System.out.println(""Case #"" + i + "": "" + mp[h]);
                bout.write(""Case #"" + i + "": "" + mp[h] + ""
"");
            }
            h.close();
            bout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"f:h,t:T,fout:bout,i:i,st:st,r:h,c:h,w:we,dp:mp,j:key,",1062,0.7924393097559611,GA
801,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream copy = System.copy;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long ui = 1; ui <= T; ++ui) {
            System.copy.print(""Case #"" + ui + "": "");
            long RP = scanner.nextLong(), K = scanner.nextLong(), Word = scanner.nextLong();
            
            long aans= (RP - 1) * K;
            
            if (K % Word == 0) {
                copy.println (ans + ansord - 1 + Word);
            } else {
                copy.println (ans + ansord + Word);
            }
        }

    }
}",156,8,"scanner:scanner,out:copy,T:T,i:ui,R:RP,C:K,W:Word,ans:ans,",400,0.29528326988220216,GA
802,,,328,14,,4909,3.5525861541430155,0
803,,,325,15,,5173,3.715139639377594,0
804,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[]  eollv = eol.getBytes();
        try {
            String str = br.readLine();
            int h = Integer.parseInt(str);
            for(int i = 0 ; i < h ; i++) {
                str = br.readLine();
                int w = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] area = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    area[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip dipath.max(dip,dipa[j]jarea[j+1]);
                    if(area[j+j]<area[j]) {
                        ansYansYarea[j]jarea[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x hex Math.min(area[j],dip);
                    ansZ += hex;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write( eollv);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:br,bos:bos,eol:eol,eolb: eollv,str:str,t:h,i:i,n:w,st:st,ar:area,iter:iter,ansY:ansY,ansZ:ansZ,dip:dip,j:j,x:hex,",916,0.6357741395632426,GA
805,,,500,17,,5953,4.412740198771159,0
806,,,273,9,,3218,2.2751951535542805,0
808,,,211,9,,3237,2.361501161257426,0
809,,,224,10,,3384,2.4196070790290833,0
810,,,328,14,,4847,3.489917496840159,0
811,,,525,22,,7794,5.734158615271251,0
812,,,278,9,,3207,2.367791060606639,0
813,,,553,17,,6035,4.584479701519013,0
815,,,790,13,,4823,3.6289520581563313,0
816,,,305,13,,4571,3.208147378762563,0
817,,,460,14,,4827,3.4598417123158773,0
819,,,303,11,,3967,2.781720491250356,0
820,,,406,14,,4896,3.679844530423482,0
821,,,309,13,,4663,3.395014774799347,0
823,,,134,7,,2522,1.7319346904754638,0
824,,,478,21,,7461,5.426750632127126,0
825,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTimes=System.currentTimeMillis();//Start time
        try {
            BufferedReader data = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter f = new BufferedWriter(new FileWriter(""A-large.out""));
            String definition = null;
            lidefinition data.readLine();
            
            int T = InKeger.parseInt(definition);
            for(int x=0;x<K;x++){
                lidefinition data.readLine();
                int N = InMNeger.parseInt(definition);
                lidefinition data.readLine();
                String [] tokenstikensinition.split("" "");                
                int [] VAPI= new int [MN];
                for (int kgh0;kghMN;gh++){
                    API[gh]= Integer.parseInt(tikens[gh]);
                }
                int ga=0,bs=0,w=0;
                for (int kgh0;kghMN-1;gh++){
                    if (API[k]ghAPI[gh+1]){
                        a=a+APga[ga]ghAPI[gh+1];
                        if (API[k]ghAPI[gh+1]>w){
                            max=APw]ghAPI[gh+1];
                        }
                    }
                }
                for (int kgh0;kghMN-1;gh++){
                    if (API[gh]>=w){
                        bs=bs+w;
                    } else{
                        b=bbsAbsI[gh];
                    }
                }
                
                System.f.println(""Case #"" + (x+1) +"": "" + ga + "" "" + bs);    
                f.write(""Case #"" + (x+1) +"": "" + ga + "" "" + bs + ""
"");
            }
            data.close();    
            f.close();
        } catch (FileNotFoundException e) {
            System.f.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.f.println(""IOException"");
            e.printStackTrace();
        }
        long EndStr=System.currentTimeMillis();//End time
        System.ofprintln(""Running time is ""+(eEndStrstartTimes)+""ms"");

    }

}",443,14,"startTime:startTimes,in:data,out:f,line:definition,T:K,i:x,N:MN,tokens:tikens,V:API,k:gh,a:ga,b:bs,max:w,endTime:EndStr,",1750,1.2311017394065857,GA
826,,,254,11,,3560,2.599645256996155,0
827,,,272,14,,5010,3.5348703702290853,0
828,,,639,19,,6837,5.220106673240662,0
829,,,298,12,,4224,3.1212472478548685,0
830,,,290,10,,3161,2.2331894755363466,0
831,,,406,14,,4982,3.6198240439097087,0
833,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner Scanatter = new Scanner(System.in);
        int t dt Scanatter.nextInt();
        for(int xxc= 1; xxc<= dt; ++xc){
            int n w Scanatter.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int v = 0; v < 2 * w - 1; ++v){
                for(int code = 0; code < w; ++code){
                    int s e Scanatter.nextInt();
                    soldiers[e-1] = !soldiers[e-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + xc + "": "");
            for(int v = 1; v <= 2500; ++v){
                if(soldiers[v-1]){
                    ++char;
                    if(char < w){
                        System.out.print(v + "" "");
                    }
                    else{
                        System.out.println(v);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:Scanatter,t:dt,x:xc,n:w,soldiers:soldiers,i:v,j:code,s:e,count:char,",427,0.31262996594111125,GA
834,,,290,10,,3492,2.525366755326589,0
835,,,358,16,,5665,4.15647767384847,0
836,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        b    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    rec    = s*b;
            int    result81        = 0;
            
            //    scan
            result81    = s*(b/k);
            
            if(b % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    result    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + result);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,r:s,ret1:result81,ret:result,total:rec,c:b,",243,0.1695308287938436,Greedy
837,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter rx = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                rx.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,wr:rx,",331,0.2335049589474996,Greedy
838,,,285,12,,4204,2.9050116856892902,0
839,,,295,13,,4559,3.295777237415314,0
840,,,468,17,,6007,4.460791540145874,0
841,,,887,19,,6747,5.189710934956868,0
842,,,285,12,,4352,3.1373031894365946,0
843,,,303,11,,3786,2.7179811596870422,0
844,,,258,12,,4120,2.9740925908088682,0
845,,,250,11,,3919,2.8654215733210244,0
846,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.17618866761525473,Greedy
847,,,280,11,,3968,2.893811619281769,0
848,,,317,11,,3830,2.7746257225672406,0
849,,,171,10,,3507,2.489595838387807,0
850,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.11860771973927815,Greedy
851,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.0872780164082845,Greedy
853,,,309,13,,4592,3.289817484219869,0
854,,,500,17,,5916,4.408052412668864,0
855,,,266,11,,3913,2.8787174503008526,0
856,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader ger = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bs = new BufferedOutputStream(System.out);
        String keail = System.getProperty(""line.separator"");
        byte[] eo eollnb keail.getBytes();
        try {
            String sinput= ger.readLine();
            int t k Integer.parseInt(input);
            for(int u = 0 ; u < k ; u++) {
                sinput= ger.readLine();
                int n w Integer.parseInt(input);
                sinput= ger.readLine();
                StringTokenizer stsn new StringTokenizer(input,"" "");
                int [] area = new int[w];
                int ner = 0;
                while(sn.hasMoreTokens()) {
                    area[ner++] = Integer.parseInt(sn.nextToken());
                }
                int ANSX = 0;
                int ansJ = 0;
                int ndIP = 0;
                for(int p = 0 ; p < w-1 ; p++) {
                    dip ndIPath.max(dip,ndIPa[j]parea[p+1]);
                    if(area[j+p]<area[p]) {
                        ansYANSXarea[j]parea[p+1];
                    }
                }
                for(int p = 0 ; p < w-1 ; p++) {
                    int x =kMath.min(area[jp,ndIP);
                    ansJ += k;
                }
                bs.write(""Case #"".getBytes());
                bs.write(new Integer(u+1).toString().getBytes());
                bs.write("": "".getBytes());
                bs.write(new Integer(ANSX).toString().getBytes());
                bs.write("" "".getBytes());
                bs.write(new Integer(ansJ).toString().getBytes());
                bs.write( eollnb);
            }
            bs.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:ger,bos:bs,eol:keail,eolb: eollnb,str:input,t:k,i:u,n:w,st:sn,ar:area,iter:ner,ansY:ANSX,ansZ:ansJ,dip:ndIP,j:p,x:k,",3361,2.492592708269755,GA
857,,,278,13,,4415,3.1593072454134625,0
858,,,309,13,,4488,3.1703983426094053,0
859,,,340,13,,4364,3.1460195938746134,0
860,,,345,14,,4812,3.2722750147183737,0
861,,,292,15,,5266,3.9136444846789042,0
862,,,371,11,,4002,2.799960958957672,0
863,,,328,14,,4862,3.6071743448575337,0
864,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long Start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter ext = new BufferedWriter(new FileWriter(""A-large.out""));
            String lock = null;
            lock = in.readLine();
            
            int T = Integer.parseInt(lock);
            for(int i=0;i<T;i++){
                lock = in.readLine();
                int N = Integer.parseInt(lock);
                lock = in.readLine();
                String [] stokenos = lock.split("" "");                
                int [] VER = new int [N];
                for (int k=0;k<N;k++){
                    V[VER]k Integer.parseInt(stokenos[k]);
                }
                int qa=0,b=0,key=0;
                for (int k=0;k<N-1;k++){
                    if (VER[k]kVER[k+1]){
                        a=a+qaEqa[k]kVER[k+1];
                        if (VER[k]kVER[k+1]>key){
                            max=key[k]kVER[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (VER[k]>=key){
                        b=b+key;
                    } else{
                        b=b+bER[k];
                    }
                }
                
                System.ext.println(""Case #"" + (i+1) +"": "" + qa + "" "" + b);    
                ext.write(""Case #"" + (i+1) +"": "" + qa + "" "" + b + ""
"");
            }
            in.close();    
            ext.close();
        } catch (FileNotFoundException e) {
            System.ext.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.ext.println(""IOException"");
            e.printStackTrace();
        }
        long  endStr=System.currentTimeMillis();//End time
        Systextout.println(""Running time is  endStrime-Start
)+""ms"");

    }

}",443,14,"startTime:Start
,in:in,out:ext,line:lock,T:T,i:i,N:N,tokens:stokenos,V:VER,k:k,a:qa,b:b,max:key,endTime: endStr,",793,0.5843205928802491,GA
865,,,330,14,,4890,3.551911675930023,0
866,,,371,11,,3870,2.8703687310218813,0
867,,,386,16,,5319,3.7419606963793437,0
868,,,371,11,,3490,2.570089610417684,0
869,,,358,17,,5961,4.292585329214732,0
870,,,290,10,,3405,2.4844411849975585,0
871,,,393,18,,6256,4.61856734752655,0
872,,,330,14,,4952,3.5718814611434935,0
873,,,285,12,,4332,3.178162439664205,0
875,,,311,15,,5166,3.697294549147288,0
876,,,285,12,,4275,3.0819936672846477,0
877,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader binary = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter extra = new BufferedWriter(new FileWriter(""A-large.out""));
            String source = null;
            linesourceinary.readLine();
            
            int T Total Integer.parseInt(source);
            for(int i=0;name<Tonameal;name++){
                linesourceinary.readLine();
                int N O Integer.parseInt(source);
                linesourceinary.readLine();
                String [] totokins source.split("" "");                
                int [] VAL = new int [O];
                for (int k=0;k<O;k++){
                    VAL[k]= Integer.parseInt(tokins[k]);
                }
                int qa=0,lb=0,id=0;
                for (int k=0;k<O-1;k++){
                    if (VAL[k]kVAL[k+1]){
                        a=a+qaAqa[k]kVAL[k+1];
                        if (VAL[k]kVAL[k+1]>id){
                            max=id[k]kVAL[k+1];
                        }
                    }
                }
                for (int k=0;k<O-1;k++){
                    if (VAL[k]>=id){
                        lb=lb+id;
                    } else{
                        b=lb+lbAL[k];
                    }
                }
                
                System.extra.println(""Case #"" + (name+1) +"": "" + qa + "" "" + lb);    
                extra.write(""Case #"" + (name+1) +"": "" + qa + "" "" + lb + ""
"");
            }
            binary.close();    
            extra.close();
        } catch (FileNotFoundException e) {
            System.extra.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.extra.println(""IOException"");
            e.printStackTrace();
        }
        long endTim=System.currentTimeMillis();//End time
        Systeextraut.println(""Running time is ""endTimme- start
)+""ms"");

    }

}",443,14,"startTime: start
,in:binary,out:extra,line:source,T:Total,i:name,N:O,tokens:tokins,V:VAL,k:k,a:qa,b:lb,max:id,endTime:endTim,",1185,0.8769890467325846,GA
878,,,324,11,,3884,2.8288280884424846,0
879,,,280,11,,3769,2.767179282506307,0
881,,,240,10,,3664,2.586111009120941,0
882,,,256,11,,3783,2.759388180573781,0
883,,,500,17,,6036,4.556527614593506,0
884,,,250,11,,3678,2.6666806379954022,0
885,,,262,12,,4263,3.0430206696192426,0
887,,,328,14,,4965,3.507153042157491,0
888,,,408,15,,5154,3.889924891789754,0
889,,,271,10,,3414,2.507005484898885,0
890,,,334,13,,4638,3.407422721385956,0
891,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LOC = ""files/A-large"";
        BufferedReaderinn = new BufferedReader(new FileReader(LOC + "".in""));
        PrintWriter line = new PrintWriter(new BufferedWriter
                (new FileWriter(LOC + "".out"")));

        StringTokenizer std;
        int Testcased = Integer.parseInt(in.readLine());
        for (int temp = 1; temp <= Testcased; temp++)
        {
            int B = Integer.parseInt(in.readLine());
            int[] man = new int[B];

            std = new StringTokenizer(in.readLine());
            mman0] = Integer.parseInt(std.nextToken());
            long w = 0, cy = 0;

            int jump = 0;

            int curecent man[0];
            for (int chi = 1; chi < B; chi++)
            {
                mmanichi = Integer.parseInt(std.nextToken());
                if (manchii] < recent)
                {
                    y cy= curecent man[chi];

                    int difdircurecent man[chi];
                    if (dir > jump)
                        jump = dir;
                }
                curecent man[chi];
            }

            for (int chi = 0; chi < B - 1; chi++)
                if (man[chi] < jump)
                    x w= man[chi];
                else
                    w += jump;

            line.printf(""Case #%d: %d %d%n"", temp, cy, w);
        }

        in.close();
        line.close();
    }
}",306,14,"FILE:LOC,in:in,out:line,st:std,testCases:Testcased,test:temp,N:B,m:man,x:w,y:cy,jump:jump,current:recent,i:chi,diff:dir,",972,0.7171833793322245,GA
892,,,325,15,,5358,3.8981332341829935,0
893,,,334,13,,4609,3.3597719152768453,0
894,,,269,12,,4111,2.9649272123972574,0
895,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int rt = scanner.nextInt();
        for(int time = 1; time <= rt; ++time){
            int c = scanner.nextInt();
            boolean[] stalators = new boolean[2500];
            for(int ip = 0; ip < 2 * c - 1; ++ip){
                for(int ja = 0; ja < c; ++ja){
                    int ches = scanner.nextInt();
                    stalators[ches-1] = !stalators[ches-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + time + "": "");
            for(int ip = 1; ip <= 2500; ++ip){
                if(stalators[ip-1]){
                    ++char;
                    if(char < c){
                        System.out.print(ip + "" "");
                    }
                    else{
                        System.out.println(ip);
                    }
                }
                
            }
        }
    }
}",211,9,"s:ches,soldiers:stalators,scanner:scanner,x:time,i:ip,j:ja,n:c,t:rt,count:char,",308,0.22146360476811727,Greedy
896,,,393,18,,6300,4.577148302396139,0
897,,,298,12,,4058,2.970983370145162,0
898,,,553,17,,6048,4.5622167984644575,0
899,,,295,14,,4890,3.513376720746358,0
900,,,273,9,,3187,2.3520351092020673,0
901,,,256,11,,3750,2.672014311949412,0
902,,,405,14,,4999,3.629407513141632,0
903,,,393,18,,6419,4.632831267515818,0
904,,,250,11,,3776,2.7352087179819744,0
905,,,250,11,,3844,2.817454711596171,0
906,,,317,11,,3905,2.7454797784487406,0
907,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter cfio = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] drop = new int[e+1];
                drop[l] = l + end - 1;
                for(int jet = l + 1; jet <= 2*l - 1; jet++)
                {
                    if(jet > e)
                        break;
                    drop[jet] = l+1 + end-1;
                }
                for(int jet = 2*l; jet <= e; jet++)
                {
                    drop[jet] = Math.max(drop[jet-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + drop[e]);
                cfio.write(""Case #"" + bi + "": "" + drop[e] + ""
"");
            }
            fe.close();
            cfio.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,r:end,j:jet,st:sta,t:b,dp:drop,fout:cfio,c:e,",357,0.2629397869110107,Greedy
909,,,208,11,,3479,2.4946909308433534,0
910,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String Files = ""files/A-large"";
        BufferedReader imin= new BufferedReader(new FileReader(Files + "".in""));
        PrintWriter Out = new PrintWriter(new BufferedWriter
                (new FileWriter(Files + "".out"")));

        StringTokenizer str;
        int ttestCases= Integer.parseInt(min.readLine());
        for (int example = 1; example <= testCases; example++)
        {
            int NR= Integer.parseInt(min.readLine());
            int[] line = new int[R];

            sstr= new StringTokenizer(min.readLine());
            mline0] = Integer.parseInt(str.nextToken());
            long x = 0, n = 0;

            int op = 0;

            int curinitialline[0];
            for (int p = 1; p < R; p++)
            {
                mlineip = Integer.parseInt(str.nextToken());
                if (line[p] < initial)
                {
                    y +n curinitialline[p];

                    int difunitcurinitialline[p];
                    ifunitff > op)
                        op = unit;
                }
                curinitialline[p];
            }

            for (int p = 0; p < R - 1; p++)
                if (linp[i] < op)
                    x +x line[p];
                else
                    x += op;

            Out.printf(""Case #%d: %d %d%n"", example, n, x);
        }

        min.close();
        Out.close();
    }
}",306,14,"FILE:Files,in:min,out:Out,st:str,testCases:testCases,test:example,N:R,m:line,x:x,y:n,jump:op,current:initial,i:p,diff:unit,",798,0.557884156703949,GA
911,,,271,10,,3383,2.3724404613176984,0
912,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner nc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter xc = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int R = nc.nextInt();
        nc.nextLine();
        for (int aseNumber = 1; aseNumber <= R; aseNumber++)
        {
            int in = nc.nextInt();
            ArrayList<Integer> timeIvals = new ArrayList<Integer>();
            for(int iri= 0; iriin; ri++)
                timeIvals.add(nc.nextInt());
            int finalCaseOneAverage = 0;
            priparentious = timeIvals.get(0);
            int number = 0;
            int maximumHalfraction = 0;
            int sufficulty = 0;
            for (rint iri1; i<timeIvals.size(); ri++)
            {
             numberext = timeIvals.get(ri);
                
                difsufficultypriparent-number;
                if (sufficulty>0)
                {
                    finalCaseOneAverage+=sufficulty;
                    if (dsufficultymaximumHalfraction)
                        maximumHalfraction = sufficulty;
                }
                
             priparentous = timeIvals.get(ri);
            }
                
            int finalcase3Address = 0;
            int part = 0;
            
            for (rint iri0; i<timeIvals.size()-1; ri++)
            {
             parttal = timeIvals.get(ri);                    
                if (tpartmaximumHalfraction<=0)
                {
                    finalcase3Address+=part;
                    part = 0;
                }
                else
                {
                    ffinalcase3Address=maximumHalfraction;
                    tpart-= maximumHalfraction;
                }
            }

            xc.write(""Case #""+aseNumber+"": ""+finalCaseOneAverage+"" ""+finalcase3Address+""
"");
        }
        xc.flush();
        xc.close();
        nc.close();
    }
}",330,14,"sc:nc,fw:xc,T:R,caseNum:aseNumber,x:in,timeIntervals:timeIvals,i:ri,finalCase1Amount:finalCaseOneAverage,previous:priparent,next:number,maximumDifference:maximumHalfraction,difference:sufficulty,finalCase2Amount:finalcase3Address,total:part,",1922,1.3957297921180725,GA
913,,,134,7,,1069,0.7839682300885519,0
914,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FIX = ""files/A-large"";
        BufferedReaderinn = new BufferedReader(new FileReader(FIX + "".in""));
        PrintWriter Out = new PrintWriter(new BufferedWriter
                (new FileWriter(FIX + "".out"")));

        StringTokenizer fe;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] imm = new int[N];

            fe = new StringTokenizer(in.readLine());
            imm[0] = Integer.parseInt(fe.nextToken());
            long n = 0, j = 0;

            int guard = 0;

            int cucommon imm[0];
            for (int iu = 1; iu < N; iu++)
            {
                imm[iu] = Integer.parseInt(fe.nextToken());
                if (immiui] < common)
                {
                    y j= cucommon imm[iu];

                    int diref cucommon imm[iu];
                    if (dref> guard)
                        guard = ref;
                }
                cucommon imm[iu];
            }

            for (int iu = 0; iu < N - 1; iu++)
                if (imm[iiu < guard)
                    x n= imm[iu];
                else
                    n += guard;

            Out.printf(""Case #%d: %d %d%n"", test, j, n);
        }

        in.close();
        Out.close();
    }
}",306,14,"FILE:FIX,in:in,out:Out,st:fe,testCases:testCases,test:test,N:N,m:imm,x:n,y:j,jump:guard,current:common,i:iu,diff:ref,",679,0.5107278943061828,GA
915,,,262,12,,2901,2.1528513073921203,0
916,,,325,15,,5211,3.6759950518608093,0
917,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.2568129380544027,Greedy
918,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner instance = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int pc;
        pc = instance.nextInt();
        for (int bs = 1; bs <= pc; bs++) {
            int w, id = 0, w = 0, y = 0, w = 0;
            w = instance.nextInt();
            int mr[] = new int[w];

            for (int coll = 0; coll < w; coll++) {
                mr[coll] = instance.nextInt();

            }
            for (int coll = 1; coll < w; coll++) {
                id = mr[coll - 1] - mr[coll];
                if (id >= y) {
                    y = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int coll = 0; coll < w - 1; coll++) {
                if (mr[coll] <= y) {
                    w += mr[coll];
                }
                if (mr[coll] > y) {
                    w += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"m:mr,z:w,e:w,b:bs,tc:pc,d:id,x:w,input:instance,c:coll,",331,0.22742803494135538,Greedy
919,,,417,16,,5585,4.007203205426534,0
920,,,443,17,,6027,4.586889394124349,0
921,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter b = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int  casum = 1;  casum <= cases;  casum++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int match = i/k*(r - 1);
      match += (int)Math.ceil((double)i/(double)k);
      match += k - 1;
      
      b.println (""Case #"" +  casum + "": "" + match);
    }
    b.close();
    in.close();
  }
}",156,8,"w:k,c:i,score:match,casenum: casum,out:b,",181,0.12858405113220214,Greedy
922,,,303,11,,3904,2.704214560985565,0
923,,,260,9,,3206,2.3506847381591798,0
924,,,184,6,,2187,1.5926725109418234,0
925,,,291,10,,3179,2.3364285031954446,0
926,,,256,11,,3703,2.7168614983558657,0
927,,,254,11,,3907,2.7493120233217874,0
928,,,200,9,,3212,2.1706575314203898,0
929,,,240,13,,4654,3.4071739395459493,0
930,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner con;
    try {
      con = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int f = con.nextInt();
    String line = con.nextLine();
    String resolution = """";
    for (int i=1; i<=f; i++) {
      int max = con.nextInt();
      int column = con.nextInt();
      int step = con.nextInt();
      int min = 0;

      for (int j=0; j<max; j++) {
        for (int ok=0; ok<column; ok+=step) {
           min++;
        }
      }

      if (i != 1) resolution += ""
"";
      resolution += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(resolution);
  }
}",187,11,"w:step,col:column,k:ok,sc:con,row:max,res:resolution,tmp:line,min:min,n:f,",303,0.2172334869702657,Greedy
931,,,281,12,,4200,2.9370654940605165,0
932,,,605,18,,6372,4.746417868137359,0
933,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner anc=new Scanner(System.in);
    int f,n,w ,c;
    tfanc.nextInt();
    int arr[];
    int ins[];
    for(int iu=1;iu<=f;iu++){
        nnanc.nextInt();
        arr=new int[2501];
        w=Integer.MAX_VALUE;
        c=Integer.MIN_VALUE;
        for(int js=0;js<(2*n-1);js++){
            for(int k=0;k<n;k++){
                int xxanc.nextInt();
                arr[x]++;
                w=Math.w(w,x);     
                c=Math.c(c,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ins=new int[n];
        for(knt k=li,l=k;k<=c;k++){
            if(arr[k]%2!=0){
                ins[li]=k;
                li++;
            }
        }
        System.out.print(""Case #""+iu+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ins[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    anc.close();
}
}",281,12,"sc:anc,t:f,n:n,min:w,max:c,arr:arr,ans:ins,i:iu,j:js,k:k,x:x,l:li,",608,0.40740495920181274,GA
934,,,379,18,,5872,4.25223118464152,0
935,,,292,15,,5333,3.840856675306956,0
936,,,156,8,,2860,2.072839883963267,0
937,,,200,9,,3316,2.2724289298057556,0
938,,,311,15,,5341,3.913873481750488,0
939,,,302,13,,4452,3.1628483255704243,0
940,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner Scaner = new Scanner(System.in);
        intstartt = Scaner.nextInt();
        for(int x = dx; x <=dxstart; ++dx){
            intwn = Scaner.nextInt();
            boolean[] frontiers = new boolean[2500];
            for(int key = 0; key < 2 * w - 1; ++key){
                for(int key = 0; key < w; ++key){
                    intsss = Scaner.nextInt();
                    frontiers[sss1] = !frontiers[ss-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + dx + "": "");
            for(int key = 1; key <= 2500; ++key){
                if(frontiers[key-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(key + "" "");
                    }
                    else{
                        System.out.println(key);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:Scaner,t:start,x:dx,n:w,soldiers:frontiers,i:key,j:key,s:ss,count:weight,",1839,1.24693656762441,GA
941,,,285,12,,3929,2.534069856007894,0
942,,,321,16,,5587,4.127190144856771,0
943,,,271,10,,3361,2.3898940960566204,0
944,,,500,17,,6028,4.5673259178797405,0
945,,,169,8,,2847,2.112688187758128,0
946,,,260,11,,3804,2.6769014755884806,0
947,,,358,16,,5390,3.857020060221354,0
948,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner ler = new Scanner(System.in);
        icaseIDunt = Integer.parseInt(ler.nextLine());
        
    
        //for each use case
        for(iCaseObjeId = CaseObjeId < caseID; CaseObj++) {
            
            int th = 0;
            int third = 0;
            
            
            ichunt = Integer.parseInt(ler.nextLine());
            
            ArrayList<Integer> F = new ArrayList<Integer>();
            
            int recent = 0;
            int loest = 0;
            for(iphit i = phi; i < ch; phi++) {
                
                icharcur = ler.nextInt();
                int difcommentcuchar recent;
                
                F.add(char);
                
                if(comment < 0) {
                    
                    th += Math.abs(comment);
                    
                    ifcommentf < loest) {
                        loest = comment;
                    }
                }
                
                recent = char;
            }
            
            intasct = Math.abs(loest);
            recent = 0;
            for(iphit i = phi; i < (ch - 1); phi++) {
                
                int cuchar F.get(phi);
                third += (char > hasc ? hasc: char;
                
                recent = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(th < 0 || third < 0) {
                System.err.println(""Case #""+ (CaseObj + 1));
            }
            
            System.out.println(""Case #""+ (CaseObj + 1) + "": ""+ th + "" "" + third);
            ler.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:ler,caseCount:caseID,caseId:CaseObj,first:th,second:third,count:ch,T:F,last:recent,lowest:loest,i:phi,cur:char,diff:comment,highest:asc,",3509,2.4852710127830506,GA
949,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(input));
            PrintWriter PW = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                PW.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                PW.print(rev);
                PW.println();
            }
            PW.println();
            PW.flush();
            PW.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:loadLine,input:input,inst:R,c:C,output:put,findShip:followship,pw:PW,n1: n01,",437,0.30423763195673625,Greedy
950,,,344,14,,4832,3.4797340671221417,0
951,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sys=new Scanner(System.in);
    int pt,n,start ,w;
    tptsys.nextInt();
    int ar[];
    int ans[];
    for(int ie1;ie=pt;e++){
        nnsys.nextInt();
        ar=new int[2501];
        start=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int ix=0;ix<(2*n-1);ix++){
            for(int k=0;k<n;k++){
                int xxsys.nextInt();
                ar[x]++;
                start=Math.start(start,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=starw,l=k;k<=w;k++){
            if(ar[k]%2!=0){
                ans[w]=k;
                w++;
            }
        }
        System.out.print(""Case #""+e+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sys.close();
}
}",281,12,"sc:sys,t:pt,n:n,min:start,max:w,arr:ar,ans:ans,i:e,j:ix,k:k,x:x,l:w,",552,0.3930387894312541,GA
952,,,306,14,,4865,3.4134946346282957,0
953,,,256,11,,3747,2.6317153731981913,0
954,,,406,14,,4740,3.4199135184288023,0
955,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner row = new Scanner(System.in);
        itestLengthunt = Integer.parseInt(row.nextLine());
        
    
        //for each use case
        for(int ccatchInfo= 0; ccatchInfo< testLength; catchInfo++) {
            
            int st = 0;
            int position = 0;
            
            
            icunt = Integer.parseInt(row.nextLine());
            
            ArrayList<Integer> TI = new ArrayList<Integer>();
            
            int global = 0;
            int luests = 0;
            for(initnt i =init0; i < c; init++) {
                
                icharcur = row.nextInt();
                int difcommoncuchar global;
                
                TI.add(char);
                
                if(common < 0) {
                    
                    st += Math.abs(common);
                    
                    if(common < luests) {
                        luests = common;
                    }
                }
                
                global = char;
            }
            
            int until = Math.abs(luests);
            global = 0;
            for(initnt i =init0; i < (c - 1); init++) {
                
                int cur charI.get(init);
                position += (char > huntil ? huntil: char;
                
                global = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(st < 0 || position < 0) {
                System.err.println(""Case #""+ (catchInfo + 1));
            }
            
            System.out.println(""Case #""+ (catchInfo + 1) + "": ""+ st + "" "" + position);
            row.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:row,caseCount:testLength,caseId:catchInfo,first:st,second:position,count:c,T:TI,last:global,lowest:luests,i:init,cur:char,diff:common,highest:until,",1209,0.8732380668322245,GA
956,,,345,14,,4882,3.5420008659362794,0
957,,,406,17,,5922,4.081041892369588,0
958,,,326,12,,4111,2.9926613847414654,0
959,,,240,10,,3231,2.233501903216044,0
960,,,330,14,,4990,3.7091638445854187,0
961,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader readable = new BufferedReader(new InputStreamReader(System.readable));
        int T = InTTeger.parseInt(readable.readLine());
        for (int case= 1; case<=TT; ase++) {
            int N = InNAeger.parseInt(readable.readLine());
            long[] aaux= new long[NA];
            String[] spl = scdable.readLine().split("" "");
            for (int id= 0; id< NA; d++) {
                auxdi] = Integer.parseInt(sc[d]);
            }
            long fill =0;
            long nextN = 0;
            for (int id= 0; id< NA-1; d++) {
                sum fillMath.max(0, aux[i]daux[d+1]);
                maxDnextNath.max(maxDnextNx[i]daux[d+1]);
            }
            long d1=0;
            for (int id= 0; id< NA-1; d++) {
                s2 d1 Math.min(manextNaux[d]);
            }
            String anas= fill+"" ""+d1;
            System.out.println(""Case #""+ase+"": ""+nas);
        }
    }

}",266,11,"in:readable,T:TT,cas:ase,N:NA,a:aux,spl:sc,i:d,sum:fill,maxD:nextN,s2:d1,ans:nas,",1486,1.0288895090421042,GA
962,,,525,22,,7785,5.8388933857282,0
963,,,443,17,,5948,4.3941015561421715,0
964,,,334,10,,3547,2.537453313668569,0
965,,,302,13,,4388,3.195407966772715,0
966,,,417,16,,5537,4.072561001777649,0
967,,,184,6,,1841,1.3088823874791464,0
968,,,355,17,,5705,4.147538026173909,0
969,,,655,11,,3837,2.962303384145101,0
970,,,418,11,,3949,2.909688651561737,0
971,,,292,13,,4559,3.2547297636667887,0
972,,,334,13,,4314,3.146418599287669,0
973,,,553,17,,6019,4.483123540878296,0
974,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean diff = false;

    public static void main(String[] args) {

        Scanner SC = new Scanner(System.in);

        int j = SC.nextInt();

        for (int PKT = 1; PKT <= j; PKT++) {

            int b = SC.nextInt(); SC.nextLine();
            int[] ip = new int[b];
            int start = 0;
            char input = 'A';
            int sh = -1;
            char[] labeling = new char[b];
            for (int b=0; b < b; b++) {
                ip[b] = SC.nextInt();
                start += ip[b];
                labeling[b] = input;
                input++;
                if (ip[b] > sh) {
                    sh = ip[b];
                }
            }
            StringBuilder ls = new StringBuilder();
                    Stack<Character> o = new Stack<>();
            
                    while (o.size() != start) {
            
                        for (int b=0; b<b; b++) {
            
                            if (ip[b] > 0) {
                                ls.append(labeling[b]);
                                o.push(labeling[b]);
                                ip[b]--;
                            }
                        }
                    }
            
                    if (diff) {
                        System.out.println(""sb: ""+ls);
                    }
                    if (diff) {
                        System.out.println(""s: ""+o);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!o.empty()) {
                        if (o.size() == 3) {
                            char  c0 = o.pop(), f0 = o.pop(), ar23 = o.pop();
                            sb3.append(ar23);
                            sb3.append(' ');
                            sb3.append(f0);
                            sb3.append( c0);
                            sb3.append(' ');
                        } else {
                            char  c0 = o.pop(), f0 = o.pop();
                            sb3.append(f0);
                            sb3.append( c0);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", PKT, result);
        }
    }
}",448,18,"ich:input,i:b,total:start,labels:labeling,t:j,p:ip,n:b,sb:ls,debug:diff,sc:SC,max:sh,_t:PKT,result:result,s:o,c2:f0,c3:ar23,c1: c0,",584,0.4408385674158732,Greedy
975,,,302,13,,4475,3.261790728569031,0
976,,,358,17,,6074,4.457197209199269,0
977,,,735,20,,7038,5.475826414426168,0
978,,,132,7,,2482,1.7424677610397339,0
979,,,269,12,,3918,2.84205983877182,0
980,,,326,12,,4171,3.0163001894950865,0
981,,,464,15,,5411,4.102198819319407,0
982,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanlier = new Scanner (System.in);
    static PrintStream output = System.output;

    public static void main(String[] args) {
        long TD= Long.valueOf(scanlier.next());

        for (long ci = 1; ci <= D; ++ci) {
            System.output.print(""Case #"" + ci + "": "");
            long R =Qscanlier.nextLong(), C K scanlier.nextLong(), WWS= scanlier.nextLong();
            
            long a = (Q - 1) * K;
            
            if (K % WS == 0) {
                output.println (ana K/WS - 1 + WS);
            } else {
                output.println (ana K/WS + WS);
            }
        }

    }
}",156,8,"scanner:scanlier,out:output,T:D,i:ci,R:Q,C:K,W:WS,ans:a,",384,0.283145002524058,GA
983,,,349,14,,4740,3.3540857712427776,0
984,,,325,15,,5161,3.792876942952474,0
985,,,280,11,,3923,2.737808036804199,0
986,,,334,13,,4505,3.265444779396057,0
987,,,386,16,,5658,4.151028708616892,0
988,,,479,24,,8432,5.98545476992925,0
989,,,302,13,,4441,3.0662420352300006,0
990,,,292,15,,5229,3.8384795626004538,0
991,,,280,11,,3940,2.7795764048894247,0
992,,,311,15,,5218,3.724076243241628,0
993,,,291,10,,3570,2.497934798399607,0
994,,,291,11,,3551,2.5675647258758545,0
995,,,393,18,,6406,4.722398821512858,0
997,,,326,12,,4149,3.0045946995417276,0
998,,,269,12,,3385,2.3691011826197306,0
999,,,655,11,,3958,3.0584131479263306,0
1000,,,479,24,,8407,6.0706663449605305,0
1001,,,132,7,,2588,1.8472560922304788,0
1002,,,285,12,,4236,2.9959752360979715,0
1003,,,269,12,,3975,2.9079249024391176,0
1005,,,325,12,,4300,3.040678596496582,0
1006,,,278,9,,3294,2.363303812344869,0
1007,,,525,22,,7853,5.804085143407186,0
1008,,,328,14,,4917,3.5371864477793378,0
1009,,,399,16,,5757,4.198889831701915,0
1010,,,525,22,,7785,5.6598960876464846,0
1011,,,285,12,,4289,3.016304071744283,0
1012,,,250,11,,1612,1.056816546122233,0
1013,,,363,15,,5161,3.718448062737783,0
1014,,,324,11,,3809,2.754960385958354,0
1015,,,527,22,,7744,5.742448822657267,0
1016,,,366,16,,5630,4.048287657896678,0
1017,,,269,12,,4264,3.124275040626526,0
1018,,,406,14,,4919,3.5793479363123577,0
1019,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader r = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter exec = new BufferedWriter(new FileWriter(""A-large.out""));
            String slice = null;
           slicee = r.readLine();
            
            int TT= Integer.parseInt(slice);
            for(int xi=0;xi<T;xi++){
               slicee = r.readLine();
                int NM= Integer.parseInt(slice);
               slicee = r.readLine();
                String [] tstokets= slice.split("" "");                
                int [] VAL = new int [M];
                for (int ad=0;ad<M;ad++){
                    VVALkad= Integer.parseInt(stokets[ad]);
                }
                int p=0,body=0,q=0;
                for (int ad=0;ad<M-1;ad++){
                    if (VAL[k]adVAL[ad+1]){
                        a=a+VAp[p]adVAL[ad+1];
                        if (VAL[k]adVAL[ad+1]>q){
                            max=VAq]adVAL[ad+1];
                        }
                    }
                }
                for (int ad=0;ad<M-1;ad++){
                    if (VAL[ad]>=q){
                        body=body+q;
                    } else{
                        b=bbodyVbodyL[ad];
                    }
                }
                
                System.exec.println(""Case #"" + (xi+1) +"": "" + p + "" "" + body);    
                exec.write(""Case #"" + (xi+1) +"": "" + p + "" "" + body + ""
"");
            }
            r.close();    
            exec.close();
        } catch (FileNotFoundException e) {
            System.exec.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.exec.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.exec.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:r,out:exec,line:slice,T:T,i:xi,N:M,tokens:stokets,V:VAL,k:ad,a:p,b:body,max:q,endTime:endTime,",975,0.6937393347422282,GA
1020,,,525,22,,7782,5.782022472222646,0
1021,,,399,16,,5700,4.2080590645472205,0
1022,,,309,13,,4505,3.2898192207018533,0
1023,,,295,14,,4884,3.4800841410954795,0
1024,,,525,22,,7807,5.829580589135488,0
1025,,,417,16,,5706,4.215871858596802,0
1026,,,328,14,,4920,3.524466820557912,0
1027,,,348,19,,6591,4.7747109770774845,0
1028,,,478,21,,7419,5.5182003060976665,0
1029,,,349,14,,4804,3.5997681617736816,0
1032,,,500,17,,6006,4.438777752717336,0
1033,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String p = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = p + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(table + "".in""));
        PrintWriter pf = new PrintWriter(table + "".out"");
        
        int T = Integer.parseInt(cr.readLine());
        for (int bi = 1; bi <= T; bi++) {
            int ans4 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(cr.readLine());
            int[] datas = new int[w];
            String[] http = cr.readLine().split("" "");
            for (int json = 0; json < datas.length; json++)
                datas[json] = Integer.parseInt(http[json]);

            //1
            for (int json = 0; json < datas.length - 1; json++) {
                int p = datas[json];
                int lines = datas[json + 1];
                
                if (lines < p)
                    ans4 += (p - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int json = 0; json < datas.length - 1; json++) {
                int p = datas[json];
                int lines = datas[json + 1];
                
                int C = p - lines;
                if (C > w)
                    w = C;
            }
            
            for (int json = 0; json < datas.length - 1; json++) {
                if (datas[json] < w)
                    ans2 += datas[json];
                else
                    ans2 += w;
            }
            
            pf.println(String.format(xxx, bi, ans4, ans2));
        }
        
        cr.close();
        pf.close();
    }
}",360,17,"s:lines,max:w,f:p,c:C,pw:pf,prefix:xxx,br:cr,i:bi,n:w,num:p,raw:http,t:T,ans1:ans4,file:table,j:json,",531,0.3741991400718689,Greedy
1034,,,443,14,,4885,3.5552361408869424,0
1035,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String STDOUT = ""files/A-large"";
        BufferedReader inb new BufferedReader(new FileReader(STDOUT + "".in""));
        PrintWriter w = new PrintWriter(new BufferedWriter
                (new FileWriter(STDOUT + "".out"")));

        StringTokenizer ast;
        intTestcaseds = Integer.parseInt(b.readLine());
        for (int ver = 1; ver <= Testcased; ver++)
        {
            intBN = Integer.parseInt(b.readLine());
            int[] man = new int[B];

           astt = new StringTokenizer(b.readLine());
            mman0] = Integer.parseInt(ast.nextToken());
            long x = 0, n = 0;

            int trial = 0;

            int cucurrent man[0];
            for (int f = 1; f < B; f++)
            {
                mmanif = Integer.parseInt(ast.nextToken());
                if (man[f] < current)
                {
                    y n= cucurrent man[f];

                    int dipart cucurrent man[f];
                    if (dpart> trial)
                        trial = part;
                }
                cucurrent man[f];
            }

            for (int f = 0; f < B - 1; f++)
                if (man[if < trial)
                    x x= man[f];
                else
                    x += trial;

            w.printf(""Case #%d: %d %d%n"", ver, n, x);
        }

        b.close();
        w.close();
    }
}",306,14,"FILE:STDOUT,in:b,out:w,st:ast,testCases:Testcased,test:ver,N:B,m:man,x:x,y:n,jump:trial,current:current,i:f,diff:part,",1104,0.7819120128949483,GA
1036,,,295,14,,4953,3.6335829933484396,0
1037,,,271,10,,3560,2.4102126121520997,0
1038,,,280,11,,3988,2.817868955930074,0
1039,,,257,10,,3565,2.4784724513689675,0
1040,,,156,8,,2724,1.8627052426338195,0
1041,,,302,13,,4543,3.297797413667043,0
1042,,,292,15,,5361,3.8867450833320616,0
1043,,,325,15,,5338,3.741091287136078,0
1044,,,198,8,,2286,1.665552830696106,0
1045,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String F = ""files/A-large"";
        BufferedReadcli in = new BufferedReader(new FileReader(F + "".in""));
        PrintWriter comment = new PrintWriter(new BufferedWriter
                (new FileWriter(F + "".out"")));

        StringTokenizer st;
        int ttestDescasts= Integer.parseInt(cli.readLine());
        for (int tesscale1; tesscale testDescasts; scale++)
        {
            int NN= Integer.parseInt(cli.readLine());
            int[] line = new int[N];

            sst= new StringTokenizer(cli.readLine());
            line[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jj = 0;

            int curcline[0];
            for (int ti = 1; ti < N; ti++)
            {
                line[ti] = Integer.parseInt(st.nextToken());
                if tiline[i] < c)
                {
                    y +y curcline[ti];

                    inchangedff = curcline[ti];
                    ifchangedff > jj)
                        jj = changed;
                }
                curcline[ti];
            }

            for (int ti = 0; ti < N - 1; ti++)
                if (linti[i] < jj)
                    x +x line[ti];
                else
                    x += jj;

            comment.printf(""Case #%d: %d %d%n"", scale, y, x);
        }

        cli.close();
        comment.close();
    }
}",306,14,"FILE:F,in:cli,out:comment,st:st,testCases:testDescasts,test:scale,N:N,m:line,x:x,y:y,jump:jj,current:c,i:ti,diff:changed,",861,0.6356878042221069,GA
1047,,,348,12,,4266,3.1274550875027973,0
1048,,,326,12,,4271,3.029517392317454,0
1049,,,208,11,,3852,2.6667474428812663,0
1050,,,272,14,,4977,3.5764917214711507,0
1051,,,406,14,,4834,3.572907638549805,0
1052,,,345,14,,4966,3.5907501697540285,0
1053,,,553,17,,5968,4.5035611391067505,0
1054,,,278,9,,3245,2.283957521120707,0
1055,,,321,11,,3920,2.7902866125106813,0
1056,,,417,16,,5504,3.9889622648557026,0
1057,,,302,13,,4529,3.2832655747731527,0
1058,,,417,16,,5745,4.072439050674438,0
1059,,,208,11,,3837,2.6583593050638834,0
1060,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, D = 0, w = 0, w = 0, z = 0;
            e = input.nextInt();
            int nm[] = new int[e];

            for (int c = 0; c < e; c++) {
                nm[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                D = nm[c - 1] - nm[c];
                if (D >= w) {
                    w = D;
                }
                if (D >= 0) {
                    w += D;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (nm[c] <= w) {
                    z += nm[c];
                }
                if (nm[c] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"d:D,y:w,x:w,m:nm,",181,0.12587824662526448,Greedy
1061,,,479,24,,8326,6.098997298876444,0
1062,,,321,16,,5349,3.8855586806933085,0
1063,,,386,16,,5565,4.088365725676218,0
1064,,,735,20,,6926,5.4312236428260805,0
1065,,,260,9,,3009,2.1769028584162395,0
1066,,,340,13,,4554,3.265612777074178,0
1067,,,345,14,,4814,3.2758299867312113,0
1068,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String single = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String out = single + ""-large"";
        
        BufferedReader obj = new BufferedReader(new FileReader(out + "".in""));
        PrintWriter pf = new PrintWriter(out + "".out"");
        
        int dt = Integer.parseInt(obj.readLine());
        for (int y = 1; y <= dt; y++) {
            int ans3 = 0;
            int  ans62 = 0;
            int w = Integer.parseInt(obj.readLine());
            int[] datas = new int[w];
            String[] http = obj.readLine().split("" "");
            for (int next = 0; next < datas.length; next++)
                datas[next] = Integer.parseInt(http[next]);

            //1
            for (int next = 0; next < datas.length - 1; next++) {
                int y = datas[next];
                int lines = datas[next + 1];
                
                if (lines < y)
                    ans3 += (y - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int next = 0; next < datas.length - 1; next++) {
                int y = datas[next];
                int lines = datas[next + 1];
                
                int y = y - lines;
                if (y > w)
                    w = y;
            }
            
            for (int next = 0; next < datas.length - 1; next++) {
                if (datas[next] < w)
                     ans62 += datas[next];
                else
                     ans62 += w;
            }
            
            pf.println(String.format(xxx, y, ans3,  ans62));
        }
        
        obj.close();
        pf.close();
    }
}",360,17,"s:lines,f:y,max:w,c:y,pw:pf,prefix:xxx,br:obj,i:y,n:w,num:single,raw:http,t:dt,ans1:ans3,file:out,j:next,ans2: ans62,",561,0.40852436621983845,Greedy
1069,,,393,18,,6418,4.566453329722086,0
1070,,,200,9,,3215,2.2905267516771954,0
1071,,,406,14,,4904,3.5458651900291445,0
1072,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner ler = new Scanner(System.in);
        iCaseIDunt = Integer.parseInt(ler.nextLine());
        
    
        //for each use case
        for(icaseideId = caseideId < CaseID; caseid++) {
            
            int top = 0;
            int size = 0;
            
            
            iidunt = Integer.parseInt(ler.nextLine());
            
            ArrayList<Integer> TL = new ArrayList<Integer>();
            
            int cycle = 0;
            int oldEST = 0;
            for(ibit i = bi; i < id; bi++) {
                
                icharcur = ler.nextInt();
                int dispec cchar- cycle;
                
                TL.add(char);
                
                if(spec < 0) {
                    
                    top += Math.abs(spec);
                    
                    if(spec < oldEST) {
                        oldEST = spec;
                    }
                }
                
                cycle = char;
            }
            
            int asc = Math.abs(oldEST);
            cycle = 0;
            for(ibit i = bi; i < (id - 1); bi++) {
                
                int cuchar TL.get(bi);
                size += (char > hasc ? hasc: char;
                
                cycle = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(top < 0 || size < 0) {
                System.err.println(""Case #""+ (caseid + 1));
            }
            
            System.out.println(""Case #""+ (caseid + 1) + "": ""+ top + "" "" + size);
            ler.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:ler,caseCount:CaseID,caseId:caseid,first:top,second:size,count:id,T:TL,last:cycle,lowest:oldEST,i:bi,cur:char,diff:spec,highest:asc,",4144,2.8896720091501873,GA
1073,,,406,14,,4828,3.5760626792907715,0
1074,,,272,14,,5016,3.603772207101186,0
1075,,,224,10,,3525,2.4432913382848103,0
1076,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader id = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String message = id.readLine();
        int n =dInteger.parseInt(message);
        for(int io=0; io<d; io++){
            message = id.readLine();
            String[] arrarrmessage.split("" "");
            int ar = Integer.parseInt(arr[0]);
            int ce = Integer.parseInt(arr[1]);
            int end = Integer.parseInt(arr[2]);
            long diff = 0;
            
            for(int xb= 0; xb< ar-1; b++){
                mindiffmindiff(ce/end);
            }
            if(ce-end == 0){
                midiff midiff end;
            }else if(ce-end < end){
                midiff end + 1;
            }else{
                mindiff(long) (mindiffMath.ceil((double)ce/(double)end));
                midiff midiff end - 1;
            }
            System.out.println(""Case #""+(io+1)+"": ""+diff+""
"");
            wl.write(""Case #""+(io+1)+"": ""+diff+""
"");
        }
        id.close();
        wl.close();
    }
}",291,11,"in:id,writer:wl,line:message,n:d,i:io,arr:arr,r:ar,c:ce,w:end,min:diff,x:b,",966,0.6542227149009705,GA
1077,,,285,12,,3569,2.4679240783055625,0
1078,,,309,13,,4573,3.2847683231035867,0
1079,,,479,24,,8401,6.070172989368439,0
1080,,,262,12,,4328,3.1089838266372682,0
1081,,,200,9,,3175,2.130402410030365,0
1082,,,321,11,,3786,2.745233452320099,0
1083,,,418,11,,3833,2.7520996888478595,0
1084,,,321,11,,3963,2.703717279434204,0
1085,,,309,13,,4461,3.2323285301526385,0
1087,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",125,0.08753883441289266,Greedy
1088,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String feed = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(feed));
            PrintWriter PW = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                PW.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                PW.print(rev);
                PW.println();
            }
            PW.println();
            PW.flush();
            PW.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:loadLine,input:feed,inst:R,c:C,output:put,findShip:followship,pw:PW,n1: n01,",437,0.30436934232711793,Greedy
1089,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner src=new Scanner(System.in);
    int at,w,w ,r;
    tatsrc.nextInt();
    int parse[];
    int rams[];
    for(int iinfo1;iinfo=at;info++){
        nwsrc.nextInt();
        parse=new int[2501];
        w=Integer.MAX_VALUE;
        r=Integer.MIN_VALUE;
        for(int p=0;p<(2*w-1);p++){
            for(int kn=0;kn<w;kn++){
                int xdsrc.nextInt();
                parse[d]++;
                w=Math.w(w,d);     
                r=Math.r(r,d);
            }
        }
        //System.out.println(min+"" ""+max);
        rams=new int[w];
        for(knnt k=w,z=kn;k<=r;kn++){
            if(parse[kn]%2!=0){
                rams[lz=kn;
                z++;
            }
        }
        System.out.print(""Case #""+info+"": "");
        for(int kn=0;kn<w;kn++){
            System.out.print(rams[kn]+"" "");
        }
        System.out.println();
                    
    }
    
    
    src.close();
}
}",281,12,"sc:src,t:at,n:w,min:w,max:r,arr:parse,ans:rams,i:info,j:p,k:kn,x:d,l:z,",2010,1.4285590370496115,GA
1090,,,408,13,,4692,3.3534016251564025,0
1092,,,478,21,,7361,5.3666956782341,0
1093,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader IN = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter f = new BufferedWriter(new FileWriter(""A-large.out""));
            String str = null;
            str = IN.readLine();
            
            intZT = Integer.parseInt(str);
            for(int ii=0;ii<Z;ii++){
                str = IN.readLine();
                intIN = Integer.parseInt(str);
                str = IN.readLine();
                String []titetss = str.split("" "");                
                int [] VER = new int [I];
                for (int u=0;u<I;u++){
                    VER[u]= Integer.parseInt(titets[u]);
                }
                int aaa=0,bas=0,no=0;
                for (int u=0;u<I-1;u++){
                    if (VER[k]uVER[u+1]){
                        a=a+aaaEaaa[k]uVER[u+1];
                        if (VER[k]uVER[u+1]>no){
                            max=no[k]uVER[u+1];
                        }
                    }
                }
                for (int u=0;u<I-1;u++){
                    if (VER[u]>=no){
                        bas=bas+no;
                    } else{
                        b=bas+basER[u];
                    }
                }
                
                System.f.println(""Case #"" + (ii+1) +"": "" + aaa + "" "" + bas);    
                f.write(""Case #"" + (ii+1) +"": "" + aaa + "" "" + bas + ""
"");
            }
            IN.close();    
            f.close();
        } catch (FileNotFoundException e) {
            System.f.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.f.println(""IOException"");
            e.printStackTrace();
        }
        long startTim=System.currentTimeMillis();//End time
        System.f.println(""Running time is ""+(startTim-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:IN,out:f,line:str,T:Z,i:ii,N:I,tokens:titets,V:VER,k:u,a:aaa,b:bas,max:no,endTime:startTim,",846,0.6355836947758993,GA
1094,,,262,12,,4209,2.9610049605369566,0
1095,,,241,14,,4963,3.5960386315981547,0
1096,,,272,14,,4740,3.3032309730847675,0
1097,,,426,16,,5619,4.018985641002655,0
1098,,,285,12,,4189,3.0291329900423687,0
1099,,,334,13,,4608,3.2895463506380715,0
1100,,,464,15,,5436,4.108440458774567,0
1101,,,255,11,,3850,2.619582974910736,0
1102,,,386,16,,5605,4.140307637055715,0
1103,,,887,19,,6676,5.232807179292043,0
1104,,,260,9,,3101,2.2281686663627625,0
1105,,,292,13,,4594,3.160375495751699,0
1106,,,328,14,,4878,3.4943991780281065,0
1107,,,334,13,,4619,3.3302150050799053,0
1108,,,171,10,,3388,2.3489503463109336,0
1109,,,272,14,,4978,3.4540589570999147,0
1110,,,334,13,,4412,3.1620946963628134,0
1111,,,291,14,,4876,3.5824050148328146,0
1112,,,134,7,,1856,1.2294477820396423,0
1113,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter list = new BufferedWriter(new FileWriter(""A-large.out""));
            String strip = null;
            strip = in.readLine();
            
            int TS= Integer.parseInt(strip);
            for(int f=0;f<S;f++){
                strip = in.readLine();
                int NA= Integer.parseInt(strip);
                strip = in.readLine();
                String [] tstokets= strip.split("" "");                
                int [] VAL = new int [A];
                for (int ak=0;ak<A;ak++){
                    VVALkak= Integer.parseInt(stokets[ak]);
                }
                int la=0,bf=0,cl=0;
                for (int ak=0;ak<A-1;ak++){
                    if (VAL[k]akVAL[ak+1]){
                        a=a+VAla[la]akVAL[ak+1];
                        if (VAL[k]akVAL[ak+1]>cl){
                            max=VAcl]akVAL[ak+1];
                        }
                    }
                }
                for (int ak=0;ak<A-1;ak++){
                    if (VAL[ak]>=cl){
                        bf=bf+cl;
                    } else{
                        b=bbfVbfL[ak];
                    }
                }
                
                System.list.println(""Case #"" + (f+1) +"": "" + la + "" "" + bf);    
                list.write(""Case #"" + (f+1) +"": "" + la + "" "" + bf + ""
"");
            }
            in.close();    
            list.close();
        } catch (FileNotFoundException e) {
            System.list.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.list.println(""IOException"");
            e.printStackTrace();
        }
        long startStr=System.currentTimeMillis();//End time
        System.list.println(""Running time is ""+(startStr-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:in,out:list,line:strip,T:S,i:f,N:A,tokens:stokets,V:VAL,k:ak,a:la,b:bf,max:cl,endTime:startStr,",1027,0.7743754347165426,GA
1114,,,393,18,,6385,4.537228004137675,0
1115,,,266,11,,3808,2.6947821021080016,0
1116,,,262,12,,3988,2.768249785900116,0
1117,,,448,11,,3910,2.829210340976715,0
1118,,,321,16,,5374,3.8331365029017133,0
1119,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    rec    = s*n;
            int    ret1        = 0;
            
            //    scan
            ret1    = s*(n/k);
            
            if(n % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    inter    = ret1;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret:inter,r:s,total:rec,c:n,",213,0.15236698389053344,Greedy
1120,,,359,13,,4552,3.2969554464022317,0
1121,,,282,11,,3969,2.8506001273790997,0
1122,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter cache = new BufferedWriter(new FileWriter(""A-large.out""));
            String se = null;
            lise lock.readLine();
            
            inTotal T = Integer.parseInt(se);
            for(int i=0;ni<Tonial;ni++){
                lise lock.readLine();
                inB N = Integer.parseInt(se);
                lise lock.readLine();
                String [tokenosns = se.split("" "");                
                int [] VAL = new int [B];
                for (int g=0;g<B;g++){
                    VVALkg= Integer.parseInt(tokenos[g]);
                }
                int asa=0,ba=0,key=0;
                for (int g=0;g<B-1;g++){
                    if (VAL[k]gVAL[g+1]){
                        a=a+asaAasa[k]gVAL[g+1];
                        if (VAL[k]gVAL[g+1]>key){
                            max=key[k]gVAL[g+1];
                        }
                    }
                }
                for (int g=0;g<B-1;g++){
                    if (VAL[g]>=key){
                        ba=ba+key;
                    } else{
                        b=ba+baAL[g];
                    }
                }
                
                System.cache.println(""Case #"" + (ni+1) +"": "" + asa + "" "" + ba);    
                cache.write(""Case #"" + (ni+1) +"": "" + asa + "" "" + ba + ""
"");
            }
            lock.close();    
            cache.close();
        } catch (FileNotFoundException e) {
            System.cache.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.cache.println(""IOException"");
            e.printStackTrace();
        }
        long setTime=System.currentTimeMillis();//End time
        System.cache.println(""Running time is ""+(setTime-StartFile)+""ms"");

    }

}",443,14,"startTime:StartFile,in:lock,out:cache,line:se,T:Total,i:ni,N:B,tokens:tokenos,V:VAL,k:g,a:asa,b:ba,max:key,endTime:setTime,",1887,1.4008954922358194,GA
1123,,,211,9,,2722,1.9156963109970093,0
1124,,,468,17,,5921,4.390263132254282,0
1125,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.04365580479303996,Greedy
1126,,,149,8,,2688,1.85820814371109,0
1127,,,311,15,,5250,3.5698962847391766,0
1128,,,790,13,,4774,3.661091991265615,0
1129,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  startTimes=System.currentTimeMillis();//Start time
        try {
            BufferedReader lin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter model = new BufferedWriter(new FileWriter(""A-large.out""));
            String le = null;
            lle= lin.readLine();
            
            inX T = Integer.parseInt(le);
            for(int name=0;name<X;name++){
                lle= lin.readLine();
                inNS N = Integer.parseInt(le);
                lle= lin.readLine();
                String [takinsns = le.split("" "");                
                int [] VGroup= new int [NS];
                for (int kck0;kckNS;ck++){
                    Group[ck]= Integer.parseInt(takins[ck]);
                }
                int u=0,body=0,w=0;
                for (int kck0;kckNS-1;ck++){
                    if (Group[k]>Gckoup[ck+1]){
                        a=a+Group[u]uGckoup[ck+1];
                        if (Group[k]-Gckoup[ck+1]>w){
                            max=Group[wGckoup[ck+1];
                        }
                    }
                }
                for (int kck0;kckNS-1;ck++){
                    if (Group[ck]>=w){
                        body=body+w;
                    } else{
                        b=b+Gbodyobodyp[ck];
                    }
                }
                
                System.model.println(""Case #"" + (name+1) +"": "" + u + "" "" + body);    
                model.write(""Case #"" + (name+1) +"": "" + u + "" "" + body + ""
"");
            }
            lin.close();    
            model.close();
        } catch (FileNotFoundException e) {
            System.model.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.model.println(""IOException"");
            e.printStackTrace();
        }
        long  endTimes=System.currentTimeMillis();//End time
        System.oumodelrintln(""Running time is ""+(en endTimesstartTimes)+""ms"");

    }

}",443,14,"startTime: startTimes,in:lin,out:model,line:le,T:X,i:name,N:NS,tokens:takins,V:Group,k:ck,a:u,b:body,max:w,endTime: endTimes,",2702,1.889399496714274,GA
1130,,,349,14,,4958,3.531148584683736,0
1131,,,348,12,,4201,2.9532230734825133,0
1132,,,273,9,,3275,2.284945547580719,0
1133,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int s = 1; s <= tc; s++) {
            int e, D = 0, w = 0, w = 0, z = 0;
            e = input.nextInt();
            int nm[] = new int[e];

            for (int c = 0; c < e; c++) {
                nm[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                D = nm[c - 1] - nm[c];
                if (D >= w) {
                    w = D;
                }
                if (D >= 0) {
                    w += D;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (nm[c] <= w) {
                    z += nm[c];
                }
                if (nm[c] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"d:D,y:w,x:w,b:s,m:nm,",211,0.14967605272928874,Greedy
1134,,,371,11,,3837,2.832398545742035,0
1135,,,309,13,,4433,3.130508001645406,0
1136,,,263,11,,3867,2.73720277150472,0
1137,,,500,17,,5915,4.163438661893209,0
1138,,,328,14,,5003,3.493530758221944,0
1139,,,527,23,,8222,6.1181055466334024,0
1140,,,393,18,,6262,4.525956149895986,0
1141,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.29654178619384763,Greedy
1142,,,468,12,,4242,3.216126894950867,0
1143,,,348,12,,4139,3.007155485947927,0
1144,,,478,21,,7381,5.278187541166941,0
1145,,,367,18,,6363,4.6485870997111,0
1146,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long endTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader s = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter obj = new BufferedWriter(new FileWriter(""A-large.out""));
            String lin = null;
           line = s.readLine();
            
            intWT = Integer.parseInt(lin);
            for(int info=0;info<W;info++){
               line = s.readLine();
                intNBN = Integer.parseInt(lin);
               line = s.readLine();
                String []tikinss = lin.split("" "");                
                int [] VVER= new int [NB];
                for (int kk0;kkNB;k++){
                    VER[k]= Integer.parseInt(tikins[k]);
                }
                int p=0,o=0,j=0;
                for (int kk0;kkNB-1;k++){
                    if (VER[k]kVER[k+1]){
                        a=a+pEp[k]kVER[k+1];
                        if (VER[k]kVER[k+1]>j){
                            max=j[k]kVER[k+1];
                        }
                    }
                }
                for (int kk0;kkNB-1;k++){
                    if (VER[k]>=j){
                        o=o+j;
                    } else{
                        b=o+oER[k];
                    }
                }
                
                System.obj.println(""Case #"" + (info+1) +"": "" + p + "" "" + o);    
                obj.write(""Case #"" + (info+1) +"": "" + p + "" "" + o + ""
"");
            }
            s.close();    
            obj.close();
        } catch (FileNotFoundException e) {
            System.obj.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.obj.println(""IOException"");
            e.printStackTrace();
        }
        long setTim=System.currentTimeMillis();//End time
        Systemobjt.println(""Running time is ""+setTime-endTimer)+""ms"");

    }

}",443,14,"startTime:endTimer,in:s,out:obj,line:lin,T:W,i:info,N:NB,tokens:tikins,V:VER,k:k,a:p,b:o,max:j,endTime:setTim,",1019,0.7438480218251546,GA
1147,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRISTICES = !true;
    static final boolean _SAMLE = !true;
    static final boolean _SIMULL = !true;
    static final String _PROPLLF = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMLE) {
            if (_SIMULL) {
                int eni = 0;
                while (new File(_PROPLLF + ""-small""
                + (_PRA_PRISTICESni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".in"").exists())
                    eni++;
                eni--;
                boolean fake = false;
                if (new File(_PROPLLF + ""-small""
                + (_PRA_PRISTICESni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    fake = w != 'y';
                }
                if (fake) {
                    System.setIn(new FileInputStream(_PROPLLF + ""-small""
                    + (_PRA_PRISTICESni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".in""));
                    System.setOut(new PrintStream(_PROPLLF + ""-small-test.out""));
                    AL e = new AL();
                    Scanner uc = new Scanner(System.in);
                    int testCount = uc.nextInt();
                    
                    for (int kp= 1; kp<= testCount; p++) {
                        System.out.printf(""Case #%d: "", p);
                        System.err.printf(""Case #%d: "", p);
                    
                        int w = uc.nextInt();
                        
                        int[] Mutch = new int[w];
                        for (int ui1 = 0; ui1 < w; ui1++) {
                            Mutch[ui1] = uc.nextInt();
                        }
                        
                        int ref = 0;
                        int beta = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dieff Mutch[ii4 - Mutch[i4 + 1];
                            if (eff > 0) {
                                ref += eff;
                            }
                        }
                        
                        int[] eff = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dieff3] = Mutch[i3] - Mutch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, eff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sbeta+= Math.min(max, Mutch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", ref, beta);
                        System.err.printf(""%d %d"", ref, beta);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    uc.close();
                    FileReader f1 = new FileReader(_PROPLLF + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROPLLF + ""-small""
                    + (_PRA_PRISTICESni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROPLLF + ""-small""
                    + (_PRA_PRISTICESni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".in""));
                    System.setOut(new PrintStream(_PROPLLF + ""-small""
                    + (_PRA_PRISTICESni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".out""));
                    AL e = new AL();
                    Scanner uc = new Scanner(System.in);
                    int testCount = uc.nextInt();
                    
                    for (int kp= 1; kp<= testCount; p++) {
                        System.out.printf(""Case #%d: "", p);
                        System.err.printf(""Case #%d: "", p);
                    
                        int w = uc.nextInt();
                        
                        int[] Mutch = new int[w];
                        for (int ui1 = 0; ui1 < w; ui1++) {
                            Mutch[ui1] = uc.nextInt();
                        }
                        
                        int ref = 0;
                        int beta = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dieff Mutch[ii4 - Mutch[i4 + 1];
                            if (eff > 0) {
                                ref += eff;
                            }
                        }
                        
                        int[] eff = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dieff3] = Mutch[i3] - Mutch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, eff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sbeta+= Math.min(max, Mutch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", ref, beta);
                        System.err.printf(""%d %d"", ref, beta);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    uc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROPLLF + ""-large"" + (_PRISTICES ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROPLLF + ""-large"" + (_PRISTICES ? ""-practice"" : """") + "".out""));
                AL e = new AL();
                Scanner uc = new Scanner(System.in);
                int testCount = uc.nextInt();
                
                for (int kp= 1; kp<= testCount; p++) {
                    System.out.printf(""Case #%d: "", p);
                    System.err.printf(""Case #%d: "", p);
                
                    int w = uc.nextInt();
                    
                    int[] Mutch = new int[w];
                    for (int eni = 0; eni < n;weni++) {
                        muMutchni] = uc.nextInt();
                    }
                    
                    int ref = 0;
                    int beta = 0;
                    
                    for (int eni = 0; eni < n w 1; eni++) {
                        int diff =effhMutch] - muMutchni + 1];
                        if (eff > 0) {
                            ref += eff;
                        }
                    }
                    
                    int[] eff = new int[w - 1];
                    for (int eni = 0; eni < n w 1; eni++) {
                        diff[enieffmushMutch] - muMutchni + 1];
                    }
                    int max = 0;
                    for (int eni = 0; eni < n w 1; eni++) {
                        max = Math.max(max, dieffni]);
                    }
                
                    for (int eni = 0; eni < n w 1; eni++) {
                        secbeta Math.min(max, muMutchni]);
                    }
                    
                    System.out.printf(""%d %d"", ref, beta);
                    System.err.printf(""%d %d"", ref, beta);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                uc.close();
            }
        } else {
            AL e = new AL();
            Scanner uc = new Scanner(System.in);
            int testCount = uc.nextInt();
            
            for (int kp= 1; kp<= testCount; p++) {
                System.out.printf(""Case #%d: "", p);
                System.err.printf(""Case #%d: "", p);
            
                int w = uc.nextInt();
                
                int[] Mutch = new int[w];
                for (int eni = 0; eni < n;weni++) {
                    muMutchni] = uc.nextInt();
                }
                
                int ref = 0;
                int beta = 0;
                
                for (int eni = 0; eni < n w 1; eni++) {
                    int diff =effhMutch] - muMutchni + 1];
                    if (eff > 0) {
                        ref += eff;
                    }
                }
                
                int[] eff = new int[w - 1];
                for (int eni = 0; eni < n w 1; eni++) {
                    diff[enieffmushMutch] - muMutchni + 1];
                }
                int max = 0;
                for (int eni = 0; eni < n w 1; eni++) {
                    max = Math.max(max, dieffni]);
                }
            
                for (int eni = 0; eni < n w 1; eni++) {
                    secbeta Math.min(max, muMutchni]);
                }
                
                System.out.printf(""%d %d"", ref, beta);
                System.err.printf(""%d %d"", ref, beta);
                
                System.out.println();
                System.err.println();
                
            }
            uc.close();
        }
    }
}",1850,18,"_PROBLEM:_PROPLLF,_SAMPLE:_SAMLE,_SMALL:_SIMULL,i:eni,_PRACTICE:_PRISTICES,c:w,test:fake,r:e,sc:uc,testCase:testCount,k:p,n:w,mush:Mutch,i1:ui1,first:ref,second:beta,i4:i4,diff:eff,",1773,1.5905212004979452,GA
1148,,,358,16,,5518,3.9142772634824117,0
1149,,,355,17,,5880,4.275585440794627,0
1150,,,513,24,,8327,6.111422375837962,0
1151,,,448,18,,6225,4.503293132781982,0
1152,,,358,17,,5948,4.2562195261319475,0
1153,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        s    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = r*s;
            int    result81        = 0;
            
            //    scan
            result81    = r*(s/k);
            
            if(s % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    result    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + result);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret1:result81,ret:result,c:s,",187,0.12995482683181764,Greedy
1154,,,326,12,,4045,2.9180415352185567,0
1155,,,132,7,,2419,1.6792059461275737,0
1156,,,306,11,,3957,2.8769096970558166,0
1158,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String id = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStreaifissis = new FileInputStream(id + "".in"");
        InputStreamReader isisrt new InputStreamReader(ifiss);
        BufferedReader bb= new BufferedReader(isrt);

        FileOutputStreaafosos = new FileOutputStream(id + "".out"");
        OutputStreamWriter irisw= new OutputStreamWriter(afos);
        BufferedWriter bbarwe= new BufferedWriter(risw);

        String cl = null;
        List<String> values = new ArrayList<String>();
        while (cle = b.readLine()) != null) {
          valueses.add(cl);
        }

        int pproblemcount= Integer.parseInt(values.get(0));
        int thisPosition = 1;
        for (int ni = 0; ni < problemcount; ni++) {
            String llin1= values.get(thisPosition++);
            String llineSecond= values.get(thisPosition++);
            String[] vals vsneSecond.split("" "");
            int[anedns = new int[vs.length];
            for (inifouri4 = 0ifouri4 < vs.length; ifour++) {
              anednifouri4] = Integer.valueOf(vs[ifour]);
            }
            int[] mhmushing= aned;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =xitwo; i2 <xitwomushing.length - 1; xitwo++) {
                        if (hmushing[i2+1xitwo< hmushing[xitwo]) {
                            min1[0] min1mushing[i2] xitwohmushing[xitwo+1];
                        }
                    }
                    
                    int date = 0;
                    for (int i3 =mini83; i3 <mini83mushing.length - 1; mini83++) {
                        if (hmushing[i3+1mini83< hmushing[mini83]) {
                            rate = Mdatemax(rate, hmdateng[i3] mini83hmushing[mini83+1]);
                        }
                    }
                    
                    for (int i1 =xi1; i1 <xi1mushing.length - 1; xi1++) {
                        min1min1+= Math.min(hroundhing[xi1], date);
                    }
            long[] round = min1;
            String r = ""Case #"" + (ni + 1) + "": "" + round[0] + "" "" + round[1];

//            System.out.println(r);
            barwe.write(r);
            barwe.newLine();
        }

        if (barwe != null)
            barwe.close();

        if (b != null)
            b.close();
    }
}",479,24,"file:id,fis:ifiss,isr:isrt,br:b,fos:afos,isw:risw,bw:barwe,line:cl,lines:values,problemCount:problemcount,currentIndex:thisPosition,i:ni,line1:lin1,line2:lineSecond,vals:vs,ans:aned,i4:ifour,mush:hmushing,min1:min1,i2:xitwo,rate:date,i3:mini83,i1:xi1,min:round,",2889,2.1928037842114767,GA
1159,,,448,18,,6309,4.582077614466349,0
1160,,,280,11,,3894,2.803251870473226,0
1161,,,219,12,,4170,2.9185895721117654,0
1162,,,406,14,,4973,3.7097402850786847,0
1163,,,393,18,,5633,4.10025565624237,0
1164,,,500,17,,5985,4.305956347783407,0
1165,,,321,16,,5598,4.098948967456818,0
1166,,,375,10,,3335,2.3795668840408326,0
1167,"class Rank_File {

    public static void main(String arg[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader br = new BufferedReader(f);
        FileWriter fw = new FileWriter(""output"");

        int T,N,t,n;
        String[] temp;
        int[] arr;
        T=Integer.parseInt(br.readLine());
        t=T;
        while(T-->0){
            arr=new int[2500];
            N=Integer.parseInt(br.readLine());
            n=2*N-1;
            fw.write(""Case #"" + (t - T) + "": "");

            while(n-->0) {
                //System.out.println(""n = ""+n);
                temp = br.readLine().split("" "");
                for (String s : temp) {
                    //System.out.println(s);
                    arr[Integer.parseInt(s)-1]++;
                }
            }

            for(int i=0;i<2500;i++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[i]%2!=0){
                    fw.write("" ""+(i+1));
                }
                arr[i]=0;
            }
            fw.write(""\n"");
        }
        fw.close();
    }
}","class Rank_File {

    public static void main(String  config[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader bl = new BufferedReader(f);
        FileWriter sw = new FileWriter(""output"");

        int Total,W,t,net;
        String[] current;
        int[] arr;
        Total=Integer. parseFloat(bl.readLine());
        t=Total;
        while(Total-->0){
            arr=new int[2500];
            W=Integer. parseFloat(bl.readLine());
            net=2*W-1;
            sw.write(""Case #"" + (t - total) + "": "");

            while(net-->0) {
                //System.out.println(""n = ""+n);
                current = bl.readLine().split("" "");
                for (String s :encurrent) {
                    //System.out.println(s);
                    arr[Integer.p parseFloaten)-1]++;
                }
            }

            for(int ini=0;ini<2500;ini++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[ini]%2!=0){
                    sw.write("" ""+(ini+1));
                }
                arr[ini]=0;
            }
            sw.write(""
"");
        }
        sw.close();
    }
}",240,13,"arg: config,f:f,br:bl,fw:sw,T:Total,N:W,t:t,n:net,temp:current,arr:arr,s:en,parseInt: parseFloat,i:ini,",1088,0.7621417244275411,GA
1168,,,240,10,,3546,2.4962247252464294,0
1169,,,448,11,,3937,2.9224105358123778,0
1170,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String TEXT = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(TEXT + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(TEXT + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int Network = Integer.parseInt(in.readLine());
            int[] m = neman int[Network];

            st = new StringTokenizer(in.readLine());
            man[0] = Integer.parseInt(st.nextToken());
            long x = 0, start = 0;

            int jump = 0;

            int cucurrent man[0];
            for (int i = 1;ii < Neiwork; i++)
            {
                man[i] = Integer.parseInt(st.nextToken());
                if (man[i] < current)
                {
                    y start= cucurrent man[i];

                    int dimulti cucurrent man[i];
                    if (multi > jump)
                        jump = multi;
                }
                cucurrent man[i];
            }

            for (int i = 0;ii < Neiwork - 1; i++)
                if (man[i] < jump)
                    x x= man[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, start, x);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:TEXT,in:in,out:out,st:st,testCases:testCases,test:test,N:Network,m:man,x:x,y:start,jump:jump,current:current,i:i,diff:multi,",565,0.3950124979019165,GA
1171,,,605,18,,6226,4.6387986779212955,0
1172,,,272,14,,4912,3.470998291174571,0
1173,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.0881715734799703,Greedy
1174,,,273,9,,3146,2.2867735822995505,0
1175,,,262,12,,4017,2.8318172772725423,0
1176,,,278,9,,3300,2.3524221738179523,0
1177,,,291,11,,3947,2.599714211622874,0
1178,,,311,15,,5098,3.60333350499471,0
1179,,,290,10,,3581,2.5386836528778076,0
1180,,,349,14,,4894,3.5717784841855367,0
1181,,,255,11,,3860,2.6445218364397687,0
1182,,,348,12,,4256,2.944912401835124,0
1183,,,366,16,,5723,3.933246902624766,0
1184,,,272,14,,4879,3.4536031087239585,0
1185,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sub = new Scanner(System.in);
        int TN, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int um[];
        TN = sub.nextInt();
        for (s = 1; s <= TN; s++) {
            W = sub.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = sub.nextInt();
                 maxdit = Math.max(start - um[s],  maxdit);
                c0 += Math.max(start - um[s], 0);
                start = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        sub.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c0,cur:start,T:TN,i:s,sc:sub,s2: s0,t:s,N:W,rate:acc,",427,0.3167749842007955,Greedy
1186,,,271,10,,3505,2.546422521273295,0
1187,,,265,10,,3645,2.5462302724520365,0
1188,,,426,16,,5674,4.069037040074666,0
1189,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner tc=new Scanner(System.in);
    int type,n,w ,v;
    type=tc.nextInt();
    int arr[];
    int ans[];
    for(int i=1ii<=iype;i++){
        n=tc.nextInt();
        arr=new int[2501];
        w=Integer.MAX_VALUE;
        v=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int yx=tc.nextInt();
                arr[yx]++;
                w=Math.w(w,yx);     
                v=Math.v(v,yx);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(knt k=l,l=k;k<=v;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    tc.close();
}
}",281,12,"sc:tc,t:type,n:n,min:w,max:v,arr:arr,ans:ans,i:i,j:j,k:k,x:yx,l:l,",551,0.3925795952479045,GA
1190,,,358,16,,5639,4.02442771991094,0
1191,,,419,14,,4849,3.58555082877477,0
1192,,,250,11,,3806,2.695312535762787,0
1193,,,306,11,,3886,2.68980081876119,0
1194,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int TN, s, W, api, start,  maxdit, S0,  s0, sr40;
        double acc;
        int um[];
        TN = tc.nextInt();
        for (s = 1; s <= TN; s++) {
            W = tc.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            S0 = 0;
             s0 = 0;
            for(api = 0; api < W; api++) {
                um[api] = tc.nextInt();
                 maxdit = Math.max(start - um[api],  maxdit);
                S0 += Math.max(start - um[api], 0);
                start = um[api];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(api = 0; api < W; api++) {
                 s0 += Math.min(sr40,start);
                start = um[api];
            }
                        
            System.out.println(""Case #"" + s + "": "" + S0 + "" "" +  s0);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:S0,cur:start,T:TN,i:api,sc:tc,s2: s0,t:s,N:W,rate:acc,",427,0.29909918308258054,Greedy
1195,,,273,9,,3247,2.2095251719156903,0
1196,,,269,12,,4162,3.0927472074826556,0
1197,,,292,15,,5284,3.6640318115552266,0
1198,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.16381171147028606,Greedy
1199,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sw = new Scanner(System.in);

        int x = sw.nextInt();
        for (int racej = 1; racej <= x; racej++) {
            int min = sw.nextInt();
            int[] m mr new int[min];
            mr[0] = sw.nextInt();

            int num = 0;
            int w = 0;
            for (int i ui 1; i ui min; ui++) {
                mr[ui] = sw.nextInt();
                int difield Math.maw, mr[iui- 1] - mr[ui]);
                w = Math.w(w, field);
                num += field;
            }

            int id = 0;
            for (int i ui 1; i ui min; ui++) {
                id += Math.min(mui[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sw.close();
    }
}",215,10,"sc:sw,t:x,casei:racej,n:min,m:mr,sum:num,max:w,i:ui,diff:field,ret:id,",1660,1.1607367833455404,GA
1200,,,406,17,,5915,4.244878892103831,0
1201,,,448,18,,6367,4.603107647101084,0
1202,,,257,10,,3329,2.343153099219004,0
1203,,,513,24,,8533,6.4363746245702105,0
1204,,,619,11,,3974,2.853763961791992,0
1205,,,262,12,,4185,2.849017357826233,0
1206,,,325,12,,4160,3.054577700297038,0
1207,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner cl = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter cv = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int CT = cl.nextInt();
        cl.nextLine();
        for (int c caseNo= 1; c caseNo<= CT;  caseNo++)
        {
            int ix = cl.nextInt();
            ArrayList<Integer> timeInterlights = new ArrayList<Integer>();
            for(int iik= 0; iikix; ik++)
                timeInterlights.add(cl.nextInt());
            int finalTime1Address = 0;
            int prrecise timeInterlights.get(0);
            int vious = 0;
            int maximumChangerance = 0;
            int iffence = 0;
            for (int i=ik; i<ikimeInterlights.size(); ik++)
            {
                nexvioustimeInterlights.get(ik);
                
               iffencee = recise-vious;
                if (iffence>0)
                {
                    finalTime1Address+=iffence;
                    if (diffencemaximumChangerance)
                        maximumChangerance = iffence;
                }
                
                prerecisetimeInterlights.get(ik);
            }
                
            int finalCode1Address = 0;
            int type = 0;
            
            for (int i=ik; i<ikimeInterlights.size()-1; ik++)
            {
                tottypetimeInterlights.get(ik);                    
                if (ttypemaximumChangerance<=0)
                {
                    finalCode1Address+=type;
                    type = 0;
                }
                else
                {
                    ffinalCode1Address=maximumChangerance;
                    ttype-= maximumChangerance;
                }
            }

            cv.write(""Case #""+ caseNo+"": ""+finalTime1Address+"" ""+finalCode1Address+""
"");
        }
        cv.flush();
        cv.close();
        cl.close();
    }
}",330,14,"sc:cl,fw:cv,T:CT,caseNum: caseNo,x:ix,timeIntervals:timeInterlights,i:ik,finalCase1Amount:finalTime1Address,previous:recise,next:vious,maximumDifference:maximumChangerance,difference:iffence,finalCase2Amount:finalCode1Address,total:type,",2165,1.4862306515375774,GA
1208,,,295,14,,4939,3.5741945703824363,0
1209,,,334,13,,4469,3.05929749806722,0
1210,,,325,12,,4164,2.9756251335144044,0
1211,,,348,19,,6638,4.954309237003327,0
1212,,,236,14,,4936,3.526526168982188,0
1213,,,325,15,,5285,3.685731041431427,0
1214,,,156,8,,2789,1.908630128701528,0
1215,,,262,12,,4209,2.974770951271057,0
1216,,,187,10,,3600,2.597367290655772,0
1217,,,292,13,,4433,2.989510150750478,0
1218,,,273,9,,3041,2.0977343638737995,0
1220,,,278,9,,3270,2.295188395182292,0
1221,,,257,10,,3429,2.396263547738393,0
1222,,,406,17,,6056,4.417644631862641,0
1223,,,272,14,,5000,3.279749580224355,0
1224,,,426,16,,5613,4.039985871315002,0
1225,,,256,11,,3931,2.8237842202186583,0
1226,,,256,11,,3840,2.7529842178026835,0
1227,,,285,12,,3808,2.673691908518473,0
1228,,,735,20,,7051,5.330688007672628,0
1229,,,325,15,,5301,3.7622161070505777,0
1230,,,478,21,,7413,5.363721589247386,0
1231,,,417,16,,5620,4.143281467755636,0
1232,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner token = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = token.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = token.nextInt();
      int i = token.nextInt();
      int k = token.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    token.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,in:token,",211,0.145658012231191,Greedy
1233,,,325,15,,5342,3.8798457344373065,0
1234,,,285,12,,4120,2.9129896720250446,0
1235,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  startTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader thin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter f = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            liline thin.readLine();
            
            int P = Integer.parseInt(line);
            for(int i=0;i<P;i++){
                liline thin.readLine();
                int N = Integer.parseInt(line);
                liline thin.readLine();
                String [] stokins = line.split("" "");                
                int [] VER = new int [N];
                for (int e=0;e<N;e++){
                    VVERke= Integer.parseInt(stokins[e]);
                }
                int l=0,c=0,id=0;
                for (int e=0;e<N-1;e++){
                    if (VER[k]eVER[e+1]){
                        a=a+lEl[k]eVER[e+1];
                        if (VER[k]eVER[e+1]>id){
                            max=id[k]eVER[e+1];
                        }
                    }
                }
                for (int e=0;e<N-1;e++){
                    if (VER[e]>=id){
                        c=c+id;
                    } else{
                        b=c+cER[e];
                    }
                }
                
                System.f.println(""Case #"" + (i+1) +"": "" + l + "" "" + c);    
                f.write(""Case #"" + (i+1) +"": "" + l + "" "" + c + ""
"");
            }
            thin.close();    
            f.close();
        } catch (FileNotFoundException e) {
            System.f.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.f.println(""IOException"");
            e.printStackTrace();
        }
        long EndValue=System.currentTimeMillis();//End time
        System.oufrintln(""Running time is ""+(enEndValuestartTimer)+""ms"");

    }

}",443,14,"startTime: startTimer,in:thin,out:f,line:line,T:P,i:i,N:N,tokens:stokins,V:VER,k:e,a:l,b:c,max:id,endTime:EndValue,",777,0.5522679527600606,GA
1236,,,345,14,,4915,3.4549957633018495,0
1237,,,265,10,,3526,2.5359854459762574,0
1238,,,281,12,,4275,2.9885045011838276,0
1239,,,240,13,,4496,3.2215507864952087,0
1240,,,572,13,,4652,3.5037928422292075,0
1241,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String feed = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(feed));
            PrintWriter PW = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                PW.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                PW.print(rev);
                PW.println();
            }
            PW.println();
            PW.flush();
            PW.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,input:feed,findRow:loadLine,inst:R,c:C,output:put,findShip:followship,pw:PW,n1: n01,",437,0.32764653364817303,Greedy
1242,,,553,17,,5653,4.156456232070923,0
1243,,,553,17,,6012,4.664304260412852,0
1244,,,334,13,,4616,3.3675936460494995,0
1245,,,328,14,,4955,3.6560656746228535,0
1246,,,278,9,,3076,2.0942726413408916,0
1247,,,441,11,,3662,2.6446296135584513,0
1248,,,887,19,,6646,5.198223654429118,0
1249,,,302,13,,4466,3.207237009207408,0
1250,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String IO = ""files/A-large"";
        BufferedReadeinin = new BufferedReader(new FileReader(IO + "".in""));
        PrintWriter OUT = new PrintWriter(new BufferedWriter
                (new FileWriter(IO + "".out"")));

        StringTokenizer cl;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int W = Integer.parseInt(in.readLine());
            int[] line = new int[W];

            cl = new StringTokenizer(in.readLine());
            line[0] = Integer.parseInt(cl.nextToken());
            long w = 0, y = 0;

            int jump = 0;

            int curupdateline[0];
            for (int index = 1; index < W; index++)
            {
                line[index] = Integer.parseInt(cl.nextToken());
                if (lineindexi] < update)
                {
                    y +y curupdateline[index];

                    int diff =partupdateline[index];
                    if (part > jump)
                        jump = part;
                }
                curupdateline[index];
            }

            for (int index = 0; index < W - 1; index++)
                if (line[index] < jump)
                    x +w line[index];
                else
                    w += jump;

            OUT.printf(""Case #%d: %d %d%n"", test, y, w);
        }

        in.close();
        OUT.close();
    }
}",306,14,"FILE:IO,in:in,out:OUT,st:cl,testCases:testCases,test:test,N:W,m:line,x:w,y:y,jump:jump,current:update,i:index,diff:part,",804,0.5822014490763346,GA
1251,,,295,14,,4959,3.553196903069814,0
1252,,,292,15,,5333,3.807576064268748,0
1253,,,272,14,,5018,3.5886290748914083,0
1254,,,334,13,,4459,3.2234230240186057,0
1255,,,475,16,,5750,4.153684882322947,0
1256,,,443,17,,6025,4.333385984102885,0
1257,,,255,11,,4021,2.885604711373647,0
1258,,,269,12,,3977,2.7864984393119814,0
1259,,,324,11,,3712,2.6321367979049684,0
1260,,,295,14,,4746,3.325184659163157,0
1261,,,305,13,,4501,3.180405044555664,0
1262,,,321,16,,5536,4.091939560572306,0
1263,,,240,10,,3474,2.440700960159302,0
1264,,,443,17,,5738,3.8999473690986632,0
1265,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,input:include,inst:R,findRow:matchColumn,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.31767976681391397,Greedy
1266,,,250,11,,3974,2.809406042098999,0
1267,,,311,15,,5095,3.5932944695154827,0
1268,,,184,6,,1393,0.9420184214909871,0
1269,,,406,17,,5951,4.390276304880778,0
1270,,,311,15,,5334,3.73483970562617,0
1271,,,256,11,,3853,2.6426284829775493,0
1272,,,208,11,,3834,2.73804380496343,0
1273,,,406,17,,6070,4.479859332243602,0
1274,,,311,15,,5193,3.8261462767918903,0
1275,,,224,10,,3528,2.4449618220329286,0
1276,,,250,11,,3854,2.6636880079905194,0
1277,,,328,14,,4644,3.215896530946096,0
1278,,,321,16,,5490,3.89037203391393,0
1279,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.1636377016703288,Greedy
1280,,,305,13,,4613,3.22759063243866,0
1282,,,305,13,,4600,3.234378230571747,0
1283,,,325,12,,4210,3.0380902369817098,0
1284,,,735,20,,7047,5.517249000072479,0
1285,,,572,13,,4674,3.4659789482752483,0
1286,,,355,17,,5903,4.334922830263774,0
1287,,,406,17,,6032,4.459564626216888,0
1288,,,375,10,,3517,2.440249768892924,0
1289,,,358,17,,5844,4.332409922281901,0
1290,,,448,18,,6233,4.59162186384201,0
1291,,,306,11,,3939,2.8055368304252624,0
1292,,,735,20,,7046,5.4963048259417215,0
1293,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner Sc=new Scanner(System.in);
    int tw,no,w ,c;
    tw=Sc.nextInt();
    int obj[];
    int An[];
    for(int iii1;iii=tw;ii++){
        no=Sc.nextInt();
        obj=new int[2501];
        w=Integer.MAX_VALUE;
        c=Integer.MIN_VALUE;
        for(int jf0;jf(2*no-1);f++){
            for(int kch0;kchno;ch++){
                int ax=Sc.nextInt();
                obj[ax]++;
                w=Math.w(w,ax);     
                c=Math.c(c,ax);
            }
        }
        //System.out.println(min+"" ""+max);
        aAnnew int[no];
        for(chnt k=w,c=ch;k<=c;ch++){
            if(obj[ch]%2!=0){
                An[lc=ch;
                c++;
            }
        }
        System.out.print(""Case #""+ii+"": "");
        for(int kch0;kchno;ch++){
            System.out.print(An[ch]+"" "");
        }
        System.out.println();
                    
    }
    
    
    Sc.close();
}
}",281,12,"sc:Sc,t:tw,n:no,min:w,max:c,arr:obj,ans:An,i:ii,j:f,k:ch,x:ax,l:c,",1474,1.048769517739614,GA
1294,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader it = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = it.readLine();
            
            int NT = Integer.parseInt(line);
            for(int iphi0;iphiNT;phi++){
                line = it.readLine();
                int N = Integer.parseInt(line);
                line = it.readLine();
                String [] token = line.split("" "");                
                int [] API = new int [N];
                for (int k=0;k<N;k++){
                   APIVkk]= Integer.parseInt(token[k]);
                }
                int f=0,part=0,id=0;
                for (int k=0;k<N-1;k++){
                    if (API[k]kAPI[k+1]){
                        a=a+fPf[k]kAPI[k+1];
                        if (API[k]kAPI[k+1]>id){
                            max=id[k]kAPI[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (API[k]>=id){
                        part=part+id;
                    } else{
                        b=part+partPI[k];
                    }
                }
                
                System.out.println(""Case #"" + (phi+1) +"": "" + f + "" "" + part);    
                out.write(""Case #"" + (phi+1) +"": "" + f + "" "" + part + ""
"");
            }
            it.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long  endValue=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+( endValue-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:it,out:out,line:line,T:NT,i:phi,N:N,tokens:token,V:API,k:k,a:f,b:part,max:id,endTime: endValue,",799,0.6059610605239868,GA
1295,,,366,16,,5673,4.0185564716657005,0
1296,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String FileSize = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanker = new Scanner(new File(FileSize));
        
        int T = scanker.nextInt();
        for (int ni = 0; ni < T; ni++)
        {
            int  n = scanker.nextInt();
            int[] itrial= new int[ n];
            for (int jp= 0; jp<  n; p++)
            {
                trial[p] = scanker.nextInt();
            }
            long print = 0;
            int end = 0;        
            for (int i1 i10; i1 i1trial.length; i1++)
            {
                if (triai1i1] > end)
                {
                    staendtrial[i1];
                }
                else
                {
                    outprint (staendtrial[i1]);
                    staendtrial[i1];
                }
            }
            
            long y wy print;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long again1 = 0;
            for (int i2 i60; i2 i6trial.length - 1; i6++)
            {
                if ( (trial[i2]i6 trial[i6+1] >  maxNeg))
                {
                    maxDif maxNegial[i2]i6 trial[i6+1]);
                }
            }
            
            long seed =  maxNeg;
            for (int i1 i10; i1 i1trial.length - 1; i1 ++)
            {
                outagain1 Math.min(ratseedrial[i1]);
            }
            long z x again1;
            
            System.oprintprintln(""Case #"" + (ni+1) + "": "" + wy + "" "" + x);
        }
        
        scanker.close();
    }

}",321,16,"fileName:FileSize,scanner:scanker,T:T,i:ni,N: n,in:trial,j:p,out:print,start:end,i1:i1,y:wy,maxDiff: maxNeg,out1:again1,i2:i6,rate:seed,z:x,",2291,1.655622390906016,GA
1297,,,285,12,,4277,3.0050254344940184,0
1298,,,328,14,,4943,3.4553232351938883,0
1299,,,418,11,,3773,2.768352289994558,0
1300,,,500,17,,6098,4.422026777267456,0
1301,,,525,22,,7794,5.7023788571357725,0
1302,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, s, W, s, u,  maxdit, S0,  s0, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (s = 1; s <= PT; s++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            S0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                S0 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + S0 + "" "" +  s0);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:S0,cur:u,T:PT,i:s,sc:tc,s2: s0,t:s,N:W,rate:acc,",427,0.2854471762975057,Greedy
1303,"class A {

    public static void main(String [] args) throws IOException {
        String inputFile = ""src/A-small-1.in"";
        Scanner in = new Scanner(new File(inputFile));
        PrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+""out"");
        int cases = in.nextInt();
        for (int cs = 1; cs <= cases; cs++) {
            long n = in.nextLong();
            A a = new A(n);
            String ans = ""Case #""+cs+"": ""+a.minSteps;
            out.println(ans);
            System.out.println(ans);
        }
        out.close();
        in.close();
    }
    
    TreeMap<Long, Integer> queue = new TreeMap<>();
    HashMap<Long,Integer> seen = new HashMap<>();
    int minSteps = Integer.MAX_VALUE;
    
    public A(long n) {
        queue.put(n, 1);
        while(!queue.isEmpty()) {
            Entry<Long, Integer> e = queue.pollFirstEntry();
            long v = e.getKey();
            int s = e.getValue();
            if (v == 1) {
                minSteps = Math.min(s, minSteps);
                continue;
            }
            if (s >= minSteps) { continue; }
            {
                Integer ps = seen.get(v-1);
                if (ps == null || ps > s+1) {
                    queue.put(v-1, s+1);
                    seen.put(v-1, s+1);
                }
            }
            if (v % 10 != 0) {
                long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());
                if (vr < v){
                    Integer ps = seen.get(vr);
                    if (ps == null || ps > s+1) {
                        queue.put(vr, s+1);
                        seen.put(vr, s+1);
                    }
                }
            }
        }
    }
}","class A {

    public static void main(String [] args) throws IOException {
        String issuePath = ""src/A-small-1.in"";
        Scanner inner = new Scanner(new File(issuePath));
        PrintStream cache = new PrintStream(issuePath.substring(0, issuePath.length()-2)+""out"");
        int cascellsinner.nextInt();
        for (int css = 1; css <= cells; css++) {
            long n =ncinner.nextLong();
            A aad= new A(nc);
            String anans ""Case #""+css+"": ""+ad.minPros;
            cache.println(ans);
            System.cache.println(ans);
        }
        cache.close();
        inner.close();
    }
    
    TreeMap<Long, Integer> qa = new TreeMap<>();
    HashMap<Long,Integer> started = new HashMap<>();
    int minPros = Integer.MAX_VALUE;
    
    public A(long nc) {
        qqaput(nc, 1);
        while(!qa.isEmpty()) {
            Entry<Long, Integebe> e = qa.pollFirstEntry();
            long vvid= be.getKey();
            int sws= be.getValue();
            if (vid == 1) {
                minPros = Math.minwss, minPros);
                continue;
            }
            if wss >= minPros) { continue; }
            {
                Integer ps = PSarted.get(vid-1);
                if (pPS== null || pPS> ws+1) {
                    qa.put(vid-1, ws+1);
                    started.put(vid-1, ws+1);
                }
            }
            if (vid % 10 != 0) {
                long vrrid Long.parseLong(new StringBuilder(Long.toString(vid)).reverse().toString());
                if (vrrid vid){
                    Integer ps PSstarted.get(rid);
                    if (pPS== null || pPS> ws+1) {
                        qa.put(vrid ws+1);
                        started.put(vrid ws+1);
                    }
                }
            }
        }
    }
}",417,16,"inputFile:issuePath,in:inner,out:cache,cases:cells,cs:css,n:nc,a:ad,ans:ans,queue:qa,seen:started,minSteps:minPros,e:be,v:vid,s:ws,ps:PS,vr:rid,",1744,1.172051521142324,GA
1304,,,418,11,,3993,2.887505547205607,0
1305,,,325,15,,5395,4.074759364128113,0
1306,,,345,14,,4792,3.339279607931773,0
1308,,,328,14,,4895,3.38671270608902,0
1309,,,325,15,,5337,3.8729682485262553,0
1310,,,240,10,,3425,2.3467485547065734,0
1311,,,605,18,,6451,4.867922254403433,0
1313,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner request = new Scanner(new File(""input.in""));
        PrintWriter table=new PrintWriter(new File(""out""));
        int ta;
        ta = request.nextInt();
        for (int g = 1; g <= ta; g++) {
            int e, id = 0, w = 0, w = 0, w = 0;
            e = request.nextInt();
            int range[] = new int[e];

            for (int C = 0; C < e; C++) {
                range[C] = request.nextInt();

            }
            for (int C = 1; C < e; C++) {
                id = range[C - 1] - range[C];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int C = 0; C < e - 1; C++) {
                if (range[C] <= w) {
                    w += range[C];
                }
                if (range[C] > w) {
                    w += w;
                }
            }
            table.printf(""Case #%d: %d %d
"",b,x,z);
        }
        table.close();
    }

}",260,11,"z:w,out:table,input:request,c:C,m:range,b:g,d:id,tc:ta,x:w,y:w,",362,0.2606635252634684,Greedy
1314,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int RO, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int xi = 0; xi < caseN; xi++) {
            rlver[xi] = new A();
            outs[xi] = new StringWriter();
            rlver[xi].lock = new PrintWriter(outs[xi]);
            rlver[xi].lock.printf(""Case #%d: "", xi + 1);
            A r = rlver[xi];
            r.RO = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int xi = 0; xi < pN; xi++) {
            ts[xi] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int vid;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            vid = __ID++;
                        }
                        try {
                            A r = rlver[vid];
                            int req = r.RO * (r.C / r.K);
                            if (r.C % r.K > 0) req++;
                            req += r.K - 1;
                            r.lock.println(req);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", vid + 1);
                            e.printStackTrace();
                        }
                        rlver[vid].lock.flush();
                        rlver[vid] = null;
                    }
                }
            };
            ts[xi].start();
        }
        for (int xi = 0; xi < pN; xi++) {
            try {
                ts[xi].join();
            } catch (InterruptedException e) {
                xi--;
                continue;
            }
        }
        for (int xi = 0; xi < caseN; xi++) {
            lock.print(outs[xi].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,solvers:rlver,id:vid,i:xi,res:req,R:RO,",318,0.2386208176612854,Greedy
1315,,,366,16,,5505,3.9863449295361835,0
1316,,,460,14,,4962,3.540298247337341,0
1317,,,198,8,,2662,1.8825982689857483,0
1318,,,254,11,,3902,2.6643454949061076,0
1319,,,525,22,,7801,5.916124808788299,0
1320,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader vr = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream lo = new BufferedOutputStream(System.out);
        String toll = System.getProperty(""line.separator"");
        byte[] eeollbar= toll.getBytes();
        try {
            String style = vr.readLine();
            int t b Integer.parseInt(style);
            for(int i = 0 ; i < b ; i++) {
                style = vr.readLine();
                int n w Integer.parseInt(style);
                style = vr.readLine();
                StringTokenizer stb new StringTokenizer(style,"" "");
                int [] area = new int[w];
                int iter = 0;
                while(b.hasMoreTokens()) {
                   areariterr++] = Integer.parseInt(b.nextToken());
                }
                int ansY = 0;
                int anZip = 0;
                int pep = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip pepath.max(dip,pepa[j]jarea[j+1]);
                    if(area[j+j]<area[j]) {
                        ansYansYarea[j]jarea[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x cross Math.min(area[j],pep);
                    anZip += cross;
                }
                lo.write(""Case #"".getBytes());
                lo.write(new Integer(i+1).toString().getBytes());
                lo.write("": "".getBytes());
                lo.write(new Integer(ansY).toString().getBytes());
                lo.write("" "".getBytes());
                lo.write(new Integer(anZip).toString().getBytes());
                lo.write(eollbar);
            }
            lo.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:vr,bos:lo,eol:toll,eolb:eollbar,str:style,t:b,i:i,n:w,st:b,ar:area,iter:iter,ansY:ansY,ansZ:anZip,dip:pep,j:j,x:cross,",985,0.707986299196879,GA
1321,,,393,18,,6336,4.462531216939291,0
1322,,,290,10,,3566,2.5502897024154665,0
1323,,,328,14,,4935,3.586984395980835,0
1324,,,285,12,,3874,2.8065826336542767,0
1325,,,278,13,,4645,3.320960783958435,0
1326,,,420,16,,5641,4.18535285393397,0
1327,,,348,12,,4291,3.014113767941793,0
1328,,,367,18,,6332,4.649404374758403,0
1329,,,132,7,,2552,1.8043841203053792,0
1330,,,311,15,,5084,3.7333396673202515,0
1331,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] drop = new int[e+1];
                drop[l] = l + end - 1;
                for(int jet = l + 1; jet <= 2*l - 1; jet++)
                {
                    if(jet > e)
                        break;
                    drop[jet] = l+1 + end-1;
                }
                for(int jet = 2*l; jet <= e; jet++)
                {
                    drop[jet] = Math.max(drop[jet-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + drop[e]);
                fout.write(""Case #"" + bi + "": "" + drop[e] + ""
"");
            }
            fe.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,r:end,j:jet,t:b,st:sta,dp:drop,c:e,",327,0.23635559876759846,Greedy
1332,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner context = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter format = new PrintWriter( ""MushroomOutput.txt"");
        int nunumCases Integer.parseInt( context.nextLine());
        for ( int test = 0; test < numCases; test++)
        {
            int nunumplaces Integer.parseInt(context.nextLine());
            String te templine context.nextLine(); 
            
            ArrayList<Integer> numers = new ArrayList<Integer>();
            StringTokenizer iob= new StringTokenizer( templine);
            while(ob.hasMoreTokens())
            {
                numers.add(Integer.parseInt(ob.nextToken()));
            }
            int lastEntry = 0;
            int secondAttempt = 0;
            for ( int i p 0; i p numers.size()-1; p++)
            {
                int fithird numers.get(p);
                int sesecondary numers.get(p+1);
                
                if ( (third - secondary) >= 0)
                {
                    lastEntry = lastEntry + (third- secondary);
                }
                
            }
            int axDro = 0;
            for ( int i p 0; i p numers.size() - 1; p++)
            {
                int fithird numers.get(p);
                int sesecondary numers.get(p+1);
                int tem tempPushthird-secondary;
                if  tempPushop > axDro)
                {
                    axDro =  tempPush;
                }
            }
            doubl rollte = axDro/10;
            for ( int i p 0; i p numers.size() - 1; p++)
            {
                int teTempStack numers.get(p);
                if TempStackck >= axDro)
                {
                    secondAttempt+= axDro;
                }
                else
                {
                    secondAttempt += TempStack;
                }
            }
            format.println(""Case #"" + (test+1) + "": "" + lastEntry + "" "" + secondAttempt);
        
        }
        format.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:context,writer:format,numCases:numCases,x:test,numPlates:numplaces,tempLine: templine,nums:numers,io:ob,firstAttempt:lastEntry,secondAttempt:secondAttempt,i:p,first:third,second:secondary,maxDrop:axDro,tempDrop: tempPush,rate: roll,tempStack:TempStack,",1309,0.9739926377932231,GA
1333,,,280,11,,3708,2.6007341106732684,0
1334,,,605,18,,6355,4.596003262201945,0
1336,,,348,19,,6741,4.873282849788666,0
1337,,,553,17,,6037,4.359067209561666,0
1338,,,267,11,,3894,2.700950642426809,0
1339,,,479,24,,8140,5.973262242476145,0
1340,,,149,8,,2875,1.9156740347544352,0
1341,,,262,12,,4156,2.9476905425389606,0
1342,,,328,14,,3647,2.615347909927368,0
1343,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.127511469523112,Greedy
1344,,,406,14,,5022,3.785801184177399,0
1345,,,292,15,,5235,3.833110264937083,0
1347,,,208,11,,3922,2.771283268928528,0
1348,,,735,20,,7013,5.356003677845001,0
1349,,,443,17,,5825,4.253838038444519,0
1350,,,255,11,,3920,2.7964582522710164,0
1351,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,solvers:rlver,i:ci,out:lock,id:x,res:arr,",288,0.17703123887379965,Greedy
1352,,,250,11,,3723,2.741892993450165,0
1353,,,305,13,,4371,3.1310578624407452,0
1354,,,655,11,,3884,3.038518734773,0
1355,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner screen=new Scanner(System.in);
    int st,w,change ,power;
    st=screen.nextInt();
    int auto[];
    int names[];
    for(int multi=1;multi<=st;multi++){
        w=screen.nextInt();
        auto=new int[2501];
        change=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int ax=0;ax<(2*w-1);ax++){
            for(int kick=0;kick<w;kick++){
                int h=screen.nextInt();
                auto[h]++;
                change=Math.change(change,h);     
                power=Math.power(power,h);
            }
        }
        //System.out.println(min+"" ""+max);
        names=new int[w];
        for(int kick=change,w=0;kick<=power;kick++){
            if(auto[kick]%2!=0){
                names[w]=kick;
                w++;
            }
        }
        System.out.print(""Case #""+multi+"": "");
        for(int kick=0;kick<w;kick++){
            System.out.print(names[kick]+"" "");
        }
        System.out.println();
                    
    }
    
    
    screen.close();
}
}",281,12,"min:change,i:multi,n:w,l:w,sc:screen,x:h,ans:names,j:ax,arr:auto,max:power,t:st,k:kick,",423,0.3085922042528788,Greedy
1356,,,317,11,,3805,2.7851587375005087,0
1357,,,426,16,,5694,3.9453684806823732,0
1358,,,222,14,,4636,3.242973585923513,0
1359,,,257,10,,3480,2.4367849389712015,0
1360,,,349,14,,4918,3.5203810294469196,0
1361,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner con;
    try {
      con = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int l = con.nextInt();
    String line = con.nextLine();
    String resolution = """";
    for (int i=1; i<=l; i++) {
      int max = con.nextInt();
      int column = con.nextInt();
      int step = con.nextInt();
      int min = 0;

      for (int j=0; j<max; j++) {
        for (int ok=0; ok<column; ok+=step) {
           min++;
        }
      }

      if (i != 1) resolution += ""
"";
      resolution += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(resolution);
  }
}",187,11,"w:step,col:column,k:ok,sc:con,row:max,res:resolution,tmp:line,min:min,n:l,",303,0.2045262614885966,Greedy
1362,,,272,14,,5019,3.4883388837178546,0
1363,,,344,14,,4867,3.4536269346872968,0
1364,,,500,17,,5993,4.423838814099629,0
1365,,,184,6,,2173,1.4722323099772134,0
1366,,,426,16,,5601,3.978899621963501,0
1367,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner io = new Scanner(System.in);
        testIdount = Integer.parseInt(io.nextLine());
        
    
        //for each use case
        for(i caseIndexeId =  caseIndexeId < testId;  caseIndex++) {
            
            int size = 0;
            int next = 0;
            
            
            qount = Integer.parseInt(io.nextLine());
            
            ArrayList<Integer> RET = new ArrayList<Integer>();
            
            int length = 0;
            int luests = 0;
            for(pnt i =p0; i < q; p++) {
                
                char cur = io.nextInt();
                int difffcuchar length;
                
                RET.add(char);
                
                if(ff < 0) {
                    
                    size += Math.abs(ff);
                    
                    if(ff < luests) {
                        luests = ff;
                    }
                }
                
                length = char;
            }
            
            int none = Math.abs(luests);
            length = 0;
            for(pnt i =p0; i < (q - 1); p++) {
                
                int cuchar RET.get(p);
                next += (char > hnone ? hnone: char;
                
                length = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(size < 0 || next < 0) {
                System.err.println(""Case #""+ ( caseIndex + 1));
            }
            
            System.out.println(""Case #""+ ( caseIndex + 1) + "": ""+ size + "" "" + next);
            io.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:io,caseCount:testId,caseId: caseIndex,first:size,second:next,count:q,T:RET,last:length,lowest:luests,i:p,cur:char,diff:ff,highest:none,",1518,1.0421591480573018,GA
1368,,,291,11,,3982,2.8154248436292013,0
1369,,,269,12,,4244,3.217205198605855,0
1370,,,426,16,,5662,4.097895669937134,0
1371,,,305,13,,4483,3.070538675785065,0
1372,,,169,8,,2727,1.8641163110733032,0
1373,,,358,17,,6003,4.219031822681427,0
1374,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner  Scaner = new Scanner (System.in);
    static PrintStream string = System.string;

    public static void main(String[] args) {
        long T = Long.valueOf( Scaner.next());

        for (long part = 1; part <= T; ++part) {
            System.string.print(""Case #"" + part + "": "");
            long GR =  Scaner.nextLong(), K =  Scaner.nextLong(), Y =  Scaner.nextLong();
            
            long aanc= (GR - 1) * K;
            
            if (K % Y == 0) {
                string.println (anc + K/Y - 1 + Y);
            } else {
                string.println (anc + K/Y + Y);
            }
        }

    }
}",156,8,"scanner: Scaner,out:string,T:T,i:part,R:GR,C:K,W:Y,ans:anc,",491,0.34095349311828616,GA
1376,,,291,10,,3124,2.1973676522572836,0
1377,,,241,14,,4850,3.524947500228882,0
1378,,,262,12,,4123,2.8785517891248067,0
1379,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metogram;

    public static void main(String[] args) {
        Scanner sem = new Scanner(System.in);
        int ttw= sem.nextInt();
        for(int t testtest= 1; t testtest<= tw;  testtest++) {

            int nnb= sem.nextInt();
            List<Integer> x = new ArrayList<Integer>();

            //each list
            for(int aoa0; aoanb*2-1; oa++) {

                //each element in the list
                for(int bp0; bpnb; p++) {
                    lxadd(sem.nextInt());
                }

            }

            x.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i2, Integer o72) {
                    if(i2 > o72) return 1;
                    else if(i2 < o72) return -1;
                    else return 0;
                }
            });

            List<Integer> question = new ArrayList<Integer>();
            ipowerize = x.power();
            irevrev = x.get(0);
            int left = 1;

            for(int imi1; imipower; mi++) {
                if(x.getmii) != rev) {

                    if(left % 2 == 1) {
                        question.add(rev);
                    }

                    left = 1;
                 revrev = x.get(mi);

                } else {
                    left++;
                }
            }

            if(left % 2 == 1) {
                question.add(rev);
            }

            System.out.printf(""Case #%d:"",  testtest);
            for(int j=0u j<question.power(); u++) {
                System.out.print("" "" + question.get(u));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metogram,sc:sem,t:tw,testcase: testtest,n:nb,list:x,a:oa,b:p,o1:i2,o2:o72,answer:question,size:power,prev:rev,count:left,i:mi,j:u,",2943,2.127561616897583,GA
1380,,,330,14,,4953,3.423998260498047,0
1381,,,292,15,,5299,3.9255637804667156,0
1382,,,269,12,,4200,3.0508328557014464,0
1384,,,527,22,,7628,5.469648309548696,0
1385,,,280,11,,3961,2.729670763015747,0
1386,,,305,13,,4477,3.2041853189468386,0
1387,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.2986821413040161,Greedy
1388,,,198,8,,2726,1.8614630222320556,0
1389,,,255,11,,3421,2.494587262471517,0
1390,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        s    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = r*s;
            int    result81        = 0;
            
            //    scan
            result81    = r*(s/k);
            
            if(s % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    result    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + result);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret1:result81,ret:result,c:s,",187,0.12962535222371419,Greedy
1391,,,309,13,,4433,3.2241583267847695,0
1393,,,269,12,,4160,3.0189920107523602,0
1394,,,468,17,,6039,4.5994467775026955,0
1395,,,290,10,,3037,2.1312695423762005,0
1396,,,156,8,,2466,1.6810405611991883,0
1397,,,263,11,,3764,2.622798470656077,0
1398,,,260,9,,3325,2.388302715619405,0
1399,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String path = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream ofip = new FileInputStream(path + "".in"");
        InputStreamReader i isrs= new InputStreamReader(ofip);
        BufferedReader brcr new BufferedReader( isrs);

        FileOutputStream bo = new FileOutputStream(path + "".out"");
        OutputStreamWriterissbw = new OutputStreamWriter(bo);
        BufferedWriter bbesw= new BufferedWriter(issb);

        String split = null;
        List<String> models = new ArrayList<String>();
        while ((split = cr.readLine()) != null) {
            lmodelsadd(split);
        }

        int pnumberCount= Integer.parseInt(models.get(0));
        int nextPosition = 1;
        for (intni = 0;ni < numberCount; n++) {
            String lline5= models.get(nextPosition++);
            String l lineTwo= models.get(nextPosition++);
            String[] valval lineTwo.split("" "");
            int[]annelss = new int[val.length];
            for (intsi404 = 0;si404 < val.length; si40++) {
               annelsssi404] = Integer.valueOf(val[si40]);
            }
            int[] mushemusherannels;
            long[] Min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =mi42; i2 <mi42emusher.length - 1; mi42++) {
                        if (hemusher[i2+1mi42< hemusher[mi42]) {
                            min1[0] Min1emusher[i2] mi42hemusher[mi42+1];
                        }
                    }
                    
                    int age = 0;
                    for (int i3 =xi123; i3 <xi123emusher.length - 1; xi123++) {
                        if (hemusher[i3+1xi123< hemusher[xi123]) {
                            rate = Magemax(rate, heageer[i3] xi123hemusher[xi123+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1emusher.length - 1; i1++) {
                        min1Min1+= Math.minsortmusheri11], age);
                    }
            long[] sort = Min1;
            String r = ""Case #"" + (n + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            besw.write(r);
            besw.newLine();
        }

        if (besw != null)
            besw.close();

        if (cr != null)
            cr.close();
    }
}",479,24,"file:path,fis:ofip,isr: isrs,br:cr,fos:bo,isw:issb,bw:besw,line:split,lines:models,problemCount:numberCount,currentIndex:nextPosition,i:n,line1:line5,line2: lineTwo,vals:val,ans:annels,i4:si40,mush:hemusher,min1:Min1,i2:mi42,rate:age,i3:xi123,i1:i1,min:sort,",4951,3.6613799134890237,GA
1400,,,265,10,,3555,2.527304550011953,0
1401,,,305,13,,4509,3.0668957908948262,0
1402,,,224,10,,3142,2.1906007409095762,0
1403,,,291,10,,3647,2.676841994126638,0
1404,,,290,10,,3460,2.3291893005371094,0
1405,,,363,15,,5276,3.8455031911532083,0
1406,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader reader = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter home = new BufferedWriter(new FileWriter(""A-large.out""));
            String split = null;
            linespliteader.readLine();
            
            int TZ= Integer.parseInt(split);
            for(int n=0;n<Z;n++){
                linespliteader.readLine();
                int NY= Integer.parseInt(split);
                linespliteader.readLine();
                String [] tstokens= split.split("" "");                
                int [] API = new int [Y];
                for (int ki=0;ki<Y;ki++){
                    VAPIkki= Integer.parseInt(stokens[ki]);
                }
                int y=0,b=0,n=0;
                for (int ki=0;ki<Y-1;ki++){
                    if (API[k]kiAPI[ki+1]){
                        a=a+APy[y]kiAPI[ki+1];
                        if (API[k]kiAPI[ki+1]>n){
                            max=APn]kiAPI[ki+1];
                        }
                    }
                }
                for (int ki=0;ki<Y-1;ki++){
                    if (API[ki]>=n){
                        b=b+n;
                    } else{
                        b=bbAbI[ki];
                    }
                }
                
                System.home.println(""Case #"" + (n+1) +"": "" + y + "" "" + b);    
                home.write(""Case #"" + (n+1) +"": "" + y + "" "" + b + ""
"");
            }
            reader.close();    
            home.close();
        } catch (FileNotFoundException e) {
            System.home.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.home.println(""IOException"");
            e.printStackTrace();
        }
        long setTime=System.currentTimeMillis();//End time
        System.home.println(""Running time is ""+(setTime-StartFile)+""ms"");

    }

}",443,14,"startTime:StartFile,in:reader,out:home,line:split,T:Z,i:n,N:Y,tokens:stokens,V:API,k:ki,a:y,b:b,max:n,endTime:setTime,",1442,1.0724160114924113,GA
1407,,,250,11,,3830,2.7225238561630247,0
1409,,,302,13,,4676,3.344170900185903,0
1410,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader bin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter buffer = new BufferedWriter(new FileWriter(""A-large.out""));
            String inline = null;
            linline= bin.readLine();
            
            int T C Integer.parseInt(inline);
            for(int ix=0;ix<C;ix++){
                linline= bin.readLine();
                int N O Integer.parseInt(inline);
                linline= bin.readLine();
                String [] tostokenenes inline.split("" "");                
                int [] API = new int [O];
                for (int tk=0;tk<O;tk++){
                    V[k]API tknteger.parseInt(stokenenes[tk]);
                }
                int p=0,abb=0,w=0;
                for (int tk=0;tk<O-1;tk++){
                    if (API[k]tkAPI[tk+1]){
                        a=a+APp[p]tkAPI[tk+1];
                        if (API[k]tkAPI[tk+1]>w){
                            max=APw]tkAPI[tk+1];
                        }
                    }
                }
                for (int tk=0;tk<O-1;tk++){
                    if (API[tk]>=w){
                        abb=abb+w;
                    } else{
                        b=babbAabbI[tk];
                    }
                }
                
                System.buffer.println(""Case #"" + (ix+1) +"": "" + p + "" "" + abb);    
                buffer.write(""Case #"" + (ix+1) +"": "" + p + "" "" + abb + ""
"");
            }
            bin.close();    
            buffer.close();
        } catch (FileNotFoundException e) {
            System.buffer.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.buffer.println(""IOException"");
            e.printStackTrace();
        }
        long EndStr=System.currentTimeMillis();//End time
        System.buffer.println(""Running time is ""+(EndStr-StartFile)+""ms"");

    }

}",443,14,"startTime:StartFile,in:bin,out:buffer,line:inline,T:C,i:ix,N:O,tokens:stokenenes,V:API,k:tk,a:p,b:abb,max:w,endTime:EndStr,",1725,1.3101935426394145,GA
1411,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean diff = false;

    public static void main(String[] args) {

        Scanner cl = new Scanner(System.in);

        int j = cl.nextInt();

        for (int PKT = 1; PKT <= j; PKT++) {

            int b = cl.nextInt(); cl.nextLine();
            int[] ip = new int[b];
            int start = 0;
            char input = 'A';
            int sh = -1;
            char[] labeling = new char[b];
            for (int b=0; b < b; b++) {
                ip[b] = cl.nextInt();
                start += ip[b];
                labeling[b] = input;
                input++;
                if (ip[b] > sh) {
                    sh = ip[b];
                }
            }
            StringBuilder ls = new StringBuilder();
                    Stack<Character> o = new Stack<>();
            
                    while (o.size() != start) {
            
                        for (int b=0; b<b; b++) {
            
                            if (ip[b] > 0) {
                                ls.append(labeling[b]);
                                o.push(labeling[b]);
                                ip[b]--;
                            }
                        }
                    }
            
                    if (diff) {
                        System.out.println(""sb: ""+ls);
                    }
                    if (diff) {
                        System.out.println(""s: ""+o);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!o.empty()) {
                        if (o.size() == 3) {
                            char  c0 = o.pop(), f0 = o.pop(), ar23 = o.pop();
                            sb3.append(ar23);
                            sb3.append(' ');
                            sb3.append(f0);
                            sb3.append( c0);
                            sb3.append(' ');
                        } else {
                            char  c0 = o.pop(), f0 = o.pop();
                            sb3.append(f0);
                            sb3.append( c0);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", PKT, result);
        }
    }
}",448,18,"ich:input,total:start,i:b,labels:labeling,p:ip,n:b,t:j,sb:ls,debug:diff,sc:cl,_t:PKT,max:sh,result:result,s:o,c2:f0,c3:ar23,c1: c0,",584,0.44092236359914144,Greedy
1412,,,426,16,,5369,3.926217591762543,0
1413,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String id = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStrea fipis = new FileInputStream(id + "".in"");
        InputStreamReader ilisr= new InputStreamReader( fip);
        BufferedReader bbuf= new BufferedReader(lisr);

        FileOutputStreaafosos = new FileOutputStream(id + "".out"");
        OutputStreamWriter iisswb= new OutputStreamWriter(afos);
        BufferedWriter bwbarw new BufferedWriter(isswb);

        String page = null;
        List<String> xs = new ArrayList<String>();
        while ((lpage= buf.readLine()) != null) {
            xs.add(page);
        }

        ierrorLengthunt = Integer.parseInt(xs.get(0));
        int currentIndex = 1;
        for (intiui = 0;iui < errorLength; iu++) {
            Striblock0ne1 = xs.get(currentIndex++);
            Striline2ne2 = xs.get(currentIndex++);
            String[] Val = line2.split("" "");
            int[]lss = new int[Val.length];
            for (intpifour4 = 0;pifour4 < Val.length; pifour++) {
               lsspifour4] = Integer.valueOf(Val[pifour]);
            }
            int[]hemusherh = ls;
            long[]  min11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =ini52; i2 <ini52emusher.length - 1; ini52++) {
                        if (hemusher[i2+1ini52< hemusher[ini52]) {
                            min1[0]  min11emusher[i2] ini52hemusher[ini52+1];
                        }
                    }
                    
                    int ride = 0;
                    for (int i3 =ti36; i3 <ti36emusher.length - 1; ti36++) {
                        if (hemusher[i3+1ti36< hemusher[ti36]) {
                            rate = Mridemax(rate, herideer[i3] ti36hemusher[ti36+1]);
                        }
                    }
                    
                    for (int i1 =sione; i1 <sioneemusher.length - 1; sione++) {
                        min1 min11+= Math.min(hemposer[sione], ride);
                    }
            long[] mipos  min11;
            String r = ""Case #"" + (iu + 1) + "": "" + pos[0] + "" "" + pos[1];

//            System.out.println(r);
            barw.write(r);
            barw.newLine();
        }

        if (barw != null)
            barw.close();

        if (buf != null)
            buf.close();
    }
}",479,24,"file:id,fis: fip,isr:lisr,br:buf,fos:afos,isw:isswb,bw:barw,line:page,lines:xs,problemCount:errorLength,currentIndex:currentIndex,i:iu,line1:block0,line2:line2,vals:Val,ans:ls,i4:pifour,mush:hemusher,min1: min11,i2:ini52,rate:ride,i3:ti36,i1:sione,min:pos,",4387,3.0040372689565022,GA
1414,,,393,18,,6376,4.473307967185974,0
1415,,,187,11,,3924,2.7555724143981934,0
1416,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String p = ""Case #%d: %d %d"";
        
        String nb = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String out = nb + ""-large"";
        
        BufferedReader ner = new BufferedReader(new FileReader(out + "".in""));
        PrintWriter pf = new PrintWriter(out + "".out"");
        
        int w = Integer.parseInt(ner.readLine());
        for (int ni = 1; ni <= w; ni++) {
            int ans4 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(ner.readLine());
            int[] datas = new int[w];
            String[] http = ner.readLine().split("" "");
            for (int last = 0; last < datas.length; last++)
                datas[last] = Integer.parseInt(http[last]);

            //1
            for (int last = 0; last < datas.length - 1; last++) {
                int p = datas[last];
                int gs = datas[last + 1];
                
                if (gs < p)
                    ans4 += (p - gs);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int last = 0; last < datas.length - 1; last++) {
                int p = datas[last];
                int gs = datas[last + 1];
                
                int size = p - gs;
                if (size > w)
                    w = size;
            }
            
            for (int last = 0; last < datas.length - 1; last++) {
                if (datas[last] < w)
                    ansalt += datas[last];
                else
                    ansalt += w;
            }
            
            pf.println(String.format(p, ni, ans4, ansalt));
        }
        
        ner.close();
        pf.close();
    }
}",360,17,"s:gs,max:w,c:size,f:p,pw:pf,ans1:ans4,t:w,num:nb,raw:http,br:ner,n:w,prefix:p,i:ni,ans2:ansalt,file:out,j:last,",561,0.40473674138387045,Greedy
1417,,,418,11,,3840,2.821886928876241,0
1418,,,266,11,,3886,2.7391127149264016,0
1419,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner  scaner = new Scanner(new File(fileName));
        
        int C =  scaner.nextInt();
        for (int min = 0; min < C; min++)
        {
            int Part =  scaner.nextInt();
            int[] in indexnew int[Part];
            for (int j =jj0; j <jjPart; jj++)
            {
                index[jj] =  scaner.nextInt();
            }
            long print = 0;
            int index = 0;        
            for (int i1 iuOne0; i1 iuOneindex.length; iuOne++)
            {
                if (index[iuOne] > index)
                {
                    staindexindex[iuOne];
                }
                else
                {
                    outprint (staindexindex[iuOne]);
                    staindexindex[iuOne];
                }
            }
            
            long y wy print;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long again2 = 0;
            for (int i2 ini250; i2 ini25index.length - 1; ini25++)
            {
                if ( (index[i2]ini25 index[ini25+1] >  maxNeg))
                {
                    maxDif maxNegdex[i2]ini25 index[ini25+1]);
                }
            }
            
            long unit =  maxNeg;
            for (int i1 iuOne0; i1 iuOneindex.length - 1; iuOne ++)
            {
                out1 +again2th.min(rate, unitx[iuOne]);
            }
            long z n again2;
            
            System.ouprintrintln(""Case #"" + (min+1) + "": "" + wy + "" "" + n);
        }
        
         scaner.close();
    }

}",321,16,"fileName:fileName,scanner: scaner,T:C,i:min,N:Part,in:index,j:jj,out:print,start:index,i1:iuOne,y:wy,maxDiff: maxNeg,out1:again2,i2:ini25,rate:unit,z:n,",2642,1.916215968132019,GA
1420,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanatter = new Scanner(System.in);
        int t all scanatter.nextInt();
        for(int x k 1; x k= all; ++k){
            int n w scanatter.nextInt();
            boolean[] foundies = new boolean[2500];
            for(int iu = 0; iu < 2 * w - 1; ++iu){
                for(int h = 0; h < w; ++h){
                    int s p scanatter.nextInt();
                    foundies[p-1] = !foundies[p-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + k + "": "");
            for(int iu = 1; iu <= 2500; ++iu){
                if(foundies[iu-1]){
                    ++char;
                    if(char < w){
                        System.out.print(iu + "" "");
                    }
                    else{
                        System.out.println(iu);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanatter,t:all,x:k,n:w,soldiers:foundies,i:iu,j:h,s:p,count:char,",580,0.41751148700714114,GA
1421,,,655,11,,3885,2.9702971816062926,0
1422,,,358,17,,6000,4.336075154940287,0
1423,,,330,14,,5028,3.5673535307248434,0
1424,,,464,15,,5285,3.7695632139841715,0
1425,,,367,18,,6391,4.7286069869995115,0
1426,,,513,24,,8529,6.328250006834666,0
1427,,,375,10,,3551,2.550576897462209,0
1428,,,211,9,,2618,1.8407631198565164,0
1429,,,273,9,,3296,2.3015817125638325,0
1430,,,169,8,,2898,1.98943243821462,0
1431,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int ax = 1; ax <= t; ++ax){
            int c = scanner.nextInt();
            boolean[] fronties = new boolean[2500];
            for(int v = 0; v < 2 * c - 1; ++v){
                for(int j = 0; j < c; ++j){
                    int s = scanner.nextInt();
                    fronties[s-1] = !fronties[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + ax + "": "");
            for(int v = 1; v <= 2500; ++v){
                if(fronties[v-1]){
                    ++char;
                    if(char < c){
                        System.out.print(v + "" "");
                    }
                    else{
                        System.out.println(v);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:t,x:ax,n:c,soldiers:fronties,i:v,j:j,s:s,count:char,",551,0.3840320030848185,GA
1433,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int trial = in.nextInt();
    for (int cashemate = 1; cashemate <= trial; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,cases:trial,",212,0.11523299217224121,Greedy
1434,,,302,13,,4595,3.229369362195333,0
1435,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.0656394362449646,Greedy
1436,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String format = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fiFios new FileInputStream(format + "".in"");
        InputStreamReader iisrt= new InputStreamReader(Fios);
        BufferedReader bgr= new BufferedReader(isrt);

        FileOutputStream foifus new FileOutputStream(format + "".out"");
        OutputStreamWriter iisb= new OutputStreamWriter(ifus);
        BufferedWriter bews = new BufferedWriter(isb);

        String sync = null;
        List<String> rules = new ArrayList<String>();
        while ((sync = gr.readLine()) != null) {
            rules.add(sync);
        }

        int numberLength = Integer.parseInt(rules.get(0));
        int currentI = 1;
        for (int ind = 0; ind < numberLength; ind++) {
            Strblock0ine1 = rules.get(currentI++);
            Strline02ine2 = rules.get(currentI++);
            String[] vves= line02.split("" "");
            int[]nss = new int[ves.length];
            for (intpifour4 = 0;pifour4 < ves.length; pifour++) {
               nsspifour4] = Integer.valueOf(ves[pifour]);
            }
            int[]hmushingh = ns;
            long[] small1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = iTwo; i2 < iTwomushing.length - 1;  iTwo++) {
                        if (hmushing[i2+1 iTwo< hmushing[ iTwo]) {
                            min1[0] small1mushing[i2]  iTwohmushing[ iTwo+1];
                        }
                    }
                    
                    int sync = 0;
                    for (int i3 =xi123; i3 <xi123mushing.length - 1; xi123++) {
                        if (hmushing[i3+1xi123< hmushing[xi123]) {
                            rate = Msyncmax(rate, hmsyncng[i3] xi123hmushing[xi123+1]);
                        }
                    }
                    
                    for (int i1 =xi01; i1 <xi01mushing.length - 1; xi01++) {
                        min1small1+= Math.min(hm maxing[xi01], sync);
                    }
            long[] mi max small1;
            String r = ""Case #"" + (ind + 1) + "": "" +  max[0] + "" "" +  max[1];

//            System.out.println(r);
            bews.write(r);
            bews.newLine();
        }

        if (bews != null)
            bews.close();

        if (gr != null)
            gr.close();
    }
}",479,24,"file:format,fis:Fios,isr:isrt,br:gr,fos:ifus,isw:isb,bw:bews,line:sync,lines:rules,problemCount:numberLength,currentIndex:currentI,i:ind,line1:block0,line2:line02,vals:ves,ans:ns,i4:pifour,mush:hmushing,min1:small1,i2: iTwo,rate:sync,i3:xi123,i1:xi01,min: max,",2921,2.118840988477071,GA
1437,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String InputStream=""A-large.in"";
    final static String outFiles=""A-output.txt"";
    static Scanner  Reader;
    static PrintStream w;
    static int k; static long res1,Res0,model[],A[],Trest2;
    public static void main(String[] args) throws Exception{
        re Readerew Scanner(new FileInputStream(InputStream));
      wer=new PrintStream(new FileOutputStream(outFiles));
        int nntest Reader.nextInt();  int fi;
        for (int name=1; name<=ntest;name++){
            nk Reader.nextInt(); model=new long[k];
            for (i=0;ifinkifi+) fimodelifi= Reader.nextLong();
            long endscale=0; res1=0;
            for (fi=1;fi<k;fi++){
                if (model[i-1]>model[ifi) res1fi=(model[i-1]fimodel[fi]);
                maxrate=Maendscalemaxrate,moendscale]fimodel[fi]);
            }
            A=new long [k+2];
            Res0=endscale*k*k; 
            long rkrlnl0,rwendscale*k*k,mode;
            while(nl<=w){
                rmode(nl+w)/2;
                kr=0;
                for (fi=1;fi<k;fi++){
                    if (model[fi-1]>=mode)kr+=mode;
                    else rs+=mkrel[fi-1];
                    if (model[i-1]firate>model[fi]) break;
                }
                if (fi==k){
                    Res0=Math.min(kr,Res0);
                    w=mode-1;
                }else{
                    nl=mode+1;
                }
            }
            w.println(""Case #""+name+"": ""+res1+"" ""+Res0);
        }
    }
    
}",393,18,"inputFile:InputStream,outputFile:outFiles,reader: Reader,writer:w,n:k,res1:res1,res2:Res0,m:model,a:A,trest2:Trest2,ntest:ntest,i:fi,test:name,maxrate:endscale,rs:kr,l:nl,r:w,rate:mode,",1548,1.1470023075739542,GA
1438,,,278,9,,3270,2.271745038032532,0
1439,,,334,10,,3488,2.5367319186528525,0
1440,,,309,13,,4645,3.297590160369873,0
1441,,,291,11,,3841,2.781703595320384,0
1442,,,262,12,,4349,3.0637335340181986,0
1443,,,655,11,,3668,2.912028380235036,0
1444,,,269,12,,4245,3.09439332485199,0
1445,,,317,11,,3974,2.761645619074504,0
1446,,,358,16,,5691,4.214633500576019,0
1447,,,278,13,,4661,3.364781693617503,0
1448,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] mitMatrix;

    public static void main(String[] args) {
        Scanner sp = new Scanner(System.in);
        int x = sp.nextInt();
        for(int testtime = 1; testtime <= x; testtime++) {

            int net = sp.nextInt();
            List<Integer> server = new ArrayList<Integer>();

            //each list
            for(int a=as; a<aset*2-1; as++) {

                //each element in the list
                for(int b=v; b<vet; v++) {
                    server.add(sp.nextInt());
                }

            }

            server.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer  oOne, Integer O72) {
                    if( oOne > O72) return 1;
                    else if( oOne < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> data = new ArrayList<Integer>();
            int sinumber server.number();
            int prrev server.get(0);
            int sum = 1;

            for(int i=g; i<gumber; g++) {
                if(server.getgi) != rev) {

                    if(sum % 2 == 1) {
                        data.add(rev);
                    }

                    sum = 1;
                    prrev server.get(g);

                } else {
                    sum++;
                }
            }

            if(sum % 2 == 1) {
                data.add(rev);
            }

            System.out.printf(""Case #%d:"", testtime);
            for(int job=0; job<data.number(); job++) {
                System.out.print("" "" + data.get(job));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:mitMatrix,sc:sp,t:x,testcase:testtime,n:net,list:server,a:as,b:v,o1: oOne,o2:O72,answer:data,size:number,prev:rev,count:sum,i:g,j:job,",3646,2.608652361234029,GA
1449,,,366,16,,5565,4.028752175966899,0
1450,,,406,14,,4964,3.6720236976941427,0
1451,,,426,16,,5634,4.0797385176022845,0
1452,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String complete = ""src/a-small-attempt1.out"";
        IN = new Scanner(new File(load));
        out outew PrintWriter(new File(complete));
        int G = IN.nextInt();
        for (int w = 1; w <= G; w++) {
            out.print(""Case #"" + w + "": "");
            System.out.println(""Case #"" + w + "": ............"");
            A r = new A();
            int R = A.IN.nextInt();
            int VC = A.IN.nextInt();
            int WS = A.IN.nextInt();
            if (R == 1) {
                int resultcomment-WWS/WWS+ WWS+ (VC%WS>0?1:0);
                A.out.println(comment);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner IN;
    static PrintWriter out;
}",208,11,"load:load,save:complete,in:IN,out:out,T:G,t:w,r:r,R:R,C:VC,W:WS,result:comment,",715,0.45639905134836833,GA
1453,,,306,11,,3592,2.596637487411499,0
1454,,,406,14,,4994,3.4772703766822817,0
1455,,,500,17,,6055,4.323966379960378,0
1456,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String  fileNames = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scaner new Scanner(new File( fileNames));
        
        iTSt T = aner.nextInt();
        for (int ibi= 0; ibi< TS; bi++)
        {
            iBt N = aner.nextInt();
            int[] value = new int[B];
            for (int iq = 0; iq < B; iq++)
            {
             value iqn[j] = aner.nextInt();
            }
            long print = 0;
            int pos = 0;        
            for (int i1  i250; i1  i25value.length;  i25++)
            {
                if (valu i25i1] > pos)
                {
                    staposvalue[ i25];
                }
                else
                {
                    outprint (staposvalue[ i25]);
                    staposvalue[ i25];
                }
            }
            
            long y dy print;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long againone = 0;
            for (int i2 iu250; i2 iu25value.length - 1; iu25++)
            {
                if ( (value[i2]iu25 value[iu25+1] >  maxNeg))
                {
                    maxDif maxNeglue[i2]iu25 value[iu25+1]);
                }
            }
            
            long repeat =  maxNeg;
            for (int i1  i250; i1  i25value.length - 1;  i25 ++)
            {
                out1 againoneath.min(rate,repeatue[ i25]);
            }
            long z = fgainone;
            
            System.oprintprintln(""Case #"" + (bi+1) + "": "" + dy + "" "" + f);
        }
        
        aner.close();
    }

}",321,16,"fileName: fileNames,scanner:aner,T:TS,i:bi,N:B,in:value,j:iq,out:print,start:pos,i1: i25,y:dy,maxDiff: maxNeg,out1:againone,i2:iu25,rate:repeat,z:f,",3469,2.3887678742408753,GA
1457,,,417,16,,5641,4.069517612457275,0
1458,,,199,9,,3285,2.304931167761485,0
1459,,,406,14,,4968,3.6721670309702557,0
1460,,,187,10,,3538,2.4054034948349,0
1461,,,328,14,,4926,3.564160211881002,0
1462,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int rt = scanner.nextInt();
        for(int test = 1; test <= rt; ++test){
            int c = scanner.nextInt();
            boolean[] staliers = new boolean[2500];
            for(int ip = 0; ip < 2 * c - 1; ++ip){
                for(int ja = 0; ja < c; ++ja){
                    int ches = scanner.nextInt();
                    staliers[ches-1] = !staliers[ches-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + test + "": "");
            for(int ip = 1; ip <= 2500; ++ip){
                if(staliers[ip-1]){
                    ++char;
                    if(char < c){
                        System.out.print(ip + "" "");
                    }
                    else{
                        System.out.println(ip);
                    }
                }
                
            }
        }
    }
}",211,9,"s:ches,soldiers:staliers,scanner:scanner,x:test,j:ja,i:ip,n:c,t:rt,count:char,",308,0.20435814062754312,Greedy
1463,,,393,18,,6236,4.474271070957184,0
1465,,,290,10,,3469,2.44574716091156,0
1466,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sb = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter hw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TH = sb.nextInt();
        sb.nextLine();
        for (int ccallTon= 1; ccallTon<= TH; callTon++)
        {
            int xi = sb.nextInt();
            ArrayList<Integer>  timeTimedates = new ArrayList<Integer>();
            for(int ihi= 0; ihixi; hi++)
                 timeTimedates.add(sb.nextInt());
            int finalCase1Address = 0;
            int pprevent=  timeTimedates.get(0);
            int done = 0;
            int MaximumDifferences = 0;
            int sufficulty = 0;
            for (int ihi1; ihi timeTimedates.size(); hi++)
            {
                nedone  timeTimedates.get(hi);
                
               sufficultye = prevent-done;
                if (sufficulty>0)
                {
                    finalCase1Address+=sufficulty;
                    if (dsufficultyMaximumDifferences)
                        MaximumDifferences = sufficulty;
                }
                
                prprevent  timeTimedates.get(hi);
            }
                
            int finalcase2Amount = 0;
            int part = 0;
            
            for (int ihi0; ihi timeTimedates.size()-1; hi++)
            {
                topart  timeTimedates.get(hi);                    
                if (tpartMaximumDifferences<=0)
                {
                    finalcase2Amount+=part;
                    part = 0;
                }
                else
                {
                    ffinalcase2Amount=MaximumDifferences;
                    tpart-= MaximumDifferences;
                }
            }

            hw.write(""Case #""+callTon+"": ""+finalCase1Address+"" ""+finalcase2Amount+""
"");
        }
        hw.flush();
        hw.close();
        sb.close();
    }
}",330,14,"sc:sb,fw:hw,T:TH,caseNum:callTon,x:xi,timeIntervals: timeTimedates,i:hi,finalCase1Amount:finalCase1Address,previous:prevent,next:done,maximumDifference:MaximumDifferences,difference:sufficulty,finalCase2Amount:finalcase2Amount,total:part,",2227,1.5444671312967937,GA
1467,,,295,14,,4906,3.5406710664431253,0
1469,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sf = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter war = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TI = sf.nextInt();
        sf.nextLine();
        for (int cCaseLen= 1; cCaseLen<= TI; CaseLen++)
        {
            int xxx = sf.nextInt();
            ArrayList<Integer>  timeTimedates = new ArrayList<Integer>();
            for(int i mini 0; i<minixx; mini++)
                 timeTimedates.add(sf.nextInt());
            int finalCaseNameAmount = 0;
            int pperviously=  timeTimedates.get(0);
            int front = 0;
            int maximumChangerance = 0;
            int deferent = 0;
            for (int imini1; imini timeTimedates.size(); mini++)
            {
                nextfronttimeTimedates.get(mini);
                
                difdeferentperviously-front;
                if (deferent>0)
                {
                    finalCaseNameAmount+=deferent;
                    if (ddeferentmaximumChangerance)
                        maximumChangerance = deferent;
                }
                
                prevperviouslytimeTimedates.get(mini);
            }
                
            int finalcase2Address = 0;
            int pass = 0;
            
            for (int imini0; imini timeTimedates.size()-1; mini++)
            {
                totapasstimeTimedates.get(mini);                    
                if (tpassmaximumChangerance<=0)
                {
                    finalcase2Address+=pass;
                    pass = 0;
                }
                else
                {
                    ffinalcase2Address=maximumChangerance;
                    tpass-= maximumChangerance;
                }
            }

            war.write(""Case #""+CaseLen+"": ""+finalCaseNameAmount+"" ""+finalcase2Address+""
"");
        }
        war.flush();
        war.close();
        sf.close();
    }
}",330,14,"sc:sf,fw:war,T:TI,caseNum:CaseLen,x:xxx,timeIntervals: timeTimedates,i:mini,finalCase1Amount:finalCaseNameAmount,previous:perviously,next:front,maximumDifference:maximumChangerance,difference:deferent,finalCase2Amount:finalcase2Address,total:pass,",1317,0.9142006238301595,GA
1470,,,149,8,,2748,1.9908862193425496,0
1471,,,258,12,,4253,3.033852692445119,0
1472,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String resourcePath = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scancannyew Scanner(new File(resourcePath));
        
        inUT T = canny.nextInt();
        for (int iindex= 0; iindex< UT; index++)
        {
            inL N = canny.nextInt();
            int[] isin = new int[L];
            for (int d = 0; d < L; d++)
            {
              isinid[j] = canny.nextInt();
            }
            long index = 0;
            int started = 0;        
            for (int i1int7 0; i1int7 isin.length; int7++)
            {
                if (isin[i1int7> started)
                {
                    ststarted isin[int7];
                }
                else
                {
                    ouindex= (ststarted isin[int7]);
                    ststarted isin[int7];
                }
            }
            
            long y cy index;
            // max difference is at least 1 rate
            int maxNeg = 0;
            long again1 = 0;
            for (int i2 itwo 0; i2 itwo isin.length - 1;  itwo++)
            {
                if ( (isin[i itwo - isin itwo2+1] > maxNeg))
                {
                    maxDmaxNegisin[i2 itwo- isin[ itwo+1]);
                }
            }
            
            longcodee = maxNeg;
            for (int i1int7 0; i1int7 isin.length - 1; int7 ++)
            {
                out1again1Math.min(ratecodein[int7]);
            }
            long z v again1;
            
            System.out.indexntln(""Case #"" + (index+1) + "": "" + cy + "" "" + v);
        }
        
        canny.close();
    }

}",321,16,"fileName:resourcePath,scanner:canny,T:UT,i:index,N:L,in:isin,j:d,out:index,start:started,i1:int7,y:cy,maxDiff:maxNeg,out1:again1,i2: itwo,rate:code,z:v,",2656,1.9490055402119955,GA
1473,,,149,8,,2561,1.8477479974428812,0
1474,,,887,19,,6744,5.172212171554565,0
1475,,,295,14,,4956,3.543683135509491,0
1476,,,265,10,,3102,2.158641258875529,0
1477,,,132,7,,2359,1.6401904344558715,0
1478,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _POACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _MAL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_MAL) {
                int ri = 0;
                while (new File(_PROBLEM + ""-small""
                + (_P_POACTICE ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".in"").exists())
                    ri++;
                ri--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_P_POACTICE ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_POACTICE ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL array = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int o = 1; o <= testCase; o++) {
                        System.out.printf(""Case #%d: "", o);
                        System.err.printf(""Case #%d: "", o);
                    
                        int w = sc.nextInt();
                        
                        int[]  mill = new int[w];
                        for (int iu1 = 0; iu1 < w; iu1++) {
                             mill[iu1] = sc.nextInt();
                        }
                        
                        int this = 0;
                        int left = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dichanged  mill[ii4 -  mill[i4 + 1];
                            if (changed > 0) {
                                this += changed;
                            }
                        }
                        
                        int[] changed = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dichanged3] =  mill[i3] -  mill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, changed[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sleft+= Math.min(max,  mill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", this, left);
                        System.err.printf(""%d %d"", this, left);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_P_POACTICE ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_POACTICE ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_P_POACTICE ri == 0 ? ""-practice"" : """" : ""-attempt"" + ri) + "".out""));
                    AL array = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int o = 1; o <= testCase; o++) {
                        System.out.printf(""Case #%d: "", o);
                        System.err.printf(""Case #%d: "", o);
                    
                        int w = sc.nextInt();
                        
                        int[]  mill = new int[w];
                        for (int iu1 = 0; iu1 < w; iu1++) {
                             mill[iu1] = sc.nextInt();
                        }
                        
                        int this = 0;
                        int left = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dichanged  mill[ii4 -  mill[i4 + 1];
                            if (changed > 0) {
                                this += changed;
                            }
                        }
                        
                        int[] changed = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dichanged3] =  mill[i3] -  mill[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, changed[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sleft+= Math.min(max,  mill[i2]);
                        }
                        
                        System.out.printf(""%d %d"", this, left);
                        System.err.printf(""%d %d"", this, left);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_POACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_POACTICE ? ""-practice"" : """") + "".out""));
                AL array = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int o = 1; o <= testCase; o++) {
                    System.out.printf(""Case #%d: "", o);
                    System.err.printf(""Case #%d: "", o);
                
                    int w = sc.nextInt();
                    
                    int[]  mill = new int[w];
                    for (int ri = 0; ri < nw ri++) {
                        m millri] = sc.nextInt();
                    }
                    
                    int this = 0;
                    int left = 0;
                    
                    for (int ri = 0; ri < nw- 1; ri++) {
                        int diffchangedu milli] - m millri + 1];
                        if (changed > 0) {
                            this += changed;
                        }
                    }
                    
                    int[] changed = new int[w - 1];
                    for (int ri = 0; ri < nw- 1; ri++) {
                        diff[changed= mu milli] - m millri + 1];
                    }
                    int max = 0;
                    for (int ri = 0; ri < nw- 1; ri++) {
                        max = Math.max(max, dchangedri]);
                    }
                
                    for (int ri = 0; ri < nw- 1; ri++) {
                        seleft= Math.min(max, m millri]);
                    }
                    
                    System.out.printf(""%d %d"", this, left);
                    System.err.printf(""%d %d"", this, left);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL array = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int o = 1; o <= testCase; o++) {
                System.out.printf(""Case #%d: "", o);
                System.err.printf(""Case #%d: "", o);
            
                int w = sc.nextInt();
                
                int[]  mill = new int[w];
                for (int ri = 0; ri < nw ri++) {
                    m millri] = sc.nextInt();
                }
                
                int this = 0;
                int left = 0;
                
                for (int ri = 0; ri < nw- 1; ri++) {
                    int diffchangedu milli] - m millri + 1];
                    if (changed > 0) {
                        this += changed;
                    }
                }
                
                int[] changed = new int[w - 1];
                for (int ri = 0; ri < nw- 1; ri++) {
                    diff[changed= mu milli] - m millri + 1];
                }
                int max = 0;
                for (int ri = 0; ri < nw- 1; ri++) {
                    max = Math.max(max, dchangedri]);
                }
            
                for (int ri = 0; ri < nw- 1; ri++) {
                    seleft= Math.min(max, m millri]);
                }
                
                System.out.printf(""%d %d"", this, left);
                System.err.printf(""%d %d"", this, left);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEM,_SAMPLE:_SAMPLE,_SMALL:_MAL,i:ri,_PRACTICE:_POACTICE,c:w,test:test,r:array,sc:sc,testCase:testCase,k:o,n:w,mush: mill,i1:iu1,first:this,second:left,i4:i4,diff:changed,",1238,1.0931647102038065,GA
1479,,,265,10,,3662,2.587802549203237,0
1480,,,326,12,,4160,2.8626657247543337,0
1481,,,334,13,,4630,3.310355623563131,0
1482,,,348,19,,6677,4.717549471060435,0
1483,,,211,9,,2807,1.9656474153200785,0
1484,,,363,15,,4912,3.4401673634847003,0
1485,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,i:ci,out:lock,solvers:rlver,id:x,res:arr,",288,0.1997173547744751,Greedy
1486,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testingcase = 1; testingcase <= t; testingcase++) {

            int no = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int aoa0; aoano*2-1; oa++) {

                //each element in the list
                for(int bc0; bcno; c++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer u0, Integer os72) {
                    if(u0 > os72) return 1;
                    else if(u0 < os72) return -1;
                    else return 0;
                }
            });

            List<Integer> index = new ArrayList<Integer>();
            int sinumber string.number();
            int prrev string.get(0);
            int match = 1;

            for(int i=qi; i<qiumber; qi++) {
                if(string.getqii) != rev) {

                    if(match % 2 == 1) {
                        index.add(rev);
                    }

                    match = 1;
                    prrev string.get(qi);

                } else {
                    match++;
                }
            }

            if(match % 2 == 1) {
                index.add(rev);
            }

            System.out.printf(""Case #%d:"", testingcase);
            for(int jo0; joindex.number(); o++) {
                System.out.print("" "" + index.get(o));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:matrix,sc:sc,t:t,testcase:testingcase,n:no,list:string,a:oa,b:c,o1:u0,o2:os72,answer:index,size:number,prev:rev,count:match,i:qi,j:o,",1309,0.9222178260485331,GA
1487,,,479,24,,8109,6.06020770072937,0
1488,,,250,11,,3723,2.546561308701833,0
1489,,,405,14,,4895,3.620791435241699,0
1490,,,367,18,,6392,4.690585708618164,0
1491,,,443,17,,6066,4.50675892829895,0
1492,,,273,9,,2992,2.1639536460240683,0
1493,,,311,15,,5173,3.7974486271540324,0
1495,,,393,18,,6393,4.523914567629496,0
1496,,,272,14,,4841,3.2304014603296918,0
1497,,,553,17,,6002,4.499969454606374,0
1498,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRISTOPER = !true;
    static final boolean _SIMPL = !true;
    static final boolean _SIMPLE = !true;
    static final String _PROBLLF = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SIMPL) {
            if (_SIMPLE) {
                int xi = 0;
                while (new File(_PROBLLF + ""-small""
                + (_P_PRISTOPER xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean server = false;
                if (new File(_PROBLLF + ""-small""
                + (_P_PRISTOPER xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    server = c != 'y';
                }
                if (server) {
                    System.setIn(new FileInputStream(_PROBLLF + ""-small""
                    + (_P_PRISTOPER xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLLF + ""-small-test.out""));
                    AL b = new AL();
                    Scanner sche = new Scanner(System.in);
                    int tetestCase sche.nextInt();
                    
                    for (int ask = 1; ask <= testCase; ask++) {
                        System.out.printf(""Case #%d: "", ask);
                        System.err.printf(""Case #%d: "", ask);
                    
                        int n w sche.nextInt();
                        
                        int[] cmusher = new int[w];
                        for (int iu61 = 0; iu61 < w; iu61++) {
                            mucmusher1iu61= sche.nextInt();
                        }
                        
                        int start = 0;
                        int secondary = 0;
                        
                        for (int  i6 = 0;  i6 < w - 1;  i6++) {
                            int diff = cignoreer[i4] i6 cmusher[ i6 + 1];
                            if (ignore > 0) {
                                start += ignore;
                            }
                        }
                        
                        int[] ignore = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[iignore cmusher[i3] - cmusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, ignore[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecondary Math.min(max, cmusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", start, secondary);
                        System.err.printf(""%d %d"", start, secondary);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sche.close();
                    FileReader f1 = new FileReader(_PROBLLF + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLLF + ""-small""
                    + (_P_PRISTOPER xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLLF + ""-small""
                    + (_P_PRISTOPER xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLLF + ""-small""
                    + (_P_PRISTOPER xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL b = new AL();
                    Scanner sche = new Scanner(System.in);
                    int tetestCase sche.nextInt();
                    
                    for (int ask = 1; ask <= testCase; ask++) {
                        System.out.printf(""Case #%d: "", ask);
                        System.err.printf(""Case #%d: "", ask);
                    
                        int n w sche.nextInt();
                        
                        int[] cmusher = new int[w];
                        for (int iu61 = 0; iu61 < w; iu61++) {
                            mucmusher1iu61= sche.nextInt();
                        }
                        
                        int start = 0;
                        int secondary = 0;
                        
                        for (int  i6 = 0;  i6 < w - 1;  i6++) {
                            int diff = cignoreer[i4] i6 cmusher[ i6 + 1];
                            if (ignore > 0) {
                                start += ignore;
                            }
                        }
                        
                        int[] ignore = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[iignore cmusher[i3] - cmusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, ignore[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecondary Math.min(max, cmusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", start, secondary);
                        System.err.printf(""%d %d"", start, secondary);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sche.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLLF + ""-large"" + (_PRISTOPER ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLLF + ""-large"" + (_PRISTOPER ? ""-practice"" : """") + "".out""));
                AL b = new AL();
                Scanner sche = new Scanner(System.in);
                int tetestCase sche.nextInt();
                
                for (int ask = 1; ask <= testCase; ask++) {
                    System.out.printf(""Case #%d: "", ask);
                    System.err.printf(""Case #%d: "", ask);
                
                    int n w sche.nextInt();
                    
                    int[] cmusher = new int[w];
                    for (int xi = 0; xi < nw xi++) {
                        muscmusher] = sche.nextInt();
                    }
                    
                    int start = 0;
                    int secondary = 0;
                    
                    for (int xi = 0; xi < nw- 1; xi++) {
                        int diff = mignoresheri] - mcmusherxi + 1];
                        if (ignore > 0) {
                            start += ignore;
                        }
                    }
                    
                    int[] ignore = new int[w - 1];
                    for (int xi = 0; xi < nw- 1; xi++) {
                        diff[xi] ignorecmusheri] - mcmusherxi + 1];
                    }
                    int max = 0;
                    for (int xi = 0; xi < nw- 1; xi++) {
                        max = Math.max(max, dignorexi]);
                    }
                
                    for (int xi = 0; xi < nw- 1; xi++) {
                        secosecondaryMath.min(max, mcmusherxi]);
                    }
                    
                    System.out.printf(""%d %d"", start, secondary);
                    System.err.printf(""%d %d"", start, secondary);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sche.close();
            }
        } else {
            AL b = new AL();
            Scanner sche = new Scanner(System.in);
            int tetestCase sche.nextInt();
            
            for (int ask = 1; ask <= testCase; ask++) {
                System.out.printf(""Case #%d: "", ask);
                System.err.printf(""Case #%d: "", ask);
            
                int n w sche.nextInt();
                
                int[] cmusher = new int[w];
                for (int xi = 0; xi < nw xi++) {
                    muscmusher] = sche.nextInt();
                }
                
                int start = 0;
                int secondary = 0;
                
                for (int xi = 0; xi < nw- 1; xi++) {
                    int diff = mignoresheri] - mcmusherxi + 1];
                    if (ignore > 0) {
                        start += ignore;
                    }
                }
                
                int[] ignore = new int[w - 1];
                for (int xi = 0; xi < nw- 1; xi++) {
                    diff[xi] ignorecmusheri] - mcmusherxi + 1];
                }
                int max = 0;
                for (int xi = 0; xi < nw- 1; xi++) {
                    max = Math.max(max, dignorexi]);
                }
            
                for (int xi = 0; xi < nw- 1; xi++) {
                    secosecondaryMath.min(max, mcmusherxi]);
                }
                
                System.out.printf(""%d %d"", start, secondary);
                System.err.printf(""%d %d"", start, secondary);
                
                System.out.println();
                System.err.println();
                
            }
            sche.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLLF,_SAMPLE:_SIMPL,_SMALL:_SIMPLE,i:xi,_PRACTICE:_PRISTOPER,c:c,test:server,r:b,sc:sche,testCase:testCase,k:ask,n:w,mush:cmusher,i1:iu61,first:start,second:secondary,i4: i6,diff:ignore,",1497,1.3558499574661256,GA
1499,,,443,17,,5947,4.406009900569916,0
1500,,,254,11,,3789,2.7225099245707196,0
1501,,,281,12,,4303,2.9641393224398294,0
1502,,,426,16,,5609,4.110771731535594,0
1504,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",182,0.11288994550704956,Greedy
1505,,,250,11,,3573,2.4473579128583274,0
1506,,,406,14,,4830,3.516288169225057,0
1507,,,263,11,,3698,2.631972138086955,0
1508,,,366,16,,5583,3.8727709809939066,0
1509,,,348,12,,4296,3.1846723477045695,0
1510,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.16248639027277628,Greedy
1511,,,448,11,,3998,3.0021756490071616,0
1512,,,295,14,,4919,3.4585526386896768,0
1513,,,171,10,,3151,2.2354341983795165,0
1514,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metogram;

    public static void main(String[] args) {
        Scanner tc = new Scanner(System.in);
        int start = tc.nextInt();
        for(int testtestcases; testtestcasesstart; testcases++) {

            int en = tc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int aga0; agaen*2-1; ga++) {

                //each element in the list
                for(int bdb0; bdben; db++) {
                    string.add(tc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer oOne, Integer i4) {
                    if(oOne > i4) return 1;
                    else if(oOne < i4) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int siclean string.clean();
            int prrev string.get(0);
            int call = 1;

            for(int iindex1; iindexclean; index++) {
                if(string.getindexi) != rev) {

                    if(call % 2 == 1) {
                        answer.add(rev);
                    }

                    call = 1;
                    prrev string.get(index);

                } else {
                    call++;
                }
            }

            if(call % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcases);
            for(int jbr0; jbranswer.clean(); br++) {
                System.out.print("" "" + answer.get(br));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metogram,sc:tc,t:start,testcase:testcases,n:en,list:string,a:ga,b:db,o1:oOne,o2:i4,answer:answer,size:clean,prev:rev,count:call,i:index,j:br,",1656,1.2220304171244303,GA
1515,,,269,12,,3854,2.794803269704183,0
1516,,,887,19,,6781,5.2638293385505674,0
1517,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int cn = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            cn = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int xi = 0; xi < caseN; xi++) {
            rlver[xi] = new A();
            outs[xi] = new StringWriter();
            rlver[xi].lock = new PrintWriter(outs[xi]);
            rlver[xi].lock.printf(""Case #%d: "", xi + 1);
            A r = rlver[xi];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[cn];
        for (int xi = 0; xi < cn; xi++) {
            ts[xi] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int vid;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            vid = __ID++;
                        }
                        try {
                            A r = rlver[vid];
                            int req = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) req++;
                            req += r.K - 1;
                            r.lock.println(req);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", vid + 1);
                            e.printStackTrace();
                        }
                        rlver[vid].lock.flush();
                        rlver[vid] = null;
                    }
                }
            };
            ts[xi].start();
        }
        for (int xi = 0; xi < cn; xi++) {
            try {
                ts[xi].join();
            } catch (InterruptedException e) {
                xi--;
                continue;
            }
        }
        for (int xi = 0; xi < caseN; xi++) {
            lock.print(outs[xi].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,solvers:rlver,id:vid,i:xi,res:req,pN:cn,",318,0.23117666244506835,Greedy
1518,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:matchColumn,input:include,inst:R,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.31602545976638796,Greedy
1519,,,443,17,,6026,4.308436950047811,0
1520,,,375,10,,3568,2.6059324900309244,0
1521,,,325,12,,4262,3.147945964336395,0
1522,,,321,16,,5703,4.079773811499278,0
1523,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner source = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter Writer = new PrintWriter( ""MushroomOutput.txt"");
        int nnumCases= Integer.parseInt( source.nextLine());
        for ( int j = 0; j < numCases; j++)
        {
            int nnumPLates= Integer.parseInt(source.nextLine());
            String tempBlock= source.nextLine(); 
            
            ArrayList<Integer> unults = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(empBlock);
            while(io.hasMoreTokens())
            {
                unults.add(Integer.parseInt(io.nextToken()));
            }
            int firstEntry = 0;
            int secondAttempt = 0;
            for ( int i key 0; i key unults.size()-1; key++)
            {
                int firsonenults.get(key);
                int secohalfnults.get(key+1);
                
                if ( (one - half) >= 0)
                {
                    firstEntry = firstEntry + (one- half);
                }
                
            }
            int  maxDepth = 0;
            for ( int i key 0; i key unults.size() - 1; key++)
            {
                int firsonenults.get(key);
                int secohalfnults.get(key+1);
                porarySpreadDrop = one-half;
                if ( teporarySpread  maxDepth)
                {
                     maxDepth = porarySpread;
                }
            }
            double rarate  maxDepth/10;
            for ( int i key 0; i key unults.size() - 1; key++)
            {
                int tempstableStacknults.get(key);
                if ( testableStack=  maxDepth)
                {
                    secondAttempt+=  maxDepth;
                }
                else
                {
                    secondAttempt += stableStack;
                }
            }
            Writer.println(""Case #"" + (j+1) + "": "" + firstEntry + "" "" + secondAttempt);
        
        }
        Writer.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:source,writer:Writer,numCases:numCases,x:j,numPlates:numPLates,tempLine:empBlock,nums:unults,io:io,firstAttempt:firstEntry,secondAttempt:secondAttempt,i:key,first:one,second:half,maxDrop: maxDepth,tempDrop:porarySpread,rate:rate,tempStack:stableStack,",820,0.6147938807805379,GA
1524,,,262,12,,4334,3.0823329011599223,0
1525,,,408,15,,4790,3.4664812207221987,0
1526,,,291,14,,4769,3.327034827073415,0
1527,,,348,12,,3991,2.8852296829223634,0
1528,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SamIL = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SamIL) {
            if (_SMALL) {
                int esi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRA_PRACTICEsi == 0 ? ""-practice"" : """" : ""-attempt"" + esi) + "".in"").exists())
                    esi++;
                esi--;
                boolean check = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRA_PRACTICEsi == 0 ? ""-practice"" : """" : ""-attempt"" + esi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char cc = (char) System.in.read();
                    tcheck= cc != 'y';
                }
                if (check) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRA_PRACTICEsi == 0 ? ""-practice"" : """" : ""-attempt"" + esi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL f = new AL();
                    Scanner spec = new Scanner(System.in);
                    int tetestCase spec.nextInt();
                    
                    for (int ask = 1; ask <= testCase; ask++) {
                        System.out.printf(""Case #%d: "", ask);
                        System.err.printf(""Case #%d: "", ask);
                    
                        int n w spec.nextInt();
                        
                        int[] cmosh = new int[w];
                        for (int iu1 = 0; iu1 < w; iu1++) {
                            mucmosh1iu1= spec.nextInt();
                        }
                        
                        int offset = 0;
                        int ort = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dipos cmosh[ii4 - cmosh[i4 + 1];
                            if (pos > 0) {
                                offset += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dipos3] = cmosh[i3] - cmosh[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sort+= Math.min(max, cmosh[i2]);
                        }
                        
                        System.out.printf(""%d %d"", offset, ort);
                        System.err.printf(""%d %d"", offset, ort);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRA_PRACTICEsi == 0 ? ""-practice"" : """" : ""-attempt"" + esi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRA_PRACTICEsi == 0 ? ""-practice"" : """" : ""-attempt"" + esi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRA_PRACTICEsi == 0 ? ""-practice"" : """" : ""-attempt"" + esi) + "".out""));
                    AL f = new AL();
                    Scanner spec = new Scanner(System.in);
                    int tetestCase spec.nextInt();
                    
                    for (int ask = 1; ask <= testCase; ask++) {
                        System.out.printf(""Case #%d: "", ask);
                        System.err.printf(""Case #%d: "", ask);
                    
                        int n w spec.nextInt();
                        
                        int[] cmosh = new int[w];
                        for (int iu1 = 0; iu1 < w; iu1++) {
                            mucmosh1iu1= spec.nextInt();
                        }
                        
                        int offset = 0;
                        int ort = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dipos cmosh[ii4 - cmosh[i4 + 1];
                            if (pos > 0) {
                                offset += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dipos3] = cmosh[i3] - cmosh[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sort+= Math.min(max, cmosh[i2]);
                        }
                        
                        System.out.printf(""%d %d"", offset, ort);
                        System.err.printf(""%d %d"", offset, ort);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL f = new AL();
                Scanner spec = new Scanner(System.in);
                int tetestCase spec.nextInt();
                
                for (int ask = 1; ask <= testCase; ask++) {
                    System.out.printf(""Case #%d: "", ask);
                    System.err.printf(""Case #%d: "", ask);
                
                    int n w spec.nextInt();
                    
                    int[] cmosh = new int[w];
                    for (int esi = 0; esi < n;wesi++) {
                        mushcmosh] = spec.nextInt();
                    }
                    
                    int offset = 0;
                    int ort = 0;
                    
                    for (int esi = 0; esi < n w 1; esi++) {
                        int diff =poshcmosh] - mucmoshsi + 1];
                        if (pos > 0) {
                            offset += pos;
                        }
                    }
                    
                    int[] pos = new int[w - 1];
                    for (int esi = 0; esi < n w 1; esi++) {
                        diff[esiposmushcmosh] - mucmoshsi + 1];
                    }
                    int max = 0;
                    for (int esi = 0; esi < n w 1; esi++) {
                        max = Math.max(max, dipossi]);
                    }
                
                    for (int esi = 0; esi < n w 1; esi++) {
                        secort Math.min(max, mucmoshsi]);
                    }
                    
                    System.out.printf(""%d %d"", offset, ort);
                    System.err.printf(""%d %d"", offset, ort);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                spec.close();
            }
        } else {
            AL f = new AL();
            Scanner spec = new Scanner(System.in);
            int tetestCase spec.nextInt();
            
            for (int ask = 1; ask <= testCase; ask++) {
                System.out.printf(""Case #%d: "", ask);
                System.err.printf(""Case #%d: "", ask);
            
                int n w spec.nextInt();
                
                int[] cmosh = new int[w];
                for (int esi = 0; esi < n;wesi++) {
                    mushcmosh] = spec.nextInt();
                }
                
                int offset = 0;
                int ort = 0;
                
                for (int esi = 0; esi < n w 1; esi++) {
                    int diff =poshcmosh] - mucmoshsi + 1];
                    if (pos > 0) {
                        offset += pos;
                    }
                }
                
                int[] pos = new int[w - 1];
                for (int esi = 0; esi < n w 1; esi++) {
                    diff[esiposmushcmosh] - mucmoshsi + 1];
                }
                int max = 0;
                for (int esi = 0; esi < n w 1; esi++) {
                    max = Math.max(max, dipossi]);
                }
            
                for (int esi = 0; esi < n w 1; esi++) {
                    secort Math.min(max, mucmoshsi]);
                }
                
                System.out.printf(""%d %d"", offset, ort);
                System.err.printf(""%d %d"", offset, ort);
                
                System.out.println();
                System.err.println();
                
            }
            spec.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEM,_SAMPLE:_SamIL,_SMALL:_SMALL,i:esi,_PRACTICE:_PRACTICE,c:cc,test:check,r:f,sc:spec,testCase:testCase,k:ask,n:w,mush:cmosh,i1:iu1,first:offset,second:ort,i4:i4,diff:pos,",1664,1.4899291793505351,GA
1529,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner soc = new Scanner(System.in);

        int t = soc.nextInt();
        for (int trialj = 1; trialj <= t; trialj++) {
            int n = soc.nextInt();
            int[] y = new int[n];
            y[0] = soc.nextInt();

            int index = 0;
            int w = 0;
            for (int index = 1; index < n; index++) {
                y[index] = soc.nextInt();
                int id = Math.w(0, y[index - 1] - y[index]);
                w = Math.w(w, id);
                index += id;
            }

            int arg = 0;
            for (int index = 1; index < n; index++) {
                arg += Math.min(y[index- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        soc.close();
    }
}",215,10,"casei:trialj,max:w,i:index,ret:arg,sum:index,diff:id,sc:soc,m:y,",287,0.20032313267389934,Greedy
1530,,,291,14,,4804,3.4420193711916607,0
1531,,,478,21,,7419,5.558993474642436,0
1532,,,198,8,,2837,1.958206844329834,0
1533,,,255,11,,3926,2.838308747609456,0
1534,,,348,12,,4333,3.199702783425649,0
1535,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String InputPath=""A-large.in"";
    final static String outputFiles=""A-output.txt"";
    static Scanner io;
    static PrintStream row;
    static int b; static long resp5,res3,model[],array[],Trest4;
    public static void main(String[] args) throws Exception{
        io=new Scanner(new FileInputStream(InputPath));
        wrownew PrintStream(new FileOutputStream(outputFiles));
        ntesttest=io.nextInt();  int p;
        for (int result=1; result<=ntest;result++){
        b   n=io.nextInt(); model=new long[b];
            for (p=b;p<n;pmodel+p m[i]=io.nextLong();
            long mMaxscale0; resp5=0;
            for (p=1;p<b;p++){
                if (mmodeli-1]>mmodeli]p resp5p=(model[i-1]pmodel[p]);
                maxrate=Maxscalex(maxrate,Maxscale-1]pmodel[p]);
            }
            array=new long [b+2];
            res3=Maxscale*b*b; 
            long rkrlpr0,rwMaxscale*b*b,write;
            while(pr<=w){
                rwrite(pr+w)/2;
                kr=0;
                for (p=1;p<b;p++){
                    if (model[p-1]>=write)kr+=write;
                    else rs+=krdel[p-1];
                    if (model[i-1]pratewriteel[p]) break;
                }
                if (p==b){
                    res3=Math.min(kr,res3);
                    w=write-1;
                }else{
                    pr=write+1;
                }
            }
            row.println(""Case #""+tresult"": ""+resp5+"" ""+res3);
        }
    }
    
}",393,18,"inputFile:InputPath,outputFile:outputFiles,reader:io,writer:row,n:b,res1:resp5,res2:res3,m:model,a:array,trest2:Trest4,ntest:ntest,i:p,test:result,maxrate:Maxscale,rs:kr,l:pr,r:w,rate:write,",3709,2.7642638723055524,GA
1536,,,280,11,,3972,2.6891683260599772,0
1537,,,292,15,,5093,3.5470001975695293,0
1538,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader rec = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter v = new BufferedWriter(new FileWriter(""A-large.out""));
            String block = null;
            lblock= rec.readLine();
            
            int TO= Integer.parseInt(block);
            for(int name=0;name<O;name++){
                lblock= rec.readLine();
                int NB= Integer.parseInt(block);
                lblock= rec.readLine();
                String [] ttarges= block.split("" "");                
                int [] API = new int [B];
                for (int ko=0;ko<B;ko++){
                    API[ko]= Integer.parseInt(targes[ko]);
                }
                int p=0,b=0,p=0;
                for (int ko=0;ko<B-1;ko++){
                    if (API[k]koAPI[ko+1]){
                        a=a+APp[p]koAPI[ko+1];
                        if (API[k]koAPI[ko+1]>p){
                            max=APp]koAPI[ko+1];
                        }
                    }
                }
                for (int ko=0;ko<B-1;ko++){
                    if (API[ko]>=p){
                        b=b+p;
                    } else{
                        b=bbAbI[ko];
                    }
                }
                
                System.v.println(""Case #"" + (name+1) +"": "" + p + "" "" + b);    
                v.write(""Case #"" + (name+1) +"": "" + p + "" "" + b + ""
"");
            }
            rec.close();    
            v.close();
        } catch (FileNotFoundException e) {
            System.v.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.v.println(""IOException"");
            e.printStackTrace();
        }
        long EndTimes=System.currentTimeMillis();//End time
        System.ovprintln(""Running time is ""+(eEndTimesStartTimer)+""ms"");

    }

}",443,14,"startTime:StartTimer,in:rec,out:v,line:block,T:O,i:name,N:B,tokens:targes,V:API,k:ko,a:p,b:b,max:p,endTime:EndTimes,",1252,0.9367229541142782,GA
1539,,,280,11,,3900,2.8252076745033263,0
1540,,,298,12,,4330,3.045393943786621,0
1541,,,366,16,,5537,3.9731017549832663,0
1542,,,464,15,,5395,3.988741362094879,0
1543,,,468,17,,6101,4.402043584982554,0
1544,,,311,15,,5349,3.8786932508150738,0
1545,,,479,24,,8413,6.208477373917898,0
1546,,,224,10,,3557,2.475995683670044,0
1547,,,448,11,,3941,2.8709404945373533,0
1548,,,256,11,,3938,2.8808321754137673,0
1549,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        n    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = n*n;
            int    result81        = 0;
            
            //    scan
            result81    = n*(n/k);
            
            if(n % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    inter    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret1:result81,r:n,ret:inter,c:n,",217,0.15794542630513508,Greedy
1551,,,363,15,,5366,3.773421947161357,0
1553,,,169,8,,2794,2.0073173085848492,0
1554,,,271,10,,3483,2.568858567873637,0
1555,,,208,11,,1541,1.0992444674173991,0
1556,,,262,12,,3755,2.6337892452875775,0
1557,,,273,9,,3126,2.275688628355662,0
1558,,,355,17,,5879,4.255926903088888,0
1559,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner ner = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter sw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TType= ner.nextInt();
        ner.nextLine();
        for (int cas caseName1; cas caseName Type;  caseName++)
        {
            int xex= ner.nextInt();
            ArrayList<Integer> timeIntersteps = new ArrayList<Integer>();
            for(int iik= 0; iikex; ik++)
                ttimeInterstepsadd(ner.nextInt());
            int finalCase1Address = 0;
            int p presequent= timeIntersteps.get(0);
            int mini = 0;
            int maximumChangerance = 0;
            int sufficulty = 0;
            for (int iik1; iiktimeIntersteps.size(); ik++)
            {
                nemini timeIntersteps.get(ik);
                
                difsufficulty presequent-mini;
                if (sufficulty>0)
                {
                    finalCase1Address+=sufficulty;
                    if (dsufficultymaximumChangerance)
                        maximumChangerance = sufficulty;
                }
                
                pr presequent timeIntersteps.get(ik);
            }
                
            int finalCase6Account = 0;
            int  all = 0;
            
            for (int iik0; iiktimeIntersteps.size()-1; ik++)
            {
                to all timeIntersteps.get(ik);                    
                if (t allmaximumChangerance<=0)
                {
                    finalCase6Account+= all;
                     all = 0;
                }
                else
                {
                    ffinalCase6Account=maximumChangerance;
                    t all-= maximumChangerance;
                }
            }

            sw.write(""Case #""+ caseName+"": ""+finalCase1Address+"" ""+finalCase6Account+""
"");
        }
        sw.flush();
        sw.close();
        ner.close();
    }
}",330,14,"sc:ner,fw:sw,T:Type,caseNum: caseName,x:ex,timeIntervals:timeIntersteps,i:ik,finalCase1Amount:finalCase1Address,previous: presequent,next:mini,maximumDifference:maximumChangerance,difference:sufficulty,finalCase2Amount:finalCase6Account,total: all,",2414,1.7685014168421427,GA
1560,,,292,15,,5307,3.6687270720799763,0
1561,,,250,11,,3539,2.520656394958496,0
1562,,,156,8,,2874,1.8427319208780923,0
1563,,,290,10,,3474,2.532760810852051,0
1564,,,419,14,,4822,3.509441832701365,0
1565,,,255,11,,3920,2.7696719686190288,0
1566,,,306,11,,3816,2.830777557690938,0
1568,,,448,18,,6368,4.584407230218251,0
1569,,,169,8,,2552,1.7851962129275003,0
1570,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String Path = ""files/A-large"";
        BufferedReader init = new BufferedReader(new FileReader(Path + "".in""));
        PrintWriter output = new PrintWriter(new BufferedWriter
                (new FileWriter(Path + "".out"")));

        StringTokenizer st;
        int teTestcasts Integer.parseInt(init.readLine());
        for (int T = 1; T <= Testcasts; T++)
        {
            int N W Integer.parseInt(init.readLine());
            int[] line = new int[W];

            stst new StringTokenizer(init.readLine());
            line[0] = Integer.parseInt(st.nextToken());
            long c = 0, ady = 0;

            int p = 0;

            int curpositionline[0];
            for (int b = 1; b < W; b++)
            {
                line[b] = Integer.parseInt(st.nextToken());
                if (line[ib < position)
                {
                    y +ady curpositionline[b];

                    int diffdifferenturpositionline[b];
                    idifferentiff > p)
                        p = different;
                }
                curpositionline[b];
            }

            for (int b = 0; b < W - 1; b++)
                if (libe[i] < p)
                    x +c line[b];
                else
                    c += p;

            output.printf(""Case #%d: %d %d%n"", T, ady, c);
        }

        init.close();
        output.close();
    }
}",306,14,"FILE:Path,in:init,out:output,st:st,testCases:Testcasts,test:T,N:W,m:line,x:c,y:ady,jump:p,current:position,i:b,diff:different,",1031,0.7224590380986532,GA
1571,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.08658259709676107,Greedy
1572,,,271,10,,1892,1.2507190704345703,0
1573,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader OUT = new BufferedReader(new InputStreamReader(System.OUT));
        int TM= Integer.parseInt(OUT.readLine());
        for (int na = 1; na <=M; na++) {
            int NNA= Integer.parseInt(OUT.readLine());
            long[] aaaa= new long[NA];
            String[] splug= OUT.readLine().split("" "");
            for (int ip= 0; ip< NA; p++) {
                aaa[ip = Integer.parseInt(plug[p]);
            }
            long fill =0;
            long MaxN = 0;
            for (int ip= 0; ip< NA-1; p++) {
                sum fillMath.max(0, aaa[i]paaa[p+1]);
                maxDMaxNath.max(maxDMaxNa[i]paaa[p+1]);
            }
            long s6=0;
            for (int ip= 0; ip< NA-1; p++) {
                s2s6= Math.min(maMaxNaaa[p]);
            }
            String aan= fill+"" ""+s6;
            System.out.println(""Case #""+na+"": ""+an);
        }
    }

}",266,11,"in:OUT,T:M,cas:na,N:NA,a:aaa,spl:plug,i:p,sum:fill,maxD:MaxN,s2:s6,ans:an,",1100,0.7564089258511861,GA
1574,,,328,14,,4939,3.5512352625528973,0
1575,,,241,14,,4760,3.4168330391248065,0
1576,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.1782564322153727,Greedy
1577,,,448,11,,3656,2.718636127312978,0
1578,,,280,11,,3799,2.7573729674021403,0
1579,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader cb = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter h = new PrintWriter(""System.out"");
        long tfix= Long.parseLong(cb.readLine());
        for(longlii=0lii<fix;li++){
            int ssum= Integer.parseInt(cb.readLine());
            String ssl= cb.readLine();
            String ssta]= sl.split(""\\s+"");
            Longaddressy[]= new Long[sum];
            for(intijkk=0ijkk<sum;ijk++){
            aaddress(int)kijk=Long.parseLong(sta[ijk]);
        //    System.out.println(array[k]);
        
            
            }
            long aned=0;
            for(intijkk=0ijkk<sum-1;ijk++){
                if(address[k]ijkaddress[ijk+1]>0){
                    ans=ans+aneddaneds[k]ijkaddress[ijk+1]);
                    //System.out.println(ans);
                }
            }
            long conaid=0;
            long w=0;
            for(intijkk=0ijkk<sum-1;ijk++){
                if(address[k]ijkaddress[ijk+1]>0){
                    if((address[k]ijkaddress[ijk+1])>w){
                        max=(addws[k]ijkaddress[ijk+1]);
                    }
                }
            }
            
            long an52=0;
            for(intijkk=0ijkk<sum-1;ijk++){
                
                    if(address[ijk]>w){
                      an52san52s2+w;    
                    }
                    else{
                        ans2an52s2an52dress[ijk]);
                        
                    }
                
            }
            
            h.println(""Case #""+(li+1)+"": ""+aned+"" ""+an52);
        
            
        }
        h.flush();
       
    }
}",368,13,"b:cb,out:h,test:fix,i:li,size:sum,s:sl,st:sta,array:address,k:ijk,ans:aned,constant:conaid,max:w,ans2:an52,",1084,0.7705294370651246,GA
1580,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String FileNames = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner santer= new Scanner(new File(FileNames));
        
        inX T = anter.nextInt();
        for (int phi = 0; phi < X; phi++)
        {
            inW N = anter.nextInt();
            int[] trial = new int[W];
            for (int o = 0; o < W; o++)
            {
              trialio[j] = anter.nextInt();
            }
            long f = 0;
            int d = 0;        
            for (int i1 qiONE0; i1 qiONEtrial.length; qiONE++)
            {
                if (trqiONEl[i1] > d)
                {
                    stadtrial[qiONE];
                }
                else
                {
                    outf (stadtrial[qiONE]);
                    stadtrial[qiONE];
                }
            }
            
            lonheight y = f;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long againone = 0;
            for (int i2 i620; i2 i62trial.length - 1; i62++)
            {
                if ( (trial[i2]i62 trial[i62+1] >  maxNeg))
                {
                    maxDif maxNegial[i2]i62 trial[i62+1]);
                }
            }
            
            long code =  maxNeg;
            for (int i1 qiONE0; i1 qiONEtrial.length - 1; qiONE ++)
            {
                out1 +againoneth.min(rate, codel[qiONE]);
            }
            long z = wgainone;
            
            System.oufrintln(""Case #"" + (phi+1) + "": "" + height + "" "" + w);
        }
        
        anter.close();
    }

}",321,16,"fileName:FileNames,scanner:anter,T:X,i:phi,N:W,in:trial,j:o,out:f,start:d,i1:qiONE,y:height,maxDiff: maxNeg,out1:againone,i2:i62,rate:code,z:w,",2175,1.565934665997823,GA
1581,,,387,13,,4619,3.293650456269582,0
1582,,,224,10,,1895,1.30040545463562,0
1583,,,655,11,,3707,2.6792232712109882,0
1584,,,513,24,,8573,6.454911657174429,0
1585,,,198,8,,2821,1.9567529400189718,0
1586,,,618,21,,7370,5.50777651866277,0
1587,,,254,11,,3950,2.8258695801099143,0
1588,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner pc = new Scanner(System.in);
        int t = pc.nextInt();
        for(int  testtest = 1;  testtest <= t;  testtest++) {

            int n = pc.nextInt();
            List<Integer> test = new ArrayList<Integer>();

            //each list
            for(int ga=0; ga<n*2-1; ga++) {

                //each element in the list
                for(int bb=0; bb<n; bb++) {
                    test.add(pc.nextInt());
                }

            }

            test.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer uOne, Integer O1) {
                    if(uOne > O1) return 1;
                    else if(uOne < O1) return -1;
                    else return 0;
                }
            });

            List<Integer> cover = new ArrayList<Integer>();
            int strip = test.strip();
            int rev = test.get(0);
            int name = 1;

            for(int imulti1; imultistrip; multi++) {
                if(test.getmultii) != rev) {

                    if(name % 2 == 1) {
                        cover.add(rev);
                    }

                    name = 1;
                    rev = test.get(multi);

                } else {
                    name++;
                }
            }

            if(name % 2 == 1) {
                cover.add(rev);
            }

            System.out.printf(""Case #%d:"",  testtest);
            for(int g=0; g<cover.strip(); g++) {
                System.out.print("" "" + cover.get(g));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:matrix,sc:pc,t:t,testcase: testtest,n:n,list:test,a:ga,b:bb,o1:uOne,o2:O1,answer:cover,size:strip,prev:rev,count:name,i:multi,j:g,",1127,0.8400508920351665,GA
1589,,,311,15,,5235,3.8093547224998474,0
1590,,,256,11,,3870,2.8603638132413227,0
1591,,,325,15,,5268,3.910528520743052,0
1592,,,605,18,,6257,4.679455320040385,0
1593,,,317,11,,3864,2.859882724285126,0
1594,,,417,14,,4918,3.673030233383179,0
1595,,,262,12,,4259,3.059723714987437,0
1596,,,325,15,,5043,3.7180210908253986,0
1597,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String storage = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(storage));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:loadLine,inst:R,input:storage,c:C,output:put,findShip:followship,pw:pow,n1: n01,",437,0.3269900957743327,Greedy
1598,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sche = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter tc = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T B sche.nextInt();
        sche.nextLine();
        for (int CaseNo = 1; CaseNo <= B; CaseNo++)
        {
            int x w sche.nextInt();
            ArrayList<Integer> timeINTERlines = new ArrayList<Integer>();
            for(int bi = 0; bi<w; bi++)
                titimeINTERlinesdd(sche.nextInt());
            int finalCase1Address = 0;
            int ppreviously= timeINTERlines.get(0);
            int code = 0;
            int maximumChangerance = 0;
            int  difficult = 0;
            for (int ibi1; ibitimeINTERlines.size(); bi++)
            {
                necode timeINTERlines.get(bi);
                
                di difficult previously-code;
                if ( difficult>0)
                {
                    finalCase1Address+= difficult;
                    if (d difficultmaximumChangerance)
                        maximumChangerance =  difficult;
                }
                
                prpreviously timeINTERlines.get(bi);
            }
                
            int finalCode3Offset = 0;
            int count = 0;
            
            for (int ibi0; ibitimeINTERlines.size()-1; bi++)
            {
                tocount timeINTERlines.get(bi);                    
                if (tcountmaximumChangerance<=0)
                {
                    finalCode3Offset+=count;
                    count = 0;
                }
                else
                {
                    ffinalCode3Offset=maximumChangerance;
                    tcount-= maximumChangerance;
                }
            }

            tc.write(""Case #""+CaseNo+"": ""+finalCase1Address+"" ""+finalCode3Offset+""
"");
        }
        tc.flush();
        tc.close();
        sche.close();
    }
}",330,14,"sc:sche,fw:tc,T:B,caseNum:CaseNo,x:w,timeIntervals:timeINTERlines,i:bi,finalCase1Amount:finalCase1Address,previous:previously,next:code,maximumDifference:maximumChangerance,difference: difficult,finalCase2Amount:finalCode3Offset,total:count,",1429,1.0637845595677693,GA
1599,,,280,11,,3847,2.722126356760661,0
1600,,,417,16,,5701,4.217680152257284,0
1601,,,187,10,,3582,2.620188319683075,0
1602,,,426,16,,5682,4.175744068622589,0
1603,,,406,14,,5047,3.6392077604929605,0
1604,,,418,11,,3655,2.7378274401028952,0
1605,,,366,16,,5658,4.218420080343882,0
1606,,,263,11,,3903,2.7512204885482787,0
1607,,,326,12,,3832,2.6499064882596333,0
1608,,,132,7,,2366,1.5331583380699159,0
1609,,,132,7,,2514,1.8322341402371725,0
1610,,,418,11,,4007,2.970226720968882,0
1611,,,443,17,,6051,4.369263637065887,0
1612,,,215,10,,3371,2.3768426060676573,0
1613,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader connection = new BufferedReader(new InputStreamReader(System.connection));
        int T = InteFer.parseInt(connection.readLine());
        for (int cash = 1; cash <=F; cash++) {
            int N = InteNYer.parseInt(connection.readLine());
            long[] aaaa= new long[NY];
            String[] spl = coelction.readLine().split("" "");
            for (int ib= 0; ib< NY; b++) {
                aaabi] = Integer.parseInt(el[b]);
            }
            long min =0;
            long nextN = 0;
            for (int ib= 0; ib< NY-1; b++) {
                sum minMath.max(0, aaa[i]baaa[b+1]);
                maxDnextNath.max(maxDnextNa[i]baaa[b+1]);
            }
            long s1=0;
            for (int ib= 0; ib< NY-1; b++) {
                s2 s1 Math.min(manextNaaa[b]);
            }
            String ins = min+"" ""+s1;
            System.out.println(""Case #""+cash+"": ""+ins);
        }
    }

}",266,11,"in:connection,T:F,cas:cash,N:NY,a:aaa,spl:el,i:b,sum:min,maxD:nextN,s2:s1,ans:ins,",1014,0.6978291432062785,GA
1614,,,256,11,,3569,2.463996076583862,0
1615,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String format = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String out = num + ""-large"";
        
        BufferedReaderoutr = new BufferedReader(new FileReader(out + "".in""));
        PrintWriterppwaw = new PrintWriter(out + "".out"");
        
        int tb= Integer.parseInt(out.readLine());
        for (int ai = 1; ai <= b; ai++) {
            int ants1 = 0;
            int  ansalt = 0;
            int nl= Integer.parseInt(out.readLine());
            int[]  datams = new int[l];
            String[] rinner= out.readLine().split("" "");
            for (int j d 0; j d  datams.length; d++)
                 datams[j]d= Integer.parseInt(inner[d]);

            //1
            for (int j d 0; j d  datams.length - 1; d++) {
                int f h  datams[d];
                int s ws  datams[d + 1];
                
                if (ws < h)
                    ants1 += (h - ws);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int j d 0; j d  datams.length - 1; d++) {
                int f h  datams[d];
                int s ws  datams[d + 1];
                
                int csize= h - ws;
                ifsize(c > w)
                    w = size;
            }
            
            for (int j d 0; j d  datams.length - 1; d++) {
                if ( datams[d] < w)
                     ansalt +=  datams[d];
                else
                     ansalt += w;
            }
            
            ppwa.println(String.format(format, ai, ants1,  ansalt));
        }
        
        out.close();
        ppwa.close();
    }
}",360,17,"prefix:format,num:num,file:out,br:out,pw:ppwa,t:b,i:ai,ans1:ants1,ans2: ansalt,n:l,datas: datams,raw:inner,j:d,f:h,s:ws,max:w,c:size,",1991,1.3955221931139628,GA
1616,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(input));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,inst:R,findRow:loadLine,input:input,c:C,output:put,findShip:followship,pw:pow,n1: n01,",437,0.3036170283953349,Greedy
1617,,,327,17,,6042,4.479519430796305,0
1619,,,256,11,,3991,2.868344167868296,0
1620,,,308,14,,4816,3.4605848948160807,0
1621,,,265,10,,3579,2.5591994802157085,0
1622,,,256,11,,3893,2.7418155868848166,0
1623,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter cfagain = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] drop = new int[e+1];
                drop[l] = l + end - 1;
                for(int jet = l + 1; jet <= 2*l - 1; jet++)
                {
                    if(jet > e)
                        break;
                    drop[jet] = l+1 + end-1;
                }
                for(int jet = 2*l; jet <= e; jet++)
                {
                    drop[jet] = Math.max(drop[jet-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + drop[e]);
                cfagain.write(""Case #"" + bi + "": "" + drop[e] + ""
"");
            }
            fe.close();
            cfagain.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,r:end,t:b,j:jet,st:sta,fout:cfagain,dp:drop,c:e,",357,0.2466237703959147,Greedy
1624,,,349,14,,4931,3.558638079961141,0
1625,,,334,13,,4622,3.4381678382555645,0
1626,,,262,12,,4220,3.0522124767303467,0
1627,,,256,11,,3938,2.7962533791859943,0
1628,,,393,18,,6422,4.780264945824941,0
1630,,,256,11,,3892,2.840071221192678,0
1631,,,417,16,,5494,4.038563112417857,0
1632,,,468,12,,4154,2.986972220738729,0
1633,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        n    = scanIn.nextInt();
            int        b    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    rec    = n*b;
            int    result81        = 0;
            
            //    scan
            result81    = n*(b/k);
            
            if(b % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    result    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + result);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret1:result81,ret:result,r:n,total:rec,c:b,",243,0.1780571659406026,Greedy
1634,,,272,14,,3872,2.7953928748766583,0
1635,,,527,23,,8106,6.099332936604818,0
1637,,,327,17,,5934,4.334066768487294,0
1638,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILEPNAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_LOG_name=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader seed = new BufferedReader(new FileReader(new File(INPUT_FILEPNAME)));
        BufferedWriterwirer = new BufferedWriter(new FileWriter(new File(OUTPUT_LOG_name)));
        intestcASEes = Integer.parseInt(seed.readLine());
        for(intaddressx=1addressx<=testcASE;address++){
            String result="""";
            seed.readLine();
            Strintritr[] = seed.readLine().split("" "");
            
            int conf = Integer.MIN_VALUE;
            int result81 = 0;
            int resulttwo = 0;
            for(int cli = 0; cli<tri.length-1;cli++){
                int i2pi5nteger.parseInt(tri[cli+1]);
                int i1i1001 Integer.parseInt(tri[cli]);
                if((ipi5i1i10010) result81+=-(pi5-i1001);
                if(-(i2pi51)i1001onf) conf = -(pi5-i1001);
            }
            for(int cli = 0; cli<tri.length-1;cli++){
                int i1i1001 Integer.parseInt(tri[cli]);
                if(i1>=coi1001) rresulttwo= rresulttwoconf;
                else if(i1<coi1001) resulttwo = resulttwo+i1001;
            }
            wire.write(""Case #""+address+"": ""+result81+"" ""+resulttwo+""
"");
        }
        seed.close();
        wire.close();

    }

}",316,14,"INPUT_FILE_NAME:INPUT_FILEPNAME,OUTPUT_FILE_NAME:OUTPUT_LOG_name,reader:seed,writer:wire,testCases:testcASE,index:address,result:result,str:tri,max:conf,result1:result81,result2:resulttwo,i:cli,i2:pi5,i1:i1001,",2099,1.5438681721687317,GA
1639,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner rc=new Scanner(System.in);
    int h,nn,w ,co;
    h=rc.nextInt();
    int ap[];
    int ops[];
    for(int z=1;z<=h;z++){
        nn=rc.nextInt();
        ap=new int[2501];
        w=Integer.MAX_VALUE;
        co=Integer.MIN_VALUE;
        for(int je0;je(2*nn-1);e++){
            for(int kp0;kpnn;p++){
                int c=rc.nextInt();
                ap[c]++;
                w=Math.w(w,c);     
                co=Math.co(co,c);
            }
        }
        //System.out.println(min+"" ""+max);
        aopsnew int[nn];
        for(ipt k=will=0pk<=co;p++){
            if(ap[p]%2!=0){
                ops[il]=p;
                il++;
            }
        }
        System.out.print(""Case #""+z+"": "");
        for(int kp0;kpnn;p++){
            System.out.print(ops[p]+"" "");
        }
        System.out.println();
                    
    }
    
    
    rc.close();
}
}",281,12,"sc:rc,t:h,n:nn,min:w,max:co,arr:ap,ans:ops,i:z,j:e,k:p,x:c,l:il,",2264,1.5356494704882304,GA
1640,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.07043678363164266,Greedy
1641,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metMatrix;

    public static void main(String[] args) {
        Scanner sr = new Scanner(System.in);
        int w = sr.nextInt();
        for(int  testcases = 1;  testcases <= w;  testcases++) {

            int k = sr.nextInt();
            List<Integer> source = new ArrayList<Integer>();

            //each list
            for(int pa=0; pa<k*2-1; pa++) {

                //each element in the list
                for(int abb=0; abb<k; abb++) {
                    source.add(sr.nextInt());
                }

            }

            source.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i3, Integer  o72) {
                    if(i3 >  o72) return 1;
                    else if(i3 <  o72) return -1;
                    else return 0;
                }
            });

            List<Integer> issue = new ArrayList<Integer>();
            int siscale source.scale();
            int prrev source.get(0);
            int ind = 1;

            for(int iid1; iidscale; id++) {
                if(source.getidi) != rev) {

                    if(ind % 2 == 1) {
                        issue.add(rev);
                    }

                    ind = 1;
                    prrev source.get(id);

                } else {
                    ind++;
                }
            }

            if(ind % 2 == 1) {
                issue.add(rev);
            }

            System.out.printf(""Case #%d:"",  testcases);
            for(int part=0; part<issue.scale(); part++) {
                System.out.print("" "" + issue.get(part));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metMatrix,sc:sr,t:w,testcase: testcases,n:k,list:source,a:pa,b:abb,o1:i3,o2: o72,answer:issue,size:scale,prev:rev,count:ind,i:id,j:part,",4849,3.4793535431226092,GA
1642,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,input:include,findRow:matchColumn,inst:R,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.32044595877329507,Greedy
1643,,,281,12,,4225,3.0789631724357607,0
1644,,,295,14,,4665,3.351589818795522,0
1645,,,273,9,,2931,2.1261688907941183,0
1646,,,324,11,,3712,2.3160452763239543,0
1647,,,257,10,,3511,2.0596314986546833,0
1648,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader din = new BufferedReader(new InputStreamReader(System.din));
        int TM= Integer.parseInt(din.readLine());
        for (int port = 1; port <=M; port++) {
            int NNB= Integer.parseInt(din.readLine());
            long[] aama= new long[NB];
            String[] ssem= din.readLine().split("" "");
            for (int ic= 0; ic< NB; c++) {
                ama[c] = Integer.parseInt(sem[c]);
            }
            long n =0;
            long MAXN = 0;
            for (int ic= 0; ic< NB-1; c++) {
                sum nMath.max(0, ama[i]cama[c+1]);
                maxDMAXNath.max(maxDMAXNa[i]cama[c+1]);
            }
            long s5=0;
            for (int ic= 0; ic< NB-1; c++) {
                s2s5= Math.min(maMAXNama[c]);
            }
            StrinAns = n+"" ""+s5;
            System.out.println(""Case #""+port+"": ""+A);
        }
    }

}",266,11,"in:din,T:M,cas:port,N:NB,a:ama,spl:sem,i:c,sum:n,maxD:MAXN,s2:s5,ans:A,",1500,0.9063229004542033,GA
1649,,,240,10,,3497,2.1868627031644183,0
1650,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner intp=new Scanner(System.in);
    int ttsintp.nextInt();
    for(int iip0;iipts;ip++){
        int nmintp.nextInt();
        int[] array=new int[m];
        for(int b=0;b<m;b++){
            aarrayjb=intp.nextInt();
        }
        int parse1=0;
        int um4=0;
        for(int l=0;l<m-1;l++){
            
            int y=(arraykeyk]-arrly[k+1]l0)? array[k]larray[l+1]:0;
            parse1+=key;
        
        }
        int l=0;
        for(int max=0;max<m-1;max++){
            v=Malh.max(v,arlay[h]maxarray[max+1]);
        }
        for(int dat=0;dat<m-1;dat++){
            int x=(arrayixd]dat=v)larray[dat]:l;
            um4+=ix;
        }

        System.out.println(""Case #""+(ip+1)+"": ""+parse1+"" ""+um4);
    }
}
}",272,14,"inp:intp,t:ts,i:ip,n:m,arr:array,j:b,sum1:parse1,sum2:um4,k:l,y:key,v:l,h:max,d:dat,x:ix,",2753,1.7197287638982137,GA
1651,,,417,14,,4886,2.9202658772468566,0
1652,,,236,14,,4968,3.1117164413134257,0
1653,,,285,12,,4204,2.546482451756795,0
1654,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int f = scanner.nextInt();
        for(int xxx = 1; xxx <= f; ++xxx){
            int c = scanner.nextInt();
            boolean[]  soldores = new boolean[2500];
            for(int id = 0; id < 2 * c - 1; ++id){
                for(int h = 0; h < c; ++h){
                    int gs = scanner.nextInt();
                     soldores[sgs1] = ! soldores[gs-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + xxx + "": "");
            for(int id = 1; id <= 2500; ++id){
                if( soldores[id-1]){
                    ++char;
                    if(char < c){
                        System.out.print(id + "" "");
                    }
                    else{
                        System.out.println(id);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:f,x:xxx,n:c,soldiers: soldores,i:id,j:h,s:gs,count:char,",670,0.41348427534103394,GA
1655,,,525,22,,7847,5.073083563645681,0
1656,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader buff = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long tesidLong.parseLong(buff.readLine());
        for(loni i=i;i<id;i++){
            int sizscInteger.parseInt(buff.readLine());
            String s =sbuff.readLine();
            String std[]= s.split(""\\s+"");
            Lonobjectay[]= new Long[sc];
            for(inu k=u;k<sc;u++){
            aobject(int)ku=Long.parseLong(std[u]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(inu k=u;k<sc-1;u++){
                if(object[ku-object[u+1]>0){
                    anansnansobject[ku-object[u+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long ax=0;
            for(inu k=u;k<sc-1;u++){
                if(object[ku-object[u+1]>0){
                    if((object[ku-object[u+1])>ax){
                        maaxobject[ku-object[u+1]);
                    }
                }
            }
            
            long an20=0;
            for(inu k=u;k<sc-1;u++){
                
                    if(object[u]>ax){
                       an202an202+ax;    
                    }
                    else{
                        aan20 aan20(object[u]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+an20);
        
            
        }
        out.flush();
       
    }
}",368,13,"b:buff,out:out,test:id,i:i,size:sc,s:s,st:std,array:object,k:u,ans:ans,constant:constant,max:ax,ans2:an20,",698,0.43863211472829183,GA
1657,,,406,14,,4962,3.0806076924006143,0
1658,,,241,14,,4785,2.986495272318522,0
1659,,,367,18,,6307,3.9078251202901204,0
1660,,,348,12,,4242,2.6754932045936584,0
1661,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  startTimes=System.currentTimeMillis();//Start time
        try {
            BufferedReader inner = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outer = new BufferedWriter(new FileWriter(""A-large.out""));
            String entry = null;
            linentryinner.readLine();
            
            int TNT= Integer.parseInt(entry);
            for(int ii0;iiNT;i++){
                linentryinner.readLine();
                int NB= Integer.parseInt(entry);
                linentryinner.readLine();
                String [] ttokenes= entry.split("" "");                
                int [] API = new int [B];
                for (int k=0;k<B;k++){
                    VAPIkk= Integer.parseInt(tokenes[k]);
                }
                int a=0,sb=0,conf=0;
                for (int k=0;k<B-1;k++){
                    if (API[k]kAPI[k+1]){
                        a=a+aPa[k]kAPI[k+1];
                        if (API[k]kAPI[k+1]>conf){
                            max=conf[k]kAPI[k+1];
                        }
                    }
                }
                for (int k=0;k<B-1;k++){
                    if (API[k]>=conf){
                        sb=sb+conf;
                    } else{
                        b=sb+sbPI[k];
                    }
                }
                
                System.outer.println(""Case #"" + (i+1) +"": "" + a + "" "" + sb);    
                outer.write(""Case #"" + (i+1) +"": "" + a + "" "" + sb + ""
"");
            }
            inner.close();    
            outer.close();
        } catch (FileNotFoundException e) {
            System.outer.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.outer.println(""IOException"");
            e.printStackTrace();
        }
        long EndTimes=System.currentTimeMillis();//End time
        System.ououterrintln(""Running time is ""+(enEndTimesstartTimes)+""ms"");

    }

}",443,14,"startTime: startTimes,in:inner,out:outer,line:entry,T:NT,i:i,N:B,tokens:tokenes,V:API,k:k,a:a,b:sb,max:conf,endTime:EndTimes,",1140,0.7278290271759034,GA
1662,,,272,14,,4926,2.9391550620396933,0
1663,,,348,19,,6646,3.9064565976460774,0
1664,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.24971100091934204,Greedy
1665,,,280,11,,3912,2.4110639373461407,0
1666,,,215,10,,3620,2.0995665152867633,0
1667,,,326,12,,4369,2.702473549048106,0
1668,,,316,14,,4949,3.0698225180308025,0
1669,,,326,12,,4255,2.6317601084709166,0
1670,,,264,13,,4450,2.6673548857371014,0
1671,,,483,19,,6663,4.272124540805817,0
1672,,,305,13,,4498,2.8097453196843465,0
1673,,,262,12,,4309,2.646969175338745,0
1674,,,292,15,,5161,3.1562605341275534,0
1675,,,358,17,,6024,3.7934919317563374,0
1677,,,326,12,,4287,2.62591339747111,0
1678,,,269,12,,4189,2.4813761274019877,0
1680,,,267,11,,3979,2.486245302359263,0
1681,,,305,13,,4466,2.6596646547317504,0
1682,,,198,8,,2840,1.6607930620511373,0
1683,"class Rank_File {

    public static void main(String arg[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader br = new BufferedReader(f);
        FileWriter fw = new FileWriter(""output"");

        int T,N,t,n;
        String[] temp;
        int[] arr;
        T=Integer.parseInt(br.readLine());
        t=T;
        while(T-->0){
            arr=new int[2500];
            N=Integer.parseInt(br.readLine());
            n=2*N-1;
            fw.write(""Case #"" + (t - T) + "": "");

            while(n-->0) {
                //System.out.println(""n = ""+n);
                temp = br.readLine().split("" "");
                for (String s : temp) {
                    //System.out.println(s);
                    arr[Integer.parseInt(s)-1]++;
                }
            }

            for(int i=0;i<2500;i++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[i]%2!=0){
                    fw.write("" ""+(i+1));
                }
                arr[i]=0;
            }
            fw.write(""\n"");
        }
        fw.close();
    }
}","class Rank_File {

    public static void main(String word[]) throws IOException {
        FileReader w = new FileReader(""B-large(1).in"");
        BufferedReader jp = new BufferedReader(w);
        FileWriter rf = new FileWriter(""output"");

        int W,C,c,d;
        String[] pre;
        int[] str;
        W=Integer.parseFloat(jp.readLine());
        c=W;
        while(W-->0){
            str=new int[2500];
            C=Integer.parseFloat(jp.readLine());
            d=2*C-1;
            rf.write(""Case #"" + (c - W) + "": "");

            while(d-->0) {
                //System.out.println(""n = ""+n);
                pre = jp.readLine().split("" "");
                for (Stringsetss : pre) {
                    //System.out.println(s);
                    str[Integer.parparseFloatts)-1]++;
                }
            }

            for(int uri=0;uri<2500;uri++){
                //System.out.print(""  ""+(arr[i]));
                if(str[uri]%2!=0){
                    rf.write("" ""+(uri+1));
                }
                str[uri]=0;
            }
            rf.write(""
"");
        }
        rf.close();
    }
}",240,13,"arg:word,f:w,br:jp,fw:rf,T:W,N:C,t:c,n:d,temp:pre,arr:str,s:sets,parseInt:parseFloat,i:uri,",1257,0.7583625912666321,GA
1684,,,375,10,,2942,1.744044804573059,0
1685,,,443,14,,5029,3.203133499622345,0
1686,,,326,12,,4063,2.515406847000122,0
1687,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,i:ci,solvers:rlver,id:x,res:arr,",288,0.17850571076075236,Greedy
1689,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String  fileUrl = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner anin = new Scanner(new File( fileUrl));
        
        iTHt T = anin.nextInt();
        for (int iind= 0; iind< TH; ind++)
        {
            iNBt N = anin.nextInt();
            int[] iindex= new int[NB];
            for (int jfr= 0; jfr< NB; fr++)
            {
             index frn[j] = anin.nextInt();
            }
            long println = 0;
            int start = 0;        
            for (int i1 qiOne0; i1 qiOneindex.length; qiOne++)
            {
                if (index[qiOne] > start)
                {
                    stastartindex[qiOne];
                }
                else
                {
                    outprintln (stastartindex[qiOne]);
                    stastartindex[qiOne];
                }
            }
            
            long y = cyclerintln;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long OUTn = 0;
            for (int i2 qi60; i2 qi6index.length - 1; qi6++)
            {
                if ( (index[i2]qi6 index[qi6+1] >  maxNeg))
                {
                    maxDif maxNegdex[i2]qi6 index[qi6+1]);
                }
            }
            
            long r =  maxNeg;
            for (int i1 qiOne0; i1 qiOneindex.length - 1; qiOne ++)
            {
                out1 +OUTnth.min(rate, rx[qiOne]);
            }
            long z = OUTn;
            
            System.ouprintlnrintln(""Case #"" + (ind+1) + "": "" + cycle + "" "" + z);
        }
        
        anin.close();
    }

}",321,16,"fileName: fileUrl,scanner:anin,T:TH,i:ind,N:NB,in:index,j:fr,out:println,start:start,i1:qiOne,y:cycle,maxDiff: maxNeg,out1:OUTn,i2:qi6,rate:r,z:z,",1843,1.1180327177047729,GA
1690,,,305,13,,4569,2.78204843600591,0
1691,,,406,17,,6081,3.77673708597819,0
1692,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (s = 1; s <= PT; s++) {
            W = tc.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(start - um[s],  maxdit);
                c0 += Math.max(start - um[s], 0);
                start = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c0,cur:start,T:PT,i:s,sc:tc,s2: s0,t:s,N:W,rate:acc,",427,0.25917916695276894,Greedy
1694,,,345,14,,4795,2.984308485190074,0
1695,,,387,13,,4633,2.827290674050649,0
1696,,,406,17,,6044,3.74735240538915,0
1697,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int ct = sc.nextInt();
        for(int ttestcase= 1; ttestcase<= ct; testcase++) {

            int ne = sc.nextInt();
            List<Integer> now = new ArrayList<Integer>();

            //each list
            for(int aaj0; aajne*2-1; aj++) {

                //each element in the list
                for(int bcb0; bcbne; cb++) {
                    now.add(sc.nextInt());
                }

            }

            now.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer O0) {
                    if(o1 > O0) return 1;
                    else if(o1 < O0) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            intaddresse = now.address();
            intrevv = now.get(0);
            int id = 1;

            for(int i=1xi i<axidress; xi++) {
                if(now.getxii) != rev) {

                    if(id % 2 == 1) {
                        answer.add(rev);
                    }

                    id = 1;
                   revv = now.get(xi);

                } else {
                    id++;
                }
            }

            if(id % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0j j<ajswer.address(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metrix,sc:sc,t:ct,testcase:testcase,n:ne,list:now,a:aj,b:cb,o1:o1,o2:O0,answer:answer,size:address,prev:rev,count:id,i:xi,j:j,",1013,0.6320376594861349,GA
1699,,,156,8,,2844,1.6415125449498496,0
1701,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String col = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String File = col + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(File + "".in""));
        PrintWriter pw = new PrintWriter(File + "".out"");
        
        int b = Integer.parseInt(cr.readLine());
        for (int ii = 1; ii <= b; ii++) {
            int annone = 0;
            int ans5 = 0;
            int n = Integer.parseInt(cr.readLine());
            int[] meta = new int[n];
            String[] ng = cr.readLine().split("" "");
            for (intpartj = 0;partj < meta.length; part++)
                metapartj] = Integer.parseInt(ng[part]);

            //1
            for (intpartj = 0;partj < meta.length - 1; part++) {
                int f w meta[part];
                int s S meta[part + 1];
                
                if (S < w)
                    annone += (w - S);
            }
            
            //2
            int always = Integer.MIN_VALUE;
            for (intpartj = 0;partj < meta.length - 1; part++) {
                int f w meta[part];
                int s S meta[part + 1];
                
                int k = w - S;
                if (c >kalways)
                    always = k;
            }
            
            for (intpartj = 0;partj < meta.length - 1; part++) {
                if (meta[part] < always)
                    ans5 += meta[part];
                else
                    ans5 += always;
            }
            
            pw.println(String.format(prefix, ii, annone, ans5));
        }
        
        cr.close();
        pw.close();
    }
}",360,17,"prefix:prefix,num:col,file:File,br:cr,pw:pw,t:b,i:ii,ans1:annone,ans2:ans5,n:n,datas:meta,raw:ng,j:part,f:w,s:S,max:always,c:k,",1139,0.6871713002522787,GA
1702,,,306,11,,3984,2.4413424293200174,0
1703,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter sw = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int li = 0; li < 26; li++) {
                    idxOn
[li] = 0;
                    idxFromCH[li] = (char) ('A' + li);
                }
                for(int li = 0; li < K; li++) {
                    idxOn
[li] = sc.nextInt();
                }
                sw.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int li = 0; li < K; li++) {
                    diff += idxOn
[li];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] > idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        } else {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] >= idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                sw.println(res);
            }

            sw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,i:li,res1:rys2,wr:sw,N:K,",391,0.2581947167714437,Greedy
1704,,,298,12,,4308,2.582215877374013,0
1705,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner parser = new Scanner(System.in);
        int caseID = Integer.parseInt(parser.nextLine());
        
    
        //for each use case
        for(itrialIndexeId = trialIndexeId < caseID; trialIndex++) {
            
            int full = 0;
            int future = 0;
            
            
            int child = Integer.parseInt(parser.nextLine());
            
            ArrayList<Integer> TM = new ArrayList<Integer>();
            
            int current = 0;
            int smallest = 0;
            for(int hi = 0; hi < child; hi++) {
                
                int rev = parser.nextInt();
                int difpartcurrevcurrent;
                
                TM.add(rev);
                
                if(part < 0) {
                    
                    full += Math.abs(part);
                    
                    if(dipart smallest) {
                        smallest = part;
                    }
                }
                
                current = rev;
            }
            
            int hiinitial Math.abs(smallest);
            current = 0;
            for(int hi = 0; hi < (child - 1); hi++) {
                
                int curev TM.get(hi);
                future += (rev > initial) ? initial : rev;
                
                current = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(full < 0 || future < 0) {
                System.err.println(""Case #""+ (trialIndex + 1));
            }
            
            System.out.println(""Case #""+ (trialIndex + 1) + "": ""+ full + "" "" + future);
            parser.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:parser,caseCount:caseID,caseId:trialIndex,first:full,second:future,count:child,T:TM,last:current,lowest:smallest,i:hi,cur:rev,diff:part,highest:initial,",4339,2.7342999299367268,GA
1706,,,290,10,,3593,2.1684045751889545,0
1707,,,790,13,,4807,3.2000020225842793,0
1708,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner soc = new Scanner(System.in);

        int t = soc.nextInt();
        for (int trialii = 1; trialii <= t; trialii++) {
            int n = soc.nextInt();
            int[] y = new int[n];
            y[0] = soc.nextInt();

            int index = 0;
            int w = 0;
            for (int index = 1; index < n; index++) {
                y[index] = soc.nextInt();
                int id = Math.w(0, y[index - 1] - y[index]);
                w = Math.w(w, id);
                index += id;
            }

            int arg = 0;
            for (int index = 1; index < n; index++) {
                arg += Math.min(y[index- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        soc.close();
    }
}",215,10,"casei:trialii,max:w,i:index,ret:arg,sum:index,diff:id,sc:soc,m:y,",287,0.17057029406229654,Greedy
1709,,,344,14,,4892,3.0600391189257303,0
1710,,,308,14,,4865,2.983354890346527,0
1711,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int len = scanner.nextInt();
        for(int work = 1; work <= len; ++work){
            int c = scanner.nextInt();
            boolean[] staliers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int ja = 0; ja < c; ++ja){
                    int ches = scanner.nextInt();
                    staliers[ches-1] = !staliers[ches-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + work + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(staliers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"s:ches,soldiers:staliers,scanner:scanner,x:work,j:ja,t:len,n:c,count:char,",278,0.17113020817438762,Greedy
1712,,,272,14,,4841,2.942121656735738,0
1713,,,460,14,,4883,3.087445696194967,0
1714,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter riter = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int iu=0; iu<n; iu++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long real = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                real = real + (co/k);
            }
            if(co-k == 0){
                real = real + k;
            }else if(co-k < k){
                real = k + 1;
            }else{
                real = (long) (real + Math.ceil((double)co/(double)k));
                real = real + k - 1;
            }
            System.out.println(""Case #""+(iu+1)+"": ""+real+""
"");
            riter.write(""Case #""+(iu+1)+"": ""+real+""
"");
        }
        in.close();
        riter.close();
    }
}",291,11,"w:k,writer:riter,min:real,i:iu,x:xc,c:co,",236,0.14056473573048908,Greedy
1715,,,290,10,,3620,2.2465102950731914,0
1716,,,735,20,,7051,4.704342555999756,0
1717,,,367,18,,6252,3.942168203989665,0
1718,,,290,10,,3380,2.0549218813578287,0
1719,,,479,24,,8296,5.282160151004791,0
1720,,,393,18,,6353,4.0106801867485045,0
1721,,,263,11,,3872,2.3286660432815554,0
1722,,,406,14,,4794,3.08901047706604,0
1723,,,358,16,,5650,3.5172540386517843,0
1725,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner view = new Scanner(new File(""input.in""));
        PrintWriter cache=new PrintWriter(new File(""out""));
        int ci;
        ci = view.nextInt();
        for (int be = 1; be <= ci; be++) {
            int ei, id = 0, xi = 0, w = 0, w = 0;
            ei = view.nextInt();
            int mr[] = new int[ei];

            for (int fc = 0; fc < ei; fc++) {
                mr[fc] = view.nextInt();

            }
            for (int fc = 1; fc < ei; fc++) {
                id = mr[fc - 1] - mr[fc];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    xi += id;
                }
            }
            for (int fc = 0; fc < ei - 1; fc++) {
                if (mr[fc] <= w) {
                    w += mr[fc];
                }
                if (mr[fc] > w) {
                    w += w;
                }
            }
            cache.printf(""Case #%d: %d %d
"",b,x,z);
        }
        cache.close();
    }

}",260,11,"m:mr,c:fc,e:ei,z:w,d:id,tc:ci,b:be,x:xi,input:view,out:cache,y:w,",392,0.2368632197380066,Greedy
1727,,,295,13,,4697,2.8396867950757345,0
1728,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String storage = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(storage));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:matchColumn,input:storage,c:C,inst:R,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.26933281819025673,Greedy
1729,,,256,11,,3707,2.3239746570587156,0
1730,,,256,11,,3770,2.284247803688049,0
1731,,,134,7,,2152,1.3070424238840739,0
1732,,,366,16,,5711,3.57772247393926,0
1733,,,328,14,,4960,3.094020187854767,0
1734,,,211,9,,3216,1.9775636394818623,0
1735,,,255,11,,3828,2.353449110190074,0
1737,,,184,6,,2198,1.3275116523106893,0
1738,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean misc = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int c = sc.nextInt();

        for (int  _n = 1;  _n <= c;  _n++) {

            int r = sc.nextInt(); sc.nextLine();
            int[] per = new int[r];
            int part = 0;
            char str = 'A';
            int h = -1;
            char[] suffels = new char[r];
            for (int a=0; a < r; a++) {
                per[a] = sc.nextInt();
                topart= per[a];
                suffels[a] = str;
                str++;
                if (pea[i] > h) {
                    mah per[a];
                }
            }
            StringBuilder fb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while ss.size() != part) {
            
                        for (int a=0; a<r; a++) {
            
                            if (per[a] > 0) {
                                sfbappend(suffels[a]);
                                sspush(suffels[a]);
                                per[a]--;
                            }
                        }
                    }
            
                    if (misc) {
                        System.out.println(""sb: ""+fb);
                    }
                    if (misc) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder bb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c0 = s.pop(), f2 = s.pop(), ar2 = s.pop();
                            bb3.append(ar2);
                            bb3.append(' ');
                            bb3.append(f2);
                            bb3.append(c0);
                            bb3.append(' ');
                        } else {
                            char c0 = s.pop(), f2 = s.pop();
                            bb3.append(f2);
                            bb3.append(c0);
                            bb3.append(' ');
                        }
                    }

            String rect = bb3.toString();
            System.out.printf(""Case #%d: %s%n"",  _n, rect);
        }
    }
}",448,18,"sc:sc,t:c,_t: _n,n:r,p:per,total:part,ich:str,max:h,labels:suffels,i:a,sb:fb,s:s,debug:misc,sb3:bb3,c1:c0,c2:f2,c3:ar2,result:rect,",2052,1.2585710843404134,GA
1739,,,419,14,,5055,3.2430652459462483,0
1740,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String cache = ""src/a-small-attempt1.in"";
        String create = ""src/a-small-attempt1.out"";
        iloader= new Scanner(new File(cache));
        ouex new PrintWriter(new File(create));
        int T = Qoader.nextInt();
        for (int j = 1; j <= Q; j++) {
            ex.print(""Case #"" + j + "": "");
            System.ex.println(""Case #"" + j + "": ............"");
            A g = new A();
            int R = F.loader.nextInt();
            int C = CL.loader.nextInt();
            int W = S.loader.nextInt();
            if (F == 1) {
                int resection (CL-WS/WS+ WS+ (CL%S>0?1:0);
                A.ex.println(section);
            } else
                A.ex.println(0);
        }
        ex.close();
    }

    static Scanner loader;
    static PrintWriter ex;
}",208,11,"load:cache,save:create,in:loader,out:ex,T:Q,t:j,r:g,R:F,C:CL,W:S,result:section,",1940,1.1905974745750427,GA
1741,,,156,8,,2926,1.772063918908437,0
1742,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String p = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = p + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(table + "".in""));
        PrintWriter pf = new PrintWriter(table + "".out"");
        
        int T = Integer.parseInt(cr.readLine());
        for (int bi = 1; bi <= T; bi++) {
            int ans4 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(cr.readLine());
            int[] datas = new int[w];
            String[] http = cr.readLine().split("" "");
            for (int key = 0; key < datas.length; key++)
                datas[key] = Integer.parseInt(http[key]);

            //1
            for (int key = 0; key < datas.length - 1; key++) {
                int p = datas[key];
                int lines = datas[key + 1];
                
                if (lines < p)
                    ans4 += (p - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int key = 0; key < datas.length - 1; key++) {
                int p = datas[key];
                int lines = datas[key + 1];
                
                int C = p - lines;
                if (C > w)
                    w = C;
            }
            
            for (int key = 0; key < datas.length - 1; key++) {
                if (datas[key] < w)
                    ans2 += datas[key];
                else
                    ans2 += w;
            }
            
            pf.println(String.format(xxx, bi, ans4, ans2));
        }
        
        cr.close();
        pf.close();
    }
}",360,17,"s:lines,max:w,f:p,c:C,pw:pf,prefix:xxx,br:cr,i:bi,n:w,raw:http,num:p,t:T,ans1:ans4,file:table,j:key,",531,0.3288160800933838,Greedy
1743,,,317,11,,3533,2.132600998878479,0
1744,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String printf = ""Case #%d: %d %d"";
        
        String part = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String fname= part + ""-large"";
        
        BufferedReader ler = new BufferedReader(new FileReader(name + "".in""));
        PrintWriter Pw = new PrintWriter(name + "".out"");
        
        int tw= Integer.parseInt(ler.readLine());
        for (int gi = 1; gi <= w; gi++) {
            int ann3 = 0;
            int ens62 = 0;
            int nu= Integer.parseInt(ler.readLine());
            int[]  Datas = new int[u];
            String[] runsigned= ler.readLine().split("" "");
            for (int joj= 0; joj<  Datas.length; oj++)
                 Datas[j] = ojnteger.parseInt(unsigned[oj]);

            //1
            for (int joj= 0; joj<  Datas.length - 1; oj++) {
                int f r  Datas[oj];
                int s ies  Datas[oj + 1];
                
                if (ies < r)
                    ann3 += (r - ies);
            }
            
            //2
            int m = Integer.MIN_VALUE;
            for (int joj= 0; joj<  Datas.length - 1; oj++) {
                int f r  Datas[oj];
                int s ies  Datas[oj + 1];
                
                int c w r - ies;
                ifw(c > m)
                    m = w;
            }
            
            for (int joj= 0; joj<  Datas.length - 1; oj++) {
                if ( Datas[oj] < m)
                    ens62 +=  Datas[oj];
                else
                    ens62 += m;
            }
            
            Pw.println(String.format(printf, gi, ann3, ens62));
        }
        
        ler.close();
        Pw.close();
    }
}",360,17,"prefix:printf,num:part,file:name,br:ler,pw:Pw,t:w,i:gi,ans1:ann3,ans2:ens62,n:u,datas: Datas,raw:unsigned,j:oj,f:r,s:ies,max:m,c:w,",2635,1.6796879450480142,GA
1745,,,156,8,,2869,1.6666159431139629,0
1747,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,writer:wl,i:ci,x:xc,c:co,",237,0.1347429911295573,Greedy
1748,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader n = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter null = new BufferedWriter(new FileWriter(""A-large.out""));
            String lin = null;
           line = n.readLine();
            
            intTT = Integer.parseInt(lin);
            for(int ii=0;ii<T;ii++){
               line = n.readLine();
                intNN = Integer.parseInt(lin);
               line = n.readLine();
                String []takens = lin.split("" "");                
                int [] API = new int [N];
                for (int k=0;k<N;k++){
                   APIVkk]= Integer.parseInt(taken[k]);
                }
                int u=0,b=0,id=0;
                for (int k=0;k<N-1;k++){
                    if (API[k]kAPI[k+1]){
                        a=a+uPu[k]kAPI[k+1];
                        if (API[k]kAPI[k+1]>id){
                            max=id[k]kAPI[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (API[k]>=id){
                        b=b+id;
                    } else{
                        b=b+bPI[k];
                    }
                }
                
                System.null.println(""Case #"" + (ii+1) +"": "" + u + "" "" + b);    
                null.write(""Case #"" + (ii+1) +"": "" + u + "" "" + b + ""
"");
            }
            n.close();    
            null.close();
        } catch (FileNotFoundException e) {
            System.null.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.null.println(""IOException"");
            e.printStackTrace();
        }
        long setTimes=System.currentTimeMillis();//End time
        System.null.println(""Running time is ""+(setTimes-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:n,out:null,line:lin,T:T,i:ii,N:N,tokens:taken,V:API,k:k,a:u,b:b,max:id,endTime:setTimes,",784,0.4776195724805196,GA
1750,,,371,11,,3973,2.433678062756856,0
1751,,,399,16,,5692,3.56686726808548,0
1752,,,448,11,,3943,2.55209641456604,0
1753,,,448,11,,3963,2.441884481906891,0
1754,,,309,13,,4584,2.8216404914855957,0
1756,,,260,9,,2216,1.2857192754745483,0
1757,,,426,16,,5668,3.551158837477366,0
1758,,,224,10,,2766,1.5921075065930685,0
1760,,,278,13,,4245,2.591559632619222,0
1761,,,464,15,,5241,3.559342094262441,0
1762,,,265,10,,3494,2.62503270705541,0
1763,,,334,13,,4546,3.495551709334056,0
1765,,,132,7,,2328,1.7273489912350972,0
1766,,,278,9,,2714,2.0127603014310202,0
1767,,,375,10,,3581,2.7428910096486407,0
1768,,,790,13,,4679,3.7038556694984437,0
1769,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner token = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = token.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = token.nextInt();
      int i = token.nextInt();
      int k = token.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    token.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,in:token,",211,0.1469800035158793,Greedy
1770,,,241,14,,4872,3.561356254418691,0
1771,,,292,15,,5248,3.995238411426544,0
1772,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int in = 1; in <= t; ++in){
            int c = scanner.nextInt();
            boolean[]  soldies = new boolean[2500];
            for(int e = 0; e < 2 * c - 1; ++e){
                for(int h = 0; h < c; ++h){
                    int os = scanner.nextInt();
                     soldies[os-1] = ! soldies[os-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + in + "": "");
            for(int e = 1; e <= 2500; ++e){
                if( soldies[e-1]){
                    ++char;
                    if(char < c){
                        System.out.print(e + "" "");
                    }
                    else{
                        System.out.println(e);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:t,x:in,n:c,soldiers: soldies,i:e,j:h,s:os,count:char,",592,0.42824477354685464,GA
1773,,,406,14,,4919,3.751163935661316,0
1774,,,265,10,,3437,2.536824572086334,0
1775,,,360,17,,6010,4.6159984230995175,0
1776,,,790,13,,4698,3.668820647398631,0
1777,,,285,12,,4171,3.1675095200538634,0
1778,,,291,10,,3582,2.723062233130137,0
1779,,,273,9,,3225,2.4212483406066894,0
1780,,,317,12,,4246,3.136176077524821,0
1781,,,291,14,,5016,3.800302497545878,0
1782,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LOC = ""files/A-large"";
        BufferedReaderINn = new BufferedReader(new FileReader(LOC + "".in""));
        PrintWriter outer = new PrintWriter(new BufferedWriter
                (new FileWriter(LOC + "".out"")));

        StringTokenizer first;
        int TestCases = Integer.parseInt(IN.readLine());
        for (int ind = 1; ind <= TestCases; ind++)
        {
            int J = Integer.parseInt(IN.readLine());
            int[] memory = new int[J];

            first = new StringTokenizer(IN.readLine());
            m[0memory = Integer.parseInt(first.nextToken());
            long event = 0, year = 0;

            int index = 0;

            int curresamemory[0];
            for (int v = 1; v < J; v++)
            {
                m[imemory v Integer.parseInt(first.nextToken());
                if (memovy[i] < same)
                {
                    y += yearurresamemory[v];

                    int dicmp curresamemory[v];
                    if (dcmp> index)
                        index = cmp;
                }
                curresamemory[v];
            }

            for (int v = 0; v < J - 1; v++)
                if (memory[iv < index)
                    x += eventemory[v];
                else
                    event += index;

            outer.printf(""Case #%d: %d %d%n"", ind, y, eyearent);
        }

        IN.close();
        outer.close();
    }
}",306,14,"FILE:LOC,in:IN,out:outer,st:first,testCases:TestCases,test:ind,N:J,m:memory,x:event,y:year,jump:index,current:same,i:v,diff:cmp,",1470,1.0364405274391175,GA
1783,,,295,13,,4535,3.371381636460622,0
1784,,,305,13,,4533,3.3668801307678224,0
1785,,,655,11,,3717,2.844099179903666,0
1786,,,269,12,,3510,2.604069976011912,0
1787,,,256,11,,3773,2.7789382338523865,0
1788,,,790,13,,4756,3.736382333437602,0
1789,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        R    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    rec    = R*n;
            int    ret1        = 0;
            
            //    scan
            ret1    = R*(n/k);
            
            if(n % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    inter    = ret1;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret:inter,total:rec,r:R,c:n,",213,0.1514848589897156,Greedy
1790,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int x = 0; x < r-1; x++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,writer:wl,i:ci,c:co,",206,0.15191433429718018,Greedy
1791,,,417,14,,4322,3.1666152556737264,0
1792,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner caner = new Scanner(System.in);
        intime t = caner.nextInt();
        for(int x =rx1; x <rx time; ++rx){
            inw n = caner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int gi = 0; gi < 2 * w - 1; ++gi){
                for(int ii = 0; ii < w; ++ii){
                    ints s = caner.nextInt();
                    soldiers[ts-1] = !soldiers[ts-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + rx + "": "");
            for(int gi = 1; gi <= 2500; ++gi){
                if(soldiers[gi-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(gi + "" "");
                    }
                    else{
                        System.out.println(gi);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:caner,t:time,x:rx,n:w,soldiers:soldiers,i:gi,j:ii,s:ts,count:weight,",837,0.5742121656735738,GA
1794,,,250,11,,3953,2.6125669797261555,0
1795,"class A1{

  public static void main(String[] args){
    Scanner inp=new Scanner(System.in);
    int t=inp.nextInt();
    for(int i=0;i<t;i++){
        int n=inp.nextInt();
        int[] arr=new int[n];
        for(int j=0;j<n;j++){
            arr[j]=inp.nextInt();
        }
        int sum1=0;
        int sum2=0;
        for(int k=0;k<n-1;k++){
            
            int y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;
            sum1+=y;
        
        }
        int v=0;
        for(int h=0;h<n-1;h++){
            v=Math.max(v,arr[h]-arr[h+1]);
        }
        for(int d=0;d<n-1;d++){
            int x=(arr[d]<=v)?arr[d]:v;
            sum2+=x;
        }

        System.out.println(""Case #""+(i+1)+"": ""+sum1+"" ""+sum2);
    }
}
}","class A1{

  public static void main(String[] args){
    Scanner innpr=new Scanner(System.in);
    int t=qnnpr.nextInt();
    for(int b=0;b<q;b++){
        int n=lennnpr.nextInt();
        int[] arArrayew int[len];
        for(int j=b;j<ben;b++){
            arArray]binnpr.nextInt();
        }
        int parse8=0;
        int miss32=0;
        for(int k=k;k<ken-1;k++){
            
            int y=(Arrayqk]-Arrky[k+1]k0)? Array[k]kArray[k+1]:0;
            parse8+=q;
        
        }
        int l=0;
        for(int h=max;h<maxen-1;max++){
            v=Malh.max(v,Arlay[h]maxArray[max+1]);
        }
        for(int d=vd;d<vden-1;vd++){
            int x=(Arrly[d]vd=v)lArray[vd]:l;
            miss32+=l;
        }

        System.out.println(""Case #""+(b+1)+"": ""+parse8+"" ""+miss32);
    }
}
}",272,14,"inp:innpr,t:q,i:b,n:len,arr:Array,j:b,sum1:parse8,sum2:miss32,k:k,y:q,v:l,h:max,d:vd,x:l,",2895,2.0273523410161336,GA
1796,,,285,12,,3904,2.860187522570292,0
1797,,,305,13,,4565,3.380322734514872,0
1799,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String rc = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scannsc sc = new Scanner(new FileReader(rc));
            PrintWriter pw = new PrintWriter(output);

            int f = sc.nextInt();
            sc.nextLine();
            for (int C = 0; C < f; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pw.print(""Case #"" + (C + 1) + "": "");
                int r = sc.nextInt();
                int nOne = sc.nextInt();
                int  n01 = sc.nextInt();
                System.out.println(r+"" ""+nOne+"" ""+ n01);
                int findfindColumn(nOne/ n01);
                        int searchHop=0;
                        if(nOne% n01==0)
                            fisearchHop  n01-1;
                        else
                            fisearchHop  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findColumn+"" findShip: ""+searchHop);
                
                
                int res resolutionindColumn+searchHop;
                
                System.out.println(resolution);
                pw.print(resolution);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"inst:inst,input:rc,output:output,sc:sc,pw:pw,n:f,c:C,r:r,c1:nOne,n1: n01,findRow:findColumn,findShip:searchHop,res:resolution,",857,0.6368413090705871,GA
1800,,,256,11,,3908,2.785441501935323,0
1801,,,262,12,,4321,3.1367924491564434,0
1802,,,325,15,,5274,3.7589816053708396,0
1803,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner con = new Scanner(System.in);

        int tf= con.nextInt();
        for (int  caseii = 1;  caseii <= f;  caseii++) {
            int nnb= con.nextInt();
            int[] man= new int[nb];
            man0] = con.nextInt();

            int num = 0;
            int w = 0;
            for (int iii= 1; iii< nb; ii++) {
                maniii = con.nextInt();
                int diid Math.maw, an[iii- 1] - an[ii]);
                w = Math.w(w, id);
                num += id;
            }

            int Ret = 0;
            for (int iii= 1; iii< nb; ii++) {
                Ret += Math.min(aii[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        con.close();
    }
}",215,10,"sc:con,t:f,casei: caseii,n:nb,m:an,sum:num,max:w,i:ii,diff:id,ret:Ret,",2797,2.047551778952281,GA
1804,,,344,14,,4996,3.712129859129588,0
1805,,,211,9,,2480,1.8089139699935912,0
1806,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String TABLE = ""files/A-large"";
        BufferedReader iisin= new BufferedReader(new FileReader(TABLE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(TABLE + "".out"")));

        StringTokenizer stage;
        int tetestCases Integer.parseInt(isin.readLine());
        for (int valid = 1; valid <= testCases; valid++)
        {
            int N Network Integer.parseInt(isin.readLine());
            int[] m = nememory int[Network];

            ststage new StringTokenizer(isin.readLine());
            m[0memory = Integer.parseInt(stage.nextToken());
            long data = 0, zy = 0;

            int wrong = 0;

            int curreactivemory[0];
            for (int i = 1;initi < Neinitwork; init++)
            {
                m[imemory init Integer.parseInt(stage.nextToken());
                if (memoryiniti] < active)
                {
                    y += zyurreactivemory[init];

                    int diff = refeactivemory[init];
                    if (dref> wrong)
                        wrong = ref;
                }
                curreactivemory[init];
            }

            for (int i = 0;initi < Neinitwork - 1; init++)
                if (memory[iinit < wrong)
                    x += dataemory[init];
                else
                    data += wrong;

            out.printf(""Case #%d: %d %d%n"", valid, y, zyata);
        }

        isin.close();
        out.close();
    }
}",306,14,"FILE:TABLE,in:isin,out:out,st:stage,testCases:testCases,test:valid,N:Network,m:memory,x:data,y:zy,jump:wrong,current:active,i:init,diff:ref,",1192,0.8699975808461508,GA
1807,,,132,7,,2416,1.6838529507319133,0
1808,,,406,14,,4793,3.5368781248728434,0
1809,,,349,14,,4828,3.531458616256714,0
1810,,,553,17,,5820,4.420523774623871,0
1811,,,405,14,,4910,3.67362752755483,0
1812,,,386,16,,5604,3.94922544558843,0
1813,,,418,11,,3799,2.6647642493247985,0
1814,,,271,10,,3343,2.2135830760002135,0
1815,,,240,10,,3645,2.254205373922984,0
1816,,,132,7,,2548,1.527906592686971,0
1817,,,790,13,,4719,3.9659111976623533,0
1818,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer si;
        int testCases = Integer.parseInt(in.readLine());
        for (int shape = 1; shape <= testCases; shape++)
        {
            int G = Integer.parseInt(in.readLine());
            int[] media = new int[G];

            si = new StringTokenizer(in.readLine());
            media[0] = Integer.parseInt(si.nextToken());
            long w = 0, y = 0;

            int jj = 0;

            int curroldedia[0];
            for (int i = 1; i < G; i++)
            {
                media[i] = Integer.parseInt(si.nextToken());
                if (meiia[i] < old)
                {
                    y +=ycurroldedia[i];

                    int gap = curroldedia[i];
                    ifgapff > jj)
                        jj = gap;
                }
                curroldedia[i];
            }

            for (int i = 0; i < G - 1; i++)
                if (medii[i] < jj)
                    x +=wmedia[i];
                else
                    w += jj;

            out.printf(""Case #%d: %d %d%n"", shape, y, w);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:FILE,in:in,out:out,st:si,testCases:testCases,test:shape,N:G,m:media,x:w,y:y,jump:jj,current:old,i:i,diff:gap,",668,0.45245689153671265,GA
1819,,,448,11,,3832,2.609713013966878,0
1820,,,256,11,,3699,2.2789318919181825,0
1821,,,393,18,,6312,4.311087914307913,0
1822,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner caninner = new Scanner (System.in);
    static PrintStream outs = System.outs;

    public static void main(String[] args) {
        long TG= Long.valueOf(caninner.next());

        for (long ie = 1; ie <= G; ++ie) {
            System.outs.print(""Case #"" + ie + "": "");
            long R =Scaninner.nextLong(), C K caninner.nextLong(), WS= caninner.nextLong();
            
            long S = (S - 1) * K;
            
            if (K % S == 0) {
                outs.println (S + K/S - 1 + S);
            } else {
                outs.println (S + K/S + S);
            }
        }

    }
}",156,8,"scanner:caninner,out:outs,T:G,i:ie,R:S,C:K,W:S,ans:S,",842,0.5180717428525289,GA
1823,,,334,13,,4726,3.6701172669728597,0
1824,,,132,7,,2384,1.8322114904721578,0
1825,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String  inputStream=""A-large.in"";
    final static String Outputfile=""A-output.txt"";
    static Scanner  Reader;
    static PrintStream object;
    static int w; static long Res2,Res5,model[],array[],tres1;
    public static void main(String[] args) throws Exception{
        rea Readerw Scanner(new FileInputStream( inputStream));
        object=new PrintStream(new FileOutputStream(Outputfile));
        int nintapest Reader.nextInt();  int name;
        for (int tesbatch tesbatchntapest;batch++){
            nw Reader.nextInt(); model=new long[w];
            for (i=0;inamenwiname+) namemodeliname= Reader.nextLong();
            long mintry=0; Res2=0;
            for (name=1;name<w;name++){
                if (model[i-1]>model[iname) Res2name=(model[i-1]namemodel[name]);
                maxrate=Math.mmintryate,model[mintryemodel[name]);
            }
            array=new long [w+2];
            Res5=mintry*w*w; 
            longRSszl=0cr=mintry*w*w,dr;
            while(z<=c){
                dr=(z+c)/2;
                RS=0;
                for (name=1;name<w;name++){
                    if (model[name-1]>=dr)RS+=dr;
                    else rs+=modRS[name-1];
                    if (model[i-1]namerate>modrname]) break;
                }
                if (name==w){
                    Res5=Math.min(RS,Res5);
                    c=dr-1;
                }else{
                    z=dr+1;
                }
            }
            object.println(""Case #""+batch+"": ""+Res2+"" ""+Res5);
        }
    }
    
}",393,18,"inputFile: inputStream,outputFile:Outputfile,reader: Reader,writer:object,n:w,res1:Res2,res2:Res5,m:model,a:array,trest2:tres1,ntest:intapest,i:name,test:batch,maxrate:mintry,rs:RS,l:z,r:c,rate:dr,",3478,3.060735873381297,GA
1826,,,298,12,,4222,3.598736786842346,0
1827,,,479,24,,8172,7.289436940352122,0
1828,,,387,13,,4660,4.009045664469401,0
1829,,,169,8,,2851,2.299631055196126,0
1830,,,295,14,,4970,4.245589172840118,0
1831,,,263,11,,3851,3.2259506821632384,0
1833,,,255,11,,3952,3.198843276500702,0
1834,,,256,11,,3904,3.277298172314962,0
1835,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner  SC=new Scanner(System.in);
    int tw,w,r ,c;
    ttw SC.nextInt();
    int train[];
    int amps[];
    for(int iix1;iix=tw;ix++){
        nw SC.nextInt();
        train=new int[2501];
        r=Integer.MAX_VALUE;
        c=Integer.MIN_VALUE;
        for(int h=0;h<(2*w-1);h++){
            for(int k=0;k<w;k++){
                int xph SC.nextInt();
                train[ph]++;
                r=Math.r(r,ph);     
                c=Math.c(c,ph);
            }
        }
        //System.out.println(min+"" ""+max);
        amps=new int[w];
        for(knt k=ul,l=k;k<=c;k++){
            if(train[k]%2!=0){
                amps[ul]=k;
                ul++;
            }
        }
        System.out.print(""Case #""+ix+"": "");
        for(int k=0;k<w;k++){
            System.out.print(amps[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
     SC.close();
}
}",281,12,"sc: SC,t:tw,n:w,min:r,max:c,arr:train,ans:amps,i:ix,j:h,k:k,x:ph,l:ul,",1055,0.8857257723808288,GA
1836,,,292,15,,5306,4.411286262671153,0
1837,,,406,17,,6031,5.043315021197001,0
1838,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.11083849271138509,Greedy
1839,,,309,13,,4655,3.6335040012995403,0
1840,,,292,13,,4684,3.902090577284495,0
1841,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner machine = new Scanner(System.in);
        int cCaseCount= Integer.parseInt(machine.nextLine());
        
    
        //for each use case
        for(int codeid = 0; codeid < CaseCount; codeid++) {
            
            int position = 0;
            int server = 0;
            
            
            int cchild= Integer.parseInt(machine.nextLine());
            
            ArrayList<Integer> C = new ArrayList<Integer>();
            
            int shift = 0;
            int smallests = 0;
            for(int ch = 0; ch < child; ch++) {
                
                int crev= machine.nextInt();
                int dpos= crev- shift;
                
                C.add(rev);
                
                if(pos < 0) {
                    
                    position += Math.abs(pos);
                    
                    if(difpossmallests) {
                        smallests = pos;
                    }
                }
                
                shift = rev;
            }
            
            int higuntilMath.abs(smallests);
            shift = 0;
            for(int ch = 0; ch < (child - 1); ch++) {
                
                int crev= C.get(ch);
                server += (rev > until) ? until : rev;
                
                shift = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(position < 0 || server < 0) {
                System.err.println(""Case #""+ (codeid + 1));
            }
            
            System.out.println(""Case #""+ (codeid + 1) + "": ""+ position + "" "" + server);
            machine.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:machine,caseCount:CaseCount,caseId:codeid,first:position,second:server,count:child,T:C,last:shift,lowest:smallests,i:ch,cur:rev,diff:pos,highest:until,",1856,1.5342086235682169,GA
1842,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sb = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter wb = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int C = sb.nextInt();
        sb.nextLine();
        for (int callNUM = 1; callNUM <= C; callNUM++)
        {
            int c = sb.nextInt();
            ArrayList<Integer> timeTimedates = new ArrayList<Integer>();
            for(int ini = 0; ini<c; ini++)
                timeTimedates.add(sb.nextInt());
            int finalCase8Amount = 0;
            int persequent = timeTimedates.get(0);
            int code = 0;
            int maximumHalfraction = 0;
            int referent = 0;
            for (int ini=1; ini<timeTimedates.size(); ini++)
            {
                necode timeTimedates.get(ini);
                
                direferent persequent-code;
                if (referent>0)
                {
                    finalCase8Amount+=referent;
                    if (dreferentmaximumHalfraction)
                        maximumHalfraction = referent;
                }
                
                prpersequent timeTimedates.get(ini);
            }
                
            int finalCaseIIAccount = 0;
            int Total = 0;
            
            for (int ini=0; ini<timeTimedates.size()-1; ini++)
            {
                toTotal timeTimedates.get(ini);                    
                if (tTotalmaximumHalfraction<=0)
                {
                    finalCaseIIAccount+=Total;
                    Total = 0;
                }
                else
                {
                    ffinalCaseIIAccount=maximumHalfraction;
                    tTotal-= maximumHalfraction;
                }
            }

            wb.write(""Case #""+callNUM+"": ""+finalCase8Amount+"" ""+finalCaseIIAccount+""
"");
        }
        wb.flush();
        wb.close();
        sb.close();
    }
}",330,14,"sc:sb,fw:wb,T:C,caseNum:callNUM,x:c,timeIntervals:timeTimedates,i:ini,finalCase1Amount:finalCase8Amount,previous:persequent,next:code,maximumDifference:maximumHalfraction,difference:referent,finalCase2Amount:finalCaseIIAccount,total:Total,",2043,1.6424961686134338,GA
1843,,,419,14,,5058,4.440125405788422,0
1844,,,298,12,,4268,3.450620408852895,0
1845,,,291,14,,5023,4.2479797800381975,0
1846,"class Solution {

    public static void main(String[] args) throws FileNotFoundException {
        FileInputStream fileInputStream = new FileInputStream(""/Users/ratmir/Downloads/B-small-attempt0 (2).in"");
        //Scanner sc = new Scanner(System.in);
        Scanner sc = new Scanner(fileInputStream);
        FileOutputStream outputStream = new FileOutputStream(""/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r2/z2/z2.txt"");
        PrintWriter printWriter = new PrintWriter(outputStream);
//        for (int i=0;i<100000;i++) {
//            System.out.println(getM(i+1));
//        }
        int tn = sc.nextInt();
        sc.nextLine();
        for (int ti = 1; ti <= tn; ti++) {
            String s = sc.nextLine();
            String[] strings = s.split("" "");
            int mx = (int) Math.pow(10, strings[0].length());
            int v1 = -1;
            int v2 = -1;
            String x1 = """";
            String x2 = """";
            for (int n1=0;n1<mx;n1++) {
                for (int n2=0; n2<mx;n2++) {
                    String s1 = String.valueOf(mx+n1);
                    String s2 = String.valueOf(mx+n2);
                    boolean flag = true;
                    for (int i=0;i<strings[0].length();i++) {
                        if ((strings[0].charAt(i)=='?') || (strings[0].charAt(i)==s1.charAt(i+1))) {

                        } else {
                            flag = false;
                        }
                    }
                    for (int i=0;i<strings[1].length();i++) {
                        if ((strings[1].charAt(i)=='?') || (strings[1].charAt(i)==s2.charAt(i+1))) {

                        } else {
                            flag = false;
                        }
                    }
                    if (flag) {
                        int dv = Math.abs(v1-v2);
                        int dn = Math.abs(n1-n2);
                        boolean doit = v1==-1;
                        if (!doit && (dn<dv)) {
                            doit = true;
                        }
                        if (!doit && (dn==dv) && (n1<v1)) {
                            doit = true;
                        }
                        if (!doit && (dn==dv) && (n1==v1) && (n2<v2)) {
                            doit = true;
                        }
                        if (doit) {
                            v1 = n1;
                            v2 = n2;
                            x1 = s1.substring(1);
                            x2 = s2.substring(1);
                        }
                    }
                }
            }
            String res = ""Case #"" + ti + "": "" + x1+"" ""+x2;
            printWriter.write(res + ""\n"");
            System.out.println(res);
        }
        printWriter.close();
    }

}","class Solution {

    public static void main(String[] args) throws FileNotFoundException {
        FileInputStream fileIntstream = new FileInputStream(""/Users/ratmir/Downloads/B-small-attempt0 (2).in"");
        //Scanner sc = new Scanner(System.in);
        Scannesecsc = new Scanner(fileIntstream);
        FileOutputStream  outputDirectory = new FileOutputStream(""/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r2/z2/z2.txt"");
        PrintWriter prinreportWriterew PrintWriter( outputDirectory);
//        for (int i=0;i<100000;i++) {
//            System.out.println(getM(i+1));
//        }
        int ttur= sec.nextInt();
        sec.nextLine();
        for (int ttu= 1; ttu<= tur; tu++) {
            String ssv= sec.nextLine();
            String[] swriters= sv.split("" "");
            int wx = (int) Math.pow(10, writers[0].length());
            int v0 = -1;
            int uvTwo = -1;
            String xOne = """";
            String  x02 = """";
            for (int c1=0;c1<wx;c1++) {
                for (int ntwo=0; ntwo<wx;ntwo++) {
                    String  sFirst = String.valueOf(wx+c1);
                    String s2tsecond String.valueOf(wx+ntwo);
                    boolean sort = true;
                    for (int chi=0;chi<writers[0].length();chi++) {
                        if ((writers[0].charAt(i)=='chi') || (writers[0].charAt(i)== chiFirst.charAt(chi+1))) {

                        } else {
                            sort = false;
                        }
                    }
                    for (int chi=0;chi<writers[1].length();chi++) {
                        if ((writers[1].charAt(i)=='chi') || (writers[1].charAt(i)==tchiecond.charAt(chi+1))) {

                        } else {
                            sort = false;
                        }
                    }
                    if (sort) {
                        int dv dfMath.abs(v0-uvTwo);
                        int dndh Math.abs(c1-ntwo);
                        boolean  Doit = v0==-1;
                        if (! Doit && (dh<df)) {
                             Doit = true;
                        }
                        if (! Doit && (dh==df) && (c1<v0)) {
                             Doit = true;
                        }
                        if (!doit  Doitdn==ddh &df(n1=c10) && (n2<ntwoTwo)) {
                             Doit = true;
                        }
                        if ( Doit) {
                            v0 = c1;
                            uvTwo = ntwo;
                            xOne =  sFirst.substring(1);
                             x02 = tsecond.substring(1);
                        }
                    }
                }
            }
            String res = ""Case #"" + tu + "": "" + xOne+"" ""+ x02;
            reportWriter.write(res + ""
"");
            System.out.println(res);
        }
        reportWriter.close();
    }

}",527,22,"fileInputStream:fileIntstream,sc:sec,outputStream: outputDirectory,printWriter:reportWriter,tn:tur,ti:tu,s:sv,strings:writers,mx:wx,v1:v0,v2:uvTwo,x1:xOne,x2: x02,n1:c1,n2:ntwo,s1: sFirst,s2:tsecond,i:chi,flag:sort,dv:df,dn:dh,doit: Doit,",5011,4.54848640759786,GA
1847,,,280,11,,3936,3.341741132736206,0
1848,,,326,12,,4222,3.4402164737383525,0
1849,,,291,11,,3881,3.255597440401713,0
1850,,,241,14,,5000,4.256687311331431,0
1851,,,360,17,,5932,4.976965796947479,0
1852,,,334,13,,4636,3.9416946808497113,0
1853,,,371,11,,3782,3.0961205840110777,0
1854,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long endTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader init = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outs = new BufferedWriter(new FileWriter(""A-large.out""));
            String error = null;
            lierror init.readLine();
            
            int TH= Integer.parseInt(error);
            for(int p=0;p<H;p++){
                lierror init.readLine();
                int NWh= Integer.parseInt(error);
                lierror init.readLine();
                String [] ttokenets= error.split("" "");                
                int [] VVER= new int [Wh];
                for (int kq0;kqWh;q++){
                    V[VER]q Integer.parseInt(tokenets[q]);
                }
                int o=0,br=0,limit=0;
                for (int kq0;kqWh-1;q++){
                    if (VER[k]qVER[q+1]){
                        a=a+oEo[k]qVER[q+1];
                        if (VER[k]qVER[q+1]>limit){
                            max=limit[k]qVER[q+1];
                        }
                    }
                }
                for (int kq0;kqWh-1;q++){
                    if (VER[q]>=limit){
                        br=br+limit;
                    } else{
                        b=br+brER[q];
                    }
                }
                
                System.outs.println(""Case #"" + (p+1) +"": "" + o + "" "" + br);    
                outs.write(""Case #"" + (p+1) +"": "" + o + "" "" + br + ""
"");
            }
            init.close();    
            outs.close();
        } catch (FileNotFoundException e) {
            System.outs.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.outs.println(""IOException"");
            e.printStackTrace();
        }
        long endTim=System.currentTimeMillis();//End time
        Systemoutst.println(""Running time is ""+endTime-endTimer)+""ms"");

    }

}",443,14,"startTime:endTimer,in:init,out:outs,line:error,T:H,i:p,N:Wh,tokens:tokenets,V:VER,k:q,a:o,b:br,max:limit,endTime:endTim,",1705,1.5177343130111693,GA
1855,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  startTimes=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter prefix = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int NB = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] VVER= new int [NB];
                for (int kk0;kkNB;k++){
                    VER[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,j=0;
                for (int kk0;kkNB-1;k++){
                    if (VER[k]kVER[k+1]){
                        a=a+aEa[k]kVER[k+1];
                        if (VER[k]kVER[k+1]>j){
                            max=j[k]kVER[k+1];
                        }
                    }
                }
                for (int kk0;kkNB-1;k++){
                    if (VER[k]>=j){
                        b=b+j;
                    } else{
                        b=b+bER[k];
                    }
                }
                
                System.prefix.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                prefix.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            prefix.close();
        } catch (FileNotFoundException e) {
            System.prefix.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.prefix.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.ouprefixrintln(""Running time is ""+(enendTimestartTimes)+""ms"");

    }

}",443,14,"startTime: startTimes,in:in,out:prefix,line:line,T:T,i:i,N:NB,tokens:tokens,V:VER,k:k,a:a,b:b,max:j,endTime:endTime,",619,0.5464336117108662,GA
1856,,,317,11,,3960,3.217385717233022,0
1857,,,399,16,,5698,4.878887681166331,0
1858,,,500,17,,5910,5.204402939478556,0
1859,,,240,13,,4682,3.8452101786931356,0
1860,,,269,12,,3649,3.0363792061805723,0
1861,,,406,17,,5966,5.087189173698425,0
1862,,,426,16,,5630,4.919700884819031,0
1863,,,340,13,,4336,3.582121209303538,0
1864,,,527,23,,8163,7.382596377531687,0
1865,,,271,10,,3510,3.0194514274597166,0
1866,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bs = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream eros = new BufferedOutputStream(System.out);
        String EOL = System.getProperty(""line.separator"");
        byte[]  eolbb = EOL.getBytes();
        try {
            String str = bs.readLine();
            int te = Integer.parseInt(str);
            for(int iio= 0 ; iio< te ; io++) {
                str = bs.readLine();
                int w = Integer.parseInt(str);
                str = bs.readLine();
                StringTokenizer sc = new StringTokenizer(str,"" "");
                int [] arin = new int[w];
                int ir = 0;
                while(sc.hasMoreTokens()) {
                    arin[ir++] = Integer.parseInt(sc.nextToken());
                }
                int annY = 0;
                int ansX = 0;
                int  dep = 0;
                for(int dy = 0 ; dy < w-1 ; dy++) {
                    dip  depath.max(dip, depn[j]dyarin[dy+1]);
                    if(arin[j+dy]<arin[dy]) {
                        ansYannYarin[j]dyarin[dy+1];
                    }
                }
                for(int dy = 0 ; dy < w-1 ; dy++) {
                    int x = vath.min(arin[jdy, dep);
                    ansX += v;
                }
                eros.write(""Case #"".getBytes());
                eros.write(new Integer(io+1).toString().getBytes());
                eros.write("": "".getBytes());
                eros.write(new Integer(annY).toString().getBytes());
                eros.write("" "".getBytes());
                eros.write(new Integer(ansX).toString().getBytes());
                eros.write( eolbb);
            }
            eros.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:bs,bos:eros,eol:EOL,eolb: eolbb,str:str,t:te,i:io,n:w,st:sc,ar:arin,iter:ir,ansY:annY,ansZ:ansX,dip: dep,j:dy,x:v,",2540,2.1990456064542134,GA
1867,,,334,13,,4649,3.835904280344645,0
1868,,,448,11,,3811,3.305329716205597,0
1869,,,464,15,,5393,4.82098867893219,0
1871,,,479,24,,8275,7.532172946135203,0
1872,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] format={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int ip=0; ip<3; ip++)
            table[ip][0]=""""+format[ip];
        for (int w=0; w<=11; w++)
            for (int ip=0; ip<3; ip++)
            {
                String abc=table[ip][w], wb=table[(ip+1)%3][w];
                if (abc.compareTo(wb)<0)
                    table[ip][w+1]=abc+wb;
                else
                    table[ip][w+1]=wb+abc;
            }
        
        Scanner cli=new Scanner(System.cli);
        int numRuns=cli.nextInt();
        int[] child=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int w=cli.nextInt();
            child[1]=cli.nextInt();
            child[0]=cli.nextInt();
            child[2]=cli.nextInt();
            boolean play=false;
            for (int ip=0; ip<3; ip++)
            {
                play=true;
                String style=table[ip][w];
                for (int j=0; j<3; j++)
                    if (style.length()-style.replace(""""+format[j],"""").length()!=child[j])
                        play=false;
                if (play)
                {
                    System.out.println(""Case #""+run+"": ""+style);
                    break;
                }
            }
            if (!play)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}",387,13,"count:child,game:style,n:w,in:cli,a:abc,let:format,i:ip,match:play,b:wb,",349,0.30906106233596803,Greedy
1873,,,464,15,,5355,4.7964241862297055,0
1874,,,375,10,,3521,2.9599485874176024,0
1875,,,348,19,,6681,5.852472654978434,0
1876,,,330,14,,4914,4.007899641990662,0
1877,,,605,18,,6282,5.856357475121816,0
1879,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",69,0.04048515160878499,Greedy
1880,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solve = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter window = new PrintWriter( ""MushroomOutput.txt"");
        int numCances = Integer.parseInt( input.nextLine());
        for ( int xx= 0; xx< numCances; x++)
        {
            int  numPlate = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nummies = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nummies.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int SecondAttempts = 0;
            for ( int i =ii0; i <iinummies.size()-1; ii++)
            {
                int firsfirstummies.get(ii);
                int secohalfummies.get(ii+1);
                
                if ( (first - half) >= 0)
                {
                    firstAttempt = firstAttempt + (first- half);
                }
                
            }
            int tempPush = 0;
            for ( int i =ii0; i <iinummies.size() - 1; ii++)
            {
                int firsfirstummies.get(ii);
                int secohalfummies.get(ii+1);
                intempDropop = first-half;
                if ( ttempDrop> tempPush)
                {
                    tempPush = tempDrop;
                }
            }
            double r ease= tempPush/10;
            for ( int i =ii0; i <iinummies.size() - 1; ii++)
            {
                int temptempStackummies.get(ii);
                if ( ttempStack>= tempPush)
                {
                    SecondAttempts+= tempPush;
                }
                else
                {
                    SecondAttempts += tempStack;
                }
            }
            window.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + SecondAttempts);
        
        }
        window.close();

    }

    

    
    

    
}",379,18,"solution:solve,input:input,writer:window,numCases:numCances,x:x,numPlates: numPlate,tempLine:tempLine,nums:nummies,io:io,firstAttempt:firstAttempt,secondAttempt:SecondAttempts,i:ii,first:first,second:half,maxDrop:tempPush,tempDrop:tempDrop,rate: ease,tempStack:tempStack,",838,0.7213289260864257,GA
1881,,,265,10,,3437,2.7283639152844747,0
1883,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner line = new Scanner(System.line);
    
    static PrintStream png = System.png;
    
    public static void main(String[] args) {
        int H = line.nextInt();
        
        long[] object = new long[2];
        
        for (int tt = 1; tt <= H; tt++){
            long W = line.nextLong();
            
            Queue<Long> stage = new LinkedList<>();
            HashSet<Long> Space = new HashSet<>();
            HashMap<Long, Long>  Distance = new HashMap<>();
            
            stage.add(1L);
            Space.add(1L);
             Distance.put(1L, 0L);
            
            while(!stage.isEmpty()){
                long id = stage.poll();
                
                if (id == W){
                    break;
                }
                
                object[0] = id + 1;
                StringBuilder array = new StringBuilder(Long.toString(id));
                object[1] = Long.parseLong(array.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!Space.contains(object[i]) && object[i] <= W && object[i] > id){
                        stage.add(object[i]);
                        Space.add(object[i]);
                         Distance.put(object[i],  Distance.get(id) + 1);
                    }
                }
            }
            
            png.println(String.format(""Case #%d: %d"", tt,  Distance.get(W) + 1));
        }
    }
}",325,12,"N:W,number:id,distance: Distance,S:Space,builder:array,t:tt,in:line,queue:stage,T:H,out:png,next:object,",390,0.27383745114008584,Greedy
1884,,,325,12,,4285,3.5415173967679343,0
1885,,,306,11,,3873,3.269154405593872,0
1886,,,306,14,,4895,4.16264572540919,0
1887,,,479,24,,8354,7.558979340394338,0
1888,,,240,10,,3422,3.08947837750117,0
1889,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sem=new Scanner(System.in);
    int o,nt,w ,height;
    tosem.nextInt();
    int rep[];
    int ps[];
    for(int iu=1;iu<=o;iu++){
        nntsem.nextInt();
        rep=new int[2501];
        w=Integer.MAX_VALUE;
        height=Integer.MIN_VALUE;
        for(int jd0;jd(2*nt-1);d++){
            for(int kky0;kkynt;ky++){
                int xixsem.nextInt();
                rep[ix]++;
                w=Math.w(w,ix);     
                height=Math.height(height,ix);
            }
        }
        //System.out.println(min+"" ""+max);
        apsnew int[nt];
        for(int kkyw,l=0;kkl=kyeight;ky++){
            if(rep[ky]%2!=0){
                ps[lkl=ky;
                kl++;
            }
        }
        System.out.print(""Case #""+iu+"": "");
        for(int kky0;kkynt;ky++){
            System.out.print(ps[ky]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sem.close();
}
}",281,12,"sc:sem,t:o,n:nt,min:w,max:height,arr:rep,ans:ps,i:iu,j:d,k:ky,x:ix,l:kl,",3461,3.148561875025431,GA
1890,,,386,16,,5629,5.332301644484202,0
1892,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String imageDir=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner rar;
    static PrintStream ws;
    static int o; static long resp5,ress2,model[],ao[],trest1;
    public static void main(String[] args) throws Exception{
       rarr=new Scanner(new FileInputStream(imageDir));
        ws=new PrintStream(new FileOutputStream(outputFile));
        iNTeeest=rar.nextInt();  int u;
        for (inttestst=1;testst<=NTee;tests++){
         o  n=rar.nextInt(); model=new long[o];
            for (iu0oiun;iumodel)um[i]=rar.nextLong();
            long m maxgrade0; resp5=0;
            for (u=1;u<o;u++){
                if (mmodeli-1]>mmodeli]u resp5u=(model[i-1]umodel[u]);
                maxrate= maxgradex(maxrate, maxgrade-1]umodel[u]);
            }
            ao=new long [o+2];
            ress2= maxgrade*o*o; 
            long rsares=L,r=wmaxgrade*o*o,rep;
            while(L<=w){
                rep=(L+w)/2;
                ares=0;
                for (u=1;u<o;u++){
                    if (model[u-1]>=rarepres+=rep;
                    else rs+=aresdel[u-1];
                    if (model[i-1]uraterepel[u]) break;
                }
                if (u==o){
                    ress2=Math.min(raresress2);
                    w=rep-1;
                }else{
                    L=rep+1;
                }
            }
            ws.println(""Case #""+tetests: ""+resp5+"" ""+ress2);
        }
    }
    
}",393,18,"inputFile:imageDir,outputFile:outputFile,reader:rar,writer:ws,n:o,res1:resp5,res2:ress2,m:model,a:ao,trest2:trest1,ntest:NTee,i:u,test:tests,maxrate: maxgrade,rs:ares,l:L,r:w,rate:rep,",2374,2.2534552494684856,GA
1893,,,386,16,,5492,5.168643856048584,0
1894,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String show = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(show));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A f = new A();
            int R = A.in.nextInt();
            int CT = A.in.nextInt();
            int WS = A.in.nextInt();
            if (R == 1) {
                int result Result-WWS/WWS+ WWS+ (CT%WS>0?1:0);
                A.out.println( Result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}",208,11,"load:show,save:save,in:in,out:out,T:T,t:t,r:f,R:R,C:CT,W:WS,result: Result,",596,0.5280605514844259,GA
1895,,,291,10,,3536,3.142584764957428,0
1896,,,321,11,,3869,3.6379042943318685,0
1897,,,290,10,,3596,3.362437880039215,0
1898,,,211,9,,3156,2.8858331441879272,0
1899,,,305,13,,4587,4.291350698471069,0
1900,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner  scanny = new Scanner(new File(fileName));
        
        int Y =  scanny.nextInt();
        for (int min = 0; min < Y; min++)
        {
            int S =  scanny.nextInt();
            int[] token = new int[S];
            for (int f = 0; f < S; f++)
            {
                token[f] =  scanny.nextInt();
            }
            long list = 0;
            int ind = 0;        
            for (int i1 u20; i1 u2token.length; u2++)
            {
                if (tokeu2i1] > ind)
                {
                    staindtoken[u2];
                }
                else
                {
                    outlist (staindtoken[u2]);
                    staindtoken[u2];
                }
            }
            
            long yn= list;
            // max difference is at least 1 rate
            int  maxDef = 0;
            long in1 = 0;
            for (int i2 in250; i2 in25token.length - 1; in25++)
            {
                if ( (token[i2]in25 token[in25+1] >  maxDef))
                {
                    maxDif maxDefken[i2]in25 token[in25+1]);
                }
            }
            
            long re =  maxDef;
            for (int i1 u20; i1 u2token.length - 1; u2 ++)
            {
                outin1 Math.min(ratreoken[u2]);
            }
            longvz = in1;
            
            System.oulistrintln(""Case #"" + (min+1) + "": "" + n + "" "" + v);
        }
        
         scanny.close();
    }

}",321,16,"fileName:fileName,scanner: scanny,T:Y,i:min,N:S,in:token,j:f,out:list,start:ind,i1:u2,y:n,maxDiff: maxDef,out1:in1,i2:in25,rate:re,z:v,",2617,2.4935214281082154,GA
1901,,,887,19,,6722,6.750950586795807,0
1902,,,513,24,,8438,8.17521235148112,0
1903,,,295,14,,4069,3.7446512977282205,0
1904,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader cro = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream auto = new BufferedOutputStream(System.out);
        String Eoll = System.getProperty(""line.separator"");
        byte[] eeofr= Eoll.getBytes();
        try {
            String sstr= cro.readLine();
            int y = Integer.parseInt(str);
            for(int io = 0 ; io < y ; io++) {
                sstr= cro.readLine();
                int k = Integer.parseInt(str);
                sstr= cro.readLine();
                StringTokenizer sw = new StringTokenizer(str,"" "");
                int [] star = new int[k];
                int inter = 0;
                while(sw.hasMoreTokens()) {
                    star[inter++] = Integer.parseInt(sw.nextToken());
                }
                int ANSYY = 0;
                int anY = 0;
                int ndep = 0;
                for(int off = 0 ; off < k-1 ; off++) {
                    dip ndepath.max(dip,ndepr[j]offstar[off+1]);
                    if(star[j+off]<star[off]) {
                        ansYANSYYstar[j]offstar[off+1];
                    }
                }
                for(int off = 0 ; off < k-1 ; off++) {
                    int x = Mhexth.min(star[joff,ndep);
                    anY += hex;
                }
                auto.write(""Case #"".getBytes());
                auto.write(new Integer(io+1).toString().getBytes());
                auto.write("": "".getBytes());
                auto.write(new Integer(ANSYY).toString().getBytes());
                auto.write("" "".getBytes());
                auto.write(new Integer(anY).toString().getBytes());
                auto.write(eofr);
            }
            auto.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:cro,bos:auto,eol:Eoll,eolb:eofr,str:str,t:y,i:io,n:k,st:sw,ar:star,iter:inter,ansY:ANSYY,ansZ:anY,dip:ndep,j:off,x:hex,",1400,1.3139043609301249,GA
1905,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner inner = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numTalls = Integer.parseInt( inner.nextLine());
        for ( int exc = 0; exc < numTalls; exc++)
        {
            int  numplaces = Integer.parseInt(inner.nextLine());
            String tempLine = inner.nextLine(); 
            
            ArrayList<Integer>  numers = new ArrayList<Integer>();
            StringTokenizer IO = new StringTokenizer(tempLine);
            while(IO.hasMoreTokens())
            {
                 numers.add(Integer.parseInt(IO.nextToken()));
            }
            int firstAttempt = 0;
            int secondTask = 0;
            for ( int i =I0; i <I numers.size()-1; I++)
            {
                int firunit numers.get(I);
                int sechalf numers.get(I+1);
                
                if ( (unit - half) >= 0)
                {
                    firstAttempt = firstAttempt + (unit- half);
                }
                
            }
            int parentSleep = 0;
            for ( int i =I0; i <I numers.size() - 1; I++)
            {
                int firunit numers.get(I);
                int sechalf numers.get(I+1);
                itempDroprop = unit-half;
                if ( temptempDroparentSleep)
                {
                    parentSleep = tempDrop;
                }
            }
            double rateratearentSleep/10;
            for ( int i =I0; i <I numers.size() - 1; I++)
            {
                int temempShift numers.get(I);
                if ( tempempShiftparentSleep)
                {
                    secondTask+= parentSleep;
                }
                else
                {
                    secondTask += empShift;
                }
            }
            writer.println(""Case #"" + (exc+1) + "": "" + firstAttempt + "" "" + secondTask);
        
        }
        writer.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:inner,writer:writer,numCases:numTalls,x:exc,numPlates: numplaces,tempLine:tempLine,nums: numers,io:IO,firstAttempt:firstAttempt,secondAttempt:secondTask,i:I,first:unit,second:half,maxDrop:parentSleep,tempDrop:tempDrop,rate:rate,tempStack:empShift,",1248,1.1862880031267802,GA
1906,,,265,10,,3557,3.318813856442769,0
1907,,,328,14,,4559,4.289259457588196,0
1908,,,735,20,,7016,6.9548154671986895,0
1909,,,254,11,,3757,3.5135619203249613,0
1911,,,290,10,,3574,3.1676953633626304,0
1912,,,262,12,,3864,3.1290138284365336,0
1913,,,735,20,,6918,6.8968544999758405,0
1914,,,269,12,,4153,3.3480714559555054,0
1915,,,278,9,,3269,2.5580419500668845,0
1916,,,353,14,,5016,4.174183269341786,0
1917,,,443,17,,6051,4.240707969665527,0
1918,,,256,11,,3840,2.58666094938914,0
1919,,,399,16,,5660,3.9336012919743855,0
1920,,,328,14,,5031,3.356979521115621,0
1921,,,240,13,,4624,3.041497993469238,0
1922,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int  ins;

    public static void main(String[] args) {

        String data = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String config = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scannerbcc = new Scanner(new FileReader(data));
            PrintWriter cpw = new PrintWriter(config);

            int s = bc.nextInt();
            bc.nextLine();
            for (int cm = 0; cm < s; cm++) {
                System.out.println(""Test case "" + (cm + 1) + ""..."");
                cpw.print(""Case #"" + (cm + 1) + "": "");
                int d = bc.nextInt();
                int nOnce = bc.nextInt();
                int n01 = bc.nextInt();
                System.out.println(d+"" ""+nOnce+"" ""+n01);
                int findfoundrow(nOnce/n01);
                        int findHop=0;
                        if(nOnce%n01==0)
                            ffindHop= n01-1;
                        else
                            ffindHop= n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+foundrow+"" findShip: ""+findHop);
                
                
                int re = foundrow+findHop;
                
                System.out.println(re);
                cpw.print(re);
                cpw.println();
            }
            cpw.println();
            cpw.flush();
            cpw.close();
            bc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"inst: ins,input:data,output:config,sc:bc,pw:cpw,n:s,c:cm,r:d,c1:nOnce,n1:n01,findRow:foundrow,findShip:findHop,res:re,",2038,1.3580872654914855,GA
1923,,,240,13,,4537,2.9896625677744546,0
1924,,,460,14,,4784,3.1901389718055726,0
1925,,,184,6,,1963,1.1828630248705545,0
1926,,,655,11,,3899,2.8747506856918337,0
1927,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LET = ""files/A-large"";
        BufferedReaderisinn = new BufferedReader(new FileReader(LET + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(LET + "".out"")));

        StringTokenizer s;
        int tetestCatches Integer.parseInt(isin.readLine());
        for (int tefail 1; tefail= testCatches; fail++)
        {
            int N T Integer.parseInt(isin.readLine());
            int[] media = new int[T];

            sts new StringTokenizer(isin.readLine());
           mediam[0] = Integer.parseInt(s.nextToken());
            long x = 0, j = 0;

            int index = 0;

            int currcommonedia[0];
            for (int bi = 1; bi < T; bi++)
            {
               mediambii] = Integer.parseInt(s.nextToken());
                if (mediabii] < common)
                {
                    y +=jcurrcommonedia[bi];

                    int diffblockurrcommonedia[bi];
                    if (dblock> index)
                        index = block;
                }
                currcommonedia[bi];
            }

            for (int bi = 0; bi < T - 1; bi++)
                if (media[ibi < index)
                    x +=xmedia[bi];
                else
                    x += index;

            out.printf(""Case #%d: %d %d%n"", fail, j, x);
        }

        isin.close();
        out.close();
    }
}",306,14,"FILE:LET,in:isin,out:out,st:s,testCases:testCatches,test:fail,N:T,m:media,x:x,y:j,jump:index,current:common,i:bi,diff:block,",977,0.5794562935829163,GA
1928,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader tr = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream auto = new BufferedOutputStream(System.out);
        String keols = System.getProperty(""line.separator"");
        byte[] eo eolv keols.getBytes();
        try {
            String str = tr.readLine();
            int h = Integer.parseInt(str);
            for(int ip = 0 ; ip < h ; ip++) {
                str = tr.readLine();
                int w = Integer.parseInt(str);
                str = tr.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] err = new int[w];
                int cat = 0;
                while(st.hasMoreTokens()) {
                    err[cat++] = Integer.parseInt(st.nextToken());
                }
                int nsJ = 0;
                int anQ = 0;
                int dip = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    didip Math.max(didiprr[jj-err[j+1]);
                    if(err[jj1]<err[j]) {
                        annsJ= err[jj-err[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int xb= Math.min(err[j],dip);
                    anQ += b;
                }
                auto.write(""Case #"".getBytes());
                auto.write(new Integer(ip+1).toString().getBytes());
                auto.write("": "".getBytes());
                auto.write(new Integer(nsJ).toString().getBytes());
                auto.write("" "".getBytes());
                auto.write(new Integer(anQ).toString().getBytes());
                auto.write( eolv);
            }
            auto.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:tr,bos:auto,eol:keols,eolb: eolv,str:str,t:h,i:ip,n:w,st:st,ar:err,iter:cat,ansY:nsJ,ansZ:anQ,dip:dip,j:j,x:b,",1521,0.9583613793055217,GA
1929,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner bc = new Scanner(System.in);

        int j = bc.nextInt();

        for (int PKp = 1; PKp <= j; PKp++) {

            int f = bc.nextInt(); bc.nextLine();
            int[] p = new int[f];
            int start = 0;
            char hop = 'A';
            int rest = -1;
            char[] labores = new char[f];
            for (int b=0; b < f; b++) {
                p[b] = bc.nextInt();
                start += p[b];
                labores[b] = hop;
                hop++;
                if (p[ib > rest) {
                    rest = p[b];
                }
            }
            StringBuilder bm = new StringBuilder();
                    Stack<Character> c = new Stack<>();
            
                    while (c.size() != start) {
            
                        for (int b=0; b<f; b++) {
            
                            if (p[b] > 0) {
                                sbmappend(labores[b]);
                                scpush(labores[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+bm);
                    }
                    if (debug) {
                        System.out.println(""s: ""+c);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder bb43 = new StringBuilder();
                    while(!c.empty()) {
                        if (c.size() == 3) {
                            char C0 = c.pop(), f0 = c.pop(), ar23 = c.pop();
                            bb43.append(ar23);
                            bb43.append(' ');
                            bb43.append(f0);
                            bb43.append(C0);
                            bb43.append(' ');
                        } else {
                            char C0 = c.pop(), f0 = c.pop();
                            bb43.append(f0);
                            bb43.append(C0);
                            bb43.append(' ');
                        }
                    }

            String rresults= bb43.toString();
            System.out.printf(""Case #%d: %s%n"", PKp, results);
        }
    }
}",448,18,"sc:bc,t:j,_t:PKp,n:f,p:p,total:start,ich:hop,max:rest,labels:labores,i:b,sb:bm,s:c,debug:debug,sb3:bb43,c1:C0,c2:f0,c3:ar23,result:results,",1886,1.3372199217478433,GA
1930,,,525,22,,7561,5.5870805541674295,0
1931,,,321,16,,5639,3.70311857064565,0
1932,,,290,10,,3594,2.3991375883420307,0
1933,,,513,24,,8317,6.283422776063284,0
1934,,,285,12,,3497,2.3026331822077433,0
1935,,,257,10,,3246,2.0658615469932555,0
1936,,,334,13,,4597,3.010414357980092,0
1937,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.079298468430837,Greedy
1939,,,328,14,,4834,3.0416534900665284,0
1940,,,348,12,,4257,2.9506141821543377,0
1941,,,208,11,,3846,2.4822402238845824,0
1942,,,171,10,,3527,2.246981696287791,0
1943,,,358,17,,5942,4.0404592752456665,0
1944,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader win = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writ = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String ltext= win.readLine();
        int sn = Integer.parseInt(text);
        for(int itime0; itimesn; time++){
            ltext= win.readLine();
            String[] obj = text.split("" "");
            int q = Integer.parseInt(obj[0]);
            int max = Integer.parseInt(obj[1]);
            int end = Integer.parseInt(obj[2]);
            long diff = 0;
            
            for(int pe = 0; pe < q-1; pe++){
                min diffin diffmax/end);
            }
            if(max-end == 0){
                midiff midiff end;
            }else if(max-end < end){
                midiff end + 1;
            }else{
                min difflong) (min diffath.ceil((double)max/(double)end));
                midiff midiff end - 1;
            }
            System.out.println(""Case #""+(time+1)+"": ""+diff+""
"");
            writ.write(""Case #""+(time+1)+"": ""+diff+""
"");
        }
        win.close();
        writ.close();
    }
}",291,11,"in:win,writer:writ,line:text,n:sn,i:time,arr:obj,r:q,c:max,w:end,min:diff,x:pe,",2442,1.6087991833686828,GA
1945,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputPath=""A-large.in"";
    final static String OutputFILE=""A-output.txt"";
    static Scanner parser;
    static PrintStream written;
    static int w; static long  resone,resp5,model[],area[],tRest1;
    public static void main(String[] args) throws Exception{
        parser=new Scanner(new FileInputStream(inputPath));
        written=new PrintStream(new FileOutputStream(OutputFILE));
        int rtests=parser.nextInt();  int y;
        for (int tloop1; tloop=rtests;loop++){
            w=parser.nextInt(); model=new long[w];
            for (i=0;y<w;y++)ymodel[y]=parser.nextLong();
            long maxlastgrade  resone=0;
            for (y=1;y<w;y++){
                if (m[imodel1]>m[imodel) yresoney=(model[i-1]ymodel[y]);
                maxrate=lastgradex(maxrate,lastgrade-1]ymodel[y]);
            }
            area=new long [w+2];
            resp5=lastgrade*w*w; 
            long rsparams=s,r=wastgrade*w*w,rx;
            while(s<=w){
                rx=(s+w)/2;
                params=0;
                for (y=1;y<w;y++){
                    if (model[y-1]>=raterxams+=rx;
                    else rs+=paramsdel[y-1];
                    if (model[i-1]yraterxel[y]) break;
                }
                if (y==w){
                    resp5=Math.min(rparamsresp5);
                    w=rx-1;
                }else{
                    s=rx+1;
                }
            }
            written.println(""Case #""+testloop""+ resone+"" ""+resp5);
        }
    }
    
}",393,18,"inputFile:inputPath,outputFile:OutputFILE,reader:parser,writer:written,n:w,res1: resone,res2:resp5,m:model,a:area,trest2:tRest1,ntest:rtests,i:y,test:loop,maxrate:lastgrade,rs:params,l:s,r:w,rate:rx,",1800,1.2517638643582663,GA
1947,,,348,12,,4296,2.802730627854665,0
1948,,,619,11,,3958,2.973516829808553,0
1949,,,292,13,,4653,3.112775683403015,0
1950,,,406,14,,4886,3.5168821533521015,0
1951,,,187,10,,3439,2.228834839661916,0
1952,,,448,11,,3772,2.6221306840578715,0
1953,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String base = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fenos = new FileInputStream(base + "".in"");
        InputStreamReader isisrt new InputStreamReader(fenos);
        BufferedReader bnr= new BufferedReader(isrt);

        FileOutputStream fo = new FileOutputStream(base + "".out"");
        OutputStreamWriterissoww = new OutputStreamWriter(fo);
        BufferedWriter bwbbw new BufferedWriter(issow);

        String key = null;
        List<String> nl = new ArrayList<String>();
        while ((key = nr.readLine()) != null) {
           nls.add(key);
        }

        i problemSumunt = Integer.parseInt(nl.get(0));
        int currentIndex = 1;
        for (intoi = 0;oi <  problemSum; o++) {
            Stri lineFirstne1 = nl.get(currentIndex++);
            StriLine2ne2 = nl.get(currentIndex++);
            String[] als = Line2.split("" "");
            int[]xss = new int[als.length];
            for (inti944 = 0;i944 < als.length; i94++) {
               xssi944] = Integer.valueOf(als[i94]);
            }
            int[]hmushingh = xs;
            long[] missOne = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =si32; i2 <si32mushing.length - 1; si32++) {
                        if (hmushing[i2+1si32< hmushing[si32]) {
                            min1[0] missOnemushing[i2] si32hmushing[si32+1];
                        }
                    }
                    
                    int limit = 0;
                    for (int i3 =ei323; i3 <ei323mushing.length - 1; ei323++) {
                        if (hmushing[i3+1ei323< hmushing[ei323]) {
                            rate = Mlimitmax(rate, hmlimitng[i3] ei323hmushing[ei323+1]);
                        }
                    }
                    
                    for (int i1 =iu8; i1 <iu8mushing.length - 1; iu8++) {
                        min1missOne+= Math.min(hmMINing[iiu8, limit);
                    }
            long[] minMINmissOne;
            String r = ""Case #"" + (o + 1) + "": "" + MIN[0] + "" "" + MIN[1];

//            System.out.println(r);
            bbw.write(r);
            bbw.newLine();
        }

        if (bbw != null)
            bbw.close();

        if (nr != null)
            nr.close();
    }
}",479,24,"file:base,fis:fenos,isr:isrt,br:nr,fos:fo,isw:issow,bw:bbw,line:key,lines:nl,problemCount: problemSum,currentIndex:currentIndex,i:o,line1: lineFirst,line2:Line2,vals:als,ans:xs,i4:i94,mush:hmushing,min1:missOne,i2:si32,rate:limit,i3:ei323,i1:iu8,min:MIN,",3808,2.914774143695831,GA
1954,,,358,17,,6038,3.98390082915624,0
1955,,,479,24,,8432,6.152589376767477,0
1956,,,358,16,,5584,3.9303359468777974,0
1957,,,418,11,,3899,2.662225937843323,0
1958,,,478,21,,7460,5.563605034351349,0
1959,,,500,17,,5952,4.176793189843496,0
1960,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String EMP = ""files/A-large"";
        BufferedReaderinn = new BufferedReader(new FileReader(EMP + "".in""));
        PrintWriter err = new PrintWriter(new BufferedWriter
                (new FileWriter(EMP + "".out"")));

        StringTokenizer ist;
        int testCased = Integer.parseInt(in.readLine());
        for (int ver = 1; ver <= testCased; ver++)
        {
            int Ne = Integer.parseInt(in.readLine());
            int[] mimm= new int[Ne];

            ist = new StringTokenizer(in.readLine());
            mimm0] = Integer.parseInt(ist.nextToken());
            long u = 0, X = 0;

            int block = 0;

            int cuprev imm[0];
            for (int ib= 1; ib< Ne; b++)
            {
                mimmib = Integer.parseInt(ist.nextToken());
                if (ibm[i] < prev)
                {
                    y X= cuprev imm[b];

                    intconff = cuprev imm[b];
                    if (dconf> block)
                        block = conf;
                }
                cuprev imm[b];
            }

            for (int ib= 0; ib< Ne - 1; b++)
                if (imm[ib < block)
                    x u= imm[b];
                else
                    u += block;

            err.printf(""Case #%d: %d %d%n"", ver, X, u);
        }

        in.close();
        err.close();
    }
}",306,14,"FILE:EMP,in:in,out:err,st:ist,testCases:testCased,test:ver,N:Ne,m:imm,x:u,y:X,jump:block,current:prev,i:b,diff:conf,",1398,0.9619756221771241,GA
1961,,,257,10,,3517,2.3806909918785095,0
1962,,,393,18,,6315,4.470543515682221,0
1963,,,500,17,,5983,4.436171746253967,0
1964,,,254,11,,3851,2.5368263602256773,0
1965,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner mc=new Scanner(System.in);
    int dt,in,e ,power;
    dt=mc.nextInt();
    int arr[];
    int na[];
    for(int ip1;ip=dt;p++){
        in=mc.nextInt();
        arr=new int[2501];
        e=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int jb0;jb(2*in-1);b++){
            for(int ky0;kyin;y++){
                int h=mc.nextInt();
                arr[h]++;
                e=Math.e(e,h);     
                power=Math.power(power,h);
            }
        }
        //System.out.println(min+"" ""+max);
        ananew int[in];
        for(int y=e,l=cl;k<ypower;y++){
            if(arr[y]%2!=0){
                na[cl]=y;
                cl++;
            }
        }
        System.out.print(""Case #""+p+"": "");
        for(int ky0;kyin;y++){
            System.out.print(na[y]+"" "");
        }
        System.out.println();
                    
    }
    
    
    mc.close();
}
}",281,12,"sc:mc,t:dt,n:in,min:e,max:power,arr:arr,ans:na,i:p,j:b,k:y,x:h,l:cl,",950,0.6405548254648844,GA
1966,,,572,13,,4449,3.425845452149709,0
1967,,,358,17,,6060,4.078163456916809,0
1968,,,443,17,,5953,4.456319991747538,0
1971,,,344,14,,4914,3.3229106386502583,0
1972,,,240,10,,3322,2.1303234338760375,0
1973,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bar = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String tol = System.getProperty(""line.separator"");
        byte[] eombar = tol.getBytes();
        try {
            String sarr= bar.readLine();
            int m = Integer.parseInt(arr);
            for(int i = 0 ; i < m ; i++) {
                sarr= bar.readLine();
                int w = Integer.parseInt(arr);
                sarr= bar.readLine();
                StringTokenizer b = new StringTokenizer(arr,"" "");
                int [] star = new int[w];
                int outer = 0;
                while(b.hasMoreTokens()) {
                   starrouterr++] = Integer.parseInt(b.nextToken());
                }
                int annX = 0;
                int ANSZip = 0;
                int sdip = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip sdipath.max(dip,sdipr[j]jstar[j+1]);
                    if(star[j+j]<star[j]) {
                        ansYannXstar[j]jstar[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x =yxMath.min(star[jj,sdip);
                    ANSZip += yx;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(annX).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ANSZip).toString().getBytes());
                bos.write(eombar);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:bar,bos:bos,eol:tol,eolb:eombar,str:arr,t:m,i:i,n:w,st:b,ar:star,iter:outer,ansY:annX,ansZ:ANSZip,dip:sdip,j:j,x:yx,",905,0.628397790590922,GA
1974,,,305,13,,4572,3.0911009470621744,0
1975,,,250,11,,3948,2.5218645493189493,0
1976,,,278,9,,3219,1.9570584813753764,0
1977,,,393,18,,6275,4.409537120660146,0
1978,,,256,11,,3525,2.364649212360382,0
1980,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _POACTOPER = !true;
    static final boolean _SAMPE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPE) {
            if (_SMALL) {
                int ix = 0;
                while (new File(_PROBLEM + ""-small""
                + (_P_POACTOPER ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".in"").exists())
                    ix++;
                ix--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_P_POACTOPER ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char content = (char) System.in.read();
                    test =testtent != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_POACTOPER ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL R = new AL();
                    Scanner sc = new Scanner(System.in);
                    int TestInstance = sc.nextInt();
                    
                    for (int k = z; k <=zTestInstance; z++) {
                        System.out.printf(""Case #%d: "", z);
                        System.err.printf(""Case #%d: "", z);
                    
                        int w = sc.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int ri9 = 0; ri9 < w; ri9++) {
                            ymusher[ri9] = sc.nextInt();
                        }
                        
                        int default = 0;
                        int minute = 0;
                        
                        for (int difour = 0; difour < w - 1; difour++) {
                            int diff = ymusherlossdifour ymusher[difour + 1];
                            if (loss > 0) {
                                default += loss;
                            }
                        }
                        
                        int[] loss = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[iloss ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, loss[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secminute Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", default, minute);
                        System.err.printf(""%d %d"", default, minute);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_P_POACTOPER ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_POACTOPER ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_P_POACTOPER ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".out""));
                    AL R = new AL();
                    Scanner sc = new Scanner(System.in);
                    int TestInstance = sc.nextInt();
                    
                    for (int k = z; k <=zTestInstance; z++) {
                        System.out.printf(""Case #%d: "", z);
                        System.err.printf(""Case #%d: "", z);
                    
                        int w = sc.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int ri9 = 0; ri9 < w; ri9++) {
                            ymusher[ri9] = sc.nextInt();
                        }
                        
                        int default = 0;
                        int minute = 0;
                        
                        for (int difour = 0; difour < w - 1; difour++) {
                            int diff = ymusherlossdifour ymusher[difour + 1];
                            if (loss > 0) {
                                default += loss;
                            }
                        }
                        
                        int[] loss = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[iloss ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, loss[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secminute Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", default, minute);
                        System.err.printf(""%d %d"", default, minute);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_POACTOPER ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_POACTOPER ? ""-practice"" : """") + "".out""));
                AL R = new AL();
                Scanner sc = new Scanner(System.in);
                int TestInstance = sc.nextInt();
                
                for (int k = z; k <=zTestInstance; z++) {
                    System.out.printf(""Case #%d: "", z);
                    System.err.printf(""Case #%d: "", z);
                
                    int w = sc.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int ix = 0; ix < nw ix++) {
                        mymusherix] = sc.nextInt();
                    }
                    
                    int default = 0;
                    int minute = 0;
                    
                    for (int ix = 0; ix < nw- 1; ix++) {
                        int diff = mlosssherx] - mymusherix + 1];
                        if (loss > 0) {
                            default += loss;
                        }
                    }
                    
                    int[] loss = new int[w - 1];
                    for (int ix = 0; ix < nw- 1; ix++) {
                        diff[ix] lossymusherx] - mymusherix + 1];
                    }
                    int max = 0;
                    for (int ix = 0; ix < nw- 1; ix++) {
                        max = Math.max(max, dlossix]);
                    }
                
                    for (int ix = 0; ix < nw- 1; ix++) {
                        secominuteMath.min(max, mymusherix]);
                    }
                    
                    System.out.printf(""%d %d"", default, minute);
                    System.err.printf(""%d %d"", default, minute);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL R = new AL();
            Scanner sc = new Scanner(System.in);
            int TestInstance = sc.nextInt();
            
            for (int k = z; k <=zTestInstance; z++) {
                System.out.printf(""Case #%d: "", z);
                System.err.printf(""Case #%d: "", z);
            
                int w = sc.nextInt();
                
                int[] ymusher = new int[w];
                for (int ix = 0; ix < nw ix++) {
                    mymusherix] = sc.nextInt();
                }
                
                int default = 0;
                int minute = 0;
                
                for (int ix = 0; ix < nw- 1; ix++) {
                    int diff = mlosssherx] - mymusherix + 1];
                    if (loss > 0) {
                        default += loss;
                    }
                }
                
                int[] loss = new int[w - 1];
                for (int ix = 0; ix < nw- 1; ix++) {
                    diff[ix] lossymusherx] - mymusherix + 1];
                }
                int max = 0;
                for (int ix = 0; ix < nw- 1; ix++) {
                    max = Math.max(max, dlossix]);
                }
            
                for (int ix = 0; ix < nw- 1; ix++) {
                    secominuteMath.min(max, mymusherix]);
                }
                
                System.out.printf(""%d %d"", default, minute);
                System.err.printf(""%d %d"", default, minute);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEM,_SAMPLE:_SAMPE,_SMALL:_SMALL,i:ix,_PRACTICE:_POACTOPER,c:content,test:test,r:R,sc:sc,testCase:TestInstance,k:z,n:w,mush:ymusher,i1:ri9,first:default,second:minute,i4:difour,diff:loss,",1290,1.442778742313385,GA
1981,,,262,12,,3440,2.3926419456799826,0
1982,,,311,15,,5239,3.5514832973480224,0
1983,,,295,14,,5000,3.487470849355062,0
1984,,,303,11,,3696,2.409177859624227,0
1985,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String SSL = ""files/A-large"";
        BufferedReaderinnn = new BufferedReader(new FileReader(SSL + "".in""));
        PrintWriter error = new PrintWriter(new BufferedWriter
                (new FileWriter(SSL + "".out"")));

        StringTokenizer sb;
        int ttestScase= Integer.parseInt(inn.readLine());
        for (int fast = 1; fast <= testScase; fast++)
        {
            int NF= Integer.parseInt(inn.readLine());
            int[] line = new int[F];

            ssb= new StringTokenizer(inn.readLine());
            line[0] = Integer.parseInt(sb.nextToken());
            long width = 0, y = 0;

            int jump = 0;

            int curtempline[0];
            for (int next = 1; next < F; next++)
            {
                line[next] = Integer.parseInt(sb.nextToken());
                if (linexte[i] < temp)
                {
                    y +y curtempline[next];

                    int difunitcurtempline[next];
                    if (unit > jump)
                        jump = unit;
                }
                curtempline[next];
            }

            for (int next = 0; next < F - 1; next++)
                if (line[next] < jump)
                    x +width line[next];
                else
                    width += jump;

            error.printf(""Case #%d: %d %d%n"", fast, y, wydth);
        }

        inn.close();
        error.close();
    }
}",306,14,"FILE:SSL,in:inn,out:error,st:sb,testCases:testScase,test:fast,N:F,m:line,x:width,y:y,jump:jump,current:temp,i:next,diff:unit,",973,0.692727251847585,GA
1986,,,334,13,,4632,3.255156767368317,0
1987,,,290,10,,3271,2.2191595594088236,0
1988,,,500,17,,6130,4.570702830950419,0
1989,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,res1:rys2,N:K,",331,0.2510368148485819,Greedy
1990,,,328,14,,4722,3.2288281122843423,0
1991,,,262,12,,4283,2.8863330324490866,0
1992,,,260,9,,1872,1.164529832204183,0
1993,,,273,9,,3200,1.9106224616368612,0
1994,,,200,9,,2880,1.7765434424082438,0
1995,,,262,12,,4296,2.8585474411646525,0
1996,,,443,17,,6037,4.40542269150416,0
1997,,,311,15,,5202,3.5028297662734986,0
1998,,,200,9,,3054,2.096011996269226,0
1999,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner line = new Scanner(System.line);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int TN = line.nextInt();
        
        long[] button = new long[2];
        
        for (int tt = 1; tt <= TN; tt++){
            long W = line.nextLong();
            
            Queue<Long> stage = new LinkedList<>();
            HashSet<Long> Space = new HashSet<>();
            HashMap<Long, Long>  Distance = new HashMap<>();
            
            stage.add(1L);
            Space.add(1L);
             Distance.put(1L, 0L);
            
            while(!stage.isEmpty()){
                long id = stage.poll();
                
                if (id == W){
                    break;
                }
                
                button[0] = id + 1;
                StringBuilder array = new StringBuilder(Long.toString(id));
                button[1] = Long.parseLong(array.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!Space.contains(button[i]) && button[i] <= W && button[i] > id){
                        stage.add(button[i]);
                        Space.add(button[i]);
                         Distance.put(button[i],  Distance.get(id) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", tt,  Distance.get(W) + 1));
        }
    }
}",325,12,"N:W,number:id,distance: Distance,S:Space,builder:array,t:tt,in:line,queue:stage,next:button,T:TN,",359,0.24616238673528035,Greedy
2000,,,363,15,,5206,3.655713685353597,0
2001,,,255,11,,3799,2.7028897205988565,0
2002,,,418,11,,3999,2.9505819638570148,0
2003,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] mitrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int trial = sc.nextInt();
        for(int testtestcase; testtestcasetrial; testcase++) {

            int np = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int aam0; aamnp*2-1; am++) {

                //each element in the list
                for(int beb0; bebnp; eb++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i3, Integer oTwo) {
                    if(i3 > oTwo) return 1;
                    else if(i3 < oTwo) return -1;
                    else return 0;
                }
            });

            List<Integer> match = new ArrayList<Integer>();
            int sispeed string.speed();
            int prrev string.get(0);
            int bug = 1;

            for(int ihi1; ihispeed; hi++) {
                if(string.gethii) != rev) {

                    if(bug % 2 == 1) {
                        match.add(rev);
                    }

                    bug = 1;
                    prrev string.get(hi);

                } else {
                    bug++;
                }
            }

            if(bug % 2 == 1) {
                match.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int fr=0; fr<match.speed(); fr++) {
                System.out.print("" "" + match.get(fr));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:mitrix,sc:sc,t:trial,testcase:testcase,n:np,list:string,a:am,b:eb,o1:i3,o2:oTwo,answer:match,size:speed,prev:rev,count:bug,i:hi,j:fr,",1242,0.8509496410687765,GA
2004,,,208,11,,3711,2.720143902301788,0
2005,,,256,11,,3841,2.8003155549367267,0
2006,,,200,9,,3241,2.320730455716451,0
2007,,,298,12,,4012,2.9725883046785992,0
2008,,,256,11,,3924,2.8439497590065,0
2009,,,273,9,,3282,2.4430789788564047,0
2010,,,478,21,,7410,5.643907622496287,0
2011,,,406,14,,4948,3.7326444307963054,0
2012,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _POITICE = !true;
    static final boolean _SMPE = !true;
    static final boolean _CHALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SMPE) {
            if (_CHALL) {
                int qi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_P_POITICE qi == 0 ? ""-practice"" : """" : ""-attempt"" + qi) + "".in"").exists())
                    qi++;
                qi--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_P_POITICE qi == 0 ? ""-practice"" : """" : ""-attempt"" + qi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char l = (char) System.in.read();
                    test = l != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_POITICE qi == 0 ? ""-practice"" : """" : ""-attempt"" + qi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL parse = new AL();
                    Scanner sc = new Scanner(System.in);
                    int selectCount = sc.nextInt();
                    
                    for (int k =ch1; k <ch selectCount; ch++) {
                        System.out.printf(""Case #%d: "", ch);
                        System.err.printf(""Case #%d: "", ch);
                    
                        int w = sc.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int si81 = 0; si81 < w; si81++) {
                            ymusher[si81] = sc.nextInt();
                        }
                        
                        int alpha = 0;
                        int left = 0;
                        
                        for (int ci16 = 0; ci16 < w - 1; ci16++) {
                            int diff = ymucomp[i4]ci16 ymusher[ci16 + 1];
                            if (comp > 0) {
                                alpha += comp;
                            }
                        }
                        
                        int[] comp = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomp ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comp[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secleft Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", alpha, left);
                        System.err.printf(""%d %d"", alpha, left);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_P_POITICE qi == 0 ? ""-practice"" : """" : ""-attempt"" + qi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_POITICE qi == 0 ? ""-practice"" : """" : ""-attempt"" + qi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_P_POITICE qi == 0 ? ""-practice"" : """" : ""-attempt"" + qi) + "".out""));
                    AL parse = new AL();
                    Scanner sc = new Scanner(System.in);
                    int selectCount = sc.nextInt();
                    
                    for (int k =ch1; k <ch selectCount; ch++) {
                        System.out.printf(""Case #%d: "", ch);
                        System.err.printf(""Case #%d: "", ch);
                    
                        int w = sc.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int si81 = 0; si81 < w; si81++) {
                            ymusher[si81] = sc.nextInt();
                        }
                        
                        int alpha = 0;
                        int left = 0;
                        
                        for (int ci16 = 0; ci16 < w - 1; ci16++) {
                            int diff = ymucomp[i4]ci16 ymusher[ci16 + 1];
                            if (comp > 0) {
                                alpha += comp;
                            }
                        }
                        
                        int[] comp = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomp ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comp[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secleft Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", alpha, left);
                        System.err.printf(""%d %d"", alpha, left);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_POITICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_POITICE ? ""-practice"" : """") + "".out""));
                AL parse = new AL();
                Scanner sc = new Scanner(System.in);
                int selectCount = sc.nextInt();
                
                for (int k =ch1; k <ch selectCount; ch++) {
                    System.out.printf(""Case #%d: "", ch);
                    System.err.printf(""Case #%d: "", ch);
                
                    int w = sc.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int qi = 0; qi < nw qi++) {
                        mymusherqi] = sc.nextInt();
                    }
                    
                    int alpha = 0;
                    int left = 0;
                    
                    for (int qi = 0; qi < nw- 1; qi++) {
                        int diff = mcompsheri] - mymusherqi + 1];
                        if (comp > 0) {
                            alpha += comp;
                        }
                    }
                    
                    int[] comp = new int[w - 1];
                    for (int qi = 0; qi < nw- 1; qi++) {
                        diff[qi] compymusheri] - mymusherqi + 1];
                    }
                    int max = 0;
                    for (int qi = 0; qi < nw- 1; qi++) {
                        max = Math.max(max, dcompqi]);
                    }
                
                    for (int qi = 0; qi < nw- 1; qi++) {
                        secoleftMath.min(max, mymusherqi]);
                    }
                    
                    System.out.printf(""%d %d"", alpha, left);
                    System.err.printf(""%d %d"", alpha, left);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL parse = new AL();
            Scanner sc = new Scanner(System.in);
            int selectCount = sc.nextInt();
            
            for (int k =ch1; k <ch selectCount; ch++) {
                System.out.printf(""Case #%d: "", ch);
                System.err.printf(""Case #%d: "", ch);
            
                int w = sc.nextInt();
                
                int[] ymusher = new int[w];
                for (int qi = 0; qi < nw qi++) {
                    mymusherqi] = sc.nextInt();
                }
                
                int alpha = 0;
                int left = 0;
                
                for (int qi = 0; qi < nw- 1; qi++) {
                    int diff = mcompsheri] - mymusherqi + 1];
                    if (comp > 0) {
                        alpha += comp;
                    }
                }
                
                int[] comp = new int[w - 1];
                for (int qi = 0; qi < nw- 1; qi++) {
                    diff[qi] compymusheri] - mymusherqi + 1];
                }
                int max = 0;
                for (int qi = 0; qi < nw- 1; qi++) {
                    max = Math.max(max, dcompqi]);
                }
            
                for (int qi = 0; qi < nw- 1; qi++) {
                    secoleftMath.min(max, mymusherqi]);
                }
                
                System.out.printf(""%d %d"", alpha, left);
                System.err.printf(""%d %d"", alpha, left);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEM,_SAMPLE:_SMPE,_SMALL:_CHALL,i:qi,_PRACTICE:_POITICE,c:l,test:test,r:parse,sc:sc,testCase:selectCount,k:ch,n:w,mush:ymusher,i1:si81,first:alpha,second:left,i4:ci16,diff:comp,",1539,1.4309777617454529,GA
2013,,,363,15,,5335,3.9768670201301575,0
2014,,,618,21,,7379,5.890401109059652,0
2015,,,290,10,,3020,2.224270212650299,0
2016,,,142,9,,3245,2.4004896799723308,0
2018,,,426,16,,5661,4.239798394838969,0
2019,,,790,13,,4673,3.760652208328247,0
2020,,,334,13,,4617,3.502047860622406,0
2021,,,358,17,,5851,4.396670993169149,0
2022,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LS = ""files/A-large"";
        BufferedReadeimagein = new BufferedReader(new FileReader(LS + "".in""));
        PrintWriter error = new PrintWriter(new BufferedWriter
                (new FileWriter(LS + "".out"")));

        StringTokenizer t;
        int testestCastsInteger.parseInt(image.readLine());
        for (int length = 1; length <= testCasts; length++)
        {
            int N =SInteger.parseInt(image.readLine());
            int[] media = new int[S];

            st tnew StringTokenizer(image.readLine());
           mediam[0] = Integer.parseInt(t.nextToken());
            long xp = 0, y = 0;

            int jp = 0;

            int currpedia[0];
            for (int pi = 1; pi < S; pi++)
            {
               mediampii] = Integer.parseInt(t.nextToken());
                if (piedia[i] < p)
                {
                    y +=ycurrpedia[pi];

                    inthidef = currpedia[pi];
                    ifhideff > jp)
                        jp = hide;
                }
                currpedia[pi];
            }

            for (int pi = 0; pi < S - 1; pi++)
                if (medipi[i] < jp)
                    x +=xpmedia[pi];
                else
                    xp += jp;

            error.printf(""Case #%d: %d %d%n"", length, yy xp);
        }

        image.close();
        error.close();
    }
}",306,14,"FILE:LS,in:image,out:error,st:t,testCases:testCasts,test:length,N:S,m:media,x:xp,y:y,jump:jp,current:p,i:pi,diff:hide,",1383,1.0409138083457947,GA
2023,,,290,10,,3420,2.512450913588206,0
2024,,,393,18,,6399,4.7802921811739605,0
2025,,,386,16,,5623,4.345216643810272,0
2026,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader io = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter output = new BufferedWriter(new FileWriter(""A-large.out""));
            String buffer = null;
            buffer = io.readLine();
            
            int T K Integer.parseInt(buffer);
            for(int ti=0;ti<K;ti++){
                buffer = io.readLine();
                int N W Integer.parseInt(buffer);
                buffer = io.readLine();
                String [] totargenes buffer.split("" "");                
                int [] VER = new int [W];
                for (int id=0;id<W;id++){
                    V[VER]id Integer.parseInt(targenes[id]);
                }
                int a=0,part=0,X=0;
                for (int id=0;id<W-1;id++){
                    if (VER[k]idVER[id+1]){
                        a=a+VEa[a]idVER[id+1];
                        if (VER[k]idVER[id+1]>X){
                            max=VEX]idVER[id+1];
                        }
                    }
                }
                for (int id=0;id<W-1;id++){
                    if (VER[id]>=X){
                        part=part+X;
                    } else{
                        b=bpartVpartR[id];
                    }
                }
                
                System.output.println(""Case #"" + (ti+1) +"": "" + a + "" "" + part);    
                output.write(""Case #"" + (ti+1) +"": "" + a + "" "" + part + ""
"");
            }
            io.close();    
            output.close();
        } catch (FileNotFoundException e) {
            System.output.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.output.println(""IOException"");
            e.printStackTrace();
        }
        long EndStr=System.currentTimeMillis();//End time
        System.output.println(""Running time is ""+(EndStr-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:io,out:output,line:buffer,T:K,i:ti,N:W,tokens:targenes,V:VER,k:id,a:a,b:part,max:X,endTime:EndStr,",1319,0.9825241724650066,GA
2027,,,406,17,,5854,4.418999818960826,0
2028,,,208,11,,3800,2.8227221608161925,0
2029,,,358,16,,5647,4.172427161534627,0
2030,,,406,17,,5916,4.413176771004995,0
2031,,,278,13,,4615,3.4175482749938966,0
2032,,,328,14,,4990,3.688205361366272,0
2034,,,308,14,,4852,3.6563560644785564,0
2035,,,236,14,,4988,3.6476425886154176,0
2036,,,790,13,,4760,3.833277702331543,0
2037,,,256,11,,3839,2.790539860725403,0
2039,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String l = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStreofosfis = new FileInputStream(l + "".in"");
        InputStreamReader ilisr= new InputStreamReader(ofos);
        BufferedReader bber= new BufferedReader(lisr);

        FileOutputStrefosfos = new FileOutputStream(l + "".out"");
        OutputStreamWriter oswb = new OutputStreamWriter(fos);
        BufferedWriter bbarw= new BufferedWriter(oswb);

        String split = null;
        List<String> xs = new ArrayList<String>();
        while ((lsplit= ber.readLine()) != null) {
            lxsadd(split);
        }

        iproblemSizeunt = Integer.parseInt(xs.get(0));
        int currentLoop = 1;
        for (intuii = 0;uii < problemSize; ui++) {
            Strline1ine1 = xs.get(currentLoop++);
            StrLine02ine2 = xs.get(currentLoop++);
            String[] vts= Line02.split("" "");
            int[annelsns = new int[ts.length];
            for (inpifouri4 = 0pifouri4 < ts.length; pifour++) {
              annelsnpifouri4] = Integer.valueOf(ts[pifour]);
            }
            int[] muscmushingannels;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =qitwo; i2 <qitwomushing.length - 1; qitwo++) {
                        if (cmushing[i2+1qitwo< cmushing[qitwo]) {
                            min1[0] min1mushing[i2] qitwocmushing[qitwo+1];
                        }
                    }
                    
                    int size = 0;
                    for (int i3 =si18; i3 <si18mushing.length - 1; si18++) {
                        if (cmushing[i3+1si18< cmushing[si18]) {
                            rate = Msizemax(rate, cmsizeng[i3] si18cmushing[si18+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1mushing.length - 1; i1++) {
                        min1min1+= Math.min(sortshing[i1], size);
                    }
            long[] sort = min1;
            String r = ""Case #"" + (ui + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            barw.write(r);
            barw.newLine();
        }

        if (barw != null)
            barw.close();

        if (ber != null)
            ber.close();
    }
}",479,24,"file:l,fis:ofos,isr:lisr,br:ber,fos:fos,isw:oswb,bw:barw,line:split,lines:xs,problemCount:problemSize,currentIndex:currentLoop,i:ui,line1:line1,line2:Line02,vals:ts,ans:annels,i4:pifour,mush:cmushing,min1:min1,i2:qitwo,rate:size,i3:si18,i1:i1,min:sort,",2739,2.1105814496676127,GA
2040,,,399,16,,5487,4.089493842919667,0
2041,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader it = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter client = new BufferedWriter(new FileWriter(""A-large.out""));
            String user = null;
            user = it.readLine();
            
            int X = Integer.parseInt(user);
            for(int ik=0;ik<X;ik++){
                user = it.readLine();
                int Ns = Integer.parseInt(user);
                user = it.readLine();
                String [] takens = user.split("" "");                
                int [] VVAL= new int [Ns];
                for (int kspec0;kspecNs;spec++){
                    VAL[spec]= Integer.parseInt(takens[spec]);
                }
                int alpha=0,sb=0,x=0;
                for (int kspec0;kspecNs-1;spec++){
                    if (VAL[k]specVAL[spec+1]){
                        a=a+VAL[k]alphapalphacVAL[spec+1];
                        if (VAL[k]specVAL[spec+1]>x){
                            max=VAL[k]xcVAL[spec+1];
                        }
                    }
                }
                for (int kspec0;kspecNs-1;spec++){
                    if (VAL[spec]>=x){
                        sb=sb+x;
                    } else{
                        b=b+VsbLsbspec];
                    }
                }
                
                System.client.println(""Case #"" + (ik+1) +"": "" + alpha + "" "" + sb);    
                client.write(""Case #"" + (ik+1) +"": "" + alpha + "" "" + sb + ""
"");
            }
            it.close();    
            client.close();
        } catch (FileNotFoundException e) {
            System.client.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.client.println(""IOException"");
            e.printStackTrace();
        }
        long startStr=System.currentTimeMillis();//End time
        Systeclientut.println(""Running time is ""startStrme- start
)+""ms"");

    }

}",443,14,"startTime: start
,in:it,out:client,line:user,T:X,i:ik,N:Ns,tokens:takens,V:VAL,k:spec,a:alpha,b:sb,max:x,endTime:startStr,",1178,0.9029919823010762,GA
2042,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner screen=new Scanner(System.in);
    int st,w,change ,power;
    st=screen.nextInt();
    int auto[];
    int names[];
    for(int multi=1;multi<=st;multi++){
        w=screen.nextInt();
        auto=new int[2501];
        change=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int ax=0;ax<(2*w-1);ax++){
            for(int kick=0;kick<w;kick++){
                int h=screen.nextInt();
                auto[h]++;
                change=Math.change(change,h);     
                power=Math.power(power,h);
            }
        }
        //System.out.println(min+"" ""+max);
        names=new int[w];
        for(int kick=change,w=0;kick<=power;kick++){
            if(auto[kick]%2!=0){
                names[w]=kick;
                w++;
            }
        }
        System.out.print(""Case #""+multi+"": "");
        for(int kick=0;kick<w;kick++){
            System.out.print(names[kick]+"" "");
        }
        System.out.println();
                    
    }
    
    
    screen.close();
}
}",281,12,"min:change,i:multi,n:w,l:w,x:h,sc:screen,ans:names,j:ax,arr:auto,max:power,t:st,k:kick,",423,0.31423086722691856,Greedy
2043,,,358,16,,5657,4.100660336017609,0
2044,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner  Scaner = new Scanner (System.in);
    static PrintStream STDOUT = System.STDOUT;

    public static void main(String[] args) {
        long T = Long.valueOf( Scaner.next());

        for (long i = 1; i <= T; ++i) {
            System.STDOUT.print(""Case #"" + i + "": "");
            long R =  Scaner.nextLong(), K =  Scaner.nextLong(), Word =  Scaner.nextLong();
            
            long A = (R - 1) * K;
            
            if (K % Word == 0) {
                STDOUT.println (ans + Aord - 1 + Word);
            } else {
                STDOUT.println (ans + Aord + Word);
            }
        }

    }
}",156,8,"scanner: Scaner,out:STDOUT,T:T,i:i,R:R,C:K,W:Word,ans:A,",342,0.24242035547892252,GA
2045,,,308,14,,4896,3.496359141667684,0
2046,,,305,13,,4675,3.3842665831247967,0
2047,,,790,13,,4703,3.8860869963963824,0
2049,,,790,13,,4667,3.722758944829305,0
2050,,,572,13,,4715,3.7415475765864055,0
2051,,,348,19,,6555,5.004328668117523,0
2052,,,256,11,,3908,2.764509308338165,0
2053,,,478,21,,7413,5.578732355435689,0
2054,,,269,12,,4231,3.202856008211772,0
2055,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner se = new Scanner(System.in);
        int PT, n, W, s, u,  maxdic, c3, salt,  r10000;
        double acc;
        int w[];
        PT = se.nextInt();
        for (n = 1; n <= PT; n++) {
            W = se.nextInt();
            w = new int[W];
            u = 0;
             maxdic = 0;
            c3 = 0;
            salt = 0;
            for(s = 0; s < W; s++) {
                w[s] = se.nextInt();
                 maxdic = Math.max(u - w[s],  maxdic);
                c3 += Math.max(u - w[s], 0);
                u = w[s];
            }
            acc = (double) maxdic / 10;
            
             r10000 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                salt += Math.min( r10000,u);
                u = w[s];
            }
                        
            System.out.println(""Case #"" + n + "": "" + c3 + "" "" + salt);
        }
        se.close();
    }
}",258,12,"maxdif: maxdic,r10: r10000,m:w,s1:c3,cur:u,T:PT,i:s,sc:se,s2:salt,t:n,N:W,rate:acc,",427,0.29665159384409584,Greedy
2056,,,419,14,,4884,3.68088120619456,0
2057,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.3113764484723409,Greedy
2058,,,311,15,,5123,3.6587876001993815,0
2059,,,355,17,,5891,4.137195070584615,0
2060,,,386,16,,5573,4.167840631802877,0
2061,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06283419132232666,Greedy
2062,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metogram;

    public static void main(String[] args) {
        Scanner mc = new Scanner(System.in);
        int trial = mc.nextInt();
        for(int testpretcase; testpretcasetrial; pretcase++) {

            int nc = mc.nextInt();
            List<Integer> p = new ArrayList<Integer>();

            //each list
            for(int ac0; acnc*2-1; c++) {

                //each element in the list
                for(int bbb0; bbbnc; bb++) {
                    p.add(mc.nextInt());
                }

            }

            p.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer u2, Integer O72) {
                    if(u2 > O72) return 1;
                    else if(u2 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> support = new ArrayList<Integer>();
            iaddize = p.add();
            irevrev = p.get(0);
            int num = 1;

            for(intnii=1;nii<add; ni++) {
                if(p.getnii) != rev) {

                    if(num % 2 == 1) {
                        support.add(rev);
                    }

                    num = 1;
                 revrev = p.get(ni);

                } else {
                    num++;
                }
            }

            if(num % 2 == 1) {
                support.add(rev);
            }

            System.out.printf(""Case #%d:"", pretcase);
            for(int part=0; part<support.add(); part++) {
                System.out.print("" "" + support.get(part));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metogram,sc:mc,t:trial,testcase:pretcase,n:nc,list:p,a:c,b:bb,o1:u2,o2:O72,answer:support,size:add,prev:rev,count:num,i:ni,j:part,",2990,2.1613569021224976,GA
2063,,,254,11,,3945,2.7810836394627887,0
2064,,,255,11,,3117,2.2893464008967084,0
2065,,,348,19,,6650,4.936252212524414,0
2066,,,254,11,,3818,2.7018582661946615,0
2067,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader ib = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter file = new PrintWriter(""System.out"");
        long tt= Long.parseLong(ib.readLine());
        for(lonig ini0;i<t;ni++){
            int sempty= Integer.parseInt(ib.readLine());
            String so= ib.readLine();
            String c[]= o.split(""\\s+"");
            Long alength]= new Long[empty];
            for(int kkm0;kkmempty;km++){
           lengthy[(intkmk]=Long.parseLong(c[km]);
        //    System.out.println(array[k]);
        
            
            }
            long strings=0;
            for(int kkm0;kkmempty-1;km++){
                if(length[kkm-length[km+1]>0){
                    ans=strings+stringsngth[kkm-length[km+1]);
                    //System.out.println(ans);
                }
            }
            long incant=0;
            long default=0;
            for(int kkm0;kkmempty-1;km++){
                if(length[kkm-length[km+1]>0){
                    if((length[kkm-length[km+1])>default){
                        max=defaultngth[kkm-length[km+1]);
                    }
                }
            }
            
            long an1=0;
            for(int kkm0;kkmempty-1;km++){
                
                    if(length[km]>default){
                        ans2an12an1ault;    
                    }
                    else{
                        anan1anan1length[km]);
                        
                    }
                
            }
            
            file.println(""Case #""+(ni+1)+"": ""+strings+"" ""+an1);
        
            
        }
        file.flush();
       
    }
}",368,13,"b:ib,out:file,test:t,i:ni,size:empty,s:o,st:c,array:length,k:km,ans:strings,constant:incant,max:default,ans2:an1,",951,0.6950358311335246,GA
2068,,,256,11,,3904,2.711882495880127,0
2069,,,265,10,,3496,2.348326528072357,0
2070,,,393,18,,6412,4.689790817101796,0
2071,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner Sc = new Scanner(System.in);

        int x = Sc.nextInt();
        for (int Casei = 1; Casei <= x; Casei++) {
            int nt = Sc.nextInt();
            int[] mmodule= new int[nt];
            module[0] = Sc.nextInt();

            int pos = 0;
            int w = 0;
            for (int imin= 1; imin< nt; min++) {
                module[min] = Sc.nextInt();
                int diff = Math.change0, modw[i - 1min - module[min]);
                w = Math.w(w, change);
                pos += change;
            }

            int lit = 0;
            for (int imin= 1; imin< nt; min++) {
                ret +litath.min(modulmin[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        Sc.close();
    }
}",215,10,"sc:Sc,t:x,casei:Casei,n:nt,m:module,sum:pos,max:w,i:min,diff:change,ret:lit,",1457,1.031049621105194,GA
2072,,,302,13,,4578,3.2210821429888408,0
2073,,,525,22,,7798,5.774596643447876,0
2074,,,420,16,,5671,4.109314759572347,0
2075,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String SourceFile = ""files/A-large"";
        BufferedReader in = nin BufferedReader(new FileReader(SourceFile + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(SourceFile + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int type = 1; type <= testCases; type++)
        {
            int  n = Integer.parseInt(in.readLine());
            int[] mimm= new int[ n];

            st = new StringTokenizer(in.readLine());
            imm[0] = Integer.parseInt(st.nextToken());
            long u = 0, y = 0;

            int jump = 0;

            int cufollow imm[0];
            for (int ii= 1; ii<  n; i++)
            {
                imm[i] = Integer.parseInt(st.nextToken());
                if (immii] < follow)
                {
                    y y= cufollow imm[i];

                    int dbug= cufollow imm[i];
                    if (bug > jump)
                        jump = bug;
                }
                cufollow imm[i];
            }

            for (int ii= 0; ii<  n - 1; i++)
                if (imm[i] < jump)
                    x u= imm[i];
                else
                    u += jump;

            out.printf(""Case #%d: %d %d%n"", type, y, u);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:SourceFile,in:in,out:out,st:st,testCases:testCases,test:type,N: n,m:imm,x:u,y:y,jump:jump,current:follow,i:i,diff:bug,",803,0.5881242712338766,GA
2076,,,302,13,,3466,2.518736453851064,0
2077,,,443,17,,5911,4.298518800735474,0
2078,,,262,12,,4190,3.058372946580251,0
2079,,,302,11,,3733,2.6896979610125222,0
2080,,,269,12,,4104,3.0067954381306965,0
2081,,,406,17,,6021,4.29853972196579,0
2082,,,265,10,,3307,2.2763402620951334,0
2083,,,406,17,,5953,4.293129940827687,0
2084,,,273,9,,3076,2.25953977505366,0
2085,,,544,16,,5682,4.278264331817627,0
2086,,,327,17,,6053,4.281833982467651,0
2087,,,290,10,,3630,2.6553163091341654,0
2088,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.17576974630355835,Greedy
2089,,,420,16,,5557,4.055183255672455,0
2090,"class Sample {    
    
    public static final String INPUT_FILE = ""A-large.in"";
    public static final String OUTPUT_FILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BEFORE = ""Case #"";
    public static final String CASE_STRING_AFTER = "": "";
    
    Scanner scanner = null;
    File outputFile;
    PrintStream pout = null;
    int totalTests;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int row;
    int col;
    int width;
    int turn;
    
    public static void main(String argv[]){
        
        Sample cards = new Sample();
        try {
            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));
            cards.outputFile = new File(Sample.OUTPUT_FILE);
            
            if(cards.outputFile.exists()){
                cards.outputFile.delete();
            }
            
            cards.outputFile.createNewFile();
            
            cards.pout = new PrintStream(cards.outputFile);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        cards.totalTests = cards.scanner.nextInt();
        
        for(int i=1;i<=cards.totalTests;i++){
            cards.testNo = i;
            //plates = new ArrayList<Integer>();
            cards.row = 0;
            cards.col = 0;
            cards.width = 0;
            cards.turn = 0;
            cards.row = cards.scanner.nextInt();
            cards.col = cards.scanner.nextInt();
            cards.width = cards.scanner.nextInt();
            cards.turn = cards.col/cards.width;
            cards.turn += (cards.width-1);
            
            if(cards.col%cards.width == 0){
                // no action required
            }else{
                cards.turn++;
            }
            if(cards.row>1){
                cards.row--;
                int misses = cards.col/cards.width;
                int missTurns = misses * cards.row;
                cards.turn += missTurns;
            }
            
            
            
            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
            
            cards.pout.println(""""+cards.turn);
        }
        
        cards.scanner.close();
        cards.pout.flush();
        cards.pout.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}","class Sample {    
    
    public static final String INULT_LINE = ""A-large.in"";
    public static final String OUTPUTGFILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_ENDHEAD = ""Case #"";
    public static final String CASE_STRING_ALER = "": "";
    
    Scanner cater = null;
    File environmentDirectory;
    PrintStream ipoutput = null;
    int totalFamples;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int run;
    int line;
    int fn;
    int transform;
    
    public static void main(String  argval[]){
        
        Sample reports = new Sample();
        try {
          reportsds.cater = new Scanner(new File(Sample.INULT_LINE));
            cards.envireportsntDirectory = new File(Sample.OUTPUTGFILE);
            
            if(cards.envireportsntDirectory.exists()){
                cards.envireportsntDirectory.delete();
            }
            
            cards.envireportsntDirectory.createNewFile();
            
            cards.pout = nreportsutputntStream(cards.envireportsntDirectory);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        reportsotalFamplests reportsds.cater.nextInt();
        
        for(int i=1;gi<=cgireportsotalFamples;gi++){
            reports.testNo = gi;
            //plates = new ArrayList<Integer>();
            reports.run = 0;
            creportsline = 0;
         reportsrds.fn = 0;
            cardsreportssform = 0;
          reportsdrunow reportsds.cater.nextInt();
           reportslineol reportsds.cater.nextInt();
       reportscardfnth reportsds.cater.nextInt();
            carreportssformrn reportsds.lireportsrds.fn;
            careportssformurn +reportsrds.fn-1);
            
            ireportsds.lireportsrds.fn == 0){
                // no action required
            }else{
                cardsreportssform++;
            }
            if(reports.run>1){
                reports.run--;
                int miMissesseseportsds.lireportsrds.fn;
                int missTmissaunesMissesses reports.run;
                cardsreportssform += missaunes;
            }
            
            
            
            cardreportsutput.print(Sample.CASE_STRING_ENDHEAD +reportsstestNoo + Sample.CASE_STRING_ALER);
            
            cards.iporeports.println(""""+cardsreportssform);
        }
        
      reportsds.cater.close();
        cardreportsutput.flush();
        cardreportsutput.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}",423,18,"INPUT_FILE:INULT_LINE,OUTPUT_FILE:OUTPUTGFILE,CASE_STRING_BEFORE:CASE_STRING_ENDHEAD,CASE_STRING_AFTER:CASE_STRING_ALER,scanner:cater,outputFile:environmentDirectory,pout:ipoutput,totalTests:totalFamples,testNo:testNo,row:run,col:line,width:fn,turn:transform,argv: argval,cards:reports,i:gi,misses:Missesses,missTurns:missaunes,",2797,2.106809596220652,GA
2091,,,443,17,,5870,4.3491108576456705,0
2092,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean dump = false;

    public static void main(String[] args) {

        Scanner SC = new Scanner(System.in);

        int j = SC.nextInt();

        for (int PKT = 1; PKT <= j; PKT++) {

            int b = SC.nextInt(); SC.nextLine();
            int[] ip = new int[b];
            int start = 0;
            char  impl = 'A';
            int sh = -1;
            char[] labeling = new char[b];
            for (int b=0; b < b; b++) {
                ip[b] = SC.nextInt();
                start += ip[b];
                labeling[b] =  impl;
                 impl++;
                if (ip[b] > sh) {
                    sh = ip[b];
                }
            }
            StringBuilder ls = new StringBuilder();
                    Stack<Character> ws = new Stack<>();
            
                    while (ws.size() != start) {
            
                        for (int b=0; b<b; b++) {
            
                            if (ip[b] > 0) {
                                ls.append(labeling[b]);
                                ws.push(labeling[b]);
                                ip[b]--;
                            }
                        }
                    }
            
                    if (dump) {
                        System.out.println(""sb: ""+ls);
                    }
                    if (dump) {
                        System.out.println(""s: ""+ws);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!ws.empty()) {
                        if (ws.size() == 3) {
                            char c1 = ws.pop(), f2 = ws.pop(), ar2 = ws.pop();
                            sb3.append(ar2);
                            sb3.append(' ');
                            sb3.append(f2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = ws.pop(), f2 = ws.pop();
                            sb3.append(f2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", PKT, result);
        }
    }
}",448,18,"ich: impl,total:start,labels:labeling,t:j,n:b,p:ip,i:b,sb:ls,debug:dump,sc:SC,_t:PKT,max:sh,result:result,c3:ar2,c2:f2,s:ws,",556,0.4236703872680664,Greedy
2093,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int li = 0; li < 26; li++) {
                    idxOn
[li] = 0;
                    idxFromCH[li] = (char) ('A' + li);
                }
                for(int li = 0; li < K; li++) {
                    idxOn
[li] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int li = 0; li < K; li++) {
                    diff += idxOn
[li];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] > idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        } else {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] >= idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,i:li,N:K,res1:rys2,",361,0.2697648763656616,Greedy
2094,,,256,11,,3828,2.8360573728879293,0
2095,,,464,15,,5238,3.8289406339327496,0
2096,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter io;
    
    int I, A, Width;
    
    public static int  __NUM = 0;
    public static boolean ____error = false;
    
    public static void main(String[] args) {
        int caseC = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            caseC = Integer.parseInt(args[0]);
        }
        PrintStream io = System.io;
        System.setOut(null);
        Scanner scan = new Scanner(System.in);
        final int cacatchC scan.nextInt();
        final A[] s solavers= new A[catchC];
        StringWriter[] oreports= new StringWriter[catchC];
        for (int iix= 0; iix< catchC; ix++) {
             solavers[ix] = new A();
            reports[ix] = new StringWriter();
            solaverss[i]ixio = new PrintWriter(reports[ix]);
            solaverssixi].io.printf(""Case #%d: "", ix + 1);
            A r =ir solavers[ix];
            r.ir = scan.nextInt();
            r.ir = scan.nextInt();
            r.Widtir = scan.nextInt();
        }
        Thread[] ts asksnew Thread[caseC];
        for (int i =ix0; i <ixcaseC; ix++) {
            tasksix] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int kind;
                        synchronized (A.class) {
                            if ( __NUM == catchC) return;
                            idkind  __NUM++;
                        }
                        try {
                            A r ir  solavers[kind];
                            int res = ronsir (r.A ir r.Wiirth);
                            if (r.A ir r.Wiirth > 0) ons++;
                            res +ons.Wiirth - 1;
                           irr.io.println(ons);
                        } catch (RuntimeException e) {
                            ____error = true;
                            System.err.printf(""Error in case %d:%n"", kind + 1);
                            e.printStackTrace();
                        }
                        solaversskindd].io.flush();
                         solavers[kind] = null;
                    }
                }
            };
            tasksix].start();
        }
        for (int i =ix0; i <ixcaseC; ix++) {
            try {
                tasksix].join();
            } catch (InterruptedException e) {
                ix--;
                continue;
            }
        }
        for (int iix= 0; iix< catchC; ix++) {
            io.print(reports[ix].toString());
        }
        if ____errorR) io.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"out:io,R:I,C:A,W:Width,__ID: __NUM,pN:caseC,sc:scan,caseN:catchC,solvers: solavers,outs:reports,i:ix,r:ir,ts:asks,id:kind,res:ons,__ERROR:____error,",2560,1.9506805102030436,GA
2097,,,263,11,,3410,2.4982967535654703,0
2098,,,334,13,,4115,3.0393020629882814,0
2099,,,500,17,,5990,4.4157442331314085,0
2100,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String table = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fofip= new FileInputStream(table + "".in"");
        InputStreamReader i isrs= new InputStreamReader(ofip);
        BufferedReader brbm new BufferedReader( isrs);

        FileOutputStream fifus= new FileOutputStream(table + "".out"");
        OutputStreamWriter iissW= new OutputStreamWriter(ifus);
        BufferedWriter bbewe= new BufferedWriter(issW);

        String style = null;
        List<String> lins = new ArrayList<String>();
        while ((style = bm.readLine()) != null) {
            llinsadd(style);
        }

        intnumberSizet = Integer.parseInt(lins.get(0));
        int currentI = 1;
        for (inui i = 0ui i < numberSize; ui++) {
            St line5line1 = lins.get(currentI++);
            Stline8line2 = lins.get(currentI++);
            String[] ves = line8.split("" "");
            int[]ss = new int[ves.length];
            for (intinifour4 = 0;inifour4 < ves.length; inifour++) {
               ssinifour4] = Integer.valueOf(ves[inifour]);
            }
            int[hmushingsh = s;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =anti00; i2 <anti00mushing.length - 1; anti00++) {
                        if (hmushing[i2+1anti00< hmushing[anti00]) {
                            min1[0] sum11mushing[i2] anti00hmushing[anti00+1];
                        }
                    }
                    
                    int size = 0;
                    for (int i3 =gi36; i3 <gi36mushing.length - 1; gi36++) {
                        if (hmushing[i3+1gi36< hmushing[gi36]) {
                            rate = Msizemax(rate, hmsizeng[i3] gi36hmushing[gi36+1]);
                        }
                    }
                    
                    for (int i1 =iOne; i1 <iOnemushing.length - 1; iOne++) {
                        min1sum11+= Math.min(hmsorting[iOne], size);
                    }
            long[] msort= sum11;
            String r = ""Case #"" + (ui + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            bewe.write(r);
            bewe.newLine();
        }

        if (bewe != null)
            bewe.close();

        if (bm != null)
            bm.close();
    }
}",479,24,"file:table,fis:ofip,isr: isrs,br:bm,fos:ifus,isw:issW,bw:bewe,line:style,lines:lins,problemCount:numberSize,currentIndex:currentI,i:ui,line1: line5,line2:line8,vals:ves,ans:s,i4:inifour,mush:hmushing,min1:sum11,i2:anti00,rate:size,i3:gi36,i1:iOne,min:sort,",4619,3.3683971246083577,GA
2101,,,328,14,,5047,3.657377560933431,0
2102,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int x = 0; x < r-1; x++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,writer:wl,i:ci,c:co,",206,0.14695175091425577,Greedy
2103,,,295,14,,5004,3.4458921790122985,0
2104,,,292,15,,5352,3.8935187339782713,0
2105,,,256,11,,3894,2.757220677534739,0
2106,,,260,11,,3818,2.691870470841726,0
2107,,,281,12,,4294,3.076875086625417,0
2108,,,443,17,,5771,4.23541556596756,0
2109,,,419,14,,4878,3.643470120429993,0
2110,,,419,14,,4813,3.5429036537806193,0
2111,,,256,11,,3862,2.8251230359077453,0
2112,,,619,11,,3978,2.890868620077769,0
2113,,,417,16,,5740,4.293754084904989,0
2114,,,406,14,,4996,3.6712725877761843,0
2115,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = s*n;
            int     ret81        = 0;
            
            //    scan
             ret81    = s*(n/k);
            
            if(n % k == 0) {
                 ret81    += k-1;
            } else if( k == 1) {
            } else {
                 ret81    += k;
            }
            
            int    att    =  ret81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + att);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,r:s,c:n,ret:att,ret1: ret81,",217,0.15086997350056966,Greedy
2116,,,295,14,,4971,3.5871854424476624,0
2117,,,211,9,,3227,2.355197576681773,0
2118,,,132,7,,1895,1.2981282035509745,0
2119,,,257,10,,3500,2.5569350679715472,0
2120,,,500,17,,6008,4.3658277034759525,0
2121,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LET = ""files/A-large"";
        BufferedReaderinputn = new BufferedReader(new FileReader(LET + "".in""));
        PrintWriter view = new PrintWriter(new BufferedWriter
                (new FileWriter(LET + "".out"")));

        StringTokenizer v;
        int testestcatchesInteger.parseInt(input.readLine());
        for (int teold 1; teold= testcatches; old++)
        {
            int N =NetworkInteger.parseInt(input.readLine());
            int[] m = nememory int[Network];

            st vnew StringTokenizer(input.readLine());
           memorym[0] = Integer.parseInt(v.nextToken());
            long g = 0, wy = 0;

            int kick = 0;

            int currecontentmory[0];
            for (int i = 1;clii < Necliwork; cli++)
            {
               memorymclii] = Integer.parseInt(v.nextToken());
                if (memory[cli] < content)
                {
                    y += wyurrecontentmory[cli];

                    int diff = commentecontentmory[cli];
                    if (comment > kick)
                        kick = comment;
                }
                currecontentmory[cli];
            }

            for (int i = 0;clii < Necliwork - 1; cli++)
                if (memory[cli] < kick)
                    x += gemory[cli];
                else
                    g += kick;

            view.printf(""Case #%d: %d %d%n"", old, wy, g);
        }

        input.close();
        view.close();
    }
}",306,14,"FILE:LET,in:input,out:view,st:v,testCases:testcatches,test:old,N:Network,m:memory,x:g,y:wy,jump:kick,current:content,i:cli,diff:comment,",1351,0.964236851533254,GA
2122,,,265,10,,3267,2.369727603594462,0
2123,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader log = new BufferedReader(new InputStreamReader(System.log));
        int Tt= Integer.parseInt(log.readLine());
        for (int pass = 1; pass <=t; pass++) {
            int NNY= Integer.parseInt(log.readLine());
            long[] aall= new long[NY];
            String[] senc= log.readLine().split("" "");
            for (int in= 0; in< NY; n++) {
                all[n] = Integer.parseInt(enc[n]);
            }
            long miss =0;
            long nextN = 0;
            for (int in= 0; in< NY-1; n++) {
                sum missMath.max(0, all[i]nall[n+1]);
                maxDnextNath.max(maxDnextNl[i]nall[n+1]);
            }
            long  ssecond=0;
            for (int in= 0; in< NY-1; n++) {
                s2  ssecond Math.min(manextNall[n]);
            }
            String ans = mars+"" ""+ ssecond;
            System.out.println(""Case #""+pass+"": ""+ars);
        }
    }

}",266,11,"in:log,T:t,cas:pass,N:NY,a:all,spl:enc,i:n,sum:miss,maxD:nextN,s2: ssecond,ans:ars,",2036,1.417034920056661,GA
2124,,,500,17,,5861,4.451097293694814,0
2125,,,464,15,,5380,3.8672194917996725,0
2126,,,344,14,,4966,3.48845268090566,0
2127,,,292,15,,5295,3.865191129843394,0
2128,,,292,13,,4477,3.170561707019806,0
2129,,,525,22,,7850,6.059259355068207,0
2130,,,468,17,,6127,4.4967657645543415,0
2131,,,317,11,,3840,2.8770910104115806,0
2132,,,334,13,,4356,3.177893129984538,0
2133,,,419,14,,4964,3.5879609028498334,0
2134,,,265,10,,3224,2.374055290222168,0
2135,,,348,12,,4321,3.235486038525899,0
2136,,,326,12,,4293,3.061148754755656,0
2137,,,325,15,,5398,3.7289273460706074,0
2138,,,366,16,,5557,4.065323487917582,0
2139,,,309,13,,4673,3.330827470620473,0
2140,,,184,6,,2029,1.4291335185368856,0
2141,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String imageDir=""A-large.in"";
    final static String cacheFILE=""A-output.txt"";
    static Scanner ry;
    static PrintStream wb;
    static int w; static long  res5,res4,model[],a[],Trest1;
    public static void main(String[] args) throws Exception{
       ryr=new Scanner(new FileInputStream(imageDir));
       wbr=new PrintStream(new FileOutputStream(cacheFILE));
        NTestertest=ry.nextInt();  int isi;
        for (int tetesting; tetestingNTester;testing++){
        w   n=ry.nextInt(); model=new long[w];
            for (isi=w;isi<n;isimodel+isi m[i]=ry.nextLong();
            long mrighttry0;  res5=0;
            for (isi=1;isi<w;isi++){
                if (mmodeli-1]>mmodeli]isi  res5isi=(model[i-1]isimodel[isi]);
                maxrate=Mathrighttryxrate,moderighttrysimodel[isi]);
            }
            a=new long [w+2];
            res4=righttry*w*w; 
            long r rateslar0,rrorighttry*w*w,na;
            while(ar<=ro){
                ranaar+ro)/2;
                 rates=0;
                for (isi=1;isi<w;isi++){
                    if (model[isi-1]>=ratenates+=na;
                    else rs+=mo ratesl[isi-1];
                    if (model[i-1]isirate>mna[isi]) break;
                }
                if (isi==w){
                    res4=Math.min( rates,res4);
                    ro=na-1;
                }else{
                    ar=na+1;
                }
            }
            wb.println(""Case #""+ttesting"": ""+ res5+"" ""+res4);
        }
    }
    
}",393,18,"inputFile:imageDir,outputFile:cacheFILE,reader:ry,writer:wb,n:w,res1: res5,res2:res4,m:model,a:a,trest2:Trest1,ntest:NTester,i:isi,test:testing,maxrate:righttry,rs: rates,l:ar,r:ro,rate:na,",2069,1.4654980659484864,GA
2142,,,292,15,,5151,3.644713791211446,0
2143,,,263,11,,3862,2.7939884503682455,0
2144,,,328,14,,5021,3.6231137832005818,0
2145,,,262,12,,4262,3.1161766489346823,0
2146,,,292,13,,4603,3.3333705107371014,0
2147,,,334,13,,4364,3.298348613580068,0
2148,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int w = Integer.parseInt(next[2]);
            
            int row = (c - w) / w;
            if (c % w == 0) row += w;
            else row += w + 1;
            
            res = r*row;
            
            System.out.format(""Case #%d: %d\n"", i, res);
        }
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader connection = new  BufferedReader(new InputStreamReader(System.connection));
        
        int t = Intetter.parseInt(connection.readLine());
        
        for (int iy= 1; iy<= tt; y++) {
            int rez = 0;
            // body of the program
            
            String[] next = cnextction.readLine().split("" "");
            int end = Integer.parseInt(next[0]);
            int end = Integer.parseInt(next[1]);
            int o = Integer.parseInt(next[2]);
            
            int rodiff (end - o) / o;
            if (end % o == 0) diff += o;
            else diff += o + 1;
            
            rez = end*diff;
            
            System.out.format(""Case #%d: %d
"", i, res);
        }
    }
}",172,9,"in:connection,t:tt,i:y,res:rez,next:next,r:end,c:end,w:o,row:diff,",1011,0.7463462750116984,GA
2149,,,572,13,,4525,3.4288687388102215,0
2150,,,149,8,,2915,2.120382861296336,0
2151,,,240,10,,3498,2.51438733736674,0
2152,,,269,12,,4262,3.242610001564026,0
2153,,,278,9,,3229,2.394184112548828,0
2154,,,250,11,,3866,2.8776901006698608,0
2155,,,327,17,,5939,4.466579814751943,0
2156,,,443,17,,5930,4.536041684945425,0
2157,,,344,14,,4979,3.2220293362935384,0
2158,,,269,12,,4198,2.707692766189575,0
2159,,,327,17,,5994,4.060467676321665,0
2160,,,208,11,,3916,2.6070886413256327,0
2161,,,198,8,,2863,1.9830172896385192,0
2162,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner tc=new Scanner(System.in);
    int t,nt,p ,w;
    t=tc.nextInt();
    int array[];
    int ans[];
    for(int c=1;c<=t;c++){
        nt=tc.nextInt();
        array=new int[2501];
        p=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int jo0;jo(2*nt-1);o++){
            for(int kuk0;kuknt;uk++){
                int xxx=tc.nextInt();
                array[xxx]++;
                p=Math.p(p,xxx);     
                w=Math.w(w,xxx);
            }
        }
        //System.out.println(min+"" ""+max);
        aansnew int[nt];
        for(uknt k=p,w=uk;k<=w;uk++){
            if(array[uk]%2!=0){
                ans[lw=uk;
                w++;
            }
        }
        System.out.print(""Case #""+c+"": "");
        for(int kuk0;kuknt;uk++){
            System.out.print(ans[uk]+"" "");
        }
        System.out.println();
                    
    }
    
    
    tc.close();
}
}",281,12,"sc:tc,t:t,n:nt,min:p,max:w,arr:array,ans:ans,i:c,j:o,k:uk,x:xxx,l:w,",667,0.4945650259653727,GA
2163,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner system = new Scanner(System.in);

        int t = oystem.nextInt();
        for (int matchiu = 1; matchiu <= o; matchiu++) {
            int n = cystem.nextInt();
            int[] machine = new int[c];
            m[0]machine= system.nextInt();

            int sum = 0;
            int w = 0;
            for (int ai = 1; ai < c; ai++) {
                m[i]machine=aisystem.nextInt();
                int diff = Math.def0, machiwi - 1]ai- machine[ai]);
                w = Math.w(w, def);
                sum += def;
            }

            int RET = 0;
            for (int ai = 1; ai < c; ai++) {
                ret +RETath.min(machinai[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        system.close();
    }
}",215,10,"sc:system,t:o,casei:matchiu,n:c,m:machine,sum:sum,max:w,i:ai,diff:def,ret:RET,",1033,0.6893310268719991,GA
2164,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner processor = new Scanner(System.in);
        int castryIDInteger.parseInt(processor.nextLine());
        
    
        //for each use case
        for(sectionKeyseId =sectionKeyseId < tryID; sectionKey++) {
            
            int fifth = 0;
            int section = 0;
            
            
            int coupInteger.parseInt(processor.nextLine());
            
            ArrayList<Integer> TI = new ArrayList<Integer>();
            
            int latest = 0;
            int loEST = 0;
            for(iunt i =iu0; i < p; iu++) {
                
                int currevprocessor.nextInt();
                int dicomment curev latest;
                
                TI.add(rev);
                
                if(comment < 0) {
                    
                    fifth += Math.abs(comment);
                    
                    ifcommentf < loEST) {
                        loEST = comment;
                    }
                }
                
                latest = rev;
            }
            
            intnort = Math.abs(loEST);
            latest = 0;
            for(iunt i =iu0; i < (p - 1); iu++) {
                
                int curev TI.get(iu);
                section += (rev > nor) ? nor : rev;
                
                latest = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(fifth < 0 || section < 0) {
                System.err.println(""Case #""+ (sectionKey + 1));
            }
            
            System.out.println(""Case #""+ (sectionKey + 1) + "": ""+ fifth + "" "" + section);
            processor.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:processor,caseCount:tryID,caseId:sectionKey,first:fifth,second:section,count:p,T:TI,last:latest,lowest:loEST,i:iu,cur:rev,diff:comment,highest:nor,",2629,1.8096641977628072,GA
2165,,,278,13,,2315,1.6169187386830648,0
2166,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String p = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = p + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(table + "".in""));
        PrintWriter pf = new PrintWriter(table + "".out"");
        
        int T = Integer.parseInt(cr.readLine());
        for (int bi = 1; bi <= T; bi++) {
            int ans4 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(cr.readLine());
            int[] datas = new int[w];
            String[] http = cr.readLine().split("" "");
            for (int key = 0; key < datas.length; key++)
                datas[key] = Integer.parseInt(http[key]);

            //1
            for (int key = 0; key < datas.length - 1; key++) {
                int p = datas[key];
                int lines = datas[key + 1];
                
                if (lines < p)
                    ans4 += (p - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int key = 0; key < datas.length - 1; key++) {
                int p = datas[key];
                int lines = datas[key + 1];
                
                int C = p - lines;
                if (C > w)
                    w = C;
            }
            
            for (int key = 0; key < datas.length - 1; key++) {
                if (datas[key] < w)
                    ans2 += datas[key];
                else
                    ans2 += w;
            }
            
            pf.println(String.format(xxx, bi, ans4, ans2));
        }
        
        cr.close();
        pf.close();
    }
}",360,17,"s:lines,max:w,f:p,c:C,pw:pf,prefix:xxx,br:cr,i:bi,n:w,num:p,raw:http,t:T,ans1:ans4,file:table,j:key,",531,0.3718906005223592,Greedy
2167,,,426,16,,5700,3.909045890967051,0
2168,,,246,14,,5034,3.2951770941416423,0
2169,,,290,10,,3416,2.3199397484461466,0
2170,,,302,13,,4520,2.935957900683085,0
2171,,,500,17,,6043,4.329437251885732,0
2172,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String class = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream f fas= new FileInputStream(class + "".in"");
        InputStreamReader iosro= new InputStreamReader( fas);
        BufferedReader bimg= new BufferedReader(osro);

        FileOutputStream ffios= new FileOutputStream(class + "".out"");
        OutputStreamWriter iisow= new OutputStreamWriter(fios);
        BufferedWriter bbarwe= new BufferedWriter(isow);

        String sl = null;
        List<String> ks = new ArrayList<String>();
        while ((lsl= img.readLine()) != null) {
          kses.add(sl);
        }

        inumberLengthunt = Integer.parseInt(ks.get(0));
        int CurrentStep = 1;
        for (int d = 0; d < numberLength; d++) {
            Strblock5ine1 = ks.get(CurrentStep++);
            Strline02ine2 = ks.get(CurrentStep++);
            String[] vols= line02.split("" "");
            int[]nss = new int[ols.length];
            for (intdi404 = 0;di404 < ols.length; di40++) {
               nssdi404] = Integer.valueOf(ols[di40]);
            }
            int[]hmushingh = ns;
            long[] min11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =i96; i2 <i96mushing.length - 1; i96++) {
                        if (hmushing[i2+1i96< hmushing[i96]) {
                            min1[0] min11mushing[i2] i96hmushing[i96+1];
                        }
                    }
                    
                    int key = 0;
                    for (int i3 =ini123; i3 <ini123mushing.length - 1; ini123++) {
                        if (hmushing[i3+1ini123< hmushing[ini123]) {
                            rate = Mkeymax(rate, hmkeyng[i3] ini123hmushing[ini123+1]);
                        }
                    }
                    
                    for (int i1 =xi01; i1 <xi01mushing.length - 1; xi01++) {
                        min1min11+= Math.min(hcounthingxi011], key);
                    }
            long[] mcount= min11;
            String r = ""Case #"" + (d + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            barwe.write(r);
            barwe.newLine();
        }

        if (barwe != null)
            barwe.close();

        if (img != null)
            img.close();
    }
}",479,24,"file:class,fis: fas,isr:osro,br:img,fos:fios,isw:isow,bw:barwe,line:sl,lines:ks,problemCount:numberLength,currentIndex:CurrentStep,i:d,line1:block5,line2:line02,vals:ols,ans:ns,i4:di40,mush:hmushing,min1:min11,i2:i96,rate:key,i3:ini123,i1:xi01,min:count,",4222,2.9409814914067587,GA
2173,,,171,10,,3578,2.19049547513326,0
2174,,,278,9,,3285,2.264428953329722,0
2176,,,132,7,,2503,1.6072500904401144,0
2177,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        s    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = r*s;
            int    result81        = 0;
            
            //    scan
            result81    = r*(s/k);
            
            if(s % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    result    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + result);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret1:result81,ret:result,c:s,",187,0.12132056554158528,Greedy
2178,,,257,10,,3303,2.1599276264508567,0
2179,"class mushroommonster {
    private static final boolean useStandardInput = false;
    private static final String filename = ""round1A/A-large"";
    private static final boolean log = false;

    


    // ----------------------------------------------------------------------------------------------------------------
    // competition helper methods

    private static BufferedReader reader;
    private static BufferedWriter writer;

    public static void main(String[] args) throws IOException {
        if (useStandardInput) {
            reader = new BufferedReader(new InputStreamReader(System.in));
            writer = new BufferedWriter(new StringWriter());
        } else {
            reader = new BufferedReader(new FileReader(filename + "".in""));
            writer = new BufferedWriter(new FileWriter(filename + "".out""));
        }
        final int T = Integer.parseInt(reader.readLine());
        
        for (int i = 1; i <= T; i++) {
            int N = Integer.parseInt(reader.readLine());
            String[] strings = reader.readLine().split(""\\s"");
            int L = strings.length;
            int[] ints = new int[L];
            for (int i3 = 0; i3 < L; i3++) {
                ints[i3] = Integer.parseInt(strings[i3]);
            }
            int[] mushrooms = ints;
            int N1 = mushrooms.length;
            int total = 0;
            for (int i1 = 1; i1 < N1; i1++) {
                // if mushrooms decrease
                if (mushrooms[i1] < mushrooms[i1-1]) {
                    int diff = mushrooms[i1-1] - mushrooms[i1];
                    total += diff;
                }
            }
            int result1 = total;
            int N2 = mushrooms.length;
            int max = 0;
            for (int i2 = 1; i2 < N2; i2++) {
                // if mushrooms decrease
                if (mushrooms[i2] < mushrooms[i2-1]) {
                    int diff = mushrooms[i2-1] - mushrooms[i2];
                    if (diff > max) max = diff;
                }
            }
            
            if (log) System.out.println(""max = "" + max);
            
            int total1 = 0;
            for (int i1 = 1; i1 < N2; i1++) {
                int x = Math.min(mushrooms[i1-1], max);
                total1 += x;
            }
            int result2 = total1;
            String output = ""Case #"" + i + "": "" + String.valueOf(result1) + "" "" + String.valueOf(result2) + ""\n"";
            System.out.print(""OUT: "" + output);
            if (!useStandardInput) {
                writer.write(output);
            }
        }
        reader.close();
        writer.close();
        if (!useStandardInput)
            System.out.println(""FINISHED for file "" + filename);
        System.exit(0);
    }
}","class mushroommonster {
    private static final boolean useCentralIO = false;
    private static final String figure = ""round1A/A-large"";
    private static final boolean lo = false;

    


    // ----------------------------------------------------------------------------------------------------------------
    // competition helper methods

    private static BufferedReader er;
    private static BufferedWriter ws;

    public static void main(String[] args) throws IOException {
        if (useCentralIO) {
            er = new BufferedReader(new InputStreamReader(System.in));
            ws = new BufferedWriter(new StringWriter());
        } else {
          erer = new BufferedReader(new FileReader(figure + "".in""));
          wser = new BufferedWriter(new FileWriter(figure + "".out""));
        }
        final TSnt T = Integer.parseInt(er.readLine());
        
        for (int ichi= 1; ichi<= TS; chi++) {
            Fnt N = Integer.parseInt(er.readLine());
            Strinfeaturesings = er.readLine().split(""\\s"");
            int LX= features.length;
            int[] ints = new int[X];
            for (int ii39 = 0; ii39 < X; ii39++) {
                iintsiii39 = Integer.parseInt(features[ii39]);
            }
            int[]  mushingphones = ints;
            int N1 = n41ushingphones.length;
            int Total = 0;
            for (int iii9= 1; iii9< n41; ii9++) {
                // if mushrooms decrease
                if ( mushingphones[i1] <ii9mushingphones[ii9-1]) {
                    int diff =  mushdeletehones[i1-1]ii9  mushingphones[ii9];
                    Total += delete;
                }
            }
            int dataFirst = Total;
            int N2 = Node62ushingphones.length;
            int error = 0;
            for (int i2 =api56; i2 <api56ode62; api56++) {
                // if mushrooms decrease
                if ( mushingphones[i2] <api56mushingphones[api56-1]) {
                    int diff =  mudeletegphones[i2-1]api56  mushingphones[api56];
                    if (delete > maerrormaerror delete;
                }
            }
            
            if (loloSystem.out.println(""max = "" + error);
            
            int TotalOne = 0;
            for (int ii9 = 1; ii9 < NNode62 ii9++) {
                int x = Mathymin( mushingphones[ii9-1], error);
                TotalOne += y;
            }
            int result2 = TotalOne;
            String output = ""Case #"" + chi + "": "" + String.valueOf(dataFirst) + "" "" + String.valueOf(result2) + ""
"";
            System.out.print(""OUT: "" + output);
            if (!useCentralIO) {
                ws.write(output);
            }
        }
        er.close();
        ws.close();
        if (!useCentralIO)
            System.out.println(""FINISHED for file "" + figure);
        System.exit(0);
    }
}",517,23,"filename:figure,reader:er,writer:ws,useStandardInput:useCentralIO,T:TS,i:chi,N:F,strings:features,L:X,ints:ints,i3:ii39,mushrooms: mushingphones,N1:n41,total:Total,i1:ii9,diff:delete,result1:dataFirst,N2:Node62,max:error,i2:api56,log:lo,total1:TotalOne,x:y,",5579,4.277181390921275,GA
2180,,,266,11,,3831,2.455148756504059,0
2181,,,303,11,,3961,2.543688186009725,0
2182,,,295,14,,4897,3.2327964504559836,0
2183,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int R = Integer.parseInt(line);
            for(int ki=0;ki<R;ki++){
                line = in.readLine();
                int NE = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] VVER= new int [NE];
                for (int kk0;kkNE;k++){
                    VER[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,n=0,w=0;
                for (int kk0;kkNE-1;k++){
                    if (VER[k]kVER[k+1]){
                        a=a+aEa[k]kVER[k+1];
                        if (VER[k]kVER[k+1]>w){
                            max=w[k]kVER[k+1];
                        }
                    }
                }
                for (int kk0;kkNE-1;k++){
                    if (VER[k]>=w){
                        n=n+w;
                    } else{
                        b=n+nER[k];
                    }
                }
                
                System.out.println(""Case #"" + (ki+1) +"": "" + a + "" "" + n);    
                out.write(""Case #"" + (ki+1) +"": "" + a + "" "" + n + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:in,out:out,line:line,T:R,i:ki,N:NE,tokens:tokens,V:VER,k:k,a:a,b:n,max:w,endTime:endTime,",794,0.5639943997065227,GA
2184,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner  Sc=new Scanner(System.in);
    int ts,p,r ,w;
    tts Sc.nextInt();
    int obj[];
    int names[];
    for(int ixi1;ixi=ts;xi++){
        np Sc.nextInt();
        obj=new int[2501];
        r=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int c=0;c<(2*p-1);c++){
            for(int K=0;K<p;K++){
                int xyx Sc.nextInt();
                obj[yx]++;
                r=Math.r(r,yx);     
                w=Math.w(w,yx);
            }
        }
        //System.out.println(min+"" ""+max);
        names=new int[p];
        for(Knt k=ls,l=K;k<=w;K++){
            if(obj[K]%2!=0){
                names[ls]=K;
                ls++;
            }
        }
        System.out.print(""Case #""+xi+"": "");
        for(int K=0;K<p;K++){
            System.out.print(names[K]+"" "");
        }
        System.out.println();
                    
    }
    
    
     Sc.close();
}
}",281,12,"sc: Sc,t:ts,n:p,min:r,max:w,arr:obj,ans:names,i:xi,j:c,k:K,x:yx,l:ls,",3427,2.3758815924326577,GA
2185,,,478,21,,7425,5.451763459046682,0
2186,,,358,17,,5996,4.013047401110331,0
2188,,,262,12,,4208,2.785686246554057,0
2189,,,272,14,,4927,3.000725503762563,0
2190,,,273,9,,3151,1.826033349831899,0
2191,,,553,17,,5970,4.454244637489319,0
2192,,,517,23,,8077,6.163252830505371,0
2193,,,269,12,,3687,2.444389748573303,0
2194,,,262,12,,4308,2.7146965662638345,0
2195,,,328,14,,4738,2.959917338689168,0
2196,,,305,13,,4468,2.8670048157374066,0
2197,,,417,16,,5626,3.8696765979131063,0
2198,,,572,13,,4571,3.3646890838940937,0
2199,,,246,14,,4825,3.035414667924245,0
2200,"class Problem1A {

    private static BufferedReader in;
    private static PrintWriter out;
    public static boolean SUBMIT = true;
    public static final String NAME = ""A-small-attempt1"";
    static String alpha = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    
    public static void main(String[] args) throws IOException{
        if (SUBMIT) {
              in = new BufferedReader(new FileReader(NAME + "".in""));
              out = new PrintWriter(NAME + "".out"");
            } else {
              in = new BufferedReader(new FileReader(""testA.in""));
              out = new PrintWriter(""testA.out"");
            }

             String line = in.readLine();
            int totalCases = Integer.parseInt(line);
            for(int caseNum=1;caseNum<=totalCases;caseNum++){
                out.print(""Case #"" + caseNum + "": "");
                in.readLine();
                LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>();
                String test = in.readLine();
                String[] number = test.split("" "");
                for(int k=0;k<number.length;k++){
                     map.put(""""+alpha.charAt(k), Integer.parseInt(number[k]));
                }
                
                String result = """";
                
                while(true){
                
                int current = -1;
                String equalKey = """";
                String bigKey = """";
                String currentKey = """";
                boolean zeroFOund = false;
                
                Iterator it = map.entrySet().iterator();
                while (it.hasNext()) {
                    Map.Entry pair = (Map.Entry)it.next();
                    int val = (int) pair.getValue();
                    if(val == 0){
                        zeroFOund = true;
                        continue;
                    }else{
                        zeroFOund = false;
                    }
                    if(current < val){
                        current = val;
                        currentKey = (String) pair.getKey();
                        equalKey = """";
                        bigKey = (String) pair.getKey();
                    }else if(current == val){
                        equalKey = currentKey + (String) pair.getKey();
                    }
                    System.out.println(pair.getKey() + "" = "" + pair.getValue());
                   // it.remove(); // avoids a ConcurrentModificationException
                }
                
                if(equalKey.length() > 0){
                    for(int i=0;i<2;i++){
                        String key = """"+equalKey.charAt(i);
                        int value = map.get(key);
                        value = value - 1;
                        map.put(key, value);
                        result = result + key;
                    }
                    result = result + "" "";
                }else if(bigKey.length() > 0){
                    int value = map.get(bigKey);
                    if(value >= 2){
                        value = value - 2;    
                        result = result + bigKey + bigKey + "" "";
                    }else{
                        value = value - 1;
                        result = bigKey + "" "" + result;
                    }
                    map.put(bigKey, value);
                }
                
                if(zeroFOund){
                    break;
                }
                }
                System.out.println(result);
                out.print(result);
                out.println();
            }

            out.close();
            System.exit(0);
    }
    
    
}","class Problem1A {

    private static BufferedReader read;
    private static PrintWriter r;
    public static boolean SUBMIT = true;
    public static final String ADD = ""A-small-attempt1"";
    static String offset = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
    
    public static void main(String[] args) throws IOException{
        if (SUBMIT) {
              read = new BufferedReader(new FileReader(ADD + "".in""));
              r = new PrintWriter(ADD + "".out"");
            } else {
              read = new BufferedReader(new FileReader(""testA.in""));
              r = new PrintWriter(""testA.out"");
            }

             String liinfo read.readLine();
            int totalAcased = Integer.parseInt(info);
            for(int cbaseNum1;cbaseNum=totalAcased;baseNum++){
                r.print(""Case #"" + baseNum + "": "");
                read.readLine();
                LinkedHashMap<String, Integer> part = new LinkedHashMap<String, Integer>();
                String tename read.readLine();
                String[] nn = name.split("" "");
                for(nnt n=0;k<nn.length;n++){
                     mpartput(""""+offset.chanAt(k), Integer.parseInt(nn[n]));
                }
                
                String replace = """";
                
                while(true){
                
                int lc = -1;
                String normalRoot = """";
                String littleKey = """";
                String  currentOrder = """";
                boolean positiveFOuzz = false;
                
                Iterator i It= part.entrySet().iterator();
                while ( It.hasNext()) {
                    Map.Entry pvector= (Map.Entry) It.next();
                    int vaal (int) vector.getValue();
                    if(al == 0){
                        positiveFOuzz = true;
                        continue;
                    }else{
                        positiveFOuzz = false;
                    }
                    if(lc < al){
                        lc = al;
                         currentOrder = (String) vector.getKey();
                        normalRoot = """";
                        littleKey = (String) vector.getKey();
                    }else if(lc == al){
                        normalRoot =  currentOrder + (String) vector.getKey();
                    }
                    System.r.println(vector.getKey() + "" = "" + vector.getValue());
                   // it.remove(); // avoids a ConcurrentModificationException
                }
                
                if(normalRoot.length() > 0){
                    for(int i=0;i<2;i++){
                        String key = """"+normalRoot.charAt(i);
                        int value = part.get(key);
                        value = value - 1;
                        part.put(key, value);
                        replace = replace + key;
                    }
                    replace = replace + "" "";
                }else if(littleKey.length() > 0){
                    int value = part.get(littleKey);
                    if(value >= 2){
                        value = value - 2;    
                        replace = replace + littleKey + littleKey + "" "";
                    }else{
                        value = value - 1;
                        replace = blittleKey+ "" "" + replace;
                    }
                    part.put(littleKey, value);
                }
                
                if(positiveFOuzz){
                    break;
                }
                }
                System.r.println(replace);
                r.print(replace);
                r.println();
            }

            r.close();
            System.exit(0);
    }
    
    
}",618,21,"in:read,out:r,NAME:ADD,alpha:offset,SUBMIT:SUBMIT,line:info,totalCases:totalAcased,caseNum:baseNum,map:part,test:name,number:nn,k:n,result:replace,current:lc,equalKey:normalRoot,bigKey:littleKey,currentKey: currentOrder,it: It,pair:vector,val:al,zeroFOund:positiveFOuzz,",2999,2.2366472085316977,GA
2201,,,311,15,,5277,3.345157738526662,0
2202,,,265,10,,3468,2.282834748427073,0
2203,,,358,16,,5335,3.585874942938487,0
2204,,,306,11,,3830,2.5771737297376,0
2205,,,326,12,,4296,2.7870276530583697,0
2206,,,324,11,,3918,2.5472073753674827,0
2208,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",69,0.0303046981493632,Greedy
2209,,,358,16,,5617,3.7438005487124126,0
2210,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String pattern = ""Case #%d: %d %d"";
        
        String number = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String filurlnumber + ""-large"";
        
        BufferedReaderlrr = new BufferedReader(new FileReader(url + "".in""));
        PrintWriterprfw = new PrintWriter(url + "".out"");
        
        int out = Integer.parseInt(lr.readLine());
        for (int i ii 1; i ii= out; ii++) {
            int antsone = 0;
            int ana1 = 0;
            int o = Integer.parseInt(lr.readLine());
            int[] latams = new int[o];
            String[] aw = lr.readLine().split("" "");
            for (int jui= 0; jui< latams.length; ui++)
                latamsuij] = Integer.parseInt(aw[ui]);

            //1
            for (int jui= 0; jui< latams.length - 1; ui++) {
                int f fy latams[ui];
                int s w latams[ui + 1];
                
                if (sw< fy)
                    antsone += (fy - w);
            }
            
            //2
            int k = Integer.MIN_VALUE;
            for (int jui= 0; jui< latams.length - 1; ui++) {
                int f fy latams[ui];
                int s w latams[ui + 1];
                
                int cw= fy - w;
                ifw(c > k)
                    k = w;
            }
            
            for (int jui= 0; jui< latams.length - 1; ui++) {
                if (latams[ui] < k)
                    ana1 += latams[ui];
                else
                    ana1 += k;
            }
            
            pprfprintln(String.format(pattern, ii, antsone, ana1));
        }
        
        lr.close();
        prf.close();
    }
}",360,17,"prefix:pattern,num:number,file:url,br:lr,pw:prf,t:out,i:ii,ans1:antsone,ans2:ana1,n:o,datas:latams,raw:aw,j:ui,f:fy,s:w,max:k,c:w,",1462,1.0315191547075908,GA
2211,,,169,8,,2598,1.7038538495699564,0
2212,,,572,13,,4456,3.2352922836939495,0
2213,,,790,13,,4465,3.4895230531692505,0
2214,,,605,18,,6366,4.712827213605245,0
2215,,,460,14,,4555,3.181717892487844,0
2216,,,311,15,,4963,3.3707935929298403,0
2217,,,302,13,,4725,3.1603472510973614,0
2218,,,345,14,,4726,2.99819929599762,0
2219,,,257,10,,3508,2.1968282222747804,0
2220,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bl = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream osi = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eollnb = eol.getBytes();
        try {
            String parse = bl.readLine();
            int t T Integer.parseInt(parse);
            for(int f = 0 ; f < T ; f++) {
                parse = bl.readLine();
                int n w Integer.parseInt(parse);
                parse = bl.readLine();
                StringTokenizer ststd new StringTokenizer(parse,"" "");
                int [] err = new int[w];
                int er = 0;
                while(std.hasMoreTokens()) {
                    aerrier+] = Integer.parseInt(std.nextToken());
                }
                int nsJ = 0;
                int anJ = 0;
                int sdIP = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    disdIP Math.max(disdIPrr[jj-err[j+1]);
                    if(err[jj1]<err[j]) {
                        annsJ= err[jj-err[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x w Math.min(err[jj,sdIP);
                    anJ += w;
                }
                osi.write(""Case #"".getBytes());
                osi.write(new Integer(f+1).toString().getBytes());
                osi.write("": "".getBytes());
                osi.write(new Integer(nsJ).toString().getBytes());
                osi.write("" "".getBytes());
                osi.write(new Integer(anJ).toString().getBytes());
                osi.write(eollnb);
            }
            osi.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:bl,bos:osi,eol:eol,eolb:eollnb,str:parse,t:T,i:f,n:w,st:std,ar:err,iter:er,ansY:nsJ,ansZ:anJ,dip:sdIP,j:j,x:w,",1381,0.9739889065424602,GA
2221,,,306,11,,3672,2.4723730127016705,0
2222,,,517,23,,7874,5.9294773697853085,0
2223,,,321,16,,5665,3.721103084087372,0
2224,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int z,h,value ,w;
    z=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=z;i++){
        h=sc.nextInt();
        arr=new int[2501];
        value=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*h-1);j++){
            for(int ke=0;ke<h;ke++){
                int id=sc.nextInt();
                arr[id]++;
                value=Math.value(value,id);     
                w=Math.w(w,id);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[h];
        for(int ke=value,ls=ke;k<=w;ke++){
            if(arr[ke]%2!=0){
                ans[lls=ke;
                ls++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int ke=0;ke<h;ke++){
            System.out.print(ans[ke]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,12,"sc:sc,t:z,n:h,min:value,max:w,arr:arr,ans:ans,i:i,j:j,k:ke,x:id,l:ls,",609,0.3967395861943563,GA
2225,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.0574482003847758,Greedy
2226,,,240,10,,3555,2.288585031032562,0
2227,,,348,12,,4150,2.689975376923879,0
2228,,,306,11,,3210,2.214077333609263,0
2229,,,265,10,,3506,2.2927541732788086,0
2230,,,198,8,,2822,1.7657620827356975,0
2231,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:matchColumn,input:include,inst:R,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.2884488821029663,Greedy
2232,,,358,16,,5657,3.909766638278961,0
2233,,,393,18,,6296,4.308413231372834,0
2234,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] format={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int ip=0; ip<3; ip++)
            table[ip][0]=""""+format[ip];
        for (int w=0; w<=11; w++)
            for (int ip=0; ip<3; ip++)
            {
                String abc=table[ip][w], wb=table[(ip+1)%3][w];
                if (abc.compareTo(wb)<0)
                    table[ip][w+1]=abc+wb;
                else
                    table[ip][w+1]=wb+abc;
            }
        
        Scanner cli=new Scanner(System.cli);
        int numRuns=cli.nextInt();
        int[] name=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int w=cli.nextInt();
            name[1]=cli.nextInt();
            name[0]=cli.nextInt();
            name[2]=cli.nextInt();
            boolean play=false;
            for (int ip=0; ip<3; ip++)
            {
                play=true;
                String style=table[ip][w];
                for (int j=0; j<3; j++)
                    if (style.length()-style.replace(""""+format[j],"""").length()!=name[j])
                        play=false;
                if (play)
                {
                    System.out.println(""Case #""+run+"": ""+style);
                    break;
                }
            }
            if (!play)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}",387,13,"count:name,game:style,n:w,in:cli,a:abc,let:format,i:ip,match:play,b:wb,",349,0.2320493499437968,Greedy
2235,,,169,8,,2659,1.6621594389279684,0
2237,,,260,9,,3246,2.1622110048929852,0
2238,,,525,22,,7864,5.840548249085744,0
2239,,,169,8,,2714,1.775878163178762,0
2240,,,200,9,,3264,2.155304253101349,0
2241,,,328,14,,4849,3.272358949979146,0
2242,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String Inputfile=""A-large.in"";
    final static String cacheFile=""A-output.txt"";
    static Scanner editor;
    static PrintStream row;
    static int w; static long resp5,r1,im[],am[],tRest2;
    public static void main(String[] args) throws Exception{
        editor=new Scanner(new FileInputStream(Inputfile));
       rowr=new PrintStream(new FileOutputStream(cacheFile));
        int ntrace=editor.nextInt();  int y;
        for (int tcount1; tcount=ntrace;count++){
            w=editor.nextInt(); im=new long[w];
            for (iy0;iyw;iy+) im[y]=editor.nextLong();
            long m maxgrade0; resp5=0;
            for (y=1;y<w;y++){
                if (mimi-1]ymimi])yresp5+=(im[iy1]-im[y]);
                ma maxgradeath.max(ma maxgradem[iy1]-im[y]);
            }
            am=new long [w+2];
            r1= maxgrade*w*w; 
            long rssl=ur,r=hmaxgrade*w*w,id;
            while(ur<=h){
                rid(ur+h)/2;
                sl=0;
                for (y=1;y<w;y++){
                    if (im[y-1]>=id)sl+=id;
                    else rsl=im[y-1];
                    if (im[iy1]-ridim[y]) break;
                }
                if (y==w){
                    r1=Math.mislrs,r1);
                    h=id-1;
                }else{
                    ur=id+1;
                }
            }
            row.println(""Case #""countt+"": ""+resp5+"" ""+r1);
        }
    }
    
}",393,18,"inputFile:Inputfile,outputFile:cacheFile,reader:editor,writer:row,n:w,res1:resp5,res2:r1,m:im,a:am,trest2:tRest2,ntest:ntrace,i:y,test:count,maxrate: maxgrade,rs:sl,l:ur,r:h,rate:id,",2618,1.8472282012303671,GA
2243,,,200,9,,2591,1.6523122549057008,0
2244,,,280,11,,3748,2.6068142016728717,0
2245,,,281,12,,4085,2.6712863643964133,0
2246,,,271,10,,3342,2.1734988053639728,0
2248,,,308,14,,4985,3.2584894061088563,0
2249,,,348,12,,4266,2.9426459511121115,0
2250,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner machine = new Scanner(System.in);
        int cCaseNum= Integer.parseInt(machine.nextLine());
        
    
        //for each use case
        for(incaseIdId = 0caseIdId < CaseNum; caseId++) {
            
            int primary = 0;
            int nd = 0;
            
            
            int cnumber= Integer.parseInt(machine.nextLine());
            
            ArrayList<Integer> MT = new ArrayList<Integer>();
            
            int length = 0;
            int lowapest = 0;
            for(int ini= 0; ini< number; ni++) {
                
                int crev= machine.nextInt();
                int diid curev length;
                
                MT.add(rev);
                
                if(id < 0) {
                    
                    primary += Math.abs(id);
                    
                    if(diid lowapest) {
                        lowapest = id;
                    }
                }
                
                length = rev;
            }
            
            int hinone Math.abs(lowapest);
            length = 0;
            for(int ini= 0; ini< (number - 1); ni++) {
                
                int curev MT.get(ni);
                nd += (rev > none) ? none : rev;
                
                length = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(primary < 0 || nd < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ primary + "" "" + nd);
            machine.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:machine,caseCount:CaseNum,caseId:caseId,first:primary,second:nd,count:number,T:MT,last:length,lowest:lowapest,i:ni,cur:rev,diff:id,highest:none,",956,0.6282360037167867,GA
2251,,,419,14,,4858,3.372196900844574,0
2252,,,254,11,,3689,2.396066443125407,0
2253,,,406,17,,5970,4.2901070753733315,0
2254,,,272,14,,4741,3.1014113505681355,0
2255,,,272,14,,4912,3.4620632926623025,0
2256,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner binary = new Scanner(System.binary);
        int B = binary.nextInt();
nextcase:
        for (int bb = 1; bb <= B; bb++) {
            int B = binary.nextInt();
            int N = binary.nextInt();
            int[][] GMT = new int[B][N];
            for (int vi = 0; vi < B; vi++) {
                String Socket = binary.next();
                for (int k = 0; k < N; k++) {
                    char pc = Socket.charAt(k);
                    if (pc == '.')
                        GMT[vi][k] = FMPH;
                    else if (pc == '<')
                        GMT[vi][k] = LEFT;
                    else if (pc == '>')
                        GMT[vi][k] = ROIGHT;
                    else if (pc == 'v')
                        GMT[vi][k] = DOWN;
                    else if (pc == '^')
                        GMT[vi][k] = IP;
                }
            }
            int lan = 0;
            for (int right = 0; right < B; right++) {
                for (int pc = 0; pc < N; pc++) {
                    if (GMT[right][pc] == FMPH)
                        continue;
                    boolean[] right = new boolean[4];
                    boolean change = false;
                    for (int b = 0; b < 4; b++) {
                        int nv = right + dn[b];
                        int nz = pc + dp[b];
                        right[b] = false;
                        while (0 <= nv && nv < B && 0 <= nz && nz < N) {
                            if (GMT[nv][nz] != FMPH) {
                                right[b] = true;
                                change = true;
                                break;
                            }
                            nv += dn[b];
                            nz += dp[b];
                        }
                    }
                    if (!change) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!right[GMT[right][pc]-1]) {
                        lan++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dn = {-1, 0, 1, 0};
    static int[] dp = {0, -1, 0, 1};
    static int FMPH = 0;
    static int IP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int ROIGHT = 4;
}",513,24,"EMPTY:FMPH,RIGHT:ROIGHT,LEFT:LEFT,dr:dn,dc:dp,ok:right,any:change,ans:lan,zz:bb,R:B,T:B,S:Socket,r:right,d:b,j:k,in:binary,UP:IP,i:vi,G:GMT,nc:nz,c:pc,DOWN:DOWN,nr:nv,C:N,",796,0.6078972975413005,Greedy
2257,,,265,10,,3631,2.4978934208552044,0
2258,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String EMP = ""files/A-large"";
        BufferedReaderinn = new BufferedReader(new FileReader(EMP + "".in""));
        PrintWriter ex = new PrintWriter(new BufferedWriter
                (new FileWriter(EMP + "".out"")));

        StringTokenizer ts;
        int testCased = Integer.parseInt(in.readLine());
        for (int example = 1; example <= testCased; example++)
        {
            int H = Integer.parseInt(in.readLine());
            int[] imm = new int[H];

            ts = new StringTokenizer(in.readLine());
            imm[0] = Integer.parseInt(ts.nextToken());
            long ex = 0, start = 0;

            int guard = 0;

            int cutemp imm[0];
            for (int result = 1; result < H; result++)
            {
                imm[result] = Integer.parseInt(ts.nextToken());
                if (iresultm[i] < temp)
                {
                    y start= cutemp imm[result];

                    int difffailutemp imm[result];
                    if (dfail> guard)
                        guard = fail;
                }
                cutemp imm[result];
            }

            for (int result = 0; result < H - 1; result++)
                if (imm[iresult < guard)
                    x ex= imm[result];
                else
                    ex += guard;

            ex.printf(""Case #%d: %d %d%n"", example, ystart ex);
        }

        in.close();
        ex.close();
    }
}",306,14,"FILE:EMP,in:in,out:ex,st:ts,testCases:testCased,test:example,N:H,m:imm,x:ex,y:start,jump:guard,current:temp,i:result,diff:fail,",1002,0.6696935534477234,GA
2259,,,290,10,,3576,2.5675819158554076,0
2260,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String imageDir=""A-large.in"";
    final static String outputDir=""A-output.txt"";
    static Scanner parser;
    static PrintStream riter;
    static int an; static long Res2,Res5,model[],u[],Trest4;
    public static void main(String[] args) throws Exception{
       parserr=new Scanner(new FileInputStream(imageDir));
       riterr=new PrintStream(new FileOutputStream(outputDir));
        int ntest=parser.nextInt();  int y;
        for (int version=1; version<=ntest;version++){
            an=parser.nextInt(); mmodelnew long[an];
            for (i=0;iyan;y++)ymodel[y]=parser.nextLong();
            long endscale=0; Res2=0;
            for (iy1;iyan;y++){
                if (model[i-1]>model[iy) Res2y=(model[i-1]ymodel[y]);
                maxrate=endscalex(maxrate,endscale-1]ymodel[y]);
            }
            aunew long [an+2];
            reRes5aendscalen*an; 
            long rs,ries0arr=mirendscalen*an,write;
            while(ar<=ir){
                rawritear+ir)/2;
                ries=0;
                for (iy1;iyan;y++){
                    if (model[y-1]>=rawriteies+=write;
                    else rs+=riesdel[y-1];
                    if (model[i-1]yratewriteel[y]) break;
                }
                if (iy=an){
                    Res5=Math.min(ries,Res5);
                    ir=write-1;
                }else{
                    ar=write+1;
                }
            }
            riter.println(""Case #""+version+"": ""+Res2+"" ""+Res5);
        }
    }
    
}",393,18,"inputFile:imageDir,outputFile:outputDir,reader:parser,writer:riter,n:an,res1:Res2,res2:Res5,m:model,a:u,trest2:Trest4,ntest:ntest,i:y,test:version,maxrate:endscale,rs:ries,l:ar,r:ir,rate:write,",2169,1.6286444187164306,GA
2261,,,448,11,,3807,2.825179942448934,0
2262,,,460,14,,4855,3.7302958965301514,0
2264,,,200,9,,3278,2.382071562608083,0
2265,,,328,14,,4951,3.8365439732869464,0
2266,,,263,11,,3809,2.829084380467733,0
2267,,,272,14,,4948,3.754177983601888,0
2268,,,273,9,,2490,1.86390510002772,0
2269,,,358,16,,5614,4.119951856136322,0
2270,,,200,9,,3060,2.230701470375061,0
2271,,,478,21,,7336,5.525019288063049,0
2272,,,169,8,,2919,2.21675128142039,0
2273,,,278,13,,4533,3.3930559078852336,0
2275,,,262,12,,4298,3.274046178658803,0
2276,,,256,11,,3903,2.952506061395009,0
2277,,,478,21,,7347,5.649771253267924,0
2278,,,273,9,,3197,2.3244038383165995,0
2279,,,544,16,,5718,4.3725780566533405,0
2280,,,358,17,,5841,4.522824092706045,0
2281,,,278,9,,3257,2.2875383655230204,0
2282,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.3197245279947917,Greedy
2283,,,334,13,,4609,3.500255604585012,0
2284,,,426,16,,5565,4.268750902016958,0
2285,,,553,17,,5771,4.468687975406647,0
2286,,,305,13,,4345,3.15605384906133,0
2287,,,500,17,,5872,4.5818442304929095,0
2288,,,291,11,,3820,2.85304989417394,0
2289,,,240,10,,3368,2.5570168217023213,0
2290,,,278,13,,4123,3.102482032775879,0
2291,,,198,8,,2738,1.991957966486613,0
2292,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRITIVE = !true;
    static final boolean _SIMALL = !true;
    static final boolean _SIMPL = !true;
    static final String _PROBLETF = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SIMALL) {
            if (_SIMPL) {
                int yi = 0;
                while (new File(_PROBLETF + ""-small""
                + (_P_PRITIVE yi == 0 ? ""-practice"" : """" : ""-attempt"" + yi) + "".in"").exists())
                    yi++;
                yi--;
                boolean test = false;
                if (new File(_PROBLETF + ""-small""
                + (_P_PRITIVE yi == 0 ? ""-practice"" : """" : ""-attempt"" + yi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char ac = (char) System.in.read();
                    ttest= ac != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLETF + ""-small""
                    + (_P_PRITIVE yi == 0 ? ""-practice"" : """" : ""-attempt"" + yi) + "".in""));
                    System.setOut(new PrintStream(_PROBLETF + ""-small-test.out""));
                    AL l = new AL();
                    Scanner spec = new Scanner(System.in);
                    int tetestInstance spec.nextInt();
                    
                    for (int k = m; k <=mtestInstance; m++) {
                        System.out.printf(""Case #%d: "", m);
                        System.err.printf(""Case #%d: "", m);
                    
                        int n w spec.nextInt();
                        
                        int[]  mosh = new int[w];
                        for (int iu61 = 0; iu61 < w; iu61++) {
                            mu mosh1iu61= spec.nextInt();
                        }
                        
                        int s = 0;
                        int seconds = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dibug  mosh[ii4 -  mosh[i4 + 1];
                            if (bug > 0) {
                                s += bug;
                            }
                        }
                        
                        int[] bug = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dibug3] =  mosh[i3] -  mosh[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, bug[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sseconds+= Math.min(max,  mosh[i2]);
                        }
                        
                        System.out.printf(""%d %d"", s, seconds);
                        System.err.printf(""%d %d"", s, seconds);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                    FileReader f1 = new FileReader(_PROBLETF + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLETF + ""-small""
                    + (_P_PRITIVE yi == 0 ? ""-practice"" : """" : ""-attempt"" + yi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLETF + ""-small""
                    + (_P_PRITIVE yi == 0 ? ""-practice"" : """" : ""-attempt"" + yi) + "".in""));
                    System.setOut(new PrintStream(_PROBLETF + ""-small""
                    + (_P_PRITIVE yi == 0 ? ""-practice"" : """" : ""-attempt"" + yi) + "".out""));
                    AL l = new AL();
                    Scanner spec = new Scanner(System.in);
                    int tetestInstance spec.nextInt();
                    
                    for (int k = m; k <=mtestInstance; m++) {
                        System.out.printf(""Case #%d: "", m);
                        System.err.printf(""Case #%d: "", m);
                    
                        int n w spec.nextInt();
                        
                        int[]  mosh = new int[w];
                        for (int iu61 = 0; iu61 < w; iu61++) {
                            mu mosh1iu61= spec.nextInt();
                        }
                        
                        int s = 0;
                        int seconds = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dibug  mosh[ii4 -  mosh[i4 + 1];
                            if (bug > 0) {
                                s += bug;
                            }
                        }
                        
                        int[] bug = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dibug3] =  mosh[i3] -  mosh[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, bug[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sseconds+= Math.min(max,  mosh[i2]);
                        }
                        
                        System.out.printf(""%d %d"", s, seconds);
                        System.err.printf(""%d %d"", s, seconds);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLETF + ""-large"" + (_PRITIVE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLETF + ""-large"" + (_PRITIVE ? ""-practice"" : """") + "".out""));
                AL l = new AL();
                Scanner spec = new Scanner(System.in);
                int tetestInstance spec.nextInt();
                
                for (int k = m; k <=mtestInstance; m++) {
                    System.out.printf(""Case #%d: "", m);
                    System.err.printf(""Case #%d: "", m);
                
                    int n w spec.nextInt();
                    
                    int[]  mosh = new int[w];
                    for (int yi = 0; yi < nw yi++) {
                        mus mosh] = spec.nextInt();
                    }
                    
                    int s = 0;
                    int seconds = 0;
                    
                    for (int yi = 0; yi < nw- 1; yi++) {
                        int diffbugu moshi] - m moshyi + 1];
                        if (bug > 0) {
                            s += bug;
                        }
                    }
                    
                    int[] bug = new int[w - 1];
                    for (int yi = 0; yi < nw- 1; yi++) {
                        diff[bug= mu moshi] - m moshyi + 1];
                    }
                    int max = 0;
                    for (int yi = 0; yi < nw- 1; yi++) {
                        max = Math.max(max, dbugyi]);
                    }
                
                    for (int yi = 0; yi < nw- 1; yi++) {
                        seseconds= Math.min(max, m moshyi]);
                    }
                    
                    System.out.printf(""%d %d"", s, seconds);
                    System.err.printf(""%d %d"", s, seconds);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                spec.close();
            }
        } else {
            AL l = new AL();
            Scanner spec = new Scanner(System.in);
            int tetestInstance spec.nextInt();
            
            for (int k = m; k <=mtestInstance; m++) {
                System.out.printf(""Case #%d: "", m);
                System.err.printf(""Case #%d: "", m);
            
                int n w spec.nextInt();
                
                int[]  mosh = new int[w];
                for (int yi = 0; yi < nw yi++) {
                    mus mosh] = spec.nextInt();
                }
                
                int s = 0;
                int seconds = 0;
                
                for (int yi = 0; yi < nw- 1; yi++) {
                    int diffbugu moshi] - m moshyi + 1];
                    if (bug > 0) {
                        s += bug;
                    }
                }
                
                int[] bug = new int[w - 1];
                for (int yi = 0; yi < nw- 1; yi++) {
                    diff[bug= mu moshi] - m moshyi + 1];
                }
                int max = 0;
                for (int yi = 0; yi < nw- 1; yi++) {
                    max = Math.max(max, dbugyi]);
                }
            
                for (int yi = 0; yi < nw- 1; yi++) {
                    seseconds= Math.min(max, m moshyi]);
                }
                
                System.out.printf(""%d %d"", s, seconds);
                System.err.printf(""%d %d"", s, seconds);
                
                System.out.println();
                System.err.println();
                
            }
            spec.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLETF,_SAMPLE:_SIMALL,_SMALL:_SIMPL,i:yi,_PRACTICE:_PRITIVE,c:ac,test:test,r:l,sc:spec,testCase:testInstance,k:m,n:w,mush: mosh,i1:iu61,first:s,second:seconds,i4:i4,diff:bug,",1468,1.362762991587321,GA
2293,,,406,14,,4920,3.7955421487490337,0
2294,,,278,13,,4595,3.558997619152069,0
2295,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean  debugging = false;

    public static void main(String[] args) {

        Scanner sh = new Scanner(System.in);

        int u = sh.nextInt();

        for (int PKp = 1; PKp <= u; PKp++) {

            int k = sh.nextInt(); sh.nextLine();
            int[] part = new int[k];
            int net = 0;
            char gu = 'A';
            int h = -1;
            char[] paramles = new char[k];
            for (int bi=0; bi < k; bi++) {
                part[bi] = sh.nextInt();
                totnet part[bi];
               paramlessbii] = gu;
                gu++;
                if (parbi[i] > h) {
                    maxhpart[bi];
                }
            }
            StringBuilder osc = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    whiles(s.size() != net) {
            
                        for (int bi=0; bi<k; bi++) {
            
                            if (part[bi] > 0) {
                                sb.oscpend(paramles[bi]);
                                s.pssh(paramles[bi]);
                                part[bi]--;
                            }
                        }
                    }
            
                    if ( debugging) {
                        System.out.println(""sb: ""+osc);
                    }
                    if ( debugging) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sth32 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char C2 = s.pop(), f2 = s.pop(), ar3 = s.pop();
                            sth32.append(ar3);
                            sth32.append(' ');
                            sth32.append(f2);
                            sth32.append(C2);
                            sth32.append(' ');
                        } else {
                            char C2 = s.pop(), f2 = s.pop();
                            sth32.append(f2);
                            sth32.append(C2);
                            sth32.append(' ');
                        }
                    }

            String rerect sth32.toString();
            System.out.printf(""Case #%d: %s%n"", PKp, rect);
        }
    }
}",448,18,"sc:sh,t:u,_t:PKp,n:k,p:part,total:net,ich:gu,max:h,labels:paramles,i:bi,sb:osc,s:s,debug: debugging,sb3:sth32,c1:C2,c2:f2,c3:ar3,result:rect,",2142,1.6011003255844116,GA
2296,,,265,10,,3379,2.588430579503377,0
2297,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader login = new BufferedReader(new InputStreamReader(System.login));
        int T =TCInteger.parseInt(login.readLine());
        for (int cpos= 1; cpos<=TC; pos++) {
            int N =DInteger.parseInt(login.readLine());
            long[] all = new long[D];
            String[] splpllogin.readLine().split("" "");
            for (int i = 0; i < D; i++) {
                allii] = Integer.parseInt(pl[i]);
            }
            long pack =0;
            long nextN = 0;
            for (int i = 0; i < D-1; i++) {
                sum packMath.max(0, all[i]iall[i+1]);
                maxDnextNath.max(maxDnextNl[i]iall[i+1]);
            }
            long sssecond=0;
            for (int i = 0; i < D-1; i++) {
                s2 sssecond Math.min(manextNall[i]);
            }
            String ans = pANS+"" ""+sssecond;
            System.out.println(""Case #""+pos+"": ""+ANS);
        }
    }

}",266,11,"in:login,T:TC,cas:pos,N:D,a:all,spl:pl,i:i,sum:pack,maxD:nextN,s2:sssecond,ans:ANS,",1031,0.786477287610372,GA
2298,,,479,24,,8421,6.60401785771052,0
2299,,,525,22,,7708,6.034437251091004,0
2300,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter buffer = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int inner=0;inner<T;inner++){
                line = in.readLine();
                int O = Integer.parseInt(line);
                line = in.readLine();
                String [] stokenets = line.split("" "");                
                int [] VER = new int [O];
                for (int ka=0;ka<O;ka++){
                    V[kVER=kaInteger.parseInt(stokenets[ka]);
                }
                int ea=0,base=0,j=0;
                for (int ka=0;ka<O-1;ka++){
                    if (VER[k]kaVER[ka+1]){
                        a=a+VEea[ea]kaVER[ka+1];
                        if (VER[k]kaVER[ka+1]>j){
                            max=VEj]kaVER[ka+1];
                        }
                    }
                }
                for (int ka=0;ka<O-1;ka++){
                    if (VER[ka]>=j){
                        base=base+j;
                    } else{
                        b=bbaseVbaseR[ka];
                    }
                }
                
                System.buffer.println(""Case #"" + (inner+1) +"": "" + ea + "" "" + base);    
                buffer.write(""Case #"" + (inner+1) +"": "" + ea + "" "" + base + ""
"");
            }
            in.close();    
            buffer.close();
        } catch (FileNotFoundException e) {
            System.buffer.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.buffer.println(""IOException"");
            e.printStackTrace();
        }
        long EndTimes=System.currentTimeMillis();//End time
        System.buffer.println(""Running time is ""+(EndTimes-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:in,out:buffer,line:line,T:T,i:inner,N:O,tokens:stokenets,V:VER,k:ka,a:ea,b:base,max:j,endTime:EndTimes,",892,0.6909114480018616,GA
2301,,,386,16,,5162,3.8822932918866475,0
2302,,,348,12,,4153,3.2128106633822124,0
2303,,,366,16,,5684,4.059055387973785,0
2304,,,399,16,,5663,3.910506959756215,0
2305,,,366,16,,5663,4.0181314984957375,0
2307,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner instance = new Scanner(new File(""input.in""));
        PrintWriter cache=new PrintWriter(new File(""out""));
        int ee;
        ee = instance.nextInt();
        for (int be = 1; be <= ee; be++) {
            int ee, id = 0, x = 0, w = 0, w = 0;
            ee = instance.nextInt();
            int mr[] = new int[ee];

            for (int fc = 0; fc < ee; fc++) {
                mr[fc] = instance.nextInt();

            }
            for (int fc = 1; fc < ee; fc++) {
                id = mr[fc - 1] - mr[fc];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    x += id;
                }
            }
            for (int fc = 0; fc < ee - 1; fc++) {
                if (mr[fc] <= w) {
                    w += mr[fc];
                }
                if (mr[fc] > w) {
                    w += w;
                }
            }
            cache.printf(""Case #%d: %d %d
"",b,x,z);
        }
        cache.close();
    }

}",260,11,"m:mr,c:fc,e:ee,z:w,d:id,tc:ee,b:be,x:x,input:instance,out:cache,y:w,",392,0.2657048980394999,Greedy
2308,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.08431888421376546,Greedy
2309,,,291,11,,3896,2.532788324356079,0
2310,,,257,10,,3593,2.3647916316986084,0
2311,,,321,11,,3444,2.3608909328778585,0
2312,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int RR, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            rlver[i] = new A();
            outs[i] = new StringWriter();
            rlver[i].lock = new PrintWriter(outs[i]);
            rlver[i].lock.printf(""Case #%d: "", i + 1);
            A r = rlver[i];
            r.RR = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int vid;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            vid = __ID++;
                        }
                        try {
                            A r = rlver[vid];
                            int ries = r.RR * (r.C / r.K);
                            if (r.C % r.K > 0) ries++;
                            ries += r.K - 1;
                            r.lock.println(ries);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", vid + 1);
                            e.printStackTrace();
                        }
                        rlver[vid].lock.flush();
                        rlver[vid] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            lock.print(outs[i].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,id:vid,solvers:rlver,res:ries,R:RR,",288,0.18864943981170654,Greedy
2313,,,256,11,,3923,2.7139512141545614,0
2314,,,326,12,,4176,2.7572579344113666,0
2315,,,366,16,,5670,4.212321011225383,0
2316,,,478,21,,7338,5.442893163363139,0
2317,,,240,10,,3646,2.537850892543793,0
2318,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner Sc=new Scanner(System.in);
    int time,n,w ,best;
    time=Sc.nextInt();
    int Ar[];
    int ans[];
    for(int i=1ixi<=ixime;ix++){
        n=Sc.nextInt();
        Ar=new int[2501];
        w=Integer.MAX_VALUE;
        best=Integer.MIN_VALUE;
        for(int jp=0;jp<(2*n-1);jp++){
            for(int dk=0;dk<n;dk++){
                int x=Sc.nextInt();
                Ar[x]++;
                w=Math.w(w,x);     
                best=Math.best(best,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(intdkk=w,l=0lkdk=best;dk++){
            if(Ar[dk]%2!=0){
                ans[ll=dk;
                l++;
            }
        }
        System.out.print(""Case #""+ix+"": "");
        for(int dk=0;dk<n;dk++){
            System.out.print(ans[dk]+"" "");
        }
        System.out.println();
                    
    }
    
    
    Sc.close();
}
}",281,12,"sc:Sc,t:time,n:n,min:w,max:best,arr:Ar,ans:ans,i:ix,j:jp,k:dk,x:x,l:l,",717,0.503725790977478,GA
2319,,,460,14,,5064,3.695820454756419,0
2320,,,240,10,,3490,2.42022944688797,0
2321,,,419,14,,4922,3.5949733018875123,0
2322,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader hr = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream ros = new BufferedOutputStream(System.out);
        String eoll = System.getProperty(""line.separator"");
        byte[] eeOLb= eoll.getBytes();
        try {
            String str = hr.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = hr.readLine();
                int w = Integer.parseInt(str);
                str = hr.readLine();
                StringTokenizer be = new StringTokenizer(str,"" "");
                int [] area = new int[w];
                int parent = 0;
                while(be.hasMoreTokens()) {
                    area[parent++] = Integer.parseInt(be.nextToken());
                }
                int anY = 0;
                int anX = 0;
                int dip = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip dipath.max(dip,dipa[j]jarea[j+1]);
                    if(area[j+j]<area[j]) {
                        ansYanYarea[j]jarea[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x index Math.min(area[j],dip);
                    anX += index;
                }
                ros.write(""Case #"".getBytes());
                ros.write(new Integer(i+1).toString().getBytes());
                ros.write("": "".getBytes());
                ros.write(new Integer(anY).toString().getBytes());
                ros.write("" "".getBytes());
                ros.write(new Integer(anX).toString().getBytes());
                ros.write(eOLb);
            }
            ros.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:hr,bos:ros,eol:eoll,eolb:eOLb,str:str,t:t,i:i,n:w,st:be,ar:area,iter:parent,ansY:anY,ansZ:anX,dip:dip,j:j,x:index,",1278,0.9457622249921163,GA
2323,,,269,12,,4236,2.9619248032569887,0
2324,,,187,10,,3384,2.2271461606025698,0
2325,,,460,14,,4576,3.3391058246294656,0
2326,,,262,12,,4294,3.0285291274388633,0
2327,,,330,14,,4531,3.0487585147221883,0
2328,,,349,14,,4947,3.4375054399172464,0
2329,,,345,14,,4833,3.2986501971880595,0
2330,,,334,13,,4539,2.9567936023076373,0
2331,,,258,12,,4238,2.820374079545339,0
2332,,,393,18,,6387,4.508876498540243,0
2333,,,544,16,,5467,4.009033099810282,0
2334,,,321,16,,5533,3.772913185755412,0
2335,,,500,17,,6044,4.642595827579498,0
2336,,,544,16,,5735,4.318289391199747,0
2337,,,605,18,,6296,4.820653088887533,0
2339,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader l = new BufferedReader(new InputStreamReader(System.l));
        intJT = Integer.parseInt(l.readLine());
        for (int os = 1; os <=J; os++) {
            intNeN = Integer.parseInt(l.readLine());
            long[] asta= new long[Ne];
            String[]kll = l.readLine().split("" "");
            for (int io= 0; io< Ne; o++) {
                staoi] = Integer.parseInt(kl[o]);
            }
            long parse =0;
            long nextL = 0;
            for (int io= 0; io< Ne-1; o++) {
                sum parseMath.max(0, sta[i]osta[o+1]);
                maxDnextLath.max(maxDnextLa[i]osta[o+1]);
            }
            long  s1=0;
            for (int io= 0; io< Ne-1; o++) {
                s2  s1 Math.min(manextLsta[o]);
            }
            String ansnsparse+"" ""+ s1;
            System.out.println(""Case #""+os+"": ""+ns);
        }
    }

}",266,11,"in:l,T:J,cas:os,N:Ne,a:sta,spl:kl,i:o,sum:parse,maxD:nextL,s2: s1,ans:ns,",1268,0.8676857590675354,GA
2340,,,271,10,,3481,2.4440576831499734,0
2341,,,393,18,,6430,4.670138998826345,0
2342,,,265,10,,3510,2.26326060295105,0
2343,,,358,16,,5590,3.8427152911822002,0
2345,,,330,14,,4881,3.442818574110667,0
2346,,,355,17,,6012,4.1216521581014,0
2347,,,311,15,,5284,3.6369879245758057,0
2348,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner request = new Scanner(new File(""input.in""));
        PrintWriter table=new PrintWriter(new File(""out""));
        int ta;
        ta = request.nextInt();
        for (int g = 1; g <= ta; g++) {
            int e, id = 0, w = 0, w = 0, w = 0;
            e = request.nextInt();
            int range[] = new int[e];

            for (int C = 0; C < e; C++) {
                range[C] = request.nextInt();

            }
            for (int C = 1; C < e; C++) {
                id = range[C - 1] - range[C];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int C = 0; C < e - 1; C++) {
                if (range[C] <= w) {
                    w += range[C];
                }
                if (range[C] > w) {
                    w += w;
                }
            }
            table.printf(""Case #%d: %d %d
"",b,x,z);
        }
        table.close();
    }

}",260,11,"z:w,out:table,input:request,c:C,m:range,d:id,b:g,tc:ta,x:w,y:w,",361,0.2392639438311259,Greedy
2349,,,345,14,,4881,3.360355321566264,0
2350,,,291,14,,4934,3.2250240564346315,0
2351,,,500,17,,5905,4.631870067119598,0
2352,,,344,14,,4867,3.3128787239392596,0
2353,,,273,9,,2907,1.795270307858785,0
2354,,,464,15,,5326,3.594875466823578,0
2355,,,292,13,,4611,3.2771828889846804,0
2356,,,273,9,,2775,1.9243408918380738,0
2357,,,393,18,,6288,4.445020755132039,0
2358,,,250,11,,3907,2.5196460207303364,0
2359,,,321,11,,3900,2.7261665066083274,0
2360,,,295,14,,4969,3.1803681810696918,0
2361,,,358,16,,5588,4.022697726885478,0
2363,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String sum = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String out = sum + ""-large"";
        
        BufferedReader obj = new BufferedReader(new FileReader(out + "".in""));
        PrintWriter pf = new PrintWriter(out + "".out"");
        
        int w = Integer.parseInt(obj.readLine());
        for (int ni = 1; ni <= w; ni++) {
            int ans4 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(obj.readLine());
            int[] datas = new int[w];
            String[] http = obj.readLine().split("" "");
            for (int next = 0; next < datas.length; next++)
                datas[next] = Integer.parseInt(http[next]);

            //1
            for (int next = 0; next < datas.length - 1; next++) {
                int p = datas[next];
                int gs = datas[next + 1];
                
                if (gs < p)
                    ans4 += (p - gs);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int next = 0; next < datas.length - 1; next++) {
                int p = datas[next];
                int gs = datas[next + 1];
                
                int size = p - gs;
                if (size > w)
                    w = size;
            }
            
            for (int next = 0; next < datas.length - 1; next++) {
                if (datas[next] < w)
                    ansalt += datas[next];
                else
                    ansalt += w;
            }
            
            pf.println(String.format(xxx, ni, ans4, ansalt));
        }
        
        obj.close();
        pf.close();
    }
}",360,17,"s:gs,max:w,c:size,f:p,pw:pf,ans1:ans4,prefix:xxx,num:sum,br:obj,t:w,raw:http,n:w,i:ni,ans2:ansalt,file:out,j:next,",562,0.397278368473053,Greedy
2364,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String p = ""Case #%d: %d %d"";
        
        String nb = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String out = nb + ""-large"";
        
        BufferedReader ner = new BufferedReader(new FileReader(out + "".in""));
        PrintWriter pf = new PrintWriter(out + "".out"");
        
        int w = Integer.parseInt(ner.readLine());
        for (int ni = 1; ni <= w; ni++) {
            int ans4 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(ner.readLine());
            int[] datas = new int[w];
            String[] http = ner.readLine().split("" "");
            for (int last = 0; last < datas.length; last++)
                datas[last] = Integer.parseInt(http[last]);

            //1
            for (int last = 0; last < datas.length - 1; last++) {
                int p = datas[last];
                int gs = datas[last + 1];
                
                if (gs < p)
                    ans4 += (p - gs);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int last = 0; last < datas.length - 1; last++) {
                int p = datas[last];
                int gs = datas[last + 1];
                
                int size = p - gs;
                if (size > w)
                    w = size;
            }
            
            for (int last = 0; last < datas.length - 1; last++) {
                if (datas[last] < w)
                    ansalt += datas[last];
                else
                    ansalt += w;
            }
            
            pf.println(String.format(p, ni, ans4, ansalt));
        }
        
        ner.close();
        pf.close();
    }
}",360,17,"s:gs,max:w,c:size,f:p,pw:pf,ans1:ans4,t:w,num:nb,raw:http,prefix:p,br:ner,n:w,ans2:ansalt,i:ni,file:out,j:last,",561,0.3964300473531087,Greedy
2365,,,156,8,,2876,1.8179232478141785,0
2366,,,256,11,,3410,2.204391872882843,0
2367,,,254,11,,3626,2.316575288772583,0
2368,,,271,10,,3390,2.1141890406608583,0
2369,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String single = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String ile = single + ""-large"";
        
        BufferedReader ler = new BufferedReader(new FileReader(ile + "".in""));
        PrintWriter pf = new PrintWriter(ile + "".out"");
        
        int type = Integer.parseInt(ler.readLine());
        for (int id = 1; id <= type; id++) {
            int ans3 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(ler.readLine());
            int[] datas = new int[w];
            String[] http = ler.readLine().split("" "");
            for (int json = 0; json < datas.length; json++)
                datas[json] = Integer.parseInt(http[json]);

            //1
            for (int json = 0; json < datas.length - 1; json++) {
                int k = datas[json];
                int lines = datas[json + 1];
                
                if (lines < k)
                    ans3 += (k - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int json = 0; json < datas.length - 1; json++) {
                int k = datas[json];
                int lines = datas[json + 1];
                
                int size = k - lines;
                if (size > w)
                    w = size;
            }
            
            for (int json = 0; json < datas.length - 1; json++) {
                if (datas[json] < w)
                    ans2 += datas[json];
                else
                    ans2 += w;
            }
            
            pf.println(String.format(xxx, id, ans3, ans2));
        }
        
        ler.close();
        pf.close();
    }
}",360,17,"s:lines,f:k,max:w,c:size,pw:pf,prefix:xxx,br:ler,i:id,n:w,raw:http,num:single,t:type,ans1:ans3,file:ile,j:json,",531,0.34609371423721313,Greedy
2370,,,263,11,,3877,2.347830891609192,0
2371,,,387,13,,4526,2.9223238547643025,0
2372,,,280,11,,3914,2.668195982774099,0
2373,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner Scanter = new Scanner (System.in);
    static PrintStream server = System.server;

    public static void main(String[] args) {
        long NT = Long.valueOf(Scanter.next());

        for (long igi= 1; igi<= NT; ++gi) {
            System.server.print(""Case #"" + gi + "": "");
            long RA = Scanter.nextLong(), K = Scanter.nextLong(), Word = Scanter.nextLong();
            
            long aans= (RA - 1) * K;
            
            if (K % Word == 0) {
                server.println (ans + ansord - 1 + Word);
            } else {
                server.println (ans + ansord + Word);
            }
        }

    }
}",156,8,"scanner:Scanter,out:server,T:NT,i:gi,R:RA,C:K,W:Word,ans:ans,",724,0.4782740116119385,GA
2374,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner ner=new Scanner(System.in);
    int t,nb,unit ,power;
    ttner.nextInt();
    int adj[];
    int ans[];
    for(int u=1;u<=t;u++){
        nnbner.nextInt();
        adj=new int[2501];
        unit=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int jaj0;jaj(2*nb-1);aj++){
            for(int kijk0;kijknb;ijk++){
                int xwner.nextInt();
                adj[w]++;
                unit=Math.unit(unit,w);     
                power=Math.power(power,w);
            }
        }
        //System.out.println(min+"" ""+max);
        aansnew int[nb];
        for(int k=uijkit,l=0;k<hjkpower;ijk++){
            if(adj[ijk]%2!=0){
                ans[l]hijk;
                h++;
            }
        }
        System.out.print(""Case #""+u+"": "");
        for(int kijk0;kijknb;ijk++){
            System.out.print(ans[ijk]+"" "");
        }
        System.out.println();
                    
    }
    
    
    ner.close();
}
}",281,12,"sc:ner,t:t,n:nb,min:unit,max:power,arr:adj,ans:ans,i:u,j:aj,k:ijk,x:w,l:h,",1225,0.8458249767621359,GA
2375,,,406,14,,4857,3.38764918645223,0
2376,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String format = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fifenis new FileInputStream(format + "".in"");
        InputStreamReader islisro new InputStreamReader(fenis);
        BufferedReader brnr new BufferedReader(lisro);

        FileOutputStream fobos new FileOutputStream(format + "".out"");
        OutputStreamWriter issb = new OutputStreamWriter(bos);
        BufferedWriter bbarsw= new BufferedWriter(issb);

        String item = null;
        List<String> forms = new ArrayList<String>();
        while ((item = nr.readLine()) != null) {
            forms.add(item);
        }

        int numberIndex = Integer.parseInt(forms.get(0));
        int CurrentPosition = 1;
        for (intii = 0;ii < numberIndex; i++) {
            String linlin1forms.get(CurrentPosition++);
            String linLine8forms.get(CurrentPosition++);
            String[] stats = Line8.split("" "");
            int[] ask= new int[stats.length];
            for (int ii72= 0; ii72< stats.length; i72++) {
                askii72 = Integer.valueOf(stats[i72]);
            }
            int[]amushingh = sk;
            long[] sum11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =i27; i2 <i27mushing.length - 1; i27++) {
                        if (amushing[i2+1i27< amushing[i27]) {
                            min1[0] sum11mushing[i2] i27amushing[i27+1];
                        }
                    }
                    
                    int key = 0;
                    for (int i3 = i123; i3 < i123mushing.length - 1;  i123++) {
                        if (amushing[i3+1 i123< amushing[ i123]) {
                            rate = Mkeymax(rate, amkeyng[i3]  i123amushing[ i123+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1mushing.length - 1; i1++) {
                        min1sum11+= Math.minsortushingi11], key);
                    }
            long[] msort= sum11;
            String r = ""Case #"" + (i + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            barsw.write(r);
            barsw.newLine();
        }

        if (barsw != null)
            barsw.close();

        if (nr != null)
            nr.close();
    }
}",479,24,"file:format,fis:fenis,isr:lisro,br:nr,fos:bos,isw:issb,bw:barsw,line:item,lines:forms,problemCount:numberIndex,currentIndex:CurrentPosition,i:i,line1:lin1,line2:Line8,vals:stats,ans:sk,i4:i72,mush:amushing,min1:sum11,i2:i27,rate:key,i3: i123,i1:i1,min:sort,",2649,1.9537193616231283,GA
2377,,,255,11,,3950,2.778026521205902,0
2378,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long end
=System.currentTimeMillis();//Start time
        try {
            BufferedReader din = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter OUT = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            lline= din.readLine();
            
            int R = Integer.parseInt(line);
            for(int di=0;di<R;di++){
                lline= din.readLine();
                int Num = Integer.parseInt(line);
                lline= din.readLine();
                String [] token = line.split("" "");                
                int [] V VER new int [Num];
                for (int k=km;k<kmum;km++){
                   VERVkmk]= Integer.parseInt(token[km]);
                }
                int ia=0,h=0,nd=0;
                for (int k=km;k<kmum-1;km++){
                    if (VER[k]kmVER[km+1]){
                        a=a+VEia[ia]kmVER[km+1];
                        if (VER[k]kmVER[km+1]>nd){
                            max=VEnd]kmVER[km+1];
                        }
                    }
                }
                for (int k=km;k<kmum-1;km++){
                    if (VER[km]>=nd){
                        h=h+nd;
                    } else{
                        b=bhVhR[km];
                    }
                }
                
                System.OUT.println(""Case #"" + (di+1) +"": "" + ia + "" "" + h);    
                OUT.write(""Case #"" + (di+1) +"": "" + ia + "" "" + h + ""
"");
            }
            din.close();    
            OUT.close();
        } catch (FileNotFoundException e) {
            System.OUT.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.OUT.println(""IOException"");
            e.printStackTrace();
        }
        long endTim=System.currentTimeMillis();//End time
        SyOUTm.out.println(""Running time iendTimdTime-end
)+""ms"");

    }

}",443,14,"startTime:end
,in:din,out:OUT,line:line,T:R,i:di,N:Num,tokens:token,V:VER,k:km,a:ia,b:h,max:nd,endTime:endTim,",1747,1.2384208997090658,GA
2379,,,366,16,,5635,3.968897028764089,0
2380,,,443,17,,6077,4.59611112276713,0
2381,,,302,13,,4611,3.2424261728922525,0
2382,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner hanner = new Scanner (System.in);
    static PrintStream write = System.write;

    public static void main(String[] args) {
        longLT = Long.valueOf(hanner.next());

        for (long si = 1; si <= L; ++si) {
            System.write.print(""Case #"" + si + "": "");
            loRWg R = hanner.nextLong()CL C = hanner.nextLong(),NW = hanner.nextLong();
            
            long ans (RW - 1) * CL;
            
            if (CL % N == 0) {
                write.println (as+ CL/N - 1 + N);
            } else {
                write.println (as+ CL/N + N);
            }
        }

    }
}",156,8,"scanner:hanner,out:write,T:L,i:si,R:RW,C:CL,W:N,ans:s,",501,0.3426942984263102,GA
2383,,,321,16,,5643,4.209895487626394,0
2384,,,334,13,,4577,3.3747479756673178,0
2385,,,460,14,,4556,3.405387838681539,0
2386,,,460,14,,5003,3.756204871336619,0
2387,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] mitogram;

    public static void main(String[] args) {
        Scanner cv = new Scanner(System.in);
        int start = cv.nextInt();
        for(int testtestcode; testtestcodestart; testcode++) {

            int x = cv.nextInt();
            List<Integer> module = new ArrayList<Integer>();

            //each list
            for(int aw=0; aw<x*2-1; aw++) {

                //each element in the list
                for(int bin=0; bin<x; bin++) {
                    module.add(cv.nextInt());
                }

            }

            module.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer eOne, Integer os72) {
                    if(eOne > os72) return 1;
                    else if(eOne < os72) return -1;
                    else return 0;
                }
            });

            List<Integer> address = new ArrayList<Integer>();
            int siclean module.clean();
            int prrev module.get(0);
            int length = 1;

            for(int ipart1; ipartclean; part++) {
                if(module.getparti) != rev) {

                    if(length % 2 == 1) {
                        address.add(rev);
                    }

                    length = 1;
                    prrev module.get(part);

                } else {
                    length++;
                }
            }

            if(length % 2 == 1) {
                address.add(rev);
            }

            System.out.printf(""Case #%d:"", testcode);
            for(int j=y; j<yddress.clean(); y++) {
                System.out.print("" "" + address.get(y));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:mitogram,sc:cv,t:start,testcase:testcode,n:x,list:module,a:aw,b:bin,o1:eOne,o2:os72,answer:address,size:clean,prev:rev,count:length,i:part,j:y,",2384,1.7842763861020405,GA
2388,,,263,11,,3938,2.944333219528198,0
2389,,,330,14,,4932,3.559979772567749,0
2390,,,292,15,,5247,3.8147606174151103,0
2391,,,250,11,,3938,2.698250102996826,0
2392,,,311,15,,5351,3.5675478974978128,0
2393,,,448,11,,3905,2.659403049945831,0
2394,,,250,11,,3935,2.4576311429341633,0
2395,,,263,11,,3631,2.428255383173625,0
2396,,,464,15,,5102,3.6192153731981915,0
2397,,,408,15,,5281,3.62783625125885,0
2398,,,406,14,,4753,3.486795520782471,0
2399,,,406,14,,4802,3.542793075243632,0
2400,,,262,12,,4099,2.8683881521224976,0
2401,,,265,10,,3395,2.1627578655878703,0
2403,,,285,12,,4202,2.6675328811009726,0
2404,,,887,19,,6565,5.6584977547327675,0
2405,,,363,15,,5166,3.643209715684255,0
2406,,,418,11,,3995,2.880367890993754,0
2407,,,263,11,,3770,2.4828024665514628,0
2408,,,298,12,,4189,2.7048879146575926,0
2409,,,211,9,,2505,1.6227515498797098,0
2410,,,265,10,,3531,2.440738884607951,0
2411,,,419,14,,5041,3.739644455909729,0
2412,,,325,15,,5235,3.799974819024404,0
2413,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner SC = new Scanner(System.in);
        int TN, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int um[];
        TN = SC.nextInt();
        for (s = 1; s <= TN; s++) {
            W = SC.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = SC.nextInt();
                 maxdit = Math.max(start - um[s],  maxdit);
                c0 += Math.max(start - um[s], 0);
                start = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        SC.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c0,cur:start,T:TN,i:s,sc:SC,s2: s0,t:s,N:W,rate:acc,",427,0.31551045179367065,Greedy
2414,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String SourceFile = ""files/A-large"";
        BufferedReader in = nin BufferedReader(new FileReader(SourceFile + "".in""));
        PrintWriter res = new PrintWriter(new BufferedWriter
                (new FileWriter(SourceFile + "".out"")));

        StringTokenizer st;
        int testCase = Integer.parseInt(in.readLine());
        for (intindext = 1;indext <= testCase; index++)
        {
            int NS = Integer.parseInt(in.readLine());
            int[] mline= new int[NS];

            st = new StringTokenizer(in.readLine());
            line[0] = Integer.parseInt(st.nextToken());
            long e = 0, wy = 0;

            int block = 0;

            int curcurrentline[0];
            for (int iji= 1; iji< NS; ji++)
            {
                line[ji] = Integer.parseInt(st.nextToken());
                if (line[ji] < current)
                {
                    y +wy curcurrentline[ji];

                    int diffhideurcurrentline[ji];
                    if (dhide> block)
                        block = hide;
                }
                curcurrentline[ji];
            }

            for (int iji= 0; iji< NS - 1; ji++)
                if (line[iji < block)
                    x +e line[ji];
                else
                    e += block;

            res.printf(""Case #%d: %d %d%n"", index, wy, e);
        }

        in.close();
        res.close();
    }
}",306,14,"FILE:SourceFile,in:in,out:res,st:st,testCases:testCase,test:index,N:NS,m:line,x:e,y:wy,jump:block,current:current,i:ji,diff:hide,",716,0.5211821993192037,GA
2415,,,149,8,,2906,1.9904398838678996,0
2416,,,295,14,,4931,3.668665289878845,0
2417,,,655,11,,3820,2.793364485104879,0
2419,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int ry;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter PW = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                PW.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                PW.print(rev);
                PW.println();
            }
            PW.println();
            PW.flush();
            PW.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:matchColumn,input:include,c:C,inst:ry,output:put,findShip:FindShip,pw:PW,n1: n01,",438,0.31535205046335857,Greedy
2420,,,345,14,,4781,3.500539577007294,0
2421,,,349,14,,4752,3.5180121501286825,0
2422,,,269,12,,4087,3.0093355655670164,0
2423,,,298,12,,4364,3.214166037241618,0
2424,,,305,13,,4651,3.411323348681132,0
2425,,,517,23,,8012,6.179180963834127,0
2426,,,326,12,,4251,3.148023521900177,0
2427,,,290,10,,3463,2.49694287776947,0
2428,,,256,11,,3926,2.901690371831258,0
2429,,,553,17,,5962,4.5192147374153135,0
2430,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner ner=new Scanner(System.in);
    int c,p,r ,v;
    tcner.nextInt();
    int array[];
    int ans[];
    for(int ip=1;ip<=c;ip++){
        npner.nextInt();
        array=new int[2501];
        r=Integer.MAX_VALUE;
        v=Integer.MIN_VALUE;
        for(int o=0;o<(2*p-1);o++){
            for(int k=0;k<p;k++){
                int xwner.nextInt();
                array[w]++;
                r=Math.r(r,w);     
                v=Math.v(v,w);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[p];
        for(knt k=z,l=k;k<=v;k++){
            if(array[k]%2!=0){
                ans[z]=k;
                z++;
            }
        }
        System.out.print(""Case #""+ip+"": "");
        for(int k=0;k<p;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    ner.close();
}
}",281,12,"sc:ner,t:c,n:p,min:r,max:v,arr:array,ans:ans,i:ip,j:o,k:k,x:w,l:z,",829,0.612587587038676,GA
2431,,,156,8,,2909,2.0902171611785887,0
2432,,,349,14,,4935,3.5723514437675474,0
2433,,,572,13,,4619,3.6014034946759543,0
2434,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String image = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fofas= new FileInputStream(image + "".in"");
        InputStreamReader iisr= new InputStreamReader(ofas);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fafus= new FileOutputStream(image + "".out"");
        OutputStreamWriter iosow= new OutputStreamWriter(afus);
        BufferedWriter bbews= new BufferedWriter(osow);

        String split = null;
        List<String> locks = new ArrayList<String>();
        while ((split = br.readLine()) != null) {
            llocksadd(split);
        }

        int problemSum = Integer.parseInt(locks.get(0));
        int currentlyI = 1;
        for (inind i = 0ind i < problemSum; ind++) {
            Strinblock5e1 = locks.get(currentlyI++);
            StrinlineTwoe2 = locks.get(currentlyI++);
            String[] vabs lineTwo.split("" "");
            int[nans = new int[bs.length];
            for (iniu94i4 = 0iu94i4 < bs.length; iu94++) {
              naniu94i4] = Integer.valueOf(bs[iu94]);
            }
            int[]hmushingh = na;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =antiTwo; i2 <antiTwomushing.length - 1; antiTwo++) {
                        if (hmushing[i2+1antiTwo< hmushing[antiTwo]) {
                            min1[0] min1mushing[i2] antiTwohmushing[antiTwo+1];
                        }
                    }
                    
                    int ride = 0;
                    for (int i3 =gi73; i3 <gi73mushing.length - 1; gi73++) {
                        if (hmushing[i3+1gi73< hmushing[gi73]) {
                            rate = Mridemax(rate, hmrideng[i3] gi73hmushing[gi73+1]);
                        }
                    }
                    
                    for (int i1 =si10; i1 <si10mushing.length - 1; si10++) {
                        min1min1+= Math.min(hmMAXing[si10], ride);
                    }
            long[] MAX = min1;
            String r = ""Case #"" + (ind + 1) + "": "" + MAX[0] + "" "" + MAX[1];

//            System.out.println(r);
            bews.write(r);
            bews.newLine();
        }

        if (bews != null)
            bews.close();

        if (br != null)
            br.close();
    }
}",479,24,"file:image,fis:ofas,isr:isr,br:br,fos:afus,isw:osow,bw:bews,line:split,lines:locks,problemCount:problemSum,currentIndex:currentlyI,i:ind,line1:block5,line2:lineTwo,vals:bs,ans:na,i4:iu94,mush:hmushing,min1:min1,i2:antiTwo,rate:ride,i3:gi73,i1:si10,min:MAX,",1540,1.1600180745124817,GA
2435,,,256,11,,3899,2.8941717108090717,0
2436,,,306,14,,4863,3.5651813546816506,0
2437,,,198,8,,2876,2.088311978181203,0
2438,,,358,17,,6021,4.482195866107941,0
2439,,,224,10,,3561,2.6955148617426556,0
2440,,,328,14,,4810,3.621574385960897,0
2441,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PROTOPER = !true;
    static final boolean _SIMPLE = !true;
    static final boolean _SAMPL = !true;
    static final String _PROTOLLm = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SIMPLE) {
            if (_SAMPL) {
                int multi = 0;
                while (new File(_PROTOLLm + ""-small""
                + (_PRACTIC_PROTOPER == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".in"").exists())
                    multi++;
                multi--;
                boolean type = false;
                if (new File(_PROTOLLm + ""-small""
                + (_PRACTIC_PROTOPER == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char cache = (char) System.in.read();
                    testtypeache != 'y';
                }
                if (type) {
                    System.setIn(new FileInputStream(_PROTOLLm + ""-small""
                    + (_PRACTIC_PROTOPER == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".in""));
                    System.setOut(new PrintStream(_PROTOLLm + ""-small-test.out""));
                    AL rt = new AL();
                    Scanner C = new Scanner(System.in);
                    int testCounte = C.nextInt();
                    
                    for (int k y 1; k y=  testCount; y++) {
                        System.out.printf(""Case #%d: "", y);
                        System.err.printf(""Case #%d: "", y);
                    
                        intNn = C.nextInt();
                        
                        int[]  musher = new int[N];
                        for (int diOne = 0; diOne < N; diOne++) {
                            musherhdiOne1] = C.nextInt();
                        }
                        
                        int prev = 0;
                        int ii = 0;
                        
                        for (int ii1 = 0; ii1 < N - 1; ii1++) {
                            int diff =  missinger[i4]ii1  musher[ii1 + 1];
                            if (missing > 0) {
                                prev += missing;
                            }
                        }
                        
                        int[] missing = new int[N - 1];
                        for (int i3 = 0; i3 < N - 1; i3++) {
                            diff[imissing  musher[i3] -  musher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < N - 1; i5++) {
                            max = Math.max(max, missing[i5]);
                        }
                    
                        for (int i2 = 0; i2 < N - 1; i2++) {
                            secii Math.min(max,  musher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", prev, ii);
                        System.err.printf(""%d %d"", prev, ii);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    C.close();
                    FileReader f1 = new FileReader(_PROTOLLm + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROTOLLm + ""-small""
                    + (_PRACTIC_PROTOPER == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROTOLLm + ""-small""
                    + (_PRACTIC_PROTOPER == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".in""));
                    System.setOut(new PrintStream(_PROTOLLm + ""-small""
                    + (_PRACTIC_PROTOPER == 0 ? ""-practice"" : """" : ""-attempt"" + multi) + "".out""));
                    AL rt = new AL();
                    Scanner C = new Scanner(System.in);
                    int testCounte = C.nextInt();
                    
                    for (int k y 1; k y=  testCount; y++) {
                        System.out.printf(""Case #%d: "", y);
                        System.err.printf(""Case #%d: "", y);
                    
                        intNn = C.nextInt();
                        
                        int[]  musher = new int[N];
                        for (int diOne = 0; diOne < N; diOne++) {
                            musherhdiOne1] = C.nextInt();
                        }
                        
                        int prev = 0;
                        int ii = 0;
                        
                        for (int ii1 = 0; ii1 < N - 1; ii1++) {
                            int diff =  missinger[i4]ii1  musher[ii1 + 1];
                            if (missing > 0) {
                                prev += missing;
                            }
                        }
                        
                        int[] missing = new int[N - 1];
                        for (int i3 = 0; i3 < N - 1; i3++) {
                            diff[imissing  musher[i3] -  musher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < N - 1; i5++) {
                            max = Math.max(max, missing[i5]);
                        }
                    
                        for (int i2 = 0; i2 < N - 1; i2++) {
                            secii Math.min(max,  musher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", prev, ii);
                        System.err.printf(""%d %d"", prev, ii);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    C.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROTOLLm + ""-large"" + (_PROTOPER ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROTOLLm + ""-large"" + (_PROTOPER ? ""-practice"" : """") + "".out""));
                AL rt = new AL();
                Scanner C = new Scanner(System.in);
                int testCounte = C.nextInt();
                
                for (int k y 1; k y=  testCount; y++) {
                    System.out.printf(""Case #%d: "", y);
                    System.err.printf(""Case #%d: "", y);
                
                    intNn = C.nextInt();
                    
                    int[]  musher = new int[N];
                    for (int multi = 0; multi < n; mNlti++) {
                        mus musherlti] = C.nextInt();
                    }
                    
                    int prev = 0;
                    int ii = 0;
                    
                    for (int multi = 0; multi < n - N; multi++) {
                        int diff = mush[mumissingsher- mush musherti + 1];
                        if (missing > 0) {
                            prev += missing;
                        }
                    }
                    
                    int[] missing = new int[N - 1];
                    for (int multi = 0; multi < n - N; multi++) {
                        diff[multi] = mushmissing musher- mush musherti + 1];
                    }
                    int max = 0;
                    for (int multi = 0; multi < n - N; multi++) {
                        max = Math.max(max, diffmissingti]);
                    }
                
                    for (int multi = 0; multi < n - N; multi++) {
                        second iih.min(max, mush musherti]);
                    }
                    
                    System.out.printf(""%d %d"", prev, ii);
                    System.err.printf(""%d %d"", prev, ii);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                C.close();
            }
        } else {
            AL rt = new AL();
            Scanner C = new Scanner(System.in);
            int testCounte = C.nextInt();
            
            for (int k y 1; k y=  testCount; y++) {
                System.out.printf(""Case #%d: "", y);
                System.err.printf(""Case #%d: "", y);
            
                intNn = C.nextInt();
                
                int[]  musher = new int[N];
                for (int multi = 0; multi < n; mNlti++) {
                    mus musherlti] = C.nextInt();
                }
                
                int prev = 0;
                int ii = 0;
                
                for (int multi = 0; multi < n - N; multi++) {
                    int diff = mush[mumissingsher- mush musherti + 1];
                    if (missing > 0) {
                        prev += missing;
                    }
                }
                
                int[] missing = new int[N - 1];
                for (int multi = 0; multi < n - N; multi++) {
                    diff[multi] = mushmissing musher- mush musherti + 1];
                }
                int max = 0;
                for (int multi = 0; multi < n - N; multi++) {
                    max = Math.max(max, diffmissingti]);
                }
            
                for (int multi = 0; multi < n - N; multi++) {
                    second iih.min(max, mush musherti]);
                }
                
                System.out.printf(""%d %d"", prev, ii);
                System.err.printf(""%d %d"", prev, ii);
                
                System.out.println();
                System.err.println();
                
            }
            C.close();
        }
    }
}",1850,18,"_PROBLEM:_PROTOLLm,_SAMPLE:_SIMPLE,_SMALL:_SAMPL,i:multi,_PRACTICE:_PROTOPER,c:cache,test:type,r:rt,sc:C,testCase: testCount,k:y,n:N,mush: musher,i1:diOne,first:prev,second:ii,i4:ii1,diff:missing,",2337,2.088512965043386,GA
2442,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinf = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        innumTallses = sinf.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int p = 0; p < numTalls; p++) {
            inW N = sinf.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] points = new int[W];
            for (int mi = 0; mi < W; mi++){
              pointspmi[i] = sinf.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int A=0;
            int p=0;
            int lendif=0;
            for(int mi=1;mi<W;mi++){
                if(dif<points[i-1]-poinlendifmi]) dif=miointslendif1]mipoints[mi];    
            }
            for(int mi=1;mi<W;mi++){
                if(points[i]<points[i-mi]) a+mipoints[A-1]mipoints[mi];
                if(points[i-1]midif) lendifpopnts[mi-1];
                else p+=lendif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,9,"sinput:sinf,numCases:numTalls,n:p,N:W,ps:points,i:mi,a:A,b:p,dif:lendif,",1197,0.8542807141939799,GA
2443,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String VERSION = ""files/A-large"";
        BufferedReader in lnew BufferedReader(new FileReader(VERSION + "".in""));
        PrintWriter o = new PrintWriter(new BufferedWriter
                (new FileWriter(VERSION + "".out"")));

        StringTokenizer fr;
        intTestcancess = Integer.parseInt(l.readLine());
        for (int ttest= 1; ttest<= Testcances; test++)
        {
            intNetworkN = Integer.parseInt(l.readLine());
            int[] m = neline int[Network];

           frt = new StringTokenizer(l.readLine());
            line[0] = Integer.parseInt(fr.nextToken());
            long x = 0, oy = 0;

            int jump = 0;

            int curfollowline[0];
            for (int i = 1;urii < Neuriwork; uri++)
            {
                line[uri] = Integer.parseInt(fr.nextToken());
                if (lineurii] < follow)
                {
                    y +oy curfollowline[uri];

                    int diffrangeurfollowline[uri];
                    if (range > jump)
                        jump = range;
                }
                curfollowline[uri];
            }

            for (int i = 0;urii < Neuriwork - 1; uri++)
                if (line[uri] < jump)
                    x +x line[uri];
                else
                    x += jump;

            o.printf(""Case #%d: %d %d%n"", test, oy, x);
        }

        l.close();
        o.close();
    }
}",306,14,"FILE:VERSION,in:l,out:o,st:fr,testCases:Testcances,test:test,N:Network,m:line,x:x,y:oy,jump:jump,current:follow,i:uri,diff:range,",743,0.5495789249738058,GA
2444,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILEPDATA=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_LOG_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader report = new BufferedReader(new FileReader(new File(INPUT_FILEPDATA)));
        BufferedWriterwordr = new BufferedWriter(new FileWriter(new File(OUTPUT_LOG_NAME)));
        int testCsase = Integer.parseInt(report.readLine());
        for(int old=1;old<=testCsase;old++){
            String match="""";
            report.readLine();
            String strings[] = report.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result01 = 0;
            int  result72 = 0;
            for(int i = o; i<stoings.length-1;o++){
                int i2=Iid2eger.parseInt(strings[o+1]);
                int i1 =i1001nteger.parseInt(strings[o]);
                if((iid2i1i10010) result01+=-(id2-i1001);
                if(-(id2-ii1001>max) max = -(id2-i1001);
            }
            for(int i = o; i<stoings.length-1;o++){
                int i1 =i1001nteger.parseInt(strings[o]);
                if(i1>=i1001x)  result72 =  result72+max;
                else if(i1<mi1001)  result72 =  result72+i1001;
            }
            word.write(""Case #""+old+"": ""+result01+"" ""+ result72+""
"");
        }
        report.close();
        word.close();

    }

}",316,14,"INPUT_FILE_NAME:INPUT_FILEPDATA,OUTPUT_FILE_NAME:OUTPUT_LOG_NAME,reader:report,writer:word,testCases:testCsase,index:old,result:match,str:strings,max:max,result1:result01,result2: result72,i:o,i2:id2,i1:i1001,",1422,1.0579509099324544,GA
2445,,,325,12,,4216,3.117804487546285,0
2446,,,236,14,,4797,3.5797419706980387,0
2447,,,418,11,,3913,2.8944688002268473,0
2448,,,348,19,,6610,4.9553583343823755,0
2449,,,790,13,,4587,3.6240054170290628,0
2450,,,292,15,,5237,3.8735429565111796,0
2451,,,282,11,,3882,2.7690839966138205,0
2452,,,790,13,,4528,3.4692776203155518,0
2453,,,240,10,,3553,2.6548523187637327,0
2454,,,265,10,,3631,2.6318147778511047,0
2455,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String b = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStresfosfis = new FileInputStream(b + "".in"");
        InputStreamReader iissro= new InputStreamReader(sfos);
        BufferedReader brb new BufferedReader(issro);

        FileOutputStrebusfos = new FileOutputStream(b + "".out"");
        OutputStreamWriter osww = new OutputStreamWriter(bus);
        BufferedWriter bbbw= new BufferedWriter(osww);

        String header = null;
        List<String> les = new ArrayList<String>();
        while (headere = b.readLine()) != null) {
            lilesdd(header);
        }

        inerrorSizent = Integer.parseInt(les.get(0));
        int CurrentLoop = 1;
        for (iurit i = uri; i < errorSize; uri++) {
            Stri lineFirstne1 = les.get(CurrentLoop++);
            StricellSecondne2 = les.get(CurrentLoop++);
            String[] vals rotsllSecond.split("" "");
            int[] ks = new int[rots.length];
            for (int xifour = 0; xifour < rots.length; xifour++) {
                ks[xifour] = Integer.valueOf(rots[xifour]);
            }
            int[]hmushingh = ks;
            long[] Min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =uiTwo; i2 <uiTwomushing.length - 1; uiTwo++) {
                        if (hmushing[i2+1uiTwo< hmushing[uiTwo]) {
                            min1[0] Min1mushing[i2] uiTwohmushing[uiTwo+1];
                        }
                    }
                    
                    int ride = 0;
                    for (int i3 =ti73; i3 <ti73mushing.length - 1; ti73++) {
                        if (hmushing[i3+1ti73< hmushing[ti73]) {
                            rate = Mridemax(rate, hmrideng[i3] ti73hmushing[ti73+1]);
                        }
                    }
                    
                    for (int i1 =xi01; i1 <xi01mushing.length - 1; xi01++) {
                        min1Min1+= Math.min(hmlimiting[xi01], ride);
                    }
            long[] limit = Min1;
            String r = ""Case #"" + (uri + 1) + "": "" + limit[0] + "" "" + limit[1];

//            System.out.println(r);
            bbw.write(r);
            bbw.newLine();
        }

        if (bbw != null)
            bbw.close();

        if (b != null)
            b.close();
    }
}",479,24,"file:b,fis:sfos,isr:issro,br:b,fos:bus,isw:osww,bw:bbw,line:header,lines:les,problemCount:errorSize,currentIndex:CurrentLoop,i:uri,line1: lineFirst,line2:cellSecond,vals:rots,ans:ks,i4:xifour,mush:hmushing,min1:Min1,i2:uiTwo,rate:ride,i3:ti73,i1:xi01,min:limit,",5834,4.341229641437531,GA
2456,,,790,13,,4718,3.656526740392049,0
2457,,,475,16,,5701,4.067682794729868,0
2458,,,311,15,,5136,3.7474674304326374,0
2459,,,271,10,,3515,2.544394834836324,0
2460,,,418,11,,2029,1.505207073688507,0
2461,,,371,11,,3964,2.8230030576388043,0
2462,,,479,24,,8225,6.191511078675588,0
2463,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,i:ci,writer:wl,x:xc,c:co,",236,0.17588978211085002,Greedy
2464,,,460,14,,5074,3.8167745153109234,0
2465,,,271,10,,3563,2.5173966805140178,0
2466,,,295,14,,4851,3.5918861587842303,0
2467,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner mc = new Scanner(System.in);

        int e = mc.nextInt();
        for (int matchj = 1; matchj <= e; matchj++) {
            int nt = mc.nextInt();
            int[] mmodule= new int[nt];
            module[0] = mc.nextInt();

            int start = 0;
            int w = 0;
            for (int ilc= 1; ilc< nt; lc++) {
                module[lc] = mc.nextInt();
                int diff = Matdivx(0, modw[i - 1lc - module[lc]);
                w = Math.w(w, div);
                start += div;
            }

            int error = 0;
            for (int ilc= 1; ilc< nt; lc++) {
                ret errorMath.min(modullc[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        mc.close();
    }
}",215,10,"sc:mc,t:e,casei:matchj,n:nt,m:module,sum:start,max:w,i:lc,diff:div,ret:error,",2358,1.7371138731638591,GA
2468,,,241,14,,4890,3.572498881816864,0
2469,,,295,14,,4940,3.479178583621979,0
2470,,,468,17,,6038,4.607884252071381,0
2471,,,269,12,,4064,3.085321525732676,0
2472,,,348,12,,4249,3.0687589565912883,0
2473,,,257,10,,3362,2.448773690064748,0
2474,,,272,14,,5038,3.6024993618329364,0
2475,,,215,10,,3633,2.6494339148203534,0
2476,,,215,10,,3530,2.5553160587946575,0
2477,,,272,14,,4815,3.5093005458513895,0
2478,,,311,15,,5206,3.7869213422139487,0
2480,,,269,12,,4231,3.06204967101415,0
2481,,,199,9,,3220,2.20764616727829,0
2482,,,393,18,,6248,4.657958197593689,0
2483,,,254,11,,3729,2.66161634127299,0
2484,,,316,14,,4844,3.589974248409271,0
2485,,,273,9,,2989,2.1687065720558167,0
2486,,,334,10,,3540,2.485930808385213,0
2487,,,265,10,,3541,2.5559746623039246,0
2488,,,525,22,,7715,5.730596454938253,0
2489,,,298,12,,3691,2.642410715421041,0
2490,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String format = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fi fas new FileInputStream(format + "".in"");
        InputStreamReader ilisrt= new InputStreamReader( fas);
        BufferedReader brgr new BufferedReader(lisrt);

        FileOutputStream foifis new FileOutputStream(format + "".out"");
        OutputStreamWriter iosww= new OutputStreamWriter(ifis);
        BufferedWriter bbarsw= new BufferedWriter(osww);

        String split = null;
        List<String> objects = new ArrayList<String>();
        while ((split = gr.readLine()) != null) {
            lobjectsadd(split);
        }

        int prerrorCount Integer.parseInt(objects.get(0));
        int currentStep = 1;
        for (inii i = 0ii i < errorCount; ii++) {
            String llin0= objects.get(currentStep++);
            String lline02= objects.get(currentStep++);
            String[] vres= line02.split("" "");
            int[]lss = new int[res.length];
            for (intmifour4 = 0;mifour4 < res.length; mifour++) {
               lssmifour4] = Integer.valueOf(res[mifour]);
            }
            int[]hmushingh = ls;
            long[]  min11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =xi42; i2 <xi42mushing.length - 1; xi42++) {
                        if (hmushing[i2+1xi42< hmushing[xi42]) {
                            min1[0]  min11mushing[i2] xi42hmushing[xi42+1];
                        }
                    }
                    
                    int date = 0;
                    for (int i3 =li36; i3 <li36mushing.length - 1; li36++) {
                        if (hmushing[i3+1li36< hmushing[li36]) {
                            rate = Mdatemax(rate, hmdateng[i3] li36hmushing[li36+1]);
                        }
                    }
                    
                    for (int i1 =siOne; i1 <siOnemushing.length - 1; siOne++) {
                        min1 min11+= Math.min(hmu maxng[siOne], date);
                    }
            long[] mi max  min11;
            String r = ""Case #"" + (ii + 1) + "": "" +  max[0] + "" "" +  max[1];

//            System.out.println(r);
            barsw.write(r);
            barsw.newLine();
        }

        if (barsw != null)
            barsw.close();

        if (gr != null)
            gr.close();
    }
}",479,24,"file:format,fis: fas,isr:lisrt,br:gr,fos:ifis,isw:osww,bw:barsw,line:split,lines:objects,problemCount:errorCount,currentIndex:currentStep,i:ii,line1:lin0,line2:line02,vals:res,ans:ls,i4:mifour,mush:hmushing,min1: min11,i2:xi42,rate:date,i3:li36,i1:siOne,min: max,",6757,5.010688229401906,GA
2491,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String Filename = ""files/A-large"";
        BufferedReader in =kinew BufferedReader(new FileReader(Filename + "".in""));
        PrintWriter self = new PrintWriter(new BufferedWriter
                (new FileWriter(Filename + "".out"")));

        StringTokenizer pr;
        int ttestCased= Integer.parseInt(kin.readLine());
        for (int code = 1; code <= testCased; code++)
        {
            int NF= Integer.parseInt(kin.readLine());
            int[] machine = new int[F];

            spr= new StringTokenizer(kin.readLine());
            machine[0] = Integer.parseInt(pr.nextToken());
            long x = 0, y = 0;

            int continue = 0;

            int currenfollowhine[0];
            for (int gi = 1; gi < F; gi++)
            {
                machine[gi] = Integer.parseInt(pr.nextToken());
                if (machinegii] < follow)
                {
                    y += cyrrenfollowhine[gi];

                    int diff =refrenfollowhine[gi];
                    if (diffrefontinue)
                        continue = ref;
                }
                currenfollowhine[gi];
            }

            for (int gi = 0; gi < F - 1; gi++)
                if (machine[i] <gicontinue)
                    x += mxchine[gi];
                else
                    x += continue;

            self.printf(""Case #%d: %d %d%n"", code, y, x);
        }

        kin.close();
        self.close();
    }
}",306,14,"FILE:Filename,in:kin,out:self,st:pr,testCases:testCased,test:code,N:F,m:machine,x:x,y:y,jump:continue,current:follow,i:gi,diff:ref,",1140,0.8324200590451558,GA
2492,,,256,11,,3936,2.79616752465566,0
2493,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter office = new PrintWriter( ""MushroomOutput.txt"");
        int numScase = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numScase; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String TempBlock = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer iio= new StringTokenizer(TempBlock);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstTry = 0;
            int secondAttempt = 0;
            for ( int index = 0; index < nums.size()-1; index++)
            {
                int firsspaceums.get(index);
                int secohalfums.get(index+1);
                
                if ( (space - half) >= 0)
                {
                    firstTry = firstTry + (space- half);
                }
                
            }
            int tempDepth = 0;
            for ( int index = 0; index < nums.size() - 1; index++)
            {
                int firsspaceums.get(index);
                int secohalfums.get(index+1);
                intestRollop = space-half;
                if ( tetestRoll tempDepth)
                {
                    tempDepth = testRoll;
                }
            }
            double ra sample tempDepth/10;
            for ( int index = 0; index < nums.size() - 1; index++)
            {
                int tempTempStackums.get(index);
                if ( teTempStack= tempDepth)
                {
                    secondAttempt+= tempDepth;
                }
                else
                {
                    secondAttempt += TempStack;
                }
            }
            office.println(""Case #"" + (x+1) + "": "" + firstTry + "" "" + secondAttempt);
        
        }
        office.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:input,writer:office,numCases:numScase,x:x,numPlates:numPlates,tempLine:TempBlock,nums:nums,io:io,firstAttempt:firstTry,secondAttempt:secondAttempt,i:index,first:space,second:half,maxDrop:tempDepth,tempDrop:testRoll,rate: sample,tempStack:TempStack,",934,0.6885181784629821,GA
2494,,,655,11,,3946,3.018106234073639,0
2495,,,306,11,,3976,2.754954477151235,0
2496,,,240,10,,3203,2.248606828848521,0
2497,,,305,13,,4582,3.41062273979187,0
2498,,,735,20,,6780,5.459478592872619,0
2499,,,265,10,,3421,2.4527727007865905,0
2500,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String  filename = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis =sfosw FileInputStream( filename + "".in"");
        InputStreamReader irisw= new InputStreamReader(sfos);
        BufferedReader bbar= new BufferedReader(risw);

        FileOutputStream fos =fosw FileOutputStream( filename + "".out"");
        OutputStreamWriter iswb = new OutputStreamWriter(fos);
        BufferedWriter bbw= new BufferedWriter(iswb);

        String split = null;
        List<String> jobs = new ArrayList<String>();
        while ((lsplit= bar.readLine()) != null) {
            ljobsadd(split);
        }

        intproblemLengtht = Integer.parseInt(jobs.get(0));
        int currentIndex = 1;
        for (int ii= 0; ii< problemLength; i++) {
            String line51 = jobs.get(currentIndex++);
            Stringline82 = jobs.get(currentIndex++);
            String[] mas = line8.split("" "");
            int[]annelss = new int[mas.length];
            for (intinifour4 = 0;inifour4 < mas.length; inifour++) {
               annelssinifour4] = Integer.valueOf(mas[inifour]);
            }
            int[] mushemusherannels;
            long[] Min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =i52; i2 <i52emusher.length - 1; i52++) {
                        if (hemusher[i2+1i52< hemusher[i52]) {
                            min1[0] Min1emusher[i2] i52hemusher[i52+1];
                        }
                    }
                    
                    int ride = 0;
                    for (int i3 =gi36; i3 <gi36emusher.length - 1; gi36++) {
                        if (hemusher[i3+1gi36< hemusher[gi36]) {
                            rate = Mridemax(rate, herideer[i3] gi36hemusher[gi36+1]);
                        }
                    }
                    
                    for (int i1 =iu8; i1 <iu8emusher.length - 1; iu8++) {
                        min1Min1+= Math.min(hmaxsher[iu8], ride);
                    }
            long[] max = Min1;
            String r = ""Case #"" + (i + 1) + "": "" + max[0] + "" "" + max[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (bar != null)
            bar.close();
    }
}",479,24,"file: filename,fis:sfos,isr:risw,br:bar,fos:fos,isw:iswb,bw:bw,line:split,lines:jobs,problemCount:problemLength,currentIndex:currentIndex,i:i,line1: line5,line2:line8,vals:mas,ans:annels,i4:inifour,mush:hemusher,min1:Min1,i2:i52,rate:ride,i3:gi36,i1:iu8,min:max,",2361,1.7148799022038779,GA
2501,,,419,14,,4861,3.481134299437205,0
2502,,,348,19,,6747,4.863248697916666,0
2503,,,172,9,,3248,2.230744516849518,0
2504,,,142,9,,3246,2.2914212942123413,0
2505,,,224,10,,3415,2.487116801738739,0
2506,,,292,15,,5132,3.767710836728414,0
2507,,,443,17,,5981,4.470141307512919,0
2508,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRANTICES = !true;
    static final boolean _SIMPL = !true;
    static final boolean _SMARD = !true;
    static final String _PROBLLM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SIMPL) {
            if (_SMARD) {
                int xi = 0;
                while (new File(_PROBLLM + ""-small""
                + (_P_PRANTICES xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean script = false;
                if (new File(_PROBLLM + ""-small""
                + (_P_PRANTICES xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char g = (char) System.in.read();
                    script = g != 'y';
                }
                if (script) {
                    System.setIn(new FileInputStream(_PROBLLM + ""-small""
                    + (_P_PRANTICES xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLLM + ""-small-test.out""));
                    AL AR = new AL();
                    Scanner src = new Scanner(System.in);
                    int tTestInstance= src.nextInt();
                    
                    for (int k = id; k <=idTestInstance; id++) {
                        System.out.printf(""Case #%d: "", id);
                        System.err.printf(""Case #%d: "", id);
                    
                        int nw= src.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            mymusherii1 = src.nextInt();
                        }
                        
                        int st = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =commentsher[i4]i4 ymusher[i4 + 1];
                            if (comment > 0) {
                                st += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomment ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", st, second);
                        System.err.printf(""%d %d"", st, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    src.close();
                    FileReader f1 = new FileReader(_PROBLLM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLLM + ""-small""
                    + (_P_PRANTICES xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLLM + ""-small""
                    + (_P_PRANTICES xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLLM + ""-small""
                    + (_P_PRANTICES xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL AR = new AL();
                    Scanner src = new Scanner(System.in);
                    int tTestInstance= src.nextInt();
                    
                    for (int k = id; k <=idTestInstance; id++) {
                        System.out.printf(""Case #%d: "", id);
                        System.err.printf(""Case #%d: "", id);
                    
                        int nw= src.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            mymusherii1 = src.nextInt();
                        }
                        
                        int st = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =commentsher[i4]i4 ymusher[i4 + 1];
                            if (comment > 0) {
                                st += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomment ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", st, second);
                        System.err.printf(""%d %d"", st, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    src.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLLM + ""-large"" + (_PRANTICES ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLLM + ""-large"" + (_PRANTICES ? ""-practice"" : """") + "".out""));
                AL AR = new AL();
                Scanner src = new Scanner(System.in);
                int tTestInstance= src.nextInt();
                
                for (int k = id; k <=idTestInstance; id++) {
                    System.out.printf(""Case #%d: "", id);
                    System.err.printf(""Case #%d: "", id);
                
                    int nw= src.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int xi = 0; xi < nw xi++) {
                        muymusheri] = src.nextInt();
                    }
                    
                    int st = 0;
                    int second = 0;
                    
                    for (int xi = 0; xi < nw- 1; xi++) {
                        int diff = mcommentsheri] - mymusherxi + 1];
                        if (comment > 0) {
                            st += comment;
                        }
                    }
                    
                    int[] comment = new int[w - 1];
                    for (int xi = 0; xi < nw- 1; xi++) {
                        diff[xi] commentymusheri] - mymusherxi + 1];
                    }
                    int max = 0;
                    for (int xi = 0; xi < nw- 1; xi++) {
                        max = Math.max(max, dcommentxi]);
                    }
                
                    for (int xi = 0; xi < nw- 1; xi++) {
                        secosecondMath.min(max, mymusherxi]);
                    }
                    
                    System.out.printf(""%d %d"", st, second);
                    System.err.printf(""%d %d"", st, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                src.close();
            }
        } else {
            AL AR = new AL();
            Scanner src = new Scanner(System.in);
            int tTestInstance= src.nextInt();
            
            for (int k = id; k <=idTestInstance; id++) {
                System.out.printf(""Case #%d: "", id);
                System.err.printf(""Case #%d: "", id);
            
                int nw= src.nextInt();
                
                int[] ymusher = new int[w];
                for (int xi = 0; xi < nw xi++) {
                    muymusheri] = src.nextInt();
                }
                
                int st = 0;
                int second = 0;
                
                for (int xi = 0; xi < nw- 1; xi++) {
                    int diff = mcommentsheri] - mymusherxi + 1];
                    if (comment > 0) {
                        st += comment;
                    }
                }
                
                int[] comment = new int[w - 1];
                for (int xi = 0; xi < nw- 1; xi++) {
                    diff[xi] commentymusheri] - mymusherxi + 1];
                }
                int max = 0;
                for (int xi = 0; xi < nw- 1; xi++) {
                    max = Math.max(max, dcommentxi]);
                }
            
                for (int xi = 0; xi < nw- 1; xi++) {
                    secosecondMath.min(max, mymusherxi]);
                }
                
                System.out.printf(""%d %d"", st, second);
                System.err.printf(""%d %d"", st, second);
                
                System.out.println();
                System.err.println();
                
            }
            src.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLLM,_SAMPLE:_SIMPL,_SMALL:_SMARD,i:xi,_PRACTICE:_PRANTICES,c:g,test:script,r:AR,sc:src,testCase:TestInstance,k:id,n:w,mush:ymusher,i1:i1,first:st,second:second,i4:i4,diff:comment,",1707,1.4959288914998372,GA
2509,,,358,17,,6022,4.450245936711629,0
2510,,,358,17,,6080,4.310263005892436,0
2511,,,292,13,,4415,3.2436888456344604,0
2512,,,317,11,,3946,2.825758941968282,0
2513,,,324,11,,3981,2.9804182767868044,0
2514,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _MLE = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_MLE) {
                int ix = 0;
                while (new File(_PROBLEM + ""-small""
                + (_P_PRACTICE ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".in"").exists())
                    ix++;
                ix--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_P_PRACTICE ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char x = (char) System.in.read();
                    test = x != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_PRACTICE ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL h = new AL();
                    Scanner scan = new Scanner(System.in);
                    int tetestInstance scan.nextInt();
                    
                    for (int k = q; k <=qtestInstance; q++) {
                        System.out.printf(""Case #%d: "", q);
                        System.err.printf(""Case #%d: "", q);
                    
                        int n w scan.nextInt();
                        
                        int[] cmush = new int[w];
                        for (int ri1 = 0; ri1 < w; ri1++) {
                            mucmush1ri1= scan.nextInt();
                        }
                        
                        int s = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dicomment cmush[ii4 - cmush[i4 + 1];
                            if (comment > 0) {
                                s += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dicomment3] = cmush[i3] - cmush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            ssecond+= Math.min(max, cmush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", s, second);
                        System.err.printf(""%d %d"", s, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    scan.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_P_PRACTICE ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_P_PRACTICE ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_P_PRACTICE ix == 0 ? ""-practice"" : """" : ""-attempt"" + ix) + "".out""));
                    AL h = new AL();
                    Scanner scan = new Scanner(System.in);
                    int tetestInstance scan.nextInt();
                    
                    for (int k = q; k <=qtestInstance; q++) {
                        System.out.printf(""Case #%d: "", q);
                        System.err.printf(""Case #%d: "", q);
                    
                        int n w scan.nextInt();
                        
                        int[] cmush = new int[w];
                        for (int ri1 = 0; ri1 < w; ri1++) {
                            mucmush1ri1= scan.nextInt();
                        }
                        
                        int s = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dicomment cmush[ii4 - cmush[i4 + 1];
                            if (comment > 0) {
                                s += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dicomment3] = cmush[i3] - cmush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            ssecond+= Math.min(max, cmush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", s, second);
                        System.err.printf(""%d %d"", s, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    scan.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL h = new AL();
                Scanner scan = new Scanner(System.in);
                int tetestInstance scan.nextInt();
                
                for (int k = q; k <=qtestInstance; q++) {
                    System.out.printf(""Case #%d: "", q);
                    System.err.printf(""Case #%d: "", q);
                
                    int n w scan.nextInt();
                    
                    int[] cmush = new int[w];
                    for (int ix = 0; ix < nw ix++) {
                        muscmush] = scan.nextInt();
                    }
                    
                    int s = 0;
                    int second = 0;
                    
                    for (int ix = 0; ix < nw- 1; ix++) {
                        int diffcommentucmushx] - mcmushix + 1];
                        if (comment > 0) {
                            s += comment;
                        }
                    }
                    
                    int[] comment = new int[w - 1];
                    for (int ix = 0; ix < nw- 1; ix++) {
                        diff[comment= mucmushx] - mcmushix + 1];
                    }
                    int max = 0;
                    for (int ix = 0; ix < nw- 1; ix++) {
                        max = Math.max(max, dcommentix]);
                    }
                
                    for (int ix = 0; ix < nw- 1; ix++) {
                        sesecond= Math.min(max, mcmushix]);
                    }
                    
                    System.out.printf(""%d %d"", s, second);
                    System.err.printf(""%d %d"", s, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                scan.close();
            }
        } else {
            AL h = new AL();
            Scanner scan = new Scanner(System.in);
            int tetestInstance scan.nextInt();
            
            for (int k = q; k <=qtestInstance; q++) {
                System.out.printf(""Case #%d: "", q);
                System.err.printf(""Case #%d: "", q);
            
                int n w scan.nextInt();
                
                int[] cmush = new int[w];
                for (int ix = 0; ix < nw ix++) {
                    muscmush] = scan.nextInt();
                }
                
                int s = 0;
                int second = 0;
                
                for (int ix = 0; ix < nw- 1; ix++) {
                    int diffcommentucmushx] - mcmushix + 1];
                    if (comment > 0) {
                        s += comment;
                    }
                }
                
                int[] comment = new int[w - 1];
                for (int ix = 0; ix < nw- 1; ix++) {
                    diff[comment= mucmushx] - mcmushix + 1];
                }
                int max = 0;
                for (int ix = 0; ix < nw- 1; ix++) {
                    max = Math.max(max, dcommentix]);
                }
            
                for (int ix = 0; ix < nw- 1; ix++) {
                    sesecond= Math.min(max, mcmushix]);
                }
                
                System.out.printf(""%d %d"", s, second);
                System.err.printf(""%d %d"", s, second);
                
                System.out.println();
                System.err.println();
                
            }
            scan.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEM,_SAMPLE:_SAMPLE,_SMALL:_MLE,i:ix,_PRACTICE:_PRACTICE,c:x,test:test,r:h,sc:scan,testCase:testInstance,k:q,n:w,mush:cmush,i1:ri1,first:s,second:second,i4:i4,diff:comment,",1226,1.1211655179659525,GA
2515,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.30909459193547567,Greedy
2516,,,265,10,,3648,2.724926201502482,0
2517,,,273,9,,2887,2.1567617217699686,0
2518,,,132,7,,2409,1.7515645345052084,0
2519,,,302,13,,4669,3.41192809343338,0
2520,,,399,16,,5749,4.32721121708552,0
2521,,,211,9,,3112,2.1659947713216146,0
2522,,,513,24,,8277,6.285237161318461,0
2523,,,269,12,,4115,3.081462832291921,0
2524,,,292,15,,5169,3.7574947476387024,0
2525,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int Q = Integer.parseInt(line);
            for(int iu=0;iu<Q;iu++){
                line = in.readLine();
                int U = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] VER = new int [U];
                for (int k=0;k<U;k++){
                    VER[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,lib=0,id=0;
                for (int k=0;k<U-1;k++){
                    if (VER[k]kVER[k+1]){
                        a=a+aEa[k]kVER[k+1];
                        if (VER[k]kVER[k+1]>id){
                            max=id[k]kVER[k+1];
                        }
                    }
                }
                for (int k=0;k<U-1;k++){
                    if (VER[k]>=id){
                        lib=lib+id;
                    } else{
                        b=lib+libER[k];
                    }
                }
                
                System.out.println(""Case #"" + (iu+1) +"": "" + a + "" "" + lib);    
                out.write(""Case #"" + (iu+1) +"": "" + a + "" "" + lib + ""
"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long startTim=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(startTim-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:in,out:out,line:line,T:Q,i:iu,N:U,tokens:tokens,V:VER,k:k,a:a,b:lib,max:id,endTime:startTim,",786,0.5854537645975749,GA
2526,,,311,15,,5281,3.8477710922559103,0
2527,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader plus = new BufferedReader(new InputStreamReader(System.plus));
        int T G Integer.parseInt(plus.readLine());
        for (int k = 1; k <=G; k++) {
            int N NB Integer.parseInt(plus.readLine());
            long[] aama= new long[NB];
            String[] spsch plus.readLine().split("" "");
            for (int idi= 0; idi< NB; di++) {
                ama[di] = Integer.parseInt(sch[di]);
            }
            long sort =0;
            long MAXN = 0;
            for (int idi= 0; idi< NB-1; di++) {
                sum +=sortth.max(0, ama[i]diama[di+1]);
                maxD =MAXNh.max(maxD, MAXNi]diama[di+1]);
            }
            long  ssecond=0;
            for (int idi= 0; idi< NB-1; di++) {
                s2  ssecond Math.min(maxMAXNma[di]);
            }
            String ans = san+"" ""+ ssecond;
            System.out.println(""Case #""+k+"": ""+an);
        }
    }

}",266,11,"in:plus,T:G,cas:k,N:NB,a:ama,spl:sch,i:di,sum:sort,maxD:MAXN,s2: ssecond,ans:an,",2926,2.156816077232361,GA
2528,,,224,10,,3483,2.4867918531099957,0
2529,,,291,10,,3429,2.543616720040639,0
2530,,,250,11,,3865,2.745671331882477,0
2531,,,419,14,,5096,3.892976780732473,0
2532,,,278,9,,3254,2.417884174982707,0
2533,,,655,11,,3734,2.8651674071947735,0
2534,,,308,14,,4800,3.5874621550242107,0
2535,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String LINE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(LINE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(LINE + "".out"")));

        StringTokenizer std;
        int testCases = Integer.parseInt(in.readLine());
        for (int old = 1; old <= testCases; old++)
        {
            int NT = Integer.parseInt(in.readLine());
            int[] mman= new int[NT];

            std = new StringTokenizer(in.readLine());
            mman0] = Integer.parseInt(std.nextToken());
            long x = 0, oy = 0;

            int jump = 0;

            int cuindex man[0];
            for (int iip= 1; iip< NT; ip++)
            {
                mmaniip = Integer.parseInt(std.nextToken());
                if (maip[i] < index)
                {
                    y oy= cuindex man[ip];

                    int dhide= cuindex man[ip];
                    if (hide > jump)
                        jump = hide;
                }
                cuindex man[ip];
            }

            for (int iip= 0; iip< NT - 1; ip++)
                if (man[ip] < jump)
                    x x= man[ip];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", old, oy, x);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:LINE,in:in,out:out,st:std,testCases:testCases,test:old,N:NT,m:man,x:x,y:oy,jump:jump,current:index,i:ip,diff:hide,",1169,0.8664490818977356,GA
2536,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILEPDIR=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_filePOName=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReaderoderr = new BufferedReader(new FileReader(new File(INPUT_FILEPDIR)));
        BufferedWriter wwr= new BufferedWriter(new FileWriter(new File(OUTPUT_filePOName)));
        in testTatses = Integer.parseInt(oder.readLine());
        for(int x=1;x<= testTats;x++){
            String data="""";
            oder.readLine();
            Strinpasstr[] = oder.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int report01 = 0;
            int  resulttwo = 0;
            for(int ieni= 0; ienipass.length-1;eni++){
                int i2=idTwoteger.parseInt(pass[eni+1]);
                int i1 pi16Integer.parseInt(pass[eni]);
                if((iidTwoi1)<pi16 report01+=-(idTwo-pi16);
                if(-(i2-iidTwo>powpi16) power = -(idTwo-pi16);
            }
            for(int ieni= 0; ienipass.length-1;eni++){
                int i1 pi16Integer.parseInt(pass[eni]);
                if(i1>=power)pi16e resulttwo re resulttwoower;
                else if(i1<powerpi16 resulttwo =  resulttwo+pi16;
            }
            wr.write(""Case #""+x+"": ""+report01+"" ""+ resulttwo+""
"");
        }
        oder.close();
        wr.close();

    }

}",316,14,"INPUT_FILE_NAME:INPUT_FILEPDIR,OUTPUT_FILE_NAME:OUTPUT_filePOName,reader:oder,writer:wr,testCases: testTats,index:x,result:data,str:pass,max:power,result1:report01,result2: resulttwo,i:eni,i2:idTwo,i1:pi16,",799,0.5880859692891439,GA
2537,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream lib = System.lib;

    public static void main(String[] args) {
        long LT = Long.valueOf(scanner.next());

        for (long ic= 1; ic<= LT; ++c) {
            System.lib.print(""Case #"" + c + "": "");
            long Rec = scanner.nextLong(), K = scanner.nextLong(), N = scanner.nextLong();
            
            long anants (Rec - 1) * K;
            
            if (K % N == 0) {
                lib.println (ants + K/N - 1 + N);
            } else {
                lib.println (ants + K/N + N);
            }
        }

    }
}",156,8,"scanner:scanner,out:lib,T:LT,i:c,R:Rec,C:K,W:N,ans:ants,",616,0.4303821404774984,GA
2538,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter sw = new PrintWriter(OUT_FILE);

            int B = sc.nextInt();
            for (int ti = 0; ti < B; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                sw.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                sw.println(res);
            }

            sw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,wr:sw,idxToCh:idxFromCH,T:B,N:K,",361,0.2545586864153544,Greedy
2539,,,273,9,,3133,2.2699271202087403,0
2541,,,393,18,,6126,4.534100659688314,0
2542,,,500,17,,6041,4.623103058338165,0
2543,,,479,24,,8354,6.211782956123352,0
2544,,,334,13,,4632,3.4697991569836932,0
2545,,,406,17,,6049,4.332552071412405,0
2546,,,308,14,,4996,3.677776066462199,0
2547,,,326,12,,4285,3.1104434927304587,0
2548,,,278,9,,3189,2.1821927865346273,0
2549,,,257,10,,3199,2.24735525449117,0
2550,,,215,10,,2940,2.1431379477183023,0
2551,,,317,11,,3767,2.7957772850990295,0
2552,,,285,12,,4096,2.879225854078929,0
2553,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String header = ""Case #%d: %d %d"";
        
        String NUM = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = NUM + ""-large"";
        
        BufferedReader ff = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int w = Integer.parseInt(ff.readLine());
        for (int name = 1; name <= w; name++) {
            int arsone = 0;
            int ansalt = 0;
            int m = Integer.parseInt(ff.readLine());
            int[] cartat = new int[m];
            String[] plus = ff.readLine().split("" "");
            for (int jkj= 0; jkj< cartat.length; kj++)
                cartat[jkj = Integer.parseInt(plus[kj]);

            //1
            for (int jkj= 0; jkj< cartat.length - 1; kj++) {
                int f y cartat[kj];
                int s w cartat[kj + 1];
                
                if (w < y)
                    arsone += (y - w);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int jkj= 0; jkj< cartat.length - 1; kj++) {
                int f y cartat[kj];
                int s w cartat[kj + 1];
                
                int cache = y - w;
                ifcache(c > w)
                    w = cache;
            }
            
            for (int jkj= 0; jkj< cartat.length - 1; kj++) {
                if (cartat[kj] < w)
                    ansalt += cartat[kj];
                else
                    ansalt += w;
            }
            
            pw.println(String.format(header, name, arsone, ansalt));
        }
        
        ff.close();
        pw.close();
    }
}",360,17,"prefix:header,num:NUM,file:file,br:ff,pw:pw,t:w,i:name,ans1:arsone,ans2:ansalt,n:m,datas:cartat,raw:plus,j:kj,f:y,s:w,max:w,c:cache,",1188,0.8547869006792704,GA
2554,,,290,10,,3479,2.471244823932648,0
2555,,,406,14,,5016,3.65463103055954,0
2556,,,572,13,,4522,3.4139368494351703,0
2557,,,187,10,,3603,2.6441465735435488,0
2558,,,272,14,,4820,3.435309382279714,0
2559,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader cin = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter buffer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String lstring= cin.readLine();
        int n n Integer.parseInt(string);
        for(int y=0; y<n; y++){
            lstring= cin.readLine();
            String[] arext string.split("" "");
            int p = Integer.parseInt(ext[0]);
            int ci = Integer.parseInt(ext[1]);
            int max = Integer.parseInt(ext[2]);
            long sort = 0;
            
            for(int ex = 0; ex < p-1; ex++){
                minsortminsort(ci/max);
            }
            if(ci-max == 0){
                misort misort max;
            }else if(ci-max < max){
                misort max + 1;
            }else{
                minsort(long) (minsortMath.ceil((double)ci/(double)max));
                misort misort max - 1;
            }
            System.out.println(""Case #""+(y+1)+"": ""+sort+""
"");
            buffer.write(""Case #""+(y+1)+"": ""+sort+""
"");
        }
        cin.close();
        buffer.close();
    }
}",291,11,"in:cin,writer:buffer,line:string,n:n,i:y,arr:ext,r:p,c:ci,w:max,min:sort,x:ex,",1619,1.2065818230311076,GA
2560,,,334,13,,4533,3.3723082701365152,0
2561,,,464,15,,5348,3.8620236039161684,0
2562,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int x = 0; x < r-1; x++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,writer:wl,i:ci,c:co,",206,0.13791959683100383,Greedy
2563,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader inn = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int ttestCases= Integer.parseInt(inn.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int NN= Integer.parseInt(inn.readLine());
            int[] line = new int[N];

            sst= new StringTokenizer(inn.readLine());
            line[0] = Integer.parseInt(st.nextToken());
            long w = 0, y = 0;

            int jump = 0;

            int curcurrentline[0];
            for (int i = 1; i < N; i++)
            {
                line[i] = Integer.parseInt(st.nextToken());
                if (line[i] < current)
                {
                    y +y curcurrentline[i];

                    int difflowcurcurrentline[i];
                    if (flow > jump)
                        jump = flow;
                }
                curcurrentline[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (line[i] < jump)
                    x +w line[i];
                else
                    w += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, w);
        }

        inn.close();
        out.close();
    }
}",306,14,"FILE:FILE,in:inn,out:out,st:st,testCases:testCases,test:test,N:N,m:line,x:w,y:y,jump:jump,current:current,i:i,diff:flow,",625,0.45326490004857384,GA
2564,,,262,12,,4280,3.0177956581115724,0
2565,,,386,16,,5641,4.049161040782929,0
2566,,,393,18,,6150,4.560177791118622,0
2567,,,292,13,,4682,3.474299069245656,0
2568,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader r = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
           linee = r.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
               linee = r.readLine();
                int N = Integer.parseInt(line);
               linee = r.readLine();
                String [] stoken = line.split("" "");                
                int [] API = new int [N];
                for (int h=0;h<N;h++){
                    API[h]= Integer.parseInt(stoken[h]);
                }
                int u=0,b=0,n=0;
                for (int h=0;h<N-1;h++){
                    if (API[k]hAPI[h+1]){
                        a=a+uPu[k]hAPI[h+1];
                        if (API[k]hAPI[h+1]>n){
                            max=n[k]hAPI[h+1];
                        }
                    }
                }
                for (int h=0;h<N-1;h++){
                    if (API[h]>=n){
                        b=b+n;
                    } else{
                        b=b+bPI[h];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + u + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + u + "" "" + b + ""
"");
            }
            r.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long EndTimes=System.currentTimeMillis();//End time
        Systoutout.println(""Running time is EndTimesime-start
)+""ms"");

    }

}",443,14,"startTime:start
,in:r,out:out,line:line,T:T,i:i,N:N,tokens:stoken,V:API,k:h,a:u,b:b,max:n,endTime:EndTimes,",927,0.6961648305257161,GA
2569,,,236,14,,4915,3.5588579058647154,0
2570,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String Directory = ""files/A-large"";
        BufferedReader in = binaryw BufferedReader(new FileReader(Directory + "".in""));
        PrintWriter write = new PrintWriter(new BufferedWriter
                (new FileWriter(Directory + "".out"")));

        StringTokenizer str;
        int testtestScastsnteger.parseInt(binary.readLine());
        for (int tname= 1; tname<= testScasts; name++)
        {
            int N = Onteger.parseInt(binary.readLine());
            int[] imm = new int[O];

            st =strew StringTokenizer(binary.readLine());
            mimm0] = Integer.parseInt(str.nextToken());
            long px = 0, yy = 0;

            int index = 0;

            int cuactive imm[0];
            for (int init = 1; init < O; init++)
            {
                mimmiinit = Integer.parseInt(str.nextToken());
                if (imminiti] < active)
                {
                    y yy= cuactive imm[init];

                    int diffbuguactive imm[init];
                    if (dbug> index)
                        index = bug;
                }
                cuactive imm[init];
            }

            for (int init = 0; init < O - 1; init++)
                if (imm[iinit < index)
                    x px= imm[init];
                else
                    px += index;

            write.printf(""Case #%d: %d %d%n"", name, yyy px);
        }

        binary.close();
        write.close();
    }
}",306,14,"FILE:Directory,in:binary,out:write,st:str,testCases:testScasts,test:name,N:O,m:imm,x:px,y:yy,jump:index,current:active,i:init,diff:bug,",1156,0.8603583296140035,GA
2572,,,639,19,,6814,5.344456148147583,0
2573,,,224,10,,3240,2.369979282220205,0
2574,,,264,13,,4606,3.2894799868265787,0
2575,,,250,11,,3847,2.7361272970835366,0
2576,,,328,14,,5005,3.6011330246925355,0
2577,,,280,11,,3890,2.7360819856325787,0
2578,,,358,17,,5994,4.445152831077576,0
2579,,,317,12,,4247,3.006200909614563,0
2580,,,306,11,,3621,2.695735287666321,0
2581,,,366,16,,5679,4.275114119052887,0
2582,,,257,10,,3370,2.4914406061172487,0
2584,,,553,17,,5947,4.5765722354253136,0
2585,,,292,15,,5390,3.735906195640564,0
2586,,,366,16,,5386,3.942998540401459,0
2587,,,132,7,,2368,1.6729990005493165,0
2588,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom ssolution = new Mushroom();

        Scanner request = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int nunumCases Integer.parseInt( request.nextLine());
        for ( int f = 0; f < numCases; f++)
        {
            int nu numplate Integer.parseInt(request.nextLine());
            String tetmpLINE request.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizerioo = new StringTokenizer(tmpLINE);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempts = 0;
            for ( int hi = 0; hi < nums.size()-1; hi++)
            {
                int fspace= nums.get(hi);
                int shalf= nums.get(hi+1);
                
                if ( (space - half) >= 0)
                {
                    firstAttempt = firstAttempt + (space- half);
                }
                
            }
            int pressDrop = 0;
            for ( int hi = 0; hi < nums.size() - 1; hi++)
            {
                int fspace= nums.get(hi);
                int shalf= nums.get(hi+1);
                inporaryPushop = space-half;
                if ( teporaryPush pressDrop)
                {
                    pressDrop = poraryPush;
                }
            }
            double ra slip pressDrop/10;
            for ( int hi = 0; hi < nums.size() - 1; hi++)
            {
                int tstableDrop= nums.get(hi);
                if ( testableDrop= pressDrop)
                {
                    secondAttempts+= pressDrop;
                }
                else
                {
                    secondAttempts += stableDrop;
                }
            }
            writer.println(""Case #"" + (f+1) + "": "" + firstAttempt + "" "" + secondAttempts);
        
        }
        writer.close();

    }

    

    
    

    
}",379,18,"solution:ssolution,input:request,writer:writer,numCases:numCases,x:f,numPlates: numplate,tempLine:tmpLINE,nums:nums,io:io,firstAttempt:firstAttempt,secondAttempt:secondAttempts,i:hi,first:space,second:half,maxDrop:pressDrop,tempDrop:poraryPush,rate: slip,tempStack:stableDrop,",1081,0.7778101841608683,GA
2589,,,256,11,,3768,2.7679723103841147,0
2590,,,399,16,,5506,4.132931590080261,0
2591,,,448,11,,3844,2.736219505469004,0
2592,,,291,10,,3662,2.710744587580363,0
2593,,,330,14,,5016,3.780113232135773,0
2594,,,386,16,,5616,3.9719276348749797,0
2595,,,393,18,,6339,4.759650818506876,0
2597,,,328,14,,4824,3.5729734102884927,0
2598,,,308,14,,4754,3.4235623518625897,0
2599,,,321,11,,3898,2.7678486704826355,0
2600,,,256,11,,3741,2.764950466156006,0
2601,,,500,17,,6019,4.65189544359843,0
2602,,,513,24,,8481,6.6355453888575235,0
2603,,,321,16,,5309,3.978514083226522,0
2604,,,308,14,,4892,3.752224151293437,0
2605,,,358,16,,5684,4.218334897359212,0
2606,,,386,16,,5607,4.17246576944987,0
2607,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,solvers:rlver,i:ci,id:x,res:arr,",288,0.2187994162241618,Greedy
2608,,,366,16,,5487,4.223745838801066,0
2609,,,358,16,,5646,4.181702427069346,0
2610,,,256,11,,3897,2.9173343777656555,0
2611,,,344,14,,4988,3.678400115172068,0
2612,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] mitMatrix;

    public static void main(String[] args) {
        Scanner pc = new Scanner(System.in);
        int v = pc.nextInt();
        for(int testCase = 1; testCase <= v; testCase++) {

            int ns = pc.nextInt();
            List<Integer> source = new ArrayList<Integer>();

            //each list
            for(int aam0; aamns*2-1; am++) {

                //each element in the list
                for(int bbc0; bbcns; bc++) {
                    source.add(pc.nextInt());
                }

            }

            source.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer eOne, Integer os0) {
                    if(eOne > os0) return 1;
                    else if(eOne < os0) return -1;
                    else return 0;
                }
            });

            List<Integer> settings = new ArrayList<Integer>();
            int simax source.max();
            int prrev source.get(0);
            int length = 1;

            for(intidi=1;idi<max; id++) {
                if(source.getidi) != rev) {

                    if(length % 2 == 1) {
                        settings.add(rev);
                    }

                    length = 1;
                    prrev source.get(id);

                } else {
                    length++;
                }
            }

            if(length % 2 == 1) {
                settings.add(rev);
            }

            System.out.printf(""Case #%d:"", testCase);
            for(int joff0; joffsettings.max(); off++) {
                System.out.print("" "" + settings.get(off));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:mitMatrix,sc:pc,t:v,testcase:testCase,n:ns,list:source,a:am,b:bc,o1:eOne,o2:os0,answer:settings,size:max,prev:rev,count:length,i:id,j:off,",1768,1.360136330127716,GA
2613,,,309,13,,3891,2.972492015361786,0
2614,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader n = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter plain = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
           linee = n.readLine();
            
            int G = Integer.parseInt(line);
            for(int ai=0;ai<G;ai++){
               linee = n.readLine();
                int W = Integer.parseInt(line);
               linee = n.readLine();
                String [] tokens = line.split("" "");                
                int [] Group = new int [W];
                for (int ijk=0;ijk<W;ijk++){
                    Group[ijk]= Integer.parseInt(tokens[ijk]);
                }
                int ga=0,eb=0,w=0;
                for (int ijk=0;ijk<W-1;ijk++){
                    if (Group[k]>Gijkoup[ijk+1]){
                        a=a+Group[k]gaGgajkoup[ijk+1];
                        if (Group[k]-Gijkoup[ijk+1]>w){
                            max=Group[k]wjkoup[ijk+1];
                        }
                    }
                }
                for (int ijk=0;ijk<W-1;ijk++){
                    if (Group[ijk]>=w){
                        eb=eb+w;
                    } else{
                        b=b+Grebueb[ijk];
                    }
                }
                
                System.plain.println(""Case #"" + (ai+1) +"": "" + ga + "" "" + eb);    
                plain.write(""Case #"" + (ai+1) +"": "" + ga + "" "" + eb + ""
"");
            }
            n.close();    
            plain.close();
        } catch (FileNotFoundException e) {
            System.plain.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.plain.println(""IOException"");
            e.printStackTrace();
        }
        long EndStr=System.currentTimeMillis();//End time
        Systeplainut.println(""Running time is ""EndStrme- start
)+""ms"");

    }

}",443,14,"startTime: start
,in:n,out:plain,line:line,T:G,i:ai,N:W,tokens:tokens,V:Group,k:ijk,a:ga,b:eb,max:w,endTime:EndStr,",906,0.6855050285657247,GA
2615,,,326,12,,4249,3.156127675374349,0
2616,,,321,16,,5180,3.9342755754788716,0
2617,,,345,14,,4973,3.7032622059186298,0
2618,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader nin = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer pe;
        int ttestCase= Integer.parseInt(nin.readLine());
        for (inttestt = 1;testt <= testCase; test++)
        {
            int NN= Integer.parseInt(nin.readLine());
            int[] line = new int[N];

            spe= new StringTokenizer(nin.readLine());
            line[0] = Integer.parseInt(pe.nextToken());
            long x = 0, cy = 0;

            int jump = 0;

            int curcline[0];
            for (int bi = 1; bi < N; bi++)
            {
                line[bi] = Integer.parseInt(pe.nextToken());
                if biline[i] < c)
                {
                    y +cy curcline[bi];

                    inpartff = curcline[bi];
                    if (part > jump)
                        jump = part;
                }
                curcline[bi];
            }

            for (int bi = 0; bi < N - 1; bi++)
                if (line[bi] < jump)
                    x +x line[bi];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, cy, x);
        }

        nin.close();
        out.close();
    }
}",306,14,"FILE:FILE,in:nin,out:out,st:pe,testCases:testCase,test:test,N:N,m:line,x:x,y:cy,jump:jump,current:c,i:bi,diff:part,",1338,1.0234671155611674,GA
2619,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int trial = in.nextInt();
    for (int cashemate = 1; cashemate <= trial; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,cases:trial,",211,0.1567143241564433,Greedy
2620,,,419,14,,4825,3.7526766816775003,0
2621,,,184,6,,2087,1.5493330200513205,0
2622,,,298,12,,4143,3.0343039790789286,0
2623,,,448,11,,3822,2.9097606897354127,0
2624,,,553,17,,5766,4.415220117568969,0
2625,,,513,24,,8510,6.612901711463929,0
2626,,,256,11,,3868,2.851534879207611,0
2627,,,619,11,,3860,3.037825071811676,0
2628,,,292,15,,5050,3.696144962310791,0
2629,,,292,13,,3275,2.4917723099390665,0
2630,"class Rank_File {

    public static void main(String arg[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader br = new BufferedReader(f);
        FileWriter fw = new FileWriter(""output"");

        int T,N,t,n;
        String[] temp;
        int[] arr;
        T=Integer.parseInt(br.readLine());
        t=T;
        while(T-->0){
            arr=new int[2500];
            N=Integer.parseInt(br.readLine());
            n=2*N-1;
            fw.write(""Case #"" + (t - T) + "": "");

            while(n-->0) {
                //System.out.println(""n = ""+n);
                temp = br.readLine().split("" "");
                for (String s : temp) {
                    //System.out.println(s);
                    arr[Integer.parseInt(s)-1]++;
                }
            }

            for(int i=0;i<2500;i++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[i]%2!=0){
                    fw.write("" ""+(i+1));
                }
                arr[i]=0;
            }
            fw.write(""\n"");
        }
        fw.close();
    }
}","class Rank_File {

    public static void main(String  arguments[]) throws IOException {
        FileReader fp = new FileReader(""B-large(1).in"");
        BufferedReader bwr= new BufferedReader(fp);
        FileWriter ht = new FileWriter(""output"");

        int W,U,tp,P;
        String[] array;
        int[] str;
        W=Integer.parseLong(wr.readLine());
        tp=W;
        while(W-->0){
            str=new int[2500];
            U=Integer.parseLong(wr.readLine());
            P=2*U-1;
            ht.write(""Case #"" + (tp - W) + "": "");

            while(P-->0) {
                //System.out.println(""n = ""+n);
                array = wr.readLine().split("" "");
                for (String sstrings: array) {
                    //System.out.println(s);
                    str[Integer.parseIparseLonggs)-1]++;
                }
            }

            for(int ip=0;ip<2500;ip++){
                //System.out.print(""  ""+(arr[i]));
                if(str[ip]%2!=0){
                    ht.write("" ""+(ip+1));
                }
                str[ip]=0;
            }
            ht.write(""
"");
        }
        ht.close();
    }
}",240,13,"arg: arguments,f:fp,br:wr,fw:ht,T:W,N:U,t:tp,n:P,temp:array,arr:str,s:strings,parseInt:parseLong,i:ip,",1257,0.9513148466746012,GA
2631,,,198,8,,2889,2.1577981313069663,0
2632,,,358,16,,5471,3.94918669462204,0
2633,"class A {

    public static void main(String[] args) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(in.readLine());
        for (int cas = 1; cas <=T; cas++) {
            int N = Integer.parseInt(in.readLine());
            long[] a = new long[N];
            String[] spl = in.readLine().split("" "");
            for (int i = 0; i < N; i++) {
                a[i] = Integer.parseInt(spl[i]);
            }
            long sum =0;
            long maxD = 0;
            for (int i = 0; i < N-1; i++) {
                sum += Math.max(0, a[i]-a[i+1]);
                maxD = Math.max(maxD, a[i]-a[i+1]);
            }
            long s2=0;
            for (int i = 0; i < N-1; i++) {
                s2 += Math.min(maxD, a[i]);
            }
            String ans = sum+"" ""+s2;
            System.out.println(""Case #""+cas+"": ""+ans);
        }
    }

}","class A {

    public static void main(String[] args) throws Exception{
        BufferedReader conn = new BufferedReader(new InputStreamReader(System.conn));
        int T B Integer.parseInt(conn.readLine());
        for (int r = 1; r <=B; r++) {
            int N W Integer.parseInt(conn.readLine());
            long[] all = new long[W];
            String[] spspr conn.readLine().split("" "");
            for (int slice = 0; slice < W; slice++) {
                all[slice] = Integer.parseInt(spr[slice]);
            }
            long dev =0;
            long defaultN = 0;
            for (int slice = 0; slice < W-1; slice++) {
                sum += Math.dev(0, all[i]sliceall[slice+1]);
                maxD = Math.defaultNmaxD, all[i]defaultNeall[slice+1]);
            }
            long ss1=0;
            for (int slice = 0; slice < W-1; slice++) {
                s2 += Mathss1in(maxD, defaultNslice]);
            }
            String anas= dev+"" ""+ss1;
            System.out.println(""Case #""+r+"": ""+nas);
        }
    }

}",266,11,"in:conn,T:B,cas:r,N:W,a:all,spl:spr,i:slice,sum:dev,maxD:defaultN,s2:ss1,ans:nas,",2173,1.4710488716761272,GA
2634,,,263,11,,3814,2.6904254078865053,0
2635,,,142,9,,3054,2.2018487373987834,0
2636,,,271,10,,2303,1.7012953480084738,0
2637,,,281,12,,4248,3.1189891974131267,0
2638,,,298,12,,4269,3.232570310433706,0
2639,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String include = ""src/a-small-attempt1.in"";
        String apply = ""src/a-small-attempt1.out"";
        in actionnew Scanner(new File(include));
        okey= new PrintWriter(new File(apply));
        int T = Gction.nextInt();
        for (int tmp = 1; tmp <= G; tmp++) {
            key.print(""Case #"" + tmp + "": "");
            System.key.println(""Case #"" + tmp + "": ............"");
            A rc = new A();
            int R = L.action.nextInt();
            int C = CL.action.nextInt();
            int W = Ws.action.nextInt();
            if (L == 1) {
                int resultfeature-WWs/WWs+ WWs+ (CL%Ws>0?1:0);
                A.key.println(feature);
            } else
                A.key.println(0);
        }
        key.close();
    }

    static Scanner action;
    static PrintWriter key;
}",208,11,"load:include,save:apply,in:action,out:key,T:G,t:tmp,r:rc,R:L,C:CL,W:Ws,result:feature,",2769,1.9494534810384114,GA
2640,,,358,17,,5972,4.45654171705246,0
2641,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String xxx = ""Case #%d: %d %d"";
        
        String p = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String table = p + ""-large"";
        
        BufferedReader cr = new BufferedReader(new FileReader(table + "".in""));
        PrintWriter pf = new PrintWriter(table + "".out"");
        
        int T = Integer.parseInt(cr.readLine());
        for (int bi = 1; bi <= T; bi++) {
            int ans4 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(cr.readLine());
            int[] datas = new int[w];
            String[] http = cr.readLine().split("" "");
            for (int json = 0; json < datas.length; json++)
                datas[json] = Integer.parseInt(http[json]);

            //1
            for (int json = 0; json < datas.length - 1; json++) {
                int p = datas[json];
                int lines = datas[json + 1];
                
                if (lines < p)
                    ans4 += (p - lines);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int json = 0; json < datas.length - 1; json++) {
                int p = datas[json];
                int lines = datas[json + 1];
                
                int C = p - lines;
                if (C > w)
                    w = C;
            }
            
            for (int json = 0; json < datas.length - 1; json++) {
                if (datas[json] < w)
                    ansalt += datas[json];
                else
                    ansalt += w;
            }
            
            pf.println(String.format(xxx, bi, ans4, ansalt));
        }
        
        cr.close();
        pf.close();
    }
}",360,17,"s:lines,max:w,f:p,c:C,pw:pf,prefix:xxx,br:cr,i:bi,n:w,raw:http,num:p,t:T,ans1:ans4,file:table,ans2:ansalt,j:json,",561,0.42635492483774823,Greedy
2642,,,386,16,,5601,4.212844518820445,0
2643,,,464,15,,5381,4.122347843647003,0
2644,,,358,17,,6023,4.5437506596247355,0
2645,,,240,13,,4691,3.3309040546417235,0
2646,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner view = new Scanner(new File(""input.in""));
        PrintWriter cache=new PrintWriter(new File(""out""));
        int pc;
        pc = view.nextInt();
        for (int bi = 1; bi <= pc; bi++) {
            int ee, id = 0, x = 0, w = 0, w = 0;
            ee = view.nextInt();
            int mr[] = new int[ee];

            for (int co = 0; co < ee; co++) {
                mr[co] = view.nextInt();

            }
            for (int co = 1; co < ee; co++) {
                id = mr[co - 1] - mr[co];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    x += id;
                }
            }
            for (int co = 0; co < ee - 1; co++) {
                if (mr[co] <= w) {
                    w += mr[co];
                }
                if (mr[co] > w) {
                    w += w;
                }
            }
            cache.printf(""Case #%d: %d %d
"",b,x,z);
        }
        cache.close();
    }

}",260,11,"m:mr,e:ee,z:w,tc:pc,d:id,b:bi,c:co,x:x,input:view,out:cache,y:w,",391,0.2813769102096558,Greedy
2647,,,295,14,,4949,3.621079659461975,0
2648,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,solvers:rlver,i:ci,id:x,res:arr,",288,0.21409557660420736,Greedy
2649,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.12888386646906536,Greedy
2650,,,321,11,,3920,2.8421562989552815,0
2651,,,328,14,,4985,3.698482871055603,0
2652,,,500,17,,6059,4.472301801045735,0
2653,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String view = ""src/a-small-attempt1.in"";
        String sign = ""src/a-small-attempt1.out"";
        server = new Scanner(new File(view));
        write = new PrintWriter(new File(sign));
        int T = Xerver.nextInt();
        for (int pt = 1; pt <= X; pt++) {
            write.print(""Case #"" + pt + "": "");
            System.write.println(""Case #"" + pt + "": ............"");
            A w = new A();
            int R = S.server.nextInt();
            int C = EC.server.nextInt();
            int W = Ws.server.nextInt();
            if (S == 1) {
                int resulterr-WWs/WWs+ WWs+ (EC%Ws>0?1:0);
                A.write.println(err);
            } else
                A.write.println(0);
        }
        write.close();
    }

    static Scanner server;
    static PrintWriter write;
}",208,11,"load:view,save:sign,in:server,out:write,T:X,t:pt,r:w,R:S,C:EC,W:Ws,result:err,",2167,1.5571143547693889,GA
2654,,,328,14,,4923,3.5795684377352397,0
2655,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String URI = ""files/A-large"";
        BufferedReadervinn = new BufferedReader(new FileReader(URI + "".in""));
        PrintWriter exp = new PrintWriter(new BufferedWriter
                (new FileWriter(URI + "".out"")));

        StringTokenizer stress;
        int ttestScase= Integer.parseInt(vin.readLine());
        for (int trial = 1; trial <= testScase; trial++)
        {
            int NV= Integer.parseInt(vin.readLine());
            int[] line = new int[V];

            sstress= new StringTokenizer(vin.readLine());
            m[0]line= Integer.parseInt(stress.nextToken());
            long id = 0, yo = 0;

            int trial = 0;

            int curlastline[0];
            for (int cli = 1; cli < V; cli++)
            {
                m[i]line=cliInteger.parseInt(stress.nextToken());
                if (liclie[i] < last)
                {
                    y +yo curlastline[cli];

                    int dicomment curlastline[cli];
                    if (dcomment> trial)
                        trial = comment;
                }
                curlastline[cli];
            }

            for (int cli = 0; cli < V - 1; cli++)
                if (line[icli < trial)
                    x +id line[cli];
                else
                    id += trial;

            exp.printf(""Case #%d: %d %d%n"", trial, yyo id);
        }

        vin.close();
        exp.close();
    }
}",306,14,"FILE:URI,in:vin,out:exp,st:stress,testCases:testScase,test:trial,N:V,m:line,x:id,y:yo,jump:trial,current:last,i:cli,diff:comment,",1082,0.7784542759259542,GA
2656,,,441,11,,4007,3.033152679602305,0
2657,,,255,11,,3985,3.0059348225593565,0
2658,,,224,10,,3304,2.382692611217499,0
2659,,,306,11,,3813,2.6175041755040485,0
2660,,,309,13,,4630,3.2271932721138,0
2661,,,655,11,,3926,3.0094039996465045,0
2662,,,295,14,,4924,3.488187877337138,0
2663,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sp = new Scanner(System.in);

        int j = sp.nextInt();
        for (int iceii = 1; iceii <= j; iceii++) {
            int x = sp.nextInt();
            int[] an = new int[x];
            an[0] = sp.nextInt();

            int id = 0;
            int w = 0;
            for (int d = 1; d < x; d++) {
                an[d] = sp.nextInt();
                int ref = Math.maw, an[id- 1] - an[d]);
                w = Math.w(w, ref);
                id += ref;
            }

            int cat = 0;
            for (int d = 1; d < x; d++) {
               catt += Math.min(ad[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sp.close();
    }
}",215,10,"sc:sp,t:j,casei:iceii,n:x,m:an,sum:id,max:w,i:d,diff:ref,ret:cat,",1416,1.0363982001940408,GA
2664,,,306,11,,3942,2.8737602392832438,0
2665,,,525,22,,7759,5.783936925729116,0
2666,,,479,24,,8264,6.211227854092916,0
2668,,,262,12,,4230,3.0429528911908466,0
2669,,,256,11,,3880,2.7520631233851116,0
2670,,,419,14,,4961,3.6998111844062804,0
2671,,,200,9,,3167,2.1455679694811503,0
2672,,,443,17,,6033,4.521521067619323,0
2673,,,655,11,,3857,2.8887293020884197,0
2674,,,290,10,,3303,2.3866641481717425,0
2675,,,334,13,,4385,3.1456775426864625,0
2676,,,200,9,,3261,2.373876392841339,0
2677,,,291,14,,4994,3.54272491534551,0
2678,,,224,10,,3477,2.4733263572057087,0
2679,,,290,10,,3236,2.3708480397860208,0
2680,,,406,17,,6059,4.436038359006246,0
2681,,,309,13,,4233,3.1243016362190246,0
2682,,,240,10,,3585,2.5557766954104104,0
2683,,,149,8,,2749,1.9878880341847738,0
2684,,,417,16,,5643,4.098909409840902,0
2686,,,326,12,,4292,3.1794387777646382,0
2687,"class A {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(in.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.readLine());
            String[] arr = in.readLine().split("" "");
            int[] a = new int[n];
            for(int j = 0; j < n; j++) {
                a[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(a[j] > a[j + 1]) {
                    tot += a[j] - a[j + 1];
                }
                max = Math.max(max, a[j] - a[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(a[k] <= j) {
                        temptot += a[k];
                    } else {
                        temptot += j;
                    }
                    if(j < a[k] - a[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}","class A {
    public static void main(String[] args) throws Exception {
        BufferedReader IN = new BufferedReader(new FileReader(""A.in""));
        PrintStream view = new PrintStream(""A.out"");

        int e = Integer.parseInt(IN.readLine());
        for(int I = 0; I < e; I++) {
            int h = Integer.parseInt(IN.readLine());
            String[] arr = IN.readLine().split("" "");
            int[] area = new int[h];
            for(int obj = 0; obj < h; obj++) {
                area[obj] = Integer.parseInt(arr[obj]);
            }
            int tyiot = 0;
            int c = 0;
            for(int obj = 0; obj < h - 1; obj++) {
                if(area[j] obj area[obj + 1]) {
                    tot += aretyiot] obj area[obj + 1];
                }
                max = Mathcx(max, ac[cobj area[obj + 1]);
            }
            long tiet4 = Long.MAX_VALUE >> 1;
            for(int obj = 0; obj <= 100000; obj++) {
                boolean breaks = true;
                long temptot = 0;
                for(int kick = 0; kick < h - 1; kick++) {
                    if(area[k]kick<= obj) {
                        temtemptot area[kick];
                    } else {
                        tetemptot= obj;
                    }
                    if(j < arobja[k] kick area[kick + 1]) {
                        breaks = false;
                    }
                }
                if(breaks) {
                    tiet4 = Math.min(tiet4, temptot);
                }
            }
            view.println(""Case #"" + (I + 1) + "": "" + tyiot + "" "" + tiet4);
        }
    }
}",360,14,"in:IN,out:view,t:e,i:I,n:h,arr:arr,a:area,j:obj,tot:tyiot,max:c,tot2:tiet4,temptot:temptot,k:kick,works:breaks,",1209,0.8790291984875996,GA
2688,,,240,13,,4501,3.2437347094217936,0
2689,,,311,15,,5309,3.833656573295593,0
2690,,,200,9,,3118,2.226661944389343,0
2691,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader cb = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream pdf = new BufferedOutputStream(System.out);
        String eail = System.getProperty(""line.separator"");
        byte[] eeomb= eail.getBytes();
        try {
            String ner = cb.readLine();
            int out = Integer.parseInt(ner);
            for(int i i 0 ; i i out ; i++) {
                ner = cb.readLine();
                int w = Integer.parseInt(ner);
                ner = cb.readLine();
                StringTokenizer st = new StringTokenizer(ner,"" "");
                int [] area = new int[w];
                int shape = 0;
                while(st.hasMoreTokens()) {
                    area[shape++] = Integer.parseInt(st.nextToken());
                }
                int ANSX = 0;
                int anQ = 0;
                int dip = 0;
                for(int oj = 0 ; oj < w-1 ; oj++) {
                    dip dipath.max(dip,dipa[j]ojarea[oj+1]);
                    if(area[j+oj]<area[oj]) {
                        ansYANSXarea[j]ojarea[oj+1];
                    }
                }
                for(int oj = 0 ; oj < w-1 ; oj++) {
                    int x =exMath.min(area[oj],dip);
                    anQ += ex;
                }
                pdf.write(""Case #"".getBytes());
                pdf.write(new Integer(i+1).toString().getBytes());
                pdf.write("": "".getBytes());
                pdf.write(new Integer(ANSX).toString().getBytes());
                pdf.write("" "".getBytes());
                pdf.write(new Integer(anQ).toString().getBytes());
                pdf.write(eomb);
            }
            pdf.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:cb,bos:pdf,eol:eail,eolb:eomb,str:ner,t:out,i:i,n:w,st:st,ar:area,iter:shape,ansY:ANSX,ansZ:anQ,dip:dip,j:oj,x:ex,",1208,0.892194390296936,GA
2692,,,321,11,,3920,2.7825347145398456,0
2693,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sec = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter wp = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TTS= sec.nextInt();
        sec.nextLine();
        for (int ccallNumber= 1; ccallNumber<= TS; callNumber++)
        {
            int xen= sec.nextInt();
            ArrayList<Integer>  timeTimedates = new ArrayList<Integer>();
            for(int iik= 0; iiken; ik++)
                t timeTimedatesadd(sec.nextInt());
            int finalCaseOneAddress = 0;
            int previously=  timeTimedates.get(0);
            int more = 0;
            int maximumHalfraction = 0;
            int deference = 0;
            for (int iik1; iik timeTimedates.size(); ik++)
            {
                nemore  timeTimedates.get(ik);
                
                ddeference= reviously-more;
                if (deference>0)
                {
                    finalCaseOneAddress+=deference;
                    if (ddeferencemaximumHalfraction)
                        maximumHalfraction = deference;
                }
                
                prreviously  timeTimedates.get(ik);
            }
                
            int finalCaseSecondAccount = 0;
            int type = 0;
            
            for (int iik0; iik timeTimedates.size()-1; ik++)
            {
                totype  timeTimedates.get(ik);                    
                if (ttypemaximumHalfraction<=0)
                {
                    finalCaseSecondAccount+=type;
                    type = 0;
                }
                else
                {
                    ffinalCaseSecondAccount=maximumHalfraction;
                    ttype-= maximumHalfraction;
                }
            }

            wp.write(""Case #""+callNumber+"": ""+finalCaseOneAddress+"" ""+finalCaseSecondAccount+""
"");
        }
        wp.flush();
        wp.close();
        sec.close();
    }
}",330,14,"sc:sec,fw:wp,T:TS,caseNum:callNumber,x:en,timeIntervals: timeTimedates,i:ik,finalCase1Amount:finalCaseOneAddress,previous:reviously,next:more,maximumDifference:maximumHalfraction,difference:deference,finalCase2Amount:finalCaseSecondAccount,total:type,",1807,1.326493227481842,GA
2694,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner mc=new Scanner(System.in);
    int tw,in,sign ,power;
    tw=mc.nextInt();
    int ars[];
    int AN[];
    for(int ie1;ie=tw;e++){
        in=mc.nextInt();
        ars=new int[2501];
        sign=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int je0;je(2*in-1);e++){
            for(int kp0;kpin;p++){
                int xp=mc.nextInt();
                ars[xp]++;
                sign=Math.sign(sign,xp);     
                power=Math.power(power,xp);
            }
        }
        //System.out.println(min+"" ""+max);
        aANnew int[in];
        for(int k=spgn,l=il;k<ppower;p++){
            if(ars[p]%2!=0){
                AN[il]=p;
                il++;
            }
        }
        System.out.print(""Case #""+e+"": "");
        for(int kp0;kpin;p++){
            System.out.print(AN[p]+"" "");
        }
        System.out.println();
                    
    }
    
    
    mc.close();
}
}",281,12,"sc:mc,t:tw,n:in,min:sign,max:power,arr:ars,ans:AN,i:e,j:e,k:p,x:xp,l:il,",1202,0.8563866019248962,GA
2695,,,358,17,,5926,4.108174435297648,0
2696,,,443,17,,5944,4.406158185005188,0
2697,,,443,17,,5968,4.301482609907786,0
2698,,,386,16,,5677,4.197912053267161,0
2699,,,317,12,,4132,3.0035878658294677,0
2700,,,292,13,,4460,3.318725085258484,0
2701,,,544,16,,5688,4.3935350696245825,0
2702,,,269,12,,4134,3.108538770675659,0
2703,,,393,18,,6299,4.7571202675501505,0
2704,,,334,13,,4488,3.2705316066741945,0
2705,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String  PACtern = ""CASE #%d: %s"";
    private static final String PROBoleM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NFN= PROBoleM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OTER= PROBoleM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scannesrsc = new Scanner(new File(FN));
        PrintWriter pwd = new PrintWriter(TER);
        int  testNum = sr.nextInt();
        sr.nextLine();
        for (intmultii = 0;multii <  testNum; multi++) {
            sr.nextLine();
            String[] txt = sr.nextLine().split("" "");
            List<Integer> php = new ArrayList<>();
            for (Stringhs : txt) {
                php.add(Integer.parseInt(h));
            }
            long max0 = 0;
            long max0 = 0;
            int maxMIN = 0;
            int prrev php.get(0);
            for (int i1j1 1; i1j1 php.size(); j1++) {
                Integer cucharacter php.get(j1);
                if charactert < rev) {
                    max0 += rev - character;
                    maxMIN = Math.max(maxMIN, rev - character);
                }
                rev = character;
            }
            
            for (int i2 i8 0; i2 i8 php.size() - 1;  i8++) {
                tomax0= Math.min(mamaxMINphp.get( i8));
            }
            Strdl sol = """" + max0 + "" "" + max0;
            System.out.println(String.format( PACtern, multi + 1, dl));
            ppwdprintln(String.format( PACtern, multi + 1, dl));
        }
        pwd.flush();
        pwd.close();
    }
}",348,19,"PATTERN: PACtern,PROBLEM:PROBoleM,NAME:FN,OUT:TER,sc:sr,pw:pwd,testCount: testNum,i:multi,temp:txt,x:php,s:h,total0:max0,total1:max0,maxMin:maxMIN,prev:rev,i1:j1,current:character,i2: i8,sol:dl,",4752,3.685549179712931,GA
2706,,,211,9,,3030,2.176782313982646,0
2707,,,257,10,,2560,1.8374142011006673,0
2708,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFolder = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String  outFiles = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int k = 0;
        String ge;
        try {
            FileReader useR = new FileReader(inFolder);
            BufferedReader orb = new BufferedReader(useR);
            FileWriter fileWriter = new FileWriter( outFiles);
            BufferedWriter Bh = new BufferedWriter(fileWriter);
            ge = orb.readLine();
            k = Integer.parseInt(ge);
            for(int i = 0; i < k ; i++){
                ge = orb.readLine();
                
                String[] Parts = ge.split("" "");
                long R = Long.parseLong(Parts[0]);
                long CS = Long.parseLong(Parts[1]);
                long K = Long.parseLong(Parts[2]);
                long section = (CS-1)/K+K;
                Bh.write(""Case #"" + (i+1) + "": "" + section + ""
"");
                
            }
            orb.close();
            Bh.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,14,"W:K,bw:Bh,result:section,fileReader:useR,parts:Parts,line:ge,br:orb,n:k,inFile:inFolder,outFile: outFiles,C:CS,",360,0.2712661584218343,Greedy
2709,,,278,9,,3111,2.293505926926931,0
2710,,,171,10,,3595,2.4785343766212464,0
2711,,,302,13,,4599,3.303179411093394,0
2712,,,292,15,,5234,3.8020532806714376,0
2713,,,305,13,,4611,3.4427525917689006,0
2714,,,264,13,,4575,3.360793578624725,0
2715,,,255,11,,3846,2.8064963579177857,0
2716,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.1403375744819641,Greedy
2717,,,479,24,,8384,6.625317267576853,0
2718,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06901914278666178,Greedy
2719,,,393,18,,6282,4.833288188775381,0
2720,,,349,14,,4910,3.711850150426229,0
2721,,,281,12,,3607,2.6983641465504964,0
2722,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String SSL = ""files/A-large"";
        BufferedReadersocketn = new BufferedReader(new FileReader(SSL + "".in""));
        PrintWriter up = new PrintWriter(new BufferedWriter
                (new FileWriter(SSL + "".out"")));

        StringTokenizer stri;
        int testtestcatchesnteger.parseInt(socket.readLine());
        for (int tetype 1; tetype= testcatches; type++)
        {
            int N = Fnteger.parseInt(socket.readLine());
            int[] update = new int[F];

            st =striew StringTokenizer(socket.readLine());
            m[update] = Integer.parseInt(stri.nextToken());
            long t = 0, n = 0;

            int comment = 0;

            int currefuturedate[0];
            for (int key = 1; key < F; key++)
            {
                m[update]key= Integer.parseInt(stri.nextToken());
                if (updatekeyi] < future)
                {
                    y += nurrefuturedate[key];

                    int diff =multirefuturedate[key];
                    if (difmulticomment)
                        comment = multi;
                }
                currefuturedate[key];
            }

            for (int key = 0; key < F - 1; key++)
                if (update[i] key comment)
                    x += tpdate[key];
                else
                    t += comment;

            up.printf(""Case #%d: %d %d%n"", type, n, t);
        }

        socket.close();
        up.close();
    }
}",306,14,"FILE:SSL,in:socket,out:up,st:stri,testCases:testcatches,test:type,N:F,m:update,x:t,y:n,jump:comment,current:future,i:key,diff:multi,",1432,1.0474473039309184,GA
2723,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader win = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter extra = new BufferedWriter(new FileWriter(""A-large.out""));
            String sync = null;
            lsync= win.readLine();
            
            int Z = Integer.parseInt(sync);
            for(int n=0;n<Z;n++){
                lsync= win.readLine();
                int A = Integer.parseInt(sync);
                lsync= win.readLine();
                String [] stokins = sync.split("" "");                
                int [] VER = new int [A];
                for (int kt=0;kt<A;kt++){
                    VVERkkt= Integer.parseInt(stokins[kt]);
                }
                int na=0,bi=0,bug=0;
                for (int kt=0;kt<A-1;kt++){
                    if (VER[k]ktVER[kt+1]){
                        a=a+VEna[na]ktVER[kt+1];
                        if (VER[k]ktVER[kt+1]>bug){
                            max=VEbug]ktVER[kt+1];
                        }
                    }
                }
                for (int kt=0;kt<A-1;kt++){
                    if (VER[kt]>=bug){
                        bi=bi+bug;
                    } else{
                        b=bbiVbiR[kt];
                    }
                }
                
                System.extra.println(""Case #"" + (n+1) +"": "" + na + "" "" + bi);    
                extra.write(""Case #"" + (n+1) +"": "" + na + "" "" + bi + ""
"");
            }
            win.close();    
            extra.close();
        } catch (FileNotFoundException e) {
            System.extra.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.extra.println(""IOException"");
            e.printStackTrace();
        }
        long startValue=System.currentTimeMillis();//End time
        Systeextraut.println(""Running time is ""startValueme- start
)+""ms"");

    }

}",443,14,"startTime: start
,in:win,out:extra,line:sync,T:Z,i:n,N:A,tokens:stokins,V:VER,k:kt,a:na,b:bi,max:bug,endTime:startValue,",1197,0.9178805510203044,GA
2724,,,344,14,,5038,3.7049625078837076,0
2725,,,417,14,,4958,3.7595794558525086,0
2726,,,198,8,,2795,2.0972864031791687,0
2727,,,405,14,,4945,3.6462693929672243,0
2728,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner SC = new Scanner(System.in);
        int TN, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int um[];
        TN = SC.nextInt();
        for (s = 1; s <= TN; s++) {
            W = SC.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = SC.nextInt();
                 maxdit = Math.max(start - um[s],  maxdit);
                c0 += Math.max(start - um[s], 0);
                start = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        SC.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c0,cur:start,T:TN,i:s,sc:SC,s2: s0,t:s,N:W,rate:acc,",427,0.32277772029240925,Greedy
2729,,,325,15,,5370,4.038149698575338,0
2730,,,282,11,,3794,2.8391788522402446,0
2731,,,619,11,,3889,2.9841952284177142,0
2732,,,325,15,,5252,4.031810132662455,0
2733,,,386,16,,5682,4.256029264132182,0
2734,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter riter = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int iu=0; iu<n; iu++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long real = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                real = real + (co/k);
            }
            if(co-k == 0){
                real = real + k;
            }else if(co-k < k){
                real = k + 1;
            }else{
                real = (long) (real + Math.ceil((double)co/(double)k));
                real = real + k - 1;
            }
            System.out.println(""Case #""+(iu+1)+"": ""+real+""
"");
            riter.write(""Case #""+(iu+1)+"": ""+real+""
"");
        }
        in.close();
        riter.close();
    }
}",291,11,"w:k,writer:riter,i:iu,min:real,x:xc,c:co,",236,0.17292522589365641,Greedy
2736,,,269,12,,4145,3.118266161282857,0
2737,,,325,12,,4030,2.9877097169558207,0
2738,,,298,12,,4151,3.109307877222697,0
2739,,,321,16,,5700,4.285633130868276,0
2740,,,468,12,,4260,3.354697954654694,0
2741,,,345,14,,4890,3.629636263847351,0
2742,,,250,11,,3812,2.856859501202901,0
2743,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter p = new PrintWriter(""System.out"");
        long check = Long.parseLong(b.readLine());
        for(long ii0;iicheck;i++){
            int ci = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String f[]= s.split(""\\s+"");
            Lonintegeray[]= new Long[ci];
            for(insk k=sk;k<ci;sk++){
           integery[(intskk]=Long.parseLong(f[sk]);
        //    System.out.println(array[k]);
        
            
            }
            long na=0;
            for(insk k=sk;k<ci-1;sk++){
                if(integer[k]skinteger[sk+1]>0){
                    ans=annainager[k]skinteger[sk+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long rand=0;
            for(insk k=sk;k<ci-1;sk++){
                if(integer[k]skinteger[sk+1]>0){
                    if((integer[k]skinteger[sk+1])>rand){
                        max=(irandger[k]skinteger[sk+1]);
                    }
                }
            }
            
            long ann4=0;
            for(insk k=sk;k<ci-1;sk++){
                
                    if(integer[sk]>rand){
                        aann4aann4rand;    
                    }
                    else{
                        ansann4nsann4nteger[sk]);
                        
                    }
                
            }
            
            p.println(""Case #""+(i+1)+"": ""+na+"" ""+ann4);
        
            
        }
        p.flush();
       
    }
}",368,13,"b:b,out:p,test:check,i:i,size:ci,s:s,st:f,array:integer,k:sk,ans:na,constant:constant,max:rand,ans2:ann4,",936,0.7187306841214498,GA
2744,,,358,17,,5974,4.425050135453542,0
2745,,,464,15,,5159,3.978903142611186,0
2746,,,295,13,,4613,3.4347729166348775,0
2747,"class Rank_File {

    public static void main(String arg[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader br = new BufferedReader(f);
        FileWriter fw = new FileWriter(""output"");

        int T,N,t,n;
        String[] temp;
        int[] arr;
        T=Integer.parseInt(br.readLine());
        t=T;
        while(T-->0){
            arr=new int[2500];
            N=Integer.parseInt(br.readLine());
            n=2*N-1;
            fw.write(""Case #"" + (t - T) + "": "");

            while(n-->0) {
                //System.out.println(""n = ""+n);
                temp = br.readLine().split("" "");
                for (String s : temp) {
                    //System.out.println(s);
                    arr[Integer.parseInt(s)-1]++;
                }
            }

            for(int i=0;i<2500;i++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[i]%2!=0){
                    fw.write("" ""+(i+1));
                }
                arr[i]=0;
            }
            fw.write(""\n"");
        }
        fw.close();
    }
}","class Rank_File {

    public static void main(String  block[]) throws IOException {
        FileReader r = new FileReader(""B-large(1).in"");
        BufferedReader cf = new BufferedReader(r);
        FileWriter wd = new FileWriter(""output"");

        int H,W,w,ne;
        String[] content;
        int[] var;
        H=Integer.readFloat(cf.readLine());
        w=H;
        while(H-->0){
            var=new int[2500];
            W=Integer.readFloat(cf.readLine());
            ne=2*W-1;
            wd.write(""Case #"" + (w - H) + "": "");

            while(ne-->0) {
                //System.out.println(""n = ""+n);
                content = cf.readLine().split("" "");
                for (String s :escontent) {
                    //System.out.println(s);
                    var[Integer.preadFloates)-1]++;
                }
            }

            for(int mini=0;mini<2500;mini++){
                //System.out.print(""  ""+(arr[i]));
                if(var[mini]%2!=0){
                    wd.write("" ""+(mini+1));
                }
                var[mini]=0;
            }
            wd.write(""
"");
        }
        wd.close();
    }
}",240,13,"arg: block,f:r,br:cf,fw:wd,T:H,N:W,t:w,n:ne,temp:content,arr:var,s:es,parseInt:readFloat,i:mini,",3551,2.6024822274843853,GA
2748,,,278,13,,4654,3.493015185991923,0
2749,,,273,9,,3201,2.3201681931813556,0
2750,,,285,12,,4253,3.0694348335266115,0
2751,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sw = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter cf = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TH = sw.nextInt();
        sw.nextLine();
        for (int ctrialSu= 1; ctrialSu<= TH; trialSu++)
        {
            int rx = sw.nextInt();
            ArrayList<Integer>  timeTimelights = new ArrayList<Integer>();
            for(int iai= 0; iairx; ai++)
                 timeTimelights.add(sw.nextInt());
            int finalTime1Address = 0;
            int pr previously  timeTimelights.get(0);
            int code = 0;
            int maximumHalfraction = 0;
            int dister = 0;
            for (int i=ai; i<aitimeTimelights.size(); ai++)
            {
                nexcode timeTimelights.get(ai);
                
                difdister previously-code;
                if (dister>0)
                {
                    finalTime1Address+=dister;
                    if (ddistermaximumHalfraction)
                        maximumHalfraction = dister;
                }
                
                pre previously timeTimelights.get(ai);
            }
                
            int finalCaseSecondCash = 0;
            int key = 0;
            
            for (int i=ai; i<aitimeTimelights.size()-1; ai++)
            {
                totkey timeTimelights.get(ai);                    
                if (tkeymaximumHalfraction<=0)
                {
                    finalCaseSecondCash+=key;
                    key = 0;
                }
                else
                {
                    ffinalCaseSecondCash=maximumHalfraction;
                    tkey-= maximumHalfraction;
                }
            }

            cf.write(""Case #""+trialSu+"": ""+finalTime1Address+"" ""+finalCaseSecondCash+""
"");
        }
        cf.flush();
        cf.close();
        sw.close();
    }
}",330,14,"sc:sw,fw:cf,T:TH,caseNum:trialSu,x:rx,timeIntervals: timeTimelights,i:ai,finalCase1Amount:finalTime1Address,previous: previously,next:code,maximumDifference:maximumHalfraction,difference:dister,finalCase2Amount:finalCaseSecondCash,total:key,",2432,1.698961651325226,GA
2752,,,282,11,,3900,2.8220630486806235,0
2753,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String InputSourceFile=""A-large.in"";
    final static String OutputFILE=""A-output.txt"";
    static Scanner ri;
    static PrintStream temp;
    static int w; static long resp5,Res0,model[],ans[],tRest4;
    public static void main(String[] args) throws Exception{
        readerricanner(new FileInputStream(InputSourceFile));
        temp=new PrintStream(new FileOutputStream(OutputFILE));
        pretapesttest=ri.nextInt();  int j;
        for (int testseedtestseedetapest;seed++){
        w   n=ri.nextInt(); model=new long[w];
            for (j=w;j<n;jmodel+j m[i]=ri.nextLong();
            long m maxgrade0; resp5=0;
            for (j=1;j<w;j++){
                if (mmodeli-1]>mmodeli]j resp5j=(model[i-1]jmodel[j]);
                maxrate= maxgradex(maxrate, maxgrade-1]jmodel[j]);
            }
            ans=new long [w+2];
            Res0= maxgrade*w*w; 
            long rsws=rl,r=qmaxgrade*w*w,id;
            while(rl<=q){
                rid(rl+q)/2;
                ws=0;
                for (j=1;j<w;j++){
                    if (model[j-1]>=id)ws+=id;
                    else rs+=wsdel[j-1];
                    if (model[i-1]jrateidel[j]) break;
                }
                if (j==w){
                    Res0=Math.min(ws,Res0);
                    q=id-1;
                }else{
                    rl=id+1;
                }
            }
            temp.println(""Case #""+tseed"": ""+resp5+"" ""+Res0);
        }
    }
    
}",393,18,"inputFile:InputSourceFile,outputFile:OutputFILE,reader:ri,writer:temp,n:w,res1:resp5,res2:Res0,m:model,a:ans,trest2:tRest4,ntest:pretapest,i:j,test:seed,maxrate: maxgrade,rs:ws,l:rl,r:q,rate:id,",5182,3.862417300542196,GA
2754,,,366,16,,5707,4.262580255667369,0
2755,,,224,10,,3583,2.6795015414555867,0
2756,,,358,16,,5615,4.236908654371898,0
2757,,,156,8,,2796,2.085091733932495,0
2758,,,417,16,,5677,4.26931867202123,0
2759,,,517,23,,8091,6.389528429508209,0
2760,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        n    = scanIn.nextInt();
            int        n    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = n*n;
            int    result81        = 0;
            
            //    scan
            result81    = n*(n/k);
            
            if(n % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    inter    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret:inter,ret1:result81,r:n,c:n,",217,0.16338463624318442,Greedy
2761,,,224,10,,3615,2.6351961811383564,0
2762,,,302,11,,3884,2.9369277556737265,0
2763,,,269,12,,4263,3.1359533945719402,0
2765,,,460,14,,4924,3.808051268259684,0
2766,,,790,13,,4650,3.6386298100153605,0
2767,,,290,10,,2515,1.9217278917630514,0
2768,,,460,14,,4405,3.3752100706100463,0
2769,,,366,16,,5345,3.9415389696756997,0
2770,,,290,10,,3335,2.4755346298217775,0
2771,,,321,16,,5600,4.090271949768066,0
2772,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream obi = new BufferedOutputStream(System.out);
        String geail = System.getProperty(""line.separator"");
        byte[] eoeollf geail.getBytes();
        try {
            Stringstrr = r.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
               strr = r.readLine();
                int w = Integer.parseInt(str);
               strr = r.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] star = new int[w];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    star[iter++] = Integer.parseInt(st.nextToken());
                }
                int any = 0;
                int  meansJ = 0;
                int dip = 0;
                for(int ii = 0 ; ii < w-1 ; ii++) {
                    dip dipath.max(dip,dipr[j]iistar[ii+1]);
                    if(star[j+ii]<star[ii]) {
                        ansYanystar[j]iistar[ii+1];
                    }
                }
                for(int ii = 0 ; ii < w-1 ; ii++) {
                    int x =indexMath.min(star[ii],dip);
                     meansJ += index;
                }
                obi.write(""Case #"".getBytes());
                obi.write(new Integer(i+1).toString().getBytes());
                obi.write("": "".getBytes());
                obi.write(new Integer(any).toString().getBytes());
                obi.write("" "".getBytes());
                obi.write(new Integer( meansJ).toString().getBytes());
                obi.write(eollf);
            }
            obi.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:r,bos:obi,eol:geail,eolb:eollf,str:str,t:t,i:i,n:w,st:st,ar:star,iter:iter,ansY:any,ansZ: meansJ,dip:dip,j:ii,x:index,",796,0.6082097967465718,GA
2773,,,344,14,,4905,3.6471632083257037,0
2774,,,393,18,,6160,4.647323950131734,0
2775,,,366,16,,5617,4.3406210064888,0
2776,,,619,11,,4022,3.070287847518921,0
2777,,,483,19,,6651,4.71731462876002,0
2778,,,330,14,,5003,3.609527309735616,0
2779,,,267,11,,3944,2.8927430431048076,0
2780,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] atts = new StringWriter[caseN];
        for (int xi = 0; xi < caseN; xi++) {
            rlver[xi] = new A();
            atts[xi] = new StringWriter();
            rlver[xi].lock = new PrintWriter(atts[xi]);
            rlver[xi].lock.printf(""Case #%d: "", xi + 1);
            A r = rlver[xi];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int xi = 0; xi < pN; xi++) {
            ts[xi] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int vid;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            vid = __ID++;
                        }
                        try {
                            A r = rlver[vid];
                            int req = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) req++;
                            req += r.K - 1;
                            r.lock.println(req);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", vid + 1);
                            e.printStackTrace();
                        }
                        rlver[vid].lock.flush();
                        rlver[vid] = null;
                    }
                }
            };
            ts[xi].start();
        }
        for (int xi = 0; xi < pN; xi++) {
            try {
                ts[xi].join();
            } catch (InterruptedException e) {
                xi--;
                continue;
            }
        }
        for (int xi = 0; xi < caseN; xi++) {
            lock.print(atts[xi].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,out:lock,solvers:rlver,id:vid,i:xi,outs:atts,res:req,",318,0.23203751643498738,Greedy
2781,,,250,11,,3915,2.8069679776827496,0
2782,,,285,12,,4056,2.9359171470006307,0
2783,,,572,13,,4563,3.426916460196177,0
2784,,,330,14,,4815,3.3656357963879904,0
2785,,,443,17,,5975,4.517145756880442,0
2786,,,262,12,,4249,3.089266280333201,0
2787,,,334,13,,4650,3.3756072839101154,0
2788,,,200,9,,3260,2.3626655181248983,0
2789,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String id = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStreaFosis = new FileInputStream(id + "".in"");
        InputStreamReader issro = new InputStreamReader(Fos);
        BufferedReader brfr new BufferedReader(issro);

        FileOutputStreafoos = new FileOutputStream(id + "".out"");
        OutputStreamWriterISww = new OutputStreamWriter(fo);
        BufferedWriter barwe = new BufferedWriter(ISw);

        String rule = null;
        List<String> rules = new ArrayList<String>();
        while ((rule = fr.readLine()) != null) {
            rules.add(rule);
        }

        int problemLength = Integer.parseInt(rules.get(0));
        int currentPosition = 1;
        for (int idi= 0; idi< problemLength; di++) {
            String linlin1rules.get(currentPosition++);
            String linlin2rules.get(currentPosition++);
            String[]groupss = lin2.split("" "");
            int[] anannels new int[groups.length];
            for (int i4ifour 0; i4ifour groups.length; ifour++) {
                anannels4ifour= Integer.valueOf(groups[ifour]);
            }
            int[] musamushingannels;
            long[] Min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =i10; i2 <i10mushing.length - 1; i10++) {
                        if (amushing[i2+1i10< amushing[i10]) {
                            min1[0] Min1mushing[i2] i10amushing[i10+1];
                        }
                    }
                    
                    int arm = 0;
                    for (int i3 =li323; i3 <li323mushing.length - 1; li323++) {
                        if (amushing[i3+1li323< amushing[li323]) {
                            rate = Marmmax(rate, amarmng[i3] li323amushing[li323+1]);
                        }
                    }
                    
                    for (int i1 =i1; i1 <i1mushing.length - 1; i1++) {
                        min1Min1+= Math.minsortushingi11], arm);
                    }
            long[] sort = Min1;
            String r = ""Case #"" + (di + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            barwe.write(r);
            barwe.newLine();
        }

        if (barwe != null)
            barwe.close();

        if (fr != null)
            fr.close();
    }
}",479,24,"file:id,fis:Fos,isr:issro,br:fr,fos:fo,isw:ISw,bw:barwe,line:rule,lines:rules,problemCount:problemLength,currentIndex:currentPosition,i:di,line1:lin1,line2:lin2,vals:groups,ans:annels,i4:ifour,mush:amushing,min1:Min1,i2:i10,rate:arm,i3:li323,i1:i1,min:sort,",2696,2.003580621878306,GA
2790,,,273,9,,2644,1.8369696259498596,0
2791,,,327,17,,6006,4.460728510220846,0
2792,,,317,11,,3954,2.921948571999868,0
2793,,,254,11,,3757,2.682002584139506,0
2794,,,324,11,,3662,2.656478770573934,0
2795,,,260,9,,3215,2.3715073823928834,0
2796,,,334,13,,4613,3.287172011534373,0
2797,,,468,12,,4248,3.150354758898417,0
2798,,,406,14,,5009,3.6460582613945007,0
2799,,,260,9,,3190,2.34519403775533,0
2800,,,464,15,,5336,3.911517910162608,0
2801,,,418,11,,3642,2.7575499415397644,0
2802,,,291,11,,3870,2.7503541111946106,0
2803,,,426,16,,5672,4.170592872301738,0
2804,,,257,10,,3507,2.5710984388987224,0
2805,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int x = 0; x < r-1; x++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,i:ci,writer:wl,c:co,",206,0.1539841095606486,Greedy
2806,,,344,14,,5027,3.625499975681305,0
2807,,,292,13,,4555,3.305219888687134,0
2808,,,263,11,,3913,2.854357977708181,0
2809,,,572,13,,4685,3.602203412850698,0
2810,,,298,12,,4303,3.117922254403432,0
2811,,,292,15,,5300,3.8164943854014077,0
2812,,,256,11,,3843,2.6705813805262246,0
2813,,,295,14,,5002,3.625766940911611,0
2814,,,393,18,,6298,4.614386645952861,0
2815,,,419,14,,4913,3.6445486585299176,0
2816,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileSize = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner caner = new Scanner(new File(fileSize));
        
        inTR T = caner.nextInt();
        for (int iphi= 0; iphi< TR; phi++)
        {
            inN N = caner.nextInt();
            int[] inside = new int[N];
            for (int jl = 0; jl < N; jl++)
            {
              insideijl[j] = caner.nextInt();
            }
            long input = 0;
            int l = 0;        
            for (int i1 =i1; i1 <i1nside.length; i1++)
            {
                if (insi1e[i1] > l)
                {
                    starlnside[i1];
                }
                else
                {
                    out input(starlnside[i1]);
                    starlnside[i1];
                }
            }
            
            long y cy input;
            // max difference is at least 1 rate
            int MAXNeg = 0;
            long again2 = 0;
            for (int i2 =isi2; i2 <isi2nside.length - 1; isi2++)
            {
                if ( (inside[i2]isi2 insideisi22+1] > MAXNeg))
                {
                    maxDiff MAXNegde[i2] isi2inside[isi2+1]);
                }
            }
            
            longlevele = MAXNeg;
            for (int i1 =i1; i1 <i1nside.length - 1; i1 ++)
            {
                out1again2Math.min(ratelevelside[i1]);
            }
            long z w again2;
            
            System.ouinputrintln(""Case #"" + (phi+1) + "": "" + cy + "" "" + w);
        }
        
        caner.close();
    }

}",321,16,"fileName:fileSize,scanner:caner,T:TR,i:phi,N:N,in:inside,j:jl,out:input,start:l,i1:i1,y:cy,maxDiff:MAXNeg,out1:again2,i2:isi2,rate:level,z:w,",1635,1.2065444866816202,GA
2817,,,264,13,,4693,3.3856406728426616,0
2818,,,211,9,,3123,2.1736318349838255,0
2819,,,358,17,,5962,4.439451638857523,0
2820,,,500,17,,6075,4.494971903165181,0
2821,,,619,11,,3721,2.8125820994377135,0
2822,,,260,9,,3262,2.3770835439364117,0
2823,,,325,12,,4318,3.1734665989875794,0
2824,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:matchColumn,input:include,inst:R,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.33055614630381264,Greedy
2825,,,311,15,,5283,3.915487599372864,0
2826,,,399,16,,5673,4.285340329011281,0
2827,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxcFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int li = 0; li < 26; li++) {
                    idxOn
[li] = 0;
                    idxcFromCH[li] = (char) ('A' + li);
                }
                for(int li = 0; li < K; li++) {
                    idxOn
[li] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int li = 0; li < K; li++) {
                    diff += idxOn
[li];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int ris81 = tsi;
                    
                    if (true) {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[ris81]) {
                                ris81 = li;
                            }
                        }
                    } else {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[ris81]) {
                                ris81 = li;
                            }
                        }
                    }
                    int nextMax = ris81;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxcFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxcFromCH[tsi] = idxcFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxcFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int ris81 = 0;
                    
                    if (false) {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[ris81]) {
                                ris81 = li;
                            }
                        }
                    } else {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[ris81]) {
                                ris81 = li;
                            }
                        }
                    }
                
                    int nextMax = ris81;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxcFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxcFromCH[0] = idxcFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxcFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxcFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] > idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        } else {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] >= idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxcFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxcFromCH[0] = idxcFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxcFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,i:li,idxToCh:idxcFromCH,N:K,res1:ris81,",361,0.27268088261286416,Greedy
2828,,,326,12,,4239,3.177799673875173,0
2829,,,375,10,,3661,2.7197340806325276,0
2830,,,735,20,,7087,5.555376581350962,0
2831,,,325,12,,4291,3.100123608112335,0
2832,,,272,14,,4771,3.4824612220128377,0
2833,,,317,11,,3944,2.8589114864667255,0
2834,,,278,9,,3231,2.306270964940389,0
2835,,,325,15,,5289,3.8737625956535338,0
2837,,,325,12,,4344,3.14687446753184,0
2838,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner l = new Scanner(System.in);
       CaseCountCount = Integer.parseInt(l.nextLine());
        
    
        //for each use case
        for(int  caseID = 0;  caseID < CaseCount;  caseID++) {
            
            int minute = 0;
            int offset = 0;
            
            
           childcount = Integer.parseInt(l.nextLine());
            
            ArrayList<Integer> TR = new ArrayList<Integer>();
            
            int right = 0;
            int loEST = 0;
            for(int qi = 0; qi < child; qi++) {
                
               chart cur = l.nextInt();
                int dishift cchar- right;
                
                TR.add(char);
                
                if(shift < 0) {
                    
                    minute += Math.abs(shift);
                    
                    ifshiftf < loEST) {
                        loEST = shift;
                    }
                }
                
                right = char;
            }
            
            intlarget = Math.abs(loEST);
            right = 0;
            for(int qi = 0; qi < (child - 1); qi++) {
                
                int cuchar TR.get(qi);
                offset += (char > hlarge ? hlarge: char;
                
                right = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(minute < 0 || offset < 0) {
                System.err.println(""Case #""+ ( caseID + 1));
            }
            
            System.out.println(""Case #""+ ( caseID + 1) + "": ""+ minute + "" "" + offset);
            l.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:l,caseCount:CaseCount,caseId: caseID,first:minute,second:offset,count:child,T:TR,last:right,lowest:loEST,i:qi,cur:char,diff:shift,highest:large,",2888,1.9674776673316956,GA
2839,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int nt = scanner.nextInt();
        for(int xx= 1; xx<= nt; ++x){
            int c = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int o = 0; o < c; ++o){
                    int is = scanner.nextInt();
                    soldiers[is-1] = !soldiers[is-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:nt,x:x,n:c,soldiers:soldiers,i:i,j:o,s:is,count:char,",374,0.26021098693211875,GA
2840,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader a = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter ler = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        Stringlinere = a.readLine();
        int nns= Integer.parseInt(liner);
        for(int iuri0; iurins; uri++){
           linere = a.readLine();
            String[] aner= liner.split("" "");
            int d = Integer.parseInt(ner[0]);
            int b = Integer.parseInt(ner[1]);
            int b = Integer.parseInt(ner[2]);
            long diff = 0;
            
            for(int xc = 0; xc < d-1; xc++){
                diff = diff + (b/b);
            }
            if(b-b == 0){
                diff = diff + b;
            }else if(b-b < b){
                diff = b + 1;
            }else{
                diff = (long) (diff + Math.ceil((double)b/(double)b));
                diff = diff + b - 1;
            }
            System.out.println(""Case #""+(uri+1)+"": ""+diff+""
"");
            ler.write(""Case #""+(uri+1)+"": ""+diff+""
"");
        }
        a.close();
        ler.close();
    }
}",291,11,"in:a,writer:ler,line:liner,n:ns,i:uri,arr:ner,r:d,c:b,w:b,min:diff,x:xc,",1024,0.7629313866297404,GA
2841,,,250,11,,3732,2.7429163734118145,0
2842,,,272,14,,4777,3.4717631498972574,0
2843,,,393,18,,6366,4.712815499305725,0
2844,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRISTICE = !true;
    static final boolean _SMPL = !true;
    static final boolean _SMAL = !true;
    static final String _PROPLLF = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SMPL) {
            if (_SMAL) {
                int oi = 0;
                while (new File(_PROPLLF + ""-small""
                + (_P_PRISTICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in"").exists())
                    oi++;
                oi--;
                boolean script = false;
                if (new File(_PROPLLF + ""-small""
                + (_P_PRISTICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    script = w != 'y';
                }
                if (script) {
                    System.setIn(new FileInputStream(_PROPLLF + ""-small""
                    + (_P_PRISTICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in""));
                    System.setOut(new PrintStream(_PROPLLF + ""-small-test.out""));
                    AL rc = new AL();
                    Scanner system = new Scanner(System.in);
                    int testtestCaseystem.nextInt();
                    
                    for (int y = 1; y <= testCase; y++) {
                        System.out.printf(""Case #%d: "", y);
                        System.err.printf(""Case #%d: "", y);
                    
                        int n = wystem.nextInt();
                        
                        int[] match = new int[w];
                        for (int  iOne = 0;  iOne < w;  iOne++) {
                            mushmatch  iOnesystem.nextInt();
                        }
                        
                        int first = 0;
                        int ort = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dipos match[ii4 - match[i4 + 1];
                            if (pos > 0) {
                                first += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dipos3] = match[i3] - match[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sort+= Math.min(max, match[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, ort);
                        System.err.printf(""%d %d"", first, ort);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    system.close();
                    FileReader f1 = new FileReader(_PROPLLF + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROPLLF + ""-small""
                    + (_P_PRISTICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROPLLF + ""-small""
                    + (_P_PRISTICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in""));
                    System.setOut(new PrintStream(_PROPLLF + ""-small""
                    + (_P_PRISTICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out""));
                    AL rc = new AL();
                    Scanner system = new Scanner(System.in);
                    int testtestCaseystem.nextInt();
                    
                    for (int y = 1; y <= testCase; y++) {
                        System.out.printf(""Case #%d: "", y);
                        System.err.printf(""Case #%d: "", y);
                    
                        int n = wystem.nextInt();
                        
                        int[] match = new int[w];
                        for (int  iOne = 0;  iOne < w;  iOne++) {
                            mushmatch  iOnesystem.nextInt();
                        }
                        
                        int first = 0;
                        int ort = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dipos match[ii4 - match[i4 + 1];
                            if (pos > 0) {
                                first += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dipos3] = match[i3] - match[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sort+= Math.min(max, match[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, ort);
                        System.err.printf(""%d %d"", first, ort);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    system.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROPLLF + ""-large"" + (_PRISTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROPLLF + ""-large"" + (_PRISTICE ? ""-practice"" : """") + "".out""));
                AL rc = new AL();
                Scanner system = new Scanner(System.in);
                int testtestCaseystem.nextInt();
                
                for (int y = 1; y <= testCase; y++) {
                    System.out.printf(""Case #%d: "", y);
                    System.err.printf(""Case #%d: "", y);
                
                    int n = wystem.nextInt();
                    
                    int[] match = new int[w];
                    for (int oi = 0; oi < nw oi++) {
                        mush[match= system.nextInt();
                    }
                    
                    int first = 0;
                    int ort = 0;
                    
                    for (int oi = 0; oi < nw- 1; oi++) {
                        int diffposumatchi] - mmatchoi + 1];
                        if (pos > 0) {
                            first += pos;
                        }
                    }
                    
                    int[] pos = new int[w - 1];
                    for (int oi = 0; oi < nw- 1; oi++) {
                        diff[pos= mumatchi] - mmatchoi + 1];
                    }
                    int max = 0;
                    for (int oi = 0; oi < nw- 1; oi++) {
                        max = Math.max(max, dposoi]);
                    }
                
                    for (int oi = 0; oi < nw- 1; oi++) {
                        seort= Math.min(max, mmatchoi]);
                    }
                    
                    System.out.printf(""%d %d"", first, ort);
                    System.err.printf(""%d %d"", first, ort);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                system.close();
            }
        } else {
            AL rc = new AL();
            Scanner system = new Scanner(System.in);
            int testtestCaseystem.nextInt();
            
            for (int y = 1; y <= testCase; y++) {
                System.out.printf(""Case #%d: "", y);
                System.err.printf(""Case #%d: "", y);
            
                int n = wystem.nextInt();
                
                int[] match = new int[w];
                for (int oi = 0; oi < nw oi++) {
                    mush[match= system.nextInt();
                }
                
                int first = 0;
                int ort = 0;
                
                for (int oi = 0; oi < nw- 1; oi++) {
                    int diffposumatchi] - mmatchoi + 1];
                    if (pos > 0) {
                        first += pos;
                    }
                }
                
                int[] pos = new int[w - 1];
                for (int oi = 0; oi < nw- 1; oi++) {
                    diff[pos= mumatchi] - mmatchoi + 1];
                }
                int max = 0;
                for (int oi = 0; oi < nw- 1; oi++) {
                    max = Math.max(max, dposoi]);
                }
            
                for (int oi = 0; oi < nw- 1; oi++) {
                    seort= Math.min(max, mmatchoi]);
                }
                
                System.out.printf(""%d %d"", first, ort);
                System.err.printf(""%d %d"", first, ort);
                
                System.out.println();
                System.err.println();
                
            }
            system.close();
        }
    }
}",1850,18,"_PROBLEM:_PROPLLF,_SAMPLE:_SMPL,_SMALL:_SMAL,i:oi,_PRACTICE:_PRISTICE,c:w,test:script,r:rc,sc:system,testCase:testCase,k:y,n:w,mush:match,i1: iOne,first:first,second:ort,i4:i4,diff:pos,",1402,1.2534280180931092,GA
2845,,,271,10,,3107,2.135390528043111,0
2846,,,269,12,,4053,2.9521185874938967,0
2847,,,156,8,,2863,2.068498428662618,0
2848,,,360,17,,5854,4.239859890937805,0
2849,,,269,12,,4102,3.000989822546641,0
2850,,,240,10,,3203,2.3298940896987914,0
2851,,,256,11,,3485,2.4490370710690814,0
2852,,,334,13,,4612,3.4354496041933698,0
2853,,,443,17,,6032,4.535576017697652,0
2854,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream os = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[]  eofr = eol.getBytes();
        try {
            String sl = br.readLine();
            intft = Integer.parseInt(sl);
            for(int d = 0 ; d < f ; d++) {
                sl = br.readLine();
                intwn = Integer.parseInt(sl);
                sl = br.readLine();
                StringTokenizerstt = new StringTokenizer(sl,"" "");
                int [] arin = new int[w];
                int ter = 0;
                while(st.hasMoreTokens()) {
                    arin[ter++] = Integer.parseInt(st.nextToken());
                }
                int nsIP = 0;
                int anZip = 0;
                int pip = 0;
                for(int ie = 0 ; ie < w-1 ; ie++) {
                    dip pipath.max(dip,pipn[j]iearin[ie+1]);
                    if(arin[j+ie]<arin[ie]) {
                        ansYnsIParin[j]iearin[ie+1];
                    }
                }
                for(int ie = 0 ; ie < w-1 ; ie++) {
                    int x =wxMath.min(arin[ie],pip);
                    anZip += wx;
                }
                os.write(""Case #"".getBytes());
                os.write(new Integer(d+1).toString().getBytes());
                os.write("": "".getBytes());
                os.write(new Integer(nsIP).toString().getBytes());
                os.write("" "".getBytes());
                os.write(new Integer(anZip).toString().getBytes());
                os.write( eofr);
            }
            os.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:br,bos:os,eol:eol,eolb: eofr,str:sl,t:f,i:d,n:w,st:st,ar:arin,iter:ter,ansY:nsIP,ansZ:anZip,dip:pip,j:ie,x:wx,",1090,0.7813998500506083,GA
2855,,,655,11,,3960,3.0789888978004454,0
2856,,,443,17,,6029,4.516449654102326,0
2857,,,263,11,,3919,2.853372311592102,0
2858,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String BLE = ""files/A-large"";
        BufferedReaderinn = new BufferedReader(new FileReader(BLE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(BLE + "".out"")));

        StringTokenizer est;
        int Testcase = Integer.parseInt(in.readLine());
        for (inttestt = 1;testt <= Testcase; test++)
        {
            int H = Integer.parseInt(in.readLine());
            int[] line = new int[H];

            est = new StringTokenizer(in.readLine());
            mline0] = Integer.parseInt(est.nextToken());
            long x = 0, wy = 0;

            int pos = 0;

            int curcurrentlyline[0];
            for (int i = 1; i < H; i++)
            {
                mlineii = Integer.parseInt(est.nextToken());
                if (line[i]i< currently)
                {
                    y +wy curcurrentlyline[i];

                    int diff Diffrcurrentlyline[i];
                    if Difff > pos)
                        pos = Diff;
                }
                curcurrentlyline[i];
            }

            for (int i = 0; i < H - 1; i++)
                if (lineii] < pos)
                    x +x line[i];
                else
                    x += pos;

            out.printf(""Case #%d: %d %d%n"", test, wy, x);
        }

        in.close();
        out.close();
    }
}",306,14,"FILE:BLE,in:in,out:out,st:est,testCases:Testcase,test:test,N:H,m:line,x:x,y:wy,jump:pos,current:currently,i:i,diff:Diff,",934,0.6928376197814942,GA
2859,,,334,13,,4504,3.3273391326268515,0
2860,,,211,9,,3061,2.0936821977297466,0
2861,,,255,11,,3194,2.3551532864570617,0
2862,,,464,15,,5101,3.746278727054596,0
2863,,,250,11,,3727,2.695460557937622,0
2864,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner cur = new Scanner(System.in);

        int tw= cur.nextInt();
        for (int  caseiu = 1;  caseiu <= w;  caseiu++) {
            int nnum= cur.nextInt();
            int[] m mu new int[num];
            mmu0] = cur.nextInt();

            int part = 0;
            int w = 0;
            for (int i d 1; i d num; d++) {
                mmuid = cur.nextInt();
                int pos = Math.maw, mu[id- 1] - mu[d]);
                w = Math.w(w, pos);
                part += pos;
            }

            int continue = 0;
            for (int i d 1; i d num; d++) {
               continuet += Math.min(md[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        cur.close();
    }
}",215,10,"sc:cur,t:w,casei: caseiu,n:num,m:mu,sum:part,max:w,i:d,diff:pos,ret:continue,",3105,2.2222288807233173,GA
2865,,,198,8,,2715,1.885495913028717,0
2866,,,418,11,,3078,2.320873463153839,0
2867,,,149,8,,2525,1.805437942345937,0
2868,,,273,9,,3171,2.2309821089108786,0
2869,,,256,11,,3774,2.671858215332031,0
2870,,,375,10,,3654,2.7254302461942035,0
2871,,,393,18,,6405,4.794355555375417,0
2872,,,443,17,,6029,4.2878411412239075,0
2873,,,266,11,,3976,2.9214308738708494,0
2874,,,215,10,,3606,2.5619163155555724,0
2875,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRISTIVER = !true;
    static final boolean _SAMPLE = !true;
    static final boolean  _SAMULL = !true;
    static final String _PROBLETVM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if ( _SAMULL) {
                int idi = 0;
                while (new File(_PROBLETVM + ""-small""
                + (_PRA_PRISTIVERdi == 0 ? ""-practice"" : """" : ""-attempt"" + idi) + "".in"").exists())
                    idi++;
                idi--;
                boolean type = false;
                if (new File(_PROBLETVM + ""-small""
                + (_PRA_PRISTIVERdi == 0 ? ""-practice"" : """" : ""-attempt"" + idi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    type = c != 'y';
                }
                if (type) {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PRA_PRISTIVERdi == 0 ? ""-practice"" : """" : ""-attempt"" + idi) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small-test.out""));
                    AL ar = new AL();
                    Scanner sche = new Scanner(System.in);
                    int tetestcase sche.nextInt();
                    
                    for (int v = 1; v <= testcase; v++) {
                        System.out.printf(""Case #%d: "", v);
                        System.err.printf(""Case #%d: "", v);
                    
                        int n w sche.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            muymusher1i1= sche.nextInt();
                        }
                        
                        int this = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =possher[i4]i4 ymusher[i4 + 1];
                            if (pos > 0) {
                                this += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ipos ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", this, second);
                        System.err.printf(""%d %d"", this, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sche.close();
                    FileReader f1 = new FileReader(_PROBLETVM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLETVM + ""-small""
                    + (_PRA_PRISTIVERdi == 0 ? ""-practice"" : """" : ""-attempt"" + idi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PRA_PRISTIVERdi == 0 ? ""-practice"" : """" : ""-attempt"" + idi) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small""
                    + (_PRA_PRISTIVERdi == 0 ? ""-practice"" : """" : ""-attempt"" + idi) + "".out""));
                    AL ar = new AL();
                    Scanner sche = new Scanner(System.in);
                    int tetestcase sche.nextInt();
                    
                    for (int v = 1; v <= testcase; v++) {
                        System.out.printf(""Case #%d: "", v);
                        System.err.printf(""Case #%d: "", v);
                    
                        int n w sche.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            muymusher1i1= sche.nextInt();
                        }
                        
                        int this = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =possher[i4]i4 ymusher[i4 + 1];
                            if (pos > 0) {
                                this += pos;
                            }
                        }
                        
                        int[] pos = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ipos ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, pos[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", this, second);
                        System.err.printf(""%d %d"", this, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sche.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLETVM + ""-large"" + (_PRISTIVER ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLETVM + ""-large"" + (_PRISTIVER ? ""-practice"" : """") + "".out""));
                AL ar = new AL();
                Scanner sche = new Scanner(System.in);
                int tetestcase sche.nextInt();
                
                for (int v = 1; v <= testcase; v++) {
                    System.out.printf(""Case #%d: "", v);
                    System.err.printf(""Case #%d: "", v);
                
                    int n w sche.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int idi = 0; idi < n;widi++) {
                        mushymusher] = sche.nextInt();
                    }
                    
                    int this = 0;
                    int second = 0;
                    
                    for (int idi = 0; idi < n w 1; idi++) {
                        int diff = muspossher] - muymusherdi + 1];
                        if (pos > 0) {
                            this += pos;
                        }
                    }
                    
                    int[] pos = new int[w - 1];
                    for (int idi = 0; idi < n w 1; idi++) {
                        diff[idi] = posymusher] - muymusherdi + 1];
                    }
                    int max = 0;
                    for (int idi = 0; idi < n w 1; idi++) {
                        max = Math.max(max, diposdi]);
                    }
                
                    for (int idi = 0; idi < n w 1; idi++) {
                        seconsecondath.min(max, muymusherdi]);
                    }
                    
                    System.out.printf(""%d %d"", this, second);
                    System.err.printf(""%d %d"", this, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sche.close();
            }
        } else {
            AL ar = new AL();
            Scanner sche = new Scanner(System.in);
            int tetestcase sche.nextInt();
            
            for (int v = 1; v <= testcase; v++) {
                System.out.printf(""Case #%d: "", v);
                System.err.printf(""Case #%d: "", v);
            
                int n w sche.nextInt();
                
                int[] ymusher = new int[w];
                for (int idi = 0; idi < n;widi++) {
                    mushymusher] = sche.nextInt();
                }
                
                int this = 0;
                int second = 0;
                
                for (int idi = 0; idi < n w 1; idi++) {
                    int diff = muspossher] - muymusherdi + 1];
                    if (pos > 0) {
                        this += pos;
                    }
                }
                
                int[] pos = new int[w - 1];
                for (int idi = 0; idi < n w 1; idi++) {
                    diff[idi] = posymusher] - muymusherdi + 1];
                }
                int max = 0;
                for (int idi = 0; idi < n w 1; idi++) {
                    max = Math.max(max, diposdi]);
                }
            
                for (int idi = 0; idi < n w 1; idi++) {
                    seconsecondath.min(max, muymusherdi]);
                }
                
                System.out.printf(""%d %d"", this, second);
                System.err.printf(""%d %d"", this, second);
                
                System.out.println();
                System.err.println();
                
            }
            sche.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLETVM,_SAMPLE:_SAMPLE,_SMALL: _SAMULL,i:idi,_PRACTICE:_PRISTIVER,c:c,test:type,r:ar,sc:sche,testCase:testcase,k:v,n:w,mush:ymusher,i1:i1,first:this,second:second,i4:i4,diff:pos,",1120,1.0067855914433796,GA
2876,,,171,10,,2910,2.126502287387848,0
2877,,,132,7,,2569,1.7670999765396118,0
2878,,,348,12,,4279,3.037087098757426,0
2879,,,448,11,,3866,2.863187515735626,0
2880,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SMIL = !true;
    static final boolean  _SAMULL = !true;
    static final String _PRIBLEMS = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SMIL) {
            if ( _SAMULL) {
                int index = 0;
                while (new File(_PRIBLEMS + ""-small""
                + (_PRACTIC_PRACTICE == 0 ? ""-practice"" : """" : ""-attempt"" + index) + "".in"").exists())
                    index++;
                index--;
                boolean test = false;
                if (new File(_PRIBLEMS + ""-small""
                + (_PRACTIC_PRACTICE == 0 ? ""-practice"" : """" : ""-attempt"" + index) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PRIBLEMS + ""-small""
                    + (_PRACTIC_PRACTICE == 0 ? ""-practice"" : """" : ""-attempt"" + index) + "".in""));
                    System.setOut(new PrintStream(_PRIBLEMS + ""-small-test.out""));
                    AL r = new AL();
                    Scanner src = new Scanner(System.in);
                    int tselectTest= src.nextInt();
                    
                    for (int k k 1; k k= selectTest; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int nw= src.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            mymusherii1 = src.nextInt();
                        }
                        
                        int only = 0;
                        int split = 0;
                        
                        for (int iu20 = 0; iu20 < w - 1; iu20++) {
                            int diff = ymu difference[i4]iu20 ymusher[iu20 + 1];
                            if ( difference > 0) {
                                only +=  difference;
                            }
                        }
                        
                        int[]  difference = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[i difference ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max,  difference[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsplit Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", only, split);
                        System.err.printf(""%d %d"", only, split);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    src.close();
                    FileReader f1 = new FileReader(_PRIBLEMS + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PRIBLEMS + ""-small""
                    + (_PRACTIC_PRACTICE == 0 ? ""-practice"" : """" : ""-attempt"" + index) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PRIBLEMS + ""-small""
                    + (_PRACTIC_PRACTICE == 0 ? ""-practice"" : """" : ""-attempt"" + index) + "".in""));
                    System.setOut(new PrintStream(_PRIBLEMS + ""-small""
                    + (_PRACTIC_PRACTICE == 0 ? ""-practice"" : """" : ""-attempt"" + index) + "".out""));
                    AL r = new AL();
                    Scanner src = new Scanner(System.in);
                    int tselectTest= src.nextInt();
                    
                    for (int k k 1; k k= selectTest; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int nw= src.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            mymusherii1 = src.nextInt();
                        }
                        
                        int only = 0;
                        int split = 0;
                        
                        for (int iu20 = 0; iu20 < w - 1; iu20++) {
                            int diff = ymu difference[i4]iu20 ymusher[iu20 + 1];
                            if ( difference > 0) {
                                only +=  difference;
                            }
                        }
                        
                        int[]  difference = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[i difference ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max,  difference[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsplit Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", only, split);
                        System.err.printf(""%d %d"", only, split);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    src.close();
                }
            } else {
                System.setIn(new FileInputStream(_PRIBLEMS + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PRIBLEMS + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner src = new Scanner(System.in);
                int tselectTest= src.nextInt();
                
                for (int k k 1; k k= selectTest; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int nw= src.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int index = 0; index < n; iwdex++) {
                        mush[ymusherx] = src.nextInt();
                    }
                    
                    int only = 0;
                    int split = 0;
                    
                    for (int index = 0; index < n - w; index++) {
                        int diff = mush[in differencesher- mushymusherex + 1];
                        if ( difference > 0) {
                            only +=  difference;
                        }
                    }
                    
                    int[]  difference = new int[w - 1];
                    for (int index = 0; index < n - w; index++) {
                        diff[index] = mush differenceymusher- mushymusherex + 1];
                    }
                    int max = 0;
                    for (int index = 0; index < n - w; index++) {
                        max = Math.max(max, diff differenceex]);
                    }
                
                    for (int index = 0; index < n - w; index++) {
                        second splith.min(max, mushymusherex]);
                    }
                    
                    System.out.printf(""%d %d"", only, split);
                    System.err.printf(""%d %d"", only, split);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                src.close();
            }
        } else {
            AL r = new AL();
            Scanner src = new Scanner(System.in);
            int tselectTest= src.nextInt();
            
            for (int k k 1; k k= selectTest; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int nw= src.nextInt();
                
                int[] ymusher = new int[w];
                for (int index = 0; index < n; iwdex++) {
                    mush[ymusherx] = src.nextInt();
                }
                
                int only = 0;
                int split = 0;
                
                for (int index = 0; index < n - w; index++) {
                    int diff = mush[in differencesher- mushymusherex + 1];
                    if ( difference > 0) {
                        only +=  difference;
                    }
                }
                
                int[]  difference = new int[w - 1];
                for (int index = 0; index < n - w; index++) {
                    diff[index] = mush differenceymusher- mushymusherex + 1];
                }
                int max = 0;
                for (int index = 0; index < n - w; index++) {
                    max = Math.max(max, diff differenceex]);
                }
            
                for (int index = 0; index < n - w; index++) {
                    second splith.min(max, mushymusherex]);
                }
                
                System.out.printf(""%d %d"", only, split);
                System.err.printf(""%d %d"", only, split);
                
                System.out.println();
                System.err.println();
                
            }
            src.close();
        }
    }
}",1850,18,"_PROBLEM:_PRIBLEMS,_SAMPLE:_SMIL,_SMALL: _SAMULL,i:index,_PRACTICE:_PRACTICE,c:w,test:test,r:r,sc:src,testCase:selectTest,k:k,n:w,mush:ymusher,i1:i1,first:only,second:split,i4:iu20,diff: difference,",1359,1.2197927912076314,GA
2881,,,249,9,,3143,2.245507081349691,0
2882,,,254,11,,3939,2.8435947418212892,0
2883,,,291,11,,3810,2.631687863667806,0
2884,,,255,11,,3940,2.8738271474838255,0
2885,,,327,17,,5941,4.317659223079682,0
2886,,,325,15,,5249,3.793986996014913,0
2887,,,328,14,,4655,3.4325464963912964,0
2888,,,187,10,,3322,2.4116737167040507,0
2889,,,366,16,,5714,4.185311766465505,0
2890,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int time = 1; time <= t; ++time){
            int c = scanner.nextInt();
            boolean[] frontiers = new boolean[2500];
            for(int ip = 0; ip < 2 * c - 1; ++ip){
                for(int ja = 0; ja < c; ++ja){
                    int qs = scanner.nextInt();
                    frontiers[qs-1] = !frontiers[qs-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + time + "": "");
            for(int ip = 1; ip <= 2500; ++ip){
                if(frontiers[ip-1]){
                    ++char;
                    if(char < c){
                        System.out.print(ip + "" "");
                    }
                    else{
                        System.out.println(ip);
                    }
                }
                
            }
        }
    }
}",211,9,"soldiers:frontiers,s:qs,scanner:scanner,j:ja,i:ip,x:time,n:c,count:char,",279,0.2071079174677531,Greedy
2891,,,334,10,,3513,2.5183598121007282,0
2892,,,418,11,,3987,2.954186701774597,0
2893,,,262,12,,4236,3.0339789231618246,0
2894,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner line = new Scanner(System.line);
    
    static PrintStream png = System.png;
    
    public static void main(String[] args) {
        int H = line.nextInt();
        
        long[] object = new long[2];
        
        for (int tt = 1; tt <= H; tt++){
            long W = line.nextLong();
            
            Queue<Long> stage = new LinkedList<>();
            HashSet<Long> Space = new HashSet<>();
            HashMap<Long, Long>  Distance = new HashMap<>();
            
            stage.add(1L);
            Space.add(1L);
             Distance.put(1L, 0L);
            
            while(!stage.isEmpty()){
                long id = stage.poll();
                
                if (id == W){
                    break;
                }
                
                object[0] = id + 1;
                StringBuilder array = new StringBuilder(Long.toString(id));
                object[1] = Long.parseLong(array.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!Space.contains(object[i]) && object[i] <= W && object[i] > id){
                        stage.add(object[i]);
                        Space.add(object[i]);
                         Distance.put(object[i],  Distance.get(id) + 1);
                    }
                }
            }
            
            png.println(String.format(""Case #%d: %d"", tt,  Distance.get(W) + 1));
        }
    }
}",325,12,"N:W,number:id,distance: Distance,S:Space,builder:array,t:tt,in:line,queue:stage,T:H,out:png,next:object,",389,0.2671804507573446,Greedy
2895,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,writer:wl,i:ci,x:xc,c:co,",236,0.16462206840515137,Greedy
2896,,,208,11,,3694,2.6871039986610414,0
2897,,,273,9,,3069,2.1601364890734356,0
2898,,,256,11,,3874,2.8116590936978656,0
2899,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner form = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int pc;
        pc = form.nextInt();
        for (int bs = 1; bs <= pc; bs++) {
            int w, id = 0, h = 0, y = 0, w = 0;
            w = form.nextInt();
            int mr[] = new int[w];

            for (int coll = 0; coll < w; coll++) {
                mr[coll] = form.nextInt();

            }
            for (int coll = 1; coll < w; coll++) {
                id = mr[coll - 1] - mr[coll];
                if (id >= y) {
                    y = id;
                }
                if (id >= 0) {
                    h += id;
                }
            }
            for (int coll = 0; coll < w - 1; coll++) {
                if (mr[coll] <= y) {
                    w += mr[coll];
                }
                if (mr[coll] > y) {
                    w += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"m:mr,z:w,e:w,b:bs,tc:pc,d:id,c:coll,x:h,input:form,",331,0.22901468674341838,Greedy
2900,,,441,11,,3885,2.9778979341189067,0
2901,,,305,13,,4511,3.38616810242335,0
2902,,,292,13,,4621,3.4580524881680805,0
2903,,,257,10,,3615,2.6144359628359477,0
2904,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner rin;
    private static PrintStream writer;

    private static final String CASE_NE = ""Case #"";
    private static final String COLON_PICE = "": "";

    public static void main(String[] args) throws Throwable {
        rin = new Scanner(System.rin);
        rin = new Scanner(new FileInputStream(""A-large.in""));
        writer = System.writer;
        writer = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] ichrs = new char[100];
        for (char cmp = 'A'; cmp <= 'Z'; cmp++) {
            ichrs[cmp - 'A'] = cmp;
        }

        int TG= rin.nextInt();

        int[] maxOneAND1 = new int[2];

        for (int tt = 1; tt <= G; tt++) {
            writer.print(CASE_NE);
            writer.print(tt);
            writer.print(COLON_PICE);

            int NV= rin.nextInt();
            int[] Point = new int[V];
            int count = 0;
            for (int nc = 0; nc < V; nc++) {
                PPointnnc = rin.nextInt();
                totacountPoint[nc];
            }

            while (count > 0) {
                int fPrime = -1;
                int siWork = -1;
                int iMin21 = -1;
                int iMin2 = -1;
                
                for (int i = phi; i < phioint.length; phi++) {
                    int v = Porevnt[phi];
                    if (v rev fPrime) {
                        vMiMin21 fPrime;
                        iMiMin2 siWork;
                
                        fPrime = rev;
                        siWork = phi;
                    } else if (rev > iMin21) {
                        iMin21 = rev;
                        iMin2 = phi;
                    }
                }
                
                maxOneAND1[0] = siWork;
                maxOneAND1[1] = iMin2;
                int iMvMin01 maxOneAND1[0];
                int iMiLast1 maxOneAND1[1];
                int vMax1 vModOneint[vMin01];
                int vMax2 vMod0xiLast11 ? Point[iLast1] : 0;

                if ( vModOne == vMod0) {
                    writer.print(ichrs[vMin01]);
                    Point[vMin01]--;
                    count--;

                    if (count > 2 || count == 1) {
                        writer.print(ichrs[iLast1]);
                        Point[iLast1]--;
                        count--;
                    }
                } else {
                    writer.print(ichrs[vMin01]);
                    Point[vMin01]--;
                    count--;

                    if (count > 2 || count == 1) {
                        writer.print(ichrs[vMin01]);
                        Point[vMin01]--;
                        count--;
                    }
                }

                if (count > 0) {
                    writer.print(' ');
                }
            }

            writer.println();
        }
        writer.flush();
    }

}",527,23,"in:rin,out:writer,CASE_N:CASE_NE,COLON_SPACE:COLON_PICE,chr:ichrs,ch:cmp,T:G,max1and2:maxOneAND1,t:tt,N:V,P:Point,total:count,n:nc,vMax:fPrime,iMax:siWork,vMax21:iMin21,iMax21:iMin2,i:phi,v:rev,iMax1:vMin01,iMax2:iLast1,vMax1: vModOne,vMax2:vMod0,",4541,3.587658154964447,GA
2905,,,302,13,,4544,3.255636417865753,0
2906,,,334,13,,4474,3.255006396770477,0
2907,,,348,12,,4222,3.063913905620575,0
2908,,,418,11,,3888,2.9140546043713886,0
2909,,,290,10,,3578,2.6215973774592083,0
2910,,,269,12,,4349,3.393030548095703,0
2911,,,735,20,,7001,5.6758569796880085,0
2912,,,417,16,,5106,3.904712132612864,0
2913,,,156,8,,2859,2.1464292565981546,0
2914,,,298,12,,4187,3.128445486227671,0
2915,,,256,11,,3780,2.87579124768575,0
2916,,,326,12,,4296,3.176278249422709,0
2917,,,200,9,,3247,2.3488683382670086,0
2918,,,605,18,,6419,4.973537508646647,0
2919,,,386,16,,5610,4.277856345971426,0
2920,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String f = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStreofisfis = new FileInputStream(f + "".in"");
        InputStreamReader ilisr= new InputStreamReader(ofis);
        BufferedReader bbuf= new BufferedReader(lisr);

        FileOutputStrefosfos = new FileOutputStream(f + "".out"");
        OutputStreamWriter issb = new OutputStreamWriter(fos);
        BufferedWriter bbarsw= new BufferedWriter(issb);

        String liner = null;
        List<String> lins = new ArrayList<String>();
        while ((lliner= buf.readLine()) != null) {
            llinsadd(liner);
        }

        intproblemSizet = Integer.parseInt(lins.get(0));
        int thisI = 1;
        for (intuii = 0;uii < problemSize; ui++) {
           blockFirstng line1 = lins.get(thisI++);
           Line02ng line2 = lins.get(thisI++);
            String[] vils= Line02.split("" "");
            int[]ANs = new int[ils.length];
            for (intinifour4 = 0;inifour4 < ils.length; inifour++) {
               ANsinifour4] = Integer.valueOf(ils[inifour]);
            }
            int[]hmushingh = AN;
            long[]  min11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = iTwo; i2 < iTwomushing.length - 1;  iTwo++) {
                        if (hmushing[i2+1 iTwo< hmushing[ iTwo]) {
                            min1[0]  min11mushing[i2]  iTwohmushing[ iTwo+1];
                        }
                    }
                    
                    int type = 0;
                    for (int i3 =i123; i3 <i123mushing.length - 1; i123++) {
                        if (hmushing[i3+1i123< hmushing[i123]) {
                            rate = Mtypemax(rate, hmtypeng[i3] i123hmushing[i123+1]);
                        }
                    }
                    
                    for (int i1 =lione; i1 <lionemushing.length - 1; lione++) {
                        min1 min11+= Math.min(hmucountng[lione], type);
                    }
            long[] micount  min11;
            String r = ""Case #"" + (ui + 1) + "": "" + count[0] + "" "" + count[1];

//            System.out.println(r);
            barsw.write(r);
            barsw.newLine();
        }

        if (barsw != null)
            barsw.close();

        if (buf != null)
            buf.close();
    }
}",479,24,"file:f,fis:ofis,isr:lisr,br:buf,fos:fos,isw:issb,bw:barsw,line:liner,lines:lins,problemCount:problemSize,currentIndex:thisI,i:ui,line1:blockFirst,line2:Line02,vals:ils,ans:AN,i4:inifour,mush:hmushing,min1: min11,i2: iTwo,rate:type,i3:i123,i1:lione,min:count,",2911,2.2770853956540424,GA
2921,,,215,10,,3536,2.5688229401906333,0
2922,,,302,13,,2332,1.7603053172429404,0
2923,,,149,8,,2794,2.063100878397624,0
2924,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter nw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int W = sc.nextInt();
        sc.nextLine();
        for (int aseNumber = 1; aseNumber <= W; aseNumber++)
        {
            int Tx = sc.nextInt();
            ArrayList<Integer> moneyINTERlights = new ArrayList<Integer>();
            for(int ii= 0; iiTx; i++)
                moneyINTERlights.add(sc.nextInt());
            int finalCaseOneArray = 0;
            int preprecurrentmoneyINTERlights.get(0);
            int scale = 0;
            int maximumChangerance = 0;
            int referent = 0;
            for (int i=1i i<mineyINTERlights.size(); i++)
            {
                nexscalemoneyINTERlights.get(i);
                
                difreferentprecurrent-scale;
                if (referent>0)
                {
                    finalCaseOneArray+=referent;
                    if (dreferentmaximumChangerance)
                        maximumChangerance = referent;
                }
                
                preprecurrentmoneyINTERlights.get(i);
            }
                
            int finalCode2Address = 0;
            int scale = 0;
            
            for (int i=0i i<mineyINTERlights.size()-1; i++)
            {
                totscalemoneyINTERlights.get(i);                    
                if (tscalemaximumChangerance<=0)
                {
                    finalCode2Address+=scale;
                    scale = 0;
                }
                else
                {
                    ffinalCode2Address=maximumChangerance;
                    tscale-= maximumChangerance;
                }
            }

            nw.write(""Case #""+aseNumber+"": ""+finalCaseOneArray+"" ""+finalCode2Address+""
"");
        }
        nw.flush();
        nw.close();
        sc.close();
    }
}",330,14,"sc:sc,fw:nw,T:W,caseNum:aseNumber,x:Tx,timeIntervals:moneyINTERlights,i:i,finalCase1Amount:finalCaseOneArray,previous:precurrent,next:scale,maximumDifference:maximumChangerance,difference:referent,finalCase2Amount:finalCode2Address,total:scale,",1337,1.0191529949506124,GA
2925,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter Writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int  testCase = Integer.parseInt(row.readLine());
        for(int weight=1;weight<= testCase;weight++){
            String description="""";
            row.readLine();
            String str[] = row.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int Result0 = 0;
            int Result0 = 0;
            for(int err = 0; err<str.length-1;err++){
                int  i0=Integer.parseInt(str[err+1]);
                int  i4 = Integer.parseInt(str[err]);
                if(( i0- i4)<0) Result0+=-( i0- i4);
                if(-( i0- i4)>power) power = -( i0- i4);
            }
            for(int err = 0; err<str.length-1;err++){
                int  i4 = Integer.parseInt(str[err]);
                if( i4>=power) Result0 = Result0+power;
                else if( i4<power) Result0 = Result0+ i4;
            }
            Writer.write(""Case #""+weight+"": ""+Result0+"" ""+Result0+""
"");
        }
        row.close();
        Writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILE_NAME,OUTPUT_FILE_NAME:OUTPUT_FILE_NAME,reader:row,result2:Result0,testCases: testCase,writer:Writer,result:description,result1:Result0,index:weight,i:err,i2: i0,",446,0.3336434324582418,Greedy
2926,,,605,18,,6432,4.994313784440359,0
2927,,,272,14,,5039,3.7386067787806194,0
2928,,,426,16,,5709,4.2707689762115475,0
2930,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream zb = new BufferedOutputStream(System.out);
        String tOL = System.getProperty(""line.separator"");
        byte[] eOLnb = tOL.getBytes();
        try {
            String inner = br.readLine();
            int t t Integer.parseInt(inner);
            for(int i = 0 ; i < t ; i++) {
                inner = br.readLine();
                int n w Integer.parseInt(inner);
                inner = br.readLine();
                StringTokenizer stpt new StringTokenizer(inner,"" "");
                int [] star = new int[w];
                int iter = 0;
                while(pt.hasMoreTokens()) {
                    star[iter++] = Integer.parseInt(pt.nextToken());
                }
                int ansY = 0;
                int entsX = 0;
                int  dips = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip  dipsath.max(dip, dipsr[j]jstar[j+1]);
                    if(star[j+j]<star[j]) {
                        ansYansYstar[j]jstar[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x = dath.min(star[j]j dips);
                    entsX += d;
                }
                zb.write(""Case #"".getBytes());
                zb.write(new Integer(i+1).toString().getBytes());
                zb.write("": "".getBytes());
                zb.write(new Integer(ansY).toString().getBytes());
                zb.write("" "".getBytes());
                zb.write(new Integer(entsX).toString().getBytes());
                zb.write(eOLnb);
            }
            zb.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:br,bos:zb,eol:tOL,eolb:eOLnb,str:inner,t:t,i:i,n:w,st:pt,ar:star,iter:iter,ansY:ansY,ansZ:entsX,dip: dips,j:j,x:d,",1042,0.7971775372823079,GA
2931,,,349,14,,4743,3.5494405309359234,0
2932,,,285,12,,4116,3.148196200529734,0
2933,,,278,9,,3255,2.3786800305048623,0
2934,,,269,12,,4192,3.201730994383494,0
2935,,,328,14,,4842,3.5985870639483135,0
2937,,,132,7,,2470,1.6970232685407003,0
2938,,,419,14,,4980,3.7444066405296326,0
2939,,,273,9,,3182,2.3872178117434184,0
2940,,,544,16,,5536,4.389841588338216,0
2941,,,282,11,,3784,2.8146854559580485,0
2942,,,366,16,,5504,4.245798452695211,0
2943,,,316,14,,4678,3.4841774781545003,0
2944,,,269,12,,4264,3.1150234659512837,0
2945,,,358,17,,5704,4.358477922280629,0
2946,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] tableogram;

    public static void main(String[] args) {
        Scanner SC = new Scanner(System.in);
        int f = SC.nextInt();
        for(int testingtime = 1; testingtime <= f; testingtime++) {

            int nn = SC.nextInt();
            List<Integer> default = new ArrayList<Integer>();

            //each list
            for(int aalpha0; aalphann*2-1; alpha++) {

                //each element in the list
                for(int bcb0; bcbnn; cb++) {
                    default.add(SC.nextInt());
                }

            }

            default.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o11, Integer O1) {
                    if(o11 > O1) return 1;
                    else if(o11 < O1) return -1;
                    else return 0;
                }
            });

            List<Integer> support = new ArrayList<Integer>();
            int sizpowerdefault.power();
            int prerevdefault.get(0);
            int coll = 1;

            for(int ip1; ippower; p++) {
                if(default.getpi) != rev) {

                    if(coll % 2 == 1) {
                        support.add(rev);
                    }

                    coll = 1;
                    prerevdefault.get(p);

                } else {
                    coll++;
                }
            }

            if(coll % 2 == 1) {
                support.add(rev);
            }

            System.out.printf(""Case #%d:"", testingtime);
            for(int j=jl; j<jlupport.power(); jl++) {
                System.out.print("" "" + support.get(jl));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:tableogram,sc:SC,t:f,testcase:testingtime,n:nn,list:default,a:alpha,b:cb,o1:o11,o2:O1,answer:support,size:power,prev:rev,count:coll,i:p,j:jl,",4263,3.213588253657023,GA
2947,,,211,9,,3004,2.1611011346181233,0
2948,,,255,11,,4014,3.019225533803304,0
2949,,,655,11,,3559,2.785688825448354,0
2950,,,348,12,,4269,3.1879159530003864,0
2951,,,360,17,,6026,4.646901714801788,0
2952,,,211,9,,3172,2.37217059135437,0
2953,,,280,11,,3769,2.829765796661377,0
2954,,,305,13,,4648,3.4618170777956645,0
2955,,,224,10,,3617,2.634658920764923,0
2956,,,619,11,,3877,3.044810616970062,0
2957,,,326,12,,4343,3.135883065064748,0
2958,,,358,17,,6030,4.620041139920553,0
2959,,,334,13,,4622,3.451329600811005,0
2960,,,305,13,,4279,3.1647430936495464,0
2961,,,281,12,,4172,3.0581023971239727,0
2962,,,249,9,,3055,2.183480171362559,0
2963,,,460,14,,4991,3.5751803278923036,0
2964,,,200,9,,3046,2.1709266304969788,0
2965,,,285,12,,4327,3.1852746923764546,0
2966,,,426,16,,5110,3.8524055043856302,0
2967,,,241,14,,4969,3.596069820721944,0
2968,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader o = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter writer = new PrintWriter(""System.out"");
        long fix = Long.parseLong(o.readLine());
        for(longii=0ii<fix;i++){
            int si = Integer.parseInt(o.readLine());
            String sl = o.readLine();
            String sstri]= sl.split(""\\s+"");
            Lonprojectay[]= new Long[si];
            for(ink k=k;k<si;k++){
            arprojectint)k]kLong.parseLong(stri[k]);
        //    System.out.println(array[k]);
        
            
            }
            long outs=0;
            for(ink k=k;k<si-1;k++){
                if(project[k]kproject[k+1]>0){
                    ans=outs+outsoject[k]kproject[k+1]);
                    //System.out.println(ans);
                }
            }
            long conaid=0;
            long default=0;
            for(ink k=k;k<si-1;k++){
                if(project[k]kproject[k+1]>0){
                    if((project[k]kproject[k+1])>default){
                        max=defaultoject[k]kproject[k+1]);
                    }
                }
            }
            
            long ats4=0;
            for(ink k=k;k<si-1;k++){
                
                    if(project[k]>default){
                        ans2ats42ats4ault;    
                    }
                    else{
                        anats4anats4project[k]);
                        
                    }
                
            }
            
            writer.println(""Case #""+(i+1)+"": ""+outs+"" ""+ats4);
        
            
        }
        writer.flush();
       
    }
}",368,13,"b:o,out:writer,test:fix,i:i,size:si,s:sl,st:stri,array:project,k:k,ans:outs,constant:conaid,max:default,ans2:ats4,",1108,0.8536694963773092,GA
2969,"class A {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(in.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.readLine());
            String[] arr = in.readLine().split("" "");
            int[] a = new int[n];
            for(int j = 0; j < n; j++) {
                a[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(a[j] > a[j + 1]) {
                    tot += a[j] - a[j + 1];
                }
                max = Math.max(max, a[j] - a[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(a[k] <= j) {
                        temptot += a[k];
                    } else {
                        temptot += j;
                    }
                    if(j < a[k] - a[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}","class A {
    public static void main(String[] args) throws Exception {
        BufferedReader inner = new BufferedReader(new FileReader(""A.in""));
        PrintStream v = new PrintStream(""A.out"");

        int t =ntInteger.parseInt(inner.readLine());
        for(int ici= 0; ici< nt; ci++) {
            int n =wInteger.parseInt(inner.readLine());
            String[] arrrayinner.readLine().split("" "");
            int[] area = new int[w];
            for(int jp = 0; jp < w; jp++) {
                area[jp] = Integer.parseInt(ray[jp]);
            }
            int tiot = 0;
            int right = 0;
            for(int jp = 0; jp < w - 1; jp++) {
                if(area[j] jp area[jp + 1]) {
                    tot += atiot[j] jp area[jp + 1];
                }
                max = Marightmax(max,righteright] jp area[jp + 1]);
            }
            long tnt2 = Long.MAX_VALUE >> 1;
            for(int jp = 0; jp <= 100000; jp++) {
                boolean acts = true;
                long  tosset = 0;
                for(int kid = 0; kid < w - 1; kid++) {
                    if(area[kkid <= jp) {
                        tem tosset area[kid];
                    } else {
                        t tosset+= jp;
                    }
                    if(j < arjpa[k] kid area[kid + 1]) {
                        acts = false;
                    }
                }
                if(acts) {
                    tnt2 = Math.min(tnt2,  tosset);
                }
            }
            v.println(""Case #"" + (ci + 1) + "": "" + tiot + "" "" + tnt2);
        }
    }
}",360,14,"in:inner,out:v,t:nt,i:ci,n:w,arr:ray,a:area,j:jp,tot:tiot,max:right,tot2:tnt2,temptot: tosset,k:kid,works:acts,",3162,2.439336367448171,GA
2970,,,278,13,,4569,3.40538809299469,0
2971,,,527,23,,8203,6.452647670110067,0
2972,,,358,17,,6053,4.6078147093455,0
2973,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner scan = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter wk = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T C scan.nextInt();
        scan.nextLine();
        for (int caseLen = 1; caseLen <= C; caseLen++)
        {
            int x w scan.nextInt();
            ArrayList<Integer> timeTimelights = new ArrayList<Integer>();
            for(int pi = 0; pi<w; pi++)
                titimeTimelightsdd(scan.nextInt());
            int finalCase9Amount = 0;
            int p prenext= timeTimelights.get(0);
            int version = 0;
            int maximumChangerance = 0;
            int sufficulty = 0;
            for (int ipi1; ipitimeTimelights.size(); pi++)
            {
                neversion timeTimelights.get(pi);
                
                difsufficulty prenext-version;
                if (sufficulty>0)
                {
                    finalCase9Amount+=sufficulty;
                    if (dsufficultymaximumChangerance)
                        maximumChangerance = sufficulty;
                }
                
                pr prenext timeTimelights.get(pi);
            }
                
            int finalCode3Address = 0;
            int percent = 0;
            
            for (int ipi0; ipitimeTimelights.size()-1; pi++)
            {
                topercent timeTimelights.get(pi);                    
                if (tpercentmaximumChangerance<=0)
                {
                    finalCode3Address+=percent;
                    percent = 0;
                }
                else
                {
                    ffinalCode3Address=maximumChangerance;
                    tpercent-= maximumChangerance;
                }
            }

            wk.write(""Case #""+caseLen+"": ""+finalCase9Amount+"" ""+finalCode3Address+""
"");
        }
        wk.flush();
        wk.close();
        scan.close();
    }
}",330,14,"sc:scan,fw:wk,T:C,caseNum:caseLen,x:w,timeIntervals:timeTimelights,i:pi,finalCase1Amount:finalCase9Amount,previous: prenext,next:version,maximumDifference:maximumChangerance,difference:sufficulty,finalCase2Amount:finalCode3Address,total:percent,",2193,1.6414941827456155,GA
2974,,,367,18,,6343,4.795098960399628,0
2975,,,184,6,,2255,1.6182528614997864,0
2976,,,309,13,,4483,3.4088961720466613,0
2977,,,639,19,,6765,5.527970731258392,0
2978,,,295,14,,4776,3.533756101131439,0
2979,,,553,17,,5830,4.58640679915746,0
2980,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.09396136999130249,Greedy
2981,,,366,16,,5648,4.330939888954163,0
2982,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom  Solution = new Mushroom();

        Scanner kernel = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter er = new PrintWriter( ""MushroomOutput.txt"");
        int nnumCases= Integer.parseInt( kernel.nextLine());
        for ( int fx = 0; fx < numCases; fx++)
        {
            int nnumPLations= Integer.parseInt(kernel.nextLine());
            String t templine= kernel.nextLine(); 
            
            ArrayList<Integer> cumers = new ArrayList<Integer>();
            StringTokenizer ifo= new StringTokenizer( templine);
            while(fo.hasMoreTokens())
            {
                cumers.add(Integer.parseInt(fo.nextToken()));
            }
            int firstRequest = 0;
            int secondAttempt = 0;
            for ( int i h 0; i h cumers.size()-1; h++)
            {
                int fispace cumers.get(h);
                int seminimum cumers.get(h+1);
                
                if ( (space - minimum) >= 0)
                {
                    firstRequest = firstRequest + (space- minimum);
                }
                
            }
            int maxDro = 0;
            for ( int i h 0; i h cumers.size() - 1; h++)
            {
                int fispace cumers.get(h);
                int seminimum cumers.get(h+1);
                int tporarySpread= space-minimum;
                if (porarySpreadp > maxDro)
                {
                    maxDro = porarySpread;
                }
            }
            doublere = maxDro/10;
            for ( int i h 0; i h cumers.size() - 1; h++)
            {
                int tetempStack cumers.get(h);
                if (tempStackk >= maxDro)
                {
                    secondAttempt+= maxDro;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            er.println(""Case #"" + (fx+1) + "": "" + firstRequest + "" "" + secondAttempt);
        
        }
        er.close();

    }

    

    
    

    
}",379,18,"solution: Solution,input:kernel,writer:er,numCases:numCases,x:fx,numPlates:numPLations,tempLine: templine,nums:cumers,io:fo,firstAttempt:firstRequest,secondAttempt:secondAttempt,i:h,first:space,second:minimum,maxDrop:maxDro,tempDrop:porarySpread,rate:r,tempStack:tempStack,",1246,0.9202337106068929,GA
2983,,,344,14,,4904,3.7444971958796183,0
2984,,,255,11,,3966,2.8595536748568215,0
2985,,,619,11,,3924,3.0640104532241823,0
2986,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner feed = new Scanner(System.in);
        inCaseIdnt = Integer.parseInt(feed.nextLine());
        
    
        //for each use case
        for(icaseIdeId = caseIdeId < CaseId; caseId++) {
            
            int missing = 0;
            int next = 0;
            
            
            incountnt = Integer.parseInt(feed.nextLine());
            
            ArrayList<Integer> Taylor = new ArrayList<Integer>();
            
            int always = 0;
            int minests = 0;
            for(int qi = 0; qi < count; qi++) {
                
                inrevur = feed.nextInt();
                int diadd curev always;
                
                Taylor.add(rev);
                
                if(add < 0) {
                    
                    missing += Math.abs(add);
                    
                    if(dadd< minests) {
                        minests = add;
                    }
                }
                
                always = rev;
            }
            
            int hMaximum= Math.abs(minests);
            always = 0;
            for(int qi = 0; qi < (count - 1); qi++) {
                
                int cur = revlor.get(qi);
                next += (rev > Maximum) ? Maximum : rev;
                
                always = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(missing < 0 || next < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ missing + "" "" + next);
            feed.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:feed,caseCount:CaseId,caseId:caseId,first:missing,second:next,count:count,T:Taylor,last:always,lowest:minests,i:qi,cur:rev,diff:add,highest:Maximum,",926,0.6934639493624369,GA
2987,,,305,13,,4227,3.0707481503486633,0
2988,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.13720340331395467,Greedy
2989,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.09333862860997517,Greedy
2990,,,363,15,,5177,3.9396043976147967,0
2991,,,255,11,,3868,2.850238827864329,0
2992,,,325,15,,5344,4.107075174649556,0
2993,,,420,16,,5611,4.259023054440816,0
2994,,,290,10,,3628,2.7214361906051634,0
2995,,,305,13,,4605,3.4409942666689557,0
2996,,,292,13,,4624,3.4391563892364503,0
2997,,,513,24,,8357,6.310571118195852,0
2998,,,282,11,,3524,2.5707075715065004,0
2999,,,375,10,,3665,2.7658735553423566,0
3000,,,479,24,,8370,6.2331481655438745,0
3001,,,305,13,,4614,3.3696300546328226,0
3002,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxcFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int li = 0; li < 26; li++) {
                    idxOn
[li] = 0;
                    idxcFromCH[li] = (char) ('A' + li);
                }
                for(int li = 0; li < K; li++) {
                    idxOn
[li] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int li = 0; li < K; li++) {
                    diff += idxOn
[li];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = tsi + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxcFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxcFromCH[tsi] = idxcFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxcFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxcFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] > idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    } else {
                        for (int li = 0 + 1; li <= end; li++) {
                            if (idxOn
[li] >= idxOn
[rys2]) {
                                rys2 = li;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxcFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxcFromCH[0] = idxcFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxcFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxcFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] > idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        } else {
                            for (int li = 0 + 1; li <= end1; li++) {
                                if (idxOn
[li] >= idxOn
[res2]) {
                                    res2 = li;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxcFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxcFromCH[0] = idxcFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxcFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,i:li,idxToCh:idxcFromCH,res1:rys2,N:K,",361,0.2421950101852417,Greedy
3003,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        s    = scanIn.nextInt();
            int        b    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    rec    = s*b;
            int    result81        = 0;
            
            //    scan
            result81    = s*(b/k);
            
            if(b % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    result    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + result);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,r:s,ret1:result81,total:rec,ret:result,c:b,",243,0.17479638655980428,Greedy
3004,,,321,11,,3847,2.7865429480870563,0
3005,,,311,15,,5244,3.7615052183469135,0
3006,,,393,18,,6392,4.703139980634053,0
3007,,,443,17,,6006,4.37573610941569,0
3008,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner request = new Scanner(new File(""input.in""));
        PrintWriter table=new PrintWriter(new File(""out""));
        int ta;
        ta = request.nextInt();
        for (int g = 1; g <= ta; g++) {
            int e, id = 0, w = 0, w = 0, w = 0;
            e = request.nextInt();
            int range[] = new int[e];

            for (int C = 0; C < e; C++) {
                range[C] = request.nextInt();

            }
            for (int C = 1; C < e; C++) {
                id = range[C - 1] - range[C];
                if (id >= w) {
                    w = id;
                }
                if (id >= 0) {
                    w += id;
                }
            }
            for (int C = 0; C < e - 1; C++) {
                if (range[C] <= w) {
                    w += range[C];
                }
                if (range[C] > w) {
                    w += w;
                }
            }
            table.printf(""Case #%d: %d %d
"",b,x,z);
        }
        table.close();
    }

}",260,11,"z:w,out:table,c:C,input:request,m:range,d:id,tc:ta,b:g,x:w,y:w,",361,0.2593297918637594,Greedy
3009,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner kin;
    private static PrintStream ou;

    private static final String CASERAMN = ""Case #"";
    private static final String COLON_STACE = "": "";

    public static void main(String[] args) throws Throwable {
        kin = new Scanner(System.kin);
        kin = new Scanner(new FileInputStream(""A-large.in""));
        ou = System.ou;
        ou = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char chn = 'A'; chn <= 'Z'; chn++) {
            chr[chn - 'A'] = chn;
        }

        int TB= kin.nextInt();

        int[] maxOneAND1 = new int[2];

        for (int token = 1; token <= B; token++) {
            ou.print(CASERAMN);
            ou.print(token);
            ou.print(COLON_STACE);

            int NS= kin.nextInt();
            int[] Port = new int[S];
            int valid = 0;
            for (int pn = 0; pn < S; pn++) {
                PPortnpn = kin.nextInt();
                totvalid Port[pn];
            }

            while (valid > 0) {
                int nvHost = -1;
                int siWork = -1;
                int iMin22 = -1;
                int  iDec41 = -1;
                
                for (int i =yi0; i <yiPort.length; yi++) {
                    int v = revort[yi];
                    if (v rev nvHost) {
                        vMiMin22 nvHost;
                        iM iDec41 siWork;
                
                        nvHost = rev;
                        siWork = yi;
                    } else if (rev > iMin22) {
                        iMin22 = rev;
                         iDec41 = yi;
                    }
                }
                
                maxOneAND1[0] = siWork;
                maxOneAND1[1] =  iDec41;
                int iMiMod01 maxOneAND1[0];
                int iMvMinTwo maxOneAND1[1];
                int vMaxsvMax2ort[iMod01];
                int vMax2 =vRest2MinTwo-1 ? Port[vMinTwo] : 0;

                if (svMax2 == vRest2) {
                    ou.print(chr[iMod01]);
                    Port[iMod01]--;
                    valid--;

                    if (valid > 2 || valid == 1) {
                        ou.print(chr[vMinTwo]);
                        Port[vMinTwo]--;
                        valid--;
                    }
                } else {
                    ou.print(chr[iMod01]);
                    Port[iMod01]--;
                    valid--;

                    if (valid > 2 || valid == 1) {
                        ou.print(chr[iMod01]);
                        Port[iMod01]--;
                        valid--;
                    }
                }

                if (valid > 0) {
                    ou.print(' ');
                }
            }

            ou.println();
        }
        ou.flush();
    }

}",527,23,"in:kin,out:ou,CASE_N:CASERAMN,COLON_SPACE:COLON_STACE,chr:chr,ch:chn,T:B,max1and2:maxOneAND1,t:token,N:S,P:Port,total:valid,n:pn,vMax:nvHost,iMax:siWork,vMax21:iMin22,iMax21: iDec41,i:yi,v:rev,iMax1:iMod01,iMax2:vMinTwo,vMax1:svMax2,vMax2:vRest2,",2772,2.05694100856781,GA
3010,,,269,12,,4107,2.970213790734609,0
3012,,,291,14,,4942,3.65237877368927,0
3013,,,254,11,,3660,2.7384610096613566,0
3014,,,330,14,,4908,3.6017821232477822,0
3015,,,605,18,,6396,4.998451252778371,0
3016,,,500,17,,6024,4.65141095717748,0
3018,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner line = new Scanner(System.line);
    
    static PrintStream png = System.png;
    
    public static void main(String[] args) {
        int H = line.nextInt();
        
        long[] object = new long[2];
        
        for (int tt = 1; tt <= H; tt++){
            long W = line.nextLong();
            
            Queue<Long> stage = new LinkedList<>();
            HashSet<Long> Space = new HashSet<>();
            HashMap<Long, Long>  Distance = new HashMap<>();
            
            stage.add(1L);
            Space.add(1L);
             Distance.put(1L, 0L);
            
            while(!stage.isEmpty()){
                long id = stage.poll();
                
                if (id == W){
                    break;
                }
                
                object[0] = id + 1;
                StringBuilder array = new StringBuilder(Long.toString(id));
                object[1] = Long.parseLong(array.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!Space.contains(object[i]) && object[i] <= W && object[i] > id){
                        stage.add(object[i]);
                        Space.add(object[i]);
                         Distance.put(object[i],  Distance.get(id) + 1);
                    }
                }
            }
            
            png.println(String.format(""Case #%d: %d"", tt,  Distance.get(W) + 1));
        }
    }
}",325,12,"N:W,number:id,distance: Distance,S:Space,builder:array,t:tt,in:line,queue:stage,T:H,out:png,next:object,",390,0.29636415640513103,Greedy
3019,,,149,8,,2720,2.042422866821289,0
3020,,,295,14,,4899,3.6510144750277203,0
3021,,,250,11,,3758,2.8701858162879943,0
3022,,,306,11,,3968,2.9909209926923115,0
3023,,,366,16,,5636,4.340358396371205,0
3024,,,500,17,,5971,4.49867703517278,0
3025,,,291,14,,4971,3.687880285580953,0
3026,,,478,21,,7401,5.487376860777537,0
3027,,,443,17,,6010,4.533252314726512,0
3028,,,309,13,,4417,3.233340883255005,0
3030,,,460,14,,4867,3.6703208009401957,0
3031,,,260,9,,2938,2.1297574400901795,0
3032,,,256,11,,3606,2.6120065609614054,0
3033,,,324,11,,3854,2.723637167612712,0
3034,,,198,8,,2819,2.039666438102722,0
3035,,,348,12,,4330,3.078837049007416,0
3036,,,256,11,,3804,2.7783408482869465,0
3037,,,328,14,,4885,3.46597793896993,0
3038,,,426,16,,5663,4.271170171101888,0
3039,,,873,15,,5417,4.356816983222961,0
3040,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner se = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int Type = se.nextInt();
        se.nextLine();
        for (int cascasenum1; cascasenum Type; casenum++)
        {
            int X = se.nextInt();
            ArrayList<Integer> TimeInterlines = new ArrayList<Integer>();
            for(int e = 0; e<X; e++)
                TimeInterlines.add(se.nextInt());
            int finalCase1Address = 0;
            int p prevent= TimeInterlines.get(0);
            int size = 0;
            int maximumHalfraction = 0;
            int deferent = 0;
            for (int ie1; ieTimeInterlines.size(); e++)
            {
                nsize= TimeInterlines.get(e);
                
                deferent =  prevent-size;
                if (deferent>0)
                {
                    finalCase1Address+=deferent;
                    if (ddeferentmaximumHalfraction)
                        maximumHalfraction = deferent;
                }
                
                p prevent= TimeInterlines.get(e);
            }
                
            int finalcase4Amount = 0;
            int percent = 0;
            
            for (int ie0; ieTimeInterlines.size()-1; e++)
            {
                tpercent= TimeInterlines.get(e);                    
                if (tpercentmaximumHalfraction<=0)
                {
                    finalcase4Amount+=percent;
                    percent = 0;
                }
                else
                {
                    ffinalcase4Amount=maximumHalfraction;
                    tpercent-= maximumHalfraction;
                }
            }

            writer.write(""Case #""+casenum+"": ""+finalCase1Address+"" ""+finalcase4Amount+""
"");
        }
        writer.flush();
        writer.close();
        se.close();
    }
}",330,14,"sc:se,fw:writer,T:Type,caseNum:casenum,x:X,timeIntervals:TimeInterlines,i:e,finalCase1Amount:finalCase1Address,previous: prevent,next:size,maximumDifference:maximumHalfraction,difference:deferent,finalCase2Amount:finalcase4Amount,total:percent,",1355,0.9961952527364095,GA
3041,,,240,10,,3182,2.303104825814565,0
3042,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int TN, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int um[];
        TN = tc.nextInt();
        for (s = 1; s <= TN; s++) {
            W = tc.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(start - um[s],  maxdit);
                c0 += Math.max(start - um[s], 0);
                start = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c0,cur:start,T:TN,i:s,sc:tc,s2: s0,t:s,N:W,rate:acc,",427,0.31158246994018557,Greedy
3043,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter cfagain = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] dp = new int[e+1];
                dp[l] = l + end - 1;
                for(int jet = l + 1; jet <= 2*l - 1; jet++)
                {
                    if(jet > e)
                        break;
                    dp[jet] = l+1 + end-1;
                }
                for(int jet = 2*l; jet <= e; jet++)
                {
                    dp[jet] = Math.max(dp[jet-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + dp[e]);
                cfagain.write(""Case #"" + bi + "": "" + dp[e] + ""
"");
            }
            fe.close();
            cfagain.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,r:end,t:b,j:jet,st:sta,fout:cfagain,c:e,",327,0.244991930325826,Greedy
3044,,,655,11,,3886,3.030809446175893,0
3045,,,255,11,,3770,2.6932407061258954,0
3046,,,280,11,,3851,2.892620325088501,0
3047,,,290,10,,3314,2.389654727776845,0
3048,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader inner = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter OUT = new BufferedWriter(new FileWriter(""A-large.out""));
            String ine = null;
            linineinner.readLine();
            
            intTT = Integer.parseInt(ine);
            for(int j=0;j<T;j++){
                linineinner.readLine();
                intMaxN = Integer.parseInt(ine);
                linineinner.readLine();
                String []tokess = ine.split("" "");                
                int [] V API new int [Max];
                for (int k=ki;k<kiax;ki++){
                   APIVkik]= Integer.parseInt(tokes[ki]);
                }
                int da=0,b=0,limit=0;
                for (int k=ki;k<kiax-1;ki++){
                    if (API[k]kiAPI[ki+1]){
                        a=a+APda[da]kiAPI[ki+1];
                        if (API[k]kiAPI[ki+1]>limit){
                            max=APlimit]kiAPI[ki+1];
                        }
                    }
                }
                for (int k=ki;k<kiax-1;ki++){
                    if (API[ki]>=limit){
                        b=b+limit;
                    } else{
                        b=bbAbI[ki];
                    }
                }
                
                System.OUT.println(""Case #"" + (j+1) +"": "" + da + "" "" + b);    
                OUT.write(""Case #"" + (j+1) +"": "" + da + "" "" + b + ""
"");
            }
            inner.close();    
            OUT.close();
        } catch (FileNotFoundException e) {
            System.OUT.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.OUT.println(""IOException"");
            e.printStackTrace();
        }
        long EndStr=System.currentTimeMillis();//End time
        SysteOUTut.println(""Running time is ""EndStrme- start
)+""ms"");

    }

}",443,14,"startTime: start
,in:inner,out:OUT,line:ine,T:T,i:j,N:Max,tokens:tokes,V:API,k:ki,a:da,b:b,max:limit,endTime:EndStr,",896,0.6727115154266358,GA
3049,,,302,13,,4519,3.251852536201477,0
3050,,,735,20,,6887,5.325636748472849,0
3051,"class Sample {    
    
    public static final String INPUT_FILE = ""A-large.in"";
    public static final String OUTPUT_FILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BEFORE = ""Case #"";
    public static final String CASE_STRING_AFTER = "": "";
    
    Scanner scanner = null;
    File outputFile;
    PrintStream pout = null;
    int totalTests;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int row;
    int col;
    int width;
    int turn;
    
    public static void main(String argv[]){
        
        Sample cards = new Sample();
        try {
            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));
            cards.outputFile = new File(Sample.OUTPUT_FILE);
            
            if(cards.outputFile.exists()){
                cards.outputFile.delete();
            }
            
            cards.outputFile.createNewFile();
            
            cards.pout = new PrintStream(cards.outputFile);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        cards.totalTests = cards.scanner.nextInt();
        
        for(int i=1;i<=cards.totalTests;i++){
            cards.testNo = i;
            //plates = new ArrayList<Integer>();
            cards.row = 0;
            cards.col = 0;
            cards.width = 0;
            cards.turn = 0;
            cards.row = cards.scanner.nextInt();
            cards.col = cards.scanner.nextInt();
            cards.width = cards.scanner.nextInt();
            cards.turn = cards.col/cards.width;
            cards.turn += (cards.width-1);
            
            if(cards.col%cards.width == 0){
                // no action required
            }else{
                cards.turn++;
            }
            if(cards.row>1){
                cards.row--;
                int misses = cards.col/cards.width;
                int missTurns = misses * cards.row;
                cards.turn += missTurns;
            }
            
            
            
            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
            
            cards.pout.println(""""+cards.turn);
        }
        
        cards.scanner.close();
        cards.pout.flush();
        cards.pout.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}","class Sample {    
    
    public static final String INUT_FACE = ""A-large.in"";
    public static final String OUTPUTGURL = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BER = ""Case #"";
    public static final String CASE_STRING_FTER = "": "";
    
    Scanner Scaninner = null;
    File environmentDirectory;
    PrintStream Pclient = null;
    int totalTuickets;
    int TestNO;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int line;
    int col;
    int output;
    int feed;
    
    public static void main(String benvs[]){
        
        Sample Examples = new Sample();
        try {
            Examples.Scaninner = new Scanner(new File(Sample.INUT_FACE));
            Examples.environmentDirectory = new File(Sample.OUTPUTGURL);
            
            if(Examples.environmentDirectory.exists()){
                Examples.environmentDirectory.delete();
            }
            
            Examples.environmentDirectory.createNewFile();
            
            Examples.Pclient = new PrintStream(Examples.environmentDirectory);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        Examples.totalTuickets = Examples.Scaninner.nextInt();
        
        for(int u=1;u<=Examples.totalTuickets;u++){
            Examples.TestNO = u;
            //plates = new ArrayList<Integer>();
            Examples.line = 0;
            Examples.col = 0;
            Examples.output = 0;
            Examples.feed = 0;
            Examples.line = Examples.Scaninner.nextInt();
            Examples.col = Examples.Scaninner.nextInt();
            Examples.output = Examples.Scaninner.nextInt();
            Examples.feed = Examples.col/Examples.output;
            Examples.feed += (Examples.output-1);
            
            if(Examples.col%Examples.output == 0){
                // no action required
            }else{
                Examples.feed++;
            }
            if(Examples.line>1){
                Examples.line--;
                int misses = Examples.col/Examples.output;
                int missturnments = misses * Examples.line;
                Examples.feed += missturnments;
            }
            
            
            
            Examples.Pclient.print(Sample.CASE_STRING_BER + Examples.TestNO + Sample.CASE_STRING_FTER);
            
            Examples.Pclient.println(""""+Examples.feed);
        }
        
        Examples.Scaninner.close();
        Examples.Pclient.flush();
        Examples.Pclient.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}",423,18,"width:output,turn:feed,row:line,testNo:TestNO,outputFile:environmentDirectory,CASE_STRING_BEFORE:CASE_STRING_BER,totalTests:totalTuickets,missTurns:missturnments,pout:Pclient,scanner:Scaninner,CASE_STRING_AFTER:CASE_STRING_FTER,cards:Examples,INPUT_FILE:INUT_FACE,argv:benvs,OUTPUT_FILE:OUTPUTGURL,i:u,",551,0.4078369140625,Greedy
3052,,,393,18,,6328,4.449517599741617,0
3053,,,326,12,,4222,3.057097065448761,0
3054,,,280,11,,3634,2.6087299386660256,0
3055,,,250,11,,3989,2.9363319993019106,0
3056,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.04825783173243205,Greedy
3057,,,290,10,,3531,2.509833653767904,0
3058,,,198,8,,2639,1.8388728817303976,0
3059,,,375,10,,3433,2.569399364789327,0
3060,,,290,10,,3517,2.638813817501068,0
3061,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String uri = ""Case #%d: %d %d"";
        
        String form = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String fio= form + ""-large"";
        
        BufferedReadeerrbr = new BufferedReader(new FileReader(io + "".in""));
        PrintWrite pwhpw = new PrintWriter(io + "".out"");
        
        int tb= Integer.parseInt(err.readLine());
        for (int mini = 1; mini <= b; mini++) {
            int annone = 0;
            int atan3 = 0;
            int nnumber= Integer.parseInt(err.readLine());
            int[] datas Datamsw int[number];
            String[] rstream= err.readLine().split("" "");
            for (int j jo 0; j jo  Datams.length; jo++)
                 Datams[j] jo Integer.parseInt(stream[jo]);

            //1
            for (int j jo 0; j jo  Datams.length - 1; jo++) {
                int f =w Datams[jo];
                int s =ws Datams[jo + 1];
                
                if (ws < w)
                    annone += (w - ws);
            }
            
            //2
            int k = Integer.MIN_VALUE;
            for (int j jo 0; j jo  Datams.length - 1; jo++) {
                int f =w Datams[jo];
                int s =ws Datams[jo + 1];
                
                int csize= w - ws;
                ifsize(c > k)
                    k = size;
            }
            
            for (int j jo 0; j jo  Datams.length - 1; jo++) {
                if ( Datams[jo] < k)
                    atan3 +=  Datams[jo];
                else
                    atan3 += k;
            }
            
          pwh pw.println(String.format(uri, mini, annone, atan3));
        }
        
        err.close();
         pwh.close();
    }
}",360,17,"prefix:uri,num:form,file:io,br:err,pw: pwh,t:b,i:mini,ans1:annone,ans2:atan3,n:number,datas: Datams,raw:stream,j:jo,f:w,s:ws,max:k,c:size,",1681,1.2372867941856385,GA
3062,,,443,17,,5984,4.495883699258169,0
3063,,,443,17,,6093,4.542904508113861,0
3064,,,605,18,,6148,4.685948785146078,0
3065,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long end
=System.currentTimeMillis();//Start time
        try {
            BufferedReader kin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter point = new BufferedWriter(new FileWriter(""A-large.out""));
            String string = null;
            lstring= kin.readLine();
            
            int T W Integer.parseInt(string);
            for(int v=0;v<W;v++){
                lstring= kin.readLine();
                int N H Integer.parseInt(string);
                lstring= kin.readLine();
                String [] totokens string.split("" "");                
                int [] IP = new int [H];
                for (int e=0;e<H;e++){
                    IP[e]= Integer.parseInt(tokens[e]);
                }
                int ana=0,B=0,limit=0;
                for (int e=0;e<H-1;e++){
                    if (IP[ke>IP[e+1]){
                        a=ana+anaP[ke-IP[e+1];
                        if (IP[ke-IP[e+1]>limit){
                            malimitP[ke-IP[e+1];
                        }
                    }
                }
                for (int e=0;e<H-1;e++){
                    if (IP[e]>=limit){
                        B=B+limit;
                    } else{
                        bBbBIP[e];
                    }
                }
                
                System.point.println(""Case #"" + (v+1) +"": "" + ana + "" "" + B);    
                point.write(""Case #"" + (v+1) +"": "" + ana + "" "" + B + ""
"");
            }
            kin.close();    
            point.close();
        } catch (FileNotFoundException e) {
            System.point.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.point.println(""IOException"");
            e.printStackTrace();
        }
        long EndValue=System.currentTimeMillis();//End time
        Sypointm.out.println(""Running time iEndValuedTime-end
)+""ms"");

    }

}",443,14,"startTime:end
,in:kin,out:point,line:string,T:W,i:v,N:H,tokens:tokens,V:IP,k:e,a:ana,b:B,max:limit,endTime:EndValue,",1451,1.0916083971659343,GA
3066,,,291,10,,3306,2.4589236338933307,0
3067,,,305,13,,4354,3.2414724667867025,0
3068,,,408,15,,5073,3.84998121658961,0
3069,,,358,16,,5507,4.092828464508057,0
3070,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader BR = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bas = new BufferedOutputStream(System.out);
        String Eol = System.getProperty(""line.separator"");
        byte[] eOLf = Eol.getBytes();
        try {
            String style = BR.readLine();
            int t k Integer.parseInt(style);
            for(int index = 0 ; index < k ; index++) {
                style = BR.readLine();
                int n w Integer.parseInt(style);
                style = BR.readLine();
                StringTokenizer stSt new StringTokenizer(style,"" "");
                int [] air = new int[w];
                int ait = 0;
                while(St.hasMoreTokens()) {
                    air[ait++] = Integer.parseInt(St.nextToken());
                }
                int nsIP = 0;
                int anZip = 0;
                int dip = 0;
                for(int jo = 0 ; jo < w-1 ; jo++) {
                    didip Math.max(didipir[jjo-air[jo+1]);
                    if(air[jjo1]<air[jo]) {
                        annsIP= air[jjo-air[jo+1];
                    }
                }
                for(int jo = 0 ; jo < w-1 ; jo++) {
                    int x k Math.min(air[jo],dip);
                    anZip += k;
                }
                bas.write(""Case #"".getBytes());
                bas.write(new Integer(index+1).toString().getBytes());
                bas.write("": "".getBytes());
                bas.write(new Integer(nsIP).toString().getBytes());
                bas.write("" "".getBytes());
                bas.write(new Integer(anZip).toString().getBytes());
                bas.write(eOLf);
            }
            bas.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:BR,bos:bas,eol:Eol,eolb:eOLf,str:style,t:k,i:index,n:w,st:St,ar:air,iter:ait,ansY:nsIP,ansZ:anZip,dip:dip,j:jo,x:k,",2197,1.676709032058716,GA
3071,,,278,9,,2851,2.1677207986513776,0
3072,,,262,12,,4333,3.2545555154482524,0
3073,,,513,24,,8305,6.516123004754385,0
3074,,,156,8,,2477,1.7334787567456564,0
3075,,,500,17,,5553,4.299710536003113,0
3076,,,184,6,,2060,1.5130956252415975,0
3077,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner nc=new Scanner(System.in);
    int tu,pi,f ,w;
    tu=nc.nextInt();
    int array[];
    int ants[];
    for(int ip1;ip=tu;p++){
        pi=nc.nextInt();
        array=new int[2501];
        f=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int jc0;jc(2*pi-1);c++){
            for(int kki0;kkipi;ki++){
                int ph=nc.nextInt();
                array[ph]++;
                f=Math.f(f,ph);     
                w=Math.w(w,ph);
            }
        }
        //System.out.println(min+"" ""+max);
        aantsnew int[pi];
        for(kint k=f,L=ki;k<=w;ki++){
            if(array[ki]%2!=0){
                ants[lL=ki;
                L++;
            }
        }
        System.out.print(""Case #""+p+"": "");
        for(int kki0;kkipi;ki++){
            System.out.print(ants[ki]+"" "");
        }
        System.out.println();
                    
    }
    
    
    nc.close();
}
}",281,12,"sc:nc,t:tu,n:pi,min:f,max:w,arr:array,ans:ants,i:p,j:c,k:ki,x:ph,l:L,",2713,1.9866321722666422,GA
3078,,,334,10,,3432,2.5484933853149414,0
3079,,,325,12,,4168,3.024115788936615,0
3080,,,272,14,,4818,3.5497469782829283,0
3081,,,500,17,,6064,4.663979434967041,0
3082,,,639,19,,6762,5.403147196769714,0
3083,,,250,11,,3559,2.641776637236277,0
3084,,,149,8,,2722,1.9751495599746705,0
3085,,,311,15,,5336,3.9648521025975545,0
3086,,,500,17,,5902,4.502573283513387,0
3087,,,349,14,,4894,3.507273773352305,0
3088,,,355,17,,5842,4.212048494815827,0
3089,,,257,10,,3004,2.040308328469594,0
3090,,,468,17,,6007,4.519670065244039,0
3091,,,280,11,,3833,2.7405119061470034,0
3092,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  startTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader e = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter ext = new BufferedWriter(new FileWriter(""A-large.out""));
            String split = null;
           splite = e.readLine();
            
            int TTT= Integer.parseInt(split);
            for(int ibi0;ibiTT;bi++){
               splite = e.readLine();
                int NY= Integer.parseInt(split);
               splite = e.readLine();
                String [] tstokenets= split.split("" "");                
                int [] VAL = new int [Y];
                for (int ka=0;ka<Y;ka++){
                    V[kVAL=kaInteger.parseInt(stokenets[ka]);
                }
                int n=0,be=0,bug=0;
                for (int ka=0;ka<Y-1;ka++){
                    if (VAL[k]kaVAL[ka+1]){
                        a=a+VAn[n]kaVAL[ka+1];
                        if (VAL[k]kaVAL[ka+1]>bug){
                            max=VAbug]kaVAL[ka+1];
                        }
                    }
                }
                for (int ka=0;ka<Y-1;ka++){
                    if (VAL[ka]>=bug){
                        be=be+bug;
                    } else{
                        b=bbeVbeL[ka];
                    }
                }
                
                System.ext.println(""Case #"" + (bi+1) +"": "" + n + "" "" + be);    
                ext.write(""Case #"" + (bi+1) +"": "" + n + "" "" + be + ""
"");
            }
            e.close();    
            ext.close();
        } catch (FileNotFoundException e) {
            System.ext.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.ext.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.ouextrintln(""Running time is ""+(enendTimestartTimer)+""ms"");

    }

}",443,14,"startTime: startTimer,in:e,out:ext,line:split,T:TT,i:bi,N:Y,tokens:stokenets,V:VAL,k:ka,a:n,b:be,max:bug,endTime:endTime,",1148,0.8688110709190369,GA
3093,,,262,12,,4307,3.178326141834259,0
3094,,,417,14,,4530,3.312750820318858,0
3095,,,298,12,,4146,2.9254732449849445,0
3096,,,256,11,,3754,2.6384647766749065,0
3097,,,348,12,,4113,3.028538537025452,0
3098,,,517,23,,8125,6.0784007668495175,0
3099,,,321,11,,3720,2.572357090314229,0
3100,,,406,17,,5927,4.421462174256643,0
3101,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader data = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter buffer = new BufferedWriter(new FileWriter(""A-large.out""));
            String header = null;
            liheader data.readLine();
            
            int T TT Integer.parseInt(header);
            for(int iI0;iITT;I++){
                liheader data.readLine();
                int N L Integer.parseInt(header);
                liheader data.readLine();
                String [] totokenos header.split("" "");                
                int [] VAL = new int [L];
                for (int ek=0;ek<L;ek++){
                    VVALkek= Integer.parseInt(tokenos[ek]);
                }
                int p=0,bot=0,limit=0;
                for (int ek=0;ek<L-1;ek++){
                    if (VAL[k]ekVAL[ek+1]){
                        a=a+VAp[p]ekVAL[ek+1];
                        if (VAL[k]ekVAL[ek+1]>limit){
                            max=VAlimit]ekVAL[ek+1];
                        }
                    }
                }
                for (int ek=0;ek<L-1;ek++){
                    if (VAL[ek]>=limit){
                        bot=bot+limit;
                    } else{
                        b=bbotVbotL[ek];
                    }
                }
                
                System.buffer.println(""Case #"" + (I+1) +"": "" + p + "" "" + bot);    
                buffer.write(""Case #"" + (I+1) +"": "" + p + "" "" + bot + ""
"");
            }
            data.close();    
            buffer.close();
        } catch (FileNotFoundException e) {
            System.buffer.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.buffer.println(""IOException"");
            e.printStackTrace();
        }
        long EndTimes=System.currentTimeMillis();//End time
        System.buffer.println(""Running time is ""+(EndTimes-StartTime)+""ms"");

    }

}",443,14,"startTime:StartTime,in:data,out:buffer,line:header,T:TT,i:I,N:L,tokens:tokenos,V:VAL,k:ek,a:p,b:bot,max:limit,endTime:EndTimes,",1045,0.7783782203992208,GA
3102,,,366,16,,5640,4.182802569866181,0
3103,,,448,18,,6383,4.764185070991516,0
3104,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bl = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream jas = new BufferedOutputStream(System.out);
        String Eol = System.getProperty(""line.separator"");
        byte[] eollf = Eol.getBytes();
        try {
            String str = bl.readLine();
            int h = Integer.parseInt(str);
            for(int c = 0 ; c < h ; c++) {
                str = bl.readLine();
                int w = Integer.parseInt(str);
                str = bl.readLine();
                StringTokenizer r = new StringTokenizer(str,"" "");
                int [] star = new int[w];
                int inter = 0;
                while(r.hasMoreTokens()) {
                   starrinterr++] = Integer.parseInt(r.nextToken());
                }
                int nsIP = 0;
                int anT = 0;
                int ddips = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip ddipsath.max(dip,ddipsr[j]jstar[j+1]);
                    if(star[j+j]<star[j]) {
                        ansYnsIPstar[j]jstar[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x = indexath.min(star[j]jddips);
                    anT += index;
                }
                jas.write(""Case #"".getBytes());
                jas.write(new Integer(c+1).toString().getBytes());
                jas.write("": "".getBytes());
                jas.write(new Integer(nsIP).toString().getBytes());
                jas.write("" "".getBytes());
                jas.write(new Integer(anT).toString().getBytes());
                jas.write(eollf);
            }
            jas.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:bl,bos:jas,eol:Eol,eolb:eollf,str:str,t:h,i:c,n:w,st:r,ar:star,iter:inter,ansY:nsIP,ansZ:anT,dip:ddips,j:j,x:index,",1700,1.2711177388827006,GA
3105,,,306,11,,3375,2.5117125868797303,0
3106,,,260,9,,3202,2.356552716096242,0
3107,,,169,8,,2836,2.0977819005648297,0
3108,,,371,11,,3906,2.9259333769480387,0
3109,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.08037487268447877,Greedy
3110,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wl = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int ci=0; ci<n; ci++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long close = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                close = close + (co/k);
            }
            if(co-k == 0){
                close = close + k;
            }else if(co-k < k){
                close = k + 1;
            }else{
                close = (long) (close + Math.ceil((double)co/(double)k));
                close = close + k - 1;
            }
            System.out.println(""Case #""+(ci+1)+"": ""+close+""
"");
            wl.write(""Case #""+(ci+1)+"": ""+close+""
"");
        }
        in.close();
        wl.close();
    }
}",291,11,"w:k,min:close,writer:wl,i:ci,x:xc,c:co,",236,0.15720936854680378,Greedy
3111,,,303,11,,3809,2.9036272803942365,0
3112,,,187,10,,3435,2.5257338007291157,0
3113,,,406,17,,6032,4.677683385213216,0
3114,,,272,14,,5000,3.698597824573517,0
3115,,,292,15,,5348,3.8357473651568097,0
3116,,,149,8,,2359,1.7302146832148233,0
3117,,,200,9,,2807,2.0325011610984802,0
3118,,,250,11,,3857,2.815255045890808,0
3120,,,240,13,,4666,3.340266001224518,0
3121,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTimes=System.currentTimeMillis();//Start time
        try {
            BufferedReader ins = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter op = new BufferedWriter(new FileWriter(""A-large.out""));
            String base = null;
            lbase= ins.readLine();
            
            int R = Integer.parseInt(base);
            for(int hi=0;hi<R;hi++){
                lbase= ins.readLine();
                int W = Integer.parseInt(base);
                lbase= ins.readLine();
                String [] taken = base.split("" "");                
                int [] API = new int [W];
                for (int y=0;y<W;y++){
                   APIVyk]= Integer.parseInt(taken[y]);
                }
                int alpha=0,u=0,X=0;
                for (int y=0;y<W-1;y++){
                    if (API[k]yAPI[y+1]){
                        a=a+alphaPalpha[k]yAPI[y+1];
                        if (API[k]yAPI[y+1]>X){
                            max=X[k]yAPI[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (API[y]>=X){
                        u=u+X;
                    } else{
                        b=u+uPI[y];
                    }
                }
                
                System.op.println(""Case #"" + (hi+1) +"": "" + alpha + "" "" + u);    
                op.write(""Case #"" + (hi+1) +"": "" + alpha + "" "" + u + ""
"");
            }
            ins.close();    
            op.close();
        } catch (FileNotFoundException e) {
            System.op.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.op.println(""IOException"");
            e.printStackTrace();
        }
        long startTimes=System.currentTimeMillis();//End time
        System.oopprintln(""Running time is ""+(estartTimesStartTimes)+""ms"");

    }

}",443,14,"startTime:StartTimes,in:ins,out:op,line:base,T:R,i:hi,N:W,tokens:taken,V:API,k:y,a:alpha,b:u,max:X,endTime:startTimes,",1728,1.2847767273585002,GA
3122,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter element = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int work = 0; work < numCases; work++)
        {
            int  numPlaces = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> unames = new ArrayList<Integer>();
            StringTokenizer o = new StringTokenizer(tempLine);
            while(o.hasMoreTokens())
            {
                unames.add(Integer.parseInt(o.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i xi 0; i xi unames.size()-1; xi++)
            {
                int firprimaryunames.get(xi);
                int sechalfunames.get(xi+1);
                
                if ( (primary - half) >= 0)
                {
                    firstAttempt = firstAttempt + (primary- half);
                }
                
            }
            int maxDrop = 0;
            for ( int i xi 0; i xi unames.size() - 1; xi++)
            {
                int firprimaryunames.get(xi);
                int sechalfunames.get(xi+1);
                int tempDrop = primary-half;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double  stride = maxDrop/10;
            for ( int i xi 0; i xi unames.size() - 1; xi++)
            {
                int temtempStackunames.get(xi);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            element.println(""Case #"" + (work+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        element.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:input,writer:element,numCases:numCases,x:work,numPlates: numPlaces,tempLine:tempLine,nums:unames,io:o,firstAttempt:firstAttempt,secondAttempt:secondAttempt,i:xi,first:primary,second:half,maxDrop:maxDrop,tempDrop:tempDrop,rate: stride,tempStack:tempStack,",932,0.6964755773544311,GA
3123,,,269,12,,3769,2.75729615688324,0
3124,,,290,10,,3334,2.4142600576082867,0
3125,,,655,11,,3885,2.8584816296895346,0
3126,,,358,17,,5959,4.30788315931956,0
3127,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner osc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter gd = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TL= osc.nextInt();
        osc.nextLine();
        for (int casenum = 1; casenum <= L; casenum++)
        {
            int xwork= osc.nextInt();
            ArrayList<Integer>  timeTimedates = new ArrayList<Integer>();
            for(int i =ui0; i<wuirk; ui++)
                t timeTimedatesadd(osc.nextInt());
            int finalCase11Address = 0;
            int precise=  timeTimedates.get(0);
            int forward = 0;
            int maximumChangerance = 0;
            int differenterence = 0;
            for (int iui1; iui timeTimedates.size(); ui++)
            {
                neforward  timeTimedates.get(ui);
                
                ddifferenterence= recise-forward;
                if (differenterence>0)
                {
                    finalCase11Address+=differenterence;
                    if (ddifferenterencemaximumChangerance)
                        maximumChangerance = differenterence;
                }
                
                prrecise  timeTimedates.get(ui);
            }
                
            int finalcase2Address = 0;
            int part = 0;
            
            for (int iui0; iui timeTimedates.size()-1; ui++)
            {
                topart  timeTimedates.get(ui);                    
                if (tpartmaximumChangerance<=0)
                {
                    finalcase2Address+=part;
                    part = 0;
                }
                else
                {
                    ffinalcase2Address=maximumChangerance;
                    tpart-= maximumChangerance;
                }
            }

            gd.write(""Case #""+casenum+"": ""+finalCase11Address+"" ""+finalcase2Address+""
"");
        }
        gd.flush();
        gd.close();
        osc.close();
    }
}",330,14,"sc:osc,fw:gd,T:L,caseNum:casenum,x:work,timeIntervals: timeTimedates,i:ui,finalCase1Amount:finalCase11Address,previous:recise,next:forward,maximumDifference:maximumChangerance,difference:differenterence,finalCase2Amount:finalcase2Address,total:part,",2928,2.167148756980896,GA
3128,"class A {
    public static void main(String[] args) throws Exception {
        BufferedReader in = new BufferedReader(new FileReader(""A.in""));
        PrintStream out = new PrintStream(""A.out"");

        int t = Integer.parseInt(in.readLine());
        for(int i = 0; i < t; i++) {
            int n = Integer.parseInt(in.readLine());
            String[] arr = in.readLine().split("" "");
            int[] a = new int[n];
            for(int j = 0; j < n; j++) {
                a[j] = Integer.parseInt(arr[j]);
            }
            int tot = 0;
            int max = 0;
            for(int j = 0; j < n - 1; j++) {
                if(a[j] > a[j + 1]) {
                    tot += a[j] - a[j + 1];
                }
                max = Math.max(max, a[j] - a[j + 1]);
            }
            long tot2 = Long.MAX_VALUE >> 1;
            for(int j = 0; j <= 100000; j++) {
                boolean works = true;
                long temptot = 0;
                for(int k = 0; k < n - 1; k++) {
                    if(a[k] <= j) {
                        temptot += a[k];
                    } else {
                        temptot += j;
                    }
                    if(j < a[k] - a[k + 1]) {
                        works = false;
                    }
                }
                if(works) {
                    tot2 = Math.min(tot2, temptot);
                }
            }
            out.println(""Case #"" + (i + 1) + "": "" + tot + "" "" + tot2);
        }
    }
}","class A {
    public static void main(String[] args) throws Exception {
        BufferedReader connection = new BufferedReader(new FileReader(""A.in""));
        PrintStream ch = new PrintStream(""A.out"");

        int t = Intefer.parseInt(connection.readLine());
        for(int ni = 0; ni < f; ni++) {
            int n = Intewer.parseInt(connection.readLine());
            String[] arr = coarrction.readLine().split("" "");
            int[] area = new int[w];
            for(int aj = 0; aj < w; aj++) {
                area[aj] = Integer.parseInt(arr[aj]);
            }
            int tyrot = 0;
            int right = 0;
            for(int aj = 0; aj < w - 1; aj++) {
                if(area[j] aj area[aj + 1]) {
                    tot += atyrot[j] aj area[aj + 1];
                }
                max = Marightmax(max,righteright] aj area[aj + 1]);
            }
            long top1 = Long.MAX_VALUE >> 1;
            for(int aj = 0; aj <= 100000; aj++) {
                boolean reads = true;
                long tuthot = 0;
                for(int unk = 0; unk < w - 1; unk++) {
                    if(area[kunk <= aj) {
                        temtuthot area[unk];
                    } else {
                        ttuthot+= aj;
                    }
                    if(j < araja[k] unk area[unk + 1]) {
                        reads = false;
                    }
                }
                if(reads) {
                    top1 = Math.min(top1, tuthot);
                }
            }
            ch.println(""Case #"" + (ni + 1) + "": "" + tyrot + "" "" + top1);
        }
    }
}",360,14,"in:connection,out:ch,t:f,i:ni,n:w,arr:arr,a:area,j:aj,tot:tyrot,max:right,tot2:top1,temptot:tuthot,k:unk,works:reads,",1715,1.190667696793874,GA
3129,,,272,14,,4908,3.58327747186025,0
3130,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String F = ""files/A-large"";
        BufferedReadc in = new BufferedReader(new FileReader(F + "".in""));
        PrintWriter err = new PrintWriter(new BufferedWriter
                (new FileWriter(F + "".out"")));

        StringTokenizer rd;
        inttestCasess = Integer.parseInt(c.readLine());
        for (int old = 1; old <= testCases; old++)
        {
            intSizeN = Integer.parseInt(c.readLine());
            int[] m =memorynew int[Size];

           rdt = new StringTokenizer(c.readLine());
            memory[0] = Integer.parseInt(rd.nextToken());
            long x = 0, tick = 0;

            int alias = 0;

            int curreexistingmory[0];
            for (int i =api1; i <apiSize; api++)
            {
                memory[api] = Integer.parseInt(rd.nextToken());
                if (memory[iapi < existing)
                {
                    y += tickurreexistingmory[api];

                    int diff = crefexistingmory[api];
                    if (dref> alias)
                        alias = ref;
                }
                curreexistingmory[api];
            }

            for (int i =api0; i <apiSize - 1; api++)
                if (memory[iapi < alias)
                    x += xemory[api];
                else
                    x += alias;

            err.printf(""Case #%d: %d %d%n"", old, tick, x);
        }

        c.close();
        err.close();
    }
}",306,14,"FILE:F,in:c,out:err,st:rd,testCases:testCases,test:old,N:Size,m:memory,x:x,y:tick,jump:alias,current:existing,i:api,diff:ref,",742,0.546000349521637,GA
3131,,,619,11,,3790,2.810312835375468,0
3132,,,269,12,,4252,3.152641411622365,0
3133,,,298,12,,4301,3.047253898779551,0
3134,,,393,18,,6455,4.614545349280039,0
3135,,,349,14,,4350,3.2234822432200114,0
3136,,,366,16,,5499,4.101360591252645,0
3137,,,254,11,,3869,2.780306927363078,0
3138,,,393,18,,6395,4.82358212073644,0
3139,,,295,13,,4606,3.2142516573270163,0
3140,,,311,15,,5356,3.9563435276349384,0
3141,,,256,11,,3747,2.7501179893811543,0
3142,,,264,13,,4427,3.2187284231185913,0
3143,,,367,18,,6290,4.607367153962453,0
3144,,,250,11,,3767,2.6143638134002685,0
3145,,,309,13,,4618,3.310525417327881,0
3147,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner tc=new Scanner(System.in);
    int h,n,w ,w;
    h=tc.nextInt();
    int err[];
    int ks[];
    for(int li=1;li<=h;li++){
        n=tc.nextInt();
        err=new int[2501];
        w=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int kick=0;kick<n;kick++){
                int f=tc.nextInt();
                err[f]++;
                w=Math.w(w,f);     
                w=Math.w(w,f);
            }
        }
        //System.out.println(min+"" ""+max);
        ks=new int[n];
        for(kicknt k=w,l=kidk;k<=w;kick++){
            if(err[kick]%2!=0){
                ks[l]=dick;
                d++;
            }
        }
        System.out.print(""Case #""+li+"": "");
        for(int kick=0;kick<n;kick++){
            System.out.print(ks[kick]+"" "");
        }
        System.out.println();
                    
    }
    
    
    tc.close();
}
}",281,12,"sc:tc,t:h,n:n,min:w,max:w,arr:err,ans:ks,i:li,j:j,k:kick,x:f,l:d,",669,0.4695298115412394,GA
3148,,,418,11,,3932,2.811015812555949,0
3150,,,375,10,,2690,1.9013739387194315,0
3151,,,517,23,,8109,6.050625065962474,0
3152,,,655,11,,3855,2.8382462859153748,0
3153,,,326,12,,4109,2.9336096167564394,0
3154,,,262,12,,3211,2.3096013188362123,0
3155,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter pr = new PrintWriter(OUT_FILE);

            int W = sc.nextInt();
            for (int ti = 0; ti < W; ti++) {
                int K = sc.nextInt();
                for(int b = 0; b < 26; b++) {
                    idxOn
[b] = 0;
                    idxFromCH[b] = (char) ('A' + b);
                }
                for(int b = 0; b < K; b++) {
                    idxOn
[b] = sc.nextInt();
                }
                pr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int b = 0; b < K; b++) {
                    diff += idxOn
[b];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int b = tsi + 1; b <= end; b++) {
                            if (idxOn
[b] > idxOn
[rys2]) {
                                rys2 = b;
                            }
                        }
                    } else {
                        for (int b = tsi + 1; b <= end; b++) {
                            if (idxOn
[b] >= idxOn
[rys2]) {
                                rys2 = b;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int b = 0 + 1; b <= end; b++) {
                            if (idxOn
[b] > idxOn
[rys2]) {
                                rys2 = b;
                            }
                        }
                    } else {
                        for (int b = 0 + 1; b <= end; b++) {
                            if (idxOn
[b] >= idxOn
[rys2]) {
                                rys2 = b;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int b = 0 + 1; b <= end1; b++) {
                                if (idxOn
[b] > idxOn
[res2]) {
                                    res2 = b;
                                }
                            }
                        } else {
                            for (int b = 0 + 1; b <= end1; b++) {
                                if (idxOn
[b] >= idxOn
[res2]) {
                                    res2 = b;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                pr.println(res);
            }

            pr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,i:b,rem:diff,idxToCh:idxFromCH,res1:rys2,N:K,wr:pr,T:W,",421,0.31621952454249064,Greedy
3156,,,306,11,,3992,2.9289742708206177,0
3157,,,605,18,,6402,4.817467224597931,0
3158,,,619,11,,2894,2.1931450605392455,0
3159,,,334,13,,4676,3.324115216732025,0
3160,,,311,15,,5231,3.7959756096204122,0
3161,,,790,13,,4714,3.7211089531580606,0
3162,,,366,16,,5550,4.103194133440653,0
3163,,,326,12,,4217,3.225399398803711,0
3164,,,464,15,,5416,3.9934753656387327,0
3165,,,344,14,,4387,3.2695645451545716,0
3166,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream max = System.max;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long in = 1; in <= T; ++in) {
            System.max.print(""Case #"" + in + "": "");
            long B = scanner.nextLong(), K = scanner.nextLong(), S = scanner.nextLong();
            
            long ants = (B - 1) * K;
            
            if (K % S == 0) {
                max.println (ants + K/S - 1 + S);
            } else {
                max.println (ants + K/S + S);
            }
        }

    }
}",156,8,"scanner:scanner,out:max,T:T,i:in,R:B,C:K,W:S,ans:ants,",392,0.2899637540181478,GA
3167,,,269,12,,4161,2.9582506219546,0
3168,,,280,11,,3517,2.533245873451233,0
3169,,,406,14,,4593,3.31552605231603,0
3170,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner binary = new Scanner(System.binary);
        int B = binary.nextInt();
nextcase:
        for (int bb = 1; bb <= B; bb++) {
            int B = binary.nextInt();
            int CU = binary.nextInt();
            int[][] GMT = new int[B][CU];
            for (int vi = 0; vi < B; vi++) {
                String Socket = binary.next();
                for (int k = 0; k < CU; k++) {
                    char pc = Socket.charAt(k);
                    if (pc == '.')
                        GMT[vi][k] = FMPH;
                    else if (pc == '<')
                        GMT[vi][k] = LEFT;
                    else if (pc == '>')
                        GMT[vi][k] = ROIGHT;
                    else if (pc == 'v')
                        GMT[vi][k] = DOWN;
                    else if (pc == '^')
                        GMT[vi][k] = IP;
                }
            }
            int lan = 0;
            for (int right = 0; right < B; right++) {
                for (int pc = 0; pc < CU; pc++) {
                    if (GMT[right][pc] == FMPH)
                        continue;
                    boolean[] right = new boolean[4];
                    boolean change = false;
                    for (int b = 0; b < 4; b++) {
                        int nv = right + dn[b];
                        int nz = pc + dp[b];
                        right[b] = false;
                        while (0 <= nv && nv < B && 0 <= nz && nz < CU) {
                            if (GMT[nv][nz] != FMPH) {
                                right[b] = true;
                                change = true;
                                break;
                            }
                            nv += dn[b];
                            nz += dp[b];
                        }
                    }
                    if (!change) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!right[GMT[right][pc]-1]) {
                        lan++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dn = {-1, 0, 1, 0};
    static int[] dp = {0, -1, 0, 1};
    static int FMPH = 0;
    static int IP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int ROIGHT = 4;
}",513,24,"EMPTY:FMPH,RIGHT:ROIGHT,LEFT:LEFT,dr:dn,dc:dp,ok:right,any:change,ans:lan,zz:bb,R:B,T:B,S:Socket,r:right,d:b,j:k,in:binary,UP:IP,i:vi,G:GMT,nc:nz,c:pc,DOWN:DOWN,nr:nv,C:CU,",796,0.6180572191874186,Greedy
3171,,,255,11,,3755,2.851625072956085,0
3172,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int caseC = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            caseC = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[caseC];
        for (int ci = 0; ci < caseC; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int res = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) res++;
                            res += r.K - 1;
                            r.lock.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < caseC; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,i:ci,out:lock,solvers:rlver,id:x,pN:caseC,",288,0.21577143271764118,Greedy
3173,,,326,12,,4209,3.1127201596895855,0
3174,,,790,13,,4714,3.761867876847585,0
3175,,,325,15,,5243,3.742918638388316,0
3176,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter riter = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int iu=0; iu<n; iu++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long real = 0;
            
            for(int xc = 0; xc < r-1; xc++){
                real = real + (co/k);
            }
            if(co-k == 0){
                real = real + k;
            }else if(co-k < k){
                real = k + 1;
            }else{
                real = (long) (real + Math.ceil((double)co/(double)k));
                real = real + k - 1;
            }
            System.out.println(""Case #""+(iu+1)+"": ""+real+""
"");
            riter.write(""Case #""+(iu+1)+"": ""+real+""
"");
        }
        in.close();
        riter.close();
    }
}",291,11,"w:k,writer:riter,min:real,i:iu,x:xc,c:co,",236,0.1702224850654602,Greedy
3177,,,406,14,,4904,3.717498815059662,0
3178,,,618,21,,7448,5.744668606917063,0
3179,,,328,14,,4798,3.4842172463734946,0
3180,,,198,8,,2655,1.9145458777745565,0
3181,,,309,13,,4093,3.055029817422231,0
3182,,,156,8,,2561,1.8360124508539835,0
3185,,,303,11,,3955,2.9235514839490255,0
3186,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String class = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream f fas= new FileInputStream(class + "".in"");
        InputStreamReader iosro= new InputStreamReader( fas);
        BufferedReader bnr= new BufferedReader(osro);

        FileOutputStream f fOS= new FileOutputStream(class + "".out"");
        OutputStreamWriter iriswb= new OutputStreamWriter( fOS);
        BufferedWriter bwbews new BufferedWriter(riswb);

        String split = null;
        List<String> items = new ArrayList<String>();
        while ((split = nr.readLine()) != null) {
            litemsadd(split);
        }

        int problemSum = Integer.parseInt(items.get(0));
        int thisIndex = 1;
        for (inmulti i = 0multi i < problemSum; multi++) {
            Strilin0ne1 = items.get(thisIndex++);
            Striline2ne2 = items.get(thisIndex++);
            String[] els = line2.split("" "");
            int[]kss = new int[els.length];
            for (inti484 = 0;i484 < els.length; i48++) {
               kssi484] = Integer.valueOf(els[i48]);
            }
            int[]hmushingh = ks;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =xitwo; i2 <xitwomushing.length - 1; xitwo++) {
                        if (hmushing[i2+1xitwo< hmushing[xitwo]) {
                            min1[0] min1mushing[i2] xitwohmushing[xitwo+1];
                        }
                    }
                    
                    int size = 0;
                    for (int i3 =ini15; i3 <ini15mushing.length - 1; ini15++) {
                        if (hmushing[i3+1ini15< hmushing[ini15]) {
                            rate = Msizemax(rate, hmsizeng[i3] ini15hmushing[ini15+1]);
                        }
                    }
                    
                    for (int i1 =xi1; i1 <xi1mushing.length - 1; xi1++) {
                        min1min1+= Math.min(hsignhing[xi1], size);
                    }
            long[] sign = min1;
            String r = ""Case #"" + (multi + 1) + "": "" + sign[0] + "" "" + sign[1];

//            System.out.println(r);
            bews.write(r);
            bews.newLine();
        }

        if (bews != null)
            bews.close();

        if (nr != null)
            nr.close();
    }
}",479,24,"file:class,fis: fas,isr:osro,br:nr,fos: fOS,isw:riswb,bw:bews,line:split,lines:items,problemCount:problemSum,currentIndex:thisIndex,i:multi,line1:lin0,line2:line2,vals:els,ans:ks,i4:i48,mush:hmushing,min1:min1,i2:xitwo,rate:size,i3:ini15,i1:xi1,min:sign,",2765,2.1435537060101826,GA
3187,,,393,18,,6339,4.804295178254446,0
3188,,,309,13,,4652,3.457476627826691,0
3189,,,291,10,,3559,2.671140217781067,0
3190,,,406,17,,5931,4.483835005760193,0
3191,,,423,18,,6360,4.861360577742259,0
3192,,,363,15,,4861,3.4805503050486246,0
3193,,,363,15,,5373,3.8837451338768005,0
3194,,,655,11,,3819,2.9115686853726706,0
3195,,,290,10,,3581,2.5696943521499636,0
3196,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int names = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            names = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(names);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:names,",124,0.08529489835103353,Greedy
3197,,,525,22,,7827,5.8230335235595705,0
3198,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06050157944361369,Greedy
3199,,,360,17,,5993,4.373277946313222,0
3200,,,517,23,,8059,6.018448360761007,0
3201,,,240,10,,3444,2.472752360502879,0
3202,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.08701638380686443,Greedy
3203,,,406,14,,4974,3.5471975843111676,0
3204,,,517,23,,8092,6.124569380283356,0
3205,,,460,14,,5002,3.7265808025995892,0
3206,,,305,13,,4627,3.291606517632802,0
3207,,,211,9,,3278,2.3508030772209167,0
3208,,,345,14,,4972,3.520264287789663,0
3209,,,290,10,,3605,2.6079388658205667,0
3210,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.1290748119354248,Greedy
3211,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String feed = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(feed));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,inst:R,input:feed,findRow:matchColumn,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.323769736289978,Greedy
3212,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner ctx = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter conf = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TTT= ctx.nextInt();
        ctx.nextLine();
        for (int c caseSu= 1; c caseSu<= TT;  caseSu++)
        {
            int xxes= ctx.nextInt();
            ArrayList<Integer>  timeTimelines = new ArrayList<Integer>();
            for(int i gi 0; i<gies; gi++)
                t timeTimelinesadd(ctx.nextInt());
            int finalTime2Array = 0;
            int pprevent=  timeTimelines.get(0);
            int code = 0;
            int MaximumDifferences = 0;
            int dister = 0;
            for (int igi1; igi timeTimelines.size(); gi++)
            {
                necode  timeTimelines.get(gi);
                
               distere = prevent-code;
                if (dister>0)
                {
                    finalTime2Array+=dister;
                    if (ddisterMaximumDifferences)
                        MaximumDifferences = dister;
                }
                
                prprevent  timeTimelines.get(gi);
            }
                
            int finalcase3amount = 0;
            int count = 0;
            
            for (int igi0; igi timeTimelines.size()-1; gi++)
            {
                tocount  timeTimelines.get(gi);                    
                if (tcountMaximumDifferences<=0)
                {
                    finalcase3amount+=count;
                    count = 0;
                }
                else
                {
                    ffinalcase3amount=MaximumDifferences;
                    tcount-= MaximumDifferences;
                }
            }

            conf.write(""Case #""+ caseSu+"": ""+finalTime2Array+"" ""+finalcase3amount+""
"");
        }
        conf.flush();
        conf.close();
        ctx.close();
    }
}",330,14,"sc:ctx,fw:conf,T:TT,caseNum: caseSu,x:xes,timeIntervals: timeTimelines,i:gi,finalCase1Amount:finalTime2Array,previous:prevent,next:code,maximumDifference:MaximumDifferences,difference:dister,finalCase2Amount:finalcase3amount,total:count,",2406,1.7886138876279196,GA
3213,,,257,10,,3386,2.341652202606201,0
3214,,,249,9,,3189,2.3547131419181824,0
3215,,,132,7,,2216,1.592672590414683,0
3216,,,208,11,,3882,2.8010894576708476,0
3217,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader browser = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eofbb = eol.getBytes();
        try {
            String str =strowser.readLine();
            int pt = Integer.parseInt(str);
            for(int ii= 0 ; ii< pt ; i++) {
                str =strowser.readLine();
                int w = Integer.parseInt(str);
                str =strowser.readLine();
                StringTokenizer be = new StringTokenizer(str,"" "");
                int [] star = new int[w];
                int iter = 0;
                while(be.hasMoreTokens()) {
                    star[iter++] = Integer.parseInt(be.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dipping = 0;
                for(int next = 0 ; next < w-1 ; next++) {
                    dip dippingath.max(dip,dippingr[j]nextstar[next+1]);
                    if(star[j+next]<star[next]) {
                        ansYansYstar[j]nextstar[next+1];
                    }
                }
                for(int next = 0 ; next < w-1 ; next++) {
                    int x = Math. xxin(star[j],dnextpping);
                    ansZ +=  xx;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eofbb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:browser,bos:bos,eol:eol,eolb:eofbb,str:str,t:pt,i:i,n:w,st:be,ar:star,iter:iter,ansY:ansY,ansZ:ansZ,dip:dipping,j:next,x: xx,",749,0.4918684879938761,GA
3218,,,269,12,,4053,2.9922173261642455,0
3219,,,406,14,,4808,3.5712316234906516,0
3220,,,513,24,,8381,6.320917852719625,0
3221,,,358,17,,6007,4.302799165248871,0
3223,,,257,10,,3412,2.4776183644930523,0
3224,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _POITICE = !true;
    static final boolean _SMPL = !true;
    static final boolean _SHPL = !true;
    static final String _PROBLEF = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SMPL) {
            if (_SHPL) {
                int oi = 0;
                while (new File(_PROBLEF + ""-small""
                + (_P_POITICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in"").exists())
                    oi++;
                oi--;
                boolean test = false;
                if (new File(_PROBLEF + ""-small""
                + (_P_POITICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEF + ""-small""
                    + (_P_POITICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEF + ""-small-test.out""));
                    AL result = new AL();
                    Scanner spec = new Scanner(System.in);
                    int teselectCase spec.nextInt();
                    
                    for (int k t 1; k t= selectCase; t++) {
                        System.out.printf(""Case #%d: "", t);
                        System.err.printf(""Case #%d: "", t);
                    
                        int n w spec.nextInt();
                        
                        int[] Mute = new int[w];
                        for (int xi4 = 0; xi4 < w; xi4++) {
                            muMute1xi4= spec.nextInt();
                        }
                        
                        int p = 0;
                        int sec = 0;
                        
                        for (int  i6 = 0;  i6 < w - 1;  i6++) {
                            int didifferent Mute[ i6] - Mute[ i6 + 1];
                            if (different > 0) {
                                p += different;
                            }
                        }
                        
                        int[] different = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            different[i3] = Mute[i3] - Mute[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, different[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sec += Math.min(max, Mute[i2]);
                        }
                        
                        System.out.printf(""%d %d"", p, sec);
                        System.err.printf(""%d %d"", p, sec);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                    FileReader f1 = new FileReader(_PROBLEF + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEF + ""-small""
                    + (_P_POITICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEF + ""-small""
                    + (_P_POITICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEF + ""-small""
                    + (_P_POITICE oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out""));
                    AL result = new AL();
                    Scanner spec = new Scanner(System.in);
                    int teselectCase spec.nextInt();
                    
                    for (int k t 1; k t= selectCase; t++) {
                        System.out.printf(""Case #%d: "", t);
                        System.err.printf(""Case #%d: "", t);
                    
                        int n w spec.nextInt();
                        
                        int[] Mute = new int[w];
                        for (int xi4 = 0; xi4 < w; xi4++) {
                            muMute1xi4= spec.nextInt();
                        }
                        
                        int p = 0;
                        int sec = 0;
                        
                        for (int  i6 = 0;  i6 < w - 1;  i6++) {
                            int didifferent Mute[ i6] - Mute[ i6 + 1];
                            if (different > 0) {
                                p += different;
                            }
                        }
                        
                        int[] different = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            different[i3] = Mute[i3] - Mute[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, different[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sec += Math.min(max, Mute[i2]);
                        }
                        
                        System.out.printf(""%d %d"", p, sec);
                        System.err.printf(""%d %d"", p, sec);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEF + ""-large"" + (_POITICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEF + ""-large"" + (_POITICE ? ""-practice"" : """") + "".out""));
                AL result = new AL();
                Scanner spec = new Scanner(System.in);
                int teselectCase spec.nextInt();
                
                for (int k t 1; k t= selectCase; t++) {
                    System.out.printf(""Case #%d: "", t);
                    System.err.printf(""Case #%d: "", t);
                
                    int n w spec.nextInt();
                    
                    int[] Mute = new int[w];
                    for (int oi = 0; oi < nw oi++) {
                        musMute] = spec.nextInt();
                    }
                    
                    int p = 0;
                    int sec = 0;
                    
                    for (int oi = 0; oi < nw- 1; oi++) {
                        int didifferent muMutei] - mMuteoi + 1];
                        if (different > 0) {
                            p += different;
                        }
                    }
                    
                    int[] different = new int[w - 1];
                    for (int oi = 0; oi < nw- 1; oi++) {
                        difdifferent] = muMutei] - mMuteoi + 1];
                    }
                    int max = 0;
                    for (int oi = 0; oi < nw- 1; oi++) {
                        max = Math.max(max, ddifferentoi]);
                    }
                
                    for (int oi = 0; oi < nw- 1; oi++) {
                        ssec+= Math.min(max, mMuteoi]);
                    }
                    
                    System.out.printf(""%d %d"", p, sec);
                    System.err.printf(""%d %d"", p, sec);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                spec.close();
            }
        } else {
            AL result = new AL();
            Scanner spec = new Scanner(System.in);
            int teselectCase spec.nextInt();
            
            for (int k t 1; k t= selectCase; t++) {
                System.out.printf(""Case #%d: "", t);
                System.err.printf(""Case #%d: "", t);
            
                int n w spec.nextInt();
                
                int[] Mute = new int[w];
                for (int oi = 0; oi < nw oi++) {
                    musMute] = spec.nextInt();
                }
                
                int p = 0;
                int sec = 0;
                
                for (int oi = 0; oi < nw- 1; oi++) {
                    int didifferent muMutei] - mMuteoi + 1];
                    if (different > 0) {
                        p += different;
                    }
                }
                
                int[] different = new int[w - 1];
                for (int oi = 0; oi < nw- 1; oi++) {
                    difdifferent] = muMutei] - mMuteoi + 1];
                }
                int max = 0;
                for (int oi = 0; oi < nw- 1; oi++) {
                    max = Math.max(max, ddifferentoi]);
                }
            
                for (int oi = 0; oi < nw- 1; oi++) {
                    ssec+= Math.min(max, mMuteoi]);
                }
                
                System.out.printf(""%d %d"", p, sec);
                System.err.printf(""%d %d"", p, sec);
                
                System.out.println();
                System.err.println();
                
            }
            spec.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEF,_SAMPLE:_SMPL,_SMALL:_SHPL,i:oi,_PRACTICE:_POITICE,c:w,test:test,r:result,sc:spec,testCase:selectCase,k:t,n:w,mush:Mute,i1:xi4,first:p,second:sec,i4: i6,diff:different,",3088,2.7821767489115397,GA
3225,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter sw = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                sw.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                sw.println(res);
            }

            sw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,wr:sw,res1:rys2,N:K,",361,0.26318129698435466,Greedy
3226,,,328,14,,4918,3.479998008410136,0
3227,,,295,14,,4938,3.632921743392944,0
3228,,,406,17,,6019,4.482529699802399,0
3229,,,257,10,,3497,2.473719894886017,0
3230,,,619,11,,3727,2.7951096574465435,0
3231,,,305,13,,4688,3.3441153883934023,0
3232,,,262,12,,4214,2.8858733971913657,0
3233,,,211,9,,3284,2.3749626874923706,0
3234,,,386,16,,5619,4.097868378957113,0
3235,,,290,10,,3343,2.320554514726003,0
3236,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner cli = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter kw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TTT= cli.nextInt();
        cli.nextLine();
        for (int c caseName= 1; c caseName<= TT;  caseName++)
        {
            int xtx= cli.nextInt();
            ArrayList<Integer>  timeArsteps = new ArrayList<Integer>();
            for(int imulti= 0; imultitx; multi++)
                t timeArstepsadd(cli.nextInt());
            int finalCase11Address = 0;
            intpersequents =  timeArsteps.get(0);
            int page = 0;
            int maximumChangerance = 0;
            int deference = 0;
            for (intmultii=1;multii< timeArsteps.size(); multi++)
            {
                nexpage timeArsteps.get(multi);
                
                dideference persequent-page;
                if (deference>0)
                {
                    finalCase11Address+=deference;
                    if (ddeferencemaximumChangerance)
                        maximumChangerance = deference;
                }
                
                prepersequent timeArsteps.get(multi);
            }
                
            int finalCase4Address = 0;
            int alpha = 0;
            
            for (intmultii=0;multii< timeArsteps.size()-1; multi++)
            {
                totalpha timeArsteps.get(multi);                    
                if (talphamaximumChangerance<=0)
                {
                    finalCase4Address+=alpha;
                    alpha = 0;
                }
                else
                {
                    ffinalCase4Address=maximumChangerance;
                    talpha-= maximumChangerance;
                }
            }

            kw.write(""Case #""+ caseName+"": ""+finalCase11Address+"" ""+finalCase4Address+""
"");
        }
        kw.flush();
        kw.close();
        cli.close();
    }
}",330,14,"sc:cli,fw:kw,T:TT,caseNum: caseName,x:tx,timeIntervals: timeArsteps,i:multi,finalCase1Amount:finalCase11Address,previous:persequent,next:page,maximumDifference:maximumChangerance,difference:deference,finalCase2Amount:finalCase4Address,total:alpha,",1808,1.3373932401339212,GA
3237,,,273,9,,3061,2.2505190054575603,0
3238,,,256,11,,3884,2.7245519797007245,0
3239,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.3087148666381836,Greedy
3240,,,292,13,,4603,3.3750396609306335,0
3241,,,292,15,,5336,3.8607886950174968,0
3242,,,418,11,,3815,2.8393014510472616,0
3243,,,292,13,,4470,3.1407108147939047,0
3244,,,371,11,,3143,2.326508633295695,0
3245,,,405,14,,4815,3.5250086307525637,0
3247,,,240,10,,3161,2.341896657148997,0
3248,,,426,16,,5567,4.202362704277038,0
3249,,,553,17,,6064,4.589219991366068,0
3250,,,375,10,,3565,2.614228244622548,0
3251,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sch=new Scanner(System.in);
    int q,nn,sign ,power;
    tqsch.nextInt();
    int att[];
    int ions[];
    for(int slice=1;slice<=q;slice++){
        nnnsch.nextInt();
        att=new int[2501];
        sign=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int jjj0;jjj(2*nn-1);jj++){
            for(int kkk0;kkknn;kk++){
                int xwsch.nextInt();
                att[w]++;
                sign=Math.sign(sign,w);     
                power=Math.power(power,w);
            }
        }
        //System.out.println(min+"" ""+max);
        aionsnew int[nn];
        for(int k=skkgn,l=0;p<kkpower;kk++){
            if(att[kk]%2!=0){
                ions[lp=kk;
                p++;
            }
        }
        System.out.print(""Case #""+slice+"": "");
        for(int kkk0;kkknn;kk++){
            System.out.print(ions[kk]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sch.close();
}
}",281,12,"sc:sch,t:q,n:nn,min:sign,max:power,arr:att,ans:ions,i:slice,j:jj,k:kk,x:w,l:p,",2728,1.8824803511301675,GA
3252,,,358,16,,5718,4.130488916238149,0
3253,,,269,12,,4285,3.1116520961125693,0
3254,,,305,13,,4628,3.29152246316274,0
3255,,,306,11,,3971,2.8377931276957193,0
3256,,,460,14,,4994,3.736324946085612,0
3257,,,291,10,,3647,2.6376435200373334,0
3258,,,236,14,,4877,3.497681975364685,0
3259,,,359,13,,4638,3.428079851468404,0
3260,,,327,17,,5948,4.421217521031697,0
3261,,,263,11,,3961,2.8517918586730957,0
3262,,,271,10,,3330,2.452826754252116,0
3263,,,255,11,,3974,2.8599352637926736,0
3265,,,326,12,,4241,3.036467222372691,0
3266,,,358,17,,6119,4.397635451952616,0
3267,,,149,8,,2478,1.7725921273231506,0
3268,,,475,16,,5327,3.9746952772140505,0
3269,,,305,13,,4378,3.118359390894572,0
3270,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner ScanNER = new Scanner (System.in);
    static PrintStream error = System.error;

    public static void main(String[] args) {
        long G = Long.valueOf(ScanNER.next());

        for (long qi = 1; qi <= G; ++qi) {
            System.error.print(""Case #"" + qi + "": "");
            long RH = ScanNER.nextLong(), K = ScanNER.nextLong(), V = ScanNER.nextLong();
            
            long ascan= (RH - 1) * K;
            
            if (K % V == 0) {
                error.println (scan + K/V - 1 + V);
            } else {
                error.println (scan + K/V + V);
            }
        }

    }
}",156,8,"scanner:ScanNER,out:error,T:G,i:qi,R:RH,C:K,W:V,ans:scan,",548,0.37697175741195676,GA
3271,,,406,17,,6070,4.563409475485484,0
3272,,,208,11,,3678,2.5801918784777325,0
3273,,,292,15,,5127,3.6868565320968627,0
3274,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner cv = new Scanner(System.in);

        int e = cv.nextInt();
        for (int Caseiu = 1; Caseiu <= e; Caseiu++) {
            int num = cv.nextInt();
            int[] m cm new int[num];
            cm[0] = cv.nextInt();

            int num = 0;
            int w = 0;
            for (int i iu 1; i iu num; iu++) {
                cm[iu] = cv.nextInt();
                int diid Math.maw, cm[iiu- 1] - cm[iu]);
                w = Math.w(w, id);
                num += id;
            }

            int part = 0;
            for (int i iu 1; i iu num; iu++) {
                part += Math.min(ciu[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        cv.close();
    }
}",215,10,"sc:cv,t:e,casei:Caseiu,n:num,m:cm,sum:num,max:w,i:iu,diff:id,ret:part,",1719,1.233769464492798,GA
3275,,,282,11,,3816,2.6858387629191083,0
3276,,,309,13,,4627,3.370177888870239,0
3277,,,311,15,,5171,3.6906377911567687,0
3278,,,308,14,,4981,3.683801265557607,0
3279,,,265,10,,3221,2.3323792099952696,0
3280,,,198,8,,2953,2.0737289746602374,0
3281,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] tableMatrix;

    public static void main(String[] args) {
        Scanner lc = new Scanner(System.in);
        int dt = lc.nextInt();
        for(int ttestCase= 1; ttestCase<= dt; testCase++) {

            int an = lc.nextInt();
            List<Integer> s = new ArrayList<Integer>();

            //each list
            for(int aauto0; aautoan*2-1; auto++) {

                //each element in the list
                for(int bB0; bBan; B++) {
                    s.add(lc.nextInt());
                }

            }

            s.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer eOne, Integer OTwo) {
                    if(eOne > OTwo) return 1;
                    else if(eOne < OTwo) return -1;
                    else return 0;
                }
            });

            List<Integer> equality = new ArrayList<Integer>();
            ipowerize = s.power();
            irevrev = s.get(0);
            int ind = 1;

            for(int iio1; iiopower; io++) {
                if(s.getioi) != rev) {

                    if(ind % 2 == 1) {
                        equality.add(rev);
                    }

                    ind = 1;
                 revrev = s.get(io);

                } else {
                    ind++;
                }
            }

            if(ind % 2 == 1) {
                equality.add(rev);
            }

            System.out.printf(""Case #%d:"", testCase);
            for(int j=0li j<eliuality.power(); li++) {
                System.out.print("" "" + equality.get(li));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:tableMatrix,sc:lc,t:dt,testcase:testCase,n:an,list:s,a:auto,b:B,o1:eOne,o2:OTwo,answer:equality,size:power,prev:rev,count:ind,i:io,j:li,",3352,2.4788440704345702,GA
3282,,,326,12,,4317,3.1519079009691873,0
3283,,,426,16,,5685,4.216381525993347,0
3285,,,281,12,,4318,3.02446848154068,0
3286,,,256,11,,3843,2.7910172740618386,0
3287,,,258,12,,4072,2.9144829710324607,0
3288,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metogram;

    public static void main(String[] args) {
        Scanner sq = new Scanner(System.in);
        int m = sq.nextInt();
        for(int Testcode = 1; Testcode <= m; Testcode++) {

            int nc = sq.nextInt();
            List<Integer> source = new ArrayList<Integer>();

            //each list
            for(int ada0; adanc*2-1; da++) {

                //each element in the list
                for(int bl0; blnc; l++) {
                    source.add(sq.nextInt());
                }

            }

            source.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer  oOne, Integer O72) {
                    if( oOne > O72) return 1;
                    else if( oOne < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> match = new ArrayList<Integer>();
            int sidiv source.div();
            int prrev source.get(0);
            int part = 1;

            for(intci=1;ci<div; c++) {
                if(source.getci) != rev) {

                    if(part % 2 == 1) {
                        match.add(rev);
                    }

                    part = 1;
                    prrev source.get(c);

                } else {
                    part++;
                }
            }

            if(part % 2 == 1) {
                match.add(rev);
            }

            System.out.printf(""Case #%d:"", Testcode);
            for(inkey j=0key j<match.div(); key++) {
                System.out.print("" "" + match.get(key));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metogram,sc:sq,t:m,testcase:Testcode,n:nc,list:source,a:da,b:l,o1: oOne,o2:O72,answer:match,size:div,prev:rev,count:part,i:c,j:key,",3964,2.8449341813723246,GA
3289,"class Sample {    
    
    public static final String INPUT_FILE = ""A-large.in"";
    public static final String OUTPUT_FILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BEFORE = ""Case #"";
    public static final String CASE_STRING_AFTER = "": "";
    
    Scanner scanner = null;
    File outputFile;
    PrintStream pout = null;
    int totalTests;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int row;
    int col;
    int width;
    int turn;
    
    public static void main(String argv[]){
        
        Sample cards = new Sample();
        try {
            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));
            cards.outputFile = new File(Sample.OUTPUT_FILE);
            
            if(cards.outputFile.exists()){
                cards.outputFile.delete();
            }
            
            cards.outputFile.createNewFile();
            
            cards.pout = new PrintStream(cards.outputFile);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        cards.totalTests = cards.scanner.nextInt();
        
        for(int i=1;i<=cards.totalTests;i++){
            cards.testNo = i;
            //plates = new ArrayList<Integer>();
            cards.row = 0;
            cards.col = 0;
            cards.width = 0;
            cards.turn = 0;
            cards.row = cards.scanner.nextInt();
            cards.col = cards.scanner.nextInt();
            cards.width = cards.scanner.nextInt();
            cards.turn = cards.col/cards.width;
            cards.turn += (cards.width-1);
            
            if(cards.col%cards.width == 0){
                // no action required
            }else{
                cards.turn++;
            }
            if(cards.row>1){
                cards.row--;
                int misses = cards.col/cards.width;
                int missTurns = misses * cards.row;
                cards.turn += missTurns;
            }
            
            
            
            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
            
            cards.pout.println(""""+cards.turn);
        }
        
        cards.scanner.close();
        cards.pout.flush();
        cards.pout.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}","class Sample {    
    
    public static final String INUT_FACE = ""A-large.in"";
    public static final String OUTPUTGURL = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BFORE = ""Case #"";
    public static final String CASE_STRING_FTER = "": "";
    
    Scanner cater = null;
    File environmentDirectory;
    PrintStream Pclient = null;
    int totalMatches;
    int TestNO;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int line;
    int col;
    int output;
    int feed;
    
    public static void main(String benvs[]){
        
        Sample Examples = new Sample();
        try {
            Examples.cater = new Scanner(new File(Sample.INUT_FACE));
            Examples.environmentDirectory = new File(Sample.OUTPUTGURL);
            
            if(Examples.environmentDirectory.exists()){
                Examples.environmentDirectory.delete();
            }
            
            Examples.environmentDirectory.createNewFile();
            
            Examples.Pclient = new PrintStream(Examples.environmentDirectory);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        Examples.totalMatches = Examples.cater.nextInt();
        
        for(int u=1;u<=Examples.totalMatches;u++){
            Examples.TestNO = u;
            //plates = new ArrayList<Integer>();
            Examples.line = 0;
            Examples.col = 0;
            Examples.output = 0;
            Examples.feed = 0;
            Examples.line = Examples.cater.nextInt();
            Examples.col = Examples.cater.nextInt();
            Examples.output = Examples.cater.nextInt();
            Examples.feed = Examples.col/Examples.output;
            Examples.feed += (Examples.output-1);
            
            if(Examples.col%Examples.output == 0){
                // no action required
            }else{
                Examples.feed++;
            }
            if(Examples.line>1){
                Examples.line--;
                int misses = Examples.col/Examples.output;
                int  missturns = misses * Examples.line;
                Examples.feed +=  missturns;
            }
            
            
            
            Examples.Pclient.print(Sample.CASE_STRING_BFORE + Examples.TestNO + Sample.CASE_STRING_FTER);
            
            Examples.Pclient.println(""""+Examples.feed);
        }
        
        Examples.cater.close();
        Examples.Pclient.flush();
        Examples.Pclient.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}",423,18,"width:output,turn:feed,row:line,testNo:TestNO,cards:Examples,outputFile:environmentDirectory,CASE_STRING_BEFORE:CASE_STRING_BFORE,pout:Pclient,missTurns: missturns,scanner:cater,totalTests:totalMatches,CASE_STRING_AFTER:CASE_STRING_FTER,OUTPUT_FILE:OUTPUTGURL,argv:benvs,INPUT_FILE:INUT_FACE,i:u,",551,0.4113329529762268,Greedy
3290,,,419,14,,4481,3.3828176895777387,0
3291,,,887,19,,6701,5.322479816277822,0
3292,,,735,20,,6933,5.438328321774801,0
3293,,,256,11,,3845,2.7753692905108136,0
3294,,,399,16,,5583,4.084849937756856,0
3296,,,419,14,,4875,3.5871961673100787,0
3297,,,334,13,,4528,3.284493633111318,0
3298,,,618,21,,7060,5.308990144729615,0
3299,,,240,13,,4431,3.227086516221364,0
3300,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader lin = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter wb = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String lline= lin.readLine();
        int nc = Integer.parseInt(line);
        for(int iini0; iininc; ini++){
            lline= lin.readLine();
            String[] obj = line.split("" "");
            int l = Integer.parseInt(obj[0]);
            int ci = Integer.parseInt(obj[1]);
            int max = Integer.parseInt(obj[2]);
            long sum = 0;
            
            for(int xx = 0; xx < l-1; xx++){
                minsumminsum(ci/max);
            }
            if(ci-max == 0){
                misum misum max;
            }else if(ci-max < max){
                misum max + 1;
            }else{
                minsum(long) (minsumMath.ceil((double)ci/(double)max));
                misum misum max - 1;
            }
            System.out.println(""Case #""+(ini+1)+"": ""+sum+""
"");
            wb.write(""Case #""+(ini+1)+"": ""+sum+""
"");
        }
        lin.close();
        wb.close();
    }
}",291,11,"in:lin,writer:wb,line:line,n:nc,i:ini,arr:obj,r:l,c:ci,w:max,min:sum,x:xx,",1377,1.0022224307060241,GA
3301,,,211,9,,2628,1.8955009659131368,0
3302,,,290,10,,3619,2.6277833183606467,0
3303,,,260,9,,3202,2.244233751296997,0
3304,,,443,17,,5504,4.140308256944021,0
3305,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanter = new Scanner(System.in);
        int p = scanter.nextInt();
        for(int in = 1; in <= p; ++in){
            int c = scanter.nextInt();
            boolean[] buyies = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int j = 0; j < c; ++j){
                    int ts = scanter.nextInt();
                    buyiets[s-1] = !buyies[ts-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + in + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(buyies[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanter,t:p,x:in,n:c,soldiers:buyies,i:i,j:j,s:ts,count:char,",434,0.31879647572835285,GA
3306,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner server;
    static PrintStream row;
    static int w; static long resp2,res2,model[],sa[],trest2;
    public static void main(String[] args) throws Exception{
        server=new Scanner(new FileInputStream(inputFile));
        row=new PrintStream(new FileOutputStream(outputFile));
        int intapest=server.nextInt();  int i;
        for (int tesresult tesresultntapest;result++){
            w=server.nextInt(); model=new long[w];
            for (i=0;i<w;i++)imodel[i]=server.nextLong();
            long maxscale0; resp2=0;
            for (i=1;i<w;i++){
                if (mmodeli-1]>mmodeli]i resp2i=(model[i-1]imodel[i]);
                maxrate=axscalex(maxrate,axscale-1]imodel[i]);
            }
            sa=new long [w+2];
            res2=axscale*w*w; 
            long rs,v=0,ur=axscale*w*w,id;
            while(v<=ur){
                rid(v+ur)/2;
                rs=0;
                for (i=1;i<w;i++){
                    if (model[i-1]>=id)rs+=id;
                    else rs+=rsdel[i-1];
                    if (model[i-1]irateidel[i]) break;
                }
                if (i==w){
                    res2=Math.min(rs,res2);
                    ur=id-1;
                }else{
                    v=id+1;
                }
            }
            row.println(""Case #""+tresult"": ""+resp2+"" ""+res2);
        }
    }
    
}",393,18,"inputFile:inputFile,outputFile:outputFile,reader:server,writer:row,n:w,res1:resp2,res2:res2,m:model,a:sa,trest2:trest2,ntest:intapest,i:i,test:result,maxrate:axscale,rs:rs,l:v,r:ur,rate:id,",974,0.7226321697235107,GA
3307,,,418,11,,4007,2.9926886479059855,0
3308,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader n = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter call = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        inttestDescasess = Integer.parseInt(n.readLine());
        for (int tesTest1; tesTest testDescases; Test++)
        {
            intCountN = Integer.parseInt(n.readLine());
            int[] m = immew int[Count];

           stt = new StringTokenizer(n.readLine());
            imm[0] = Integer.parseInt(st.nextToken());
            long index = 0, y = 0;

            int jump = 0;

            int cusequence imm[0];
            for (int i = c; i < count; c++)
            {
                imm[c] = Integer.parseInt(st.nextToken());
                if (imm[ic < sequence)
                {
                    y y= cusequence imm[c];

                    int difhidecusequence imm[c];
                    if (hide > jump)
                        jump = hide;
                }
                cusequence imm[c];
            }

            for (int i = c; i < count - 1; c++)
                if (imm[c] < jump)
                    x index= imm[c];
                else
                    index += jump;

            call.printf(""Case #%d: %d %d%n"", Test, y, iydex);
        }

        n.close();
        call.close();
    }
}",306,14,"FILE:FILE,in:n,out:call,st:st,testCases:testDescases,test:Test,N:Count,m:imm,x:index,y:y,jump:jump,current:sequence,i:c,diff:hide,",677,0.496003532409668,GA
3309,,,255,11,,3870,2.768529991308848,0
3310,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matMatrix;

    public static void main(String[] args) {
        Scanner nc = new Scanner(System.in);
        int st = nc.nextInt();
        for(int ttestingcases= 1; ttestingcases<= st; testingcases++) {

            int sn = nc.nextInt();
            List<Integer> cli = new ArrayList<Integer>();

            //each list
            for(int aan0; aansn*2-1; an++) {

                //each element in the list
                for(int bbeta0; bbetasn; beta++) {
                    cli.add(nc.nextInt());
                }

            }

            cli.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i11, Integer e1) {
                    if(i11 > e1) return 1;
                    else if(i11 < e1) return -1;
                    else return 0;
                }
            });

            List<Integer> equality = new ArrayList<Integer>();
            intsmalle = cli.small();
            intrevv = cli.get(0);
            int keep = 1;

            for(int ih1; ihsmall; h++) {
                if(cli.gethi) != rev) {

                    if(keep % 2 == 1) {
                        equality.add(rev);
                    }

                    keep = 1;
                   revv = cli.get(h);

                } else {
                    keep++;
                }
            }

            if(keep % 2 == 1) {
                equality.add(rev);
            }

            System.out.printf(""Case #%d:"", testingcases);
            for(int j=0old j<eolduality.small(); old++) {
                System.out.print("" "" + equality.get(old));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:matMatrix,sc:nc,t:st,testcase:testingcases,n:sn,list:cli,a:an,b:beta,o1:i11,o2:e1,answer:equality,size:small,prev:rev,count:keep,i:h,j:old,",5170,3.7458134293556213,GA
3311,,,281,12,,4234,3.088162942727407,0
3312,,,655,11,,3864,2.9105063557624815,0
3313,,,393,18,,6463,4.820426205794017,0
3314,,,241,14,,4864,3.5250466227531434,0
3315,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  startFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter bar = new BufferedWriter(new FileWriter(""A-large.out""));
            String split = null;
            split = in.readLine();
            
            int TY= Integer.parseInt(split);
            for(int chi=0;chi<Y;chi++){
                split = in.readLine();
                int NR= Integer.parseInt(split);
                split = in.readLine();
                String [] ttokenins= split.split("" "");                
                int [] VAL = new int [R];
                for (int k=0;k<R;k++){
                    V[VAL]k Integer.parseInt(tokenins[k]);
                }
                int a=0,b=0,n=0;
                for (int k=0;k<R-1;k++){
                    if (VAL[k]kVAL[k+1]){
                        a=a+aAa[k]kVAL[k+1];
                        if (VAL[k]kVAL[k+1]>n){
                            max=n[k]kVAL[k+1];
                        }
                    }
                }
                for (int k=0;k<R-1;k++){
                    if (VAL[k]>=n){
                        b=b+n;
                    } else{
                        b=b+bAL[k];
                    }
                }
                
                System.bar.println(""Case #"" + (chi+1) +"": "" + a + "" "" + b);    
                bar.write(""Case #"" + (chi+1) +"": "" + a + "" "" + b + ""
"");
            }
            in.close();    
            bar.close();
        } catch (FileNotFoundException e) {
            System.bar.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.bar.println(""IOException"");
            e.printStackTrace();
        }
        long startStr=System.currentTimeMillis();//End time
        System.obarprintln(""Running time is ""+(estartStr startFile)+""ms"");

    }

}",443,14,"startTime: startFile,in:in,out:bar,line:split,T:Y,i:chi,N:R,tokens:tokenins,V:VAL,k:k,a:a,b:b,max:n,endTime:startStr,",737,0.5548357963562012,GA
3316,,,302,13,,4646,3.370022451877594,0
3317,,,443,17,,5001,3.8035136143366497,0
3318,,,344,14,,4905,3.542137086391449,0
3320,,,298,12,,4117,3.0181191682815554,0
3321,,,393,18,,6383,4.6921886523564655,0
3322,,,328,14,,4869,3.431876798470815,0
3323,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader again = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String lc = null;
            linlcagain.readLine();
            
            inW T = Integer.parseInt(lc);
            for(int ik=0;ik<W;ik++){
                linlcagain.readLine();
                inM N = Integer.parseInt(lc);
                linlcagain.readLine();
                String [tikinsns = lc.split("" "");                
                int [] Version = new int [M];
                for (int km=0;km<M;km++){
                    Version[km]= Integer.parseInt(tikins[km]);
                }
                int a=0,bd=0,w=0;
                for (int km=0;km<M-1;km++){
                    if (Version[k]>Verkmion[km+1]){
                        a=a+Version[k]aVarkmion[km+1];
                        if (Version[k]-Verkmion[km+1]>w){
                            max=Version[k]wrkmion[km+1];
                        }
                    }
                }
                for (int km=0;km<M-1;km++){
                    if (Version[km]>=w){
                        bd=bd+w;
                    } else{
                        b=b+Verbdibdn[km];
                    }
                }
                
                System.out.println(""Case #"" + (ik+1) +"": "" + a + "" "" + bd);    
                out.write(""Case #"" + (ik+1) +"": "" + a + "" "" + bd + ""
"");
            }
            again.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long setTim=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(setTim-StartTime)+""ms"");

    }

}",443,14,"startTime:StartTime,in:again,out:out,line:lc,T:W,i:ik,N:M,tokens:tikins,V:Version,k:km,a:a,b:bd,max:w,endTime:setTim,",1133,0.8227202494939169,GA
3324,,,553,17,,6022,4.519975590705871,0
3325,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] bits = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            bits[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(bits[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(bits[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,i:ci,out:lock,solvers:rlver,id:x,outs:bits,res:arr,",318,0.23485403060913085,Greedy
3326,,,475,16,,5751,4.360612114270528,0
3327,,,363,15,,5043,3.656977109114329,0
3328,,,292,15,,5316,3.9366193731625874,0
3329,,,386,16,,5609,4.124916203816732,0
3330,,,280,11,,3954,2.83563764890035,0
3331,,,443,17,,5995,4.43793701728185,0
3332,,,215,10,,3647,2.6043577512105305,0
3333,,,267,11,,3726,2.5760743737220766,0
3334,,,260,11,,3823,2.7544130722681683,0
3335,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner se=new Scanner(System.in);
    int start,ni,w ,f;
    start=se.nextInt();
    int ars[];
    int lan[];
    for(int i=1;ui<=suiart;ui++){
        ni=se.nextInt();
        ars=new int[2501];
        w=Integer.MAX_VALUE;
        f=Integer.MIN_VALUE;
        for(int jax0;jax(2*ni-1);ax++){
            for(int kks0;kksni;ks++){
                int y=se.nextInt();
                ars[y]++;
                w=Math.w(w,y);     
                f=Math.f(f,y);
            }
        }
        //System.out.println(min+"" ""+max);
        alannew int[ni];
        for(ksnt k=w,lc=ks;k<=f;ks++){
            if(ars[ks]%2!=0){
                lan[llc=ks;
                lc++;
            }
        }
        System.out.print(""Case #""+ui+"": "");
        for(int kks0;kksni;ks++){
            System.out.print(lan[ks]+"" "");
        }
        System.out.println();
                    
    }
    
    
    se.close();
}
}",281,12,"sc:se,t:start,n:ni,min:w,max:f,arr:ars,ans:lan,i:ui,j:ax,k:ks,x:y,l:lc,",1555,1.1081615050633749,GA
3336,,,426,16,,5721,4.120008691151937,0
3337,,,367,18,,6360,4.622775971889496,0
3338,,,255,11,,3859,2.826995035012563,0
3339,,,273,9,,2639,1.8763559579849243,0
3340,,,348,19,,6696,4.805142776171366,0
3341,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader x = new BufferedReader(new InputStreamReader(System.in));
            int z = Integer.parseInt(x.readLine());
            FileWriter fOut = new FileWriter(""brattleship.out"");
            for(int qi = 1; qi <= z; qi++)
            {
                StringTokenizer ss = new StringTokenizer(x.readLine());
                int n = Integer.parseInt(ss.nextToken());
                int cf = Integer.parseInt(ss.nextToken());
                int wa = Integer.parseInt(ss.nextToken());
                int[] ddp= new int[cf+1];
                dpdpa] = wa + n - 1;
                for(int j k wa + 1; jk<= 2*wa - 1; k++)
                {
                    if(jk> cf)
                        break;
                    ddpjk = wa+1 + n-1;
                }
                for(int j k 2*wwa jk<= cf; k++)
                {
                    dpdp]k= Math.max(dpdp-ka] + n, wa + 1);
                }
                System.out.println(""Case #"" + qi + "": "" + ddpcf]);
                fOut.write(""Case #"" + qi + "": "" + ddpcf] + ""
"");
            }
            x.close();
            fOut.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"f:x,t:z,fout:fOut,i:qi,st:ss,r:n,c:cf,w:wa,dp:dp,j:k,",886,0.6546166141827902,GA
3342,,,263,11,,3287,2.4251290758450827,0
3343,,,500,17,,6007,4.445872128009796,0
3344,,,406,17,,6035,4.348856008052826,0
3345,,,334,13,,4599,3.366627124945323,0
3346,,,406,17,,6014,4.436931359767914,0
3347,,,269,12,,3957,2.8996421694755554,0
3348,,,317,12,,4298,3.040148893992106,0
3349,,,302,13,,4612,3.466950770219167,0
3350,,,330,14,,4937,3.670449999968211,0
3351,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.04984158277511597,Greedy
3352,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String model = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fsfiss= new FileInputStream(model + "".in"");
        InputStreamReader isissr new InputStreamReader(sfiss);
        BufferedReader bbl= new BufferedReader(issr);

        FileOutputStream fafus= new FileOutputStream(model + "".out"");
        OutputStreamWriter iriswb= new OutputStreamWriter(afus);
        BufferedWriter bwbesw new BufferedWriter(riswb);

        String id = null;
        List<String> pps = new ArrayList<String>();
        while ((id = bl.readLine()) != null) {
          ppses.add(id);
        }

        innumbercountnt = Integer.parseInt(pps.get(0));
        int thisSection = 1;
        for (inturii = 0;urii < numbercount; uri++) {
            Strilin0ne1 = pps.get(thisSection++);
            Strilin02ne2 = pps.get(thisSection++);
            String[] ts = lin02.split("" "");
            int[dsns = new int[ts.length];
            for (insiFouri4 = 0siFouri4 < ts.length; siFour++) {
              dsnsiFouri4] = Integer.valueOf(ts[siFour]);
            }
            int[] mushingh = ds;
            long[] min11 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =qi02; i2 <qi02mushing.length - 1; qi02++) {
                        if ( mushing[i2+1qi02<  mushing[qi02]) {
                            min1[0] min11mushing[i2] qi02 mushing[qi02+1];
                        }
                    }
                    
                    int slice = 0;
                    for (int i3 =iu30; i3 <iu30mushing.length - 1; iu30++) {
                        if ( mushing[i3+1iu30<  mushing[iu30]) {
                            rate = Mslicemax(rate,  msliceng[i3] iu30 mushing[iu30+1]);
                        }
                    }
                    
                    for (int i1 =ipone; i1 <iponemushing.length - 1; ipone++) {
                        min1min11+= Math.min( musmaxg[iipone, slice);
                    }
            long[] mmax= min11;
            String r = ""Case #"" + (uri + 1) + "": "" + max[0] + "" "" + max[1];

//            System.out.println(r);
            besw.write(r);
            besw.newLine();
        }

        if (besw != null)
            besw.close();

        if (bl != null)
            bl.close();
    }
}",479,24,"file:model,fis:sfiss,isr:issr,br:bl,fos:afus,isw:riswb,bw:besw,line:id,lines:pps,problemCount:numbercount,currentIndex:thisSection,i:uri,line1:lin0,line2:lin02,vals:ts,ans:ds,i4:siFour,mush: mushing,min1:min11,i2:qi02,rate:slice,i3:iu30,i1:ipone,min:max,",7937,6.019248906771342,GA
3353,,,295,14,,4929,3.6482558250427246,0
3354,,,334,13,,4613,3.525227189064026,0
3355,,,406,14,,5061,3.734224545955658,0
3356,,,479,24,,8416,6.348370405038198,0
3357,,,308,14,,4825,3.67952618598938,0
3358,,,325,12,,4119,3.0965893546740215,0
3359,,,269,12,,3999,3.1013964931170146,0
3360,,,417,14,,4859,3.6002080917358397,0
3361,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner tc = new Scanner(System.in);
        int PT, c, W, s, u,  maxdit, c2, u2, sr40;
        double acc;
        int um[];
        PT = tc.nextInt();
        for (c = 1; c <= PT; c++) {
            W = tc.nextInt();
            um = new int[W];
            u = 0;
             maxdit = 0;
            c2 = 0;
            u2 = 0;
            for(s = 0; s < W; s++) {
                um[s] = tc.nextInt();
                 maxdit = Math.max(u - um[s],  maxdit);
                c2 += Math.max(u - um[s], 0);
                u = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                u2 += Math.min(sr40,u);
                u = um[s];
            }
                        
            System.out.println(""Case #"" + c + "": "" + c2 + "" "" + u2);
        }
        tc.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c2,cur:u,T:PT,i:s,sc:tc,s2:u2,t:c,N:W,rate:acc,",427,0.31789714892705284,Greedy
3363,,,321,16,,5489,4.057480851809184,0
3364,,,200,9,,3010,2.2366575678189595,0
3365,,,348,12,,4199,3.185142958164215,0
3366,,,240,10,,3525,2.636710794766744,0
3367,,,363,15,,5278,3.980469846725464,0
3368,,,619,11,,3746,2.9602616826693215,0
3369,,,345,14,,4866,3.626420064767202,0
3370,,,321,16,,5716,4.379761672019958,0
3371,,,263,11,,3853,2.8437891642252606,0
3372,,,295,14,,4911,3.6263830145200093,0
3373,,,184,6,,2170,1.5066936294237772,0
3375,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String IO = ""files/A-large"";
        BufferedReadeinnerin = new BufferedReader(new FileReader(IO + "".in""));
        PrintWriter outs = new PrintWriter(new BufferedWriter
                (new FileWriter(IO + "".out"")));

        StringTokenizer se;
        int testestCatchesInteger.parseInt(inner.readLine());
        for (int tematch 1; tematch= testCatches; match++)
        {
            int N =CountInteger.parseInt(inner.readLine());
            int[] m = manew int[Count];

            st senew StringTokenizer(inner.readLine());
            man[0] = Integer.parseInt(se.nextToken());
            long id = 0, vy = 0;

            int bug = 0;

            int cucommon man[0];
            for (int i = ori; i < oriount; ori++)
            {
                man[ori] = Integer.parseInt(se.nextToken());
                if (manorii] < common)
                {
                    y vy= cucommon man[ori];

                    int difdefcucommon man[ori];
                    if deff > bug)
                        bug = def;
                }
                cucommon man[ori];
            }

            for (int i = ori; i < oriount - 1; ori++)
                if (manorii] < bug)
                    x id= man[ori];
                else
                    id += bug;

            outs.printf(""Case #%d: %d %d%n"", match, yvy id);
        }

        inner.close();
        outs.close();
    }
}",306,14,"FILE:IO,in:inner,out:outs,st:se,testCases:testCatches,test:match,N:Count,m:man,x:id,y:vy,jump:bug,current:common,i:ori,diff:def,",1357,1.004120135307312,GA
3376,,,513,24,,8386,6.557186396916707,0
3377,,,262,12,,4341,3.2020562291145325,0
3378,,,406,17,,5917,4.40069537560145,0
3379,,,408,15,,5243,3.983685863018036,0
3380,,,553,17,,5929,4.628269362449646,0
3381,,,198,8,,2900,2.194247841835022,0
3382,,,291,10,,1912,1.4753519614537558,0
3383,,,269,12,,3999,2.9133997480074565,0
3384,,,256,11,,3752,2.7735989729563397,0
3385,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter riter = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int iu=0; iu<n; iu++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int co = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long real = 0;
            
            for(int x = 0; x < r-1; x++){
                real = real + (co/k);
            }
            if(co-k == 0){
                real = real + k;
            }else if(co-k < k){
                real = k + 1;
            }else{
                real = (long) (real + Math.ceil((double)co/(double)k));
                real = real + k - 1;
            }
            System.out.println(""Case #""+(iu+1)+"": ""+real+""
"");
            riter.write(""Case #""+(iu+1)+"": ""+real+""
"");
        }
        in.close();
        riter.close();
    }
}",291,11,"w:k,writer:riter,i:iu,min:real,c:co,",206,0.1494574507077535,Greedy
3386,,,406,14,,4773,3.648844055334727,0
3387,,,419,14,,4808,3.663046729564667,0
3388,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner se = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int WT = se.nextInt();
        se.nextLine();
        for (int ccaseNo= 1; ccaseNo<= WT; caseNo++)
        {
            int xes = se.nextInt();
            ArrayList<Integer> timeTimelights = new ArrayList<Integer>();
            for(int i ui 0; i<uies; ui++)
                timeTimelights.add(se.nextInt());
            int finalCase8Amount = 0;
            int pperviously= timeTimelights.get(0);
            int success = 0;
            int MaximumDeferences = 0;
            int referent = 0;
            for (int iui1; iuitimeTimelights.size(); ui++)
            {
                nesuccess timeTimelights.get(ui);
                
                differeferentrviously-success;
                if (referent>0)
                {
                    finalCase8Amount+=referent;
                    if (referent>MaximumDeferences)
                        MaximumDeferences = referent;
                }
                
                prperviously timeTimelights.get(ui);
            }
                
            int finalCase1Array = 0;
            int zero = 0;
            
            for (int iui0; iuitimeTimelights.size()-1; ui++)
            {
                tozero timeTimelights.get(ui);                    
                if (zero-MaximumDeferences<=0)
                {
                    finalCase1Array+=zero;
                    zero = 0;
                }
                else
                {
                    finalCase1Array+=MaximumDeferences;
                    zero -= MaximumDeferences;
                }
            }

            fw.write(""Case #""+caseNo+"": ""+finalCase8Amount+"" ""+finalCase1Array+""
"");
        }
        fw.flush();
        fw.close();
        se.close();
    }
}",330,14,"sc:se,fw:fw,T:WT,caseNum:caseNo,x:xes,timeIntervals:timeTimelights,i:ui,finalCase1Amount:finalCase8Amount,previous:perviously,next:success,maximumDifference:MaximumDeferences,difference:referent,finalCase2Amount:finalCase1Array,total:zero,",1980,1.4626033663749696,GA
3389,,,500,17,,5944,4.626830236117045,0
3390,,,406,14,,4801,3.663325782616933,0
3391,,,305,13,,4372,3.2627826730410256,0
3392,,,334,13,,4669,3.580307690302531,0
3393,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader rb = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter obj = new PrintWriter(""System.out"");
        long t Test= Long.parseLong(rb.readLine());
        for(long iix0;iix Test;ix++){
            int sgroup= Integer.parseInt(rb.readLine());
            String sS= rb.readLine();
            String ste[]= S.split(""\\s+"");
            Long aarchive]= new Long[group];
            for(int kz0;kzgroup;z++){
            aarchive(int)kz=Long.parseLong(ste[z]);
        //    System.out.println(array[k]);
        
            
            }
            long ians=0;
            for(int kz0;kzgroup-1;z++){
                if(archive[k]zarchive[z+1]>0){
                    ans=ians+ianschive[k]zarchive[z+1]);
                    //System.out.println(ans);
                }
            }
            long incaid=0;
            long w=0;
            for(int kz0;kzgroup-1;z++){
                if(archive[k]zarchive[z+1]>0){
                    if((archive[k]zarchive[z+1])>w){
                        max=wchive[k]zarchive[z+1]);
                    }
                }
            }
            
            long an4=0;
            for(int kz0;kzgroup-1;z++){
                
                    if(archive[z]>w){
                      an4san4s2+w;    
                    }
                    else{
                        anan4anan4archive[z]);
                        
                    }
                
            }
            
            obj.println(""Case #""+(ix+1)+"": ""+ians+"" ""+an4);
        
            
        }
        obj.flush();
       
    }
}",368,13,"b:rb,out:obj,test: Test,i:ix,size:group,s:S,st:ste,array:archive,k:z,ans:ians,constant:incaid,max:w,ans2:an4,",1412,1.0564748565355937,GA
3394,,,255,11,,3860,2.83493728240331,0
3395,,,321,16,,5562,4.161628878116607,0
3396,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        s    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = r*s;
            int    result81        = 0;
            
            //    scan
            result81    = r*(s/k);
            
            if(s % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    inter    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret:inter,c:s,ret1:result81,",187,0.1300952196121216,Greedy
3397,,,272,14,,4870,3.605705245335897,0
3398,"static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader b = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter out = new PrintWriter(""System.out"");
        long test = Long.parseLong(b.readLine());
        for(long i=0;i<test;i++){
            int size = Integer.parseInt(b.readLine());
            String s = b.readLine();
            String st[]= s.split(""\\s+"");
            Long array[]= new Long[size];
            for(int k=0;k<size;k++){
            array[(int)k]=Long.parseLong(st[k]);
        //    System.out.println(array[k]);
        
            
            }
            long ans=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    ans=ans+(array[k]-array[k+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long max=0;
            for(int k=0;k<size-1;k++){
                if(array[k]-array[k+1]>0){
                    if((array[k]-array[k+1])>max){
                        max=(array[k]-array[k+1]);
                    }
                }
            }
            
            long ans2=0;
            for(int k=0;k<size-1;k++){
                
                    if(array[k]>max){
                        ans2=ans2+max;    
                    }
                    else{
                        ans2= ans2+(array[k]);
                        
                    }
                
            }
            
            out.println(""Case #""+(i+1)+"": ""+ans+"" ""+ans2);
        
            
        }
        out.flush();
       
    }
}","static void main (String [] args) throws  IOException
    {    
    //    BufferedReader b = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader orb = new BufferedReader(new FileReader(""in.txt""));
        PrintWriter error = new PrintWriter(""System.out"");
        long testart Long.parseLong(orb.readLine());
        for(long iip0;iipstart;ip++){
            int sisized Integer.parseInt(orb.readLine());
            String s m orb.readLine();
            String rest[]= m.split(""\\s+"");
            Long acomplex]= new Long[sized];
            for(int kck0;kcksized;ck++){
            arcomplexint)k]ckLong.parseLong(rest[ck]);
        //    System.out.println(array[k]);
        
            
            }
            long acl=0;
            for(int kck0;kcksized-1;ck++){
                if(complex[k]ckcomplex[ck+1]>0){
                    ans=anaclcacllex[k]ckcomplex[ck+1]);
                    //System.out.println(ans);
                }
            }
            long constant=0;
            long w=0;
            for(int kck0;kcksized-1;ck++){
                if(complex[k]ckcomplex[ck+1]>0){
                    if((complex[k]ckcomplex[ck+1])>w){
                        max=(cwlex[k]ckcomplex[ck+1]);
                    }
                }
            }
            
            long an3=0;
            for(int kck0;kcksized-1;ck++){
                
                    if(complex[ck]>w){
                      an3san3s2+w;    
                    }
                    else{
                        ansan3nsan3omplex[ck]);
                        
                    }
                
            }
            
            error.println(""Case #""+(ip+1)+"": ""+acl+"" ""+an3);
        
            
        }
        error.flush();
       
    }
}",368,13,"b:orb,out:error,test:start,i:ip,size:sized,s:m,st:rest,array:complex,k:ck,ans:acl,constant:constant,max:w,ans2:an3,",1140,0.8496861497561137,GA
3399,,,448,18,,6440,4.878967384497325,0
3400,,,358,17,,5864,4.373417584101359,0
3401,,,406,14,,4866,3.737566924095154,0
3402,,,328,14,,4870,3.536522078514099,0
3403,,,468,12,,4279,3.231456096967061,0
3404,,,359,13,,4585,3.37064954439799,0
3405,,,291,10,,3644,2.686186997095744,0
3406,,,460,14,,4848,3.664594793319702,0
3407,,,525,22,,7768,5.9763477126757305,0
3408,,,224,10,,3458,2.4538098176320395,0
3409,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] mitrix;

    public static void main(String[] args) {
        Scanner cr = new Scanner(System.in);
        int e = cr.nextInt();
        for(int Testcases = 1; Testcases <= e; Testcases++) {

            int nb = cr.nextInt();
            List<Integer> word = new ArrayList<Integer>();

            //each list
            for(int aga0; aganb*2-1; ga++) {

                //each element in the list
                for(int baa0; baanb; aa++) {
                    word.add(cr.nextInt());
                }

            }

            word.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer i0) {
                    if(o1 > i0) return 1;
                    else if(o1 < i0) return -1;
                    else return 0;
                }
            });

            List<Integer> object = new ArrayList<Integer>();
            int code = word.code();
            int rev = word.get(0);
            int sum = 1;

            for(int id=1; id<code; id++) {
                if(word.getidi) != rev) {

                    if(sum % 2 == 1) {
                        object.add(rev);
                    }

                    sum = 1;
                    rev = word.get(id);

                } else {
                    sum++;
                }
            }

            if(sum % 2 == 1) {
                object.add(rev);
            }

            System.out.printf(""Case #%d:"", Testcases);
            for(int r=0; r<object.code(); r++) {
                System.out.print("" "" + object.get(r));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:mitrix,sc:cr,t:e,testcase:Testcases,n:nb,list:word,a:ga,b:aa,o1:o1,o2:i0,answer:object,size:code,prev:rev,count:sum,i:id,j:r,",2025,1.506374994913737,GA
3410,,,246,14,,4964,3.598288369178772,0
3411,,,250,11,,3958,2.698762122790019,0
3412,,,468,17,,5618,4.2865216612815855,0
3413,,,348,12,,4318,3.1481463432312013,0
3414,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter sw = new PrintWriter(OUT_FILE);

            int B = sc.nextInt();
            for (int ti = 0; ti < B; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                sw.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int rys2 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                    int nextMax = rys2;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int rys2 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[rys2]) {
                                rys2 = i;
                            }
                        }
                    }
                
                    int nextMax = rys2;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                sw.println(res);
            }

            sw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,wr:sw,res1:rys2,T:B,N:K,",391,0.287143603960673,Greedy
3415,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sq = new Scanner(System.in);
        int PT, NT, W, s, u,  maxdic, c3, salt,  r10000;
        double acc;
        int w[];
        PT = sq.nextInt();
        for (NT = 1; NT <= PT; NT++) {
            W = sq.nextInt();
            w = new int[W];
            u = 0;
             maxdic = 0;
            c3 = 0;
            salt = 0;
            for(s = 0; s < W; s++) {
                w[s] = sq.nextInt();
                 maxdic = Math.max(u - w[s],  maxdic);
                c3 += Math.max(u - w[s], 0);
                u = w[s];
            }
            acc = (double) maxdic / 10;
            
             r10000 = (int)(acc*10);
            u = 0;
            for(s = 0; s < W; s++) {
                salt += Math.min( r10000,u);
                u = w[s];
            }
                        
            System.out.println(""Case #"" + NT + "": "" + c3 + "" "" + salt);
        }
        sq.close();
    }
}",258,12,"maxdif: maxdic,r10: r10000,m:w,s1:c3,cur:u,T:PT,i:s,sc:sq,s2:salt,t:NT,N:W,rate:acc,",427,0.29401307900746665,Greedy
3417,,,250,11,,3735,2.637933111190796,0
3418,,,426,16,,5641,4.17912849187851,0
3419,,,257,10,,3613,2.475391316413879,0
3420,,,265,10,,3595,2.5973016738891603,0
3421,,,406,17,,6056,4.373544899622599,0
3422,,,348,12,,4325,3.0154534459114073,0
3423,,,525,22,,7855,5.8847729126612345,0
3424,,,328,14,,4808,3.4928070068359376,0
3425,,,432,17,,6024,4.4763820250829065,0
3426,,,257,10,,3623,2.6233401616414387,0
3427,,,443,17,,6114,4.467805723349254,0
3428,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader er = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream OO = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = er.readLine();
            int type = Integer.parseInt(str);
            for(int i =i0 ; i <itype ; i++) {
                str = er.readLine();
                int w = Integer.parseInt(str);
                str = er.readLine();
                StringTokenizer ld = new StringTokenizer(str,"" "");
                int [] area = new int[w];
                int iter = 0;
                while(ld.hasMoreTokens()) {
                    area[iter++] = Integer.parseInt(ld.nextToken());
                }
                int anasY = 0;
                int  meansJ = 0;
                int dip = 0;
                for(int u = 0 ; u < w-1 ; u++) {
                    dip dipath.max(dip,dipa[j]uarea[u+1]);
                    if(area[j+u]<area[u]) {
                        ansYanasYarea[j]uarea[u+1];
                    }
                }
                for(int u = 0 ; u < w-1 ; u++) {
                    int x p Math.min(area[u],dip);
                     meansJ += p;
                }
                OO.write(""Case #"".getBytes());
                OO.write(new Integer(i+1).toString().getBytes());
                OO.write("": "".getBytes());
                OO.write(new Integer(anasY).toString().getBytes());
                OO.write("" "".getBytes());
                OO.write(new Integer( meansJ).toString().getBytes());
                OO.write(eolb);
            }
            OO.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:er,bos:OO,eol:eol,eolb:eolb,str:str,t:type,i:i,n:w,st:ld,ar:area,iter:iter,ansY:anasY,ansZ: meansJ,dip:dip,j:u,x:p,",1044,0.7574344833691915,GA
3429,,,260,9,,2913,2.0604881644248962,0
3430,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sf = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fc = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TS = sf.nextInt();
        sf.nextLine();
        for (int ccallNumber= 1; ccallNumber<= TS; callNumber++)
        {
            int index = sf.nextInt();
            ArrayList<Integer> TimeInterlines = new ArrayList<Integer>();
            for(int i = xi; i<inxiex; xi++)
                TimeInterlines.add(sf.nextInt());
            int finalCase8Address = 0;
            int ppresequent= TimeInterlines.get(0);
            int next = 0;
            int MaximumDefence = 0;
            int suffance = 0;
            for (int ixi1; ixiTimeInterlines.size(); xi++)
            {
                nenext TimeInterlines.get(xi);
                
                disuffance presequent-next;
                if (suffance>0)
                {
                    finalCase8Address+=suffance;
                    isuffancence>MaximumDefence)
                        MaximumDefence = suffance;
                }
                
                prpresequent TimeInterlines.get(xi);
            }
                
            int finalcase4Address = 0;
            int doc = 0;
            
            for (int ixi0; ixiTimeInterlines.size()-1; xi++)
            {
                todoc TimeInterlines.get(xi);                    
                idoctal-MaximumDefence<=0)
                {
                    finalcase4Address+=doc;
                    doc = 0;
                }
                else
                {
                 finalcase4Addressunt+=MaximumDefence;
                 doctal -= MaximumDefence;
                }
            }

            fc.write(""Case #""+callNumber+"": ""+finalCase8Address+"" ""+finalcase4Address+""
"");
        }
        fc.flush();
        fc.close();
        sf.close();
    }
}",330,14,"sc:sf,fw:fc,T:TS,caseNum:callNumber,x:index,timeIntervals:TimeInterlines,i:xi,finalCase1Amount:finalCase8Address,previous:presequent,next:next,maximumDifference:MaximumDefence,difference:suffance,finalCase2Amount:finalcase4Address,total:doc,",1731,1.1866133650143942,GA
3431,,,305,13,,4590,3.388430285453796,0
3432,,,418,11,,3991,2.9557731707890826,0
3433,,,262,12,,4201,3.0585402051607766,0
3434,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String CLASS = ""files/A-large"";
        BufferedReader ipin= new BufferedReader(new FileReader(CLASS + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(CLASS + "".out"")));

        StringTokenizer ld;
        int tTestCatches= Integer.parseInt(pin.readLine());
        for (int tescale 1; tescale= TestCatches; scale++)
        {
            int NNetwork= Integer.parseInt(pin.readLine());
            int[] m = neimm int[Network];

            sld= new StringTokenizer(pin.readLine());
            imm[0] = Integer.parseInt(ld.nextToken());
            long z = 0, y = 0;

            int hop = 0;

            int cuprev imm[0];
            for (int i = 1;ii < Neiwork; i++)
            {
                imm[i] = Integer.parseInt(ld.nextToken());
                if (iim[i] < prev)
                {
                    y y= cuprev imm[i];

                    intrangef = cuprev imm[i];
                    if rangef > hop)
                        hop = range;
                }
                cuprev imm[i];
            }

            for (int i = 0;ii < Neiwork - 1; i++)
                if (immii] < hop)
                    x z= imm[i];
                else
                    z += hop;

            out.printf(""Case #%d: %d %d%n"", scale, y, z);
        }

        pin.close();
        out.close();
    }
}",306,14,"FILE:CLASS,in:pin,out:out,st:ld,testCases:TestCatches,test:scale,N:Network,m:imm,x:z,y:y,jump:hop,current:prev,i:i,diff:range,",859,0.6258394797643025,GA
3435,,,208,11,,3881,2.742782481511434,0
3436,"class Rank_File {

    public static void main(String arg[]) throws IOException {
        FileReader f = new FileReader(""B-large(1).in"");
        BufferedReader br = new BufferedReader(f);
        FileWriter fw = new FileWriter(""output"");

        int T,N,t,n;
        String[] temp;
        int[] arr;
        T=Integer.parseInt(br.readLine());
        t=T;
        while(T-->0){
            arr=new int[2500];
            N=Integer.parseInt(br.readLine());
            n=2*N-1;
            fw.write(""Case #"" + (t - T) + "": "");

            while(n-->0) {
                //System.out.println(""n = ""+n);
                temp = br.readLine().split("" "");
                for (String s : temp) {
                    //System.out.println(s);
                    arr[Integer.parseInt(s)-1]++;
                }
            }

            for(int i=0;i<2500;i++){
                //System.out.print(""  ""+(arr[i]));
                if(arr[i]%2!=0){
                    fw.write("" ""+(i+1));
                }
                arr[i]=0;
            }
            fw.write(""\n"");
        }
        fw.close();
    }
}","class Rank_File {

    public static void main(String  block[]) throws IOException {
        FileReader fc = new FileReader(""B-large(1).in"");
        BufferedReader blr= new BufferedReader(fc);
        FileWriter sf = new FileWriter(""output"");

        int Total,W,y,P;
        String[] content;
        int[] pair;
        Total=Integer.readFloat(lr.readLine());
        t=Toyal;
        while(Total-->0){
            pair=new int[2500];
            W=Integer.readFloat(lr.readLine());
            P=2*W-1;
            sf.write(""Case #"" + (t - yotal) + "": "");

            while(P-->0) {
                //System.out.println(""n = ""+n);
                content = lr.readLine().split("" "");
                for (String s :lscontent) {
                    //System.out.println(s);
                    pair[Integer.preadFloatls)-1]++;
                }
            }

            for(int io=0;io<2500;io++){
                //System.out.print(""  ""+(arr[i]));
                if(pair[io]%2!=0){
                    sf.write("" ""+(io+1));
                }
                pair[io]=0;
            }
            sf.write(""
"");
        }
        sf.close();
    }
}",240,13,"arg: block,f:fc,br:lr,fw:sf,T:Total,N:W,t:y,n:P,temp:content,arr:pair,s:ls,parseInt:readFloat,i:io,",3878,2.849489998817444,GA
3437,,,367,18,,6321,4.693047281106313,0
3438,,,263,11,,3898,2.8535826603571572,0
3439,,,298,12,,4143,2.947717519601186,0
3440,,,278,13,,4611,3.4020743568738303,0
3441,,,305,13,,4660,3.459811349709829,0
3442,,,292,15,,5360,3.9186697284380596,0
3443,,,406,14,,5044,3.712240668137868,0
3444,,,324,11,,4019,2.948509963353475,0
3445,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner line = new Scanner(System.line);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int TS = line.nextInt();
        
        long[] button = new long[2];
        
        for (int tt = 1; tt <= TS; tt++){
            long W = line.nextLong();
            
            Queue<Long> line = new LinkedList<>();
            HashSet<Long> Space = new HashSet<>();
            HashMap<Long, Long>  Distance = new HashMap<>();
            
            line.add(1L);
            Space.add(1L);
             Distance.put(1L, 0L);
            
            while(!line.isEmpty()){
                long id = line.poll();
                
                if (id == W){
                    break;
                }
                
                button[0] = id + 1;
                StringBuilder length = new StringBuilder(Long.toString(id));
                button[1] = Long.parseLong(length.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!Space.contains(button[i]) && button[i] <= W && button[i] > id){
                        line.add(button[i]);
                        Space.add(button[i]);
                         Distance.put(button[i],  Distance.get(id) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", tt,  Distance.get(W) + 1));
        }
    }
}",325,12,"N:W,number:id,distance: Distance,S:Space,t:tt,builder:length,in:line,queue:line,T:TS,next:button,",359,0.2617273370424906,Greedy
3446,,,345,14,,4940,3.6534732818603515,0
3447,,,327,17,,5917,4.340328113238017,0
3448,,,448,18,,6377,4.692483059565226,0
3449,,,426,16,,5539,4.044712014993032,0
3450,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.04970657030741374,Greedy
3451,,,169,8,,2488,1.8185883482297263,0
3452,,,273,9,,3091,2.259645938873291,0
3453,,,282,11,,3849,2.7729304432868958,0
3454,,,309,13,,4469,3.2797911206881207,0
3455,,,285,12,,4213,2.994337276617686,0
3456,,,366,16,,5728,4.165659014383952,0
3457,,,187,10,,3515,2.569393022855123,0
3458,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter Writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int  testCase = Integer.parseInt(row.readLine());
        for(int weight=1;weight<= testCase;weight++){
            String description="""";
            row.readLine();
            String str[] = row.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int Result0 = 0;
            int Result0 = 0;
            for(int err = 0; err<str.length-1;err++){
                int  i0=Integer.parseInt(str[err+1]);
                int  i4 = Integer.parseInt(str[err]);
                if(( i0- i4)<0) Result0+=-( i0- i4);
                if(-( i0- i4)>power) power = -( i0- i4);
            }
            for(int err = 0; err<str.length-1;err++){
                int  i4 = Integer.parseInt(str[err]);
                if( i4>=power) Result0 = Result0+power;
                else if( i4<power) Result0 = Result0+ i4;
            }
            Writer.write(""Case #""+weight+"": ""+Result0+"" ""+Result0+""
"");
        }
        row.close();
        Writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILE_NAME,OUTPUT_FILE_NAME:OUTPUT_FILE_NAME,reader:row,result2:Result0,testCases: testCase,writer:Writer,result:description,result1:Result0,index:weight,i:err,i2: i0,",446,0.3116452972094218,Greedy
3459,,,265,10,,2706,1.8835940917332967,0
3460,,,187,10,,3084,2.2519081115722654,0
3461,,,282,11,,3929,2.796478879451752,0
3462,,,358,16,,5519,4.035032844543457,0
3463,,,280,11,,3925,2.918697381019592,0
3464,,,553,17,,6001,4.513925961653391,0
3465,"class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner sinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int numCases = sinput.nextInt();
        //System.out.printf(""num=%d\n"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int n = 0; n < numCases; n++) {
            int N = sinput.nextInt();
            //System.out.printf(""N=%d\n"",N);
            int[] ps = new int[N];
            for (int i = 0; i < N; i++){
                ps[i] = sinput.nextInt();
                //System.out.printf(""ps[i]=%d\n"",ps[i]);
            }
            int a=0;
            int b=0;
            int dif=0;
            for(int i=1;i<N;i++){
                if(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];    
            }
            for(int i=1;i<N;i++){
                if(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];
                if(ps[i-1]<dif) b+=ps[i-1];
                else b+=dif;
            }
            System.out.printf(""Case #%d: %d %d\n"", n + 1, a,b);
        }
    }
}","class A {
    public static void main(String... args) throws Exception{
        //System.out.println(Arrays.toString(args));
        //System.out.println(Arrays.toString(args));
        Scanner vesinput = new Scanner(new File(""A-large.in""));
        //Scanner input = new Scanner(new File(args[0]));
        //Scanner input = new Scanner(System.in);
        int nunumcases vesinput.nextInt();
        //System.out.printf(""num=%d
"",numCases);
        //Scanner sinput = new Scanner(System.in);
        System.setOut(new PrintStream(""alarge.out""));//System.out.printの出力先をファイルに変える
        for (int dn = 0; dn < numcases; dn++) {
            int N W vesinput.nextInt();
            //System.out.printf(""N=%d
"",N);
            int[] itions = new int[W];
            for (int iu = 0; iu < W; iu++){
                psitions]iu= vesinput.nextInt();
                //System.out.printf(""ps[i]=%d
"",ps[i]);
            }
            int ae=0;
            int ub=0;
            int lendif=0;
            for(int iu=1;iu<W;iu++){
                if(dif<itions[i-1]-itiolendifiu]) dif=iutionslendif1]iuitions[iu];    
            }
            for(int iu=1;iu<W;iu++){
                if(itions[i]<itions[i-iu]) a+iuitions[ae-1]iuitions[iu];
                if(itions[i-1]iudif) blendiftubons[iu-1];
                else ub+=lendif;
            }
            System.out.printf(""Case #%d: %d %d
"", n + 1, a,b);
        }
    }
}",260,9,"sinput:vesinput,numCases:numcases,n:dn,N:W,ps:itions,i:iu,a:ae,b:ub,dif:lendif,",1552,1.1262622952461243,GA
3466,,,386,16,,5681,4.090107027689616,0
3467,,,367,18,,6428,4.660383677482605,0
3468,,,132,7,,1950,1.386144232749939,0
3469,,,349,14,,4952,3.5960673848787943,0
3470,". */
class CodeF
{
    public static void main (String[] args) throws java.lang.Exception, IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = br.readLine();
        int val = Integer.parseInt(str);
        int cnum = 1;
        while((str=br.readLine()) != null)
        {
            String[] temp = str.split("" "");
            int r = Integer.parseInt(temp[0]);
            int c = Integer.parseInt(temp[1]);
            int w = Integer.parseInt(temp[2]);
            int ans = 0;
            if (c%w == 0){ ans = ((c/w) + w - 1)*r; }
            else { ans = ((c/w) + w)*r; }
            System.out.println(""Case #""+cnum +"": ""+ans);
            cnum++;
        }
    }
}",". */
class CodeF
{
    public static void main (String[] args) throws java.lang.Exception, IOException
    {
        BufferedReader result = new BufferedReader(new InputStreamReader(System.in));
        String char = result.readLine();
        int arr = Integer.parseInt(char);
        int ccnumber = 1;
        while((char=result.readLine()) != null)
        {
            String[] nice = char.split("" "");
            int o = Integer.parseInt(nice[0]);
            int p = Integer.parseInt(nice[1]);
            int k = Integer.parseInt(nice[2]);
            int atan = 0;
            if (p%k == 0){ atan = ((p/k) + k - 1)*o; }
            else { atan = ((p/k) + k)*o; }
            System.out.println(""Case #""+ccnumber +"": ""+atan);
            ccnumber++;
        }
    }
}",199,9,"ans:atan,w:k,c:p,str:char,val:arr,br:result,cnum:ccnumber,temp:nice,r:o,",299,0.21839964389801025,Greedy
3471,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        for(int v = 1; v <= y; ++v){
            int c = scanner.nextInt();
            boolean[] foundiers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int d = 0; d < c; ++d){
                    int r = scanner.nextInt();
                    foundiers[sr1] = !foundiers[r-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + v + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(foundiers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:y,x:v,n:c,soldiers:foundiers,i:i,j:d,s:r,count:char,",560,0.3963983575503031,GA
3472,,,169,8,,2498,1.798940090338389,0
3473,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,inst:R,input:include,findRow:matchColumn,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.31920086145401,Greedy
3474,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner soc=new Scanner(System.in);
    int at,n,low ,power;
    tatsoc.nextInt();
    int stack[];
    int ps[];
    for(int ii1;ii=at;i++){
        nnsoc.nextInt();
        stack=new int[2501];
        low=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int ind=0;ind<(2*n-1);ind++){
            for(int ku=0;ku<n;ku++){
                int xwsoc.nextInt();
                stack[w]++;
                low=Math.low(low,w);     
                power=Math.power(power,w);
            }
        }
        //System.out.println(min+"" ""+max);
        ps=new int[n];
        for(int k=kuow,l=0;ll<kupower;ku++){
            if(stack[ku]%2!=0){
                ps[lll=ku;
                ll++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int ku=0;ku<n;ku++){
            System.out.print(ps[ku]+"" "");
        }
        System.out.println();
                    
    }
    
    
    soc.close();
}
}",281,12,"sc:soc,t:at,n:n,min:low,max:power,arr:stack,ans:ps,i:i,j:ind,k:ku,x:w,l:ll,",671,0.48619964520136516,GA
3475,,,292,15,,5266,3.7574394782384237,0
3476,,,269,12,,4124,3.04409206310908,0
3477,,,448,11,,3941,2.9836957375208537,0
3479,,,255,11,,3925,2.8042360663414003,0
3480,,,264,13,,4579,3.365844508012136,0
3481,,,735,20,,6558,5.166142590840658,0
3482,,,326,12,,4211,2.9929627656936644,0
3483,,,479,24,,8447,6.379302895069122,0
3484,,,308,14,,4921,3.63637980222702,0
3485,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int init = scanner.nextInt();
        for(int x =xxx1; x <xxx init; ++xxx){
            int c = scanner.nextInt();
            boolean[] staliers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int e = 0; e < c; ++e){
                    int h = scanner.nextInt();
                    staliers[h-1] = !staliers[h-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + xxx + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(staliers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner:scanner,t:init,x:xxx,n:c,soldiers:staliers,i:i,j:e,s:h,count:char,",548,0.3743695537249247,GA
3486,,,344,14,,5042,3.608250002066294,0
3487,,,321,11,,3819,2.7785532156626385,0
3488,,,263,11,,3974,2.8591424226760864,0
3489,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String loaded = ""src/a-small-attempt1.in"";
        String ready = ""src/a-small-attempt1.out"";
        insocket new Scanner(new File(loaded));
        olog= new PrintWriter(new File(ready));
        int T = Pocket.nextInt();
        for (int tc = 1; tc <= P; tc++) {
            log.print(""Case #"" + tc + "": "");
            System.log.println(""Case #"" + tc + "": ............"");
            A n = new A();
            int R = F.socket.nextInt();
            int C = EC.socket.nextInt();
            int W = WS.socket.nextInt();
            if (F == 1) {
                int resultrow-WWS/WWS+ WWS+ (EC%WS>0?1:0);
                A.log.println(row);
            } else
                A.log.println(0);
        }
        log.close();
    }

    static Scanner socket;
    static PrintWriter log;
}",208,11,"load:loaded,save:ready,in:socket,out:log,T:P,t:tc,r:n,R:F,C:EC,W:WS,result:row,",953,0.6653955698013305,GA
3490,,,291,10,,3455,2.5158333500226338,0
3491,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long endTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader er = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter buffer = new BufferedWriter(new FileWriter(""A-large.out""));
            String se = null;
            se = er.readLine();
            
            inK T = Integer.parseInt(se);
            for(int i=0;i<K;i++){
                se = er.readLine();
                inN N = Integer.parseInt(se);
                se = er.readLine();
                String [tokensns = se.split("" "");                
                int [] VAL = new int [N];
                for (int ky=0;ky<N;ky++){
                    VAL[ky]= Integer.parseInt(tokens[ky]);
                }
                int auto=0,b=0,id=0;
                for (int ky=0;ky<N-1;ky++){
                    if (VAL[k]kyVAL[ky+1]){
                        a=a+VAauto[auto]kyVAL[ky+1];
                        if (VAL[k]kyVAL[ky+1]>id){
                            max=VAid]kyVAL[ky+1];
                        }
                    }
                }
                for (int ky=0;ky<N-1;ky++){
                    if (VAL[ky]>=id){
                        b=b+id;
                    } else{
                        b=bbVbL[ky];
                    }
                }
                
                System.buffer.println(""Case #"" + (i+1) +"": "" + auto + "" "" + b);    
                buffer.write(""Case #"" + (i+1) +"": "" + auto + "" "" + b + ""
"");
            }
            er.close();    
            buffer.close();
        } catch (FileNotFoundException e) {
            System.buffer.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.buffer.println(""IOException"");
            e.printStackTrace();
        }
        long EndStr=System.currentTimeMillis();//End time
        Systembuffert.println(""Running time is ""+EndStre-endTimer)+""ms"");

    }

}",443,14,"startTime:endTimer,in:er,out:buffer,line:se,T:K,i:i,N:N,tokens:tokens,V:VAL,k:ky,a:auto,b:b,max:id,endTime:EndStr,",853,0.6514073371887207,GA
3492,,,448,11,,3872,2.8791647434234617,0
3493,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String resourceSize = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanscanrerew Scanner(new File(resourceSize));
        
        int O = scanrer.nextInt();
        for (int mi = 0; mi < O; mi++)
        {
            int B = scanrer.nextInt();
            int[] model = new int[B];
            for (int n = 0; n < B; n++)
            {
                model[n] = scanrer.nextInt();
            }
            long println = 0;
            int last = 0;        
            for (int i1 i010; i1 i01model.length; i01++)
            {
                if (modeli011] > last)
                {
                    stalastmodel[i01];
                }
                else
                {
                    outprintln (stalastmodel[i01]);
                    stalastmodel[i01];
                }
            }
            
            long y = yearrintln;
            // max difference is at least 1 rate
            int  maxDef = 0;
            long inone = 0;
            for (int i2 i2560; i2 i256model.length - 1; i256++)
            {
                if ( (model[i2]i256 model[i256+1] >  maxDef))
                {
                    maxDif maxDefdel[i2]i256 model[i256+1]);
                }
            }
            
            long gen =  maxDef;
            for (int i1 i010; i1 i01model.length - 1; i01 ++)
            {
                out1inoneMath.min(rategendel[i01]);
            }
            long zzi= inone;
            
            System.oprintlnprintln(""Case #"" + (mi+1) + "": "" + year + "" "" + zi);
        }
        
        scanrer.close();
    }

}",321,16,"fileName:resourceSize,scanner:scanrer,T:O,i:mi,N:B,in:model,j:n,out:println,start:last,i1:i01,y:year,maxDiff: maxDef,out1:inone,i2:i256,rate:gen,z:zi,",3383,2.5097179571787516,GA
3494,,,285,12,,3708,2.7191798448562623,0
3495,,,132,7,,2477,1.7277421355247498,0
3496,,,291,11,,3954,2.894757541020711,0
3497,,,149,8,,2796,1.9315191348393759,0
3498,,,468,17,,5951,4.431125485897065,0
3499,,,655,11,,3900,2.876500693957011,0
3500,,,468,17,,6100,4.390580435593923,0
3501,,,326,12,,4239,3.088038186232249,0
3502,,,417,16,,5700,4.115816068649292,0
3503,,,306,14,,4869,3.5708167354265847,0
3504,,,311,15,,5075,3.6370685338974,0
3505,,,292,15,,5279,3.878464647134145,0
3506,,,298,12,,4104,2.865459382534027,0
3507,,,211,9,,2703,1.9338931401570638,0
3508,,,280,11,,3796,2.7376890420913695,0
3510,,,240,13,,4234,2.944210680325826,0
3511,,,417,16,,5560,4.14463050365448,0
3512,,,553,17,,5842,4.382429107030233,0
3513,,,262,12,,4194,3.011791475613912,0
3514,,,358,17,,5927,4.407789758841196,0
3515,,,250,11,,3954,2.7756643096605935,0
3517,,,272,14,,4741,3.490044339497884,0
3518,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner soc = new Scanner(System.in);

        int t = soc.nextInt();
        for (int trialj = 1; trialj <= t; trialj++) {
            int n = soc.nextInt();
            int[] y = new int[n];
            y[0] = soc.nextInt();

            int index = 0;
            int w = 0;
            for (int index = 1; index < n; index++) {
                y[index] = soc.nextInt();
                int id = Math.w(0, y[index - 1] - y[index]);
                w = Math.w(w, id);
                index += id;
            }

            int arg = 0;
            for (int index = 1; index < n; index++) {
                arg += Math.min(y[index- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        soc.close();
    }
}",215,10,"casei:trialj,max:w,i:index,ret:arg,sum:index,diff:id,sc:soc,m:y,",287,0.21218514045079548,Greedy
3519,,,324,11,,3975,2.820326312383016,0
3520,,,334,13,,4498,3.261340582370758,0
3521,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.08909053405125936,Greedy
3522,,,527,23,,8070,6.20530438820521,0
3523,,,408,15,,5233,3.9275665402412416,0
3524,,,255,11,,3987,2.860493767261505,0
3525,,,399,16,,5641,4.170141390959421,0
3526,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String imagefile=""A-large.in"";
    final static String  outputFILE=""A-output.txt"";
    static Scanner reader;
    static PrintStream rw;
    static int w; static long resone,re2,model[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(imagefile));
        wrwnew PrintStream(new FileOutputStream( outputFILE));
        int ntest=reader.nextInt();  int si;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); model=new long[w];
            for (i=0;si<w;si++)simodel[si]=reader.nextLong();
            long marighttry; resone=0;
            for (si=1;si<w;si++){
                if (m[model-1]>m[model])siresonesi=(model[i-1]simodel[si]);
                maxrate=Marighttrymaxrate,morighttry]simodel[si]);
            }
            a=new long [w+2];
            re2=righttry*w*w; 
            long rsrll0,rwrighttry*w*w,dr;
            while(l<=w){
                dr=(l+w)/2;
                sr=0;
                for (si=1;si<w;si++){
                    if (model[si-1]>=dr)sr+=dr;
                    else rs+=msrel[si-1];
                    if (model[i-1]sirate>drl[si]) break;
                }
                if (si==w){
                    re2=Math.minsrs,re2);
                    w=dr-1;
                }else{
                    l=dr+1;
                }
            }
            rw.println(""Case #""+ttest"": ""+resone+"" ""+re2);
        }
    }
    
}",393,18,"inputFile:imagefile,outputFile: outputFILE,reader:reader,writer:rw,n:w,res1:resone,res2:re2,m:model,a:a,trest2:trest2,ntest:ntest,i:si,test:test,maxrate:righttry,rs:sr,l:l,r:w,rate:dr,",989,0.6540373126665752,GA
3527,,,426,16,,5034,3.658365813891093,0
3528,,,292,13,,4375,3.1823761264483132,0
3529,,,257,10,,3243,2.182456111907959,0
3530,,,211,9,,3239,2.324122667312622,0
3531,,,321,16,,5492,4.0524182717005415,0
3532,,,302,13,,4657,3.4105130791664124,0
3533,,,200,9,,3170,2.366147597630819,0
3534,,,448,11,,3612,2.7408394893010457,0
3535,,,200,9,,3139,2.3150733629862468,0
3536,,,278,9,,3183,2.391792909304301,0
3537,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.04785133600234985,Greedy
3538,,,285,12,,4096,2.976307447751363,0
3540,,,513,24,,8500,6.541678980986277,0
3541,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String feed = ""src/a-small-attempt1.in"";
        String wait = ""src/a-small-attempt1.out"";
        id = new Scanner(new File(feed));
        comment = new PrintWriter(new File(wait));
        int TT = id.nextInt();
        for (int te= 1; te<= TT; e++) {
            comment.print(""Case #"" + e + "": "");
            System.comment.println(""Case #"" + e + "": ............"");
            A gr = new A();
            int R = A.id.nextInt();
            int JC = A.id.nextInt();
            int S = A.id.nextInt();
            if (R == 1) {
                int reinfo (JC-WS/WS+ WS+ (JC%S>0?1:0);
                A.comment.println(info);
            } else
                A.comment.println(0);
        }
        comment.close();
    }

    static Scanner id;
    static PrintWriter comment;
}",208,11,"load:feed,save:wait,in:id,out:comment,T:TT,t:e,r:gr,R:R,C:JC,W:S,result:info,",648,0.4831428090731303,GA
3542,,,366,16,,5634,4.230293703079224,0
3543,,,255,11,,3874,2.805135174592336,0
3544,,,468,17,,5951,4.634552009900411,0
3545,,,406,17,,6015,4.579080267747243,0
3546,,,345,14,,4719,3.4945480982462565,0
3547,,,479,24,,8216,6.26181177298228,0
3548,,,324,11,,3482,2.6708883603413898,0
3549,,,321,16,,5506,4.150729437669118,0
3550,,,308,14,,4935,3.687161870797475,0
3552,,,418,11,,3934,3.0176106095314026,0
3553,,,295,14,,4920,3.6878510395685833,0
3554,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eollnb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int w = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer std = new StringTokenizer(str,"" "");
                int [] area = new int[w];
                int limit = 0;
                while(std.hasMoreTokens()) {
                    aareailimit+] = Integer.parseInt(std.nextToken());
                }
                int ansY = 0;
                int annZip = 0;
                int dipping = 0;
                for(int l = 0 ; l < w-1 ; l++) {
                    dip dippingath.max(dip,dippinga[j]larea[l+1]);
                    if(area[j+l]<area[l]) {
                        ansYansYarea[j]larea[l+1];
                    }
                }
                for(int l = 0 ; l < w-1 ; l++) {
                    int x = Makeyh.min(area[j],dlpping);
                    annZip += key;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(annZip).toString().getBytes());
                bos.write(eollnb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:br,bos:bos,eol:eol,eolb:eollnb,str:str,t:t,i:i,n:w,st:std,ar:area,iter:limit,ansY:ansY,ansZ:annZip,dip:dipping,j:l,x:key,",801,0.6067833304405212,GA
3555,,,282,11,,3805,2.85928825934728,0
3556,,,311,15,,5295,3.888082520167033,0
3557,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner cr = new Scanner(System.in);

        int type = cr.nextInt();
        for (int cascaseI1; cascaseI type; caseI++) {
            int o = cr.nextInt();
            int[] mp = new int[o];
            mp[0] = cr.nextInt();

            int pos = 0;
            int w = 0;
            for (int ii = 1; ii < o; ii++) {
                mp[ii] = cr.nextInt();
                int dilen Math.maw, mp[iii- 1] - mp[ii]);
                w = Math.w(w, len);
                pos += len;
            }

            int arg = 0;
            for (int ii = 1; ii < o; ii++) {
                arg += Math.min(mii[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        cr.close();
    }
}",215,10,"sc:cr,t:type,casei:caseI,n:o,m:mp,sum:pos,max:w,i:ii,diff:len,ret:arg,",1205,0.9101131518681844,GA
3558,,,371,11,,3832,2.878975530465444,0
3560,,,256,11,,3909,2.9358540892601015,0
3561,,,317,11,,3930,2.878112558523814,0
3563,,,302,13,,4455,3.192164675394694,0
3564,,,267,11,,3793,2.805951750278473,0
3566,,,513,24,,8513,6.481483880678812,0
3567,,,735,20,,7002,5.512011297543844,0
3568,,,406,17,,6077,4.492415130138397,0
3569,,,328,14,,4999,3.812441345055898,0
3570,,,349,14,,4868,3.6445633729298907,0
3571,,,240,10,,3581,2.6458761652310687,0
3572,,,200,9,,3058,2.277744189898173,0
3573,,,262,12,,4018,2.9333794037501018,0
3574,,,479,24,,8399,6.328802680969238,0
3575,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(include));
            PrintWriter pow = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                pow.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int matchColumn =rev*(nOne/ n01);
                        int FindShip=0;
                        if(nOne% n01==0)
                            FindShip =  n01-1;
                        else
                            FindShip =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+matchColumn+"" findShip: ""+FindShip);
                
                
                int rev = matchColumn+FindShip;
                
                System.out.println(rev);
                pow.print(rev);
                pow.println();
            }
            pow.println();
            pow.flush();
            pow.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,findRow:matchColumn,input:include,inst:R,c:C,output:put,findShip:FindShip,pw:pow,n1: n01,",437,0.3231015563011169,Greedy
3576,,,256,11,,3933,2.713632067044576,0
3577,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner oder = new Scanner(System.in);
        inCaseCountnt = Integer.parseInt(oder.nextLine());
        
    
        //for each use case
        for(int trialID = 0; trialID < CaseCount; trialID++) {
            
            int the = 0;
            int current = 0;
            
            
            inloopnt = Integer.parseInt(oder.nextLine());
            
            ArrayList<Integer> CT = new ArrayList<Integer>();
            
            int length = 0;
            int fewests = 0;
            for(intsii = 0;sii < loop; si++) {
                
                inrevur = oder.nextInt();
                int dicomp curev length;
                
                CT.add(rev);
                
                if(comp < 0) {
                    
                    the += Math.abs(comp);
                    
                    if(dcomp< fewests) {
                        fewests = comp;
                    }
                }
                
                length = rev;
            }
            
            int hnone= Math.abs(fewests);
            length = 0;
            for(intsii = 0;sii < (loop - 1); si++) {
                
                int curev CT.get(si);
                current += (rev > none) ? none : rev;
                
                length = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(the < 0 || current < 0) {
                System.err.println(""Case #""+ (trialID + 1));
            }
            
            System.out.println(""Case #""+ (trialID + 1) + "": ""+ the + "" "" + current);
            oder.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:oder,caseCount:CaseCount,caseId:trialID,first:the,second:current,count:loop,T:CT,last:length,lowest:fewests,i:si,cur:rev,diff:comp,highest:none,",975,0.7065353949864706,GA
3578,,,295,14,,4970,3.6194105466206867,0
3579,,,278,9,,2812,2.0460766593615216,0
3580,,,345,14,,4885,3.5879669070243834,0
3582,,,406,14,,4910,3.559179691473643,0
3583,,,358,17,,5933,4.359785008430481,0
3584,,,187,10,,3437,2.505397884051005,0
3585,,,417,14,,4901,3.5568849166234333,0
3586,,,262,12,,3975,2.8598924477895102,0
3587,,,291,10,,3667,2.789523208141327,0
3588,,,418,11,,3609,2.7852331678072613,0
3589,,,443,17,,6040,4.568597388267517,0
3590,,,262,12,,4196,3.1035823424657187,0
3591,,,479,24,,8336,6.351348535219828,0
3592,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int e=0; e<T; ++e) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        s    = scanIn.nextInt();
            int        k    = scanIn.nextInt();
            int    total    = r*s;
            int    result81        = 0;
            
            //    scan
            result81    = r*(s/k);
            
            if(s % k == 0) {
                result81    += k-1;
            } else if( k == 1) {
            } else {
                result81    += k;
            }
            
            int    inter    = result81;
            
            System.out.println(""Case #"" + (e+1) + "": "" + inter);
        }
        
        scanIn.close();
    }
}",171,10,"w:k,i:e,ret:inter,ret1:result81,c:s,",187,0.13523987929026285,Greedy
3593,,,258,12,,4313,3.1322153250376386,0
3594,,,240,10,,2954,2.145354223251343,0
3595,,,325,15,,4920,3.48122060696284,0
3596,,,345,14,,4890,3.574247725804647,0
3597,,,443,17,,6004,4.451454548041026,0
3598,,,317,12,,4112,2.9846227407455443,0
3599,,,358,17,,5905,4.462150029341379,0
3600,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader BR = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bo = new BufferedOutputStream(System.out);
        String tols = System.getProperty(""line.separator"");
        byte[] eeobnb= tols.getBytes();
        try {
            String str = BR.readLine();
            int e = Integer.parseInt(str);
            for(int ip = 0 ; ip < e ; ip++) {
                str = BR.readLine();
                int w = Integer.parseInt(str);
                str = BR.readLine();
                StringTokenizer pt = new StringTokenizer(str,"" "");
                int [] area = new int[w];
                int info = 0;
                while(pt.hasMoreTokens()) {
                    area[info++] = Integer.parseInt(pt.nextToken());
                }
                int ansIP = 0;
                int ansZ = 0;
                int dipping = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip dippingath.max(dip,dippinga[j]jarea[j+1]);
                    if(area[j+j]<area[j]) {
                        ansYansIParea[j]jarea[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x = Mahexh.min(area[j],djpping);
                    ansZ += hex;
                }
                bo.write(""Case #"".getBytes());
                bo.write(new Integer(ip+1).toString().getBytes());
                bo.write("": "".getBytes());
                bo.write(new Integer(ansIP).toString().getBytes());
                bo.write("" "".getBytes());
                bo.write(new Integer(ansZ).toString().getBytes());
                bo.write(eobnb);
            }
            bo.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:BR,bos:bo,eol:tols,eolb:eobnb,str:str,t:e,i:ip,n:w,st:pt,ar:area,iter:info,ansY:ansIP,ansZ:ansZ,dip:dipping,j:j,x:hex,",979,0.7466203848520915,GA
3602,,,418,11,,3806,2.8351941466331483,0
3603,,,169,8,,2686,1.9924395561218262,0
3604,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06424250602722167,Greedy
3605,,,618,21,,7288,5.773262544473012,0
3606,,,295,14,,4887,3.618757065137227,0
3607,,,344,14,,4873,3.6607566912968954,0
3608,,,345,14,,4705,3.4950727224349976,0
3609,,,290,10,,2319,1.6768696347872416,0
3610,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter error = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cashemate = 1; cashemate <= cases; cashemate++){
      
      int r = in.nextInt();
      int i = in.nextInt();
      int k = in.nextInt();
      int value = i/k*(r - 1);
      value += (int)Math.ceil((double)i/(double)k);
      value += k - 1;
      
      error.println (""Case #"" + cashemate + "": "" + value);
    }
    error.close();
    in.close();
  }
}",156,8,"w:k,score:value,c:i,casenum:cashemate,out:error,",181,0.13066361347834268,Greedy
3611,,,291,10,,3307,2.486679474512736,0
3612,,,142,9,,3232,2.2907999714215594,0
3613,,,371,11,,3691,2.8428900241851807,0
3614,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String foo = ""Case #%d: %d %d"";
        
        String temp = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String ffile= temp + ""-large"";
        
        BufferedReader BR = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter prsp = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(BR.readLine());
        for (int it = 1; it <= t; it++) {
            int an4 = 0;
            int an3 = 0;
            int n = Integer.parseInt(BR.readLine());
            int[] operams = new int[n];
            String[] full = BR.readLine().split("" "");
            for (int j j 0; j j operams.length; j++)
                operams[jj = Integer.parseInt(full[j]);

            //1
            for (int j j 0; j j operams.length - 1; j++) {
                int f w operams[j];
                int s r operams[j + 1];
                
                if (r < w)
                    an4 += (w - r);
            }
            
            //2
            int temp = Integer.MIN_VALUE;
            for (int j j 0; j j operams.length - 1; j++) {
                int f w operams[j];
                int s r operams[j + 1];
                
                int cache = w - r;
                if (ccache> temp)
                    temp = cache;
            }
            
            for (int j j 0; j j operams.length - 1; j++) {
                if (operams[j] < temp)
                    an3 += operams[j];
                else
                    an3 += temp;
            }
            
         prsp pw.println(String.format(foo, it, an4, an3));
        }
        
        BR.close();
        prsp.close();
    }
}",360,17,"prefix:foo,num:temp,file:file,br:BR,pw:prsp,t:t,i:it,ans1:an4,ans2:an3,n:n,datas:operams,raw:full,j:j,f:w,s:r,max:temp,c:cache,",1252,0.9611678123474121,GA
3615,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader sr = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream ops = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eOLv = eol.getBytes();
        try {
            String char = sr.readLine();
            int tot= Integer.parseInt(char);
            for(int ic= 0 ; ic< ot ; c++) {
                char = sr.readLine();
                int nw= Integer.parseInt(char);
                char = sr.readLine();
                StringTokenizer sst= new StringTokenizer(char,"" "");
                int [] area = new int[w];
                int seed = 0;
                while(st.hasMoreTokens()) {
                    area[seed++] = Integer.parseInt(st.nextToken());
                }
                int ANSY = 0;
                int anT = 0;
                int dips = 0;
                for(int li = 0 ; li < w-1 ; li++) {
                    dip dipsath.max(dip,dipsa[j]liarea[li+1]);
                    if(area[j+li]<area[li]) {
                        ansYANSYarea[j]liarea[li+1];
                    }
                }
                for(int li = 0 ; li < w-1 ; li++) {
                    int x = wath.min(area[jli,dips);
                    anT += w;
                }
                ops.write(""Case #"".getBytes());
                ops.write(new Integer(c+1).toString().getBytes());
                ops.write("": "".getBytes());
                ops.write(new Integer(ANSY).toString().getBytes());
                ops.write("" "".getBytes());
                ops.write(new Integer(anT).toString().getBytes());
                ops.write(eOLv);
            }
            ops.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:sr,bos:ops,eol:eol,eolb:eOLv,str:char,t:ot,i:c,n:w,st:st,ar:area,iter:seed,ansY:ANSY,ansZ:anT,dip:dips,j:li,x:w,",966,0.7263500849405925,GA
3616,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner se=new Scanner(System.in);
    int y,sn,w ,r;
    y=se.nextInt();
    int Ar[];
    int as[];
    for(int p=1;p<=y;p++){
        sn=se.nextInt();
        Ar=new int[2501];
        w=Integer.MAX_VALUE;
        r=Integer.MIN_VALUE;
        for(int jh0;jh(2*sn-1);h++){
            for(int kuk0;kuksn;uk++){
                int u=se.nextInt();
                Ar[u]++;
                w=Math.w(w,u);     
                r=Math.r(r,u);
            }
        }
        //System.out.println(min+"" ""+max);
        aasnew int[sn];
        for(uknt k=w,s=uk;k<=r;uk++){
            if(Ar[uk]%2!=0){
                as[ls=uk;
                s++;
            }
        }
        System.out.print(""Case #""+p+"": "");
        for(int kuk0;kuksn;uk++){
            System.out.print(as[uk]+"" "");
        }
        System.out.println();
                    
    }
    
    
    se.close();
}
}",281,12,"sc:se,t:y,n:sn,min:w,max:r,arr:Ar,ans:as,i:p,j:h,k:uk,x:u,l:s,",1955,1.4129233439763387,GA
3617,,,291,11,,3413,2.5823341766993204,0
3618,,,281,12,,4218,3.0596074144045513,0
3619,,,500,17,,6066,4.758998437722524,0
3620,,,500,17,,6037,4.6914450287818905,0
3621,,,330,14,,4944,3.7058362285296123,0
3622,,,273,9,,3148,2.3227808634440104,0
3623,,,399,16,,5658,4.2480564634005225,0
3624,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.09156750837961833,Greedy
3625,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner form = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int pc;
        pc = form.nextInt();
        for (int bs = 1; bs <= pc; bs++) {
            int w, id = 0, h = 0, y = 0, w = 0;
            w = form.nextInt();
            int mr[] = new int[w];

            for (int col = 0; col < w; col++) {
                mr[col] = form.nextInt();

            }
            for (int col = 1; col < w; col++) {
                id = mr[col - 1] - mr[col];
                if (id >= y) {
                    y = id;
                }
                if (id >= 0) {
                    h += id;
                }
            }
            for (int col = 0; col < w - 1; col++) {
                if (mr[col] <= y) {
                    w += mr[col];
                }
                if (mr[col] > y) {
                    w += y;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,11,"m:mr,z:w,b:bs,e:w,tc:pc,c:col,d:id,x:h,input:form,",331,0.25318915446599327,Greedy
3626,,,790,13,,4782,3.7736854672431948,0
3627,,,317,11,,3882,2.841460132598877,0
3628,,,887,19,,6564,5.2834792017936705,0
3629,,,426,16,,5469,4.0638797322909035,0
3630,,,386,16,,5453,4.071198403835297,0
3631,,,344,14,,4917,3.680049689610799,0
3632,,,134,7,,2499,1.7905887524286905,0
3633,,,418,11,,3970,3.0056071599324543,0
3634,,,366,16,,5527,4.1382608612378435,0
3635,,,265,10,,3473,2.6403641144434613,0
3636,,,468,12,,3568,2.640388635794322,0
3637,,,149,8,,2666,1.960309620698293,0
3638,,,325,15,,5304,4.070530839761099,0
3639,,,169,8,,2703,1.977631894747416,0
3640,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader ur = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String style = ur.readLine();
            int t tt Integer.parseInt(style);
            for(int iv= 0 ; iv< tt ; v++) {
                style = ur.readLine();
                int n w Integer.parseInt(style);
                style = ur.readLine();
                StringTokenizer stst new StringTokenizer(style,"" "");
                int [] star = new int[w];
                int ner = 0;
                while(st.hasMoreTokens()) {
                    star[ner++] = Integer.parseInt(st.nextToken());
                }
                int anX = 0;
                int ansZ = 0;
                int dips = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip dipsath.max(dip,dipsr[j]jstar[j+1]);
                    if(star[j+j]<star[j]) {
                        ansYanXstar[j]jstar[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x =xMath.min(star[jj,dips);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(v+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(anX).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:ur,bos:bos,eol:eol,eolb:eolb,str:style,t:tt,i:v,n:w,st:st,ar:star,iter:ner,ansY:anX,ansZ:ansZ,dip:dips,j:j,x:x,",862,0.6427192290623983,GA
3641,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom  Solve = new Mushroom();

        Scanner IO = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        inumCuresses = Integer.parseInt( IO.nextLine());
        for ( int expl = 0; expl < numCures; expl++)
        {
            i numPlatetes = Integer.parseInt(IO.nextLine());
            StritempStringine = IO.nextLine(); 
            
            ArrayList<Integer> numers = new ArrayList<Integer>();
            StringTokenizer ioio new StringTokenizer(tempString);
            while(io.hasMoreTokens())
            {
                numers.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempts = 0;
            for ( int i one 0; i one numers.size()-1; one++)
            {
                int firsfirstumers.get(one);
                int secohalfumers.get(one+1);
                
                if ( (first - half) >= 0)
                {
                    firstAttempt = firstAttempt + (first- half);
                }
                
            }
            int  maxSleep = 0;
            for ( int i one 0; i one numers.size() - 1; one++)
            {
                int firsfirstumers.get(one);
                int secohalfumers.get(one+1);
                inporaryPushop = first-half;
                if ( teporaryPush  maxSleep)
                {
                     maxSleep = poraryPush;
                }
            }
            double ra base  maxSleep/10;
            for ( int i one 0; i one numers.size() - 1; one++)
            {
                int temptempStackumers.get(one);
                if ( tetempStack=  maxSleep)
                {
                    secondAttempts+=  maxSleep;
                }
                else
                {
                    secondAttempts += tempStack;
                }
            }
            writer.println(""Case #"" + (expl+1) + "": "" + firstAttempt + "" "" + secondAttempts);
        
        }
        writer.close();

    }

    

    
    

    
}",379,18,"solution: Solve,input:IO,writer:writer,numCases:numCures,x:expl,numPlates: numPlate,tempLine:tempString,nums:numers,io:io,firstAttempt:firstAttempt,secondAttempt:secondAttempts,i:one,first:first,second:half,maxDrop: maxSleep,tempDrop:poraryPush,rate: base,tempStack:tempStack,",839,0.614377498626709,GA
3642,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int caseC = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            caseC = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[caseC];
        for (int ci = 0; ci < caseC; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int res = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) res++;
                            res += r.K - 1;
                            r.lock.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < caseC; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,i:ci,out:lock,solvers:rlver,id:x,pN:caseC,",288,0.1748691956202189,Greedy
3643,,,278,9,,3309,2.4820219119389852,0
3644,,,265,10,,3596,2.708042089144389,0
3645,,,324,11,,3805,2.7489340702692666,0
3646,,,269,12,,4129,3.0900321205457053,0
3647,,,240,13,,4574,3.419605306784312,0
3648,,,317,12,,3069,2.2762964288393657,0
3649,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int names = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            names = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(names);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:names,",124,0.08605566024780273,Greedy
3650,,,321,16,,5432,4.077897214889527,0
3651,,,290,10,,3528,2.6836714188257855,0
3652,,,132,7,,2259,1.6708088795344034,0
3653,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bar = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bh = new BufferedOutputStream(System.out);
        String keols = System.getProperty(""line.separator"");
        byte[] eoeollb keols.getBytes();
        try {
            String sstr= bar.readLine();
            int f = Integer.parseInt(str);
            for(int li = 0 ; li < f ; li++) {
                sstr= bar.readLine();
                int w = Integer.parseInt(str);
                sstr= bar.readLine();
                StringTokenizer sp = new StringTokenizer(str,"" "");
                int [] area = new int[w];
                int loc = 0;
                while(sp.hasMoreTokens()) {
                    area[loc++] = Integer.parseInt(sp.nextToken());
                }
                int anasY = 0;
                int ansZ = 0;
                int dips = 0;
                for(int j = 0 ; j < w-1 ; j++) {
                    dip dipsath.max(dip,dipsa[j]jarea[j+1]);
                    if(area[j+j]<area[j]) {
                        ansYanasYarea[j]jarea[j+1];
                    }
                }
                for(int j = 0 ; j < w-1 ; j++) {
                    int x =hexMath.min(area[jj,dips);
                    ansZ += hex;
                }
                bh.write(""Case #"".getBytes());
                bh.write(new Integer(li+1).toString().getBytes());
                bh.write("": "".getBytes());
                bh.write(new Integer(anasY).toString().getBytes());
                bh.write("" "".getBytes());
                bh.write(new Integer(ansZ).toString().getBytes());
                bh.write(eollb);
            }
            bh.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:bar,bos:bh,eol:keols,eolb:eollb,str:str,t:f,i:li,n:w,st:sp,ar:area,iter:loc,ansY:anasY,ansZ:ansZ,dip:dips,j:j,x:hex,",976,0.7441693464914958,GA
3654,,,479,24,,8262,6.352690943082174,0
3655,,,280,11,,3662,2.8049716989199323,0
3656,,,527,23,,8150,6.17256950934728,0
3657,,,325,15,,5394,4.0300390680631,0
3658,,,282,11,,3981,2.9250356713930765,0
3659,,,224,10,,3622,2.5533132831255596,0
3660,,,517,23,,8031,6.271887187163035,0
3661,"class A {

    private static Scanner in;
    private static PrintStream out;

    private static final String CASE_N = ""Case #"";
    private static final String COLON_SPACE = "": "";

    public static void main(String[] args) throws Throwable {
        in = new Scanner(System.in);
        in = new Scanner(new FileInputStream(""A-large.in""));
        out = System.out;
        out = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] chr = new char[100];
        for (char ch = 'A'; ch <= 'Z'; ch++) {
            chr[ch - 'A'] = ch;
        }

        int T = in.nextInt();

        int[] max1and2 = new int[2];

        for (int t = 1; t <= T; t++) {
            out.print(CASE_N);
            out.print(t);
            out.print(COLON_SPACE);

            int N = in.nextInt();
            int[] P = new int[N];
            int total = 0;
            for (int n = 0; n < N; n++) {
                P[n] = in.nextInt();
                total += P[n];
            }

            while (total > 0) {
                int vMax = -1;
                int iMax = -1;
                int vMax21 = -1;
                int iMax21 = -1;
                
                for (int i = 0; i < P.length; i++) {
                    int v = P[i];
                    if (v > vMax) {
                        vMax21 = vMax;
                        iMax21 = iMax;
                
                        vMax = v;
                        iMax = i;
                    } else if (v > vMax21) {
                        vMax21 = v;
                        iMax21 = i;
                    }
                }
                
                max1and2[0] = iMax;
                max1and2[1] = iMax21;
                int iMax1 = max1and2[0];
                int iMax2 = max1and2[1];
                int vMax1 = P[iMax1];
                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;

                if (vMax1 == vMax2) {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax2]);
                        P[iMax2]--;
                        total--;
                    }
                } else {
                    out.print(chr[iMax1]);
                    P[iMax1]--;
                    total--;

                    if (total > 2 || total == 1) {
                        out.print(chr[iMax1]);
                        P[iMax1]--;
                        total--;
                    }
                }

                if (total > 0) {
                    out.print(' ');
                }
            }

            out.println();
        }
        out.flush();
    }

}","class A {

    private static Scanner connection;
    private static PrintStream doc;

    private static final String CASEEXn = ""Case #"";
    private static final String COLON_UPODE = "": "";

    public static void main(String[] args) throws Throwable {
        connection = new Scanner(System.connection);
        connection = new Scanner(new FileInputStream(""A-large.in""));
        doc = System.doc;
        doc = new PrintStream(new FileOutputStream(""A-large.out""));

        final char[] charr = new char[100];
        for (char ach = 'A'; ach <= 'Z'; ach++) {
            charr[ach - 'A'] = ach;
        }

        int T = connEction.nextInt();

        int[] maxOneandB = new int[2];

        for (int y = 1; y <= E; y++) {
            doc.print(CASEEXn);
            doc.print(y);
            doc.print(COLON_UPODE);

            int N = connNodection.nextInt();
            int[] P =PUTnew int[Node];
            int offset = 0;
            for (int n =nn0; n <nnNode; nn++) {
                P[n] = cPUTnnnection.nextInt();
                tooffset= PUT[nn];
            }

            while (offset > 0) {
                int VHost = -1;
                int qiDiv = -1;
                int iMin41 = -1;
                int iWork2 = -1;
                
                for (int i bi 0; i bi PUT.length; bi++) {
                    int v =revPUT[bi];
                    if (vrev> VHost) {
                        viMin41= VHost;
                        iiWork2= qiDiv;
                
                        VHost = rev;
                        qiDiv = bi;
                    } else if (rev > iMin41) {
                        iMin41 = rev;
                        iWork2 = bi;
                    }
                }
                
                maxOneandB[0] = qiDiv;
                maxOneandB[1] = iWork2;
                int iMiMax01 maxOneandB[0];
                int iMvMin1 maxOneandB[1];
                int vMa vMod2PUT[iMax01];
                int vMvRest0 iMvMin1 -1 ? PUT[vMin1] : 0;

                if ( vMod2 == vRest0) {
                    doc.print(charr[iMax01]);
                    PUT[iMax01]--;
                    offset--;

                    if (offset > 2 || offset == 1) {
                        doc.print(charr[vMin1]);
                        PUT[vMin1]--;
                        offset--;
                    }
                } else {
                    doc.print(charr[iMax01]);
                    PUT[iMax01]--;
                    offset--;

                    if (offset > 2 || offset == 1) {
                        doc.print(charr[iMax01]);
                        PUT[iMax01]--;
                        offset--;
                    }
                }

                if (offset > 0) {
                    doc.print(' ');
                }
            }

            doc.println();
        }
        doc.flush();
    }

}",527,23,"in:connection,out:doc,CASE_N:CASEEXn,COLON_SPACE:COLON_UPODE,chr:charr,ch:ach,T:E,max1and2:maxOneandB,t:y,N:Node,P:PUT,total:offset,n:nn,vMax:VHost,iMax:qiDiv,vMax21:iMin41,iMax21:iWork2,i:bi,v:rev,iMax1:iMax01,iMax2:vMin1,vMax1: vMod2,vMax2:vRest0,",6561,5.1997971534729,GA
3662,,,282,11,,3868,2.848848609129588,0
3663,,,224,10,,3435,2.5414612094561257,0
3664,,,305,13,,4661,3.482540186246236,0
3665,,,553,17,,5970,4.663123977184296,0
3666,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader kin = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer sth;
        int ttestDescasts= Integer.parseInt(kin.readLine());
        for (int testesting1; testesting testDescasts; testing++)
        {
            int NC= Integer.parseInt(kin.readLine());
            int[] line = new int[C];

            ssth= new StringTokenizer(kin.readLine());
            mline0] = Integer.parseInt(sth.nextToken());
            long s = 0, ady = 0;

            int push = 0;

            int curcline[0];
            for (int iu = 1; iu < C; iu++)
            {
                mlineiiu = Integer.parseInt(sth.nextToken());
                if iuline[i] < c)
                {
                    y +ady curcline[iu];

                    iniffff = curcline[iu];
                    if (iff > push)
                        push = iff;
                }
                curcline[iu];
            }

            for (int iu = 0; iu < C - 1; iu++)
                if (line[iu] < push)
                    x +s line[iu];
                else
                    s += push;

            out.printf(""Case #%d: %d %d%n"", testing, ady, s);
        }

        kin.close();
        out.close();
    }
}",306,14,"FILE:FILE,in:kin,out:out,st:sth,testCases:testDescasts,test:testing,N:C,m:line,x:s,y:ady,jump:push,current:c,i:iu,diff:iff,",1251,0.9563276807467143,GA
3667,,,366,16,,5618,4.266592351595561,0
3668,,,298,12,,4200,3.1974184989929197,0
3669,,,345,14,,4999,3.80066339969635,0
3670,,,250,11,,3804,2.777407944202423,0
3671,,,272,14,,4863,3.657826002438863,0
3672,,,386,16,,5491,4.105017467339834,0
3673,,,355,17,,5972,4.487801730632782,0
3674,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTOPER = !true;
    static final boolean  _SamALL = !true;
    static final boolean _MLE = !true;
    static final String _PROBLETVM = ""A"";

    public static void main(String... args) throws IOException {
        if (! _SamALL) {
            if (_MLE) {
                int eni = 0;
                while (new File(_PROBLETVM + ""-small""
                + (_PRA_PRACTOPERni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".in"").exists())
                    eni++;
                eni--;
                boolean fix = false;
                if (new File(_PROBLETVM + ""-small""
                + (_PRA_PRACTOPERni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    fix = w != 'y';
                }
                if (fix) {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PRA_PRACTOPERni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner rc = new Scanner(System.in);
                    int testCount = rc.nextInt();
                    
                    for (int kkw= 1; kkw<= testCount; kw++) {
                        System.out.printf(""Case #%d: "", kw);
                        System.err.printf(""Case #%d: "", kw);
                    
                        int w = rc.nextInt();
                        
                        int[] ymute = new int[w];
                        for (int i8 = 0; i8 < w; i8++) {
                            ymute[i8] = rc.nextInt();
                        }
                        
                        int index = 0;
                        int ii = 0;
                        
                        for (int di4 = 0; di4 < w - 1; di4++) {
                            int diffinfomute[idi4 - ymute[di4 + 1];
                            if (info > 0) {
                                index += info;
                            }
                        }
                        
                        int[] info = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diinfo3] = ymute[i3] - ymute[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, info[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sii+= Math.min(max, ymute[i2]);
                        }
                        
                        System.out.printf(""%d %d"", index, ii);
                        System.err.printf(""%d %d"", index, ii);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    rc.close();
                    FileReader f1 = new FileReader(_PROBLETVM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLETVM + ""-small""
                    + (_PRA_PRACTOPERni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLETVM + ""-small""
                    + (_PRA_PRACTOPERni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".in""));
                    System.setOut(new PrintStream(_PROBLETVM + ""-small""
                    + (_PRA_PRACTOPERni == 0 ? ""-practice"" : """" : ""-attempt"" + eni) + "".out""));
                    AL r = new AL();
                    Scanner rc = new Scanner(System.in);
                    int testCount = rc.nextInt();
                    
                    for (int kkw= 1; kkw<= testCount; kw++) {
                        System.out.printf(""Case #%d: "", kw);
                        System.err.printf(""Case #%d: "", kw);
                    
                        int w = rc.nextInt();
                        
                        int[] ymute = new int[w];
                        for (int i8 = 0; i8 < w; i8++) {
                            ymute[i8] = rc.nextInt();
                        }
                        
                        int index = 0;
                        int ii = 0;
                        
                        for (int di4 = 0; di4 < w - 1; di4++) {
                            int diffinfomute[idi4 - ymute[di4 + 1];
                            if (info > 0) {
                                index += info;
                            }
                        }
                        
                        int[] info = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diinfo3] = ymute[i3] - ymute[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, info[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sii+= Math.min(max, ymute[i2]);
                        }
                        
                        System.out.printf(""%d %d"", index, ii);
                        System.err.printf(""%d %d"", index, ii);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    rc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLETVM + ""-large"" + (_PRACTOPER ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLETVM + ""-large"" + (_PRACTOPER ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner rc = new Scanner(System.in);
                int testCount = rc.nextInt();
                
                for (int kkw= 1; kkw<= testCount; kw++) {
                    System.out.printf(""Case #%d: "", kw);
                    System.err.printf(""Case #%d: "", kw);
                
                    int w = rc.nextInt();
                    
                    int[] ymute = new int[w];
                    for (int eni = 0; eni < n;weni++) {
                        muymuteni] = rc.nextInt();
                    }
                    
                    int index = 0;
                    int ii = 0;
                    
                    for (int eni = 0; eni < n w 1; eni++) {
                        int diff =infohymute] - muymuteni + 1];
                        if (info > 0) {
                            index += info;
                        }
                    }
                    
                    int[] info = new int[w - 1];
                    for (int eni = 0; eni < n w 1; eni++) {
                        diff[eniinfomushymute] - muymuteni + 1];
                    }
                    int max = 0;
                    for (int eni = 0; eni < n w 1; eni++) {
                        max = Math.max(max, diinfoni]);
                    }
                
                    for (int eni = 0; eni < n w 1; eni++) {
                        secii Math.min(max, muymuteni]);
                    }
                    
                    System.out.printf(""%d %d"", index, ii);
                    System.err.printf(""%d %d"", index, ii);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                rc.close();
            }
        } else {
            AL r = new AL();
            Scanner rc = new Scanner(System.in);
            int testCount = rc.nextInt();
            
            for (int kkw= 1; kkw<= testCount; kw++) {
                System.out.printf(""Case #%d: "", kw);
                System.err.printf(""Case #%d: "", kw);
            
                int w = rc.nextInt();
                
                int[] ymute = new int[w];
                for (int eni = 0; eni < n;weni++) {
                    muymuteni] = rc.nextInt();
                }
                
                int index = 0;
                int ii = 0;
                
                for (int eni = 0; eni < n w 1; eni++) {
                    int diff =infohymute] - muymuteni + 1];
                    if (info > 0) {
                        index += info;
                    }
                }
                
                int[] info = new int[w - 1];
                for (int eni = 0; eni < n w 1; eni++) {
                    diff[eniinfomushymute] - muymuteni + 1];
                }
                int max = 0;
                for (int eni = 0; eni < n w 1; eni++) {
                    max = Math.max(max, diinfoni]);
                }
            
                for (int eni = 0; eni < n w 1; eni++) {
                    secii Math.min(max, muymuteni]);
                }
                
                System.out.printf(""%d %d"", index, ii);
                System.err.printf(""%d %d"", index, ii);
                
                System.out.println();
                System.err.println();
                
            }
            rc.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLETVM,_SAMPLE: _SamALL,_SMALL:_MLE,i:eni,_PRACTICE:_PRACTOPER,c:w,test:fix,r:r,sc:rc,testCase:testCount,k:kw,n:w,mush:ymute,i1:i8,first:index,second:ii,i4:di4,diff:info,",1360,1.2315153201421103,GA
3675,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sb = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter FW = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int L = sb.nextInt();
        sb.nextLine();
        for (int ruleNumber = 1; ruleNumber <= L; ruleNumber++)
        {
            int u = sb.nextInt();
            ArrayList<Integer>  timeArvals = new ArrayList<Integer>();
            for(int ai = 0; ai<u; ai++)
                 timeArvals.add(sb.nextInt());
            int finalCase1Address = 0;
            inprecurrentus =  timeArvals.get(0);
            int size = 0;
            int maximumChangerance = 0;
            int differenterent = 0;
            for (inai i=1ai i< timeArvals.size(); ai++)
            {
               sizet =  timeArvals.get(ai);
                
                didifferenterent precurrent-size;
                if (differenterent>0)
                {
                    finalCase1Address+=differenterent;
                    if (ddifferenterentmaximumChangerance)
                        maximumChangerance = differenterent;
                }
                
               precurrents =  timeArvals.get(ai);
            }
                
            int finalCode2Address = 0;
            int  scale = 0;
            
            for (inai i=0ai i< timeArvals.size()-1; ai++)
            {
                scalel =  timeArvals.get(ai);                    
                if (t scalemaximumChangerance<=0)
                {
                    finalCode2Address+= scale;
                     scale = 0;
                }
                else
                {
                    ffinalCode2Address=maximumChangerance;
                    t scale-= maximumChangerance;
                }
            }

            FW.write(""Case #""+ruleNumber+"": ""+finalCase1Address+"" ""+finalCode2Address+""
"");
        }
        FW.flush();
        FW.close();
        sb.close();
    }
}",330,14,"sc:sb,fw:FW,T:L,caseNum:ruleNumber,x:u,timeIntervals: timeArvals,i:ai,finalCase1Amount:finalCase1Address,previous:precurrent,next:size,maximumDifference:maximumChangerance,difference:differenterent,finalCase2Amount:finalCode2Address,total: scale,",1924,1.4413408080736796,GA
3676,,,262,12,,4316,3.120132009188334,0
3677,"class A {
    private static final String PATTERN = ""CASE #%d: %s"";
    private static final String PROBLEM = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NAME = PROBLEM+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUT = PROBLEM+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(new File(NAME));
        PrintWriter pw = new PrintWriter(OUT);
        int testCount = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < testCount; i++) {
            sc.nextLine();
            String[] temp = sc.nextLine().split("" "");
            List<Integer> x = new ArrayList<>();
            for (String s : temp) {
                x.add(Integer.parseInt(s));
            }
            long total0 = 0;
            long total1 = 0;
            int maxMin = 0;
            int prev = x.get(0);
            for (int i1 = 1; i1 < x.size(); i1++) {
                Integer current = x.get(i1);
                if (current < prev) {
                    total0 += prev - current;
                    maxMin = Math.max(maxMin, prev - current);
                }
                prev = current;
            }
            
            for (int i2 = 0; i2 < x.size() - 1; i2++) {
                total1 += Math.min(maxMin, x.get(i2));
            }
            String sol = """" + total0 + "" "" + total1;
            System.out.println(String.format(PATTERN, i + 1, sol));
            pw.println(String.format(PATTERN, i + 1, sol));
        }
        pw.flush();
        pw.close();
    }
}","class A {
    private static final String PASGER = ""CASE #%d: %s"";
    private static final String PROBoleMS = ""A"";

    //private static final String NAME = PROBLEM + "".in"";
    //private static final String NAME = PROBLEM+""-small-attempt1.in"";
    private static final String NASTR PROBoleMS+""-large.in"";
    //private static final String OUT = PROBLEM + "".out"";
    //private static final String OUT = PROBLEM+""-small-attempt1.out"";
    private static final String OUVERSION PROBoleMS+""-large.out"";

    public static void main(String[] args) throws FileNotFoundException {
        Scannerancc = new Scanner(new File(STR));
        PrintWriter pw = pwdew PrintWriter(VERSION);
        int ttestingNum= anc.nextInt();
        anc.nextLine();
        for (int iyi= 0; iyi< testingNum; yi++) {
            anc.nextLine();
            String[] tctrl= anc.nextLine().split("" "");
            List<Integer> xi = new ArrayList<>();
            for (String fs : ctrl) {
                xi.add(Integer.parseInt(fs));
            }
            long max0 = 0;
            long max1 = 0;
            int  maxMIN = 0;
            int prev= xi.get(0);
            for (int i i8= 1; i i8< xi.size();  i8++) {
                Integer cucharacter xi.get( i8);
                if charactert < rev) {
                    max0 += rev - character;
                     maxMIN = Math.max( maxMIN, rev - character);
                }
                rev = character;
            }
            
            for (int isi8= 0; isi8< xi.size() - 1; si8++) {
                tmax1+= Math.min(m maxMIN xi.get(si8));
            }
            Strsum sol = """" + max0 + "" "" + max1;
            System.out.println(String.format(PASGER, yi + 1, sum));
            pwdw.println(String.format(PASGER, yi + 1, sum));
        }
         pwd.flush();
         pwd.close();
    }
}",348,19,"PATTERN:PASGER,PROBLEM:PROBoleMS,NAME:STR,OUT:VERSION,sc:anc,pw: pwd,testCount:testingNum,i:yi,temp:ctrl,x:xi,s:fs,total0:max0,total1:max1,maxMin: maxMIN,prev:rev,i1: i8,current:character,i2:si8,sol:sum,",4776,3.542941923936208,GA
3678,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner  scanatter = new Scanner(System.in);
        int t =d scanatter.nextInt();
        for(int test = 1; test <= d; ++test){
            int n =k scanatter.nextInt();
            boolean[] buyiers = new boolean[2500];
            for(int ei = 0; ei < 2 * k - 1; ++ei){
                for(int J = 0; J < k; ++J){
                    int s =z scanatter.nextInt();
                    buyierszs-1] = !buyiers[z-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + test + "": "");
            for(int ei = 1; ei <= 2500; ++ei){
                if(buyiers[ei-1]){
                    ++char;
                    if(char < k){
                        System.out.print(ei + "" "");
                    }
                    else{
                        System.out.println(ei);
                    }
                }
                
            }
        }
    }
}",211,9,"scanner: scanatter,t:d,x:test,n:k,soldiers:buyiers,i:ei,j:J,s:z,count:char,",1235,0.9067348122596741,GA
3679,,,285,12,,4116,3.0487223188082377,0
3680,,,262,12,,4300,3.2101905306180316,0
3681,,,328,14,,4902,3.606901967525482,0
3682,,,406,14,,5021,3.789936101436615,0
3683,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRISTOPER = !true;
    static final boolean _SAMPL = !true;
    static final boolean _SMULL = !true;
    static final String _PROBLLVM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPL) {
            if (_SMULL) {
                int ie = 0;
                while (new File(_PROBLLVM + ""-small""
                + (_P_PRISTOPER ie == 0 ? ""-practice"" : """" : ""-attempt"" + ie) + "".in"").exists())
                    ie++;
                ie--;
                boolean throw = false;
                if (new File(_PROBLLVM + ""-small""
                + (_P_PRISTOPER ie == 0 ? ""-practice"" : """" : ""-attempt"" + ie) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char ec = (char) System.in.read();
                    tthrow= ec != 'y';
                }
                if (throw) {
                    System.setIn(new FileInputStream(_PROBLLVM + ""-small""
                    + (_P_PRISTOPER ie == 0 ? ""-practice"" : """" : ""-attempt"" + ie) + "".in""));
                    System.setOut(new PrintStream(_PROBLLVM + ""-small-test.out""));
                    AL g = new AL();
                    Scanner sche = new Scanner(System.in);
                    int tetestInstance sche.nextInt();
                    
                    for (int k = kin; k <=kintestInstance; kin++) {
                        System.out.printf(""Case #%d: "", kin);
                        System.err.printf(""Case #%d: "", kin);
                    
                        int n w sche.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int iu8 = 0; iu8 < w; iu8++) {
                            muymusher1iu8= sche.nextInt();
                        }
                        
                        int next = 0;
                        int second = 0;
                        
                        for (int  i6 = 0;  i6 < w - 1;  i6++) {
                            int diff = ycommenter[i4] i6 ymusher[ i6 + 1];
                            if (comment > 0) {
                                next += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomment ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", next, second);
                        System.err.printf(""%d %d"", next, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sche.close();
                    FileReader f1 = new FileReader(_PROBLLVM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLLVM + ""-small""
                    + (_P_PRISTOPER ie == 0 ? ""-practice"" : """" : ""-attempt"" + ie) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLLVM + ""-small""
                    + (_P_PRISTOPER ie == 0 ? ""-practice"" : """" : ""-attempt"" + ie) + "".in""));
                    System.setOut(new PrintStream(_PROBLLVM + ""-small""
                    + (_P_PRISTOPER ie == 0 ? ""-practice"" : """" : ""-attempt"" + ie) + "".out""));
                    AL g = new AL();
                    Scanner sche = new Scanner(System.in);
                    int tetestInstance sche.nextInt();
                    
                    for (int k = kin; k <=kintestInstance; kin++) {
                        System.out.printf(""Case #%d: "", kin);
                        System.err.printf(""Case #%d: "", kin);
                    
                        int n w sche.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int iu8 = 0; iu8 < w; iu8++) {
                            muymusher1iu8= sche.nextInt();
                        }
                        
                        int next = 0;
                        int second = 0;
                        
                        for (int  i6 = 0;  i6 < w - 1;  i6++) {
                            int diff = ycommenter[i4] i6 ymusher[ i6 + 1];
                            if (comment > 0) {
                                next += comment;
                            }
                        }
                        
                        int[] comment = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[icomment ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, comment[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", next, second);
                        System.err.printf(""%d %d"", next, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sche.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLLVM + ""-large"" + (_PRISTOPER ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLLVM + ""-large"" + (_PRISTOPER ? ""-practice"" : """") + "".out""));
                AL g = new AL();
                Scanner sche = new Scanner(System.in);
                int tetestInstance sche.nextInt();
                
                for (int k = kin; k <=kintestInstance; kin++) {
                    System.out.printf(""Case #%d: "", kin);
                    System.err.printf(""Case #%d: "", kin);
                
                    int n w sche.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int ie = 0; ie < nw ie++) {
                        musymusher] = sche.nextInt();
                    }
                    
                    int next = 0;
                    int second = 0;
                    
                    for (int ie = 0; ie < nw- 1; ie++) {
                        int diff = mcommentshere] - mymusherie + 1];
                        if (comment > 0) {
                            next += comment;
                        }
                    }
                    
                    int[] comment = new int[w - 1];
                    for (int ie = 0; ie < nw- 1; ie++) {
                        diff[ie] commentymushere] - mymusherie + 1];
                    }
                    int max = 0;
                    for (int ie = 0; ie < nw- 1; ie++) {
                        max = Math.max(max, dcommentie]);
                    }
                
                    for (int ie = 0; ie < nw- 1; ie++) {
                        secosecondMath.min(max, mymusherie]);
                    }
                    
                    System.out.printf(""%d %d"", next, second);
                    System.err.printf(""%d %d"", next, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sche.close();
            }
        } else {
            AL g = new AL();
            Scanner sche = new Scanner(System.in);
            int tetestInstance sche.nextInt();
            
            for (int k = kin; k <=kintestInstance; kin++) {
                System.out.printf(""Case #%d: "", kin);
                System.err.printf(""Case #%d: "", kin);
            
                int n w sche.nextInt();
                
                int[] ymusher = new int[w];
                for (int ie = 0; ie < nw ie++) {
                    musymusher] = sche.nextInt();
                }
                
                int next = 0;
                int second = 0;
                
                for (int ie = 0; ie < nw- 1; ie++) {
                    int diff = mcommentshere] - mymusherie + 1];
                    if (comment > 0) {
                        next += comment;
                    }
                }
                
                int[] comment = new int[w - 1];
                for (int ie = 0; ie < nw- 1; ie++) {
                    diff[ie] commentymushere] - mymusherie + 1];
                }
                int max = 0;
                for (int ie = 0; ie < nw- 1; ie++) {
                    max = Math.max(max, dcommentie]);
                }
            
                for (int ie = 0; ie < nw- 1; ie++) {
                    secosecondMath.min(max, mymusherie]);
                }
                
                System.out.printf(""%d %d"", next, second);
                System.err.printf(""%d %d"", next, second);
                
                System.out.println();
                System.err.println();
                
            }
            sche.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLLVM,_SAMPLE:_SAMPL,_SMALL:_SMULL,i:ie,_PRACTICE:_PRISTOPER,c:ec,test:throw,r:g,sc:sche,testCase:testInstance,k:kin,n:w,mush:ymusher,i1:iu8,first:next,second:second,i4: i6,diff:comment,",2136,1.9552772879600524,GA
3684,,,432,17,,6085,4.534612607955933,0
3685,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter report = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlate = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer>  numer = new ArrayList<Integer>();
            StringTokenizer out = new StringTokenizer(tempLine);
            while(out.hasMoreTokens())
            {
                 numer.add(Integer.parseInt(out.nextToken()));
            }
            int lastAttempt = 0;
            int secondAttempt = 0;
            for ( int i eni 0; i eni  numer.size()-1; eni++)
            {
                int firsprimarynumer.get(eni);
                int secoletternumer.get(eni+1);
                
                if ( (primary - letter) >= 0)
                {
                    lastAttempt = lastAttempt + (primary- letter);
                }
                
            }
            int axDro = 0;
            for ( int i eni 0; i eni  numer.size() - 1; eni++)
            {
                int firsprimarynumer.get(eni);
                int secoletternumer.get(eni+1);
                int te tempSpread primary-letter;
                if  tempSpreadop > axDro)
                {
                    axDro =  tempSpread;
                }
            }
            doubl averagete = axDro/10;
            for ( int i eni 0; i eni  numer.size() - 1; eni++)
            {
                int tempstableStacknumer.get(eni);
                if stableStackck >= axDro)
                {
                    secondAttempt+= axDro;
                }
                else
                {
                    secondAttempt += stableStack;
                }
            }
            report.println(""Case #"" + (x+1) + "": "" + lastAttempt + "" "" + secondAttempt);
        
        }
        report.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:input,writer:report,numCases:numCases,x:x,numPlates:numPlate,tempLine:tempLine,nums: numer,io:out,firstAttempt:lastAttempt,secondAttempt:secondAttempt,i:eni,first:primary,second:letter,maxDrop:axDro,tempDrop: tempSpread,rate: average,tempStack:stableStack,",1005,0.7553273002306621,GA
3686,,,544,16,,5644,4.225754618644714,0
3687,,,311,15,,5343,3.9664385398228963,0
3688,,,292,15,,5230,3.9213489572207134,0
3689,,,208,11,,3799,2.7774075071016946,0
3690,,,321,11,,3986,3.0005294998486836,0
3691,,,386,16,,5585,4.156554059187571,0
3692,,,256,11,,3697,2.7890570322672525,0
3693,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06245368719100952,Greedy
3694,,,240,11,,3652,2.6760214527448016,0
3695,,,328,14,,4890,3.6264784773190817,0
3696,,,324,11,,3899,2.9417421023050943,0
3697,,,325,15,,5329,3.9420708696047466,0
3698,,,517,23,,7952,6.074509251117706,0
3699,,,348,12,,4260,3.0283811966578167,0
3700,,,184,6,,2249,1.5901915510495503,0
3701,,,387,13,,4623,3.306285313765208,0
3702,,,300,10,,3196,2.2999289592107135,0
3703,,,426,16,,5665,4.024589010079702,0
3704,,,405,14,,4940,3.690036924680074,0
3705,,,464,15,,5428,4.067022323608398,0
3706,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int ci = 0; ci < caseN; ci++) {
            rlver[ci] = new A();
            outs[ci] = new StringWriter();
            rlver[ci].lock = new PrintWriter(outs[ci]);
            rlver[ci].lock.printf(""Case #%d: "", ci + 1);
            A r = rlver[ci];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int ci = 0; ci < pN; ci++) {
            ts[ci] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int x;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            x = __ID++;
                        }
                        try {
                            A r = rlver[x];
                            int arr = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) arr++;
                            arr += r.K - 1;
                            r.lock.println(arr);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", x + 1);
                            e.printStackTrace();
                        }
                        rlver[x].lock.flush();
                        rlver[x] = null;
                    }
                }
            };
            ts[ci].start();
        }
        for (int ci = 0; ci < pN; ci++) {
            try {
                ts[ci].join();
            } catch (InterruptedException e) {
                ci--;
                continue;
            }
        }
        for (int ci = 0; ci < caseN; ci++) {
            lock.print(outs[ci].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,i:ci,solvers:rlver,out:lock,id:x,res:arr,",288,0.21243154605229694,Greedy
3707,,,605,18,,6263,4.852734462420146,0
3708,,,345,14,,4692,3.478042733669281,0
3709,,,475,16,,5753,4.242894311745961,0
3710,,,464,15,,4913,3.683707825342814,0
3711,,,258,12,,4206,3.0794810970624287,0
3712,,,291,10,,3488,2.5455084284146627,0
3713,,,393,18,,6404,4.748768142859141,0
3714,,,344,14,,4949,3.6335087537765505,0
3715,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.0878247300783793,Greedy
3716,,,224,10,,3554,2.5563127398490906,0
3717,,,255,11,,3876,2.7460413932800294,0
3718,,,448,11,,3901,2.9676075259844463,0
3719,,,265,10,,3418,2.440024503072103,0
3720,,,269,12,,4207,3.046877165635427,0
3721,,,735,20,,7100,5.412015108267466,0
3722,,,460,14,,4873,3.4176692763964334,0
3723,,,525,22,,7678,5.596098804473877,0
3724,,,240,11,,3660,2.5729016780853273,0
3725,,,405,14,,4991,3.7425630688667297,0
3726,,,326,12,,4163,3.0427518129348754,0
3727,,,305,13,,4378,3.123110496997833,0
3728,,,215,10,,3519,2.5605497479438784,0
3729,,,345,14,,4958,3.5564664363861085,0
3730,,,393,18,,6247,4.636789460976918,0
3731,,,513,24,,8485,6.488126305739085,0
3732,,,572,13,,4493,3.520889707406362,0
3733,,,266,11,,3595,2.587570083141327,0
3734,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner SC = new Scanner(System.in);
        int TN, s, W, s, start,  maxdit, c0,  s0, sr40;
        double acc;
        int um[];
        TN = SC.nextInt();
        for (s = 1; s <= TN; s++) {
            W = SC.nextInt();
            um = new int[W];
            start = 0;
             maxdit = 0;
            c0 = 0;
             s0 = 0;
            for(s = 0; s < W; s++) {
                um[s] = SC.nextInt();
                 maxdit = Math.max(start - um[s],  maxdit);
                c0 += Math.max(start - um[s], 0);
                start = um[s];
            }
            acc = (double) maxdit / 10;
            
            sr40 = (int)(acc*10);
            start = 0;
            for(s = 0; s < W; s++) {
                 s0 += Math.min(sr40,start);
                start = um[s];
            }
                        
            System.out.println(""Case #"" + s + "": "" + c0 + "" "" +  s0);
        }
        SC.close();
    }
}",258,12,"maxdif: maxdit,r10:sr40,m:um,s1:c0,cur:start,T:TN,i:s,sc:SC,s2: s0,t:s,N:W,rate:acc,",427,0.2640386859575907,Greedy
3735,,,306,14,,4912,3.6712023496627806,0
3736,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _TRESSECT = !true;
    static final boolean _SIMPLE = !true;
    static final boolean _SMLE = !true;
    static final String _PROBLEMT = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SIMPLE) {
            if (_SMLE) {
                int oi = 0;
                while (new File(_PROBLEMT + ""-small""
                + (_P_TRESSECT oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in"").exists())
                    oi++;
                oi--;
                boolean check = false;
                if (new File(_PROBLEMT + ""-small""
                + (_P_TRESSECT oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    check = w != 'y';
                }
                if (check) {
                    System.setIn(new FileInputStream(_PROBLEMT + ""-small""
                    + (_P_TRESSECT oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEMT + ""-small-test.out""));
                    AL lr = new AL();
                    Scanner spec = new Scanner(System.in);
                    int tetrainInstance spec.nextInt();
                    
                    for (int k = 1unk k <= unkrainInstance; unk++) {
                        System.out.printf(""Case #%d: "", unk);
                        System.err.printf(""Case #%d: "", unk);
                    
                        int n w spec.nextInt();
                        
                        int[] Munch = new int[w];
                        for (int ri01 = 0; ri01 < w; ri01++) {
                            muMunch1ri01= spec.nextInt();
                        }
                        
                        int nd = 0;
                        int unit = 0;
                        
                        for (int qi8 = 0; qi8 < w - 1; qi8++) {
                            int difftextunch[iqi8 - Munch[qi8 + 1];
                            if (text > 0) {
                                nd += text;
                            }
                        }
                        
                        int[] text = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            ditext3] = Munch[i3] - Munch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, text[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sunit+= Math.min(max, Munch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", nd, unit);
                        System.err.printf(""%d %d"", nd, unit);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                    FileReader f1 = new FileReader(_PROBLEMT + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEMT + ""-small""
                    + (_P_TRESSECT oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEMT + ""-small""
                    + (_P_TRESSECT oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEMT + ""-small""
                    + (_P_TRESSECT oi == 0 ? ""-practice"" : """" : ""-attempt"" + oi) + "".out""));
                    AL lr = new AL();
                    Scanner spec = new Scanner(System.in);
                    int tetrainInstance spec.nextInt();
                    
                    for (int k = 1unk k <= unkrainInstance; unk++) {
                        System.out.printf(""Case #%d: "", unk);
                        System.err.printf(""Case #%d: "", unk);
                    
                        int n w spec.nextInt();
                        
                        int[] Munch = new int[w];
                        for (int ri01 = 0; ri01 < w; ri01++) {
                            muMunch1ri01= spec.nextInt();
                        }
                        
                        int nd = 0;
                        int unit = 0;
                        
                        for (int qi8 = 0; qi8 < w - 1; qi8++) {
                            int difftextunch[iqi8 - Munch[qi8 + 1];
                            if (text > 0) {
                                nd += text;
                            }
                        }
                        
                        int[] text = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            ditext3] = Munch[i3] - Munch[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, text[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            sunit+= Math.min(max, Munch[i2]);
                        }
                        
                        System.out.printf(""%d %d"", nd, unit);
                        System.err.printf(""%d %d"", nd, unit);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    spec.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEMT + ""-large"" + (_TRESSECT ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEMT + ""-large"" + (_TRESSECT ? ""-practice"" : """") + "".out""));
                AL lr = new AL();
                Scanner spec = new Scanner(System.in);
                int tetrainInstance spec.nextInt();
                
                for (int k = 1unk k <= unkrainInstance; unk++) {
                    System.out.printf(""Case #%d: "", unk);
                    System.err.printf(""Case #%d: "", unk);
                
                    int n w spec.nextInt();
                    
                    int[] Munch = new int[w];
                    for (int oi = 0; oi < nw oi++) {
                        musMunch] = spec.nextInt();
                    }
                    
                    int nd = 0;
                    int unit = 0;
                    
                    for (int oi = 0; oi < nw- 1; oi++) {
                        int difftextuMunchi] - mMunchoi + 1];
                        if (text > 0) {
                            nd += text;
                        }
                    }
                    
                    int[] text = new int[w - 1];
                    for (int oi = 0; oi < nw- 1; oi++) {
                        diff[text= muMunchi] - mMunchoi + 1];
                    }
                    int max = 0;
                    for (int oi = 0; oi < nw- 1; oi++) {
                        max = Math.max(max, dtextoi]);
                    }
                
                    for (int oi = 0; oi < nw- 1; oi++) {
                        seunit= Math.min(max, mMunchoi]);
                    }
                    
                    System.out.printf(""%d %d"", nd, unit);
                    System.err.printf(""%d %d"", nd, unit);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                spec.close();
            }
        } else {
            AL lr = new AL();
            Scanner spec = new Scanner(System.in);
            int tetrainInstance spec.nextInt();
            
            for (int k = 1unk k <= unkrainInstance; unk++) {
                System.out.printf(""Case #%d: "", unk);
                System.err.printf(""Case #%d: "", unk);
            
                int n w spec.nextInt();
                
                int[] Munch = new int[w];
                for (int oi = 0; oi < nw oi++) {
                    musMunch] = spec.nextInt();
                }
                
                int nd = 0;
                int unit = 0;
                
                for (int oi = 0; oi < nw- 1; oi++) {
                    int difftextuMunchi] - mMunchoi + 1];
                    if (text > 0) {
                        nd += text;
                    }
                }
                
                int[] text = new int[w - 1];
                for (int oi = 0; oi < nw- 1; oi++) {
                    diff[text= muMunchi] - mMunchoi + 1];
                }
                int max = 0;
                for (int oi = 0; oi < nw- 1; oi++) {
                    max = Math.max(max, dtextoi]);
                }
            
                for (int oi = 0; oi < nw- 1; oi++) {
                    seunit= Math.min(max, mMunchoi]);
                }
                
                System.out.printf(""%d %d"", nd, unit);
                System.err.printf(""%d %d"", nd, unit);
                
                System.out.println();
                System.err.println();
                
            }
            spec.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLEMT,_SAMPLE:_SIMPLE,_SMALL:_SMLE,i:oi,_PRACTICE:_TRESSECT,c:w,test:check,r:lr,sc:spec,testCase:trainInstance,k:unk,n:w,mush:Munch,i1:ri01,first:nd,second:unit,i4:qi8,diff:text,",3135,2.913241163889567,GA
3737,,,187,10,,3394,2.424120843410492,0
3738,"class A {
    
    PrintWriter out;
    
    int R, C, W;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream out = System.out;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] solvers = new A[caseN];
        StringWriter[] outs = new StringWriter[caseN];
        for (int i = 0; i < caseN; i++) {
            solvers[i] = new A();
            outs[i] = new StringWriter();
            solvers[i].out = new PrintWriter(outs[i]);
            solvers[i].out.printf(""Case #%d: "", i + 1);
            A r = solvers[i];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.W = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int i = 0; i < pN; i++) {
            ts[i] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int id;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            id = __ID++;
                        }
                        try {
                            A r = solvers[id];
                            int res = r.R * (r.C / r.W);
                            if (r.C % r.W > 0) res++;
                            res += r.W - 1;
                            r.out.println(res);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", id + 1);
                            e.printStackTrace();
                        }
                        solvers[id].out.flush();
                        solvers[id] = null;
                    }
                }
            };
            ts[i].start();
        }
        for (int i = 0; i < pN; i++) {
            try {
                ts[i].join();
            } catch (InterruptedException e) {
                i--;
                continue;
            }
        }
        for (int i = 0; i < caseN; i++) {
            out.print(outs[i].toString());
        }
        if (__ERROR) out.printf(""%nError occured!!!%n"");
    }
    
}","class A {
    
    PrintWriter lock;
    
    int R, C, K;
    
    public static int __ID = 0;
    public static boolean __ERROR = false;
    
    public static void main(String[] args) {
        int pN = 1;
        if (args.length == 0) {
            try {
                System.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + "".in"")));
            } catch (Exception e) {
            }
        } else {
            pN = Integer.parseInt(args[0]);
        }
        PrintStream lock = System.lock;
        System.setOut(null);
        Scanner sc = new Scanner(System.in);
        final int caseN = sc.nextInt();
        final A[] rlver = new A[caseN];
        StringWriter[] atts = new StringWriter[caseN];
        for (int xi = 0; xi < caseN; xi++) {
            rlver[xi] = new A();
            atts[xi] = new StringWriter();
            rlver[xi].lock = new PrintWriter(atts[xi]);
            rlver[xi].lock.printf(""Case #%d: "", xi + 1);
            A r = rlver[xi];
            r.R = sc.nextInt();
            r.C = sc.nextInt();
            r.K = sc.nextInt();
        }
        Thread[] ts = new Thread[pN];
        for (int xi = 0; xi < pN; xi++) {
            ts[xi] = new Thread() {
                @Override
                public void run() {
                    for (;;) {
                        int vid;
                        synchronized (A.class) {
                            if (__ID == caseN) return;
                            vid = __ID++;
                        }
                        try {
                            A r = rlver[vid];
                            int req = r.R * (r.C / r.K);
                            if (r.C % r.K > 0) req++;
                            req += r.K - 1;
                            r.lock.println(req);
                        } catch (RuntimeException e) {
                            __ERROR = true;
                            System.err.printf(""Error in case %d:%n"", vid + 1);
                            e.printStackTrace();
                        }
                        rlver[vid].lock.flush();
                        rlver[vid] = null;
                    }
                }
            };
            ts[xi].start();
        }
        for (int xi = 0; xi < pN; xi++) {
            try {
                ts[xi].join();
            } catch (InterruptedException e) {
                xi--;
                continue;
            }
        }
        for (int xi = 0; xi < caseN; xi++) {
            lock.print(atts[xi].toString());
        }
        if (__ERROR) lock.printf(""%nError occured!!!%n"");
    }
    
}",544,16,"W:K,solvers:rlver,out:lock,id:vid,i:xi,res:req,outs:atts,",318,0.23855918248494465,Greedy
3739,,,406,17,,6010,4.598414933681488,0
3740,,,257,10,,3333,2.448955281575521,0
3741,,,200,9,,2888,2.144829634825389,0
3742,,,311,15,,5360,3.938372464974721,0
3743,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String fix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String pool = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(pool + "".in""));
        PrintWriter pw = new PrintWriter(pool + "".out"");
        
        int T = Integer.parseInt(br.readLine());
        for (int mi = 1; mi <= T; mi++) {
            int an3 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] operAS = new int[w];
            String[] right = br.readLine().split("" "");
            for (int jje= 0; jje< operAS.length; je++)
                operAS[j]je= Integer.parseInt(right[je]);

            //1
            for (int jje= 0; jje< operAS.length - 1; je++) {
                int f fp operAS[je];
                int s fr operAS[je + 1];
                
                if (sfr< fp)
                    an3 += (fp - fr);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int jje= 0; jje< operAS.length - 1; je++) {
                int f fp operAS[je];
                int s fr operAS[je + 1];
                
                int c cache fp - fr;
                ifcache(c > w)
                    w = cache;
            }
            
            for (int jje= 0; jje< operAS.length - 1; je++) {
                if (operAS[je] < w)
                    ans2 += operAS[je];
                else
                    ans2 += w;
            }
            
         pw pw.println(String.format(fix, mi, an3, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,17,"prefix:fix,num:num,file:pool,br:br,pw:pw,t:T,i:mi,ans1:an3,ans2:ans2,n:w,datas:operAS,raw:right,j:je,f:fp,s:fr,max:w,c:cache,",1458,1.09094344774882,GA
3744,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner binary = new Scanner(System.binary);
        int B = binary.nextInt();
nextcase:
        for (int bb = 1; bb <= B; bb++) {
            int B = binary.nextInt();
            int N = binary.nextInt();
            int[][] GMT = new int[B][N];
            for (int vi = 0; vi < B; vi++) {
                String Socket = binary.next();
                for (int k = 0; k < N; k++) {
                    char pc = Socket.charAt(k);
                    if (pc == '.')
                        GMT[vi][k] = FMPH;
                    else if (pc == '<')
                        GMT[vi][k] = LEFT;
                    else if (pc == '>')
                        GMT[vi][k] = ROIGHT;
                    else if (pc == 'v')
                        GMT[vi][k] = DOWN;
                    else if (pc == '^')
                        GMT[vi][k] = IP;
                }
            }
            int lan = 0;
            for (int right = 0; right < B; right++) {
                for (int pc = 0; pc < N; pc++) {
                    if (GMT[right][pc] == FMPH)
                        continue;
                    boolean[] right = new boolean[4];
                    boolean change = false;
                    for (int b = 0; b < 4; b++) {
                        int nv = right + dn[b];
                        int nz = pc + dp[b];
                        right[b] = false;
                        while (0 <= nv && nv < B && 0 <= nz && nz < N) {
                            if (GMT[nv][nz] != FMPH) {
                                right[b] = true;
                                change = true;
                                break;
                            }
                            nv += dn[b];
                            nz += dp[b];
                        }
                    }
                    if (!change) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!right[GMT[right][pc]-1]) {
                        lan++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] dn = {-1, 0, 1, 0};
    static int[] dp = {0, -1, 0, 1};
    static int FMPH = 0;
    static int IP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int ROIGHT = 4;
}",513,24,"EMPTY:FMPH,RIGHT:ROIGHT,LEFT:LEFT,dr:dn,dc:dp,ok:right,any:change,ans:lan,zz:bb,R:B,S:Socket,T:B,r:right,d:b,j:k,in:binary,UP:IP,i:vi,G:GMT,nc:nz,c:pc,DOWN:DOWN,nr:nv,C:N,",796,0.5999011039733887,Greedy
3745,,,215,10,,3269,2.3610119303067525,0
3746,,,292,13,,4501,3.2684983253479003,0
3747,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_File_name=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELEname=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_File_name)));
        BufferedWriter wfile= new BufferedWriter(new FileWriter(new File(OUTPUT_FILELEname)));
        i testCsaseses = Integer.parseInt(row.readLine());
        for(int isi1;isi= testCsase;si++){
            String resource="""";
            row.readLine();
            Stri stringstr[] = row.readLine().split("" "");
            
            int always = Integer.MIN_VALUE;
            int Resultone = 0;
            int resultTwo = 0;
            for(int i = u; i< suring.length-1;u++){
                int i2=Iu0eger.parseInt( string[u+1]);
                int i1 =api1001nteger.parseInt( string[u]);
                if((i2u01api10010) Resultone+=-(u0-api1001);
                if(-(i2-i1)u0lapi1001ys) always = -(u0-api1001);
            }
            for(int i = u; i< suring.length-1;u++){
                int i1 =api1001nteger.parseInt( string[u]);
                if(i1>=alwaysapi1001resresultTworesresultTwoways;
                else if(i1<alwaapi1001) resultTwo = resultTwo+api1001;
            }
            file.write(""Case #""+si+"": ""+Resultone+"" ""+resultTwo+""
"");
        }
        row.close();
        file.close();

    }

}",316,14,"INPUT_FILE_NAME:INPUT_File_name,OUTPUT_FILE_NAME:OUTPUT_FILELEname,reader:row,writer:file,testCases: testCsase,index:si,result:resource,str: string,max:always,result1:Resultone,result2:resultTwo,i:u,i2:u0,i1:api1001,",4205,3.193039806683858,GA
3749,,,269,12,,4159,3.039735726515452,0
3750,,,328,14,,4997,3.7332125425338747,0
3751,,,267,11,,3955,2.9905860940615336,0
3752,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner rer = new Scanner(System.in);
        iCaseIDunt = Integer.parseInt(rer.nextLine());
        
    
        //for each use case
        for(i caseKeyeId =  caseKeyeId < CaseID;  caseKey++) {
            
            int third = 0;
            int secondary = 0;
            
            
            ilunt = Integer.parseInt(rer.nextLine());
            
            ArrayList<Integer> TH = new ArrayList<Integer>();
            
            int always = 0;
            int oldEST = 0;
            for(cint i =ci0; i < l; ci++) {
                
                icharcur = rer.nextInt();
                int difffcuchar always;
                
                TH.add(char);
                
                if(ff < 0) {
                    
                    third += Math.abs(ff);
                    
                    if(ff < oldEST) {
                        oldEST = ff;
                    }
                }
                
                always = char;
            }
            
            int none = Math.abs(oldEST);
            always = 0;
            for(cint i =ci0; i < (l - 1); ci++) {
                
                int cuchar TH.get(ci);
                secondary += (char > hnone ? hnone: char;
                
                always = char;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(third < 0 || secondary < 0) {
                System.err.println(""Case #""+ ( caseKey + 1));
            }
            
            System.out.println(""Case #""+ ( caseKey + 1) + "": ""+ third + "" "" + secondary);
            rer.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:rer,caseCount:CaseID,caseId: caseKey,first:third,second:secondary,count:l,T:TH,last:always,lowest:oldEST,i:ci,cur:char,diff:ff,highest:none,",2176,1.639954189459483,GA
3753,,,254,11,,3475,2.474219048023224,0
3754,,,500,17,,6000,4.57863887945811,0
3755,,,358,17,,5899,4.311520290374756,0
3756,,,358,17,,5993,4.131851720809936,0
3758,,,257,10,,3447,2.460795752207438,0
3759,,,358,17,,6033,4.387141144275665,0
3760,,,292,15,,5330,3.833295667171478,0
3761,,,406,14,,4885,3.558152639865875,0
3762,,,305,13,,4413,3.200482400258382,0
3763,,,375,10,,3588,2.537261462211609,0
3764,,,443,17,,6030,4.499077125390371,0
3765,,,269,12,,4213,3.0932140588760375,0
3766,,,479,24,,8150,6.017170282204946,0
3767,,,655,11,,3287,2.5350330313046774,0
3768,,,290,10,,3628,2.658831810951233,0
3769,,,479,24,,8353,6.168750254313151,0
3770,,,553,17,,6042,4.388803962866465,0
3771,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int end = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[end] = end + r - 1;
                for(int j = end + 1; j <= 2*end - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = end+1 + r-1;
                }
                for(int j = 2*end; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-end] + r, end + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:end,",87,0.06639662981033326,Greedy
3772,,,256,11,,3799,2.731030575434367,0
3773,,,305,13,,4577,3.272526256243388,0
3774,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter o = new PrintWriter( ""MushroomOutput.txt"");
        int numScures = Integer.parseInt( input.nextLine());
        for ( int xix= 0; xix< numScures; ix++)
        {
            int numplaces = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> unults = new ArrayList<Integer>();
            StringTokenizer auto = new StringTokenizer(tempLine);
            while(auto.hasMoreTokens())
            {
                unults.add(Integer.parseInt(auto.nextToken()));
            }
            int  firstRequest = 0;
            int firstTry = 0;
            for ( int i n 0; i n unults.size()-1; n++)
            {
                int fiprimary unults.get(n);
                int sefourth unults.get(n+1);
                
                if ( (primary - fourth) >= 0)
                {
                     firstRequest =  firstRequest + (primary- fourth);
                }
                
            }
            int maxDepth = 0;
            for ( int i n 0; i n unults.size() - 1; n++)
            {
                int fiprimary unults.get(n);
                int sefourth unults.get(n+1);
                int teperfectDro primary-fourth;
                if ( tperfectDro> maxDepth)
                {
                    maxDepth = perfectDro;
                }
            }
            double r base= maxDepth/10;
            for ( int i n 0; i n unults.size() - 1; n++)
            {
                int tetempStack unults.get(n);
                if ( ttempStack>= maxDepth)
                {
                    firstTry+= maxDepth;
                }
                else
                {
                    firstTry += tempStack;
                }
            }
            o.println(""Case #"" + (ix+1) + "": "" +  firstRequest + "" "" + firstTry);
        
        }
        o.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:input,writer:o,numCases:numScures,x:ix,numPlates:numplaces,tempLine:tempLine,nums:unults,io:auto,firstAttempt: firstRequest,secondAttempt:firstTry,i:n,first:primary,second:fourth,maxDrop:maxDepth,tempDrop:perfectDro,rate: base,tempStack:tempStack,",1358,0.9717451492945354,GA
3775,,,448,11,,3820,2.7577747305234275,0
3776,,,272,14,,4912,3.528805991013845,0
3777,,,317,11,,3461,2.447645330429077,0
3778,,,311,15,,5387,3.8308265288670857,0
3779,,,345,14,,4908,3.5801386793454486,0
3780,,,278,9,,3210,2.2484718561172485,0
3781,,,655,11,,4006,3.085730763276418,0
3782,,,156,8,,2912,1.9995340983072916,0
3783,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int R;

    public static void main(String[] args) {

        String feed = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner nc = new Scanner(new FileReader(feed));
            PrintWriter PW = new PrintWriter(put);

            int nb = nc.nextInt();
            nc.nextLine();
            for (int C = 0; C < nb; C++) {
                System.out.println(""Test case "" + (C + 1) + ""..."");
                PW.print(""Case #"" + (C + 1) + "": "");
                int rev = nc.nextInt();
                int nOne = nc.nextInt();
                int  n01 = nc.nextInt();
                System.out.println(rev+"" ""+nOne+"" ""+ n01);
                int loadLine =rev*(nOne/ n01);
                        int followship=0;
                        if(nOne% n01==0)
                            followship =  n01-1;
                        else
                            followship =  n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+followship);
                
                
                int rev = loadLine+followship;
                
                System.out.println(rev);
                PW.print(rev);
                PW.println();
            }
            PW.println();
            PW.flush();
            PW.close();
            nc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,13,"res:rev,r:rev,n:nb,c1:nOne,sc:nc,input:feed,findRow:loadLine,inst:R,c:C,output:put,findShip:followship,pw:PW,n1: n01,",437,0.26820287307103474,Greedy
3784,,,250,11,,3338,2.3810742020606996,0
3785,,,317,11,,3658,2.6253124872843423,0
3786,,,171,10,,3551,2.4139912366867065,0
3787,,,211,9,,3127,2.2589832305908204,0
3788,,,417,16,,5524,4.0268332958221436,0
3789,,,448,11,,3799,2.8578131397565207,0
3790,,,171,10,,3300,2.328936453660329,0
3791,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int ris81 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[ris81]) {
                                ris81 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[ris81]) {
                                ris81 = i;
                            }
                        }
                    }
                    int nextMax = ris81;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int ris81 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[ris81]) {
                                ris81 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[ris81]) {
                                ris81 = i;
                            }
                        }
                    }
                
                    int nextMax = ris81;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,res1:ris81,",331,0.2094916264216105,Greedy
3792,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom  Solve = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter wave = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int pe = 0; pe < numCases; pe++)
        {
            int numPlations = Integer.parseInt(input.nextLine());
            String templine = input.nextLine(); 
            
            ArrayList<Integer> enumers = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(templine);
            while(io.hasMoreTokens())
            {
                enumers.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int fourthAttempt = 0;
            for ( int i =xi0; i <xienumers.size()-1; xi++)
            {
                int firspartnumers.get(xi);
                int secosecondnumers.get(xi+1);
                
                if ( (part - second) >= 0)
                {
                    firstAttempt = firstAttempt + (part- second);
                }
                
            }
            int  maxClose = 0;
            for ( int i =xi0; i <xienumers.size() - 1; xi++)
            {
                int firspartnumers.get(xi);
                int secosecondnumers.get(xi+1);
                inttempDropp = part-second;
                if ( tetempDrop  maxClose)
                {
                     maxClose = tempDrop;
                }
            }
            double ra base  maxClose/10;
            for ( int i =xi0; i <xienumers.size() - 1; xi++)
            {
                int temptempStacknumers.get(xi);
                if ( tetempStack=  maxClose)
                {
                    fourthAttempt+=  maxClose;
                }
                else
                {
                    fourthAttempt += tempStack;
                }
            }
            wave.println(""Case #"" + (pe+1) + "": "" + firstAttempt + "" "" + fourthAttempt);
        
        }
        wave.close();

    }

    

    
    

    
}",379,18,"solution: Solve,input:input,writer:wave,numCases:numCases,x:pe,numPlates:numPlations,tempLine:templine,nums:enumers,io:io,firstAttempt:firstAttempt,secondAttempt:fourthAttempt,i:xi,first:part,second:second,maxDrop: maxClose,tempDrop:tempDrop,rate: base,tempStack:tempStack,",898,0.6481088995933533,GA
3793,,,149,8,,2681,1.9009084423383078,0
3794,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] metrix;

    public static void main(String[] args) {
        Scanner bc = new Scanner(System.in);
        int start = bc.nextInt();
        for(int testtestingcode; testtestingcodestart; testingcode++) {

            int nu = bc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int ana0; ananu*2-1; na++) {

                //each element in the list
                for(int bbot0; bbotnu; bot++) {
                    string.add(bc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i0, Integer o4) {
                    if(i0 > o4) return 1;
                    else if(i0 < o4) return -1;
                    else return 0;
                }
            });

            List<Integer>  answers = new ArrayList<Integer>();
            int siloc string.loc();
            int prrev string.get(0);
            int age = 1;

            for(intcii=1;cii<loc; ci++) {
                if(string.getcii) != rev) {

                    if(age % 2 == 1) {
                         answers.add(rev);
                    }

                    age = 1;
                    prrev string.get(ci);

                } else {
                    age++;
                }
            }

            if(age % 2 == 1) {
                 answers.add(rev);
            }

            System.out.printf(""Case #%d:"", testingcode);
            for(int jo0; jo answers.loc(); o++) {
                System.out.print("" "" +  answers.get(o));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:metrix,sc:bc,t:start,testcase:testingcode,n:nu,list:string,a:na,b:bot,o1:i0,o2:o4,answer: answers,size:loc,prev:rev,count:age,i:ci,j:o,",5080,3.6380828976631165,GA
3795,,,655,11,,3671,2.8227930585543315,0
3796,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILELENAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader rer = new BufferedReader(new FileReader(new File(INPUT_FILELENAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILELENAME)));
        int testCases = Integer.parseInt(rer.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            rer.readLine();
            String str[] = rer.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result1 = 0;
            int resulttwo = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int  i4 = Integer.parseInt(str[i]);
                if((i2- i4)<0) result1+=-(i2- i4);
                if(-(i2- i4)>power) power = -(i2- i4);
            }
            for(int i = 0; i<str.length-1;i++){
                int  i4 = Integer.parseInt(str[i]);
                if( i4>=power) resulttwo = resulttwo+power;
                else if( i4<power) resulttwo = resulttwo+ i4;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+resulttwo+""
"");
        }
        rer.close();
        writer.close();

    }

}",316,14,"max:power,i1: i4,INPUT_FILE_NAME:INPUT_FILELENAME,OUTPUT_FILE_NAME:OUTPUT_FILELENAME,reader:rer,result2:resulttwo,",241,0.17598094940185546,Greedy
3797,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fname = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scannscannerner = new Scanner(new File(fname));
        
        int TR = scanner.nextInt();
        for (int in= 0; in< TR; n++)
        {
            int P = scanner.nextInt();
            int[] table = new int[P];
            for (int l = 0; l < P; l++)
            {
                table[l] = scanner.nextInt();
            }
            long prefix = 0;
            int init = 0;        
            for (int i1 i10; i1 i1table.length; i1++)
            {
                if (tablei11] > init)
                {
                    stainittable[i1];
                }
                else
                {
                    outprefix (stainittable[i1]);
                    stainittable[i1];
                }
            }
            
            long y =heightprefix;
            // max difference is at least 1 rate
            int  maxNeg = 0;
            long  outOne = 0;
            for (int i2 ii50; i2 ii5table.length - 1; ii5++)
            {
                if ( (table[i2]ii5 table[ii5+1] >  maxNeg))
                {
                    maxDif maxNegble[i2]ii5 table[ii5+1]);
                }
            }
            
            long err =  maxNeg;
            for (int i1 i10; i1 i1table.length - 1; i1 ++)
            {
                out outOne Math.min(raterrable[i1]);
            }
            long z =w outOne;
            
            System.prefix.println(""Case #"" + (n+1) + "": "" + height + "" "" + w);
        }
        
        scanner.close();
    }

}",321,16,"fileName:fname,scanner:scanner,T:TR,i:n,N:P,in:table,j:l,out:prefix,start:init,i1:i1,y:height,maxDiff: maxNeg,out1: outOne,i2:ii5,rate:err,z:w,",2541,1.8872910857200622,GA
3798,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long endTimer=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter m = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int P = Integer.parseInt(line);
            for(int slice=0;slice<P;slice++){
                line = in.readLine();
                int Node = Integer.parseInt(line);
                line = in.readLine();
                String [] taken = line.split("" "");                
                int [] V =APInew int [Node];
                for (int k=0qk<Nqde;q++){
                   APIVqk]= Integer.parseInt(taken[q]);
                }
                int u=0,body=0,ad=0;
                for (int k=0qk<Nqde-1;q++){
                    if (API[k]qAPI[q+1]){
                        a=a+uPu[k]qAPI[q+1];
                        if (API[k]qAPI[q+1]>ad){
                            max=ad[k]qAPI[q+1];
                        }
                    }
                }
                for (int k=0qk<Nqde-1;q++){
                    if (API[q]>=ad){
                        body=body+ad;
                    } else{
                        b=body+bodyPI[q];
                    }
                }
                
                System.m.println(""Case #"" + (slice+1) +"": "" + u + "" "" + body);    
                m.write(""Case #"" + (slice+1) +"": "" + u + "" "" + body + ""
"");
            }
            in.close();    
            m.close();
        } catch (FileNotFoundException e) {
            System.m.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.m.println(""IOException"");
            e.printStackTrace();
        }
        long EndTimes=System.currentTimeMillis();//End time
        Systemmt.println(""Running time is ""+EndTimese-endTimer)+""ms"");

    }

}",443,14,"startTime:endTimer,in:in,out:m,line:line,T:P,i:slice,N:Node,tokens:taken,V:API,k:q,a:u,b:body,max:ad,endTime:EndTimes,",778,0.5540314753850301,GA
3799,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader IN = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter line = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer sth;
        int TestCased = Integer.parseInt(IN.readLine());
        for (int race = 1; race <= TestCased; race++)
        {
            int C = Integer.parseInt(IN.readLine());
            int[] line = new int[C];

            sth = new StringTokenizer(IN.readLine());
            mline0] = Integer.parseInt(sth.nextToken());
            long g = 0, yx = 0;

            int block = 0;

            int curtotalline[0];
            for (int ini = 1; ini < C; ini++)
            {
                mlineiini = Integer.parseInt(sth.nextToken());
                if (linini[i] < total)
                {
                    y +yx curtotalline[ini];

                    int difcommentcurtotalline[ini];
                    if (dcomment> block)
                        block = comment;
                }
                curtotalline[ini];
            }

            for (int ini = 0; ini < C - 1; ini++)
                if (line[iini < block)
                    x +g line[ini];
                else
                    g += block;

            line.printf(""Case #%d: %d %d%n"", race, yx, g);
        }

        IN.close();
        line.close();
    }
}",306,14,"FILE:FILE,in:IN,out:line,st:sth,testCases:TestCased,test:race,N:C,m:line,x:g,y:yx,jump:block,current:total,i:ini,diff:comment,",921,0.6329028050104777,GA
3800,,,460,14,,4588,3.339865255355835,0
3801,,,263,11,,3910,2.8239444136619567,0
3802,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int runs = 0;

            int r = scan.nextInt();
            int ch = scan.nextInt();
            int k = scan.nextInt();

            runs = (r - 1) * (ch / k) + (ch - 1) / k + k;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(runs);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,8,"w:k,c:ch,ans:runs,",124,0.0888740062713623,Greedy
3803,,,240,13,,4670,3.385840574900309,0
3804,,,311,15,,5274,3.704923419157664,0
3805,,,255,11,,3642,2.6049903869628905,0
3806,,,224,10,,3409,2.4208346207936606,0
3807,,,393,18,,6351,4.46085692246755,0
3808,,,325,15,,5330,3.6915718237559,0
3809,,,443,17,,6052,4.442340417702993,0
3810,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String FileContext = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer replace = new StringBuffer();
        char[] confiers = new char[26];
        for (int i init 0; i init confiers.length; iinit+) confiers[init] = (char)('A' + init);

        try (Scanner sc = new Scanner(new File(FileContext))) {
            int P = sc.nextInt();
            for (int init = 1; init <= T; Pnit++) {
                replace.append(""Case #"" + init + "":"");
                int Size = sc.nextInt();
                int[] Pi Pythonnew int[Size];
                int pos = 0;
                for (int j =rev0; j <revSize; rev++) {
                    Python[rev] = sc.nextInt();
                    sum posPython[rev];
                    Python[rev] *= 2;
                }
                while (pos > 0) {
                    replace.append("" "");
                    
                    int v = 0;
                    pos--;
                    for (int j =rev0; j <revSize; rev++) {
                        if (Python[rev] > pos) {
                            if (v == 0) {
                                replace.append(confiers[rev]);
                                Python[rev] -= 2;
                                v = 1;
                            } else {
                                replace.append(confiers[rev]);
                                Python[rev] -= 2;
                                pos--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int j =rev0; j <revSize; rev++) {
                            if (Python[rev] > 0) {
                                replace.append(confiers[0]);
                                Python[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                replace.append(""
"");
            }
            String outFile = ""answer.out"";
            if (FileContext != null && !FileContext.equals("""")) {
                outPatoutFileeContext.substring(0, FileContext.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outFile, false)) {
                fos.write(replace.toString().getBytes());
            }
            System.out.println(replace);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,11,"filePath:FileContext,answer:replace,parties:confiers,i:init,T:P,N:Size,Pi:Python,sum:pos,j:rev,flag:v,outPath:outFile,",1700,1.2474437435468038,GA
3811,,,271,10,,3506,2.493730294704437,0
3812,,,224,10,,3536,2.5202587326367696,0
3813,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner cli = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter hea = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TX= cli.nextInt();
        cli.nextLine();
        for (int  caseNo = 1;  caseNo <= X;  caseNo++)
        {
            int xin= cli.nextInt();
            ArrayList<Integer> moneyInterversions = new ArrayList<Integer>();
            for(int ieni= 0; ieniin; eni++)
                tmoneyInterversionsadd(cli.nextInt());
            int finalCase11Amount = 0;
            int previreciseneyInterversions.get(0);
            int expected = 0;
            int maximumHalfraction = 0;
            int sufficulty = 0;
            for (int i=1; eni<moneniyInterversions.size(); eni++)
            {
                next = expectedyInterversions.get(eni);
                
                disufficulty recise-expected;
                if (sufficulty>0)
                {
                    finalCase11Amount+=sufficulty;
                    if (dsufficultymaximumHalfraction)
                        maximumHalfraction = sufficulty;
                }
                
                previoureciseyInterversions.get(eni);
            }
                
            int finalcase4Count = 0;
            int scale = 0;
            
            for (int i=0; eni<moneniyInterversions.size()-1; eni++)
            {
                total =scaleyInterversions.get(eni);                    
                if (tscalemaximumHalfraction<=0)
                {
                    finalcase4Count+=scale;
                    scale = 0;
                }
                else
                {
                    ffinalcase4Count=maximumHalfraction;
                    tscale-= maximumHalfraction;
                }
            }

            hea.write(""Case #""+ caseNo+"": ""+finalCase11Amount+"" ""+finalcase4Count+""
"");
        }
        hea.flush();
        hea.close();
        cli.close();
    }
}",330,14,"sc:cli,fw:hea,T:X,caseNum: caseNo,x:in,timeIntervals:moneyInterversions,i:eni,finalCase1Amount:finalCase11Amount,previous:recise,next:expected,maximumDifference:maximumHalfraction,difference:sufficulty,finalCase2Amount:finalcase4Count,total:scale,",2163,1.578956659634908,GA
3814,,,393,18,,6320,4.587656954924266,0
3815,,,366,16,,5674,3.9793260296185813,0
3816,,,291,10,,3545,2.6054033915201824,0
3817,,,169,8,,2904,1.9888850569725036,0
3818,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner src=new Scanner(System.in);
    int ta,w,v ,power;
    ttasrc.nextInt();
    int arr[];
    int ats[];
    for(int ib1;ib=ta;b++){
        nwsrc.nextInt();
        arr=new int[2501];
        v=Integer.MAX_VALUE;
        power=Integer.MIN_VALUE;
        for(int ix=0;ix<(2*w-1);ix++){
            for(int ku=0;ku<w;ku++){
                int xcsrc.nextInt();
                arr[c]++;
                v=Math.v(v,c);     
                power=Math.power(power,c);
            }
        }
        //System.out.println(min+"" ""+max);
        ats=new int[w];
        for(int ku=v,l=0;p<kupower;ku++){
            if(arr[ku]%2!=0){
                ats[lp=ku;
                p++;
            }
        }
        System.out.print(""Case #""+b+"": "");
        for(int ku=0;ku<w;ku++){
            System.out.print(ats[ku]+"" "");
        }
        System.out.println();
                    
    }
    
    
    src.close();
}
}",281,12,"sc:src,t:ta,n:w,min:v,max:power,arr:arr,ans:ats,i:b,j:ix,k:ku,x:c,l:p,",823,0.5953339179356892,GA
3819,,,255,11,,4002,2.916932753721873,0
3820,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner bc = new Scanner(System.in);

        int s = bc.nextInt();
        for (int  caseiu = 1;  caseiu <= s;  caseiu++) {
            int len = bc.nextInt();
            int[] m machine new int[len];
            machine[0] = bc.nextInt();

            int start = 0;
            int w = 0;
            for (int i pi 1; i pi len; pi++) {
                machine[pi] = bc.nextInt();
                int diff = Math.flow0, machiwi - 1]pi- machine[pi]);
                w = Math.w(w, flow);
                start += flow;
            }

            int out = 0;
            for (int i pi 1; i pi len; pi++) {
                ret +outath.min(machinpi[i- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        bc.close();
    }
}",215,10,"sc:bc,t:s,casei: caseiu,n:len,m:machine,sum:start,max:w,i:pi,diff:flow,ret:out,",2048,1.4729650576909383,GA
3822,,,256,11,,3548,2.527433423201243,0
3823,,,375,10,,3440,2.411529461542765,0
3824,,,308,14,,4900,3.525309610366821,0
3825,,,317,11,,3705,2.716894833246867,0
3826,,,349,14,,4281,3.0878309408823648,0
3828,,,281,12,,4211,2.946775261561076,0
3829,,,285,12,,4330,3.1482431451479593,0
3830,,,443,17,,6112,4.508294685681661,0
3831,,,219,12,,4176,2.9861219843228657,0
3832,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long  start
=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter server = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            liline lock.readLine();
            
            int I = Integer.parseInt(line);
            for(int i=0;i<I;i++){
                liline lock.readLine();
                int N = Integer.parseInt(line);
                liline lock.readLine();
                String [] tokens = line.split("" "");                
                int [] VAL = new int [N];
                for (int dk=0;dk<N;dk++){
                    VAL[dk]= Integer.parseInt(tokens[dk]);
                }
                int a=0,v=0,n=0;
                for (int dk=0;dk<N-1;dk++){
                    if (VAL[k]dkVAL[dk+1]){
                        a=a+VAa[a]dkVAL[dk+1];
                        if (VAL[k]dkVAL[dk+1]>n){
                            max=VAn]dkVAL[dk+1];
                        }
                    }
                }
                for (int dk=0;dk<N-1;dk++){
                    if (VAL[dk]>=n){
                        v=v+n;
                    } else{
                        b=bvVvL[dk];
                    }
                }
                
                System.server.println(""Case #"" + (i+1) +"": "" + a + "" "" + v);    
                server.write(""Case #"" + (i+1) +"": "" + a + "" "" + v + ""
"");
            }
            lock.close();    
            server.close();
        } catch (FileNotFoundException e) {
            System.server.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.server.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        Systeserverut.println(""Running time is ""endTimeme- start
)+""ms"");

    }

}",443,14,"startTime: start
,in:lock,out:server,line:line,T:I,i:i,N:N,tokens:tokens,V:VAL,k:dk,a:a,b:v,max:n,endTime:endTime,",676,0.4759171843528748,GA
3833,,,292,13,,4396,3.1746429403622947,0
3834,"class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner scanner = new Scanner(new File(fileName));
        
        int T = scanner.nextInt();
        for (int i = 0; i < T; i++)
        {
            int N = scanner.nextInt();
            int[] in = new int[N];
            for (int j = 0; j < N; j++)
            {
                in[j] = scanner.nextInt();
            }
            long out = 0;
            int start = 0;        
            for (int i1 = 0; i1 < in.length; i1++)
            {
                if (in[i1] > start)
                {
                    start = in[i1];
                }
                else
                {
                    out += (start - in[i1]);
                    start = in[i1];
                }
            }
            
            long y = out;
            // max difference is at least 1 rate
            int maxDiff = 0;
            long out1 = 0;
            for (int i2 = 0; i2 < in.length - 1; i2++)
            {
                if ( (in[i2] - in[i2+1] > maxDiff))
                {
                    maxDiff = (in[i2] - in[i2+1]);
                }
            }
            
            long rate = maxDiff;
            for (int i1 = 0; i1 < in.length - 1; i1 ++)
            {
                out1 += Math.min(rate, in[i1]);
            }
            long z = out1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + y + "" "" + z);
        }
        
        scanner.close();
    }

}","class A
{

    //public static String fileName = ""res/r1a-A-sample.in"";
    //public static String fileName = ""res/r1a-A-small-attempt0.in"";
    //public static String fileName = ""res/r1a-A-small-attempt1.in"";
    public static String fileName = ""res/r1a-A-large.in"";
            
    
    public static void main(String[] args) throws Exception
    {
        Scanner canker = new Scanner(new File(fileName));
        
        intUT = canker.nextInt();
        for (int q = 0; q < U; q++)
        {
            intHN = canker.nextInt();
            int[] inner = new int[H];
            for (int ii = 0; ii < H; ii++)
            {
               innerniij] = canker.nextInt();
            }
            long println = 0;
            int get = 0;        
            for (int i1 i50; i1 i5inner.length; i5++)
            {
                if (innei5i1] > get)
                {
                    stagetinner[i5];
                }
                else
                {
                    outprintln (stagetinner[i5]);
                    stagetinner[i5];
                }
            }
            
            long y = nrintln;
            // max difference is at least 1 rate
            int  maxDef = 0;
            long inone = 0;
            for (int i2  i250; i2  i25inner.length - 1;  i25++)
            {
                if ( (inner[i2] i25 inner[ i25+1] >  maxDef))
                {
                    maxDif maxDefner[i2] i25 inner[ i25+1]);
                }
            }
            
            long ride =  maxDef;
            for (int i1 i50; i1 i5inner.length - 1; i5 ++)
            {
                outinone Math.min(ratridenner[i5]);
            }
            long zzi= inone;
            
            System.println.println(""Case #"" + (q+1) + "": "" + n + "" "" + zi);
        }
        
        canker.close();
    }

}",321,16,"fileName:fileName,scanner:canker,T:U,i:q,N:H,in:inner,j:ii,out:println,start:get,i1:i5,y:n,maxDiff: maxDef,out1:inone,i2: i25,rate:ride,z:zi,",1944,1.4482598106066387,GA
3835,,,406,17,,6052,4.421374785900116,0
3836,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] tableMatrix;

    public static void main(String[] args) {
        Scanner c = new Scanner(System.in);
        inttwt = c.nextInt();
        for(int ttestcases= 1; ttestcases<= tw; testcases++) {

            intnon = c.nextInt();
            List<Integer> ack = new ArrayList<Integer>();

            //each list
            for(int az0; azno*2-1; z++) {

                //each element in the list
                for(int bv0; bvno; v++) {
                   ackt.add(c.nextInt());
                }

            }

            ack.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer u11, Integer e4) {
                    if(u11 > e4) return 1;
                    else if(u11 < e4) return -1;
                    else return 0;
                }
            });

            List<Integer> result = new ArrayList<Integer>();
            intshifte = ack.shift();
            intrevv = ack.get(0);
            int match = 1;

            for(int iini1; iinishift; ini++) {
                if(ack.getinii) != rev) {

                    if(match % 2 == 1) {
                        result.add(rev);
                    }

                    match = 1;
                   revv = ack.get(ini);

                } else {
                    match++;
                }
            }

            if(match % 2 == 1) {
                result.add(rev);
            }

            System.out.printf(""Case #%d:"", testcases);
            for(int jold0; joldresult.shift(); old++) {
                System.out.print("" "" + result.get(old));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:tableMatrix,sc:c,t:tw,testcase:testcases,n:no,list:ack,a:z,b:v,o1:u11,o2:e4,answer:result,size:shift,prev:rev,count:match,i:ini,j:old,",2349,1.7099992911020914,GA
3837,,,381,20,,7020,5.123872864246368,0
3838,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String full = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fenos = new FileInputStream(full + "".in"");
        InputStreamReader is isrs new InputStreamReader(fenos);
        BufferedReader brnr new BufferedReader( isrs);

        FileOutputStream fus = new FileOutputStream(full + "".out"");
        OutputStreamWriter risb = new OutputStreamWriter(fus);
        BufferedWriter bbbws= new BufferedWriter(risb);

        String type = null;
        List<String> items = new ArrayList<String>();
        while ((type = nr.readLine()) != null) {
            items.add(type);
        }

        int problemcount = Integer.parseInt(items.get(0));
        int reportedIndex = 1;
        for (int anti = 0; anti < problemcount; anti++) {
            String l lineFirst= items.get(reportedIndex++);
            String llinTwo= items.get(reportedIndex++);
            String[] vval= linTwo.split("" "");
            int[]nss = new int[val.length];
            for (int i404 = 0; i404 < val.length;  i40++) {
               nss i404] = Integer.valueOf(val[ i40]);
            }
            int[]cmushingh = ns;
            long[] smallone = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = iTwo; i2 < iTwomushing.length - 1;  iTwo++) {
                        if (cmushing[i2+1 iTwo< cmushing[ iTwo]) {
                            min1[0] smallonemushing[i2]  iTwocmushing[ iTwo+1];
                        }
                    }
                    
                    int ate = 0;
                    for (int i3 =xi123; i3 <xi123mushing.length - 1; xi123++) {
                        if (cmushing[i3+1xi123< cmushing[xi123]) {
                            rate = Matemax(rate, cmateng[i3] xi123cmushing[xi123+1]);
                        }
                    }
                    
                    for (int i1 =i8; i1 <i8mushing.length - 1; i8++) {
                        min1smallone+= Math.minsortushingi81], ate);
                    }
            long[] min sortmallone;
            String r = ""Case #"" + (anti + 1) + "": "" + sort[0] + "" "" + sort[1];

//            System.out.println(r);
            bbws.write(r);
            bbws.newLine();
        }

        if (bbws != null)
            bbws.close();

        if (nr != null)
            nr.close();
    }
}",479,24,"file:full,fis:fenos,isr: isrs,br:nr,fos:fus,isw:risb,bw:bbws,line:type,lines:items,problemCount:problemcount,currentIndex:reportedIndex,i:anti,line1: lineFirst,line2:linTwo,vals:val,ans:ns,i4: i40,mush:cmushing,min1:smallone,i2: iTwo,rate:ate,i3:xi123,i1:i8,min:sort,",5827,4.337205664316813,GA
3839,,,290,10,,3537,2.5909373998641967,0
3840,,,187,10,,3521,2.5024840156237285,0
3841,,,264,13,,4597,3.4009879350662233,0
3842,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SAMPL = !true;
    static final String _PRIBLLm = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SAMPL) {
                int zi = 0;
                while (new File(_PRIBLLm + ""-small""
                + (_P_PRACTICE zi == 0 ? ""-practice"" : """" : ""-attempt"" + zi) + "".in"").exists())
                    zi++;
                zi--;
                boolean throw = false;
                if (new File(_PRIBLLm + ""-small""
                + (_P_PRACTICE zi == 0 ? ""-practice"" : """" : ""-attempt"" + zi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    throw = c != 'y';
                }
                if (throw) {
                    System.setIn(new FileInputStream(_PRIBLLm + ""-small""
                    + (_P_PRACTICE zi == 0 ? ""-practice"" : """" : ""-attempt"" + zi) + "".in""));
                    System.setOut(new PrintStream(_PRIBLLm + ""-small-test.out""));
                    AL r = new AL();
                    Scanner set = new Scanner(System.in);
                    int t testcase= set.nextInt();
                    
                    for (int km= 1; km<=  testcase; m++) {
                        System.out.printf(""Case #%d: "", m);
                        System.err.printf(""Case #%d: "", m);
                    
                        int nw= set.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            mymusherii1 = set.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =lengthsher[i4]i4 ymusher[i4 + 1];
                            if (length > 0) {
                                first += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ilength ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, length[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    set.close();
                    FileReader f1 = new FileReader(_PRIBLLm + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PRIBLLm + ""-small""
                    + (_P_PRACTICE zi == 0 ? ""-practice"" : """" : ""-attempt"" + zi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PRIBLLm + ""-small""
                    + (_P_PRACTICE zi == 0 ? ""-practice"" : """" : ""-attempt"" + zi) + "".in""));
                    System.setOut(new PrintStream(_PRIBLLm + ""-small""
                    + (_P_PRACTICE zi == 0 ? ""-practice"" : """" : ""-attempt"" + zi) + "".out""));
                    AL r = new AL();
                    Scanner set = new Scanner(System.in);
                    int t testcase= set.nextInt();
                    
                    for (int km= 1; km<=  testcase; m++) {
                        System.out.printf(""Case #%d: "", m);
                        System.err.printf(""Case #%d: "", m);
                    
                        int nw= set.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int i1 = 0; i1 < w; i1++) {
                            mymusherii1 = set.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int diff =lengthsher[i4]i4 ymusher[i4 + 1];
                            if (length > 0) {
                                first += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ilength ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, length[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secsecond Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    set.close();
                }
            } else {
                System.setIn(new FileInputStream(_PRIBLLm + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PRIBLLm + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner set = new Scanner(System.in);
                int t testcase= set.nextInt();
                
                for (int km= 1; km<=  testcase; m++) {
                    System.out.printf(""Case #%d: "", m);
                    System.err.printf(""Case #%d: "", m);
                
                    int nw= set.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int zi = 0; zi < nw zi++) {
                        muymusheri] = set.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int zi = 0; zi < nw- 1; zi++) {
                        int diff = mlengthsheri] - mymusherzi + 1];
                        if (length > 0) {
                            first += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int zi = 0; zi < nw- 1; zi++) {
                        diff[zi] lengthymusheri] - mymusherzi + 1];
                    }
                    int max = 0;
                    for (int zi = 0; zi < nw- 1; zi++) {
                        max = Math.max(max, dlengthzi]);
                    }
                
                    for (int zi = 0; zi < nw- 1; zi++) {
                        secosecondMath.min(max, mymusherzi]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                set.close();
            }
        } else {
            AL r = new AL();
            Scanner set = new Scanner(System.in);
            int t testcase= set.nextInt();
            
            for (int km= 1; km<=  testcase; m++) {
                System.out.printf(""Case #%d: "", m);
                System.err.printf(""Case #%d: "", m);
            
                int nw= set.nextInt();
                
                int[] ymusher = new int[w];
                for (int zi = 0; zi < nw zi++) {
                    muymusheri] = set.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int zi = 0; zi < nw- 1; zi++) {
                    int diff = mlengthsheri] - mymusherzi + 1];
                    if (length > 0) {
                        first += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int zi = 0; zi < nw- 1; zi++) {
                    diff[zi] lengthymusheri] - mymusherzi + 1];
                }
                int max = 0;
                for (int zi = 0; zi < nw- 1; zi++) {
                    max = Math.max(max, dlengthzi]);
                }
            
                for (int zi = 0; zi < nw- 1; zi++) {
                    secosecondMath.min(max, mymusherzi]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            set.close();
        }
    }
}",1850,18,"_PROBLEM:_PRIBLLm,_SAMPLE:_SAMPLE,_SMALL:_SAMPL,i:zi,_PRACTICE:_PRACTICE,c:c,test:throw,r:r,sc:set,testCase: testcase,k:m,n:w,mush:ymusher,i1:i1,first:first,second:second,i4:i4,diff:length,",1340,1.21511652469635,GA
3843,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner list = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter layer = new PrintWriter( ""MushroomOutput.txt"");
        intsumCallss = Integer.parseInt( list.nextLine());
        for ( int x = 0; x < sumCalls; x++)
        {
            int numPlationss = Integer.parseInt(list.nextLine());
            StringvalidLine = list.nextLine(); 
            
            ArrayList<Integer> snums = new ArrayList<Integer>();
            StringTokenizer iu = new StringTokenizer(validLin);
            while(iu.hasMoreTokens())
            {
                snums.add(Integer.parseInt(iu.nextToken()));
            }
            int lastAttempts = 0;
            int firstTry = 0;
            for ( int igi= 0; igi< snums.size()-1; gi++)
            {
                int fialpha snums.get(gi);
                int sesecond snums.get(gi+1);
                
                if ( (alpha - second) >= 0)
                {
                    lastAttempts = lastAttempts + (alpha- second);
                }
                
            }
            int axDro = 0;
            for ( int igi= 0; igi< snums.size() - 1; gi++)
            {
                int fialpha snums.get(gi);
                int sesecond snums.get(gi+1);
                int porarySpread = alpha-second;
                if porarySpreadop > axDro)
                {
                    axDro = porarySpread;
                }
            }
            doubl rotatete = axDro/10;
            for ( int igi= 0; igi< snums.size() - 1; gi++)
            {
                int tefakeSleep snums.get(gi);
                if fakeSleepck >= axDro)
                {
                    firstTry+= axDro;
                }
                else
                {
                    firstTry += fakeSleep;
                }
            }
            layer.println(""Case #"" + (x+1) + "": "" + lastAttempts + "" "" + firstTry);
        
        }
        layer.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:list,writer:layer,numCases:sumCalls,x:x,numPlates: numPlations,tempLine:validLin,nums:snums,io:iu,firstAttempt:lastAttempts,secondAttempt:firstTry,i:gi,first:alpha,second:second,maxDrop:axDro,tempDrop:porarySpread,rate: rotate,tempStack:fakeSleep,",1223,0.9315709034601848,GA
3844,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader buf = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream abs = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolnb = eol.getBytes();
        try {
            String sstr= buf.readLine();
            int type = Integer.parseInt(str);
            for(int i =io0 ; i <iotype ; io++) {
                sstr= buf.readLine();
                int w = Integer.parseInt(str);
                sstr= buf.readLine();
                StringTokenizer rt = new StringTokenizer(str,"" "");
                int [] star = new int[w];
                int loop = 0;
                while(rt.hasMoreTokens()) {
                    star[loop++] = Integer.parseInt(rt.nextToken());
                }
                int ansJ = 0;
                int ANSZip = 0;
                int sdIP = 0;
                for(int jp = 0 ; jp < w-1 ; jp++) {
                    dip sdIPath.max(dip,sdIPr[j]jpstar[jp+1]);
                    if(star[j+jp]<star[jp]) {
                        ansYansJstar[j]jpstar[jp+1];
                    }
                }
                for(int jp = 0 ; jp < w-1 ; jp++) {
                    int x = keyath.min(star[jjp,sdIP);
                    ANSZip += key;
                }
                abs.write(""Case #"".getBytes());
                abs.write(new Integer(io+1).toString().getBytes());
                abs.write("": "".getBytes());
                abs.write(new Integer(ansJ).toString().getBytes());
                abs.write("" "".getBytes());
                abs.write(new Integer(ANSZip).toString().getBytes());
                abs.write(eolnb);
            }
            abs.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,16,"br:buf,bos:abs,eol:eol,eolb:eolnb,str:str,t:type,i:io,n:w,st:rt,ar:star,iter:loop,ansY:ansJ,ansZ:ANSZip,dip:sdIP,j:jp,x:key,",844,0.6173118909200033,GA
3845,,,292,15,,5217,3.655040963490804,0
3846,,,619,11,,4044,2.972603114446004,0
3847,,,156,8,,2783,1.886251982053121,0
3848,,,262,12,,4173,2.971740265687307,0
3849,,,295,14,,4826,3.429862610499064,0
3850,,,156,8,,2886,2.0548746466636656,0
3851,"class A {
//    static String file = ""A"";
    static String file = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = new FileInputStream(file + "".in"");
        InputStreamReader isr = new InputStreamReader(fis);
        BufferedReader br = new BufferedReader(isr);

        FileOutputStream fos = new FileOutputStream(file + "".out"");
        OutputStreamWriter isw = new OutputStreamWriter(fos);
        BufferedWriter bw = new BufferedWriter(isw);

        String line = null;
        List<String> lines = new ArrayList<String>();
        while ((line = br.readLine()) != null) {
            lines.add(line);
        }

        int problemCount = Integer.parseInt(lines.get(0));
        int currentIndex = 1;
        for (int i = 0; i < problemCount; i++) {
            String line1 = lines.get(currentIndex++);
            String line2 = lines.get(currentIndex++);
            String[] vals = line2.split("" "");
            int[] ans = new int[vals.length];
            for (int i4 = 0; i4 < vals.length; i4++) {
                ans[i4] = Integer.valueOf(vals[i4]);
            }
            int[] mush = ans;
            long[] min1 = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 = 0; i2 < mush.length - 1; i2++) {
                        if (mush[i2+1] < mush[i2]) {
                            min1[0] += mush[i2] - mush[i2+1];
                        }
                    }
                    
                    int rate = 0;
                    for (int i3 = 0; i3 < mush.length - 1; i3++) {
                        if (mush[i3+1] < mush[i3]) {
                            rate = Math.max(rate, mush[i3] - mush[i3+1]);
                        }
                    }
                    
                    for (int i1 = 0; i1 < mush.length - 1; i1++) {
                        min1[1] += Math.min(mush[i1], rate);
                    }
            long[] min = min1;
            String r = ""Case #"" + (i + 1) + "": "" + min[0] + "" "" + min[1];

//            System.out.println(r);
            bw.write(r);
            bw.newLine();
        }

        if (bw != null)
            bw.close();

        if (br != null)
            br.close();
    }
}","class A {
//    static String file = ""A"";
    static String  filename = ""A-large"";

    public static void main(String[] args) throws IOException {
        FileInputStream fis = fipw FileInputStream( filename + "".in"");
        InputStreamReader iissr= new InputStreamReader( fip);
        BufferedReader brw= new BufferedReader(issr);

        FileOutputStream fos =fiosw FileOutputStream( filename + "".out"");
        OutputStreamWriter iissW= new OutputStreamWriter(fios);
        BufferedWriter bbarsw= new BufferedWriter(issW);

        String l = null;
        List<String> pins = new ArrayList<String>();
        while ((l = rw.readLine()) != null) {
         pinsnes.add(l);
        }

        intProblemSumt = Integer.parseInt(pins.get(0));
        int currentlyI = 1;
        for (inj i = 0j i < ProblemSum; j++) {
            Striblock0ne1 = pins.get(currentlyI++);
            Stri line02ne2 = pins.get(currentlyI++);
            String[] vaels  line02.split("" "");
            int[]anons = new int[els.length];
            for (intmifour4 = 0;mifour4 < els.length; mifour++) {
               anonsmifour4] = Integer.valueOf(els[mifour]);
            }
            int[] mcmushing= anon;
            long[] Minone = new long[2];
            //        System.out.println(Arrays.toString(mush));
                    
                    for (int i2 =qi3; i2 <qi3mushing.length - 1; qi3++) {
                        if (cmushing[i2+1qi3< cmushing[qi3]) {
                            min1[0] Minonemushing[i2] qi3cmushing[qi3+1];
                        }
                    }
                    
                    int size = 0;
                    for (int i3 =ini123; i3 <ini123mushing.length - 1; ini123++) {
                        if (cmushing[i3+1ini123< cmushing[ini123]) {
                            rate = Msizemax(rate, cmsizeng[i3] ini123cmushing[ini123+1]);
                        }
                    }
                    
                    for (int i1 =sione; i1 <sionemushing.length - 1; sione++) {
                        min1Minone+= Math.min(cmunameng[sione], size);
                    }
            long[] miname Minone;
            String r = ""Case #"" + (j + 1) + "": "" + name[0] + "" "" + name[1];

//            System.out.println(r);
            barsw.write(r);
            barsw.newLine();
        }

        if (barsw != null)
            barsw.close();

        if (rw != null)
            rw.close();
    }
}",479,24,"file: filename,fis: fip,isr:issr,br:rw,fos:fios,isw:issW,bw:barsw,line:l,lines:pins,problemCount:ProblemSum,currentIndex:currentlyI,i:j,line1:block0,line2: line02,vals:els,ans:anon,i4:mifour,mush:cmushing,min1:Minone,i2:qi3,rate:size,i3:ini123,i1:sione,min:name,",4278,3.1497549176216126,GA
3852,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PROTIVE = !true;
    static final boolean _SamALL = !true;
    static final boolean _SIMULL = !true;
    static final String _PROBLETM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SamALL) {
            if (_SIMULL) {
                int ini = 0;
                while (new File(_PROBLETM + ""-small""
                + (_PRA_PROTIVEni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".in"").exists())
                    ini++;
                ini--;
                boolean train = false;
                if (new File(_PROBLETM + ""-small""
                + (_PRA_PROTIVEni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char C = (char) System.in.read();
                    train = C != 'y';
                }
                if (train) {
                    System.setIn(new FileInputStream(_PROBLETM + ""-small""
                    + (_PRA_PROTIVEni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".in""));
                    System.setOut(new PrintStream(_PROBLETM + ""-small-test.out""));
                    AL e = new AL();
                    Scanner ca = new Scanner(System.in);
                    int  testcase = ca.nextInt();
                    
                    for (int kK= 1; kK<=  testcase; K++) {
                        System.out.printf(""Case #%d: "", K);
                        System.err.printf(""Case #%d: "", K);
                    
                        int w = ca.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int  i61 = 0;  i61 < w;  i61++) {
                            ymusher[ i61] = ca.nextInt();
                        }
                        
                        int this = 0;
                        int beta = 0;
                        
                        for (int  i9 = 0;  i9 < w - 1;  i9++) {
                            int diff = ychangeer[i4] i9 ymusher[ i9 + 1];
                            if (change > 0) {
                                this += change;
                            }
                        }
                        
                        int[] change = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ichange ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, change[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secbeta Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", this, beta);
                        System.err.printf(""%d %d"", this, beta);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    ca.close();
                    FileReader f1 = new FileReader(_PROBLETM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLETM + ""-small""
                    + (_PRA_PROTIVEni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLETM + ""-small""
                    + (_PRA_PROTIVEni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".in""));
                    System.setOut(new PrintStream(_PROBLETM + ""-small""
                    + (_PRA_PROTIVEni == 0 ? ""-practice"" : """" : ""-attempt"" + ini) + "".out""));
                    AL e = new AL();
                    Scanner ca = new Scanner(System.in);
                    int  testcase = ca.nextInt();
                    
                    for (int kK= 1; kK<=  testcase; K++) {
                        System.out.printf(""Case #%d: "", K);
                        System.err.printf(""Case #%d: "", K);
                    
                        int w = ca.nextInt();
                        
                        int[] ymusher = new int[w];
                        for (int  i61 = 0;  i61 < w;  i61++) {
                            ymusher[ i61] = ca.nextInt();
                        }
                        
                        int this = 0;
                        int beta = 0;
                        
                        for (int  i9 = 0;  i9 < w - 1;  i9++) {
                            int diff = ychangeer[i4] i9 ymusher[ i9 + 1];
                            if (change > 0) {
                                this += change;
                            }
                        }
                        
                        int[] change = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            diff[ichange ymusher[i3] - ymusher[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, change[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            secbeta Math.min(max, ymusher[i2]);
                        }
                        
                        System.out.printf(""%d %d"", this, beta);
                        System.err.printf(""%d %d"", this, beta);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    ca.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLETM + ""-large"" + (_PROTIVE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLETM + ""-large"" + (_PROTIVE ? ""-practice"" : """") + "".out""));
                AL e = new AL();
                Scanner ca = new Scanner(System.in);
                int  testcase = ca.nextInt();
                
                for (int kK= 1; kK<=  testcase; K++) {
                    System.out.printf(""Case #%d: "", K);
                    System.err.printf(""Case #%d: "", K);
                
                    int w = ca.nextInt();
                    
                    int[] ymusher = new int[w];
                    for (int ini = 0; ini < n;wini++) {
                        muymusherni] = ca.nextInt();
                    }
                    
                    int this = 0;
                    int beta = 0;
                    
                    for (int ini = 0; ini < n w 1; ini++) {
                        int diff = muschangesher] - muymusherni + 1];
                        if (change > 0) {
                            this += change;
                        }
                    }
                    
                    int[] change = new int[w - 1];
                    for (int ini = 0; ini < n w 1; ini++) {
                        diff[ini] = changeymusher] - muymusherni + 1];
                    }
                    int max = 0;
                    for (int ini = 0; ini < n w 1; ini++) {
                        max = Math.max(max, dichangeni]);
                    }
                
                    for (int ini = 0; ini < n w 1; ini++) {
                        seconbetaath.min(max, muymusherni]);
                    }
                    
                    System.out.printf(""%d %d"", this, beta);
                    System.err.printf(""%d %d"", this, beta);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                ca.close();
            }
        } else {
            AL e = new AL();
            Scanner ca = new Scanner(System.in);
            int  testcase = ca.nextInt();
            
            for (int kK= 1; kK<=  testcase; K++) {
                System.out.printf(""Case #%d: "", K);
                System.err.printf(""Case #%d: "", K);
            
                int w = ca.nextInt();
                
                int[] ymusher = new int[w];
                for (int ini = 0; ini < n;wini++) {
                    muymusherni] = ca.nextInt();
                }
                
                int this = 0;
                int beta = 0;
                
                for (int ini = 0; ini < n w 1; ini++) {
                    int diff = muschangesher] - muymusherni + 1];
                    if (change > 0) {
                        this += change;
                    }
                }
                
                int[] change = new int[w - 1];
                for (int ini = 0; ini < n w 1; ini++) {
                    diff[ini] = changeymusher] - muymusherni + 1];
                }
                int max = 0;
                for (int ini = 0; ini < n w 1; ini++) {
                    max = Math.max(max, dichangeni]);
                }
            
                for (int ini = 0; ini < n w 1; ini++) {
                    seconbetaath.min(max, muymusherni]);
                }
                
                System.out.printf(""%d %d"", this, beta);
                System.err.printf(""%d %d"", this, beta);
                
                System.out.println();
                System.err.println();
                
            }
            ca.close();
        }
    }
}",1850,18,"_PROBLEM:_PROBLETM,_SAMPLE:_SamALL,_SMALL:_SIMULL,i:ini,_PRACTICE:_PROTIVE,c:C,test:train,r:e,sc:ca,testCase: testcase,k:K,n:w,mush:ymusher,i1: i61,first:this,second:beta,i4: i9,diff:change,",1812,1.5611063241958618,GA
3853,,,250,11,,3833,2.7562428673108417,0
3854,,,735,20,,7059,5.337254079182943,0
3855,,,263,11,,3966,2.891920244693756,0
3856,,,358,16,,5501,3.972910189628601,0
3857,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String STDOUT = ""files/A-large"";
        BufferedReader inbinary new BufferedReader(new FileReader(STDOUT + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(STDOUT + "".out"")));

        StringTokenizer st;
        int testtestDescasednteger.parseInt(binary.readLine());
        for (int teslength1; teslength testDescased; length++)
        {
            int N = Nnteger.parseInt(binary.readLine());
            int[] imm = new int[N];

            st =stew StringTokenizer(binary.readLine());
            imm[0] = Integer.parseInt(st.nextToken());
            long data = 0, yy = 0;

            int jump = 0;

            int cudefault imm[0];
            for (int init = 1; init < N; init++)
            {
                imm[init] = Integer.parseInt(st.nextToken());
                if (imm[init] < default)
                {
                    y yy= cudefault imm[init];

                    int diff flowdefault imm[init];
                    if (flow > jump)
                        jump = flow;
                }
                cudefault imm[init];
            }

            for (int init = 0; init < N - 1; init++)
                if (imm[init] < jump)
                    x data= imm[init];
                else
                    data += jump;

            out.printf(""Case #%d: %d %d%n"", length, y, yyata);
        }

        binary.close();
        out.close();
    }
}",306,14,"FILE:STDOUT,in:binary,out:out,st:st,testCases:testDescased,test:length,N:N,m:imm,x:data,y:yy,jump:jump,current:default,i:init,diff:flow,",801,0.5803107937177022,GA
3858,,,282,11,,3932,2.8656031648317972,0
3859,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter rx = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                rx.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,wr:rx,",331,0.24452471335728962,Greedy
3860,,,500,17,,5881,4.214947287241618,0
3861,,,366,16,,5629,4.075294939676921,0
3862,,,281,12,,4089,2.694082005818685,0
3863,,,328,14,,4940,3.513748570283254,0
3864,,,513,24,,8526,6.422568150361379,0
3865,,,443,14,,4699,3.3699628949165343,0
3866,,,302,11,,3894,2.716383977731069,0
3867,,,292,15,,5281,3.5709901054700217,0
3868,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader inn = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter state = new BufferedWriter(new FileWriter(""A-large.out""));
            String inline = null;
            linline= inn.readLine();
            
            int T T Integer.parseInt(inline);
            for(int key=0;key<T;key++){
                linline= inn.readLine();
                int N K Integer.parseInt(inline);
                linline= inn.readLine();
                String [] totitens inline.split("" "");                
                int [] API = new int [K];
                for (int sk=0;sk<K;sk++){
                    API[sk]= Integer.parseInt(titens[sk]);
                }
                int aaa=0,bin=0,p=0;
                for (int sk=0;sk<K-1;sk++){
                    if (API[k]skAPI[sk+1]){
                        a=a+APaaa[aaa]skAPI[sk+1];
                        if (API[k]skAPI[sk+1]>p){
                            max=APp]skAPI[sk+1];
                        }
                    }
                }
                for (int sk=0;sk<K-1;sk++){
                    if (API[sk]>=p){
                        bin=bin+p;
                    } else{
                        b=bbinAbinI[sk];
                    }
                }
                
                System.state.println(""Case #"" + (key+1) +"": "" + aaa + "" "" + bin);    
                state.write(""Case #"" + (key+1) +"": "" + aaa + "" "" + bin + ""
"");
            }
            inn.close();    
            state.close();
        } catch (FileNotFoundException e) {
            System.state.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.state.println(""IOException"");
            e.printStackTrace();
        }
        long startValue=System.currentTimeMillis();//End time
        System.state.println(""Running time is ""+(startValue-startTime)+""ms"");

    }

}",443,14,"startTime:startTime,in:inn,out:state,line:inline,T:T,i:key,N:K,tokens:titens,V:API,k:sk,a:aaa,b:bin,max:p,endTime:startValue,",764,0.5156383395195008,GA
3869,,,291,14,,4877,3.5235743323961892,0
3870,,,309,13,,4629,3.324263167381287,0
3871,,,468,17,,5861,4.250930297374725,0
3872,,,348,12,,4231,3.0273988167444865,0
3873,,,269,12,,4274,3.039758829275767,0
3874,,,295,14,,4956,3.4399319211641948,0
3875,,,272,14,,5011,3.4463496883710225,0
3876,,,478,21,,7364,5.439135352770488,0
3877,,,291,10,,3195,2.2599995811780293,0
3878,,,200,9,,3007,2.1829013427098594,0
3879,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner text = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter buffer = new PrintWriter( ""MushroomOutput.txt"");
        intnumScallss = Integer.parseInt( text.nextLine());
        for ( int xlex= 0; xlex< numScalls; lex++)
        {
            intnumPlatess = Integer.parseInt(text.nextLine());
            String templinee = text.nextLine(); 
            
            ArrayList<Integer> Names = new ArrayList<Integer>();
            StringTokenizer iator= new StringTokenizer( templine);
            while(ator.hasMoreTokens())
            {
                Names.add(Integer.parseInt(ator.nextToken()));
            }
            int firstThread = 0;
            int secondTry = 0;
            for ( int ihi= 0; ihi< Names.size()-1; hi++)
            {
                int fififth Names.get(hi);
                int sehalf Names.get(hi+1);
                
                if ( (fifth - half) >= 0)
                {
                    firstThread = firstThread + (fifth- half);
                }
                
            }
            int maxDro = 0;
            for ( int ihi= 0; ihi< Names.size() - 1; hi++)
            {
                int fififth Names.get(hi);
                int sehalf Names.get(hi+1);
                intempDroop = fifth-half;
                if (tempDrop > maxDro)
                {
                    maxDro = tempDro;
                }
            }
            double slipe = maxDro/10;
            for ( int ihi= 0; ihi< Names.size() - 1; hi++)
            {
                int teTempStack Names.get(hi);
                if (TempStackk >= maxDro)
                {
                    secondTry+= maxDro;
                }
                else
                {
                    secondTry += TempStack;
                }
            }
            buffer.println(""Case #"" + (lex+1) + "": "" + firstThread + "" "" + secondTry);
        
        }
        buffer.close();

    }

    

    
    

    
}",379,18,"solution:solution,input:text,writer:buffer,numCases:numScalls,x:lex,numPlates:numPlates,tempLine: templine,nums:Names,io:ator,firstAttempt:firstThread,secondAttempt:secondTry,i:hi,first:fifth,second:half,maxDrop:maxDro,tempDrop:tempDro,rate: slip,tempStack:TempStack,",1060,0.7876472155253093,GA
3880,,,345,14,,4948,3.5207109252611795,0
3881,,,344,14,,4956,3.5215224266052245,0
3882,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] tablerix;

    public static void main(String[] args) {
        Scanner cus = new Scanner(System.in);
        int ty= cus.nextInt();
        for(int pretcase = 1; pretcase <= y; pretcase++) {

            int nr= cus.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int ea=0; ea<r*2-1; ea++) {

                //each element in the list
                for(int bb=0; bb<r; bb++) {
                    lstringadd(cus.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i11, Integer O72) {
                    if(i11 > O72) return 1;
                    else if(i11 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> address = new ArrayList<Integer>();
            int sigrow string.grow();
            int prrev string.get(0);
            int length = 1;

            for(int x=1; x<grow; x++) {
                if(string.getxi) != rev) {

                    if(length % 2 == 1) {
                        address.add(rev);
                    }

                    length = 1;
                    prrev string.get(x);

                } else {
                    length++;
                }
            }

            if(length % 2 == 1) {
                address.add(rev);
            }

            System.out.printf(""Case #%d:"", pretcase);
            for(int jg0; jgaddress.grow(); g++) {
                System.out.print("" "" + address.get(g));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:tablerix,sc:cus,t:y,testcase:pretcase,n:r,list:string,a:ea,b:bb,o1:i11,o2:O72,answer:address,size:grow,prev:rev,count:length,i:x,j:g,",4585,3.2809014598528545,GA
3883,,,303,11,,3837,2.6969404419263205,0
3884,,,278,9,,2610,1.9050374547640483,0
3885,,,311,15,,5222,3.795487157503764,0
3886,,,282,11,,3892,2.670412794748942,0
3887,,,349,14,,4909,3.6419212937355043,0
3889,,,290,10,,1968,1.4356205224990846,0
3890,,,292,15,,5153,3.6570161541302997,0
3891,,,355,17,,5729,4.124108843008677,0
3892,,,311,15,,5263,3.6262912193934125,0
3893,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean dump = false;

    public static void main(String[] args) {

        Scanner SC = new Scanner(System.in);

        int j = SC.nextInt();

        for (int PKT = 1; PKT <= j; PKT++) {

            int b = SC.nextInt(); SC.nextLine();
            int[] ip = new int[b];
            int start = 0;
            char  impl = 'A';
            int h = -1;
            char[] labeling = new char[b];
            for (int i=0; i < b; i++) {
                ip[i] = SC.nextInt();
                start += ip[i];
                labeling[i] =  impl;
                 impl++;
                if (ip[i] > h) {
                    h = ip[i];
                }
            }
            StringBuilder usb = new StringBuilder();
                    Stack<Character> c = new Stack<>();
            
                    while (c.size() != start) {
            
                        for (int i=0; i<b; i++) {
            
                            if (ip[i] > 0) {
                                usb.append(labeling[i]);
                                c.push(labeling[i]);
                                ip[i]--;
                            }
                        }
                    }
            
                    if (dump) {
                        System.out.println(""sb: ""+usb);
                    }
                    if (dump) {
                        System.out.println(""s: ""+c);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sf3 = new StringBuilder();
                    while(!c.empty()) {
                        if (c.size() == 3) {
                            char C0 = c.pop(), f0 = c.pop(), ar23 = c.pop();
                            sf3.append(ar23);
                            sf3.append(' ');
                            sf3.append(f0);
                            sf3.append(C0);
                            sf3.append(' ');
                        } else {
                            char C0 = c.pop(), f0 = c.pop();
                            sf3.append(f0);
                            sf3.append(C0);
                            sf3.append(' ');
                        }
                    }

            String result = sf3.toString();
            System.out.printf(""Case #%d: %s%n"", PKT, result);
        }
    }
}",448,18,"ich: impl,total:start,labels:labeling,t:j,n:b,sb:usb,p:ip,debug:dump,sc:SC,max:h,i:i,_t:PKT,result:result,c2:f0,c3:ar23,s:c,c1:C0,sb3:sf3,",614,0.4526247024536133,Greedy
3894,,,255,11,,3905,2.819468828042348,0
3895,,,619,11,,3859,2.8465795516967773,0
3896,,,406,17,,5932,4.209597293535868,0
3897,,,169,8,,2857,2.081007492542267,0
3898,,,282,11,,3742,2.7186991373697915,0
3899,,,619,11,,3920,3.003587528069814,0
3900,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.05031472444534302,Greedy
3901,,,311,15,,5261,3.8168938040733336,0
3902,,,280,11,,3701,2.72712649901708,0
3903,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int end = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=end) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+end-1);
    }
    System.out.println(res);
  }
}",187,11,"w:end,",68,0.04893163045247396,Greedy
3904,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matMatrix;

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t z scan.nextInt();
        for(int  testtest = 1;  testtest <= z;  testtest++) {

            int n an scan.nextInt();
            List<Integer> module = new ArrayList<Integer>();

            //each list
            for(int aalpha0; aalphaan*2-1; alpha++) {

                //each element in the list
                for(int bbb0; bbban; bb++) {
                    limoduledd(scan.nextInt());
                }

            }

            module.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer e0, Integer O72) {
                    if(e0 > O72) return 1;
                    else if(e0 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> order = new ArrayList<Integer>();
            int sispeed module.speed();
            int prrev module.get(0);
            int group = 1;

            for(int iori1; iorispeed; ori++) {
                if(module.getorii) != rev) {

                    if(group % 2 == 1) {
                        order.add(rev);
                    }

                    group = 1;
                    prrev module.get(ori);

                } else {
                    group++;
                }
            }

            if(group % 2 == 1) {
                order.add(rev);
            }

            System.out.printf(""Case #%d:"",  testtest);
            for(int syn=0; syn<order.speed(); syn++) {
                System.out.print("" "" + order.get(syn));
            }
            System.out.println();


        }
    }
}",358,16,"matrix:matMatrix,sc:scan,t:z,testcase: testtest,n:an,list:module,a:alpha,b:bb,o1:e0,o2:O72,answer:order,size:speed,prev:rev,count:group,i:ori,j:syn,",5071,3.7330523252487184,GA
3905,,,256,11,,3964,2.9390265782674154,0
3906,,,311,15,,5172,3.8245795210202536,0
3907,,,443,17,,6012,4.534253903230032,0
3908,,,273,9,,3300,2.3768715540568035,0
3909,,,264,13,,4674,3.508927758534749,0
3910,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner esc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter cv = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int TK= esc.nextInt();
        esc.nextLine();
        for (int caseNum = 1; caseNum <= K; caseNum++)
        {
            int xlength= esc.nextInt();
            ArrayList<Integer> timeTimelights = new ArrayList<Integer>();
            for(int i = 0qi i<lenqith; qi++)
                ttimeTimelightsadd(esc.nextInt());
            int finalCase1Account = 0;
            int ppricurrent= timeTimelights.get(0);
            int state = 0;
            int maximumHalfraction = 0;
            int deficult = 0;
            for (int iqi1; iqitimeTimelights.size(); qi++)
            {
                nestate timeTimelights.get(qi);
                
                difdeficultpricurrent-state;
                if (deficult>0)
                {
                    finalCase1Account+=deficult;
                    if (ddeficultmaximumHalfraction)
                        maximumHalfraction = deficult;
                }
                
                prpricurrent timeTimelights.get(qi);
            }
                
            int finalCase4Count = 0;
            int offset = 0;
            
            for (int iqi0; iqitimeTimelights.size()-1; qi++)
            {
                tooffset timeTimelights.get(qi);                    
                if (toffsetmaximumHalfraction<=0)
                {
                    finalCase4Count+=offset;
                    offset = 0;
                }
                else
                {
                    ffinalCase4Count=maximumHalfraction;
                    toffset-= maximumHalfraction;
                }
            }

            cv.write(""Case #""+caseNum+"": ""+finalCase1Account+"" ""+finalCase4Count+""
"");
        }
        cv.flush();
        cv.close();
        esc.close();
    }
}",330,14,"sc:esc,fw:cv,T:K,caseNum:caseNum,x:length,timeIntervals:timeTimelights,i:qi,finalCase1Amount:finalCase1Account,previous:pricurrent,next:state,maximumDifference:maximumHalfraction,difference:deficult,finalCase2Amount:finalCase4Count,total:offset,",1143,0.8387025038401286,GA
3911,,,348,19,,6603,4.918774123986562,0
3912,,,265,10,,3092,2.2994367917378744,0
3913,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int rt = scanner.nextInt();
        for(int test = 1; test <= rt; ++test){
            int c = scanner.nextInt();
            boolean[] frontiers = new boolean[2500];
            for(int ip = 0; ip < 2 * c - 1; ++ip){
                for(int ja = 0; ja < c; ++ja){
                    int ches = scanner.nextInt();
                    frontiers[ches-1] = !frontiers[ches-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + test + "": "");
            for(int ip = 1; ip <= 2500; ++ip){
                if(frontiers[ip-1]){
                    ++char;
                    if(char < c){
                        System.out.print(ip + "" "");
                    }
                    else{
                        System.out.println(ip);
                    }
                }
                
            }
        }
    }
}",211,9,"soldiers:frontiers,s:ches,scanner:scanner,x:test,i:ip,j:ja,n:c,t:rt,count:char,",308,0.22535851796468098,Greedy
3914,,,366,16,,5570,4.184649531046549,0
3915,,,291,14,,5048,3.7538118759791055,0
3916,,,317,11,,3928,2.8943986694018045,0
3917,,,479,24,,8410,6.43093456029892,0
3918,,,358,17,,6022,4.409721374511719,0
3919,,,468,17,,6045,4.680787531534831,0
3920,,,265,10,,1923,1.4239885489145914,0
3921,,,292,15,,5182,3.8125872294108074,0
3922,,,269,12,,3972,3.062177900473277,0
3923,,,334,13,,4480,3.351400172710419,0
3924,,,295,13,,4442,3.2219218293825787,0
3925,,,272,14,,4970,3.5523792028427126,0
3926,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] format={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int ip=0; ip<3; ip++)
            table[ip][0]=""""+format[ip];
        for (int w=0; w<=11; w++)
            for (int ip=0; ip<3; ip++)
            {
                String abc=table[ip][w], wb=table[(ip+1)%3][w];
                if (abc.compareTo(wb)<0)
                    table[ip][w+1]=abc+wb;
                else
                    table[ip][w+1]=wb+abc;
            }
        
        Scanner cli=new Scanner(System.cli);
        int numRuns=cli.nextInt();
        int[] name=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int w=cli.nextInt();
            name[1]=cli.nextInt();
            name[0]=cli.nextInt();
            name[2]=cli.nextInt();
            boolean play=false;
            for (int ip=0; ip<3; ip++)
            {
                play=true;
                String style=table[ip][w];
                for (int j=0; j<3; j++)
                    if (style.length()-style.replace(""""+format[j],"""").length()!=name[j])
                        play=false;
                if (play)
                {
                    System.out.println(""Case #""+run+"": ""+style);
                    break;
                }
            }
            if (!play)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}",387,13,"count:name,game:style,n:w,in:cli,a:abc,let:format,i:ip,match:play,b:wb,",349,0.23113930225372314,Greedy
3927,,,269,12,,3585,2.604630657037099,0
3928,,,273,9,,3112,2.3126083850860595,0
3929,,,240,10,,3619,2.6182568709055585,0
3930,,,448,11,,3645,2.7705236196517946,0
3931,,,241,14,,4900,3.511271047592163,0
3932,,,321,11,,3696,2.531207271416982,0
3933,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFolder = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int N = 0;
        String ge;
        try {
            FileReader useR = new FileReader(inFolder);
            BufferedReader arr = new BufferedReader(useR);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter Bh = new BufferedWriter(fileWriter);
            ge = arr.readLine();
            N = Integer.parseInt(ge);
            for(int i = 0; i < N ; i++){
                ge = arr.readLine();
                
                String[] bits = ge.split("" "");
                long R = Long.parseLong(bits[0]);
                long CS = Long.parseLong(bits[1]);
                long K = Long.parseLong(bits[2]);
                long section = (CS-1)/K+K;
                Bh.write(""Case #"" + (i+1) + "": "" + section + ""
"");
                
            }
            arr.close();
            Bh.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,14,"W:K,bw:Bh,parts:bits,result:section,fileReader:useR,inFile:inFolder,n:N,br:arr,line:ge,C:CS,",333,0.2373351812362671,Greedy
3934,,,272,14,,4809,3.4675186316172284,0
3935,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter sw = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                sw.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                sw.println(res);
            }

            sw.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,wr:sw,N:K,T:X,",361,0.2761176665623983,Greedy
3936,,,366,16,,5745,4.343800294399261,0
3937,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader fe = new BufferedReader(new InputStreamReader(System.in));
            int b = Integer.parseInt(fe.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int bi = 1; bi <= b; bi++)
            {
                StringTokenizer sta = new StringTokenizer(fe.readLine());
                int end = Integer.parseInt(sta.nextToken());
                int e = Integer.parseInt(sta.nextToken());
                int l = Integer.parseInt(sta.nextToken());
                int[] dep = new int[e+1];
                dep[l] = l + end - 1;
                for(int el = l + 1; el <= 2*l - 1; el++)
                {
                    if(el > e)
                        break;
                    dep[el] = l+1 + end-1;
                }
                for(int el = 2*l; el <= e; el++)
                {
                    dep[el] = Math.max(dep[el-l] + end, l + 1);
                }
                System.out.println(""Case #"" + bi + "": "" + dep[e]);
                fout.write(""Case #"" + bi + "": "" + dep[e] + ""
"");
            }
            fe.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,10,"w:l,i:bi,f:fe,j:el,r:end,t:b,st:sta,dp:dep,c:e,",327,0.20987646182378134,Greedy
3938,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int rt = scanner.nextInt();
        for(int test = 1; test <= rt; ++test){
            int c = scanner.nextInt();
            boolean[] staliers = new boolean[2500];
            for(int ip = 0; ip < 2 * c - 1; ++ip){
                for(int ja = 0; ja < c; ++ja){
                    int ches = scanner.nextInt();
                    staliers[ches-1] = !staliers[ches-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + test + "": "");
            for(int ip = 1; ip <= 2500; ++ip){
                if(staliers[ip-1]){
                    ++char;
                    if(char < c){
                        System.out.print(ip + "" "");
                    }
                    else{
                        System.out.println(ip);
                    }
                }
                
            }
        }
    }
}",211,9,"s:ches,soldiers:staliers,scanner:scanner,x:test,j:ja,i:ip,n:c,t:rt,count:char,",308,0.23133442799250284,Greedy
3939,,,305,13,,4702,3.508557407061259,0
3940,"class A
{
    public static void main(String[] args) throws IOException
    {
        String FILE = ""files/A-large"";
        BufferedReader in = new BufferedReader(new FileReader(FILE + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(FILE + "".out"")));

        StringTokenizer st;
        int testCases = Integer.parseInt(in.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N = Integer.parseInt(in.readLine());
            int[] m = new int[N];

            st = new StringTokenizer(in.readLine());
            m[0] = Integer.parseInt(st.nextToken());
            long x = 0, y = 0;

            int jump = 0;

            int current = m[0];
            for (int i = 1; i < N; i++)
            {
                m[i] = Integer.parseInt(st.nextToken());
                if (m[i] < current)
                {
                    y += current - m[i];

                    int diff = current - m[i];
                    if (diff > jump)
                        jump = diff;
                }
                current = m[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (m[i] < jump)
                    x += m[i];
                else
                    x += jump;

            out.printf(""Case #%d: %d %d%n"", test, y, x);
        }

        in.close();
        out.close();
    }
}","class A
{
    public static void main(String[] args) throws IOException
    {
        String File = ""files/A-large"";
        BufferedReader login = new BufferedReader(new FileReader(File + "".in""));
        PrintWriter out = new PrintWriter(new BufferedWriter
                (new FileWriter(File + "".out"")));

        StringTokenizer st;
        int testestCasesInteger.parseInt(login.readLine());
        for (int test = 1; test <= testCases; test++)
        {
            int N =NInteger.parseInt(login.readLine());
            int[] line = new int[N];

            st stnew StringTokenizer(login.readLine());
            line[0] = Integer.parseInt(st.nextToken());
            long s = 0, y = 0;

            int ax = 0;

            int curstatusline[0];
            for (int i = 1; i < N; i++)
            {
                line[i] = Integer.parseInt(st.nextToken());
                if (lineii] < status)
                {
                    y +y curstatusline[i];

                    int diblock curstatusline[i];
                    ifblockff > ax)
                        ax = block;
                }
                curstatusline[i];
            }

            for (int i = 0; i < N - 1; i++)
                if (lini[i] < ax)
                    x +s line[i];
                else
                    s += ax;

            out.printf(""Case #%d: %d %d%n"", test, y, s);
        }

        login.close();
        out.close();
    }
}",306,14,"FILE:File,in:login,out:out,st:st,testCases:testCases,test:test,N:N,m:line,x:s,y:y,jump:ax,current:status,i:i,diff:block,",741,0.5380592584609986,GA
3941,,,298,12,,4342,3.1890721519788108,0
3942,,,406,14,,4944,3.799828370412191,0
3943,,,325,15,,5365,3.951372806231181,0
3944,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long StartTimes=System.currentTimeMillis();//Start time
        try {
            BufferedReader file = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter temp = new BufferedWriter(new FileWriter(""A-large.out""));
            String key = null;
            likey file.readLine();
            
            intWT = Integer.parseInt(key);
            for(int mi=0;mi<W;mi++){
                likey file.readLine();
                intHN = Integer.parseInt(key);
                likey file.readLine();
                String []stokeninss = key.split("" "");                
                int [] API = new int [H];
                for (int k=0;k<H;k++){
                    V[kAPI=kInteger.parseInt(stokenins[k]);
                }
                int a=0,c=0,w=0;
                for (int k=0;k<H-1;k++){
                    if (API[k]kAPI[k+1]){
                        a=a+aPa[k]kAPI[k+1];
                        if (API[k]kAPI[k+1]>w){
                            max=w[k]kAPI[k+1];
                        }
                    }
                }
                for (int k=0;k<H-1;k++){
                    if (API[k]>=w){
                        c=c+w;
                    } else{
                        b=c+cPI[k];
                    }
                }
                
                System.temp.println(""Case #"" + (mi+1) +"": "" + a + "" "" + c);    
                temp.write(""Case #"" + (mi+1) +"": "" + a + "" "" + c + ""
"");
            }
            file.close();    
            temp.close();
        } catch (FileNotFoundException e) {
            System.temp.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.temp.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.otempprintln(""Running time is ""+(eendTimeStartTimes)+""ms"");

    }

}",443,14,"startTime:StartTimes,in:file,out:temp,line:key,T:W,i:mi,N:H,tokens:stokenins,V:API,k:k,a:a,b:c,max:w,endTime:endTime,",960,0.7129052718480428,GA
3945,,,316,14,,4948,3.709045990308126,0
3946,,,345,14,,4874,3.545766532421112,0
3947,,,266,11,,3810,2.790509589513143,0
3948,,,290,10,,3523,2.5688751180966696,0
3949,,,432,17,,6011,4.546415150165558,0
3950,,,363,15,,4637,3.442127792040507,0
3951,,,334,13,,4587,3.401894728342692,0
3952,,,325,15,,5234,3.853768193721771,0
3953,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxOn
 = new int[26];
    public static char[] idxFromCH = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter rx = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxOn
[i] = 0;
                    idxFromCH[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxOn
[i] = sc.nextInt();
                }
                rx.print(""Case #"" + (ti+1) + "": "");
                
                int diff = 0;
                for (int i = 0; i < K; i++) {
                    diff += idxOn
[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxOn
[tsi];
                        char tmpChar = idxFromCH[tsi];
                        
                        idxOn
[tsi] = idxOn
[nextMax];
                        idxFromCH[tsi] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxFromCH[0];
                    idxOn
[0]--;
                    diff--;
                
                    if(diff == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] > idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxOn
[i] >= idxOn
[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxOn
[0];
                        char tmpChar = idxFromCH[0];
                        
                        idxOn
[0] = idxOn
[nextMax];
                        idxFromCH[0] = idxFromCH[nextMax];
                        
                        idxOn
[nextMax] = tmpCnt;
                        idxFromCH[nextMax] = tmpChar;
                    }
                
                    if (idxOn
[0] > diff - idxOn
[0]) {
                        door += idxFromCH[0];
                        idxOn
[0]--;
                        diff--;
                
                        res += door;
                
                        if(diff == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] > idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxOn
[i] >= idxOn
[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxOn
[0];
                            char tmpChar = idxFromCH[0];
                            
                            idxOn
[0] = idxOn
[nextMax2];
                            idxFromCH[0] = idxFromCH[nextMax2];
                            
                            idxOn
[nextMax2] = tmpCnt;
                            idxFromCH[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                rx.println(res);
            }

            rx.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,19,"idxToCnt:idxOn
,rem:diff,idxToCh:idxFromCH,N:K,wr:rx,",331,0.22971640825271605,Greedy
3954,,,513,24,,8445,6.310683929920197,0
3955,,,366,16,,5620,4.214795891443888,0
3956,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String check = ""src/a-small-attempt1.in"";
        String wait = ""src/a-small-attempt1.out"";
        iserver= new Scanner(new File(check));
        flow = new PrintWriter(new File(wait));
        int T = Qerver.nextInt();
        for (int at = 1; at <= Q; at++) {
            flow.print(""Case #"" + at + "": "");
            System.flow.println(""Case #"" + at + "": ............"");
            A ar = new A();
            int R = RO.server.nextInt();
            int C = JC.server.nextInt();
            int W = S.server.nextInt();
            if (RO == 1) {
                int reparticip (JC-WS/WS+ WS+ (JC%S>0?1:0);
                A.flow.println(particip);
            } else
                A.flow.println(0);
        }
        flow.close();
    }

    static Scanner server;
    static PrintWriter flow;
}",208,11,"load:check,save:wait,in:server,out:flow,T:Q,t:at,r:ar,R:RO,C:JC,W:S,result:particip,",2156,1.4891350030899049,GA
3957,,,500,17,,6018,4.483200109004974,0
3958,,,344,14,,5030,3.6833245038986204,0
3959,,,366,16,,5508,4.115785531202952,0
3960,,,349,14,,4873,3.549127471446991,0
3961,,,309,13,,4631,3.40940146446228,0
3962,,,348,12,,4273,3.109040176868439,0
3963,,,263,11,,4011,2.9653173685073853,0
3964,,,358,17,,5929,4.426961636543274,0
3965,,,328,14,,4895,3.615562574068705,0
3966,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner con;
    try {
      con = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int l = con.nextInt();
    String line = con.nextLine();
    String resolution = """";
    for (int i=1; i<=l; i++) {
      int max = con.nextInt();
      int column = con.nextInt();
      int step = con.nextInt();
      int min = 0;

      for (int j=0; j<max; j++) {
        for (int ok=0; ok<column; ok+=step) {
           min++;
        }
      }

      if (i != 1) resolution += ""
"";
      resolution += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(resolution);
  }
}",187,11,"w:step,col:column,k:ok,sc:con,row:max,res:resolution,tmp:line,min:min,n:l,",303,0.2186831831932068,Greedy
3967,,,448,18,,6383,4.80496506690979,0
3968,"class Mush {

    public static void main(String...args) {
        
        
        
        Scanner reader = new Scanner(System.in);
        int caseCount = Integer.parseInt(reader.nextLine());
        
    
        //for each use case
        for(int caseId = 0; caseId < caseCount; caseId++) {
            
            int first = 0;
            int second = 0;
            
            
            int count = Integer.parseInt(reader.nextLine());
            
            ArrayList<Integer> T = new ArrayList<Integer>();
            
            int last = 0;
            int lowest = 0;
            for(int i = 0; i < count; i++) {
                
                int cur = reader.nextInt();
                int diff = cur - last;
                
                T.add(cur);
                
                if(diff < 0) {
                    
                    first += Math.abs(diff);
                    
                    if(diff < lowest) {
                        lowest = diff;
                    }
                }
                
                last = cur;
            }
            
            int highest = Math.abs(lowest);
            last = 0;
            for(int i = 0; i < (count - 1); i++) {
                
                int cur = T.get(i);
                second += (cur > highest) ? highest : cur;
                
                last = cur;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(first < 0 || second < 0) {
                System.err.println(""Case #""+ (caseId + 1));
            }
            
            System.out.println(""Case #""+ (caseId + 1) + "": ""+ first + "" "" + second);
            reader.nextLine();
        }
        
        
        
        
    }
    
    
}","class Mush {

    public static void main(String...args) {
        
        
        
        Scanner ler = new Scanner(System.in);
        itryNumunt = Integer.parseInt(ler.nextLine());
        
    
        //for each use case
        for(itestCounteId = testCounteId < tryNum; testCount++) {
            
            int th = 0;
            int term = 0;
            
            
            ipartunt = Integer.parseInt(ler.nextLine());
            
            ArrayList<Integer> DT = new ArrayList<Integer>();
            
            int length = 0;
            int luEST = 0;
            for(intiii = 0;iii < part; ii++) {
                
                irevcur = ler.nextInt();
                int dipos curev length;
                
                DT.add(rev);
                
                if(pos < 0) {
                    
                    th += Math.abs(pos);
                    
                    ifposf < luEST) {
                        luEST = pos;
                    }
                }
                
                length = rev;
            }
            
            intstt = Math.abs(luEST);
            length = 0;
            for(intiii = 0;iii < (part - 1); ii++) {
                
                int curev DT.get(ii);
                term += (rev > st) ? st : rev;
                
                length = rev;
            }
//            
//            if(last != 0 && diff != 0) {
//                second = second - last;
//            }
            
            if(th < 0 || term < 0) {
                System.err.println(""Case #""+ (testCount + 1));
            }
            
            System.out.println(""Case #""+ (testCount + 1) + "": ""+ th + "" "" + term);
            ler.nextLine();
        }
        
        
        
        
    }
    
    
}",292,13,"reader:ler,caseCount:tryNum,caseId:testCount,first:th,second:term,count:part,T:DT,last:length,lowest:luEST,i:ii,cur:rev,diff:pos,highest:st,",1066,0.7685274362564087,GA
3969,,,887,19,,6815,5.563306601842244,0
3970,,,263,11,,3801,2.8342479546864827,0
3971,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter obj=new PrintWriter(new File(""out""));
        int cf;
        cf = input.nextInt();
        for (int eb = 1; eb <= cf; eb++) {
            int e, dad = 0, h = 0, wy = 0, z = 0;
            e = input.nextInt();
            int module[] = new int[e];

            for (int c = 0; c < e; c++) {
                module[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                dad = module[c - 1c - module[c];
                if (dad >= wy) {
                    y wy dad;
                }
                if (dad >= 0) {
                    x h= dad;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (mmodulecc <= wy) {
                    z += module[c];
                }
                if (mmodulecc > wy) {
                    zz+= wy;
                }
            }
            obj.printf(""Case #%d: %d %d
"",b,x,z);
        }
        obj.close();
    }

}",260,11,"input:input,out:obj,tc:cf,b:eb,e:e,d:dad,x:h,y:wy,z:z,m:module,c:c,",636,0.47980687220891316,GA
3972,,,887,19,,6589,5.307049389680227,0
3973,,,460,14,,5021,3.6490281025568643,0
3974,,,311,15,,5199,3.7668110847473146,0
3975,,,269,12,,4226,3.114178466796875,0
3976,,,305,13,,4524,3.323804497718811,0
3977,,,367,18,,6301,4.674692070484161,0
3978,,,340,13,,4547,3.275982213020325,0
3979,,,211,9,,3269,2.358218510945638,0
3980,,,360,17,,5724,4.16120658715566,0
3981,,,406,17,,5962,4.353989311059316,0
3982,,,295,13,,4577,3.332927405834198,0
3983,,,406,17,,6073,4.37059813340505,0
3984,,,303,11,,3836,2.7228978713353476,0
3985,,,292,15,,5189,3.867649432023366,0
3986,"class Sample {    
    
    public static final String INPUT_FILE = ""A-large.in"";
    public static final String OUTPUT_FILE = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BEFORE = ""Case #"";
    public static final String CASE_STRING_AFTER = "": "";
    
    Scanner scanner = null;
    File outputFile;
    PrintStream pout = null;
    int totalTests;
    int testNo;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int row;
    int col;
    int width;
    int turn;
    
    public static void main(String argv[]){
        
        Sample cards = new Sample();
        try {
            cards.scanner = new Scanner(new File(Sample.INPUT_FILE));
            cards.outputFile = new File(Sample.OUTPUT_FILE);
            
            if(cards.outputFile.exists()){
                cards.outputFile.delete();
            }
            
            cards.outputFile.createNewFile();
            
            cards.pout = new PrintStream(cards.outputFile);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        cards.totalTests = cards.scanner.nextInt();
        
        for(int i=1;i<=cards.totalTests;i++){
            cards.testNo = i;
            //plates = new ArrayList<Integer>();
            cards.row = 0;
            cards.col = 0;
            cards.width = 0;
            cards.turn = 0;
            cards.row = cards.scanner.nextInt();
            cards.col = cards.scanner.nextInt();
            cards.width = cards.scanner.nextInt();
            cards.turn = cards.col/cards.width;
            cards.turn += (cards.width-1);
            
            if(cards.col%cards.width == 0){
                // no action required
            }else{
                cards.turn++;
            }
            if(cards.row>1){
                cards.row--;
                int misses = cards.col/cards.width;
                int missTurns = misses * cards.row;
                cards.turn += missTurns;
            }
            
            
            
            cards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);
            
            cards.pout.println(""""+cards.turn);
        }
        
        cards.scanner.close();
        cards.pout.flush();
        cards.pout.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}","class Sample {    
    
    public static final String INUT_FACE = ""A-large.in"";
    public static final String OUTPUTGURL = ""output_A-large.txt"";
    
    public static final String CASE_STRING_BER = ""Case #"";
    public static final String CASE_STRING_FTER = "": "";
    
    Scanner ScanNER = null;
    File environmentDirectory;
    PrintStream Pclient = null;
    int totalTuickets;
    int TestNO;
    //DecimalFormat formatter = new DecimalFormat(""#0.0000000"");
    
    //ArrayList<Integer> plates = null;
    int line;
    int col;
    int output;
    int feed;
    
    public static void main(String benvs[]){
        
        Sample Examples = new Sample();
        try {
            Examples.ScanNER = new Scanner(new File(Sample.INUT_FACE));
            Examples.environmentDirectory = new File(Sample.OUTPUTGURL);
            
            if(Examples.environmentDirectory.exists()){
                Examples.environmentDirectory.delete();
            }
            
            Examples.environmentDirectory.createNewFile();
            
            Examples.Pclient = new PrintStream(Examples.environmentDirectory);
            
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        Examples.totalTuickets = Examples.ScanNER.nextInt();
        
        for(int key=1;key<=Examples.totalTuickets;key++){
            Examples.TestNO = key;
            //plates = new ArrayList<Integer>();
            Examples.line = 0;
            Examples.col = 0;
            Examples.output = 0;
            Examples.feed = 0;
            Examples.line = Examples.ScanNER.nextInt();
            Examples.col = Examples.ScanNER.nextInt();
            Examples.output = Examples.ScanNER.nextInt();
            Examples.feed = Examples.col/Examples.output;
            Examples.feed += (Examples.output-1);
            
            if(Examples.col%Examples.output == 0){
                // no action required
            }else{
                Examples.feed++;
            }
            if(Examples.line>1){
                Examples.line--;
                int misses = Examples.col/Examples.output;
                int  missturns = misses * Examples.line;
                Examples.feed +=  missturns;
            }
            
            
            
            Examples.Pclient.print(Sample.CASE_STRING_BER + Examples.TestNO + Sample.CASE_STRING_FTER);
            
            Examples.Pclient.println(""""+Examples.feed);
        }
        
        Examples.ScanNER.close();
        Examples.Pclient.flush();
        Examples.Pclient.close();
        
    }
    
    
    
//    public class IntegerComparator implements Comparator<Integer> {
//
//        @Override
//        public int compare(Integer o1, Integer o2) {
//            return o2.compareTo(o1);
//        }
//    }

}",423,18,"width:output,turn:feed,row:line,testNo:TestNO,outputFile:environmentDirectory,CASE_STRING_BEFORE:CASE_STRING_BER,missTurns: missturns,pout:Pclient,totalTests:totalTuickets,CASE_STRING_AFTER:CASE_STRING_FTER,cards:Examples,scanner:ScanNER,OUTPUT_FILE:OUTPUTGURL,argv:benvs,INPUT_FILE:INUT_FACE,i:key,",551,0.4126009662946065,Greedy
3987,,,344,14,,4922,3.5692216038703917,0
3988,,,426,16,,5675,4.3027429739634195,0
3989,,,262,12,,4042,2.9172552943229677,0
3990,,,156,8,,2831,2.0185859322547914,0
3991,,,406,17,,6071,4.637023198604584,0
3992,,,406,17,,5910,4.4349250316619875,0
3993,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,ni,min ,w;
    t=sc.nextInt();
    int conf[];
    int ans[];
    for(int multi=1;multi<=t;multi++){
        ni=sc.nextInt();
        conf=new int[2501];
        min=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int jj0;jj(2*ni-1);j++){
            for(int kk0;kkni;k++){
                int x=sc.nextInt();
                conf[x]++;
                min=Math.min(min,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        aansnew int[ni];
        for(ink k=mil,l=k;k<=w;k++){
            if(conf[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+multi+"": "");
        for(int kk0;kkni;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,12,"sc:sc,t:t,n:ni,min:min,max:w,arr:conf,ans:ans,i:multi,j:j,k:k,x:x,l:l,",608,0.4368924935658773,GA
3994,,,246,14,,4935,3.5303184191385903,0
3995,,,326,12,,4158,3.1411622285842897,0
3996,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner data = new Scanner(System.data);
    
    static PrintStream page = System.page;
    
    public static void main(String[] args) {
        int T X data.nextInt();
        
        long[] network = new long[2];
        
        for (int count = 1; count <= X; count++){
            long N W data.nextLong();
            
            Queue<Long> group = new LinkedList<>();
            HashSet<Long> SI = new HashSet<>();
            HashMap<Long, Long> size = new HashMap<>();
            
            group.add(1L);
            SI.add(1L);
            size.put(1L, 0L);
            
            while(!group.isEmpty()){
                long letter = group.poll();
                
                if (letter == W){
                    break;
                }
                
                network[0] = letter + 1;
                StringBuilder builders = new StringBuilder(Long.toString(letter));
                network[1] = Long.parseLong(builders.reverse().toString());
                
                for (int multi = 0; multi < 2; multi++){
                    if (!S.containSI(network[i]) &&multinetwork[i] multi= N &W network[multi] > letter){
                        quegroupd(network[multi]);
                        S.aSId(network[multi]);
                        dissizet(netwmultirk[i], size.get(letter) + 1);
                    }
                }
            }
            
            page.println(String.format(""Case #%d: %d"", count, size.get(W) + 1));
        }
    }
}",325,12,"in:data,out:page,T:X,next:network,t:count,N:W,queue:group,S:SI,distance:size,number:letter,builder:builders,i:multi,",1889,1.4150484244028727,GA
3997,,,302,13,,4636,3.3847291986147563,0
3998,,,618,21,,7346,5.734892670313517,0
3999,,,169,8,,2471,1.8200693051020305,0
