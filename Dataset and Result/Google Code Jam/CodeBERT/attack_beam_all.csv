Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,,,285,14,,5209,7.559209271,0
1,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner login = new Scanner(System.login);
        int NT = login.nextInt();
        for (int costperLine = 0; costperLine < NT; costperLine++) {
            int GR = login.nextInt();
            int K = login.nextInt();
            int length = login.nextInt();
            
            int costperLine = K / length;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costperLine * GR;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (K % length == 0) {
                ans1 += (length - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += length;
            }
            int scan = ans1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"C:K,size:length,in:login,costPerRow:costperLine,i:costperLine,R:GR,T:NT,ans:scan,",2598,3.83429968,Beam
2,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.085664745,Beam
3,,,250,11,,3070,5.15753448,0
5,,,263,13,,4094,6.793650877,0
6,,,240,12,,3321,5.191084286,0
7,,,262,14,,3504,5.648058983,0
8,,,393,16,,5292,8.803491553,0
9,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.241966164,Beam
10,,,241,15,,3590,5.74512337,0
11,,,311,17,,5828,8.960539337,0
12,,,269,13,,4304,7.251872214,0
13,,,326,14,,5147,8.636016472,0
14,,,306,16,,5302,9.064346898,0
15,,,298,16,,4558,7.203894373,0
16,,,375,12,,3363,5.434735107,0
17,,,500,19,,8677,5.593272173,0
18,,,264,15,,5010,8.285714714,0
19,,,269,13,,4049,7.332756793,0
20,,,605,21,,9829,6.6173955,0
21,,,655,16,,2182,5.658514778,0
22,,,326,14,,4806,7.920263044,0
23,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1459,2.306221831,Beam
24,,,285,14,,4837,7.583604534,0
25,,,735,24,,11403,7.816377119,0
26,,,282,13,,4086,6.187138251,0
27,,,419,16,,6077,4.069208237,0
28,,,149,10,,2202,2.570341444,0
29,,,517,26,,10007,6.779426126,0
30,,,272,16,,5979,3.857648496,0
31,,,255,13,,2915,6.225114922,0
32,,,306,16,,5147,8.588323577,0
33,,,358,16,,5302,8.681557206,0
34,,,211,11,,2977,4.303770463,0
35,,,134,9,,1892,2.254894769,0
36,,,478,22,,11626,8.064522612,0
37,,,328,16,,5240,8.975485241,0
38,,,525,23,,13531,9.227869109,0
39,,,215,12,,3352,5.084875429,0
40,,,254,13,,4094,6.386226662,0
41,,,790,14,,4837,10.40952875,0
42,,,309,11,,1954,3.142968591,0
43,,,326,14,,4837,8.244263236,0
44,,,273,11,,2634,4.618327733,0
45,,,334,12,,3930,7.028335579,0
46,,,349,19,,5766,8.991463013,0
47,,,198,10,,2467,4.111609483,0
48,,,273,11,,2646,4.249542892,0
49,,,618,26,,10800,7.361919733,0
50,,,302,15,,2636,4.085347068,0
51,,,328,16,,5116,8.628599306,0
52,,,262,14,,3101,4.850952907,0
53,,,278,15,,5183,7.040677575,0
54,,,292,16,,4527,6.932457213,0
55,,,393,16,,5300,8.952684236,0
56,,,468,20,,8623,15.25351014,0
57,,,418,13,,4093,8.65945276,0
58,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.702167781,Beam
59,,,311,17,,8377,5.699366061,0
60,,,443,17,,5014,10.34775876,0
62,,,363,16,,6078,13.28465886,0
63,,,272,16,,5839,9.842619801,0
64,,,349,19,,5474,11.34104471,0
65,,,393,16,,5226,10.80228526,0
66,,,735,24,,10456,7.301707685,0
67,,,272,16,,5966,3.886117121,0
68,,,290,12,,3691,7.610021389,0
69,,,169,10,,2233,4.018296103,0
70,,,618,26,,10894,7.462792345,0
71,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner pc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = pc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = pc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = pc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,sc:pc,",475,1.392214648,Beam
72,,,399,18,,6263,4.270858252,0
73,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,4.431923556,Beam
74,,,355,19,,6537,4.270858252,0
75,,,134,9,,1737,4.431923556,0
76,,,334,15,,5209,3.999103479,0
77,,,272,16,,6010,4.270858252,0
78,,,295,15,,3130,4.431923556,0
79,,,260,11,,2512,3.999103479,0
80,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5062,4.454000862,Beam
81,,,256,13,,3033,6.600799453,0
82,,,358,18,,6570,4.270858252,0
83,,,260,13,,4434,4.431923556,0
84,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,3.999103479,Beam
85,,,132,9,,1702,4.454000862,0
86,,,513,26,,16714,11.49147439,0
87,,,292,16,,4155,6.763552058,0
88,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String baseRoot = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] Chi = new char[26];
        for (int v = 0; v < Chi.length; v++) Chi[v] = (char)('A' + v);

        try (Scanner tc = new Scanner(new File(baseRoot))) {
            int A = tc.nextInt();
            for (int v = 1; v <= A; v++) {
                result.append(""Case #"" + v + "":"");
                int B = tc.nextInt();
                int[] Ki = new int[B];
                int use = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ki[rev] = tc.nextInt();
                    use += Ki[rev];
                    Ki[rev] *= 2;
                }
                while (use > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    use--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ki[rev] > use) {
                            if (v == 0) {
                                result.append(Chi[rev]);
                                Ki[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(Chi[rev]);
                                Ki[rev] -= 2;
                                use--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ki[rev] > 0) {
                                result.append(Chi[0]);
                                Ki[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String wordFile = ""answer.out"";
            if (baseRoot != null && !baseRoot.equals("""")) {
                wordFile = baseRoot.substring(0, baseRoot.length() - 2) + ""out"";
            }
            try (FileOutputStream foses = new FileOutputStream(wordFile, false)) {
                foses.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception ae) {
            ae.printStackTrace();
        }
    }
}",448,16,"sum:use,j:rev,N:B,flag:v,Pi:Ki,T:A,i:v,sc:tc,answer:result,parties:Chi,filePath:baseRoot,e:ae,outPath:wordFile,fos:foses,",3736,7.193532896,Beam
89,,,553,21,,6097,4.192614683,0
90,,,295,15,,3130,5.415731545,0
91,,,269,16,,5843,9.085743074,0
92,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.87354484,Beam
93,,,325,16,,5891,10.30728705,0
94,,,349,19,,5404,8.34304289,0
96,,,326,14,,4838,8.313982848,0
97,,,291,13,,4093,6.619826706,0
98,,,418,13,,4434,10.35638023,0
99,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.686295001,Beam
100,,,271,12,,3337,4.93605026,0
102,,,273,11,,2740,4.367889694,0
103,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                sum += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,ret:arg,",1818,2.55808715,Beam
104,,,406,19,,7999,5.383076501,0
105,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,10.0253424,Beam
106,,,265,12,,3387,5.374218047,0
107,,,417,18,,3814,7.161406056,0
108,,,309,11,,1954,3.174439994,0
109,,,500,19,,8459,6.081427427,0
110,,,619,14,,4293,7.536470703,0
111,,,406,19,,7999,5.455016955,0
112,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int Test;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (Test=0;Test<w;Test++) m[Test]=reader.nextLong();
            long result=0; res=0;
            for (Test=1;Test<w;Test++){
                if (m[Test-1]>m[Test]) res+=(m[Test-1]-m[Test]);
                result=Math.max(result,m[Test-1]-m[Test]);
            }
            a=new long [w+2];
            res=result*w*w; 
            long ns,h=0,w=result*w*w,id;
            while(h<=w){
                id=(h+w)/2;
                ns=0;
                for (Test=1;Test<w;Test++){
                    if (m[Test-1]>=id)ns+=id;
                    else ns+=m[Test-1];
                    if (m[Test-1]-id>m[Test]) break;
                }
                if (Test==w){
                    res=Math.min(ns,res);
                    w=id-1;
                }else{
                    h=id+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res);
        }
    }
    
}",393,19,"n:w,maxrate:result,rate:id,r:w,res1:res,l:h,i:Test,rs:ns,res2:res,",5410,3.6980358,Beam
113,,,285,14,,4837,7.62229329,0
114,,,292,15,,5030,8.418685281,0
115,,,443,17,,5014,9.904938455,0
116,,,419,16,,6015,10.66066681,0
117,,,292,17,,6855,10.9983214,0
118,,,260,11,,2512,4.147803203,0
119,,,309,11,,2202,3.590079172,0
120,,,406,19,,7999,14.12523889,0
121,,,241,15,,3251,5.013069789,0
122,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner analyer = new Scanner(System.in);
        int rt = analyer.nextInt();
        for(int x = 1; x <= rt; ++x){
            int w = analyer.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = analyer.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:weight,scanner:analyer,t:rt,soldiers:wars,",1613,2.407729379,Beam
123,,,321,13,,4434,7.59973592,0
124,,,306,16,,5240,8.732222362,0
125,,,262,14,,3132,5.454203594,0
126,,,298,16,,4558,7.846049436,0
127,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.883234517,Beam
128,,,311,17,,6351,9.90687056,0
129,,,544,17,,6025,11.83417621,0
130,,,366,17,,6139,9.958020798,0
131,,,169,10,,2481,3.233560534,0
132,,,366,17,,6108,10.03266269,0
133,,,269,13,,4177,7.258597612,0
134,,,371,12,,3380,6.284673846,0
135,,,256,13,,3055,5.449263724,0
136,,,308,12,,1768,3.305060454,0
137,,,262,14,,3504,5.87566661,0
138,,,468,14,,3566,8.620693608,0
139,,,200,10,,2481,3.160444812,0
140,,,790,14,,4837,10.18048941,0
141,,,735,24,,10311,16.348911,0
142,,,256,13,,3064,5.395362604,0
143,,,256,13,,3064,5.409038353,0
144,,,468,14,,3566,8.39460971,0
145,,,406,19,,7999,13.94793727,0
146,,,309,11,,2202,3.410767726,0
147,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    val    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + val);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:val,",1086,1.502724485,Beam
148,,,321,18,,6976,11.12716196,0
149,,,269,16,,5914,8.946789157,0
150,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dt = new int[l+1];
                dt[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dt[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dt[j] = Math.max(dt[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dt[l]);
                fout.write(""Case #"" + i + "": "" + dt[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dt,",1391,2.1335271,Beam
151,,,348,14,,3492,6.054610578,0
152,,,278,11,,2771,4.322746877,0
153,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.831288346,Beam
154,,,269,16,,6004,9.453445689,0
155,,,321,13,,4093,7.114140201,0
156,,,265,12,,3699,6.058790267,0
157,,,406,16,,5891,11.0672302,0
158,,,256,13,,4421,7.27791237,0
159,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.502945952,Beam
161,,,281,14,,4838,7.201160526,0
162,,,406,16,,6077,9.95639466,0
163,,,1850,30,,5422,11.77208517,0
164,,,375,12,,3700,5.843444932,0
165,,,572,15,,5159,9.724154468,0
166,,,215,12,,3375,4.912018975,0
167,,,406,19,,7999,13.83819611,0
168,,,305,15,,5232,9.052246098,0
170,,,278,11,,3012,4.684800569,0
171,,,348,14,,3548,6.369666926,0
172,,,290,12,,3692,6.06914682,0
173,,,527,25,,16400,29.57162266,0
174,,,443,17,,5123,9.401723222,0
175,,,278,11,,3040,4.588390966,0
176,,,298,16,,4930,7.908458789,0
177,,,334,15,,5240,9.383729331,0
178,,,639,21,,10934,21.3572874,0
179,,,321,18,,6757,9.692187234,0
180,,,334,15,,5240,10.18975207,0
181,,,358,18,,6602,9.731638177,0
182,,,423,7,,923,1.735956482,0
183,,,291,15,,3654,5.626993597,0
184,,,418,13,,3969,8.203436951,0
185,,,291,13,,4093,6.586651111,0
186,,,262,14,,3101,5.467340171,0
187,,,256,13,,4422,7.214667185,0
188,,,292,17,,6859,10.86987979,0
189,,,295,15,,3491,6.001258938,0
190,,,399,18,,6263,11.5409158,0
191,,,169,10,,2233,2.85862697,0
192,,,266,13,,4041,6.511708554,0
193,,,420,19,,7084,11.58359706,0
194,,,366,17,,6139,9.83193595,0
195,,,273,11,,2708,4.445470007,0
196,,,291,12,,3411,5.849111195,0
197,,,281,14,,4806,7.967390351,0
198,,,358,16,,5302,9.416535703,0
199,,,278,15,,5213,7.895355459,0
200,,,618,26,,10980,19.02530119,0
201,,,406,17,,5322,10.15077489,0
202,,,349,19,,5382,8.522601346,0
203,,,267,13,,4036,6.525688247,0
204,,,441,13,,4093,8.275693568,0
205,,,426,18,,3529,6.771148324,0
206,,,224,11,,2791,4.67683895,0
207,,,393,16,,5300,9.219402262,0
208,,,292,16,,4124,6.7599383,0
209,,,460,16,,5302,9.998543513,0
210,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.067434069,Beam
212,,,448,16,,4138,7.729592125,0
213,,,269,16,,5921,8.973642198,0
215,,,366,17,,6140,9.685616569,0
217,,,790,14,,4838,10.2079826,0
218,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int j = 0; j < numCases; j++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> uubs = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                uubs.add(Integer.parseInt(io.nextToken()));
            }
            int result = 0;
            int secondAttempt = 0;
            for ( int current = 0; current < uubs.size()-1; current++)
            {
                int one = uubs.get(current);
                int half = uubs.get(current+1);
                
                if ( (one - half) >= 0)
                {
                    result = result + (one- half);
                }
                
            }
            int j = 0;
            for ( int current = 0; current < uubs.size() - 1; current++)
            {
                int one = uubs.get(current);
                int half = uubs.get(current+1);
                int maxSpread = one-half;
                if ( maxSpread > j)
                {
                    j = maxSpread;
                }
            }
            double rate = j/10;
            for ( int current = 0; current < uubs.size() - 1; current++)
            {
                int TempShift = uubs.get(current);
                if ( TempShift >= j)
                {
                    secondAttempt+= j;
                }
                else
                {
                    secondAttempt += TempShift;
                }
            }
            writer.println(""Case #"" + (j+1) + "": "" + result + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}",379,17,"second:half,maxDrop:j,first:one,firstAttempt:result,tempDrop:maxSpread,x:j,tempStack:TempShift,i:current,nums:uubs,",5274,8.87531118,Beam
219,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.335885886,Beam
220,,,291,13,,4093,6.584730585,0
221,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.103995101,Beam
222,,,211,11,,3070,4.570974839,0
223,,,358,16,,5302,9.102537851,0
224,,,255,13,,3101,6.959305819,0
225,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int w = Integer.parseInt(next[2]);
            
            int row = (c - w) / w;
            if (c % w == 0) row += w;
            else row += w + 1;
            
            res = r*row;
            
            System.out.format(""Case #%d: %d\n"", i, res);
        }
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int m = Integer.parseInt(next[0]);
            int m = Integer.parseInt(next[1]);
            int rec = Integer.parseInt(next[2]);
            
            int diff = (m - rec) / rec;
            if (m % rec == 0) diff += rec;
            else diff += rec + 1;
            
            res = m*diff;
            
            System.out.format(""Case #%d: %d
"", i, res);
        }
    }
}",172,11,"row:diff,w:rec,c:m,r:m,",1365,1.897565941,Beam
226,,,358,16,,5302,9.034975247,0
227,,,240,12,,3321,5.348800615,0
228,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner analyer = new Scanner(System.in);
        int rt = analyer.nextInt();
        for(int x = 1; x <= rt; ++x){
            int w = analyer.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = analyer.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:weight,scanner:analyer,t:rt,soldiers:wars,",1613,2.459613804,Beam
229,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.807778513,Beam
230,,,553,21,,6205,10.82177624,0
231,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.839561156,Beam
232,,,321,13,,4093,7.210729655,0
233,,,278,15,,5174,7.690810362,0
234,,,281,14,,4806,8.122582002,0
235,,,309,11,,2202,3.570261021,0
236,,,419,16,,6015,11.03979318,0
237,,,324,13,,4372,7.408814498,0
238,,,464,17,,5296,9.508715312,0
239,,,460,16,,5302,9.830726171,0
240,,,132,9,,1664,1.822019072,0
241,,,553,21,,6226,10.79268004,0
242,,,257,11,,3008,5.104275374,0
243,,,328,16,,5240,8.930118064,0
244,,,655,16,,2113,5.298395864,0
245,,,262,14,,3132,5.094455286,0
246,,,305,15,,5236,8.846691593,0
247,,,298,16,,4558,7.317398846,0
248,,,525,23,,12959,21.91947732,0
249,,,325,14,,4983,8.368934937,0
250,,,269,16,,5923,8.969636897,0
251,,,517,26,,13454,26.63598464,0
252,,,282,13,,4355,6.796970312,0
253,,,156,10,,2233,2.558569006,0
254,,,291,13,,4093,6.729830046,0
255,,,334,15,,5240,9.886523624,0
256,,,250,11,,3070,4.923508346,0
257,,,317,12,,3713,6.546942838,0
258,,,265,12,,3697,5.784318109,0
259,,,325,16,,5860,10.01770449,0
260,,,371,12,,3411,6.170011429,0
261,,,184,9,,1954,3.040383097,0
262,,,269,16,,5928,9.021078535,0
263,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.791285515,Beam
264,,,479,25,,8197,13.84692119,0
265,,,156,10,,2447,3.073262842,0
266,,,443,17,,5537,10.26019636,0
267,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.842465691,Beam
268,,,344,15,,4894,7.924268893,0
269,,,285,14,,4837,7.509679457,0
270,,,269,16,,5893,8.871387096,0
271,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,6.073492372,Beam
272,,,443,17,,5622,10.79680144,0
273,,,358,16,,5302,8.855144831,0
274,,,572,15,,5215,10.05698784,0
277,,,334,15,,5242,9.643634772,0
278,,,272,16,,5896,7.889463997,0
279,,,272,16,,5882,7.845606017,0
280,,,211,11,,2791,4.054403969,0
281,,,291,15,,3654,5.82306213,0
282,,,348,14,,3548,6.283864653,0
283,,,198,10,,2219,3.789347291,0
284,,,255,13,,3256,7.027519011,0
285,,,305,15,,5232,8.881493123,0
286,,,269,16,,5829,8.093065449,0
287,,,285,14,,4837,6.943790742,0
288,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int b = sc.nextInt(); sc.nextLine();
            int[] p = new int[b];
            int start = 0;
            char init = 'A';
            int h = -1;
            char[] labels = new char[b];
            for (int i=0; i < b; i++) {
                p[i] = sc.nextInt();
                start += p[i];
                labels[i] = init;
                init++;
                if (p[i] > h) {
                    h = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int i=0; i<b; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"n:b,total:start,max:h,t:h,ich:init,c3:b,c2:f1,",5059,9.076150715,Beam
289,,,393,16,,5288,8.567826633,0
290,,,281,14,,4806,7.496284874,0
291,,,443,17,,5713,10.82836121,0
292,,,292,15,,5050,8.499288193,0
293,,,240,12,,3327,5.288182163,0
294,,,553,21,,6205,10.62694908,0
295,,,321,18,,7000,10.76902209,0
296,,,553,21,,6202,10.73087615,0
297,,,311,17,,6733,11.16022937,0
298,,,306,16,,5147,8.802252551,0
299,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,6.142757161,Beam
300,,,544,17,,6018,12.40191516,0
301,,,292,17,,6793,11.00759882,0
302,,,272,16,,6010,8.435208408,0
303,,,366,17,,6139,9.177172013,0
304,,,295,15,,3491,5.630239296,0
305,,,334,15,,5240,9.705089772,0
306,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner bc = new Scanner(new FileReader(include));
            PrintWriter spwh = new PrintWriter(put);

            int ns = bc.nextInt();
            bc.nextLine();
            for (int b = 0; b < ns; b++) {
                System.out.println(""Test case "" + (b + 1) + ""..."");
                spwh.print(""Case #"" + (b + 1) + "": "");
                int rev = bc.nextInt();
                int nOnce = bc.nextInt();
                int n01 = bc.nextInt();
                System.out.println(rev+"" ""+nOnce+"" ""+n01);
                int loadLine =rev*(nOnce/n01);
                        int foundPort=0;
                        if(nOnce%n01==0)
                            foundPort = n01-1;
                        else
                            foundPort = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+foundPort);
                
                
                int rev = loadLine+foundPort;
                
                System.out.println(rev);
                spwh.print(rev);
                spwh.println();
            }
            spwh.println();
            spwh.flush();
            spwh.close();
            bc.close();
        } catch (FileNotFoundException se) {
            se.printStackTrace();
        } catch (IOException ception) {
            // TODO Auto-generated catch block
            ception.printStackTrace();
        }
    }


}",292,16,"n1:n01,c1:nOnce,r:rev,findShip:foundPort,findRow:loadLine,res:rev,pw:spwh,n:ns,sc:bc,c:b,e:ception,ex:se,output:put,input:include,",3752,6.261226797,Beam
307,,,292,15,,5060,7.867633343,0
308,,,156,10,,2201,2.632775402,0
309,,,399,18,,6077,10.56129805,0
310,,,169,10,,2481,3.148528,0
311,,,211,11,,2915,4.511312409,0
312,,,408,17,,5738,10.92514013,0
313,,,292,17,,6805,11.03112427,0
314,,,198,10,,2221,3.764572303,0
315,,,257,11,,3039,5.131442471,0
316,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.78501912,Beam
317,,,254,13,,4078,6.277563492,0
318,,,321,18,,6850,10.04608343,0
319,,,393,16,,5290,8.65833681,0
320,,,240,13,,2184,3.307459335,0
321,,,655,16,,2037,5.181912927,0
322,,,513,26,,17413,29.05959897,0
323,,,406,17,,5322,10.79282626,0
324,,,265,12,,3697,5.892791804,0
325,,,142,11,,3026,4.71786741,0
326,,,240,12,,3685,5.983096854,0
327,,,358,16,,5302,8.891773212,0
328,,,479,25,,8240,13.96100538,0
329,,,375,12,,3366,5.513746385,0
330,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.796264152,Beam
331,,,527,25,,15904,28.46100267,0
332,,,735,24,,10687,16.88188747,0
333,,,303,12,,2947,4.825068653,0
334,,,198,10,,2186,3.572533309,0
335,,,379,17,,5402,8.55813779,0
336,,,263,13,,4093,6.344155939,0
337,,,418,13,,3969,8.179773788,0
338,,,443,17,,5404,10.09652349,0
339,,,255,13,,2946,6.407837931,0
340,,,257,11,,2760,4.616720323,0
341,,,406,17,,5265,10.31668948,0
342,,,250,11,,3070,5.078852467,0
343,,,325,16,,5581,9.736254863,0
344,,,525,23,,13329,21.79112051,0
345,,,479,25,,8166,13.68381269,0
346,,,479,25,,8192,13.70007319,0
347,,,443,17,,5236,9.10791256,0
348,,,417,19,,7096,12.27845856,0
349,,,169,10,,2419,2.937379201,0
350,,,198,10,,2215,3.48270119,0
351,,,269,16,,5916,8.77119288,0
352,,,290,12,,3692,6.060010123,0
353,,,215,12,,3635,5.398218215,0
354,,,266,13,,4051,7.091244698,0
355,,,250,11,,3039,5.042713535,0
356,,,420,19,,7084,9.874267054,0
357,,,513,26,,17472,29.35241584,0
358,,,285,14,,5209,8.46407487,0
359,,,254,13,,4126,6.307725437,0
360,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.514433662,Beam
361,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dt = new int[l+1];
                dt[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dt[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dt[j] = Math.max(dt[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dt[l]);
                fout.write(""Case #"" + i + "": "" + dt[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dt,",1391,2.101606989,Beam
362,,,443,17,,5010,9.464874538,0
363,,,262,14,,3504,5.663430007,0
364,,,406,17,,5322,10.99715799,0
365,,,405,15,,5240,9.025725532,0
366,,,306,16,,5240,8.640514235,0
367,,,256,13,,3394,5.917340012,0
368,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.915343328,Beam
369,,,260,11,,2450,3.855939492,0
370,,,348,21,,7978,12.46135004,0
371,,,344,15,,4882,7.656853429,0
372,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dt = new int[l+1];
                dt[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dt[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dt[j] = Math.max(dt[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dt[l]);
                fout.write(""Case #"" + i + "": "" + dt[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dt,",1391,2.151535062,Beam
373,,,256,13,,3033,5.257685876,0
374,,,306,16,,5178,8.859840695,0
375,,,298,16,,4930,8.226874602,0
376,,,321,18,,6850,10.2074237,0
377,,,290,12,,3692,5.736174448,0
378,,,406,17,,5260,10.26796173,0
379,,,887,27,,6962,13.06285738,0
380,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String add = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        loader = new Scanner(new File(add));
        pool = new PrintWriter(new File(save));
        int N = loader.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            pool.print(""Case #"" + tf + "": "");
            System.pool.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int r = A.loader.nextInt();
            int N = A.loader.nextInt();
            int N = A.loader.nextInt();
            if (r == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.pool.println(section);
            } else
                A.pool.println(0);
        }
        pool.close();
    }

    static Scanner loader;
    static PrintWriter pool;
}",208,12,"W:N,C:N,T:N,result:section,R:r,out:pool,t:tf,in:loader,load:add,",1867,2.942416179,Beam
382,,,306,16,,5241,8.856074639,0
383,,,527,25,,16400,29.60425275,0
384,,,200,10,,2419,3.24428736,0
385,,,887,27,,6962,13.17555826,0
386,,,340,10,,2308,4.086944036,0
387,,,285,14,,4837,7.867000743,0
388,,,426,18,,3715,7.039562849,0
389,,,655,16,,2209,6.362972514,0
390,,,553,21,,6191,10.87364292,0
391,,,344,15,,4896,7.868415439,0
392,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.10762351,Beam
393,,,443,17,,5014,9.747048056,0
394,,,298,16,,4558,7.46555953,0
395,,,271,12,,3102,5.079021537,0
396,,,386,18,,7416,12.05527963,0
397,,,408,17,,6062,11.09774756,0
398,,,290,12,,3693,6.123838095,0
399,,,254,13,,3878,6.41984237,0
400,,,278,15,,5213,7.978435973,0
401,,,291,12,,3380,5.739910988,0
402,,,326,14,,4806,8.105116773,0
403,,,325,14,,4983,8.666318333,0
404,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1459,2.38825086,Beam
405,,,241,15,,3273,5.480025844,0
406,,,256,13,,4077,6.515900409,0
407,,,735,24,,11336,17.8001645,0
408,,,256,13,,3028,5.336398097,0
409,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.996737615,Beam
410,,,295,16,,5302,8.417132632,0
411,,,887,27,,6962,12.74139564,0
412,,,375,12,,3391,5.664222836,0
413,,,256,13,,3055,5.227204136,0
414,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] start = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long line = queue.poll();
                
                if (line == W){
                    break;
                }
                
                start[0] = line + 1;
                StringBuilder url = new StringBuilder(Long.toString(line));
                start[1] = Long.parseLong(url.reverse().toString());
                
                for (int ini = 0; ini < 2; ini++){
                    if (!S.contains(start[ini]) && start[ini] <= W && start[ini] > line){
                        queue.add(start[ini]);
                        S.add(start[ini]);
                        distance.put(start[ini], distance.get(line) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:line,i:ini,builder:url,next:start,",2281,4.047987008,Beam
415,,,265,12,,3379,5.321885312,0
416,,,298,16,,4558,7.46623433,0
417,,,254,13,,4103,6.396306527,0
418,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.134336209,Beam
419,,,171,10,,2233,3.220720474,0
420,,,326,14,,4837,8.335844052,0
421,,,443,17,,5481,10.46789046,0
422,,,211,11,,3070,4.449465569,0
423,,,366,17,,6139,9.592390231,0
424,,,269,16,,5913,8.795177031,0
425,,,655,16,,2239,5.862554741,0
426,,,358,18,,6618,9.893825519,0
427,,,290,12,,3382,5.547512897,0
429,,,256,13,,3065,5.477611351,0
430,,,368,14,,5209,9.322631756,0
431,,,605,21,,10245,15.80424773,0
432,,,417,18,,4310,7.8609092,0
433,,,211,11,,3070,4.387995048,0
434,,,311,17,,6524,10.13419624,0
435,,,423,7,,714,1.168888895,0
436,,,418,13,,4372,9.899787045,0
437,,,406,19,,7999,13.91362032,0
438,,,258,14,,4806,8.290936009,0
439,,,250,11,,2791,4.497432268,0
440,,,375,12,,3391,6.01971585,0
441,,,513,26,,17094,27.92399375,0
442,,,363,16,,6077,9.862060086,0
443,,,464,17,,5296,9.41332593,0
444,,,393,16,,5300,8.855184193,0
445,,,348,14,,3548,6.182448479,0
446,,,309,11,,2202,3.59717617,0
447,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.536907474,Beam
448,,,269,13,,4014,6.661804378,0
449,,,527,25,,16214,26.7484349,0
450,,,448,16,,3984,7.629755871,0
451,,,298,16,,4124,6.781075279,0
452,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.023957471,Beam
453,,,273,11,,2736,4.765640215,0
454,,,265,12,,3329,5.269689417,0
455,,,406,17,,5322,10.79845906,0
456,,,317,12,,3373,5.52060827,0
457,,,290,12,,3692,5.663830908,0
458,,,468,14,,3566,8.203134807,0
459,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,6.11640952,Beam
460,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String baseRoot = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] P = new char[26];
        for (int v = 0; v < P.length; v++) P[v] = (char)('A' + v);

        try (Scanner tc = new Scanner(new File(baseRoot))) {
            int A = tc.nextInt();
            for (int v = 1; v <= A; v++) {
                result.append(""Case #"" + v + "":"");
                int B = tc.nextInt();
                int[] Ti = new int[B];
                int num = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ti[rev] = tc.nextInt();
                    num += Ti[rev];
                    Ti[rev] *= 2;
                }
                while (num > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    num--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ti[rev] > num) {
                            if (v == 0) {
                                result.append(P[rev]);
                                Ti[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(P[rev]);
                                Ti[rev] -= 2;
                                num--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ti[rev] > 0) {
                                result.append(P[0]);
                                Ti[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String output = ""answer.out"";
            if (baseRoot != null && !baseRoot.equals("""")) {
                output = baseRoot.substring(0, baseRoot.length() - 2) + ""out"";
            }
            try (FileOutputStream fileoS = new FileOutputStream(output, false)) {
                fileoS.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception ception) {
            ception.printStackTrace();
        }
    }
}",448,16,"sum:num,j:rev,N:B,flag:v,T:A,Pi:Ti,sc:tc,i:v,parties:P,answer:result,filePath:baseRoot,outPath:output,e:ception,fos:fileoS,",3736,7.32236925,Beam
461,,,208,12,,2064,3.276344522,0
462,,,406,16,,6015,10.37153418,0
463,,,291,15,,3577,5.367833364,0
465,,,292,15,,5051,8.374207377,0
466,,,326,14,,5116,8.63621126,0
467,,,308,12,,1520,2.79748615,0
468,,,348,14,,3554,6.123732952,0
469,,,366,17,,6108,9.594801458,0
470,,,250,11,,3070,4.918382386,0
471,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.84381961,Beam
473,,,344,15,,4793,7.559291784,0
474,,,345,16,,5975,9.280200783,0
475,,,273,11,,2725,4.577171314,0
476,,,443,17,,5083,9.237944897,0
477,,,405,15,,5240,9.177854721,0
478,,,291,15,,3623,5.710800715,0
479,,,448,20,,9347,14.99753055,0
480,,,302,15,,3008,4.689165084,0
481,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int sw = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[sw] = sw + r - 1;
                for(int j = sw + 1; j <= 2*sw - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = sw+1 + r-1;
                }
                for(int j = 2*sw; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-sw] + r, sw + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:sw,",310,0.469642226,Beam
482,,,291,13,,4093,6.648830167,0
483,,,273,11,,2631,4.635603182,0
484,,,292,17,,6743,10.73510939,0
485,,,1850,30,,5345,11.45688814,0
486,,,325,16,,6077,10.50320779,0
487,,,417,18,,3845,7.035315565,0
488,,,464,17,,5358,10.83187862,0
489,,,272,16,,6010,8.218771068,0
490,,,298,16,,4558,7.410525858,0
491,,,200,10,,2233,2.861638153,0
492,,,418,13,,4093,8.763223402,0
493,,,240,12,,3315,5.333843255,0
494,,,619,14,,4333,7.231899941,0
495,,,417,19,,7088,12.17689705,0
496,,,306,16,,5240,8.624989088,0
497,,,420,19,,7084,11.35035946,0
498,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.938155599,Beam
499,,,344,15,,4900,7.809654009,0
500,,,291,12,,3411,5.699962513,0
502,,,525,23,,13522,21.70477444,0
503,,,345,16,,5945,8.681609178,0
504,,,406,16,,6077,10.02210961,0
505,,,379,17,,6940,11.28589762,0
506,,,255,13,,2822,6.262611532,0
507,,,298,16,,4558,7.562160389,0
508,,,292,15,,5070,8.537277122,0
509,,,240,12,,3606,5.578397596,0
510,,,349,19,,5429,8.443219701,0
511,,,500,19,,8799,14.53916041,0
512,,,156,10,,2233,2.469859107,0
513,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,6.072272368,Beam
514,,,278,11,,2740,4.292035194,0
515,,,393,16,,5282,9.253851374,0
516,,,273,11,,2733,4.690856663,0
517,,,418,13,,4434,10.02081577,0
518,,,328,16,,5240,9.50791951,0
519,,,479,25,,8197,13.88268303,0
520,,,423,7,,915,1.576815538,0
521,,,393,16,,5290,8.720182443,0
522,,,464,17,,5296,9.655655754,0
523,,,132,9,,1696,1.92843467,0
524,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int cases = reader.nextInt();
        for(int t = 0; t < cases; t++){
            int s = reader.nextInt();
            int p = reader.nextInt();
            int k = reader.nextInt();
            int example = p / k;
            example *= s;
            example += k - 1;
            if(p % k > 0){
                example++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + example);
        }
        reader.close();
    }

}",134,9,"w:k,c:p,answer:example,testCases:cases,r:s,",1210,1.504907485,Beam
525,,,324,13,,4434,7.292032882,0
526,,,263,13,,4434,7.244574428,0
527,,,366,17,,6108,9.763343879,0
528,,,386,18,,7416,11.9290321,0
529,,,393,16,,5288,9.022547646,0
531,,,149,10,,2482,2.913695705,0
532,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ans62,",4256,7.194225796,Beam
533,,,240,12,,3333,5.386334419,0
534,,,328,16,,5302,9.102386852,0
535,,,324,13,,4620,7.858113476,0
536,,,553,21,,6022,10.6562682,0
537,,,330,14,,5044,8.795775127,0
538,,,317,12,,3371,5.622527011,0
539,,,265,12,,3691,5.916363716,0
540,,,156,10,,2401,3.042727482,0
541,,,295,15,,3130,5.367997885,0
542,,,544,17,,6037,12.20593026,0
543,,,306,13,,2915,5.706743336,0
544,,,311,17,,6729,11.18160826,0
545,,,500,19,,8856,14.89355003,0
546,,,358,16,,5302,8.929211056,0
547,,,303,12,,2808,5.19336079,0
548,,,321,18,,6972,11.14645177,0
549,,,344,15,,4896,7.904268388,0
550,,,249,11,,2760,4.37297039,0
552,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4683,9.095034309,Beam
553,,,655,16,,2108,6.821435686,0
554,,,305,15,,5148,8.328812679,0
555,,,358,16,,5302,8.977612944,0
556,,,149,10,,2233,2.733548971,0
557,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.800559982,Beam
558,,,426,18,,3809,7.274461925,0
559,,,325,16,,6077,11.0132281,0
560,,,265,12,,3389,5.480560891,0
561,,,479,25,,8202,13.91936258,0
562,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.757083038,Beam
563,,,345,16,,6009,9.471282641,0
564,,,479,25,,8208,13.83407085,0
565,,,326,14,,4806,8.200028062,0
566,,,344,15,,4896,7.897790714,0
567,,,330,16,,5922,11.01204701,0
568,,,500,19,,8855,14.55420761,0
569,,,292,15,,5050,8.428844579,0
570,,,254,13,,4449,6.906475147,0
571,,,321,18,,6964,10.94066108,0
572,,,328,16,,5271,9.287802903,0
573,,,328,16,,5302,9.069704398,0
574,,,298,16,,4558,7.834522331,0
575,,,426,18,,3963,7.516189849,0
576,,,358,18,,6594,9.741001674,0
577,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.70391204,Beam
578,,,544,17,,5899,12.24688685,0
579,,,281,14,,4837,7.765856584,0
580,,,257,11,,2791,4.79324371,0
581,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ansalt += datas[el];
                else
                    ansalt += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ansalt,",4256,7.188262784,Beam
582,,,326,14,,4713,8.109321014,0
583,,,386,18,,7432,12.56431908,0
584,,,321,13,,4093,7.313045522,0
585,,,263,13,,4093,8.297426422,0
586,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner cl;
    try {
      cl = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = cl.nextInt();
    String tmp = cl.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int line = cl.nextInt();
      int val = cl.nextInt();
      int step = cl.nextInt();
      int min = 0;

      for (int j=0; j<line; j++) {
        for (int kn=0; kn<val; kn+=step) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(res);
  }
}",187,12,"w:step,row:line,col:val,k:kn,sc:cl,",1830,3.76436369,Beam
588,,,393,16,,5258,11.92416401,0
589,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.919944398,Beam
590,,,443,17,,5964,15.59813994,0
591,,,200,10,,2202,4.647905211,0
592,,,132,9,,1696,2.722459579,0
593,,,260,11,,2512,4.955864437,0
595,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1645,3.133253666,Beam
596,,,305,15,,5232,12.27947196,0
597,,,517,26,,13036,33.65733488,0
598,,,291,15,,3986,7.81922884,0
599,,,257,11,,2760,5.806633393,0
601,,,379,17,,6941,14.57361485,0
602,,,655,16,,2152,8.019617168,0
603,,,366,17,,6139,12.93416916,0
604,,,360,16,,6077,13.49159547,0
605,,,366,17,,6139,12.1698173,0
606,,,358,16,,5302,11.42704677,0
607,,,291,12,,3411,7.205870934,0
608,,,263,13,,4434,8.567914621,0
609,,,325,16,,5891,12.93317511,0
610,,,358,16,,5302,11.31943651,0
611,,,290,12,,3692,6.493514943,0
612,,,348,14,,3554,6.623288373,0
614,,,605,21,,9880,15.34103847,0
615,,,363,16,,6077,10.21334691,0
616,,,256,13,,3303,5.660671151,0
617,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.062684699,Beam
618,,,282,13,,4086,6.118550249,0
619,,,290,12,,3694,5.655317724,0
620,,,367,20,,5445,8.816893057,0
621,,,255,13,,2946,6.524432107,0
622,,,291,15,,3636,5.496384096,0
623,,,269,13,,3994,6.882183615,0
624,,,257,11,,2791,4.755240862,0
625,,,211,11,,2977,5.089904984,0
626,,,265,12,,3697,7.806496362,0
628,,,348,14,,3549,8.846636776,0
629,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,3.14945399,Beam
630,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int j = 0; j < numCases; j++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> uubs = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                uubs.add(Integer.parseInt(io.nextToken()));
            }
            int result = 0;
            int secondAttempt = 0;
            for ( int current = 0; current < uubs.size()-1; current++)
            {
                int one = uubs.get(current);
                int half = uubs.get(current+1);
                
                if ( (one - half) >= 0)
                {
                    result = result + (one- half);
                }
                
            }
            int j = 0;
            for ( int current = 0; current < uubs.size() - 1; current++)
            {
                int one = uubs.get(current);
                int half = uubs.get(current+1);
                int maxSpread = one-half;
                if ( maxSpread > j)
                {
                    j = maxSpread;
                }
            }
            double rate = j/10;
            for ( int current = 0; current < uubs.size() - 1; current++)
            {
                int TempShift = uubs.get(current);
                if ( TempShift >= j)
                {
                    secondAttempt+= j;
                }
                else
                {
                    secondAttempt += TempShift;
                }
            }
            writer.println(""Case #"" + (j+1) + "": "" + result + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}",379,17,"second:half,maxDrop:j,first:one,firstAttempt:result,tempDrop:maxSpread,x:j,tempStack:TempShift,i:current,nums:uubs,",5274,11.263624,Beam
631,,,655,16,,2123,9.588990982,0
632,,,348,21,,7987,16.54479018,0
633,,,358,18,,6566,14.3817099,0
634,,,132,9,,1663,2.982385357,0
635,,,348,14,,3678,8.825037972,0
636,,,345,16,,6005,12.3201701,0
637,,,406,16,,6077,14.19903989,0
638,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner file = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = file.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = file.nextInt();
            int m[] = new int[e];

            for (int co = 0; co < e; co++) {
                m[co] = file.nextInt();

            }
            for (int co = 1; co < e; co++) {
                d = m[co - 1] - m[co];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int co = 0; co < e - 1; co++) {
                if (m[co] <= w) {
                    z += m[co];
                }
                if (m[co] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:co,input:file,",993,1.912560336,Beam
639,,,406,17,,5322,14.14185542,0
640,,,250,11,,3070,6.467059374,0
641,,,156,10,,2233,4.022943238,0
642,,,292,16,,4527,9.919411858,0
643,,,464,17,,5358,14.73092628,0
644,,,358,18,,6594,13.13615751,0
645,,,334,15,,5240,13.31474609,0
646,,,393,16,,5282,11.51605812,0
647,,,375,12,,3640,7.552902075,0
648,,,418,13,,4062,10.81803798,0
649,,,269,13,,4049,9.565311412,0
650,,,257,11,,3070,6.14828258,0
651,,,290,12,,3691,6.816066317,0
652,,,330,14,,4595,7.919643402,0
654,,,393,16,,5283,9.382616587,0
655,,,379,17,,6968,11.52695149,0
656,,,269,16,,5918,9.187396979,0
657,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int cases = reader.nextInt();
        for(int t = 0; t < cases; t++){
            int range = reader.nextInt();
            int p = reader.nextInt();
            int k = reader.nextInt();
            int example = p / k;
            example *= range;
            example += k - 1;
            if(p % k > 0){
                example++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + example);
        }
        reader.close();
    }

}",134,9,"w:k,c:p,answer:example,testCases:cases,r:range,",1210,1.519564255,Beam
658,,,240,13,,3099,5.075001085,0
659,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.748030929,Beam
660,,,321,18,,6968,11.96747082,0
661,,,265,12,,3683,5.931854522,0
662,,,527,25,,16400,29.34868745,0
663,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.963958546,Beam
664,,,317,12,,3377,5.657699585,0
665,,,311,17,,6486,10.64102979,0
666,,,311,17,,6367,10.08577453,0
667,,,443,17,,5236,9.246686844,0
668,,,295,15,,3130,5.369259143,0
669,,,309,11,,2202,3.517420423,0
670,,,358,16,,5302,9.078072937,0
671,,,132,9,,1696,1.911501833,0
672,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.89500622,Beam
673,,,260,11,,2512,4.202923707,0
674,,,426,18,,3901,7.549990948,0
675,,,256,13,,3033,5.352046561,0
676,,,525,23,,13451,22.44060712,0
677,,,426,18,,3251,6.142262038,0
678,,,280,13,,3132,5.13450379,0
679,,,240,12,,3327,5.36022348,0
680,,,236,16,,4434,7.204267093,0
681,,,156,10,,2233,2.465720228,0
682,,,572,15,,5159,9.956046041,0
683,,,132,9,,1696,1.876910861,0
684,,,348,14,,3734,6.542197883,0
685,,,280,13,,3163,5.044969507,0
686,,,285,14,,5147,8.276041353,0
687,,,272,16,,5849,7.764982768,0
689,,,262,14,,3505,5.777120586,0
690,,,302,15,,2636,4.033879157,0
691,,,735,24,,10475,16.54208149,0
692,,,278,15,,5213,7.978413312,0
694,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader v = new BufferedReader(new InputStreamReader(System.in));
            int s = Integer.parseInt(v.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int k = 1; k <= s; k++)
            {
                StringTokenizer str = new StringTokenizer(v.readLine());
                int k = Integer.parseInt(str.nextToken());
                int rc = Integer.parseInt(str.nextToken());
                int s = Integer.parseInt(str.nextToken());
                int[] db = new int[rc+1];
                db[s] = s + k - 1;
                for(int k = s + 1; k <= 2*s - 1; k++)
                {
                    if(k > rc)
                        break;
                    db[k] = s+1 + k-1;
                }
                for(int k = 2*s; k <= rc; k++)
                {
                    db[k] = Math.max(db[k-s] + k, s + 1);
                }
                System.out.println(""Case #"" + k + "": "" + db[rc]);
                fout.write(""Case #"" + k + "": "" + db[rc] + ""
"");
            }
            v.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:s,r:k,c:rc,j:k,dp:db,i:k,t:s,st:str,f:v,",2965,4.554373837,Beam
695,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner analyer = new Scanner(System.in);
        int rt = analyer.nextInt();
        for(int x = 1; x <= rt; ++x){
            int w = analyer.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = analyer.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:weight,scanner:analyer,t:rt,soldiers:wars,",1613,2.48311313,Beam
696,,,308,12,,1520,2.796694835,0
697,,,790,14,,4837,10.31798911,0
698,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.7439526,Beam
699,,,619,14,,4293,7.407542471,0
700,,,478,22,,11637,19.02070986,0
701,,,224,11,,3070,5.248167229,0
702,,,317,12,,3687,6.131345399,0
703,,,418,13,,4062,9.498489654,0
704,,,263,13,,4403,7.190023935,0
705,,,420,19,,7084,12.18566417,0
706,,,211,11,,2791,4.1892778,0
707,,,405,15,,5240,9.42785482,0
708,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,1.959301949,Beam
709,,,366,17,,6139,9.58328685,0
710,,,348,14,,3554,6.13180081,0
711,,,408,15,,5079,9.308794645,0
712,"class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter fw = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            int w = scanner.nextInt();
            fw.write(String.format(""Case #%d: %s\n"", t, solve(r, c, w)));
        }
        fw.close();
    }

    private static int solve(int r, int c, int w) {
        int res = ((c - 1) / w + 1) * (r - 1) + w + (c - 1) / w;
        return res;
    }
}","class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter ww = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int k = scanner.nextInt();
            int j = scanner.nextInt();
            ww.write(String.format(""Case #%d: %s
"", t, solve(r, c, w)));
        }
        ww.close();
    }

    private static int solve(int r, int k, int j) {
        int res = ((k - 1) / j + 1) * (r - 1) + j + (k - 1) / j;
        return res;
    }
}",187,13,"w:j,c:k,fw:ww,",621,0.759511507,Beam
713,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> uumers = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                uumers.add(Integer.parseInt(io.nextToken()));
            }
            int firstEntry = 0;
            int fifthAttempt = 0;
            for ( int phi = 0; phi < uumers.size()-1; phi++)
            {
                int one = uumers.get(phi);
                int half = uumers.get(phi+1);
                
                if ( (one - half) >= 0)
                {
                    firstEntry = firstEntry + (one- half);
                }
                
            }
            int axClose = 0;
            for ( int phi = 0; phi < uumers.size() - 1; phi++)
            {
                int one = uumers.get(phi);
                int half = uumers.get(phi+1);
                int maxPush = one-half;
                if ( maxPush > axClose)
                {
                    axClose = maxPush;
                }
            }
            double rate = axClose/10;
            for ( int phi = 0; phi < uumers.size() - 1; phi++)
            {
                int empShift = uumers.get(phi);
                if ( empShift >= axClose)
                {
                    fifthAttempt+= axClose;
                }
                else
                {
                    fifthAttempt += empShift;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstEntry + "" "" + fifthAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}",379,17,"maxDrop:axClose,second:half,i:phi,tempDrop:maxPush,first:one,tempStack:empShift,firstAttempt:firstEntry,nums:uumers,secondAttempt:fifthAttempt,",5281,3.612554721,Beam
714,,,344,15,,4894,7.801345066,0
715,,,417,18,,3814,7.084494611,0
716,,,393,16,,5259,8.679370924,0
717,,,256,13,,3064,5.276406844,0
718,,,271,12,,3153,6.32442714,0
719,,,269,16,,5923,10.77639405,0
720,,,417,18,,3845,9.460550288,0
721,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int sw = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[sw] = sw + r - 1;
                for(int j = sw + 1; j <= 2*sw - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = sw+1 + r-1;
                }
                for(int j = 2*sw; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-sw] + r, sw + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:sw,",310,0.576456769,Beam
722,,,291,15,,3611,7.530312681,0
723,,,375,12,,3365,7.139994117,0
724,,,417,18,,3845,9.302449715,0
725,,,406,19,,7999,19.12901784,0
726,,,468,14,,3566,12.01791257,0
727,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int sw = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=sw) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+sw-1);
    }
    System.out.println(res);
  }
}",187,12,"w:sw,",311,0.674010475,Beam
728,,,290,12,,3382,7.584486564,0
729,,,264,15,,5620,12.82957885,0
730,,,443,17,,4967,12.44082478,0
731,,,303,12,,2694,5.70703884,0
732,,,317,12,,3371,7.224496198,0
733,,,240,13,,3648,7.510509614,0
734,,,406,19,,7999,18.89517337,0
735,,,326,14,,4806,11.2723108,0
736,,,171,10,,2233,4.131281435,0
737,,,292,15,,5050,11.30095981,0
738,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner bc = new Scanner(new FileReader(include));
            PrintWriter spwh = new PrintWriter(put);

            int ns = bc.nextInt();
            bc.nextLine();
            for (int b = 0; b < ns; b++) {
                System.out.println(""Test case "" + (b + 1) + ""..."");
                spwh.print(""Case #"" + (b + 1) + "": "");
                int rev = bc.nextInt();
                int nOnce = bc.nextInt();
                int n01 = bc.nextInt();
                System.out.println(rev+"" ""+nOnce+"" ""+n01);
                int loadLine =rev*(nOnce/n01);
                        int foundPort=0;
                        if(nOnce%n01==0)
                            foundPort = n01-1;
                        else
                            foundPort = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+foundPort);
                
                
                int rev = loadLine+foundPort;
                
                System.out.println(rev);
                spwh.print(rev);
                spwh.println();
            }
            spwh.println();
            spwh.flush();
            spwh.close();
            bc.close();
        } catch (FileNotFoundException se) {
            se.printStackTrace();
        } catch (IOException ception) {
            // TODO Auto-generated catch block
            ception.printStackTrace();
        }
    }


}",292,16,"n1:n01,c1:nOnce,r:rev,findShip:foundPort,findRow:loadLine,res:rev,pw:spwh,n:ns,sc:bc,c:b,e:ception,ex:se,output:put,input:include,",3752,8.171677752,Beam
739,,,406,19,,7999,18.62559865,0
740,,,408,17,,5734,13.81625742,0
741,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,7.800546324,Beam
742,,,171,10,,2202,3.893534346,0
744,,,240,12,,3334,6.423901625,0
745,,,326,14,,4837,9.885609786,0
746,,,328,16,,5488,10.0180918,0
747,,,263,13,,4434,7.204666475,0
748,,,265,12,,3697,5.970035521,0
749,,,272,16,,5841,7.81300023,0
750,,,281,14,,4837,7.800168832,0
751,,,260,11,,2512,4.614214706,0
752,,,260,11,,2512,4.470251373,0
753,,,306,16,,5240,8.980117059,0
754,,,291,12,,3380,5.816544727,0
755,,,269,13,,4049,7.506294044,0
756,,,256,13,,3028,5.463496069,0
757,,,464,17,,5175,9.93618538,0
758,,,272,16,,6022,8.701582531,0
759,,,211,11,,3070,4.696511372,0
760,,,317,14,,4837,7.88625838,0
761,,,256,13,,3383,5.936518462,0
762,,,393,16,,5300,9.288590252,0
763,,,240,12,,3581,6.020583741,0
764,,,500,19,,8861,17.8243089,0
765,,,272,16,,6013,11.98959473,0
766,,,358,16,,5302,12.72122325,0
767,,,255,13,,2915,9.235539456,0
768,,,309,11,,2202,4.687313207,0
769,,,305,15,,5232,12.55232909,0
770,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,12.53359982,Beam
773,,,321,18,,6970,15.14251463,0
774,,,282,13,,4086,8.290780099,0
775,,,298,16,,4558,9.948424995,0
776,,,443,17,,5014,13.60314873,0
778,,,306,16,,5241,11.64849073,0
779,,,291,15,,3580,7.341552877,0
781,,,325,14,,4984,12.03590802,0
782,,,418,13,,4062,11.9095667,0
783,,,406,19,,7999,18.88756802,0
784,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,2.910826953,Beam
785,,,353,16,,5302,11.51268868,0
786,,,241,15,,3590,6.238596757,0
787,,,256,13,,3028,5.428404864,0
788,,,295,16,,5302,8.357311694,0
789,,,399,18,,6263,11.32715291,0
790,,,321,18,,6980,12.93810319,0
791,,,256,13,,3471,7.952429609,0
792,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.79608922,Beam
793,,,790,14,,4837,15.49436331,0
794,,,327,16,,3903,8.869632415,0
795,,,306,16,,5240,12.72995753,0
796,,,255,13,,2884,8.020720764,0
797,,,340,10,,2308,4.096395,0
798,,,325,14,,4805,8.351194743,0
799,,,305,15,,5172,8.447700175,0
800,,,300,13,,3455,5.212850988,0
801,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.639587677,Beam
802,,,328,16,,5240,8.992685187,0
803,,,325,16,,6077,10.92463381,0
804,,,420,19,,7084,11.76924984,0
805,,,500,19,,8798,14.46808083,0
806,,,273,11,,2719,4.510800683,0
808,,,211,11,,3071,4.592844574,0
809,,,224,11,,2791,4.679562906,0
810,,,328,16,,5271,8.743343492,0
811,,,525,23,,13546,21.65439921,0
812,,,278,11,,3013,4.741047712,0
813,,,553,21,,6205,10.939179,0
815,,,790,14,,4838,10.18193355,0
816,,,305,15,,5232,8.9954826,0
817,,,460,16,,5302,10.00512868,0
819,,,303,12,,2948,5.140857728,0
820,,,406,16,,6046,10.90086679,0
821,,,309,11,,2202,3.455446974,0
823,,,134,9,,1738,2.121458471,0
824,,,478,22,,11794,18.43850746,0
825,,,443,17,,5014,9.956884257,0
826,,,254,13,,4339,6.883985039,0
827,,,272,16,,5885,7.957652692,0
828,,,639,21,,10934,21.69981353,0
829,,,298,16,,4527,7.380915932,0
830,,,290,12,,3686,5.92321796,0
831,,,406,17,,5286,10.47380813,0
833,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner analyer = new Scanner(System.in);
        int rt = analyer.nextInt();
        for(int x = 1; x <= rt; ++x){
            int w = analyer.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = analyer.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:weight,scanner:analyer,t:rt,soldiers:wars,",1614,2.51614126,Beam
834,,,290,12,,3691,5.968748252,0
835,,,358,18,,6640,10.04142874,0
836,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.533856432,Beam
837,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.064156886,Beam
838,,,285,14,,5209,8.116258498,0
839,,,295,16,,5302,8.83462977,0
840,,,468,20,,8931,15.53692315,0
841,,,887,27,,6962,12.83730612,0
842,,,285,14,,4837,7.574494485,0
843,,,303,12,,2809,4.601489011,0
844,,,258,14,,4806,8.414045107,0
845,,,250,11,,3070,5.194019779,0
846,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(row.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            row.readLine();
            String char[] = row.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int u0=Integer.parseInt(char[i+1]);
                int i16 = Integer.parseInt(char[i]);
                if((u0-i16)<0) result1+=-(u0-i16);
                if(-(u0-i16)>k) k = -(u0-i16);
            }
            for(int i = 0; i<char.length-1;i++){
                int i16 = Integer.parseInt(char[i]);
                if(i16>=k) result2 = result2+k;
                else if(i16<k) result2 = result2+i16;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        row.close();
        writer.close();

    }

}",316,15,"max:k,str:char,i2:u0,i1:i16,reader:row,",2033,3.688274737,Beam
847,,,280,13,,3163,5.42918572,0
848,,,317,12,,3371,5.684338478,0
849,,,171,10,,2233,3.295838916,0
850,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.873595035,Beam
851,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.964625581,Beam
853,,,309,11,,2203,3.60498335,0
854,,,500,19,,8863,14.8547303,0
855,,,266,13,,4041,6.734016665,0
856,,,420,19,,7084,11.86797454,0
857,,,278,15,,5186,7.780517546,0
858,,,309,11,,1954,3.054995056,0
859,,,340,10,,2209,3.818718835,0
860,,,345,16,,6011,9.508135907,0
861,,,292,17,,6855,10.46472909,0
862,,,371,12,,3411,6.270482675,0
863,,,328,16,,5116,8.74277039,0
864,,,443,17,,5014,9.95959363,0
865,,,330,16,,6077,11.52777834,0
866,,,371,12,,3721,6.86820035,0
867,,,386,18,,7350,11.78488598,0
868,,,371,12,,3380,6.1008907,0
869,,,358,16,,5302,8.946284056,0
870,,,290,12,,3388,5.431598731,0
871,,,393,16,,5300,9.166710798,0
872,,,330,16,,6077,11.43345989,0
873,,,285,14,,4837,7.820097899,0
875,,,311,17,,6654,10.54267422,0
876,,,285,14,,5209,7.992743464,0
877,,,443,17,,5014,9.351218534,0
878,,,324,13,,4341,7.373170924,0
879,,,280,13,,3163,4.992212351,0
881,,,240,12,,3620,5.810377741,0
882,,,256,13,,3152,5.568016485,0
883,,,500,19,,8843,14.78688828,0
884,,,250,11,,2791,4.761668074,0
885,,,262,14,,3504,5.838344244,0
887,,,328,16,,5241,9.44618361,0
888,,,408,17,,5980,11.10538963,0
889,,,271,12,,3187,4.901341728,0
890,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.053117696,Beam
891,,,306,16,,5240,9.058581011,0
892,,,325,16,,5705,10.12360142,0
893,,,334,15,,5240,9.651148585,0
894,,,269,13,,4049,7.43219163,0
895,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,3.003946785,Beam
896,,,393,16,,5300,9.069108856,0
897,,,298,16,,4558,7.29287353,0
898,,,553,21,,6332,10.92331493,0
899,,,295,15,,3491,5.994944398,0
900,,,273,11,,2767,4.816534988,0
901,,,256,13,,2935,5.29836477,0
902,,,405,15,,5240,9.488459206,0
903,,,393,16,,5288,9.047199182,0
904,,,250,11,,3070,5.171823104,0
905,,,250,11,,2791,4.674790521,0
906,,,317,12,,3681,6.17610836,0
907,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dt = new int[l+1];
                dt[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dt[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dt[j] = Math.max(dt[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dt[l]);
                fout.write(""Case #"" + i + "": "" + dt[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dt,",1391,2.172696416,Beam
909,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1460,2.441567787,Beam
910,,,306,16,,5147,8.914765624,0
911,,,271,12,,3455,5.619874767,0
912,,,330,16,,6077,11.47408034,0
913,"class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int testCases = reader.nextInt();
        for(int t = 0; t < testCases; t++){
            int r = reader.nextInt();
            int c = reader.nextInt();
            int w = reader.nextInt();
            int answer = c / w;
            answer *= r;
            answer += w - 1;
            if(c % w > 0){
                answer++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + answer);
        }
        reader.close();
    }

}","class A {

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int cases = reader.nextInt();
        for(int t = 0; t < cases; t++){
            int range = reader.nextInt();
            int p = reader.nextInt();
            int k = reader.nextInt();
            int example = p / k;
            example *= range;
            example += k - 1;
            if(p % k > 0){
                example++;
            }
            System.out.println(""Case #"" + (t+1) + "": "" + example);
        }
        reader.close();
    }

}",134,9,"w:k,c:p,answer:example,testCases:cases,r:range,",1210,1.507533312,Beam
914,,,306,16,,5240,8.90388238,0
915,,,262,14,,3132,5.171479873,0
916,,,325,16,,6015,10.88794663,0
917,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.858568494,Beam
918,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.755819654,Beam
919,,,417,18,,3814,7.045576533,0
920,,,443,17,,6200,11.45080593,0
921,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.886123606,Beam
922,,,303,12,,2656,4.605974229,0
923,,,260,11,,2512,4.069168162,0
924,,,184,9,,1706,2.780574282,0
925,,,291,12,,3411,5.769609149,0
926,,,256,13,,3365,5.69046036,0
927,,,254,13,,4136,6.479474755,0
928,,,200,10,,2481,3.28258363,0
929,,,240,13,,2426,3.73050646,0
930,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner cl;
    try {
      cl = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = cl.nextInt();
    String tmp = cl.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int line = cl.nextInt();
      int val = cl.nextInt();
      int step = cl.nextInt();
      int min = 0;

      for (int j=0; j<line; j++) {
        for (int kn=0; kn<val; kn+=step) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(res);
  }
}",187,12,"w:step,row:line,col:val,k:kn,sc:cl,",1830,2.397802023,Beam
931,,,281,14,,4806,8.280462619,0
932,,,605,21,,9677,15.19722025,0
933,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.753912016,Beam
934,,,379,17,,6968,11.67806946,0
935,,,292,17,,6922,11.38687196,0
936,,,156,10,,2233,2.548791814,0
937,,,200,10,,2481,3.20899804,0
938,,,311,17,,6536,10.25510276,0
939,,,302,15,,2636,4.104946975,0
940,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.997701045,Beam
941,,,285,14,,4837,7.545970416,0
942,,,321,18,,6195,9.45828884,0
943,,,271,12,,3433,5.492912543,0
944,,,500,19,,8551,14.3685055,0
945,,,169,10,,2233,2.952829643,0
946,,,260,13,,4434,6.755293723,0
947,,,358,18,,6594,9.759141254,0
948,,,292,15,,5050,8.367259522,0
949,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.832565943,Beam
950,,,344,15,,4896,7.890559852,0
951,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.735932831,Beam
952,,,306,16,,5302,9.238805151,0
953,,,256,13,,3383,5.756664832,0
954,,,406,17,,5193,10.08783565,0
955,,,292,15,,5050,8.545085287,0
956,,,345,16,,6008,9.708553723,0
957,,,406,19,,7999,14.46761978,0
958,,,326,14,,4806,8.065787919,0
959,,,240,12,,3339,5.391453886,0
960,,,330,16,,6077,11.16604555,0
961,,,266,13,,4041,6.524333843,0
962,,,525,23,,13536,21.75818609,0
963,,,443,17,,5954,10.13073122,0
964,,,334,12,,3102,5.488232795,0
965,,,302,15,,2636,4.159863925,0
966,,,417,18,,3845,7.21257451,0
967,,,184,9,,1892,3.030572037,0
968,,,355,19,,6540,9.945749187,0
969,,,655,16,,2269,6.671729243,0
970,,,418,13,,4248,9.063172996,0
971,,,292,15,,5050,8.402460774,0
972,,,334,15,,5240,10.16958217,0
973,,,553,21,,6233,10.85795907,0
974,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.958166027,Beam
975,,,302,15,,2636,4.02632072,0
976,,,358,16,,5302,9.034527115,0
977,,,735,24,,11396,18.47998916,0
978,,,132,9,,1696,1.848463515,0
979,,,269,16,,5938,9.187675091,0
980,,,326,14,,4837,8.350639681,0
981,,,464,17,,5296,9.845802852,0
982,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.624584774,Beam
983,,,349,19,,5783,9.366212817,0
984,,,325,16,,5705,10.1040797,0
985,,,280,13,,3163,5.342514324,0
986,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.270374163,Beam
987,,,386,18,,7419,12.10125332,0
988,,,479,25,,8380,15.98508958,0
989,,,302,15,,2605,3.944157906,0
990,,,292,17,,6805,11.28816884,0
991,,,280,13,,3163,5.151753592,0
992,,,311,17,,6411,10.13162638,0
993,,,291,12,,3380,5.529034118,0
994,,,291,13,,4372,6.825183209,0
995,,,393,16,,5282,9.189525441,0
997,,,326,14,,4838,8.583010852,0
998,,,269,13,,4049,7.405666812,0
999,,,655,16,,2163,4.652317814,0
1000,,,479,25,,8245,14.26304712,0
1001,,,132,9,,1696,1.876674589,0
1002,,,285,14,,4837,7.51340088,0
1003,,,269,16,,5909,8.736178768,0
1005,,,325,14,,4674,8.015470227,0
1006,,,278,11,,2740,4.329295941,0
1007,,,525,23,,13529,22.40995513,0
1008,,,328,16,,5240,9.198109106,0
1009,,,399,18,,6263,11.7863116,0
1010,,,525,23,,13329,22.02863572,0
1011,,,285,14,,4837,7.631001174,0
1012,,,250,11,,3070,5.040831312,0
1013,,,363,16,,6077,9.776776036,0
1014,,,324,13,,4062,6.848308361,0
1015,,,527,25,,10868,17.53033993,0
1016,,,366,17,,6139,9.779471676,0
1017,,,269,16,,5933,9.21252865,0
1018,,,406,17,,5286,10.19473419,0
1019,,,443,17,,5014,9.917870657,0
1020,,,525,23,,13521,21.85374971,0
1021,,,399,18,,6077,11.22482193,0
1022,,,309,11,,2264,3.594677583,0
1023,,,295,15,,3491,5.850930909,0
1024,,,525,23,,13521,21.65787369,0
1025,,,417,18,,3845,7.12003477,0
1026,,,328,16,,5302,9.182564668,0
1027,,,348,21,,7969,12.94536628,0
1028,,,478,22,,11794,18.57319438,0
1029,,,349,19,,5407,8.893869567,0
1032,,,500,19,,8863,14.68543121,0
1033,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ans62,",4256,7.090826193,Beam
1034,,,443,17,,5016,9.318961859,0
1035,,,306,16,,5240,8.656734367,0
1036,,,295,15,,3130,5.242135259,0
1037,,,271,12,,3193,4.891459167,0
1038,,,280,13,,3163,5.130216924,0
1039,,,257,11,,2791,4.567215808,0
1040,,,156,10,,2233,2.532578278,0
1041,,,302,15,,2574,3.998880668,0
1042,,,292,17,,6855,10.859314,0
1043,,,325,16,,6077,10.9459572,0
1044,,,198,10,,2465,4.190667812,0
1045,,,306,16,,5178,8.890729896,0
1047,,,348,14,,3549,6.251760523,0
1048,,,326,14,,4837,8.240103555,0
1049,,,208,12,,2343,3.499077495,0
1050,,,272,16,,5955,7.84222912,0
1051,,,406,17,,5260,10.44332401,0
1052,,,345,16,,5951,8.958424771,0
1053,,,553,21,,5937,10.65507398,0
1054,,,278,11,,3013,4.560877975,0
1055,,,321,13,,4434,7.885453697,0
1056,,,417,18,,3845,7.09785974,0
1057,,,302,15,,2512,3.84285115,0
1058,,,417,18,,3814,7.074029231,0
1059,,,208,12,,2064,3.352684255,0
1060,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.751440938,Beam
1061,,,479,25,,8242,14.01113326,0
1062,,,321,18,,6942,10.34899551,0
1063,,,386,18,,7404,12.06210228,0
1064,,,735,24,,11337,17.83724489,0
1065,,,260,11,,2481,4.094139032,0
1066,,,340,10,,2308,4.117613792,0
1067,,,345,16,,5975,9.171329967,0
1068,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ans62,",4256,7.116239289,Beam
1069,,,393,16,,5286,8.774078977,0
1070,,,200,10,,2481,3.253464397,0
1071,,,406,17,,5193,10.47645779,0
1072,,,292,15,,5010,8.385652379,0
1073,,,406,16,,6077,10.46987693,0
1074,,,272,16,,5955,7.910725713,0
1075,,,224,11,,2791,4.702108959,0
1076,,,291,13,,4093,6.742244967,0
1077,,,285,14,,4837,7.722184455,0
1078,,,309,11,,2202,3.58328557,0
1079,,,479,25,,8310,15.93820421,0
1080,,,262,14,,3132,5.500722245,0
1081,,,200,10,,2233,2.856014848,0
1082,,,321,13,,4372,7.553485096,0
1083,,,418,13,,4248,9.004717902,0
1084,,,321,13,,4093,7.14549013,0
1085,,,309,11,,1954,3.135151009,0
1087,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",746,0.934061261,Beam
1088,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.8552501,Beam
1089,,,281,14,,4806,8.374962254,0
1090,,,408,15,,5093,9.4965499,0
1092,,,478,22,,11655,19.91866518,0
1093,,,443,17,,5014,9.371305243,0
1094,,,262,14,,3132,4.967183689,0
1095,,,241,15,,3590,5.745255593,0
1096,,,272,16,,5868,7.979267768,0
1097,,,426,18,,3189,6.171561853,0
1098,,,285,14,,4837,7.696059775,0
1099,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.943463,Beam
1100,,,464,17,,5296,10.23975043,0
1101,,,255,13,,2853,6.440425495,0
1102,,,386,18,,7439,12.2211645,0
1103,,,887,27,,6702,14.62764672,0
1104,,,260,11,,2512,4.21849858,0
1105,,,292,15,,5010,8.301599026,0
1106,,,328,16,,5240,9.10006429,0
1107,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.228176363,Beam
1108,,,171,10,,2202,3.181390746,0
1109,,,272,16,,5853,7.809720635,0
1110,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,9.291030673,Beam
1111,,,291,15,,3636,5.596193906,0
1112,,,134,9,,1954,2.479481343,0
1113,,,443,17,,5014,9.578817256,0
1114,,,393,16,,5292,8.757458115,0
1115,,,266,13,,4082,7.200085855,0
1116,,,262,14,,3101,5.004470102,0
1117,,,448,16,,4137,7.796040797,0
1118,,,321,18,,6637,9.951179798,0
1119,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.544942117,Beam
1120,,,359,15,,3287,5.680973427,0
1121,,,282,13,,4075,6.010764603,0
1122,,,443,17,,5014,9.832955952,0
1123,,,211,11,,3070,4.475065668,0
1124,,,468,20,,8933,15.60667276,0
1125,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int sw = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=sw) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+sw-1);
    }
    System.out.println(res);
  }
}",187,12,"w:sw,",311,0.385320342,Beam
1126,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,1.960778185,Beam
1127,,,311,17,,6552,10.44883344,0
1128,,,790,14,,4837,10.29618183,0
1129,,,443,17,,5014,9.917527572,0
1130,,,349,19,,5382,8.614867349,0
1131,,,348,14,,3554,6.201910063,0
1132,,,273,11,,2727,4.884452983,0
1133,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",466,0.738795467,Beam
1134,,,371,12,,3411,6.142758811,0
1135,,,309,11,,2109,3.374099902,0
1136,,,263,13,,4093,6.249454983,0
1137,,,500,19,,8855,13.90763152,0
1138,,,328,16,,5240,8.437862829,0
1139,,,527,25,,16400,29.45478601,0
1140,,,393,16,,5261,8.522487561,0
1141,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.808158902,Beam
1142,,,468,14,,3566,8.383034746,0
1143,,,348,14,,3548,6.312098555,0
1144,,,478,22,,11839,18.96785434,0
1145,,,367,20,,5555,9.242066113,0
1146,,,443,17,,5014,9.928848406,0
1147,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.38368512,Beam
1148,,,358,18,,6618,9.942634567,0
1149,,,355,19,,6332,9.635728888,0
1150,,,513,26,,17478,29.59760126,0
1151,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int b = sc.nextInt(); sc.nextLine();
            int[] p = new int[b];
            int start = 0;
            char init = 'A';
            int h = -1;
            char[] labels = new char[b];
            for (int i=0; i < b; i++) {
                p[i] = sc.nextInt();
                start += p[i];
                labels[i] = init;
                init++;
                if (p[i] > h) {
                    h = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int i=0; i<b; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char h2 = s.pop(), c2 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(h2);
                            sb3.append(' ');
                        } else {
                            char h2 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(h2);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"n:b,total:start,max:h,t:h,ich:init,c3:b,c1:h2,",5000,9.135625577,Beam
1152,,,358,16,,5302,8.47614373,0
1153,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,",869,1.145827226,Beam
1154,,,326,14,,4837,7.947609448,0
1155,,,132,9,,1705,1.902889025,0
1156,,,306,13,,2915,5.655032821,0
1158,,,479,25,,8167,13.91635241,0
1159,,,448,20,,9374,15.03653384,0
1160,,,280,13,,3163,5.378664076,0
1161,,,219,14,,3143,4.823470358,0
1162,,,406,17,,5322,10.91467132,0
1163,,,393,19,,7055,11.35651303,0
1164,,,500,19,,8779,14.13378623,0
1165,,,321,18,,6814,10.14138651,0
1166,,,375,12,,3395,5.701348003,0
1167,,,240,13,,2184,3.399687163,0
1168,,,240,12,,3321,5.443705666,0
1169,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String baseRoot = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] Chi = new char[26];
        for (int v = 0; v < Chi.length; v++) Chi[v] = (char)('A' + v);

        try (Scanner tc = new Scanner(new File(baseRoot))) {
            int A = tc.nextInt();
            for (int v = 1; v <= A; v++) {
                result.append(""Case #"" + v + "":"");
                int B = tc.nextInt();
                int[] Ki = new int[B];
                int use = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ki[rev] = tc.nextInt();
                    use += Ki[rev];
                    Ki[rev] *= 2;
                }
                while (use > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    use--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ki[rev] > use) {
                            if (v == 0) {
                                result.append(Chi[rev]);
                                Ki[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(Chi[rev]);
                                Ki[rev] -= 2;
                                use--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ki[rev] > 0) {
                                result.append(Chi[0]);
                                Ki[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String wordFile = ""answer.out"";
            if (baseRoot != null && !baseRoot.equals("""")) {
                wordFile = baseRoot.substring(0, baseRoot.length() - 2) + ""out"";
            }
            try (FileOutputStream foses = new FileOutputStream(wordFile, false)) {
                foses.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception ae) {
            ae.printStackTrace();
        }
    }
}",448,16,"sum:use,j:rev,N:B,flag:v,Pi:Ki,T:A,i:v,sc:tc,answer:result,parties:Chi,filePath:baseRoot,e:ae,outPath:wordFile,fos:foses,",3736,7.311736461,Beam
1170,,,306,16,,5302,9.245610054,0
1171,,,605,21,,9809,15.25666929,0
1172,,,272,16,,5955,8.250066161,0
1173,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.949554809,Beam
1174,,,273,11,,2649,4.645124567,0
1175,,,262,14,,3132,5.568452283,0
1176,,,278,11,,3048,4.768310865,0
1177,,,291,13,,4372,6.904904413,0
1178,,,311,17,,6425,10.09288808,0
1179,,,290,12,,3692,6.073172434,0
1180,,,349,19,,5474,8.798027023,0
1181,,,255,13,,2946,6.564002017,0
1182,,,348,14,,3548,6.319222724,0
1183,,,366,17,,6139,9.861907732,0
1184,,,272,16,,6022,8.321428676,0
1185,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.833960152,Beam
1186,,,271,12,,3421,5.599210191,0
1187,,,265,12,,3387,5.374917889,0
1188,,,426,18,,3498,6.629052126,0
1189,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.711831923,Beam
1190,,,358,18,,6594,10.08114622,0
1191,,,419,16,,6077,10.60380453,0
1192,,,250,11,,3070,5.152537251,0
1193,,,306,13,,2915,5.672763042,0
1194,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.828913538,Beam
1195,,,273,11,,2770,4.815407312,0
1196,,,269,16,,5831,9.02606051,0
1197,,,292,17,,6743,11.16460595,0
1198,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(row.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            row.readLine();
            String char[] = row.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int u0=Integer.parseInt(char[i+1]);
                int i16 = Integer.parseInt(char[i]);
                if((u0-i16)<0) result1+=-(u0-i16);
                if(-(u0-i16)>k) k = -(u0-i16);
            }
            for(int i = 0; i<char.length-1;i++){
                int i16 = Integer.parseInt(char[i]);
                if(i16>=k) result2 = result2+k;
                else if(i16<k) result2 = result2+i16;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        row.close();
        writer.close();

    }

}",316,15,"max:k,str:char,i2:u0,i1:i16,reader:row,",2033,3.675232502,Beam
1199,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                sum += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,ret:arg,",1818,2.714677437,Beam
1200,,,406,19,,7999,14.22024598,0
1201,,,448,20,,9365,14.85957836,0
1202,,,257,11,,2791,4.707451268,0
1203,,,513,26,,17252,29.42688957,0
1204,,,619,14,,4333,7.264637562,0
1205,,,262,14,,3132,5.447573709,0
1206,,,325,14,,4809,7.953896519,0
1207,,,330,16,,5829,10.86245698,0
1208,,,295,15,,3491,5.732364802,0
1209,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.924733957,Beam
1210,,,325,14,,4673,8.420690616,0
1211,,,348,21,,7959,12.48093764,0
1212,,,236,16,,4434,6.889617165,0
1213,,,325,16,,6077,10.67552873,0
1214,,,156,10,,2205,2.814852067,0
1215,,,262,14,,3132,5.108980147,0
1216,"class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter fw = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            int w = scanner.nextInt();
            fw.write(String.format(""Case #%d: %s\n"", t, solve(r, c, w)));
        }
        fw.close();
    }

    private static int solve(int r, int c, int w) {
        int res = ((c - 1) / w + 1) * (r - 1) + w + (c - 1) / w;
        return res;
    }
}","class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter ww = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int k = scanner.nextInt();
            int j = scanner.nextInt();
            ww.write(String.format(""Case #%d: %s
"", t, solve(r, c, w)));
        }
        ww.close();
    }

    private static int solve(int r, int k, int j) {
        int res = ((k - 1) / j + 1) * (r - 1) + j + (k - 1) / j;
        return res;
    }
}",187,13,"w:j,c:k,fw:ww,",621,0.770693918,Beam
1217,,,292,15,,5010,8.29747932,0
1218,,,273,11,,2984,5.066709538,0
1220,,,278,11,,2983,4.624812222,0
1221,,,257,11,,3070,5.165601293,0
1222,,,406,19,,7999,14.2503197,0
1223,,,272,16,,5724,7.665131942,0
1224,,,426,18,,3716,7.044140299,0
1225,,,256,13,,4055,6.672677926,0
1226,,,256,13,,3064,5.163344272,0
1227,,,285,14,,5209,8.158903491,0
1228,,,735,24,,10576,16.61617388,0
1229,,,325,16,,6077,10.99943244,0
1230,,,478,22,,11490,19.89692274,0
1231,,,417,18,,3845,7.228419153,0
1232,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.900339139,Beam
1233,,,325,16,,6077,11.27809076,0
1234,,,285,14,,5209,8.347139736,0
1235,,,443,17,,5014,9.95170306,0
1236,,,345,16,,5979,9.578005811,0
1237,,,265,12,,3697,6.101861608,0
1238,,,281,14,,4806,7.717202894,0
1239,,,240,13,,2153,3.224144483,0
1240,,,572,15,,5215,10.13109243,0
1241,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.887508285,Beam
1242,,,553,21,,6339,10.91817306,0
1243,,,553,21,,6163,10.72534723,0
1244,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader tr = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(tr.readLine());
        
        for (int s = 0; s < testCases; ++s) {
            int c = Integer.parseInt(tr.readLine());
            String[] mushroommNumbers = tr.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        tr.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,br:tr,",4713,9.026202349,Beam
1245,,,328,16,,5240,9.032508894,0
1246,,,278,11,,2754,4.690969284,0
1247,,,441,13,,4062,7.895688415,0
1248,,,887,27,,6962,13.11273717,0
1249,,,302,15,,2605,4.041597005,0
1250,,,306,16,,5302,9.302920282,0
1251,,,295,15,,3130,5.49141558,0
1252,,,292,17,,6514,10.63415851,0
1253,,,272,16,,5891,8.069731812,0
1254,,,334,15,,5240,10.14228925,0
1255,,,475,18,,7534,13.36545093,0
1256,,,443,17,,5205,9.726161544,0
1257,,,255,13,,2915,6.888687766,0
1258,,,269,13,,4049,7.334645573,0
1259,,,324,13,,4372,7.340893245,0
1260,,,295,15,,3491,6.091667771,0
1261,,,305,15,,5232,9.252496084,0
1262,,,321,18,,6976,11.79049652,0
1263,,,240,12,,3619,5.967609032,0
1264,,,443,17,,5602,10.42630612,0
1265,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.866150383,Beam
1266,,,250,11,,2791,4.734043642,0
1267,,,311,17,,6659,10.67805429,0
1268,,,184,9,,1706,2.733387776,0
1269,,,406,19,,7999,14.36935072,0
1270,,,311,17,,6351,10.09916612,0
1271,,,256,13,,4079,6.418629042,0
1272,,,208,12,,2079,3.122067853,0
1273,,,406,19,,7937,13.74898171,0
1274,,,311,17,,6827,10.77170533,0
1275,,,224,11,,3070,5.242533362,0
1276,,,250,11,,2791,4.552664955,0
1277,,,328,16,,5240,8.786667526,0
1278,,,321,18,,7000,10.86276662,0
1279,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(row.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            row.readLine();
            String char[] = row.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int u0=Integer.parseInt(char[i+1]);
                int i16 = Integer.parseInt(char[i]);
                if((u0-i16)<0) result1+=-(u0-i16);
                if(-(u0-i16)>k) k = -(u0-i16);
            }
            for(int i = 0; i<char.length-1;i++){
                int i16 = Integer.parseInt(char[i]);
                if(i16>=k) result2 = result2+k;
                else if(i16<k) result2 = result2+i16;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        row.close();
        writer.close();

    }

}",316,15,"max:k,str:char,i2:u0,i1:i16,reader:row,",2033,3.466762952,Beam
1280,,,305,15,,5188,8.121359201,0
1282,,,305,15,,5169,8.153832384,0
1283,,,325,14,,4735,8.175848905,0
1284,,,735,24,,9923,15.67325098,0
1285,,,572,15,,5127,10.1697198,0
1286,,,355,19,,6537,9.549319299,0
1287,,,406,19,,7999,13.62249395,0
1288,,,375,12,,3670,6.241786349,0
1289,,,358,16,,5302,8.504108346,0
1290,,,448,20,,9365,14.52464941,0
1291,,,306,13,,2915,5.612163476,0
1292,,,735,24,,10951,16.65293658,0
1293,,,281,14,,4806,7.421814919,0
1294,,,443,17,,5014,9.092901405,0
1295,,,366,17,,6139,9.388828794,0
1296,,,321,18,,6976,11.50977182,0
1297,,,285,14,,4837,7.337686765,0
1298,,,328,16,,5302,9.411443428,0
1299,,,418,13,,4434,9.530886813,0
1300,,,500,19,,8863,14.255443,0
1301,,,525,23,,13539,21.6380901,0
1302,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.812498446,Beam
1303,,,417,18,,4248,7.580630104,0
1304,,,418,13,,3969,8.261900878,0
1305,,,325,16,,5891,10.02025928,0
1306,,,345,16,,5972,9.02730329,0
1308,,,328,16,,5241,8.728517783,0
1309,,,325,16,,6077,10.52113546,0
1310,,,240,12,,3685,5.623365585,0
1311,,,605,21,,9881,14.85540678,0
1313,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int co = 0; co < e; co++) {
                m[co] = input.nextInt();

            }
            for (int co = 1; co < e; co++) {
                d = m[co - 1] - m[co];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int co = 0; co < e - 1; co++) {
                if (m[co] <= w) {
                    z += m[co];
                }
                if (m[co] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:co,",467,0.715222502,Beam
1314,,,544,17,,5949,11.54431947,0
1315,,,366,17,,6139,9.324253833,0
1316,,,460,16,,5302,9.827617061,0
1317,,,198,10,,2399,3.850943116,0
1318,,,254,13,,4481,7.092472931,0
1319,,,525,23,,13335,21.38087697,0
1320,,,420,19,,7084,11.44139407,0
1321,,,393,19,,7049,11.32436269,0
1322,,,290,12,,3384,5.517067345,0
1323,,,328,16,,5240,8.476884826,0
1324,,,285,14,,5209,7.665109344,0
1325,,,278,15,,5183,7.3924396,0
1326,,,420,19,,7084,11.32075013,0
1327,,,348,14,,3554,6.012883842,0
1328,,,367,20,,5555,8.654982213,0
1329,,,132,9,,1702,1.752520871,0
1330,,,311,17,,6796,10.68993654,0
1331,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dt = new int[l+1];
                dt[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dt[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dt[j] = Math.max(dt[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dt[l]);
                fout.write(""Case #"" + i + "": "" + dt[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dt,",1391,2.094705248,Beam
1332,,,379,17,,6940,11.32832994,0
1333,,,280,13,,3163,4.940938306,0
1334,,,605,21,,9917,15.16051701,0
1336,,,348,21,,7979,11.87193227,0
1337,,,553,21,,6406,11.05669092,0
1338,,,267,13,,4027,5.894000558,0
1339,,,479,25,,8161,13.36822403,0
1340,,,149,10,,2481,2.859939555,0
1341,,,262,14,,3504,5.574960868,0
1342,,,328,16,,5240,8.721616781,0
1343,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.865849956,Beam
1344,,,406,16,,6015,10.12114156,0
1345,,,292,17,,6805,10.83058838,0
1347,,,208,12,,2324,3.360855309,0
1348,,,735,24,,11222,17.42919739,0
1349,,,443,17,,6000,11.30070376,0
1350,,,255,13,,2946,6.411743975,0
1351,,,544,17,,5899,11.54567991,0
1352,,,250,11,,3070,4.987537376,0
1353,,,305,15,,5232,8.769566186,0
1354,,,655,16,,2439,5.810102391,0
1355,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.691322486,Beam
1356,,,317,12,,3371,5.124372439,0
1357,,,426,18,,3529,6.595042328,0
1358,,,222,16,,3690,5.436439987,0
1359,,,257,11,,3008,4.855613617,0
1360,,,349,19,,5821,9.192013725,0
1361,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner cl;
    try {
      cl = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = cl.nextInt();
    String tmp = cl.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int line = cl.nextInt();
      int val = cl.nextInt();
      int step = cl.nextInt();
      int min = 0;

      for (int j=0; j<line; j++) {
        for (int kn=0; kn<val; kn+=step) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+step-1);
    }
    System.out.println(res);
  }
}",187,12,"w:step,row:line,col:val,k:kn,sc:cl,",1830,2.245008894,Beam
1362,,,272,16,,5623,7.085609698,0
1363,,,344,15,,4900,7.801451178,0
1364,,,500,19,,8865,14.34320579,0
1365,,,184,9,,1706,2.67128191,0
1366,,,426,18,,3529,6.428271906,0
1367,,,292,15,,5050,8.035575656,0
1368,,,291,13,,4093,6.439302286,0
1369,,,269,13,,4049,7.138840262,0
1370,,,426,18,,3963,7.330002185,0
1371,,,305,15,,5228,8.377814798,0
1372,,,169,10,,2233,2.785579427,0
1373,,,358,16,,5271,8.871793723,0
1374,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.616639316,Beam
1376,,,291,12,,3412,5.700391658,0
1377,,,241,15,,3234,5.189451122,0
1378,,,262,14,,3132,4.985124747,0
1379,,,358,18,,6618,10.03515483,0
1380,,,330,14,,4584,7.66942306,0
1381,,,292,17,,6787,10.44683661,0
1382,,,269,16,,5830,8.63539921,0
1384,,,527,25,,10199,15.72406614,0
1385,,,280,13,,3163,5.121058679,0
1386,,,305,15,,5232,8.802193773,0
1387,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.80426211,Beam
1388,,,198,10,,2403,3.990632176,0
1389,,,255,13,,2915,6.432378125,0
1390,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.486007488,Beam
1391,,,309,11,,1954,3.031903609,0
1393,,,269,16,,5924,8.824170303,0
1394,,,468,20,,8904,15.84236399,0
1395,,,290,12,,3385,5.491282471,0
1396,,,156,10,,2455,3.059294625,0
1397,,,263,13,,4434,6.913409285,0
1398,,,260,11,,2481,3.972135492,0
1399,,,479,25,,8203,13.51029512,0
1400,,,265,12,,3375,5.098438148,0
1401,,,305,15,,5148,7.978758641,0
1402,,,224,11,,3070,5.064639,0
1403,,,291,12,,3411,5.591908614,0
1404,,,290,12,,3692,6.077940571,0
1405,,,363,16,,6077,9.942508988,0
1406,,,443,17,,5014,9.547372516,0
1407,,,250,11,,3070,4.990830628,0
1409,,,302,15,,2637,3.899729474,0
1410,,,443,17,,5014,9.579680769,0
1411,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.662543249,Beam
1412,,,426,18,,3529,6.612888642,0
1413,,,479,25,,8203,13.52422828,0
1414,,,393,16,,5288,8.757576632,0
1415,,,187,12,,3411,4.224838905,0
1416,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,5.956249102,Beam
1417,,,418,13,,4434,9.450647219,0
1418,,,266,13,,3950,6.283442338,0
1419,,,321,18,,6976,11.42179199,0
1420,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.861217844,Beam
1421,,,655,16,,2052,5.039588435,0
1422,,,358,16,,5302,8.829633077,0
1423,,,330,14,,4617,7.549287275,0
1424,,,464,17,,5296,9.275861446,0
1425,,,367,20,,5553,8.937150311,0
1426,,,513,26,,16525,26.083157,0
1427,,,375,12,,3361,5.510949043,0
1428,,,211,11,,3070,3.97867016,0
1429,,,273,11,,2649,4.145476647,0
1430,,,169,10,,2233,2.633981057,0
1431,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.815395669,Beam
1433,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",777,0.840672914,Beam
1434,,,302,15,,2636,3.87832009,0
1435,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int sw = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[sw] = sw + r - 1;
                for(int j = sw + 1; j <= 2*sw - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = sw+1 + r-1;
                }
                for(int j = 2*sw; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-sw] + r, sw + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:sw,",310,0.445729947,Beam
1436,,,479,25,,8197,13.28972891,0
1437,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.208631257,Beam
1438,,,278,11,,3013,4.513833002,0
1439,,,334,12,,3676,6.594016055,0
1440,,,309,11,,2264,3.528621944,0
1441,,,291,13,,4093,6.564357845,0
1442,,,262,14,,3132,4.687909941,0
1443,,,655,16,,2108,6.462110265,0
1444,,,269,13,,4049,6.86461314,0
1445,,,317,12,,3373,5.334459798,0
1446,,,358,18,,6594,9.674060285,0
1447,,,278,15,,5189,7.265125314,0
1448,,,358,18,,6598,9.28072559,0
1449,,,366,17,,6139,8.803839036,0
1450,,,406,17,,5322,10.42387797,0
1451,,,426,18,,2233,4.308462755,0
1452,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1459,2.222318923,Beam
1453,,,306,13,,2946,5.733855693,0
1454,,,406,17,,5322,10.51699592,0
1455,,,500,19,,8855,14.67669292,0
1456,,,321,18,,6854,10.03925981,0
1457,,,417,18,,4248,7.643678868,0
1458,,,199,10,,1086,1.402132205,0
1459,,,406,17,,5322,10.49910839,0
1460,"class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter fw = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            int w = scanner.nextInt();
            fw.write(String.format(""Case #%d: %s\n"", t, solve(r, c, w)));
        }
        fw.close();
    }

    private static int solve(int r, int c, int w) {
        int res = ((c - 1) / w + 1) * (r - 1) + w + (c - 1) / w;
        return res;
    }
}","class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter ww = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int k = scanner.nextInt();
            int j = scanner.nextInt();
            ww.write(String.format(""Case #%d: %s
"", t, solve(r, c, w)));
        }
        ww.close();
    }

    private static int solve(int r, int k, int j) {
        int res = ((k - 1) / j + 1) * (r - 1) + j + (k - 1) / j;
        return res;
    }
}",187,13,"w:j,c:k,fw:ww,",621,0.715318425,Beam
1461,,,328,16,,5271,8.602549803,0
1462,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.867409937,Beam
1463,,,393,16,,5286,8.137677836,0
1465,,,290,12,,3695,5.370437221,0
1466,,,330,16,,5767,10.2826515,0
1467,,,295,15,,3130,5.021219039,0
1469,,,330,16,,5985,10.85510611,0
1470,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,1.873385878,Beam
1471,,,258,14,,4806,7.92580423,0
1472,,,321,18,,6380,9.089889924,0
1473,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,1.907764351,Beam
1474,,,887,27,,6688,12.06259727,0
1475,,,295,15,,3491,5.853064299,0
1476,,,265,12,,3699,5.782560209,0
1477,,,132,9,,1702,1.834629325,0
1478,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.630841994,Beam
1479,,,265,12,,3699,5.805703839,0
1480,,,326,14,,4837,8.109763912,0
1481,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.947594762,Beam
1482,,,348,21,,7987,12.4729325,0
1483,,,211,11,,3070,4.301215752,0
1484,,,363,16,,6077,9.67840091,0
1485,,,544,17,,5949,11.50359529,0
1486,,,358,18,,6594,9.801066999,0
1487,,,479,25,,8242,13.51660387,0
1488,,,250,11,,2791,4.515226245,0
1489,,,405,15,,5240,9.098498301,0
1490,,,367,20,,5619,9.018109488,0
1491,,,443,17,,4804,8.590110779,0
1492,,,273,11,,2739,4.626653198,0
1493,,,311,17,,6659,10.17680235,0
1495,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4763,7.356336641,Beam
1496,,,272,16,,5602,6.966524088,0
1497,,,553,21,,6163,10.49342455,0
1498,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.415675163,Beam
1499,,,443,17,,5188,9.786964027,0
1500,,,254,13,,4158,6.306251379,0
1501,,,281,14,,4837,7.439257411,0
1502,,,426,18,,3343,6.193151744,0
1504,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",777,0.855229342,Beam
1505,,,250,11,,3070,5.013262526,0
1506,,,406,16,,6046,10.81426671,0
1507,,,263,13,,4093,6.124489152,0
1508,,,366,17,,6139,9.686266144,0
1509,,,348,14,,3554,6.133338265,0
1510,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(row.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            row.readLine();
            String char[] = row.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int u0=Integer.parseInt(char[i+1]);
                int i16 = Integer.parseInt(char[i]);
                if((u0-i16)<0) result1+=-(u0-i16);
                if(-(u0-i16)>k) k = -(u0-i16);
            }
            for(int i = 0; i<char.length-1;i++){
                int i16 = Integer.parseInt(char[i]);
                if(i16>=k) result2 = result2+k;
                else if(i16<k) result2 = result2+i16;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        row.close();
        writer.close();

    }

}",316,15,"max:k,str:char,i2:u0,i1:i16,reader:row,",2033,3.576544845,Beam
1511,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String sourcePoint = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] Chi = new char[26];
        for (int in = 0; in < Chi.length; in++) Chi[in] = (char)('A' + in);

        try (Scanner tc = new Scanner(new File(sourcePoint))) {
            int A = tc.nextInt();
            for (int in = 1; in <= A; in++) {
                result.append(""Case #"" + in + "":"");
                int B = tc.nextInt();
                int[] Ti = new int[B];
                int count = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ti[rev] = tc.nextInt();
                    count += Ti[rev];
                    Ti[rev] *= 2;
                }
                while (count > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    count--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ti[rev] > count) {
                            if (v == 0) {
                                result.append(Chi[rev]);
                                Ti[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(Chi[rev]);
                                Ti[rev] -= 2;
                                count--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ti[rev] > 0) {
                                result.append(Chi[0]);
                                Ti[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String inFile = ""answer.out"";
            if (sourcePoint != null && !sourcePoint.equals("""")) {
                inFile = sourcePoint.substring(0, sourcePoint.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(inFile, false)) {
                fos.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"sum:count,j:rev,N:B,flag:v,Pi:Ti,T:A,sc:tc,i:in,answer:result,parties:Chi,filePath:sourcePoint,outPath:inFile,",3376,6.593351249,Beam
1512,,,295,15,,3130,5.235406069,0
1513,,,171,10,,2202,3.113053489,0
1514,,,358,18,,6594,9.913411852,0
1515,,,269,16,,5918,8.542196743,0
1516,,,887,27,,6962,12.53564142,0
1517,,,544,17,,5973,11.74503225,0
1518,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.761105525,Beam
1519,,,443,17,,6228,11.42362633,0
1520,,,375,12,,3394,5.43161519,0
1521,,,325,14,,4983,8.692619109,0
1522,,,321,18,,6980,11.30215099,0
1523,,,379,17,,6944,11.27045437,0
1524,,,262,14,,3504,5.647462495,0
1525,,,408,17,,5691,10.35133388,0
1526,,,291,15,,3611,5.328622723,0
1527,,,348,14,,3554,6.013698689,0
1528,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.397139502,Beam
1529,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int pos = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                pos += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,sum:pos,ret:arg,",2190,3.022783013,Beam
1530,,,291,15,,3645,5.134619852,0
1531,,,478,22,,11637,18.34926345,0
1532,,,198,10,,2465,4.05576121,0
1533,,,255,13,,2822,6.0477747,0
1534,,,348,14,,3269,5.386672934,0
1535,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.479605333,Beam
1536,,,280,13,,3163,5.075347594,0
1537,,,292,17,,6762,10.59613637,0
1538,,,443,17,,5014,9.689422556,0
1539,,,280,13,,3163,5.117692876,0
1540,,,298,16,,4527,7.325685326,0
1541,,,366,17,,6139,9.747853363,0
1542,,,464,17,,5358,10.3910887,0
1543,,,468,20,,8994,15.7736729,0
1544,,,311,17,,6289,9.687874762,0
1545,,,479,25,,8274,15.31815921,0
1546,,,224,11,,3070,4.866920392,0
1547,,,448,16,,4139,7.664557604,0
1548,,,256,13,,3028,4.994242307,0
1549,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    res    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + res);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:res,",1086,1.407093891,Beam
1551,,,363,16,,6078,9.563625081,0
1553,,,169,10,,2234,2.800396721,0
1554,,,271,12,,3191,4.782518303,0
1555,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1459,2.235796249,Beam
1556,,,262,14,,3504,5.561131863,0
1557,,,273,11,,2742,4.62671086,0
1558,,,355,19,,6355,9.313102337,0
1559,,,330,16,,5984,11.03438656,0
1560,,,292,17,,6545,10.17795815,0
1561,,,250,11,,2791,4.602323925,0
1562,,,156,10,,2233,2.486482561,0
1563,,,290,12,,3692,6.110218581,0
1564,,,419,16,,6077,10.43070478,0
1565,,,255,13,,2915,6.394239346,0
1566,,,306,13,,2915,5.611722596,0
1568,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5060,8.752375392,Beam
1569,,,169,10,,2419,2.891594247,0
1570,,,306,16,,5147,8.303999023,0
1571,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.944140697,Beam
1572,,,271,12,,3166,4.674016611,0
1573,,,266,13,,4082,6.729622738,0
1574,,,328,16,,5240,8.764812756,0
1575,,,241,15,,3273,5.158170891,0
1576,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(row.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            row.readLine();
            String char[] = row.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int u0=Integer.parseInt(char[i+1]);
                int i16 = Integer.parseInt(char[i]);
                if((u0-i16)<0) result1+=-(u0-i16);
                if(-(u0-i16)>k) k = -(u0-i16);
            }
            for(int i = 0; i<char.length-1;i++){
                int i16 = Integer.parseInt(char[i]);
                if(i16>=k) result2 = result2+k;
                else if(i16<k) result2 = result2+i16;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        row.close();
        writer.close();

    }

}",316,15,"max:k,str:char,i2:u0,i1:i16,reader:row,",2033,3.563253796,Beam
1577,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] P = new char[26];
        for (int n = 0; n < P.length; n++) P[n] = (char)('A' + n);

        try (Scanner mc = new Scanner(new File(filePath))) {
            int A = mc.nextInt();
            for (int n = 1; n <= A; n++) {
                result.append(""Case #"" + n + "":"");
                int B = mc.nextInt();
                int[] Ti = new int[B];
                int n = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ti[rev] = mc.nextInt();
                    n += Ti[rev];
                    Ti[rev] *= 2;
                }
                while (n > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    n--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ti[rev] > n) {
                            if (v == 0) {
                                result.append(P[rev]);
                                Ti[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(P[rev]);
                                Ti[rev] -= 2;
                                n--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ti[rev] > 0) {
                                result.append(P[0]);
                                Ti[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"sum:n,j:rev,i:n,N:B,flag:v,T:A,Pi:Ti,parties:P,answer:result,sc:mc,",3070,5.993824887,Beam
1578,,,280,13,,3163,5.191921663,0
1579,,,368,14,,5178,9.074530804,0
1580,,,321,18,,6980,11.32077497,0
1581,,,387,15,,5240,9.454214946,0
1582,,,224,11,,3070,4.996376264,0
1583,,,655,16,,2152,5.216904108,0
1584,,,513,26,,16805,26.43425583,0
1585,,,198,10,,2467,4.014986793,0
1586,,,618,26,,10936,17.49627638,0
1587,,,254,13,,4499,6.863541631,0
1588,,,358,18,,6594,9.890708868,0
1589,,,311,17,,6662,10.28192928,0
1590,,,256,13,,3024,5.107493734,0
1591,,,325,16,,6077,10.6979676,0
1592,,,605,21,,10054,15.54068236,0
1593,,,317,12,,3681,6.008561901,0
1594,,,417,19,,6864,11.17927027,0
1595,,,262,14,,3132,5.386981662,0
1596,,,325,16,,6077,10.55131172,0
1597,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.782179209,Beam
1598,,,330,16,,6077,11.22442762,0
1599,,,280,13,,3163,5.142364144,0
1600,,,417,18,,3845,6.897151593,0
1601,,,187,13,,2248,2.621415242,0
1602,,,426,18,,3591,6.443291728,0
1603,,,406,16,,5984,10.6407867,0
1604,,,418,13,,4434,9.46163435,0
1605,,,366,17,,6139,9.552377284,0
1606,,,263,13,,4434,7.055561797,0
1607,,,326,14,,4837,7.970780567,0
1608,,,132,9,,1664,1.846294816,0
1609,,,132,9,,1696,1.879159208,0
1610,,,418,13,,4031,8.151522255,0
1611,,,443,17,,5870,10.1205966,0
1612,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                sum += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,ret:arg,",1818,2.509229771,Beam
1613,,,266,13,,4071,6.318213141,0
1614,,,256,13,,3152,5.285279302,0
1615,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,5.838306936,Beam
1616,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.742294788,Beam
1617,,,327,16,,4273,6.82184329,0
1619,,,256,13,,3034,5.20717748,0
1620,,,308,12,,1582,2.800392087,0
1621,,,265,12,,3631,5.475171014,0
1622,,,256,13,,3343,5.679192257,0
1623,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dt = new int[l+1];
                dt[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dt[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dt[j] = Math.max(dt[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dt[l]);
                fout.write(""Case #"" + i + "": "" + dt[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dt,",1391,2.085498083,Beam
1624,,,349,19,,5336,8.27008297,0
1625,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.887191264,Beam
1626,,,262,14,,3132,4.938392317,0
1627,,,256,13,,3152,5.440565058,0
1628,,,393,16,,5300,8.9380608,0
1630,,,256,13,,4416,6.669374506,0
1631,,,417,18,,4248,7.507296495,0
1632,,,468,14,,4155,8.445929174,0
1633,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.482874223,Beam
1634,,,272,16,,5955,7.657514985,0
1635,,,527,25,,16276,27.31613968,0
1637,,,327,16,,4274,6.862287045,0
1638,,,316,15,,4855,8.244721146,0
1639,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.720441035,Beam
1640,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.894178474,Beam
1641,,,358,18,,6594,9.836378098,0
1642,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.778691475,Beam
1643,,,281,14,,4837,7.376763829,0
1644,,,295,15,,3130,5.193883244,0
1645,,,273,11,,2987,4.976293087,0
1646,,,324,13,,4248,7.057296526,0
1647,,,257,11,,2791,4.476596363,0
1648,,,266,13,,4011,6.321052698,0
1649,,,240,12,,3393,5.184761786,0
1650,,,272,16,,5843,7.345539002,0
1651,,,417,19,,7096,12.02255356,0
1652,"class A {
    public static void main(String[] args) {
        A obj = new A();
        String filame = ""input.txt"";
        if (args.length > 0) {
            filame = args[0];
        }
        File file = new File(filame);
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            Integer testCasesCount = Integer.parseInt(br.readLine());
            int testCaseNumber = 1;
            for (String line; (line = br.readLine()) != null;) {
                String[] testCase = line.split(""\\s+"");
                int row = Integer.parseInt(testCase[0]);
                        int cells = Integer.parseInt(testCase[1]);
                        int width = Integer.parseInt(testCase[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int limit =  cells / width;
                        int res = limit + width-1;
                        
                        int fin = res * row;
                        int left = cells % width;
                        //System.out.println(left);
                        if(left != 0 && width != 1){
                            fin++;
                        }
                        
                        System.out.println(""Case #""+ testCaseNumber++ +"": ""+ fin);
                        //System.out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
}","class A {
    public static void main(String[] args) {
        A obj = new A();
        String flamed = ""input.txt"";
        if (args.length > 0) {
            flamed = args[0];
        }
        File full = new File(flamed);
        try (BufferedReader sr = new BufferedReader(new FileReader(full))) {
            Integer testCasesCount = Integer.parseInt(sr.readLine());
            int testcaseCounter = 1;
            for (String value; (value = sr.readLine()) != null;) {
                String[] TestType = value.split(""\\s+"");
                int r = Integer.parseInt(TestType[0]);
                        int ns = Integer.parseInt(TestType[1]);
                        int pos = Integer.parseInt(TestType[2]);
                //        char[] visitors = visitorsLine.toCharArray();
                //        int total = 0;
                //        int friends = 0;
                //
                //        System.out.print(""Case #"" + testCasesCount + "": "");
                //        for (int i = 0; i < visitors.length; i++) {
                //            int shameCount = Character.getNumericValue(visitors[i]);
                //
                //            if (total < i) {
                //
                //                int frindsToAdd = i - total;
                //                total += frindsToAdd;
                //                friends += frindsToAdd;
                //            }
                //            total += shameCount;
                //        }
                        //System.out.print(row);
                        //System.out.print(cells);
                        //System.out.println(width);
                
                        int length =  ns / pos;
                        int pos = length + pos-1;
                        
                        int continue = pos * r;
                        int length = ns % pos;
                        //System.out.println(left);
                        if(length != 0 && pos != 1){
                            continue++;
                        }
                        
                        System.out.println(""Case #""+ testcaseCounter++ +"": ""+ continue);
                        //System.out.println();
            }
        } catch (IOException or) {
            or.printStackTrace();
        }

    }
}",236,16,"width:pos,cells:ns,row:r,res:pos,testCase:TestType,fin:continue,limit:length,line:value,br:sr,left:length,testCaseNumber:testcaseCounter,e:or,file:full,filame:flamed,",4031,6.112544537,Beam
1653,,,285,14,,5209,7.905829267,0
1654,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.929129692,Beam
1655,,,525,23,,13473,21.09538941,0
1656,,,368,14,,4806,8.242089307,0
1657,,,406,17,,5260,10.16438736,0
1658,,,241,15,,3273,5.109331898,0
1659,,,367,20,,5645,8.579367308,0
1660,,,348,14,,3759,6.247924153,0
1661,,,443,17,,5014,8.976072935,0
1662,,,272,16,,5668,7.120270948,0
1663,,,348,21,,7965,12.35265789,0
1664,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.790225434,Beam
1665,,,280,13,,3163,4.898841782,0
1666,,,215,12,,3375,4.718538316,0
1667,,,326,14,,4837,8.008742106,0
1668,,,316,15,,4173,7.142074064,0
1669,,,326,14,,5116,8.353543516,0
1670,,,264,15,,5030,8.633582727,0
1671,,,483,20,,8666,13.52092747,0
1672,,,305,15,,5236,8.819336692,0
1673,,,262,14,,3132,4.975688966,0
1674,,,292,17,,6877,11.25264862,0
1675,,,358,16,,5240,9.167330881,0
1677,,,326,14,,4838,7.956371832,0
1678,,,269,16,,5918,8.758341237,0
1680,,,267,13,,4028,6.293058733,0
1681,,,305,15,,5232,8.689686207,0
1682,,,198,10,,2221,3.551345686,0
1683,,,240,13,,2184,3.140350342,0
1684,,,375,12,,3397,5.170514409,0
1685,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader source = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter buffer = new BufferedWriter(new FileWriter(""A-large.out""));
            String value = null;
            value = source.readLine();
            
            int W = Integer.parseInt(value);
            for(int w=0;w<W;w++){
                value = source.readLine();
                int W = Integer.parseInt(value);
                value = source.readLine();
                String [] stokins = value.split("" "");                
                int [] TV = new int [W];
                for (int kind=0;kind<W;kind++){
                    TV[kind]= Integer.parseInt(stokins[kind]);
                }
                int y=0,h=0,w=0;
                for (int kind=0;kind<W-1;kind++){
                    if (TV[kind]>TV[kind+1]){
                        y=y+TV[kind]-TV[kind+1];
                        if (TV[kind]-TV[kind+1]>w){
                            w=TV[kind]-TV[kind+1];
                        }
                    }
                }
                for (int kind=0;kind<W-1;kind++){
                    if (TV[kind]>=w){
                        h=h+w;
                    } else{
                        h=h+TV[kind];
                    }
                }
                
                System.buffer.println(""Case #"" + (w+1) +"": "" + y + "" "" + h);    
                buffer.write(""Case #"" + (w+1) +"": "" + y + "" "" + h + ""
"");
            }
            source.close();    
            buffer.close();
        } catch (FileNotFoundException ception) {
            System.buffer.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.buffer.println(""IOException"");
            ception.printStackTrace();
        }
        long startValue=System.currentTimeMillis();//End time
        System.buffer.println(""Running time is ""+(startValue-startTime)+""ms"");

    }

}",443,17,"N:W,T:W,max:w,b:h,k:kind,a:y,line:value,i:w,in:source,V:TV,tokens:stokins,out:buffer,e:ception,endTime:startValue,",4688,8.577740022,Beam
1686,,,326,14,,5147,8.253371815,0
1687,,,544,17,,5949,11.44500806,0
1689,,,321,18,,6847,9.854400142,0
1690,,,305,15,,5232,8.709019736,0
1691,,,406,19,,7999,13.69298593,0
1692,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.788752258,Beam
1694,,,345,16,,5974,8.926617376,0
1695,,,387,15,,5178,8.984451024,0
1696,,,406,19,,7999,13.57652482,0
1697,,,358,18,,6594,9.771684376,0
1699,,,156,10,,2234,2.460739672,0
1701,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3643,5.935971999,Beam
1702,,,306,13,,2946,5.731509157,0
1703,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.046895305,Beam
1704,,,298,16,,4558,7.261505365,0
1705,,,292,15,,5050,8.06005224,0
1706,,,290,12,,3382,5.188492926,0
1707,,,790,14,,4837,9.945795997,0
1708,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int pos = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                pos += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,sum:pos,ret:arg,",2190,3.141234469,Beam
1709,,,344,15,,5321,8.450779529,0
1710,,,308,12,,1396,2.459050079,0
1711,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.931819463,Beam
1712,,,272,16,,6010,8.101722074,0
1713,,,460,16,,5302,9.575003688,0
1714,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.734626408,Beam
1715,,,290,12,,3692,5.516626978,0
1716,,,735,24,,11325,17.46616317,0
1717,,,367,20,,5645,8.641921135,0
1718,,,290,12,,3386,5.279807532,0
1719,,,479,25,,8150,13.26133343,0
1720,,,393,16,,5290,8.410111419,0
1721,,,263,13,,4434,7.08866597,0
1722,,,406,17,,5255,9.884630553,0
1723,,,358,18,,6612,9.590761034,0
1725,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",467,0.721943442,Beam
1727,,,295,16,,5303,7.904262801,0
1728,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.786780167,Beam
1729,,,256,13,,4079,6.244230314,0
1730,,,256,13,,3028,5.231949393,0
1731,,,134,9,,1892,2.224926094,0
1732,,,366,17,,6139,9.453010952,0
1733,,,328,16,,5240,8.767309058,0
1734,,,211,11,,2791,4.002233748,0
1735,,,255,13,,2884,6.268498826,0
1737,,,184,9,,2110,3.209960647,0
1738,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5056,8.5056066,Beam
1739,,,419,16,,6077,10.46579954,0
1740,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1459,2.198119013,Beam
1741,,,156,10,,2233,2.375148396,0
1742,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ansalt += datas[el];
                else
                    ansalt += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ansalt,",4256,6.81641442,Beam
1743,,,317,12,,3373,5.434814823,0
1744,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,5.934590391,Beam
1745,,,156,10,,2186,2.613890851,0
1747,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",467,0.76461854,Beam
1748,,,443,17,,5014,9.501447785,0
1750,,,371,12,,3412,5.809399935,0
1751,,,399,18,,6263,11.02124642,0
1752,,,448,16,,4571,8.597539469,0
1753,,,448,16,,4137,7.456303887,0
1754,,,309,11,,2202,3.376809029,0
1756,,,260,11,,2513,4.116066615,0
1757,,,426,18,,3374,6.206391684,0
1758,,,224,11,,3070,5.068270342,0
1760,,,278,15,,5214,7.717279855,0
1761,,,464,17,,5296,9.325896307,0
1762,,,265,12,,3695,5.559667087,0
1763,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.675129112,Beam
1765,,,132,9,,1921,2.043296798,0
1766,,,278,11,,2740,4.160694774,0
1767,,,375,12,,3399,5.490343368,0
1768,,,790,14,,4837,9.907688646,0
1769,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.81854161,Beam
1770,,,241,15,,3590,5.578651516,0
1771,,,292,17,,6886,11.06263456,0
1772,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anter = new Scanner(System.in);
        int r = anter.nextInt();
        for(int x = 1; x <= r; ++x){
            int c = anter.nextInt();
            boolean[] losters = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int z = 0; z < c; ++z){
                    int s = anter.nextInt();
                    losters[s-1] = !losters[s-1];
                }
            }
            int use = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(losters[i-1]){
                    ++use;
                    if(use < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:use,soldiers:losters,t:r,scanner:anter,j:z,",1954,2.843721147,Beam
1773,,,406,17,,5322,10.54130128,0
1774,,,265,12,,3387,5.073967095,0
1775,,,360,19,,7029,10.93954763,0
1776,,,790,14,,4837,9.552459868,0
1777,,,285,14,,4837,7.597148792,0
1778,,,291,12,,3721,6.148839056,0
1779,,,273,11,,2719,4.251511105,0
1780,,,317,14,,4837,7.618214587,0
1781,,,291,15,,3986,6.141702422,0
1782,,,306,16,,5240,8.532976675,0
1783,,,295,16,,5302,8.421909352,0
1784,,,305,15,,5232,8.693004429,0
1785,,,655,16,,2123,6.613319985,0
1786,,,269,13,,4049,7.012617695,0
1787,,,256,13,,4055,6.446862272,0
1788,,,790,14,,4837,9.899531003,0
1789,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.503630447,Beam
1790,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.752515999,Beam
1791,,,417,19,,6916,11.83358867,0
1792,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner analyer = new Scanner(System.in);
        int rt = analyer.nextInt();
        for(int x = 1; x <= rt; ++x){
            int w = analyer.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = analyer.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int weight = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++weight;
                    if(weight < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:weight,scanner:analyer,t:rt,soldiers:wars,",1613,2.372324395,Beam
1794,,,250,11,,2792,4.430380825,0
1795,,,272,16,,6010,7.686837542,0
1796,,,285,14,,5209,7.860705551,0
1797,,,305,15,,5180,8.01495984,0
1799,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String put = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner bc = new Scanner(new FileReader(include));
            PrintWriter spwh = new PrintWriter(put);

            int ns = bc.nextInt();
            bc.nextLine();
            for (int b = 0; b < ns; b++) {
                System.out.println(""Test case "" + (b + 1) + ""..."");
                spwh.print(""Case #"" + (b + 1) + "": "");
                int rev = bc.nextInt();
                int nOnce = bc.nextInt();
                int n01 = bc.nextInt();
                System.out.println(rev+"" ""+nOnce+"" ""+n01);
                int loadLine =rev*(nOnce/n01);
                        int foundPort=0;
                        if(nOnce%n01==0)
                            foundPort = n01-1;
                        else
                            foundPort = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+foundPort);
                
                
                int rev = loadLine+foundPort;
                
                System.out.println(rev);
                spwh.print(rev);
                spwh.println();
            }
            spwh.println();
            spwh.flush();
            spwh.close();
            bc.close();
        } catch (FileNotFoundException se) {
            se.printStackTrace();
        } catch (IOException ception) {
            // TODO Auto-generated catch block
            ception.printStackTrace();
        }
    }


}",292,16,"n1:n01,c1:nOnce,r:rev,findShip:foundPort,findRow:loadLine,res:rev,pw:spwh,n:ns,sc:bc,c:b,e:ception,ex:se,output:put,input:include,",3753,6.024690759,Beam
1800,,,256,13,,4044,6.047418157,0
1801,,,262,14,,3132,4.954400647,0
1802,,,325,16,,6077,10.55491771,0
1803,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                sum += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,ret:arg,",1818,2.554661719,Beam
1804,,,344,15,,4896,7.570296367,0
1805,,,211,11,,2791,3.989265958,0
1806,,,306,16,,5240,8.643847378,0
1807,,,132,9,,1696,1.753227182,0
1808,,,406,16,,6077,10.06829413,0
1809,,,349,19,,5340,8.117329228,0
1810,,,553,21,,6178,10.14072142,0
1811,,,405,15,,5240,8.895881462,0
1812,,,386,18,,7422,11.53194358,0
1813,,,418,13,,4093,8.845483804,0
1814,,,271,12,,3169,4.768466032,0
1815,,,240,12,,3576,5.546294483,0
1816,,,132,9,,1663,1.762460903,0
1817,,,790,14,,4837,9.995178111,0
1818,,,306,16,,5054,8.295310616,0
1819,,,448,16,,4141,7.694523283,0
1820,,,256,13,,3064,5.042548426,0
1821,,,393,16,,5292,8.460165576,0
1822,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.591978224,Beam
1823,,,334,15,,5240,9.798955071,0
1824,,,132,9,,1921,2.040574535,0
1825,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.218261675,Beam
1826,,,298,16,,4558,7.145918731,0
1827,,,479,25,,8243,14.83679823,0
1828,,,387,15,,5240,9.247006655,0
1829,,,169,10,,2233,2.740407757,0
1830,,,295,15,,3130,5.130214628,0
1831,,,263,13,,4434,6.949967166,0
1833,,,255,13,,2947,6.100937827,0
1834,,,256,13,,3196,5.474328359,0
1835,,,281,14,,4806,7.869312139,0
1836,,,292,17,,6864,10.67761802,0
1837,,,406,19,,7999,13.673997,0
1838,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.877507246,Beam
1839,,,309,11,,2202,3.40169059,0
1840,,,292,15,,5060,8.201818446,0
1841,,,292,15,,5060,8.20864406,0
1842,,,330,16,,6077,10.90453034,0
1843,,,419,16,,6015,9.600763388,0
1844,,,298,16,,4930,7.510397387,0
1845,,,291,15,,3617,5.557633849,0
1846,,,527,25,,10839,16.07959001,0
1847,,,280,13,,3163,5.104626966,0
1848,,,326,14,,4837,7.962058707,0
1849,,,291,13,,4093,6.318465026,0
1850,,,241,15,,3583,5.653723705,0
1851,,,360,19,,7030,11.07584406,0
1852,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.470474124,Beam
1853,,,371,12,,3380,5.952167865,0
1854,,,443,17,,5014,9.342188676,0
1855,,,443,17,,5014,9.281999473,0
1856,,,317,12,,3371,5.398818854,0
1857,,,399,18,,6263,11.08863222,0
1858,,,500,19,,8851,14.02373918,0
1859,,,240,13,,2426,3.49786251,0
1860,,,269,16,,5923,8.607292457,0
1861,,,406,19,,7999,13.79042826,0
1862,,,426,18,,3529,6.427818875,0
1863,,,340,10,,2097,3.568008709,0
1864,,,527,25,,15780,26.04510141,0
1865,,,271,12,,3153,4.627867166,0
1866,,,420,19,,7084,11.24473727,0
1867,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.604582636,Beam
1868,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String sourcePoint = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] Chi = new char[26];
        for (int in = 0; in < Chi.length; in++) Chi[in] = (char)('A' + in);

        try (Scanner tc = new Scanner(new File(sourcePoint))) {
            int A = tc.nextInt();
            for (int in = 1; in <= A; in++) {
                result.append(""Case #"" + in + "":"");
                int B = tc.nextInt();
                int[] Ti = new int[B];
                int count = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ti[rev] = tc.nextInt();
                    count += Ti[rev];
                    Ti[rev] *= 2;
                }
                while (count > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    count--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ti[rev] > count) {
                            if (v == 0) {
                                result.append(Chi[rev]);
                                Ti[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(Chi[rev]);
                                Ti[rev] -= 2;
                                count--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ti[rev] > 0) {
                                result.append(Chi[0]);
                                Ti[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String inFile = ""answer.out"";
            if (sourcePoint != null && !sourcePoint.equals("""")) {
                inFile = sourcePoint.substring(0, sourcePoint.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(inFile, false)) {
                fos.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"sum:count,j:rev,N:B,flag:v,Pi:Ti,T:A,sc:tc,i:in,answer:result,parties:Chi,filePath:sourcePoint,outPath:inFile,",3376,6.340320071,Beam
1869,,,464,17,,5172,8.953078806,0
1871,,,479,25,,8198,12.82622218,0
1872,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] template={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int ip=0; ip<3; ip++)
            table[ip][0]=""""+template[ip];
        for (int w=0; w<=11; w++)
            for (int ip=0; ip<3; ip++)
            {
                String alpha=table[ip][w], bd=table[(ip+1)%3][w];
                if (alpha.compareTo(bd)<0)
                    table[ip][w+1]=alpha+bd;
                else
                    table[ip][w+1]=bd+alpha;
            }
        
        Scanner in=new Scanner(System.in);
        int numGamesd=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numGamesd; run++)
        {
            int w=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean lock=false;
            for (int ip=0; ip<3; ip++)
            {
                lock=true;
                String title=table[ip][w];
                for (int key=0; key<3; key++)
                    if (title.length()-title.replace(""""+template[key],"""").length()!=count[key])
                        lock=false;
                if (lock)
                {
                    System.out.println(""Case #""+run+"": ""+title);
                    break;
                }
            }
            if (!lock)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}",387,15,"n:w,i:ip,b:bd,let:template,a:alpha,match:lock,j:key,game:title,numRuns:numGamesd,",4527,8.022254252,Beam
1873,,,464,17,,5299,10.0632407,0
1874,,,375,12,,3700,5.812626044,0
1875,,,348,21,,7983,12.07741064,0
1876,,,330,14,,4967,8.424814479,0
1877,,,605,21,,9816,14.49718916,0
1879,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int sw = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=sw) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+sw-1);
    }
    System.out.println(res);
  }
}",187,12,"w:sw,",312,0.362469995,Beam
1880,,,379,17,,6952,11.04497704,0
1881,,,265,12,,3360,5.184164572,0
1883,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] start = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long line = queue.poll();
                
                if (line == W){
                    break;
                }
                
                start[0] = line + 1;
                StringBuilder url = new StringBuilder(Long.toString(line));
                start[1] = Long.parseLong(url.reverse().toString());
                
                for (int ini = 0; ini < 2; ini++){
                    if (!S.contains(start[ini]) && start[ini] <= W && start[ini] > line){
                        queue.add(start[ini]);
                        S.add(start[ini]);
                        distance.put(start[ini], distance.get(line) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:line,i:ini,builder:url,next:start,",2282,3.90228014,Beam
1884,,,325,14,,4801,7.688223855,0
1885,,,306,13,,2946,5.02764289,0
1886,,,306,16,,5302,8.633386211,0
1887,,,479,25,,8289,14.82285611,0
1888,,,240,12,,3685,5.800931736,0
1889,,,281,14,,4806,7.884482018,0
1890,,,386,18,,7419,11.46710869,0
1892,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4763,7.263068716,Beam
1893,,,386,18,,7404,11.47621259,0
1894,"class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        out = new PrintWriter(new File(save));
        int T = in.nextInt();
        for (int t = 1; t <= T; t++) {
            out.print(""Case #"" + t + "": "");
            System.out.println(""Case #"" + t + "": ............"");
            A r = new A();
            int R = A.in.nextInt();
            int C = A.in.nextInt();
            int W = A.in.nextInt();
            if (R == 1) {
                int result = (C-W)/W + W + (C%W>0?1:0);
                A.out.println(result);
            } else
                A.out.println(0);
        }
        out.close();
    }

    static Scanner in;
    static PrintWriter out;
}","class A {

    /*************************************************************************/

    public static void main(String[] args) throws Exception {
        String load = ""src/a-small-attempt1.in"";
        String save = ""src/a-small-attempt1.out"";
        in = new Scanner(new File(load));
        w = new PrintWriter(new File(save));
        int N = in.nextInt();
        for (int tf = 1; tf <= N; tf++) {
            w.print(""Case #"" + tf + "": "");
            System.w.println(""Case #"" + tf + "": ............"");
            A r = new A();
            int A = A.in.nextInt();
            int N = A.in.nextInt();
            int N = A.in.nextInt();
            if (A == 1) {
                int section = (N-N)/N + N + (N%N>0?1:0);
                A.w.println(section);
            } else
                A.w.println(0);
        }
        w.close();
    }

    static Scanner in;
    static PrintWriter w;
}",208,12,"W:N,C:N,T:N,result:section,R:A,t:tf,out:w,",1459,2.275691219,Beam
1895,,,291,12,,3411,5.577144849,0
1896,,,321,13,,4434,7.573692858,0
1897,,,290,12,,3692,5.9793709,0
1898,,,211,11,,3070,4.403589563,0
1899,,,305,15,,5176,7.951789665,0
1900,,,321,18,,6846,9.758986712,0
1901,,,887,27,,6962,12.32569306,0
1902,,,513,26,,17536,28.74159722,0
1903,,,295,15,,3491,5.640101631,0
1904,,,420,19,,7084,11.17306418,0
1905,,,379,17,,6940,11.29981368,0
1906,,,265,12,,3697,5.870571061,0
1907,,,328,16,,5302,8.956680163,0
1908,,,735,24,,11274,17.17915567,0
1909,,,254,13,,3820,5.59280926,0
1911,,,290,12,,3691,6.081693212,0
1912,,,262,14,,3132,5.059167488,0
1913,,,735,24,,10049,15.94725583,0
1914,,,269,16,,5886,8.274102946,0
1915,,,278,11,,3044,4.574161688,0
1916,,,353,16,,5302,9.344613496,0
1917,,,443,17,,5236,8.852699602,0
1918,,,256,13,,3394,5.763030938,0
1919,,,399,18,,6263,10.94409357,0
1920,,,328,16,,5240,8.755204407,0
1921,,,240,13,,2426,3.632028715,0
1922,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String include = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String write = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner mc = new Scanner(new FileReader(include));
            PrintWriter spwh = new PrintWriter(write);

            int ns = mc.nextInt();
            mc.nextLine();
            for (int b = 0; b < ns; b++) {
                System.out.println(""Test case "" + (b + 1) + ""..."");
                spwh.print(""Case #"" + (b + 1) + "": "");
                int rev = mc.nextInt();
                int nOnce = mc.nextInt();
                int n01 = mc.nextInt();
                System.out.println(rev+"" ""+nOnce+"" ""+n01);
                int loadLine =rev*(nOnce/n01);
                        int foundPort=0;
                        if(nOnce%n01==0)
                            foundPort = n01-1;
                        else
                            foundPort = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+loadLine+"" findShip: ""+foundPort);
                
                
                int rev = loadLine+foundPort;
                
                System.out.println(rev);
                spwh.print(rev);
                spwh.println();
            }
            spwh.println();
            spwh.flush();
            spwh.close();
            mc.close();
        } catch (FileNotFoundException se) {
            se.printStackTrace();
        } catch (IOException ception) {
            // TODO Auto-generated catch block
            ception.printStackTrace();
        }
    }


}",292,16,"n1:n01,c1:nOnce,r:rev,findShip:foundPort,findRow:loadLine,res:rev,pw:spwh,n:ns,sc:mc,c:b,e:ception,ex:se,output:write,input:include,",3752,6.205137134,Beam
1923,,,240,13,,2184,3.286128521,0
1924,,,460,16,,5302,9.911983025,0
1925,,,184,9,,1706,2.739287078,0
1926,,,655,16,,2141,4.547876215,0
1927,,,306,16,,5612,9.444883267,0
1928,,,420,19,,7084,11.46740928,0
1929,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.717528601,Beam
1930,,,525,23,,13539,21.2763196,0
1931,,,321,18,,6013,8.755904488,0
1932,,,290,12,,3692,5.508006974,0
1933,,,513,26,,17419,28.75851457,0
1934,,,285,14,,4837,7.392752055,0
1935,,,257,11,,2791,4.495099521,0
1936,,,334,15,,5240,9.249653113,0
1937,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner ins = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = ins.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = ins.nextInt();
      int i = ins.nextInt();
      int k = ins.nextInt();
      int score = i/k*(r - 1);
      score += (int)Math.ceil((double)i/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    ins.close();
  }
}",156,10,"w:k,c:i,in:ins,",776,0.83121647,Beam
1939,,,328,16,,5241,8.752009519,0
1940,,,348,14,,3548,6.129105326,0
1941,,,208,12,,2064,3.074094224,0
1942,,,171,10,,2419,3.307065038,0
1943,,,358,16,,5302,8.845647156,0
1944,,,291,13,,4093,6.534394356,0
1945,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int Test;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (Test=0;Test<w;Test++) m[Test]=reader.nextLong();
            long result=0; res=0;
            for (Test=1;Test<w;Test++){
                if (m[Test-1]>m[Test]) res+=(m[Test-1]-m[Test]);
                result=Math.max(result,m[Test-1]-m[Test]);
            }
            a=new long [w+2];
            res=result*w*w; 
            long ns,h=0,w=result*w*w,id;
            while(h<=w){
                id=(h+w)/2;
                ns=0;
                for (Test=1;Test<w;Test++){
                    if (m[Test-1]>=id)ns+=id;
                    else ns+=m[Test-1];
                    if (m[Test-1]-id>m[Test]) break;
                }
                if (Test==w){
                    res=Math.min(ns,res);
                    w=id-1;
                }else{
                    h=id+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res);
        }
    }
    
}",393,19,"n:w,maxrate:result,rate:id,r:w,res1:res,l:h,i:Test,rs:ns,res2:res,",5410,3.651097922,Beam
1947,,,348,14,,3822,6.515512904,0
1948,,,619,14,,4293,6.8546754,0
1949,,,292,16,,4527,6.707111553,0
1950,,,406,17,,5322,10.07770892,0
1951,,,187,13,,2248,2.68556699,0
1952,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String baseRoot = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] Chi = new char[26];
        for (int v = 0; v < Chi.length; v++) Chi[v] = (char)('A' + v);

        try (Scanner tc = new Scanner(new File(baseRoot))) {
            int A = tc.nextInt();
            for (int v = 1; v <= A; v++) {
                result.append(""Case #"" + v + "":"");
                int B = tc.nextInt();
                int[] Ki = new int[B];
                int use = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ki[rev] = tc.nextInt();
                    use += Ki[rev];
                    Ki[rev] *= 2;
                }
                while (use > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    use--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ki[rev] > use) {
                            if (v == 0) {
                                result.append(Chi[rev]);
                                Ki[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(Chi[rev]);
                                Ki[rev] -= 2;
                                use--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ki[rev] > 0) {
                                result.append(Chi[0]);
                                Ki[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String wordFile = ""answer.out"";
            if (baseRoot != null && !baseRoot.equals("""")) {
                wordFile = baseRoot.substring(0, baseRoot.length() - 2) + ""out"";
            }
            try (FileOutputStream foses = new FileOutputStream(wordFile, false)) {
                foses.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception ae) {
            ae.printStackTrace();
        }
    }
}",448,16,"sum:use,j:rev,N:B,flag:v,Pi:Ki,T:A,i:v,sc:tc,answer:result,parties:Chi,filePath:baseRoot,e:ae,outPath:wordFile,fos:foses,",3736,7.013913413,Beam
1953,,,479,25,,8240,13.79946707,0
1954,,,358,16,,5302,8.753360089,0
1955,,,479,25,,8180,13.35863256,0
1956,,,358,18,,6640,9.517210885,0
1957,,,418,13,,4093,8.237365671,0
1958,,,478,22,,11630,18.15310698,0
1959,,,500,19,,8846,13.98441552,0
1960,,,306,16,,5240,8.673371569,0
1961,,,257,11,,3008,4.924027042,0
1962,,,393,16,,5290,8.370133098,0
1963,,,500,19,,8856,14.0530644,0
1964,,,254,13,,4118,6.303045654,0
1965,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.710470156,Beam
1966,,,572,15,,5217,10.22764856,0
1967,,,358,16,,5302,8.716769954,0
1968,,,443,17,,5218,9.214627028,0
1971,,,344,15,,4898,7.482108072,0
1972,,,240,12,,3613,5.539425687,0
1973,,,420,19,,7084,11.30526789,0
1974,,,305,15,,5236,8.469623121,0
1975,,,250,11,,3070,4.924279686,0
1976,,,278,11,,3017,4.587830011,0
1977,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.356892371,Beam
1978,,,256,13,,2935,5.08121649,0
1980,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4400,9.500421238,Beam
1981,,,262,14,,3132,4.944784498,0
1982,,,311,17,,6662,10.32451404,0
1983,,,295,15,,3491,5.832798556,0
1984,,,303,12,,2777,5.019927589,0
1985,,,306,16,,5302,8.901759466,0
1986,,,334,15,,5240,9.893706636,0
1987,,,290,12,,3692,5.480920931,0
1988,,,500,19,,8865,14.15603801,0
1989,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.080464451,Beam
1990,,,328,16,,5302,9.343934604,0
1991,,,262,14,,3132,4.921958439,0
1992,,,260,11,,2512,3.887318114,0
1993,,,273,11,,2742,4.587320574,0
1994,,,200,10,,2233,2.779095769,0
1995,,,262,14,,3132,5.356451654,0
1996,,,443,17,,5128,9.105485427,0
1997,,,311,17,,6662,10.23277597,0
1998,,,200,10,,2481,3.171431863,0
1999,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] start = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long line = queue.poll();
                
                if (line == W){
                    break;
                }
                
                start[0] = line + 1;
                StringBuilder url = new StringBuilder(Long.toString(line));
                start[1] = Long.parseLong(url.reverse().toString());
                
                for (int ini = 0; ini < 2; ini++){
                    if (!S.contains(start[ini]) && start[ini] <= W && start[ini] > line){
                        queue.add(start[ini]);
                        S.add(start[ini]);
                        distance.put(start[ini], distance.get(line) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:line,i:ini,builder:url,next:start,",2281,3.889393914,Beam
2000,,,363,16,,6077,9.768369794,0
2001,,,255,13,,2915,6.376510692,0
2002,,,418,13,,3969,8.16473157,0
2003,,,358,18,,6594,9.771920983,0
2004,,,208,12,,2064,3.085958703,0
2005,,,256,13,,3152,5.399305411,0
2006,,,200,10,,2481,3.094584517,0
2007,,,298,16,,4992,8.251859792,0
2008,,,256,13,,3064,5.233112709,0
2009,,,273,11,,3046,5.030520447,0
2010,,,478,22,,11637,18.21163306,0
2011,,,406,16,,6077,10.09634729,0
2012,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.734712895,Beam
2013,,,363,16,,6077,9.757019929,0
2014,,,618,26,,10884,18.38594715,0
2015,,,290,12,,3386,5.497817461,0
2016,,,142,11,,2751,3.905095017,0
2018,,,426,18,,3314,6.133264184,0
2019,,,790,14,,4837,10.26332373,0
2020,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.777013199,Beam
2021,,,358,16,,5302,8.716864181,0
2022,,,306,16,,5240,8.609676464,0
2023,,,290,12,,3691,5.904962734,0
2024,,,393,16,,5282,8.957441088,0
2025,,,386,18,,7365,11.5970256,0
2026,,,443,17,,5014,9.36169517,0
2027,,,406,19,,7999,13.68283074,0
2028,,,208,12,,2313,3.296398751,0
2029,,,358,18,,6574,10.00162514,0
2030,,,406,19,,7999,13.45544541,0
2031,,,278,15,,5174,7.614857674,0
2032,,,328,16,,5240,8.728144924,0
2034,,,308,12,,1645,2.907060401,0
2035,,,236,16,,4403,6.705754614,0
2036,,,790,14,,4837,9.850830078,0
2037,,,256,13,,3033,5.228484933,0
2039,,,479,25,,8204,13.37559416,0
2040,,,399,18,,6263,11.23394225,0
2041,,,443,17,,5014,9.48245819,0
2042,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.72106806,Beam
2043,,,358,18,,6614,10.1163852,0
2044,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.613807754,Beam
2045,,,308,12,,1613,2.819928741,0
2046,,,305,15,,5232,8.673630361,0
2047,,,790,14,,4837,9.778413141,0
2049,,,790,14,,4838,10.21137743,0
2050,,,572,15,,5215,10.95067192,0
2051,,,348,21,,7967,12.31334532,0
2052,,,256,13,,3064,5.265688399,0
2053,,,478,22,,11666,19.34829169,0
2054,,,269,13,,3959,6.51447204,0
2055,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdic, s1, s2, r10;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdic = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdic = Math.max(cur - m[i], maxdic);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdic / 10;
            
            r10 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,maxdif:maxdic,",1117,1.826788402,Beam
2056,,,419,16,,6077,10.27820495,0
2057,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.766725397,Beam
2058,,,311,17,,6331,10.22483264,0
2059,,,355,19,,6479,9.569262818,0
2060,,,386,18,,7419,11.54705826,0
2061,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int sw = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[sw] = sw + r - 1;
                for(int j = sw + 1; j <= 2*sw - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = sw+1 + r-1;
                }
                for(int j = 2*sw; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-sw] + r, sw + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:sw,",310,0.456642977,Beam
2062,,,358,18,,6594,9.857849189,0
2063,,,254,13,,3835,5.689223286,0
2064,,,255,13,,2853,6.200416986,0
2065,,,348,21,,7960,12.3425692,0
2066,,,254,13,,4136,6.330674279,0
2067,,,368,14,,5209,9.012338154,0
2068,,,256,13,,4074,6.152319026,0
2069,,,265,12,,3389,5.304477545,0
2070,,,393,16,,5290,8.753478678,0
2071,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                sum += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,ret:arg,",1818,2.60741814,Beam
2072,,,302,15,,2574,3.76425695,0
2073,,,525,23,,13536,21.48453573,0
2074,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader yr = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream ls = new BufferedOutputStream(System.out);
        String bo = System.getProperty(""line.separator"");
        byte[] eobb = bo.getBytes();
        try {
            String char = yr.readLine();
            int g = Integer.parseInt(char);
            for(int i = 0 ; i < g ; i++) {
                char = yr.readLine();
                int k = Integer.parseInt(char);
                char = yr.readLine();
                StringTokenizer est = new StringTokenizer(char,"" "");
                int [] or = new int[k];
                int inter = 0;
                while(est.hasMoreTokens()) {
                    or[inter++] = Integer.parseInt(est.nextToken());
                }
                int ANSYY = 0;
                int anJ = 0;
                int z = 0;
                for(int jj = 0 ; jj < k-1 ; jj++) {
                    z = Math.max(z,or[jj]-or[jj+1]);
                    if(or[jj+1]<or[jj]) {
                        ANSYY += or[jj]-or[jj+1];
                    }
                }
                for(int jj = 0 ; jj < k-1 ; jj++) {
                    int g = Math.min(or[jj],z);
                    anJ += g;
                }
                ls.write(""Case #"".getBytes());
                ls.write(new Integer(i+1).toString().getBytes());
                ls.write("": "".getBytes());
                ls.write(new Integer(ANSYY).toString().getBytes());
                ls.write("" "".getBytes());
                ls.write(new Integer(anJ).toString().getBytes());
                ls.write(eobb);
            }
            ls.flush();
        } catch(IOException oe) {
            oe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,j:jj,ar:or,ansY:ANSYY,dip:z,x:g,ansZ:anJ,st:est,br:yr,iter:inter,bos:ls,eolb:eobb,ioe:oe,eol:bo,",7056,3.14728539,Beam
2075,,,306,16,,5302,8.909640674,0
2076,,,302,15,,3008,4.467386429,0
2077,,,443,17,,5205,9.189309839,0
2078,,,262,14,,3101,5.330054557,0
2079,,,302,13,,3767,6.153929297,0
2080,,,269,16,,5913,8.885323115,0
2081,,,406,19,,7999,13.59855086,0
2082,,,265,12,,3389,5.031814543,0
2083,,,406,19,,7937,13.42787604,0
2084,,,273,11,,2739,4.495529083,0
2085,,,544,17,,6001,11.91379504,0
2086,,,327,16,,3903,6.267582309,0
2087,,,290,12,,3691,5.694756571,0
2088,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader row = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(row.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            row.readLine();
            String char[] = row.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int u0=Integer.parseInt(char[i+1]);
                int i16 = Integer.parseInt(char[i]);
                if((u0-i16)<0) result1+=-(u0-i16);
                if(-(u0-i16)>k) k = -(u0-i16);
            }
            for(int i = 0; i<char.length-1;i++){
                int i16 = Integer.parseInt(char[i]);
                if(i16>=k) result2 = result2+k;
                else if(i16<k) result2 = result2+i16;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        row.close();
        writer.close();

    }

}",316,15,"max:k,str:char,i2:u0,i1:i16,reader:row,",2033,3.546667186,Beam
2089,,,420,19,,7084,11.63838313,0
2090,,,423,7,,853,1.390526843,0
2091,,,443,17,,5318,9.479007796,0
2092,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.48452541,Beam
2093,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int X = sc.nextInt();
            for (int ti = 0; ti < X; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:X,",506,1.047986988,Beam
2094,,,256,13,,3303,5.505492624,0
2095,,,464,17,,5296,9.744994835,0
2096,,,544,17,,6018,11.87734616,0
2097,,,263,13,,4093,6.424802264,0
2098,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.824155454,Beam
2099,,,500,19,,8795,14.09746221,0
2100,,,479,25,,8242,13.75566595,0
2101,,,328,16,,5240,8.666008631,0
2102,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.75376637,Beam
2103,,,295,15,,3130,5.163249906,0
2104,,,292,17,,6691,10.37320724,0
2105,,,256,13,,3152,5.421900392,0
2106,,,260,13,,4434,6.692319079,0
2107,,,281,14,,4837,7.587656963,0
2108,,,443,17,,5205,9.329283198,0
2109,,,419,16,,6077,10.1806464,0
2110,,,419,16,,6015,10.58395561,0
2111,,,256,13,,4073,6.069751263,0
2112,,,619,14,,4333,7.072271625,0
2113,,,417,18,,4248,7.581561716,0
2114,,,406,17,,5245,9.862765205,0
2115,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    result    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + result);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:result,",1086,1.498569691,Beam
2116,,,295,15,,3429,5.740412835,0
2117,,,211,11,,3070,4.391211534,0
2118,,,132,9,,1696,1.805882724,0
2119,,,257,11,,2791,4.482892509,0
2120,,,500,19,,8657,13.72483056,0
2121,,,306,16,,5240,8.725448998,0
2122,,,265,12,,3695,5.562446547,0
2123,,,266,13,,4041,6.411455921,0
2124,,,500,19,,8673,13.93669479,0
2125,,,464,17,,5358,10.50502605,0
2126,,,344,15,,4894,7.563685946,0
2127,,,292,17,,6805,10.71824178,0
2128,,,292,15,,5341,8.628409505,0
2129,,,525,23,,13521,20.9454503,0
2130,,,468,20,,9000,15.27298457,0
2131,,,317,12,,3379,5.286876134,0
2132,,,334,15,,5240,9.377364441,0
2133,,,419,16,,6015,10.34721924,0
2134,,,265,12,,3352,5.245636729,0
2135,,,348,14,,3498,5.92994647,0
2136,,,326,14,,5147,8.513086383,0
2137,,,325,16,,6077,10.5691159,0
2138,,,366,17,,6139,9.315279706,0
2139,,,309,11,,2202,3.457976063,0
2140,,,184,9,,1706,2.62592274,0
2141,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.357450255,Beam
2142,,,292,17,,6744,10.06913383,0
2143,,,263,13,,4434,6.574195433,0
2144,,,328,16,,5271,8.808444293,0
2145,,,262,14,,3132,4.780848249,0
2146,,,292,16,,4527,7.052316797,0
2147,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.903052096,Beam
2148,"class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int r = Integer.parseInt(next[0]);
            int c = Integer.parseInt(next[1]);
            int w = Integer.parseInt(next[2]);
            
            int row = (c - w) / w;
            if (c % w == 0) row += w;
            else row += w + 1;
            
            res = r*row;
            
            System.out.format(""Case #%d: %d\n"", i, res);
        }
    }
}","class A {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new  BufferedReader(new InputStreamReader(System.in));
        
        int t = Integer.parseInt(in.readLine());
        
        for (int i = 1; i <= t; i++) {
            int res = 0;
            // body of the program
            
            String[] next = in.readLine().split("" "");
            int m = Integer.parseInt(next[0]);
            int m = Integer.parseInt(next[1]);
            int rec = Integer.parseInt(next[2]);
            
            int diff = (m - rec) / rec;
            if (m % rec == 0) diff += rec;
            else diff += rec + 1;
            
            res = m*diff;
            
            System.out.format(""Case #%d: %d
"", i, res);
        }
    }
}",172,11,"row:diff,w:rec,c:m,r:m,",1365,1.8409929,Beam
2149,,,572,15,,5157,9.613273199,0
2150,,,149,10,,2202,2.5600945,0
2151,,,240,12,,3321,5.226152452,0
2152,,,269,13,,4049,6.99925853,0
2153,,,278,11,,2771,4.133006907,0
2154,,,250,11,,3070,4.963532253,0
2155,,,327,16,,3903,6.226514137,0
2156,,,443,17,,5236,9.01228654,0
2157,,,344,15,,4894,7.56202724,0
2158,,,269,16,,5923,8.816992978,0
2159,,,327,16,,3902,6.156973839,0
2160,,,208,12,,2064,3.075323733,0
2161,,,198,10,,2389,3.841509922,0
2162,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.72159729,Beam
2163,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int it = 1; it <= t; it++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int w = 0;
            for (int pi = 1; pi < n; pi++) {
                m[pi] = sc.nextInt();
                int field = Math.w(0, m[pi - 1] - m[pi]);
                w = Math.w(w, field);
                sum += field;
            }

            int arg = 0;
            for (int pi = 1; pi < n; pi++) {
                arg += Math.min(m[pi- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,casei:it,i:pi,ret:arg,",1818,2.581198196,Beam
2164,,,292,15,,5050,8.23279771,0
2165,,,278,15,,5213,7.573268259,0
2166,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ansalt = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ansalt += datas[el];
                else
                    ansalt += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ansalt));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ansalt,",4256,6.856407289,Beam
2167,,,426,18,,3529,6.536514604,0
2168,,,246,15,,4810,6.759207825,0
2169,,,290,12,,3690,5.77224133,0
2170,,,302,15,,2605,3.831315339,0
2171,,,500,19,,8827,13.61142142,0
2172,,,479,25,,8224,13.40910444,0
2173,,,171,10,,2233,3.121175178,0
2174,,,278,11,,2740,4.158277492,0
2176,,,132,9,,1634,1.763090527,0
2177,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    annIn    = new Scanner(System.in);
        
        int T    = annIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = annIn.nextInt();
            int        s    = annIn.nextInt();
            int        k    = annIn.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    res    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + res);
        }
        
        annIn.close();
    }
}",171,10,"w:k,c:s,scanIn:annIn,ret:res,",1086,1.49228646,Beam
2178,,,257,11,,3070,4.918143304,0
2179,,,517,26,,12259,21.18910581,0
2180,,,266,13,,4351,6.768135401,0
2181,,,303,12,,3069,5.013097874,0
2182,,,295,15,,3389,5.737582457,0
2183,,,443,17,,5014,9.473660505,0
2184,,,281,14,,4806,7.706509511,0
2185,,,478,22,,11914,18.16620484,0
2186,,,358,16,,5302,8.816565537,0
2188,,,262,14,,3102,4.826865975,0
2189,,,272,16,,5509,6.987197677,0
2190,,,273,11,,2719,4.294530014,0
2191,,,553,21,,6310,10.80935899,0
2192,,,517,26,,13027,23.62939678,0
2193,,,269,16,,5916,8.900042101,0
2194,,,262,14,,3132,4.78133717,0
2195,,,328,16,,5271,8.700371071,0
2196,,,305,15,,5228,8.218136251,0
2197,,,417,18,,3845,6.859060971,0
2198,,,572,15,,5220,9.73761423,0
2199,,,246,15,,4840,7.428159706,0
2200,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.037518561,Beam
2201,,,311,17,,6235,9.530739613,0
2202,,,265,12,,3697,5.863150438,0
2203,,,358,18,,6624,9.591069889,0
2204,,,306,13,,2946,5.766985544,0
2205,,,326,14,,4837,7.9681228,0
2206,,,324,13,,4372,7.144545249,0
2208,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int work = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=work) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+work-1);
    }
    System.out.println(res);
  }
}",187,12,"w:work,",312,0.373016779,Beam
2209,,,358,18,,6566,9.913499324,0
2210,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,5.844714864,Beam
2211,,,169,10,,2233,2.79197518,0
2212,,,572,15,,5217,10.35731314,0
2213,,,790,14,,4837,10.06013524,0
2214,,,605,21,,10323,15.11706384,0
2215,,,460,16,,5302,10.46647673,0
2216,,,311,17,,6533,9.808253853,0
2217,,,302,15,,2636,3.824334788,0
2218,,,345,16,,5980,8.97957898,0
2219,,,257,11,,2791,4.696490264,0
2220,,,420,19,,7084,11.41509722,0
2221,,,306,13,,2915,5.543175618,0
2222,,,517,26,,11982,20.80697968,0
2223,,,321,18,,6968,11.41094768,0
2224,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.714761678,Beam
2225,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int sw = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[sw] = sw + r - 1;
                for(int j = sw + 1; j <= 2*sw - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = sw+1 + r-1;
                }
                for(int j = 2*sw; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-sw] + r, sw + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:sw,",310,0.460375277,Beam
2226,,,240,12,,3685,5.710660168,0
2227,,,348,14,,3492,5.886502898,0
2228,,,306,13,,2946,5.793243059,0
2229,,,265,12,,3695,5.580874006,0
2230,,,198,10,,2411,4.07315679,0
2231,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1117,1.7790977,Beam
2232,,,358,18,,6566,9.909846262,0
2233,,,393,16,,5224,8.145609816,0
2234,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] template={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int ip=0; ip<3; ip++)
            table[ip][0]=""""+template[ip];
        for (int w=0; w<=11; w++)
            for (int ip=0; ip<3; ip++)
            {
                String alpha=table[ip][w], bd=table[(ip+1)%3][w];
                if (alpha.compareTo(bd)<0)
                    table[ip][w+1]=alpha+bd;
                else
                    table[ip][w+1]=bd+alpha;
            }
        
        Scanner in=new Scanner(System.in);
        int numGamesd=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numGamesd; run++)
        {
            int w=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean lock=false;
            for (int ip=0; ip<3; ip++)
            {
                lock=true;
                String season=table[ip][w];
                for (int key=0; key<3; key++)
                    if (season.length()-season.replace(""""+template[key],"""").length()!=count[key])
                        lock=false;
                if (lock)
                {
                    System.out.println(""Case #""+run+"": ""+season);
                    break;
                }
            }
            if (!lock)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}",387,15,"n:w,i:ip,b:bd,let:template,a:alpha,match:lock,j:key,game:season,numRuns:numGamesd,",4372,7.737295012,Beam
2235,,,169,10,,2202,2.676286054,0
2237,,,260,11,,2513,3.824977251,0
2238,,,525,23,,13329,21.11761707,0
2239,,,169,10,,2233,2.75311964,0
2240,,,200,10,,2233,2.93163722,0
2241,,,328,16,,5240,8.673285739,0
2242,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,6.796556667,Beam
2243,,,200,10,,2202,2.787390292,0
2244,,,280,13,,3163,4.729841471,0
2245,,,281,14,,4837,6.801656922,0
2246,,,271,12,,3153,4.60306553,0
2248,,,308,12,,1831,3.166568903,0
2249,,,348,14,,3697,6.262297579,0
2250,,,292,15,,5060,8.238195638,0
2251,,,419,16,,6015,10.42428754,0
2252,,,254,13,,4414,6.740673625,0
2253,,,406,19,,7999,13.58296636,0
2254,,,272,16,,5669,7.194827807,0
2255,,,272,16,,5633,7.199944937,0
2256,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int E = in.nextInt();
            int N = in.nextInt();
            int[][] G = new int[E][N];
            for (int ip = 0; ip < E; ip++) {
                String S = in.next();
                for (int v = 0; v < N; v++) {
                    char code = S.charAt(v);
                    if (code == '.')
                        G[ip][v] = EMPOWER;
                    else if (code == '<')
                        G[ip][v] = LEFT;
                    else if (code == '>')
                        G[ip][v] = WRIGHT;
                    else if (code == 'v')
                        G[ip][v] = DIR;
                    else if (code == '^')
                        G[ip][v] = UP;
                }
            }
            int ans = 0;
            for (int rb = 0; rb < E; rb++) {
                for (int code = 0; code < N; code++) {
                    if (G[rb][code] == EMPOWER)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int no = rb + di[d];
                        int nc = code + dc[d];
                        ok[d] = false;
                        while (0 <= no && no < E && 0 <= nc && nc < N) {
                            if (G[no][nc] != EMPOWER) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            no += di[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[rb][code]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] di = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPOWER = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DIR = 3;
    static int WRIGHT = 4;
}",513,26,"C:N,c:code,EMPTY:EMPOWER,j:v,DOWN:DIR,RIGHT:WRIGHT,R:E,nr:no,r:rb,i:ip,dr:di,",10997,8.080049936,Beam
2257,,,265,12,,3360,5.10916419,0
2258,,,306,16,,5240,8.545410796,0
2259,,,290,12,,3692,5.874942764,0
2260,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int w; static long res,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int index;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); m=new long[w];
            for (index=0;index<w;index++) m[index]=reader.nextLong();
            long righttry=0; res=0;
            for (index=1;index<w;index++){
                if (m[index-1]>m[index]) res+=(m[index-1]-m[index]);
                righttry=Math.max(righttry,m[index-1]-m[index]);
            }
            a=new long [w+2];
            res2=righttry*w*w; 
            long res,h=0,w=righttry*w*w,size;
            while(h<=w){
                size=(h+w)/2;
                res=0;
                for (index=1;index<w;index++){
                    if (m[index-1]>=size)res+=size;
                    else res+=m[index-1];
                    if (m[index-1]-size>m[index]) break;
                }
                if (index==w){
                    res2=Math.min(res,res2);
                    w=size-1;
                }else{
                    h=size+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"i:index,n:w,maxrate:righttry,rate:size,r:w,l:h,res1:res,rs:res,",4762,7.322548072,Beam
2261,,,448,16,,4137,7.273768063,0
2262,,,460,16,,5302,9.744628016,0
2264,,,200,10,,2482,3.096231878,0
2265,,,328,16,,5240,8.704012513,0
2266,,,263,13,,4434,7.161539229,0
2267,,,272,16,,5890,7.372303474,0
2268,,,273,11,,2719,4.424054003,0
2269,,,358,18,,6622,9.593892026,0
2270,,,200,10,,2202,2.858219242,0
2271,,,478,22,,11914,18.18815209,0
2272,,,169,10,,2233,2.755913524,0
2273,,,278,15,,5213,7.654511571,0
2275,,,262,14,,3133,5.401500742,0
2276,,,256,13,,4074,6.077851892,0
2277,,,478,22,,11490,19.04203386,0
2278,,,273,11,,2652,4.368281615,0
2279,,,544,17,,6025,11.99417359,0
2280,,,358,16,,5302,8.767420852,0
2281,,,278,11,,2982,4.431302508,0
2282,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.765338198,Beam
2283,,,334,15,,5240,10.08858614,0
2284,,,426,18,,3189,5.889678526,0
2285,,,553,21,,5794,9.68902719,0
2286,,,305,15,,5232,8.830985057,0
2287,,,500,19,,8837,14.11243404,0
2288,,,291,13,,4093,6.534590916,0
2289,,,240,12,,3619,5.701724617,0
2290,,,278,15,,5186,7.771003779,0
2291,,,198,10,,2403,3.786868421,0
2292,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.714061733,Beam
2293,,,406,17,,5322,9.681324172,0
2294,,,278,15,,5189,7.362786543,0
2295,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int start = 0;
            char str = 'A';
            int h = -1;
            char[] labels = new char[n];
            for (int b=0; b < n; b++) {
                p[b] = sc.nextInt();
                start += p[b];
                labels[b] = str;
                str++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<n; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), f1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(' ');
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), f1 = s.pop();
                            sb3.append(f1);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,t:h,ich:str,c3:b,c2:f1,",5059,8.426309299,Beam
2296,,,265,12,,3509,5.246101979,0
2297,,,266,13,,4082,6.738857512,0
2298,,,479,25,,8202,13.47473923,0
2299,,,525,23,,13531,20.89957449,0
2300,,,443,17,,5014,9.506459824,0
2301,,,386,18,,7435,12.1656394,0
2302,,,348,14,,3579,6.170044359,0
2303,,,366,17,,6139,9.765267901,0
2304,,,399,18,,6263,10.85258029,0
2305,,,366,17,,6139,9.632598627,0
2307,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cc = 0; cc < e; cc++) {
                m[cc] = input.nextInt();

            }
            for (int cc = 1; cc < e; cc++) {
                d = m[cc - 1] - m[cc];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cc = 0; cc < e - 1; cc++) {
                if (m[cc] <= w) {
                    z += m[cc];
                }
                if (m[cc] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cc,",467,0.725003521,Beam
2308,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int results = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            results = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(results);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:results,",745,0.912364686,Beam
2309,,,291,13,,4093,6.554442251,0
2310,,,257,11,,2760,4.414103377,0
2311,,,321,13,,4062,6.781823361,0
2312,,,544,17,,5899,11.49294987,0
2313,,,256,13,,3064,5.144857868,0
2314,,,326,14,,4806,7.964107347,0
2315,,,366,17,,6139,9.400698082,0
2316,,,478,22,,11378,18.05923181,0
2317,,,240,12,,3345,5.132836537,0
2318,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.717511137,Beam
2319,,,460,16,,5302,9.718773135,0
2320,,,240,12,,3345,4.798663481,0
2321,,,419,16,,6015,10.05797481,0
2322,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,4.98581502,Beam
2323,,,269,16,,5916,8.924754337,0
2324,"class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter fw = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            int w = scanner.nextInt();
            fw.write(String.format(""Case #%d: %s\n"", t, solve(r, c, w)));
        }
        fw.close();
    }

    private static int solve(int r, int c, int w) {
        int res = ((c - 1) / w + 1) * (r - 1) + w + (c - 1) / w;
        return res;
    }
}","class A {
    private static final String inFile = ""A-small-attempt0 (1).in"";
    private static final String outFile = ""A-out.txt"";

    public static void main(String args[]) throws IOException {
        Scanner scanner = new Scanner(new FileReader(inFile));
        int T = scanner.nextInt();
        FileWriter ww = new FileWriter(outFile);

        for (int t = 1; t <= T; ++t) {
            int r = scanner.nextInt();
            int k = scanner.nextInt();
            int j = scanner.nextInt();
            ww.write(String.format(""Case #%d: %s
"", t, solve(r, c, w)));
        }
        ww.close();
    }

    private static int solve(int r, int k, int j) {
        int res = ((k - 1) / j + 1) * (r - 1) + j + (k - 1) / j;
        return res;
    }
}",187,13,"w:j,c:k,fw:ww,",621,0.756097086,Beam
2325,,,460,16,,5302,9.80549765,0
2326,,,262,14,,3132,5.459509265,0
2327,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sci = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sci.nextInt();
        sci.nextLine();
        for (int key = 1; key <= T; key++)
        {
            int x = sci.nextInt();
            ArrayList<Integer> moneyInterversions = new ArrayList<Integer>();
            for(int chi = 0; chi<x; chi++)
                moneyInterversions.add(sci.nextInt());
            int finalCaseNameAddress = 0;
            int prevent = moneyInterversions.get(0);
            int more = 0;
            int partial = 0;
            int ki = 0;
            for (int chi=1; chi<moneyInterversions.size(); chi++)
            {
                more = moneyInterversions.get(chi);
                
                ki = prevent-more;
                if (ki>0)
                {
                    finalCaseNameAddress+=ki;
                    if (ki>partial)
                        partial = ki;
                }
                
                prevent = moneyInterversions.get(chi);
            }
                
            int finalcase4Count = 0;
            int key = 0;
            
            for (int chi=0; chi<moneyInterversions.size()-1; chi++)
            {
                key = moneyInterversions.get(chi);                    
                if (key-partial<=0)
                {
                    finalcase4Count+=key;
                    key = 0;
                }
                else
                {
                    finalcase4Count+=partial;
                    key -= partial;
                }
            }

            fw.write(""Case #""+key+"": ""+finalCaseNameAddress+"" ""+finalcase4Count+""
"");
        }
        fw.flush();
        fw.close();
        sci.close();
    }
}",330,16,"maximumDifference:partial,difference:ki,total:key,next:more,finalCase1Amount:finalCaseNameAddress,finalCase2Amount:finalcase4Count,i:chi,previous:prevent,caseNum:key,timeIntervals:moneyInterversions,sc:sci,",5488,4.02262156,Beam
2328,,,349,19,,5318,8.16789664,0
2329,,,345,16,,6008,9.268109628,0
2330,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.971414427,Beam
2331,,,258,14,,5023,8.295503175,0
2332,,,393,16,,5282,9.086733699,0
2333,,,544,17,,6024,12.10148275,0
2334,,,321,18,,6939,10.07761871,0
2335,,,500,19,,8659,14.01662583,0
2336,,,544,17,,6031,12.00164495,0
2337,,,605,21,,10245,15.27990043,0
2339,,,266,13,,4072,6.453588096,0
2340,,,271,12,,3153,4.642088894,0
2341,,,393,16,,5300,9.047292586,0
2342,,,265,12,,3699,5.879222167,0
2343,,,358,18,,6566,9.882286147,0
2345,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sci = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sci.nextInt();
        sci.nextLine();
        for (int key = 1; key <= T; key++)
        {
            int x = sci.nextInt();
            ArrayList<Integer> moneyInterversions = new ArrayList<Integer>();
            for(int chi = 0; chi<x; chi++)
                moneyInterversions.add(sci.nextInt());
            int finalCaseNameAddress = 0;
            int prevent = moneyInterversions.get(0);
            int more = 0;
            int partial = 0;
            int ki = 0;
            for (int chi=1; chi<moneyInterversions.size(); chi++)
            {
                more = moneyInterversions.get(chi);
                
                ki = prevent-more;
                if (ki>0)
                {
                    finalCaseNameAddress+=ki;
                    if (ki>partial)
                        partial = ki;
                }
                
                prevent = moneyInterversions.get(chi);
            }
                
            int finalcase4Count = 0;
            int key = 0;
            
            for (int chi=0; chi<moneyInterversions.size()-1; chi++)
            {
                key = moneyInterversions.get(chi);                    
                if (key-partial<=0)
                {
                    finalcase4Count+=key;
                    key = 0;
                }
                else
                {
                    finalcase4Count+=partial;
                    key -= partial;
                }
            }

            fw.write(""Case #""+key+"": ""+finalCaseNameAddress+"" ""+finalcase4Count+""
"");
        }
        fw.flush();
        fw.close();
        sci.close();
    }
}",330,16,"maximumDifference:partial,difference:ki,total:key,next:more,finalCase1Amount:finalCaseNameAddress,finalCase2Amount:finalcase4Count,i:chi,previous:prevent,caseNum:key,timeIntervals:moneyInterversions,sc:sci,",5488,4.031588129,Beam
2346,,,355,19,,6389,9.468561355,0
2347,,,311,17,,6656,10.2439942,0
2348,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner output = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = output.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = output.nextInt();
            int m[] = new int[e];

            for (int co = 0; co < e; co++) {
                m[co] = output.nextInt();

            }
            for (int co = 1; co < e; co++) {
                d = m[co - 1] - m[co];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int co = 0; co < e - 1; co++) {
                if (m[co] <= w) {
                    z += m[co];
                }
                if (m[co] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:co,input:output,",993,1.444038578,Beam
2349,,,345,16,,5988,8.94174792,0
2350,,,291,15,,3639,5.292658508,0
2351,,,500,19,,8665,13.96391144,0
2352,,,344,15,,4894,7.629933536,0
2353,,,273,11,,2711,4.738999927,0
2354,,,464,17,,5175,9.2578076,0
2355,,,292,16,,4124,6.711816744,0
2356,,,273,11,,2739,4.567311279,0
2357,,,393,16,,5286,8.853269811,0
2358,,,250,11,,2791,4.572118278,0
2359,,,321,13,,4434,7.522240889,0
2360,,,295,15,,3130,5.19723231,0
2361,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i0, Integer O72) {
                    if(i0 > O72) return 1;
                    else if(i0 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i0,",2781,2.036442105,Beam
2363,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3643,5.981888874,Beam
2364,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int c = h - k;
                if (c > w)
                    w = c;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:h,j:el,s:k,ans2:ans62,",3642,5.979436143,Beam
2365,,,156,10,,2233,2.547435097,0
2366,,,256,13,,4073,5.922690074,0
2367,,,254,13,,4203,6.380224705,0
2368,,,271,12,,3197,4.792957608,0
2369,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] datas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int el = 0; el < datas.length; el++)
                datas[el] = Integer.parseInt(raw[el]);

            //1
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                if (k < h)
                    ans1 += (h - k);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int el = 0; el < datas.length - 1; el++) {
                int h = datas[el];
                int k = datas[el + 1];
                
                int size = h - k;
                if (size > w)
                    w = size;
            }
            
            for (int el = 0; el < datas.length - 1; el++) {
                if (datas[el] < w)
                    ans62 += datas[el];
                else
                    ans62 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,f:h,n:w,j:el,s:k,c:size,ans2:ans62,",4256,6.977179261,Beam
2370,,,263,13,,4434,7.05673178,0
2371,,,387,15,,5240,8.5949151,0
2372,,,280,13,,3163,4.875352967,0
2373,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.627613958,Beam
2374,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.72979335,Beam
2375,,,406,17,,5322,9.720534925,0
2376,,,479,25,,8231,13.73960629,0
2377,,,255,13,,3194,7.056543676,0
2378,,,443,17,,5014,9.484463684,0
2379,,,366,17,,6139,9.230201002,0
2380,,,443,17,,5552,9.854692141,0
2381,,,302,15,,3008,4.480695732,0
2382,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.610748335,Beam
2383,,,321,18,,6849,9.930442262,0
2384,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(br.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroommNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totalEllatin = 0;
            
            double parentRa = 0;
            int this = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = this;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int newLen = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = newLen;
                if (this > newLen) {
                    totalEllatin += this - newLen;
                    parentRa = new Double(Math.max(parentRa, (this - newLen) / 10.0));
                }
                this = newLen;
            }
            
            double totalEannO = 0;
            this = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int newLen =  coockiesNumbers[depth];
                totalEannO += Math.min(parentRa * 10, this);
                this = newLen;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totalEllatin + "" "" + new Double(totalEannO).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,time:depth,newNum:newLen,current:this,i:s,totalEaten:totalEllatin,totalEatenB:totalEannO,mushroormNumbers:mushroommNumbers,testCases:testTase,",4682,8.902694404,Beam
2385,,,460,16,,5302,9.60792379,0
2386,,,460,16,,5302,9.714238719,0
2387,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i0, Integer O72) {
                    if(i0 > O72) return 1;
                    else if(i0 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i0,",2781,2.033063257,Beam
2388,,,263,13,,4434,7.117652714,0
2389,,,330,14,,4683,7.705422358,0
2390,,,292,17,,6774,10.57243322,0
2391,,,250,11,,3070,5.010885974,0
2392,,,311,17,,6438,9.814892574,0
2393,,,448,16,,4137,7.441699394,0
2394,,,250,11,,2791,4.188337759,0
2395,,,263,13,,4434,6.822453411,0
2396,,,464,17,,5358,10.5110524,0
2397,,,408,17,,5990,10.94952064,0
2398,,,406,16,,5457,9.301076432,0
2399,,,406,17,,5322,10.45303246,0
2400,,,262,14,,3101,4.867290302,0
2401,,,265,12,,3356,5.163713753,0
2403,,,285,14,,4838,7.663245642,0
2404,,,887,27,,6702,14.44466635,0
2405,,,363,16,,6077,9.571102067,0
2406,,,418,13,,4434,9.933508543,0
2407,,,263,13,,4093,6.328979917,0
2408,,,298,16,,4992,8.248528151,0
2409,,,211,11,,3070,4.415609475,0
2410,,,265,12,,3391,5.226088627,0
2411,,,419,16,,6015,10.50755893,0
2412,,,325,16,,5891,9.901339753,0
2413,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r40;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            r40 = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r40,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:r40,",1086,1.770770291,Beam
2414,,,306,16,,5178,8.545682251,0
2415,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pv = new PrintWriter(""OUTPUT.TXT"");
        int K = sc.nextInt();
        int r,i,k,example;
        for(int test=0; test<K; ++test){
            r = sc.nextInt();
            i =sc.nextInt();
            k = sc.nextInt();
            example = i/k;
            example *=r;
            example +=k-1;
            if(i%k > 0)
                example+=1;
            pv.println(""Case #"" + (test+1) + "": "" + example );
        }
        pv.close();
    }
    
}",149,10,"w:k,c:i,rez:example,T:K,t:test,pw:pv,",1644,1.921269298,Beam
2416,,,295,15,,3491,5.83649114,0
2417,,,655,16,,2108,6.686958432,0
2419,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int p = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(p+"" ""+nOne+"" ""+n01);
                int findRow =p*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,r:p,",1118,1.794177099,Beam
2420,,,345,16,,5977,9.048850592,0
2421,,,349,19,,5376,8.570110722,0
2422,,,269,13,,4049,7.084159776,0
2423,,,298,16,,4527,7.221085242,0
2424,,,305,15,,5232,8.72789278,0
2425,,,517,26,,11600,19.94676816,0
2426,,,326,14,,4837,7.954994837,0
2427,,,290,12,,3387,5.271176175,0
2428,,,256,13,,3064,5.119877823,0
2429,,,553,21,,6205,10.46040926,0
2430,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,sum ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        sum=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                sum=Math.sum(sum,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=sum,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:sum,",435,0.707603339,Beam
2431,,,156,10,,2207,2.721778941,0
2432,,,349,19,,5318,7.398995435,0
2433,,,572,15,,5189,9.666803892,0
2434,,,479,25,,8166,13.27889332,0
2435,,,256,13,,3152,5.40937537,0
2436,,,306,16,,5302,8.958495804,0
2437,,,198,10,,2217,3.551768521,0
2438,,,358,16,,5302,8.805252266,0
2439,,,224,11,,2791,4.513297272,0
2440,,,328,16,,5240,8.796501911,0
2441,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int info = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in"").exists())
                    info++;
                info--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? info == 0 ? ""-practice"" : """" : ""-attempt"" + info) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ky = 1; ky <= testCount; ky++) {
                        System.out.printf(""Case #%d: "", ky);
                        System.err.printf(""Case #%d: "", ky);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int i6 = 0; i6 < w; i6++) {
                            chunks[i6] = si.nextInt();
                        }
                        
                        int line = 0;
                        int rest = 0;
                        
                        for (int i4 = 0; i4 < w - 1; i4++) {
                            int dest = chunks[i4] - chunks[i4 + 1];
                            if (dest > 0) {
                                line += dest;
                            }
                        }
                        
                        int[] dest = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            dest[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int rest = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            rest = Math.rest(rest, dest[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            rest += Math.min(rest, chunks[it]);
                        }
                        
                        System.out.printf(""%d %d"", line, rest);
                        System.err.printf(""%d %d"", line, rest);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ky = 1; ky <= testCount; ky++) {
                    System.out.printf(""Case #%d: "", ky);
                    System.err.printf(""Case #%d: "", ky);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int info = 0; info < w; info++) {
                        chunks[info] = si.nextInt();
                    }
                    
                    int line = 0;
                    int rest = 0;
                    
                    for (int info = 0; info < w - 1; info++) {
                        int dest = chunks[info] - chunks[info + 1];
                        if (dest > 0) {
                            line += dest;
                        }
                    }
                    
                    int[] dest = new int[w - 1];
                    for (int info = 0; info < w - 1; info++) {
                        dest[info] = chunks[info] - chunks[info + 1];
                    }
                    int rest = 0;
                    for (int info = 0; info < w - 1; info++) {
                        rest = Math.rest(rest, dest[info]);
                    }
                
                    for (int info = 0; info < w - 1; info++) {
                        rest += Math.min(rest, chunks[info]);
                    }
                    
                    System.out.printf(""%d %d"", line, rest);
                    System.err.printf(""%d %d"", line, rest);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ky = 1; ky <= testCount; ky++) {
                System.out.printf(""Case #%d: "", ky);
                System.err.printf(""Case #%d: "", ky);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int info = 0; info < w; info++) {
                    chunks[info] = si.nextInt();
                }
                
                int line = 0;
                int rest = 0;
                
                for (int info = 0; info < w - 1; info++) {
                    int dest = chunks[info] - chunks[info + 1];
                    if (dest > 0) {
                        line += dest;
                    }
                }
                
                int[] dest = new int[w - 1];
                for (int info = 0; info < w - 1; info++) {
                    dest[info] = chunks[info] - chunks[info + 1];
                }
                int rest = 0;
                for (int info = 0; info < w - 1; info++) {
                    rest = Math.rest(rest, dest[info]);
                }
            
                for (int info = 0; info < w - 1; info++) {
                    rest += Math.min(rest, chunks[info]);
                }
                
                System.out.printf(""%d %d"", line, rest);
                System.err.printf(""%d %d"", line, rest);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ky,diff:dest,mush:chunks,first:line,i:info,i1:i6,testCase:testCount,second:rest,sc:si,i2:it,max:rest,c:w,",4399,9.674183337,Beam
2442,,,260,11,,2512,1.180214926,0
2443,,,306,16,,5302,2.970400842,0
2444,,,316,15,,4793,3.534899501,0
2445,,,325,14,,4791,4.444533861,0
2446,,,236,16,,4434,4.145474962,0
2447,,,418,13,,4434,4.219939605,0
2448,,,348,21,,7849,7.405762386,0
2449,,,790,14,,5209,5.253564076,0
2450,,,292,17,,6958,6.472684085,0
2451,,,282,13,,4046,3.727462184,0
2452,,,790,14,,5209,5.144189294,0
2453,,,240,12,,3393,3.065915179,0
2454,,,265,12,,3379,3.054815026,0
2455,,,479,25,,8246,7.790257502,0
2456,,,790,14,,4837,4.793934751,0
2457,,,475,18,,7937,7.481700985,0
2458,,,311,17,,6278,5.766568629,0
2459,,,271,12,,3475,3.178642098,0
2460,,,418,13,,4093,3.824526731,0
2461,,,371,12,,3721,3.476405958,0
2462,,,479,25,,8224,7.848705769,0
2463,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.437873546,Beam
2464,,,460,16,,5302,5.037331227,0
2465,,,271,12,,3427,3.191514619,0
2466,,,295,15,,3429,3.194165007,0
2467,,,215,12,,3602,3.325532508,0
2468,,,241,15,,3234,3.01444244,0
2469,,,295,15,,2955,2.748385954,0
2470,,,468,20,,8999,8.5297532,0
2471,,,269,13,,3998,3.7772879,0
2472,,,348,14,,3554,3.334925457,0
2473,,,257,11,,3070,2.843292308,0
2474,,,272,16,,5875,5.442178349,0
2475,,,215,12,,3695,3.433714298,0
2476,,,215,12,,3573,3.307532402,0
2477,,,272,16,,5925,5.53687402,0
2478,,,311,17,,6209,5.854461996,0
2480,,,269,16,,5912,5.525750005,0
2481,,,199,10,,1086,0.986192608,0
2482,,,393,16,,5238,4.859296719,0
2483,,,254,13,,4266,3.961869423,0
2484,,,316,15,,4214,3.883989954,0
2485,,,273,11,,2956,2.687330095,0
2486,,,334,12,,3338,3.083243497,0
2487,,,265,12,,3691,3.419225919,0
2488,,,525,23,,12617,12.06658637,0
2489,,,298,16,,4527,4.155714341,0
2490,,,479,25,,8246,7.770998339,0
2491,,,306,16,,5240,4.822836828,0
2492,,,256,13,,3196,2.954930596,0
2493,,,379,17,,6916,6.49590828,0
2494,,,655,16,,2134,2.120517079,0
2495,,,306,13,,2946,2.767410358,0
2496,,,240,12,,3387,3.172886709,0
2497,,,305,15,,5236,4.92917825,0
2498,,,735,24,,9216,9.055903272,0
2499,,,265,12,,3691,3.424910931,0
2500,,,479,25,,8246,7.850463764,0
2501,,,419,16,,6077,5.727077309,0
2502,,,348,21,,7991,7.477452016,0
2503,,,172,11,,2791,2.556942034,0
2504,,,142,11,,2748,2.528991652,0
2505,,,224,11,,2791,2.567847157,0
2506,,,292,17,,6618,6.175758394,0
2507,,,443,17,,5231,4.984383249,0
2508,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int in = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in"").exists())
                    in++;
                in--;
                boolean result = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    result = c != 'y';
                }
                if (result) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner pc = new Scanner(System.in);
                int testCount = pc.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = pc.nextInt();
                    
                    int[] char = new int[w];
                    for (int in = 0; in < w; in++) {
                        char[in] = pc.nextInt();
                    }
                    
                    int index = 0;
                    int index = 0;
                    
                    for (int in = 0; in < w - 1; in++) {
                        int length = char[in] - char[in + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int in = 0; in < w - 1; in++) {
                        length[in] = char[in] - char[in + 1];
                    }
                    int abs = 0;
                    for (int in = 0; in < w - 1; in++) {
                        abs = Math.abs(abs, length[in]);
                    }
                
                    for (int in = 0; in < w - 1; in++) {
                        index += Math.min(abs, char[in]);
                    }
                    
                    System.out.printf(""%d %d"", index, index);
                    System.err.printf(""%d %d"", index, index);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                pc.close();
            }
        } else {
            AL r = new AL();
            Scanner pc = new Scanner(System.in);
            int testCount = pc.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = pc.nextInt();
                
                int[] char = new int[w];
                for (int in = 0; in < w; in++) {
                    char[in] = pc.nextInt();
                }
                
                int index = 0;
                int index = 0;
                
                for (int in = 0; in < w - 1; in++) {
                    int length = char[in] - char[in + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int in = 0; in < w - 1; in++) {
                    length[in] = char[in] - char[in + 1];
                }
                int abs = 0;
                for (int in = 0; in < w - 1; in++) {
                    abs = Math.abs(abs, length[in]);
                }
            
                for (int in = 0; in < w - 1; in++) {
                    index += Math.min(abs, char[in]);
                }
                
                System.out.printf(""%d %d"", index, index);
                System.err.printf(""%d %d"", index, index);
                
                System.out.println();
                System.err.println();
                
            }
            pc.close();
        }
    }
}",1850,30,"n:w,k:ks,mush:char,diff:length,first:index,second:index,i:in,testCase:testCount,i1:i9,sc:pc,i4:ii94,i2:it,max:abs,test:result,",4382,5.00300256,Beam
2509,,,358,16,,5302,4.990984205,0
2510,,,358,16,,5302,4.962271186,0
2511,,,292,16,,4403,4.093959192,0
2512,,,317,12,,3711,3.469648139,0
2513,,,324,13,,4093,3.807566277,0
2514,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int in = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in"").exists())
                    in++;
                in--;
                boolean result = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    result = c != 'y';
                }
                if (result) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner pc = new Scanner(System.in);
                int testCount = pc.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = pc.nextInt();
                    
                    int[] char = new int[w];
                    for (int in = 0; in < w; in++) {
                        char[in] = pc.nextInt();
                    }
                    
                    int index = 0;
                    int index = 0;
                    
                    for (int in = 0; in < w - 1; in++) {
                        int length = char[in] - char[in + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int in = 0; in < w - 1; in++) {
                        length[in] = char[in] - char[in + 1];
                    }
                    int abs = 0;
                    for (int in = 0; in < w - 1; in++) {
                        abs = Math.abs(abs, length[in]);
                    }
                
                    for (int in = 0; in < w - 1; in++) {
                        index += Math.min(abs, char[in]);
                    }
                    
                    System.out.printf(""%d %d"", index, index);
                    System.err.printf(""%d %d"", index, index);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                pc.close();
            }
        } else {
            AL r = new AL();
            Scanner pc = new Scanner(System.in);
            int testCount = pc.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = pc.nextInt();
                
                int[] char = new int[w];
                for (int in = 0; in < w; in++) {
                    char[in] = pc.nextInt();
                }
                
                int index = 0;
                int index = 0;
                
                for (int in = 0; in < w - 1; in++) {
                    int length = char[in] - char[in + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int in = 0; in < w - 1; in++) {
                    length[in] = char[in] - char[in + 1];
                }
                int abs = 0;
                for (int in = 0; in < w - 1; in++) {
                    abs = Math.abs(abs, length[in]);
                }
            
                for (int in = 0; in < w - 1; in++) {
                    index += Math.min(abs, char[in]);
                }
                
                System.out.printf(""%d %d"", index, index);
                System.err.printf(""%d %d"", index, index);
                
                System.out.println();
                System.err.println();
                
            }
            pc.close();
        }
    }
}",1850,30,"n:w,k:ks,mush:char,diff:length,first:index,second:index,i:in,testCase:testCount,i1:i9,sc:pc,i4:ii94,i2:it,max:abs,test:result,",4382,4.978456744,Beam
2515,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r10;
        double R;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            R = (double)maxdif / 10;
            
            r10 = (int)(R*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:R,",621,0.573959235,Beam
2516,,,265,12,,3691,3.423409534,0
2517,,,273,11,,2719,2.535670078,0
2518,,,132,9,,1909,1.757980037,0
2519,,,302,15,,2636,2.47832917,0
2520,,,399,18,,6263,5.95286878,0
2521,,,211,11,,2884,2.673706388,0
2522,,,513,26,,17367,16.5291134,0
2523,,,269,16,,5881,5.359323704,0
2524,,,292,17,,6743,6.230374412,0
2525,,,443,17,,5375,4.996676862,0
2526,,,311,17,,6681,6.14131972,0
2527,,,266,13,,4351,4.061860339,0
2528,,,224,11,,3070,2.854680105,0
2529,,,291,12,,3535,3.329897499,0
2530,,,250,11,,2791,2.593816471,0
2531,,,419,16,,5891,5.59254777,0
2532,,,278,11,,3046,2.831170603,0
2533,,,655,16,,2086,2.058218292,0
2534,,,308,12,,1675,1.564178971,0
2535,,,306,16,,5302,4.96524229,0
2536,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String char[] = reader.readLine().split("" "");
            
            int k = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<char.length-1;i++){
                int i2=Integer.parseInt(char[i+1]);
                int j = Integer.parseInt(char[i]);
                if((i2-j)<0) result1+=-(i2-j);
                if(-(i2-j)>k) k = -(i2-j);
            }
            for(int i = 0; i<char.length-1;i++){
                int j = Integer.parseInt(char[i]);
                if(j>=k) result2 = result2+k;
                else if(j<k) result2 = result2+j;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""
"");
        }
        reader.close();
        writer.close();

    }

}",316,15,"max:k,i1:j,str:char,",1049,0.989966595,Beam
2537,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream path = System.path;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long ai = 1; ai <= T; ++ai) {
            System.path.print(""Case #"" + ai + "": "");
            long RR = scanner.nextLong(), CL = scanner.nextLong(), X = scanner.nextLong();
            
            long ns = (RR - 1) * CL;
            
            if (CL % X == 0) {
                path.println (ns + CL/X - 1 + X);
            } else {
                path.println (ns + CL/X + X);
            }
        }

    }
}",156,10,"W:X,C:CL,out:path,ans:ns,i:ai,R:RR,",1626,1.500841375,Beam
2538,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] char = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner uc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int W = uc.nextInt();
            for (int ti = 0; ti < W; ti++) {
                int R = uc.nextInt();
                for(int i = 0; i < 26; i++) {
                    char[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < R; i++) {
                    char[i] = uc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < R; i++) {
                    rem += char[i];
                }
                
                for (int tsi = 0; tsi < R-1; tsi++) {
                    int end = R-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (char[i] > char[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (char[i] >= char[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = char[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        char[tsi] = char[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        char[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    char[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = R-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (char[i] > char[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (char[i] >= char[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = char[0];
                        char tmpChar = idxToCh[0];
                        
                        char[0] = char[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        char[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (char[0] > rem - char[0]) {
                        door += idxToCh[0];
                        char[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = R-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (char[i] > char[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (char[i] >= char[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = char[0];
                            char tmpChar = idxToCh[0];
                            
                            char[0] = char[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            char[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:R,T:W,idxToCnt:char,sc:uc,",2061,2.094894767,Beam
2539,,,273,11,,2906,2.699579541,0
2541,,,393,16,,5293,4.962888916,0
2542,,,500,19,,8866,8.370075683,0
2543,,,479,25,,8180,7.574293605,0
2544,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.375819504,Beam
2545,,,406,19,,7937,6.967723735,0
2546,,,308,12,,1768,1.381501957,0
2547,,,326,14,,5519,4.994228832,0
2548,,,278,11,,3062,2.758654507,0
2549,,,257,11,,3070,2.787347047,0
2550,,,215,12,,3848,3.491818897,0
2551,,,317,12,,3679,3.363754002,0
2552,,,285,14,,4837,4.425797455,0
2553,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String padding = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int r = Integer.parseInt(br.readLine());
        for (int qi = 1; qi <= r; qi++) {
            int ans = 0;
            int ans62 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] Datars = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int next = 0; next < Datars.length; next++)
                Datars[next] = Integer.parseInt(raw[next]);

            //1
            for (int next = 0; next < Datars.length - 1; next++) {
                int w = Datars[next];
                int k = Datars[next + 1];
                
                if (k < w)
                    ans += (w - k);
            }
            
            //2
            int r = Integer.MIN_VALUE;
            for (int next = 0; next < Datars.length - 1; next++) {
                int w = Datars[next];
                int k = Datars[next + 1];
                
                int count = w - k;
                if (count > r)
                    r = count;
            }
            
            for (int next = 0; next < Datars.length - 1; next++) {
                if (Datars[next] < r)
                    ans62 += Datars[next];
                else
                    ans62 += r;
            }
            
            pw.println(String.format(padding, qi, ans, ans62));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:r,f:w,j:next,s:k,n:w,c:count,datas:Datars,t:r,ans1:ans,i:qi,ans2:ans62,prefix:padding,",6358,4.645025833,Beam
2554,,,290,12,,3381,3.11339188,0
2555,,,406,16,,6077,5.695367821,0
2556,,,572,15,,5215,5.018741024,0
2557,,,187,13,,2201,2.019208169,0
2558,,,272,16,,5790,5.329528085,0
2559,,,291,13,,4093,3.791240684,0
2560,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.445797578,Beam
2561,,,464,17,,5299,5.061349773,0
2562,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.437628651,Beam
2563,,,306,16,,5302,4.971968122,0
2564,,,262,14,,3101,2.929456532,0
2565,,,386,18,,7163,6.84344962,0
2566,,,393,16,,5230,4.922544634,0
2567,,,292,15,,5030,4.655971678,0
2568,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long t=System.currentTimeMillis();//Start time
        try {
            BufferedReader pin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter null = new BufferedWriter(new FileWriter(""A-large.out""));
            String unit = null;
            unit = pin.readLine();
            
            int h = Integer.parseInt(unit);
            for(int p=0;p<h;p++){
                unit = pin.readLine();
                int W = Integer.parseInt(unit);
                unit = pin.readLine();
                String [] stokens = unit.split("" "");                
                int [] IP = new int [W];
                for (int kind=0;kind<W;kind++){
                    IP[kind]= Integer.parseInt(stokens[kind]);
                }
                int p=0,p=0,h=0;
                for (int kind=0;kind<W-1;kind++){
                    if (IP[kind]>IP[kind+1]){
                        p=p+IP[kind]-IP[kind+1];
                        if (IP[kind]-IP[kind+1]>h){
                            h=IP[kind]-IP[kind+1];
                        }
                    }
                }
                for (int kind=0;kind<W-1;kind++){
                    if (IP[kind]>=h){
                        p=p+h;
                    } else{
                        p=p+IP[kind];
                    }
                }
                
                System.null.println(""Case #"" + (p+1) +"": "" + p + "" "" + p);    
                null.write(""Case #"" + (p+1) +"": "" + p + "" "" + p + ""
"");
            }
            pin.close();    
            null.close();
        } catch (FileNotFoundException ception) {
            System.null.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.null.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.null.println(""Running time is ""+(endTime-t)+""ms"");

    }

}",443,17,"max:h,N:W,T:h,k:kind,V:IP,line:unit,b:p,a:p,in:pin,tokens:stokens,i:p,out:null,e:ception,startTime:t,",4626,4.341297456,Beam
2569,,,236,16,,4434,4.122232747,0
2570,,,306,16,,5116,4.696095741,0
2572,,,639,21,,10876,10.69750261,0
2573,,,224,11,,2791,2.547292546,0
2574,,,264,15,,5464,5.047674421,0
2575,,,250,11,,2791,2.543973184,0
2576,,,328,16,,5178,4.724968827,0
2577,,,280,13,,3163,2.895285972,0
2578,,,358,16,,5240,4.867156581,0
2579,,,317,14,,4806,4.406865299,0
2580,,,306,13,,2946,2.716246025,0
2581,,,366,17,,6139,5.732652934,0
2582,,,257,11,,2791,2.600122273,0
2584,,,553,21,,6331,6.23421301,0
2585,,,292,17,,6814,6.349782435,0
2586,,,366,17,,6139,5.743746928,0
2587,,,132,9,,1909,1.744496346,0
2588,"class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int x = 0; x < numCases; x++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String tempLine = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(tempLine);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstAttempt = 0;
            int secondAttempt = 0;
            for ( int i = 0; i < nums.size()-1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                
                if ( (first - second) >= 0)
                {
                    firstAttempt = firstAttempt + (first- second);
                }
                
            }
            int maxDrop = 0;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int first = nums.get(i);
                int second = nums.get(i+1);
                int tempDrop = first-second;
                if ( tempDrop > maxDrop)
                {
                    maxDrop = tempDrop;
                }
            }
            double rate = maxDrop/10;
            for ( int i = 0; i < nums.size() - 1; i++)
            {
                int tempStack = nums.get(i);
                if ( tempStack >= maxDrop)
                {
                    secondAttempt+= maxDrop;
                }
                else
                {
                    secondAttempt += tempStack;
                }
            }
            writer.println(""Case #"" + (x+1) + "": "" + firstAttempt + "" "" + secondAttempt);
        
        }
        writer.close();

    }

    

    
    

    
}","class Mushroom{

    
    public static void main(String[] args) throws IOException
    {
        Mushroom solution = new Mushroom();

        Scanner input = new Scanner( new File( ""A-large.in""));
        //Scanner input = new Scanner( new File( ""DijkstraInput.txt""));
        //Scanner input = new Scanner( new File( ""MissedCases.txt""));
        PrintWriter writer = new PrintWriter( ""MushroomOutput.txt"");
        int numCases = Integer.parseInt( input.nextLine());
        for ( int j = 0; j < numCases; j++)
        {
            int numPlates = Integer.parseInt(input.nextLine());
            String empLin = input.nextLine(); 
            
            ArrayList<Integer> nums = new ArrayList<Integer>();
            StringTokenizer io = new StringTokenizer(empLin);
            while(io.hasMoreTokens())
            {
                nums.add(Integer.parseInt(io.nextToken()));
            }
            int firstEntry = 0;
            int fifthTask = 0;
            for ( int xi = 0; xi < nums.size()-1; xi++)
            {
                int third = nums.get(xi);
                int half = nums.get(xi+1);
                
                if ( (third - half) >= 0)
                {
                    firstEntry = firstEntry + (third- half);
                }
                
            }
            int j = 0;
            for ( int xi = 0; xi < nums.size() - 1; xi++)
            {
                int third = nums.get(xi);
                int half = nums.get(xi+1);
                int maxPush = third-half;
                if ( maxPush > j)
                {
                    j = maxPush;
                }
            }
            double rate = j/10;
            for ( int xi = 0; xi < nums.size() - 1; xi++)
            {
                int TempShift = nums.get(xi);
                if ( TempShift >= j)
                {
                    fifthTask+= j;
                }
                else
                {
                    fifthTask += TempShift;
                }
            }
            writer.println(""Case #"" + (j+1) + "": "" + firstEntry + "" "" + fifthTask);
        
        }
        writer.close();

    }

    

    
    

    
}",379,17,"second:half,i:xi,maxDrop:j,tempDrop:maxPush,tempLine:empLin,first:third,firstAttempt:firstEntry,secondAttempt:fifthTask,x:j,tempStack:TempShift,",5777,5.464186382,Beam
2589,,,256,13,,4364,4.064239939,0
2590,,,399,18,,6201,5.82546498,0
2591,,,448,16,,4137,3.892719078,0
2592,,,291,12,,3721,3.452868557,0
2593,,,330,16,,6046,5.630933511,0
2594,,,386,18,,7138,6.678719286,0
2595,,,393,16,,5238,4.851376371,0
2597,,,328,16,,5241,4.809128773,0
2598,,,308,12,,1768,1.632493623,0
2599,,,321,13,,4434,4.08596801,0
2600,,,256,13,,4364,4.029318166,0
2601,,,500,19,,8863,8.319657131,0
2602,,,513,26,,17367,16.49291932,0
2603,,,321,18,,6956,6.547631586,0
2604,,,308,12,,1768,1.625090961,0
2605,,,358,18,,6764,6.291322982,0
2606,,,386,18,,7170,6.730258886,0
2607,,,544,17,,5933,5.597126993,0
2608,,,366,17,,6139,5.676972624,0
2609,,,358,18,,6580,6.09802471,0
2610,,,256,13,,3515,3.234609465,0
2611,,,344,15,,4882,4.48570805,0
2612,,,358,18,,6544,6.035961699,0
2613,,,309,11,,2202,2.02553395,0
2614,,,443,17,,5016,4.723542289,0
2615,,,326,14,,5023,4.646226088,0
2616,,,321,18,,6968,6.421636613,0
2617,,,345,16,,5983,5.399843816,0
2618,,,306,16,,5302,4.856665746,0
2619,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cusemin = 1; cusemin <= cases; cusemin++){
      
      int r = in.nextInt();
      int n = in.nextInt();
      int k = in.nextInt();
      int score = n/k*(r - 1);
      score += (int)Math.ceil((double)n/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + cusemin + "": "" + score);
    }
    out.close();
    in.close();
  }
}",156,10,"w:k,c:n,casenum:cusemin,",745,0.672283256,Beam
2620,,,419,16,,6015,5.703102493,0
2621,,,184,9,,1954,1.789515813,0
2622,,,298,16,,4992,4.615747078,0
2623,,,448,16,,4137,3.90086923,0
2624,,,553,21,,6178,5.969162317,0
2625,,,513,26,,17367,16.49457892,0
2626,,,256,13,,4055,3.746395584,0
2627,,,619,14,,4747,4.519029081,0
2628,,,292,17,,6846,6.29952093,0
2629,,,292,15,,5030,4.630767262,0
2630,,,240,13,,2184,1.988351842,0
2631,,,198,10,,2403,2.168438685,0
2632,,,358,18,,6726,6.258578749,0
2633,,,266,13,,4351,3.979125253,0
2634,,,263,13,,4434,4.073034934,0
2635,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner again = new Scanner(System.again);
        int T = again.nextInt();
        for (int ix = 0; ix < T; ix++) {
            int GR = again.nextInt();
            int K = again.nextInt();
            int length = again.nextInt();
            
            int p = K / length;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += p * GR;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (K % length == 0) {
                ans1 += (length - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += length;
            }
            int outs = ans1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"C:K,size:length,in:again,i:ix,costPerRow:p,R:GR,ans:outs,",2169,1.959736085,Beam
2636,,,271,12,,3149,2.882048893,0
2637,,,281,14,,4806,4.394422869,0
2638,,,298,16,,4992,4.595529866,0
2639,,,208,12,,2039,1.876680553,0
2640,,,358,16,,5302,4.925762788,0
2641,,,360,19,,6971,6.474020358,0
2642,,,386,18,,7190,6.781643609,0
2643,,,464,17,,5358,4.982199768,0
2644,,,358,16,,5302,4.842170024,0
2645,,,240,13,,2184,1.992724113,0
2646,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, id = 0, x = 0, wy = 0, w = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int uc = 0; uc < e; uc++) {
                m[uc] = input.nextInt();

            }
            for (int uc = 1; uc < e; uc++) {
                id = m[uc - 1] - m[uc];
                if (id >= wy) {
                    wy = id;
                }
                if (id >= 0) {
                    x += id;
                }
            }
            for (int uc = 0; uc < e - 1; uc++) {
                if (m[uc] <= wy) {
                    w += m[uc];
                }
                if (m[uc] > wy) {
                    w += wy;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"z:w,y:wy,c:uc,d:id,",1644,1.524293085,Beam
2647,,,295,15,,3110,2.874432317,0
2648,,,544,17,,5940,5.669650555,0
2649,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int rasemate = 1; rasemate <= cases; rasemate++){
      
      int r = in.nextInt();
      int n = in.nextInt();
      int k = in.nextInt();
      int score = n/k*(r - 1);
      score += (int)Math.ceil((double)n/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + rasemate + "": "" + score);
    }
    out.close();
    in.close();
  }
}",156,10,"w:k,c:n,casenum:rasemate,",745,0.684396883,Beam
2650,,,321,13,,4434,4.120274925,0
2651,,,328,16,,5302,4.928684119,0
2652,,,500,19,,8813,8.376199404,0
2653,,,208,12,,2039,1.87355818,0
2654,,,328,16,,5240,4.874984328,0
2655,,,306,16,,5271,4.918833578,0
2656,,,441,13,,4248,4.029054658,0
2657,,,255,13,,2946,2.746247697,0
2658,,,224,11,,3070,2.830741652,0
2659,,,306,13,,2946,2.723880132,0
2660,,,309,11,,1954,1.795201254,0
2661,,,655,16,,2007,1.95079151,0
2662,,,295,15,,3110,2.857941747,0
2663,,,215,12,,3602,3.271565723,0
2664,,,306,13,,2946,2.717947181,0
2665,,,525,23,,13155,12.52213235,0
2666,,,479,25,,8346,7.680888017,0
2668,,,262,14,,3505,3.05072449,0
2669,,,256,13,,3196,2.81763442,0
2670,,,419,16,,6077,5.689190265,0
2671,,,200,10,,2481,2.278836683,0
2672,,,443,17,,5503,5.210746074,0
2673,,,655,16,,2344,2.313372056,0
2674,,,290,12,,3689,3.413194056,0
2675,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.420177782,Beam
2676,,,200,10,,2481,2.269863856,0
2677,,,291,15,,3642,3.38633678,0
2678,,,224,11,,3070,2.832066321,0
2679,,,290,12,,3381,3.163857551,0
2680,,,406,19,,7999,7.473291735,0
2681,,,309,11,,2264,2.11166232,0
2682,,,240,12,,3673,3.402556189,0
2683,,,149,10,,2202,2.016350885,0
2684,,,417,18,,3814,3.571424747,0
2686,,,326,14,,4807,4.466347675,0
2687,,,360,16,,5984,5.548640676,0
2688,,,240,13,,2184,2.006748267,0
2689,,,311,17,,6325,5.869893734,0
2690,,,200,10,,2202,2.033293569,0
2691,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.037917956,Beam
2692,,,321,13,,4093,3.819070156,0
2693,,,330,16,,5953,5.570675917,0
2694,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,w,v ,r;
    t=sc.nextInt();
    int ars[];
    int ans[];
    for(int i=1;i<=t;i++){
        w=sc.nextInt();
        ars=new int[2501];
        v=Integer.MAX_VALUE;
        r=Integer.MIN_VALUE;
        for(int j=0;j<(2*w-1);j++){
            for(int k=0;k<w;k++){
                int x=sc.nextInt();
                ars[x]++;
                v=Math.v(v,x);     
                r=Math.r(r,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[w];
        for(int k=v,l=0;k<=r;k++){
            if(ars[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<w;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:r,min:v,n:w,arr:ars,",1737,1.59677244,Beam
2695,,,358,16,,5302,4.928311086,0
2696,,,443,17,,5685,5.398207104,0
2697,,,443,17,,5247,4.957617585,0
2698,,,386,18,,7446,6.971480958,0
2699,,,317,14,,5209,4.866120207,0
2700,,,292,15,,5030,4.628203523,0
2701,,,544,17,,5896,5.605725519,0
2702,,,269,16,,5925,5.479368333,0
2703,,,393,16,,5290,4.947362792,0
2704,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.436908523,Beam
2705,,,348,21,,7971,7.433065633,0
2706,,,211,11,,2884,2.618120221,0
2707,,,257,11,,2791,2.548615543,0
2708,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int j = 0;
        String data;
        try {
            FileReader f = new FileReader(inFile);
            BufferedReader av = new BufferedReader(f);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter b = new BufferedWriter(fileWriter);
            data = av.readLine();
            j = Integer.parseInt(data);
            for(int f = 0; f < j ; f++){
                data = av.readLine();
                
                String[] Parts = data.split("" "");
                long R = Long.parseLong(Parts[0]);
                long F = Long.parseLong(Parts[1]);
                long J = Long.parseLong(Parts[2]);
                long message = (F-1)/J+J;
                b.write(""Case #"" + (f+1) + "": "" + message + ""
"");
                
            }
            av.close();
            b.close();
        } catch (IOException pex) {
            pex.printStackTrace();
        }

    }
}",222,16,"W:J,C:F,result:message,bw:b,line:data,i:f,n:j,br:av,parts:Parts,fileReader:f,ex:pex,",2927,2.674513964,Beam
2709,,,278,11,,3046,2.784873589,0
2710,,,171,10,,2295,2.08749458,0
2711,,,302,15,,2946,2.6781902,0
2712,,,292,17,,6851,6.321217068,0
2713,,,305,15,,5212,4.819099502,0
2714,,,264,15,,5049,4.698994803,0
2715,,,255,13,,3256,3.011691606,0
2716,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int rasemate = 1; rasemate <= cases; rasemate++){
      
      int r = in.nextInt();
      int n = in.nextInt();
      int k = in.nextInt();
      int score = n/k*(r - 1);
      score += (int)Math.ceil((double)n/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + rasemate + "": "" + score);
    }
    out.close();
    in.close();
  }
}",156,10,"w:k,c:n,casenum:rasemate,",745,0.679717791,Beam
2717,,,479,25,,8235,7.788488201,0
2718,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int row = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[row] = row + r - 1;
                for(int j = row + 1; j <= 2*row - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = row+1 + r-1;
                }
                for(int j = 2*row; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-row] + r, row + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:row,",310,0.288641592,Beam
2719,,,393,16,,5228,4.896417793,0
2720,,,349,19,,5383,5.01293782,0
2721,,,281,14,,4806,4.437131155,0
2722,,,306,16,,5302,4.912033411,0
2723,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long t=System.currentTimeMillis();//Start time
        try {
            BufferedReader pin = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter null = new BufferedWriter(new FileWriter(""A-large.out""));
            String unit = null;
            unit = pin.readLine();
            
            int h = Integer.parseInt(unit);
            for(int p=0;p<h;p++){
                unit = pin.readLine();
                int W = Integer.parseInt(unit);
                unit = pin.readLine();
                String [] stokens = unit.split("" "");                
                int [] IP = new int [W];
                for (int kind=0;kind<W;kind++){
                    IP[kind]= Integer.parseInt(stokens[kind]);
                }
                int p=0,p=0,h=0;
                for (int kind=0;kind<W-1;kind++){
                    if (IP[kind]>IP[kind+1]){
                        p=p+IP[kind]-IP[kind+1];
                        if (IP[kind]-IP[kind+1]>h){
                            h=IP[kind]-IP[kind+1];
                        }
                    }
                }
                for (int kind=0;kind<W-1;kind++){
                    if (IP[kind]>=h){
                        p=p+h;
                    } else{
                        p=p+IP[kind];
                    }
                }
                
                System.null.println(""Case #"" + (p+1) +"": "" + p + "" "" + p);    
                null.write(""Case #"" + (p+1) +"": "" + p + "" "" + p + ""
"");
            }
            pin.close();    
            null.close();
        } catch (FileNotFoundException ception) {
            System.null.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.null.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.null.println(""Running time is ""+(endTime-t)+""ms"");

    }

}",443,17,"max:h,N:W,T:h,k:kind,V:IP,line:unit,b:p,a:p,in:pin,tokens:stokens,i:p,out:null,e:ception,startTime:t,",4626,4.358722146,Beam
2724,,,344,15,,4882,4.539866885,0
2725,,,417,19,,6923,6.482239981,0
2726,,,198,10,,2217,2.036582422,0
2727,,,405,15,,5240,4.899646858,0
2728,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r10;
        double R;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            R = (double)maxdif / 10;
            
            r10 = (int)(R*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:R,",621,0.541436485,Beam
2729,,,325,16,,6077,5.393995794,0
2730,,,282,13,,4078,3.75828141,0
2731,,,619,14,,4684,4.481134248,0
2732,,,325,16,,6077,5.599895187,0
2733,,,386,18,,7200,6.657761864,0
2734,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.426118708,Beam
2736,,,269,13,,4023,3.734684551,0
2737,,,325,14,,5173,4.69286528,0
2738,,,298,16,,4992,4.560025903,0
2739,,,321,18,,6695,5.878619631,0
2740,,,468,14,,3566,3.359014666,0
2741,,,345,16,,5989,5.544693549,0
2742,,,250,11,,3070,2.780677068,0
2743,,,368,14,,4837,4.397660689,0
2744,,,358,16,,5302,4.87644161,0
2745,,,464,17,,5296,5.033293605,0
2746,,,295,16,,5302,4.929155664,0
2747,,,240,13,,2184,2.01186105,0
2748,,,278,15,,5168,4.801881353,0
2749,,,273,11,,2984,2.75907292,0
2750,,,285,14,,4837,4.472814488,0
2751,"class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sc = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sc.nextInt();
        sc.nextLine();
        for (int caseNum = 1; caseNum <= T; caseNum++)
        {
            int x = sc.nextInt();
            ArrayList<Integer> timeIntervals = new ArrayList<Integer>();
            for(int i = 0; i<x; i++)
                timeIntervals.add(sc.nextInt());
            int finalCase1Amount = 0;
            int previous = timeIntervals.get(0);
            int next = 0;
            int maximumDifference = 0;
            int difference = 0;
            for (int i=1; i<timeIntervals.size(); i++)
            {
                next = timeIntervals.get(i);
                
                difference = previous-next;
                if (difference>0)
                {
                    finalCase1Amount+=difference;
                    if (difference>maximumDifference)
                        maximumDifference = difference;
                }
                
                previous = timeIntervals.get(i);
            }
                
            int finalCase2Amount = 0;
            int total = 0;
            
            for (int i=0; i<timeIntervals.size()-1; i++)
            {
                total = timeIntervals.get(i);                    
                if (total-maximumDifference<=0)
                {
                    finalCase2Amount+=total;
                    total = 0;
                }
                else
                {
                    finalCase2Amount+=maximumDifference;
                    total -= maximumDifference;
                }
            }

            fw.write(""Case #""+caseNum+"": ""+finalCase1Amount+"" ""+finalCase2Amount+""\n"");
        }
        fw.flush();
        fw.close();
        sc.close();
    }
}","class MushroomMonster 
{
    public static void main(String[] args) throws IOException
    {
        Scanner sci = new Scanner (new File(""MushroomMonster.in""));
        BufferedWriter fw = new BufferedWriter(new FileWriter(new File(""MushroomMonster.out"")));
        int T = sci.nextInt();
        sci.nextLine();
        for (int key = 1; key <= T; key++)
        {
            int x = sci.nextInt();
            ArrayList<Integer> moneyInterversions = new ArrayList<Integer>();
            for(int chi = 0; chi<x; chi++)
                moneyInterversions.add(sci.nextInt());
            int finalCaseNameAddress = 0;
            int prevent = moneyInterversions.get(0);
            int more = 0;
            int partial = 0;
            int ki = 0;
            for (int chi=1; chi<moneyInterversions.size(); chi++)
            {
                more = moneyInterversions.get(chi);
                
                ki = prevent-more;
                if (ki>0)
                {
                    finalCaseNameAddress+=ki;
                    if (ki>partial)
                        partial = ki;
                }
                
                prevent = moneyInterversions.get(chi);
            }
                
            int finalcase4Count = 0;
            int key = 0;
            
            for (int chi=0; chi<moneyInterversions.size()-1; chi++)
            {
                key = moneyInterversions.get(chi);                    
                if (key-partial<=0)
                {
                    finalcase4Count+=key;
                    key = 0;
                }
                else
                {
                    finalcase4Count+=partial;
                    key -= partial;
                }
            }

            fw.write(""Case #""+key+"": ""+finalCaseNameAddress+"" ""+finalcase4Count+""
"");
        }
        fw.flush();
        fw.close();
        sci.close();
    }
}",330,16,"maximumDifference:partial,difference:ki,total:key,next:more,finalCase1Amount:finalCaseNameAddress,finalCase2Amount:finalcase4Count,i:chi,previous:prevent,caseNum:key,timeIntervals:moneyInterversions,sc:sci,",5488,3.986010114,Beam
2752,,,282,13,,4419,4.10710326,0
2753,,,393,19,,7064,6.587675428,0
2754,,,366,17,,6139,5.719901796,0
2755,,,224,11,,2791,2.52384088,0
2756,,,358,18,,6548,6.080280288,0
2757,,,156,10,,2205,2.003557134,0
2758,,,417,18,,3845,3.59316444,0
2759,,,517,26,,12271,11.77885123,0
2760,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    rand    = new Scanner(System.in);
        
        int T    = rand.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = rand.nextInt();
            int        p    = rand.nextInt();
            int        k    = rand.nextInt();
            int    total    = r*p;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(p/k);
            
            if(p % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        rand.close();
    }
}",171,10,"w:k,c:p,scanIn:rand,",869,0.795309726,Beam
2761,,,224,11,,2791,2.568888617,0
2762,,,302,13,,3825,3.550252219,0
2763,,,269,16,,5861,5.395535545,0
2765,,,460,16,,5303,4.934826132,0
2766,,,790,14,,4837,4.709572069,0
2767,,,290,12,,3689,3.35132908,0
2768,,,460,16,,5240,4.920098992,0
2769,,,366,17,,6077,5.673018857,0
2770,,,290,12,,3690,3.425991074,0
2771,,,321,18,,6567,6.119380128,0
2772,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.016309528,Beam
2773,,,344,15,,4882,4.549074431,0
2774,,,393,16,,5284,4.950642927,0
2775,,,366,17,,6139,5.799306126,0
2776,,,619,14,,4726,4.556200214,0
2777,,,483,20,,8698,8.307893181,0
2778,,,330,16,,5953,5.478172473,0
2779,,,267,13,,4343,3.984236058,0
2780,,,544,17,,5940,5.674660885,0
2781,,,250,11,,3070,2.820327596,0
2782,,,285,14,,4837,4.441032143,0
2783,,,572,15,,5215,4.983789194,0
2784,,,330,16,,6077,5.68203239,0
2785,,,443,17,,5041,4.751218621,0
2786,,,262,14,,3442,3.189595743,0
2787,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.433925192,Beam
2788,,,200,10,,2233,2.060831523,0
2789,,,479,25,,8202,7.811445192,0
2790,,,273,11,,2758,2.566447004,0
2791,,,327,16,,4213,3.946175273,0
2792,,,317,12,,3377,3.15103066,0
2793,,,254,13,,4266,3.938866381,0
2794,,,324,13,,4093,3.801134559,0
2795,,,260,11,,2512,2.317874344,0
2796,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.421116237,Beam
2797,,,468,14,,3907,3.704313195,0
2798,,,406,16,,6077,5.707883902,0
2799,,,260,11,,2512,2.340726435,0
2800,,,464,17,,5358,5.076877348,0
2801,,,418,13,,4093,3.788242972,0
2802,,,291,13,,4062,3.541671379,0
2803,,,426,18,,3343,3.132473862,0
2804,,,257,11,,3070,2.823446218,0
2805,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.430257543,Beam
2806,,,344,15,,4882,4.54834702,0
2807,,,292,15,,5040,4.68388629,0
2808,,,263,13,,4093,3.805026281,0
2809,,,572,15,,5215,5.07062964,0
2810,,,298,16,,4992,4.639197218,0
2811,,,292,17,,6397,5.883551665,0
2812,,,256,13,,4082,3.7080597,0
2813,,,295,15,,2935,2.667093543,0
2814,,,393,16,,5290,4.926711373,0
2815,,,419,16,,6077,5.746146031,0
2816,,,321,18,,6964,6.497518333,0
2817,,,264,15,,5080,4.723605263,0
2818,,,211,11,,2791,2.564648644,0
2819,,,358,16,,5302,4.910373692,0
2820,,,500,19,,8803,8.280757896,0
2821,,,619,14,,4386,4.205397093,0
2822,,,260,11,,2512,2.344440619,0
2823,,,325,14,,4793,4.469701536,0
2824,,,292,16,,4155,3.865348319,0
2825,,,311,17,,6601,6.118063243,0
2826,,,399,18,,6263,5.867210786,0
2827,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] char = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner uc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int W = uc.nextInt();
            for (int ti = 0; ti < W; ti++) {
                int R = uc.nextInt();
                for(int i = 0; i < 26; i++) {
                    char[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < R; i++) {
                    char[i] = uc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < R; i++) {
                    rem += char[i];
                }
                
                for (int tsi = 0; tsi < R-1; tsi++) {
                    int end = R-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (char[i] > char[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (char[i] >= char[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = char[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        char[tsi] = char[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        char[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    char[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = R-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (char[i] > char[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (char[i] >= char[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = char[0];
                        char tmpChar = idxToCh[0];
                        
                        char[0] = char[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        char[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (char[0] > rem - char[0]) {
                        door += idxToCh[0];
                        char[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = R-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (char[i] > char[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (char[i] >= char[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = char[0];
                            char tmpChar = idxToCh[0];
                            
                            char[0] = char[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            char[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:R,T:W,idxToCnt:char,sc:uc,",2061,2.085522544,Beam
2828,,,326,14,,4837,4.507115539,0
2829,,,375,12,,3640,3.413263814,0
2830,,,735,24,,10593,10.30679196,0
2831,,,325,14,,4793,4.462081401,0
2832,,,272,16,,5780,5.33879803,0
2833,,,317,12,,3679,3.403651043,0
2834,,,278,11,,3062,2.814838052,0
2835,,,325,16,,6077,5.6351776,0
2837,,,325,14,,4802,4.444431531,0
2838,,,292,15,,5383,4.951923434,0
2839,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner Scanker = new Scanner(System.in);
        int t = Scanker.nextInt();
        for(int x = 1; x <= t; ++x){
            int w = Scanker.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = Scanker.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++char;
                    if(char < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:char,scanner:Scanker,soldiers:wars,",1241,1.1232463,Beam
2840,,,291,13,,4434,4.100030434,0
2841,,,250,11,,3070,2.814982764,0
2842,,,272,16,,5875,5.379471914,0
2843,,,393,19,,6969,6.455493379,0
2844,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int in = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in"").exists())
                    in++;
                in--;
                boolean result = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    result = c != 'y';
                }
                if (result) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner pc = new Scanner(System.in);
                int testCount = pc.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = pc.nextInt();
                    
                    int[] char = new int[w];
                    for (int in = 0; in < w; in++) {
                        char[in] = pc.nextInt();
                    }
                    
                    int index = 0;
                    int index = 0;
                    
                    for (int in = 0; in < w - 1; in++) {
                        int length = char[in] - char[in + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int in = 0; in < w - 1; in++) {
                        length[in] = char[in] - char[in + 1];
                    }
                    int abs = 0;
                    for (int in = 0; in < w - 1; in++) {
                        abs = Math.abs(abs, length[in]);
                    }
                
                    for (int in = 0; in < w - 1; in++) {
                        index += Math.min(abs, char[in]);
                    }
                    
                    System.out.printf(""%d %d"", index, index);
                    System.err.printf(""%d %d"", index, index);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                pc.close();
            }
        } else {
            AL r = new AL();
            Scanner pc = new Scanner(System.in);
            int testCount = pc.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = pc.nextInt();
                
                int[] char = new int[w];
                for (int in = 0; in < w; in++) {
                    char[in] = pc.nextInt();
                }
                
                int index = 0;
                int index = 0;
                
                for (int in = 0; in < w - 1; in++) {
                    int length = char[in] - char[in + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int in = 0; in < w - 1; in++) {
                    length[in] = char[in] - char[in + 1];
                }
                int abs = 0;
                for (int in = 0; in < w - 1; in++) {
                    abs = Math.abs(abs, length[in]);
                }
            
                for (int in = 0; in < w - 1; in++) {
                    index += Math.min(abs, char[in]);
                }
                
                System.out.printf(""%d %d"", index, index);
                System.err.printf(""%d %d"", index, index);
                
                System.out.println();
                System.err.println();
                
            }
            pc.close();
        }
    }
}",1850,30,"n:w,k:ks,mush:char,diff:length,first:index,second:index,i:in,testCase:testCount,i1:i9,sc:pc,i4:ii94,i2:it,max:abs,test:result,",4382,4.926247736,Beam
2845,,,271,12,,3380,3.089743964,0
2846,,,269,16,,5873,5.402641682,0
2847,,,156,10,,2233,2.036820571,0
2848,,,360,19,,7045,6.613781059,0
2849,,,269,13,,4022,3.797315343,0
2850,,,240,12,,3697,3.422697588,0
2851,,,256,13,,4055,3.778140072,0
2852,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.43825357,Beam
2853,,,443,17,,4996,4.71543051,0
2854,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.030808385,Beam
2855,,,655,16,,2150,2.115861241,0
2856,,,443,17,,5200,4.854427083,0
2857,,,263,13,,4093,3.812302212,0
2858,,,306,16,,5302,4.950327492,0
2859,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,2.402855086,Beam
2860,,,211,11,,2791,2.576697183,0
2861,,,255,13,,3194,2.967138525,0
2862,,,464,17,,5358,5.005542918,0
2863,,,250,11,,2791,2.548753031,0
2864,,,215,12,,3693,3.390062781,0
2865,,,198,10,,2403,2.203435055,0
2866,,,418,13,,4093,3.855805643,0
2867,,,149,10,,2233,2.031568265,0
2868,,,273,11,,2956,2.735951761,0
2869,,,256,13,,3325,3.0834415,0
2870,,,375,12,,3644,3.395269227,0
2871,,,393,16,,5238,4.871130566,0
2872,,,443,17,,4952,4.616702505,0
2873,,,266,13,,4421,4.016272382,0
2874,,,215,12,,3679,3.341951323,0
2875,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int in = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in"").exists())
                    in++;
                in--;
                boolean result = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    result = c != 'y';
                }
                if (result) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner pc = new Scanner(System.in);
                int testCount = pc.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = pc.nextInt();
                    
                    int[] char = new int[w];
                    for (int in = 0; in < w; in++) {
                        char[in] = pc.nextInt();
                    }
                    
                    int index = 0;
                    int index = 0;
                    
                    for (int in = 0; in < w - 1; in++) {
                        int length = char[in] - char[in + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int in = 0; in < w - 1; in++) {
                        length[in] = char[in] - char[in + 1];
                    }
                    int abs = 0;
                    for (int in = 0; in < w - 1; in++) {
                        abs = Math.abs(abs, length[in]);
                    }
                
                    for (int in = 0; in < w - 1; in++) {
                        index += Math.min(abs, char[in]);
                    }
                    
                    System.out.printf(""%d %d"", index, index);
                    System.err.printf(""%d %d"", index, index);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                pc.close();
            }
        } else {
            AL r = new AL();
            Scanner pc = new Scanner(System.in);
            int testCount = pc.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = pc.nextInt();
                
                int[] char = new int[w];
                for (int in = 0; in < w; in++) {
                    char[in] = pc.nextInt();
                }
                
                int index = 0;
                int index = 0;
                
                for (int in = 0; in < w - 1; in++) {
                    int length = char[in] - char[in + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int in = 0; in < w - 1; in++) {
                    length[in] = char[in] - char[in + 1];
                }
                int abs = 0;
                for (int in = 0; in < w - 1; in++) {
                    abs = Math.abs(abs, length[in]);
                }
            
                for (int in = 0; in < w - 1; in++) {
                    index += Math.min(abs, char[in]);
                }
                
                System.out.printf(""%d %d"", index, index);
                System.err.printf(""%d %d"", index, index);
                
                System.out.println();
                System.err.println();
                
            }
            pc.close();
        }
    }
}",1850,30,"n:w,k:ks,mush:char,diff:length,first:index,second:index,i:in,testCase:testCount,i1:i9,sc:pc,i4:ii94,i2:it,max:abs,test:result,",4382,4.902134709,Beam
2876,,,171,10,,2481,2.254028094,0
2877,,,132,9,,1909,1.724385858,0
2878,,,348,14,,3895,3.606355321,0
2879,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer result = new StringBuffer();
        char[] pi = new char[26];
        for (int n = 0; n < pi.length; n++) pi[n] = (char)('A' + n);

        try (Scanner random = new Scanner(new File(filePath))) {
            int A = random.nextInt();
            for (int n = 1; n <= A; n++) {
                result.append(""Case #"" + n + "":"");
                int B = random.nextInt();
                int[] Ki = new int[B];
                int n = 0;
                for (int rev = 0; rev < B; rev++) {
                    Ki[rev] = random.nextInt();
                    n += Ki[rev];
                    Ki[rev] *= 2;
                }
                while (n > 0) {
                    result.append("" "");
                    
                    int v = 0;
                    n--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Ki[rev] > n) {
                            if (v == 0) {
                                result.append(pi[rev]);
                                Ki[rev] -= 2;
                                v = 1;
                            } else {
                                result.append(pi[rev]);
                                Ki[rev] -= 2;
                                n--;
                                break;
                            }
                        }
                    }
                    if (v == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Ki[rev] > 0) {
                                result.append(pi[0]);
                                Ki[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                result.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(result.toString().getBytes());
            }
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"sum:n,j:rev,i:n,N:B,flag:v,T:A,Pi:Ki,answer:result,sc:random,parties:pi,",3070,2.878703098,Beam
2880,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMALL = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMALL) {
            if (_SMALL) {
                int in = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in"").exists())
                    in++;
                in--;
                boolean result = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    result = c != 'y';
                }
                if (result) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? in == 0 ? ""-practice"" : """" : ""-attempt"" + in) + "".out""));
                    AL r = new AL();
                    Scanner pc = new Scanner(System.in);
                    int testCount = pc.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = pc.nextInt();
                        
                        int[] char = new int[w];
                        for (int i9 = 0; i9 < w; i9++) {
                            char[i9] = pc.nextInt();
                        }
                        
                        int index = 0;
                        int index = 0;
                        
                        for (int ii94 = 0; ii94 < w - 1; ii94++) {
                            int length = char[ii94] - char[ii94 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = char[i3] - char[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int it = 0; it < w - 1; it++) {
                            index += Math.min(abs, char[it]);
                        }
                        
                        System.out.printf(""%d %d"", index, index);
                        System.err.printf(""%d %d"", index, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    pc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner pc = new Scanner(System.in);
                int testCount = pc.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = pc.nextInt();
                    
                    int[] char = new int[w];
                    for (int in = 0; in < w; in++) {
                        char[in] = pc.nextInt();
                    }
                    
                    int index = 0;
                    int index = 0;
                    
                    for (int in = 0; in < w - 1; in++) {
                        int length = char[in] - char[in + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int in = 0; in < w - 1; in++) {
                        length[in] = char[in] - char[in + 1];
                    }
                    int abs = 0;
                    for (int in = 0; in < w - 1; in++) {
                        abs = Math.abs(abs, length[in]);
                    }
                
                    for (int in = 0; in < w - 1; in++) {
                        index += Math.min(abs, char[in]);
                    }
                    
                    System.out.printf(""%d %d"", index, index);
                    System.err.printf(""%d %d"", index, index);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                pc.close();
            }
        } else {
            AL r = new AL();
            Scanner pc = new Scanner(System.in);
            int testCount = pc.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = pc.nextInt();
                
                int[] char = new int[w];
                for (int in = 0; in < w; in++) {
                    char[in] = pc.nextInt();
                }
                
                int index = 0;
                int index = 0;
                
                for (int in = 0; in < w - 1; in++) {
                    int length = char[in] - char[in + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int in = 0; in < w - 1; in++) {
                    length[in] = char[in] - char[in + 1];
                }
                int abs = 0;
                for (int in = 0; in < w - 1; in++) {
                    abs = Math.abs(abs, length[in]);
                }
            
                for (int in = 0; in < w - 1; in++) {
                    index += Math.min(abs, char[in]);
                }
                
                System.out.printf(""%d %d"", index, index);
                System.err.printf(""%d %d"", index, index);
                
                System.out.println();
                System.err.println();
                
            }
            pc.close();
        }
    }
}",1850,30,"n:w,k:ks,mush:char,diff:length,first:index,second:index,i:in,testCase:testCount,i1:i9,sc:pc,i4:ii94,i2:it,max:abs,test:result,_SAMPLE:_SAMALL,",4504,5.092488623,Beam
2881,,,249,11,,2791,2.58598663,0
2882,,,254,13,,3933,3.666386958,0
2883,,,291,13,,4093,3.805656886,0
2884,,,255,13,,3256,3.032418688,0
2885,,,327,16,,4273,4.017210138,0
2886,,,325,16,,6077,5.674852542,0
2887,,,328,16,,5240,4.852872431,0
2888,,,187,13,,1940,1.791891193,0
2889,,,366,17,,6139,5.714556992,0
2890,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner Scanker = new Scanner(System.in);
        int t = Scanker.nextInt();
        for(int x = 1; x <= t; ++x){
            int w = Scanker.nextInt();
            boolean[] wars = new boolean[2500];
            for(int i = 0; i < 2 * w - 1; ++i){
                for(int j = 0; j < w; ++j){
                    int s = Scanker.nextInt();
                    wars[s-1] = !wars[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(wars[i-1]){
                    ++char;
                    if(char < w){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:w,count:char,scanner:Scanker,soldiers:wars,",1241,1.139869074,Beam
2891,,,334,12,,3251,3.050707662,0
2892,,,418,13,,4093,3.871496268,0
2893,,,262,14,,3101,2.883536279,0
2894,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream png = System.png;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> duration = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            duration.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long name = queue.poll();
                
                if (name == W){
                    break;
                }
                
                next[0] = name + 1;
                StringBuilder url = new StringBuilder(Long.toString(name));
                next[1] = Long.parseLong(url.reverse().toString());
                
                for (int ix = 0; ix < 2; ix++){
                    if (!S.contains(next[ix]) && next[ix] <= W && next[ix] > name){
                        queue.add(next[ix]);
                        S.add(next[ix]);
                        duration.put(next[ix], duration.get(name) + 1);
                    }
                }
            }
            
            png.println(String.format(""Case #%d: %d"", t, duration.get(W) + 1));
        }
    }
}",325,14,"N:W,number:name,i:ix,builder:url,out:png,distance:duration,",2804,2.602096883,Beam
2895,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int p = Integer.parseInt(arr[1]);
            int k = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (p/k);
            }
            if(p-k == 0){
                min = min + k;
            }else if(p-k < k){
                min = k + 1;
            }else{
                min = (long) (min + Math.ceil((double)p/(double)k));
                min = min + k - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""
"");
            writer.write(""Case #""+(i+1)+"": ""+min+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:k,c:p,",466,0.431412454,Beam
2896,,,208,12,,2333,2.131826242,0
2897,,,273,11,,2998,2.779902097,0
2898,,,256,13,,4042,3.740208264,0
2899,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, id = 0, x = 0, wy = 0, w = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int uc = 0; uc < e; uc++) {
                m[uc] = input.nextInt();

            }
            for (int uc = 1; uc < e; uc++) {
                id = m[uc - 1] - m[uc];
                if (id >= wy) {
                    wy = id;
                }
                if (id >= 0) {
                    x += id;
                }
            }
            for (int uc = 0; uc < e - 1; uc++) {
                if (m[uc] <= wy) {
                    w += m[uc];
                }
                if (m[uc] > wy) {
                    w += wy;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"z:w,y:wy,c:uc,d:id,",1644,1.529417785,Beam
2900,,,441,13,,4372,4.126096229,0
2901,,,305,15,,5110,4.682541084,0
2902,,,292,15,,5383,5.005714965,0
2903,,,257,11,,3070,2.851398766,0
2904,,,527,25,,16400,15.73218882,0
2905,,,302,15,,2636,2.432867213,0
2906,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int start = 0;
            
            double value = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    value = new Double(Math.max(value, (true - null) / 10.0));
                }
                true = null;
            }
            
            double previous = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int null =  coockiesNumbers[time];
                previous += Math.min(value * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(previous).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"maxRate:value,newNum:null,current:true,totalEaten:start,totalEatenB:previous,",2729,2.550590249,Beam
2907,,,348,14,,3554,3.337650601,0
2908,,,418,13,,4093,3.900230638,0
2909,,,290,12,,3383,3.091878247,0
2910,,,269,13,,4374,3.946768339,0
2911,,,735,24,,11063,10.83563778,0
2912,,,417,18,,3845,3.629565052,0
2913,,,156,10,,2481,2.286331518,0
2914,,,298,16,,4930,4.594579283,0
2915,,,256,13,,2745,2.552684625,0
2916,,,326,14,,5519,5.179843783,0
2917,,,200,10,,2233,2.057900635,0
2918,,,605,21,,10115,9.709419843,0
2919,,,386,18,,7190,6.496742443,0
2920,,,479,25,,8200,7.639032066,0
2921,,,215,12,,3602,3.243264274,0
2922,,,302,15,,2946,2.691723406,0
2923,,,149,10,,2202,2.011837741,0
2924,,,330,16,,6046,5.615709309,0
2925,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String char[] = reader.readLine().split("" "");
            
            int X = Integer.MIN_VALUE;
            int result1 = 0;
            int dest = 0;
            for(int i = 0; i<char.length-1;i++){
                int id=Integer.parseInt(char[i+1]);
                int i1 = Integer.parseInt(char[i]);
                if((id-i1)<0) result1+=-(id-i1);
                if(-(id-i1)>X) X = -(id-i1);
            }
            for(int i = 0; i<char.length-1;i++){
                int i1 = Integer.parseInt(char[i]);
                if(i1>=X) dest = dest+X;
                else if(i1<X) dest = dest+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+dest+""
"");
        }
        reader.close();
        writer.close();

    }

}",316,15,"max:X,i2:id,str:char,result2:dest,",1632,1.519974573,Beam
2926,,,605,21,,10167,9.742788561,0
2927,,,272,16,,5881,5.359468766,0
2928,,,426,18,,3220,2.990561887,0
2930,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,4.895536939,Beam
2931,,,349,19,,5454,5.064826107,0
2932,,,285,14,,4837,4.413329852,0
2933,,,278,11,,3062,2.810727,0
2934,,,269,16,,5878,5.414344847,0
2935,,,328,16,,5271,4.865943388,0
2937,,,132,9,,1670,1.525695109,0
2938,,,419,16,,6046,5.719146923,0
2939,,,273,11,,2724,2.523813633,0
2940,,,544,17,,5885,5.665570426,0
2941,,,282,13,,4051,3.764715223,0
2942,,,366,17,,6139,5.761833127,0
2943,,,316,15,,4224,3.926382001,0
2944,,,269,16,,5812,5.389621397,0
2945,,,358,16,,5302,4.963869305,0
2946,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer e2, Integer O72) {
                    if(e2 > O72) return 1;
                    else if(e2 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:e2,",2781,2.62494477,Beam
2947,,,211,11,,2791,2.589304781,0
2948,,,255,13,,2946,2.749184597,0
2949,,,655,16,,2392,2.342405935,0
2950,,,348,14,,3883,3.61371218,0
2951,,,360,19,,7029,6.087054316,0
2952,,,211,11,,2791,1.89093198,0
2953,,,280,13,,3163,2.181336212,0
2954,,,305,15,,5172,3.61171784,0
2955,,,224,11,,2791,1.882846355,0
2956,,,619,14,,4293,3.028406151,0
2957,,,326,14,,5147,3.516961086,0
2958,,,358,16,,5302,3.644767535,0
2959,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentRa = 0;
            int true = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int null = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = null;
                if (true > null) {
                    start += true - null;
                    parentRa = new Double(Math.max(parentRa, (true - null) / 10.0));
                }
                true = null;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int null =  coockiesNumbers[time];
                totalEatenB += Math.min(parentRa * 10, true);
                true = null;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentRa,current:true,newNum:null,totalEaten:start,",2605,1.791539764,Beam
2960,,,305,15,,5208,3.621922676,0
2961,,,281,14,,4806,3.309093936,0
2962,,,249,11,,3070,2.109199556,0
2963,,,460,16,,5302,3.759653449,0
2964,,,200,10,,2233,1.535401313,0
2965,,,285,14,,5209,3.61307615,0
2966,,,426,18,,3498,2.476752722,0
2967,,,241,15,,3265,2.266531761,0
2968,,,368,14,,5023,3.530611734,0
2969,,,360,16,,6077,4.287308613,0
2970,,,278,15,,5165,3.5741805,0
2971,,,527,25,,15563,11.11780872,0
2972,,,358,16,,5302,3.731177402,0
2973,,,330,16,,5798,4.014217631,0
2974,,,367,20,,5631,3.960998571,0
2975,,,184,9,,1737,1.202703083,0
2976,,,309,11,,1954,1.370318913,0
2977,,,639,21,,10875,8.135794298,0
2978,,,295,15,,3429,2.371242007,0
2979,,,553,21,,6051,4.39353079,0
2980,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ats = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ats = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ats);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ats,",745,0.498248315,Beam
2981,,,366,17,,6139,4.237002273,0
2982,,,379,17,,6928,4.781692632,0
2983,,,344,15,,4882,3.346072384,0
2984,,,255,13,,3256,2.246052587,0
2985,,,619,14,,4354,3.147596844,0
2986,,,292,15,,5383,3.730416497,0
2987,,,305,15,,5110,3.550776041,0
2988,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int rasemate = 1; rasemate <= cases; rasemate++){
      
      int r = in.nextInt();
      int n = in.nextInt();
      int k = in.nextInt();
      int score = n/k*(r - 1);
      score += (int)Math.ceil((double)n/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + rasemate + "": "" + score);
    }
    out.close();
    in.close();
  }
}",156,10,"w:k,c:n,casenum:rasemate,",745,0.505062962,Beam
2989,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ats = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ats = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ats);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ats,",745,0.498780449,Beam
2990,,,363,16,,6046,4.189208817,0
2991,,,255,13,,3101,2.11285512,0
2992,,,325,16,,6077,4.204724574,0
2993,,,420,19,,7084,4.86472894,0
2994,,,290,12,,3381,2.307789886,0
2995,,,305,15,,5236,3.578698158,0
2996,,,292,16,,4403,2.983328633,0
2997,,,513,26,,16245,11.42096094,0
2998,,,282,13,,4229,2.865274354,0
2999,,,375,12,,3362,2.348724969,0
3000,,,479,25,,8200,7.903164454,0
3001,,,305,15,,5220,4.910262005,0
3002,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int B = sc.nextInt();
            for (int ti = 0; ti < B; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:B,",506,0.513585126,Beam
3003,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    In    = new Scanner(System.in);
        
        int T    = In.nextInt();
        
        for(int mi=0; mi<T; ++mi) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = In.nextInt();
            int        k    = In.nextInt();
            int        q    = In.nextInt();
            int    total    = r*k;
            int    total        = 0;
            
            //    scan
            total    = r*(k/q);
            
            if(k % q == 0) {
                total    += q-1;
            } else if( q == 1) {
            } else {
                total    += q;
            }
            
            int    ret    = total;
            
            System.out.println(""Case #"" + (mi+1) + "": "" + ret);
        }
        
        In.close();
    }
}",171,10,"w:q,c:k,scanIn:In,ret1:total,i:mi,",1427,1.325673123,Beam
3004,,,321,13,,4093,3.847734324,0
3005,,,311,17,,6623,6.120113568,0
3006,,,393,16,,5292,4.944637867,0
3007,,,443,17,,5210,4.942036243,0
3008,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner request = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = request.nextInt();
        for (int f = 1; f <= tc; f++) {
            int f, id = 0, id = 0, wy = 0, f = 0;
            f = request.nextInt();
            int dim[] = new int[f];

            for (int fc = 0; fc < f; fc++) {
                dim[fc] = request.nextInt();

            }
            for (int fc = 1; fc < f; fc++) {
                id = dim[fc - 1] - dim[fc];
                if (id >= wy) {
                    wy = id;
                }
                if (id >= 0) {
                    id += id;
                }
            }
            for (int fc = 0; fc < f - 1; fc++) {
                if (dim[fc] <= wy) {
                    f += dim[fc];
                }
                if (dim[fc] > wy) {
                    f += wy;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:wy,c:fc,m:dim,d:id,z:f,b:f,x:id,e:f,input:request,",3411,3.111756043,Beam
3009,,,527,25,,16400,15.55913606,0
3010,,,269,13,,4350,4.126086164,0
3012,,,291,15,,3643,3.374315039,0
3013,,,254,13,,4257,3.933824488,0
3014,,,330,16,,6077,5.660526733,0
3015,,,605,21,,10429,10.0392729,0
3016,,,500,19,,8867,8.441252939,0
3018,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] address = new long[2];
        
        for (int tt = 1; tt <= T; tt++){
            long K = in.nextLong();
            
            Queue<Long> stack = new LinkedList<>();
            HashSet<Long> V = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            stack.add(1L);
            V.add(1L);
            distance.put(1L, 0L);
            
            while(!stack.isEmpty()){
                long name = stack.poll();
                
                if (name == K){
                    break;
                }
                
                address[0] = name + 1;
                StringBuilder atter = new StringBuilder(Long.toString(name));
                address[1] = Long.parseLong(atter.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!V.contains(address[i]) && address[i] <= K && address[i] > name){
                        stack.add(address[i]);
                        V.add(address[i]);
                        distance.put(address[i], distance.get(name) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", tt, distance.get(K) + 1));
        }
    }
}",325,14,"N:K,number:name,next:address,S:V,t:tt,queue:stack,builder:atter,",3295,3.078303659,Beam
3019,,,149,10,,2481,2.271150215,0
3020,,,295,15,,3491,3.250290561,0
3021,,,250,11,,3070,2.855437183,0
3022,,,306,13,,3256,3.043807077,0
3023,,,366,17,,6077,5.747966099,0
3024,,,500,19,,8875,8.427801192,0
3025,,,291,15,,3599,3.336000037,0
3026,,,478,22,,11682,11.1545876,0
3027,,,443,17,,5373,5.153443054,0
3028,,,309,11,,2264,2.135979056,0
3030,,,460,16,,5303,5.097563306,0
3031,,,260,11,,2512,2.375459321,0
3032,,,256,13,,3033,2.857187486,0
3033,,,324,13,,4434,4.176999633,0
3034,,,198,10,,2401,2.237895993,0
3035,,,348,14,,3709,3.498814464,0
3036,,,256,13,,3303,3.039127342,0
3037,,,328,16,,5147,4.754780412,0
3038,,,426,18,,3374,3.20905811,0
3039,,,873,18,,6769,6.777484485,0
3040,,,330,16,,5891,5.485420664,0
3041,,,240,12,,3308,3.046579222,0
3042,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, K, i, cur, maxtic, s1, s2, rh52;
        double R;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            K = sc.nextInt();
            m = new int[K];
            cur = 0;
            maxtic = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < K; i++) {
                m[i] = sc.nextInt();
                maxtic = Math.max(cur - m[i], maxtic);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            R = (double)maxtic / 10;
            
            rh52 = (int)(R*10);
            cur = 0;
            for(i = 0; i < K; i++) {
                s2 += Math.min(rh52,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"rate:R,maxdif:maxtic,N:K,r10:rh52,",1706,1.568234352,Beam
3043,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dat = new int[l+1];
                dat[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dat[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dat[j] = Math.max(dat[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dat[l]);
                fout.write(""Case #"" + i + "": "" + dat[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dat,",1391,1.295698285,Beam
3044,,,655,16,,2579,2.522441336,0
3045,,,255,13,,3194,2.934270744,0
3046,,,280,13,,3163,2.915922542,0
3047,,,290,12,,3379,3.108477942,0
3048,,,443,17,,5371,4.983533041,0
3049,,,302,15,,2636,2.428150415,0
3050,,,735,24,,11266,11.16980386,0
3051,,,423,7,,743,0.715898335,0
3052,,,393,16,,5284,4.904897777,0
3053,,,326,14,,5209,4.80804441,0
3054,,,280,13,,3163,2.920867229,0
3055,,,250,11,,3070,2.834672034,0
3056,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int v = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=v) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+v-1);
    }
    System.out.println(res);
  }
}",187,12,"w:v,",311,0.283835574,Beam
3057,,,290,12,,3690,3.426065775,0
3058,,,198,10,,2157,2.006966925,0
3059,,,375,12,,3364,3.175816429,0
3060,,,290,12,,3691,3.481276814,0
3061,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int r = Integer.parseInt(br.readLine());
        for (int i = 1; i <= r; i++) {
            int an2 = 0;
            int ans2 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] payAS = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int next = 0; next < payAS.length; next++)
                payAS[next] = Integer.parseInt(raw[next]);

            //1
            for (int next = 0; next < payAS.length - 1; next++) {
                int w = payAS[next];
                int size = payAS[next + 1];
                
                if (size < w)
                    an2 += (w - size);
            }
            
            //2
            int r = Integer.MIN_VALUE;
            for (int next = 0; next < payAS.length - 1; next++) {
                int w = payAS[next];
                int size = payAS[next + 1];
                
                int count = w - size;
                if (count > r)
                    r = count;
            }
            
            for (int next = 0; next < payAS.length - 1; next++) {
                if (payAS[next] < r)
                    ans2 += payAS[next];
                else
                    ans2 += r;
            }
            
            pw.println(String.format(prefix, i, an2, ans2));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:r,f:w,j:next,n:w,s:size,datas:payAS,t:r,c:count,ans1:an2,",5339,3.656387111,Beam
3062,,,443,17,,5453,5.157628183,0
3063,,,443,17,,4970,4.704464428,0
3064,,,605,21,,9955,9.594380983,0
3065,,,443,17,,4985,4.722532586,0
3066,,,291,12,,3721,3.473501686,0
3067,,,305,15,,5156,4.812676275,0
3068,,,408,17,,5323,5.042713543,0
3069,,,358,18,,6612,6.231376866,0
3070,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,4.935112822,Beam
3071,,,278,11,,2748,2.514697961,0
3072,,,262,14,,3504,3.266975256,0
3073,,,513,26,,17496,16.73051983,0
3074,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.424566487,Beam
3075,,,500,19,,8871,8.202743653,0
3076,,,184,9,,1954,1.821577628,0
3077,,,281,14,,4837,4.521187476,0
3078,,,334,12,,3351,3.171872099,0
3079,,,325,14,,5169,4.814095581,0
3080,,,272,16,,6010,5.553783592,0
3081,,,500,19,,8529,8.027914035,0
3082,,,639,21,,11112,10.94861462,0
3083,,,250,11,,2791,2.572816249,0
3084,,,149,10,,2233,2.029013332,0
3085,,,311,17,,6668,6.047863392,0
3086,,,500,19,,8485,8.039352441,0
3087,,,349,19,,5454,5.175129112,0
3088,,,355,19,,6421,6.033462767,0
3089,,,257,11,,2791,2.588603787,0
3090,,,468,20,,8838,8.415279714,0
3091,,,280,13,,3132,2.940396972,0
3092,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outer = new BufferedWriter(new FileWriter(""A-large.out""));
            String day = null;
            day = lock.readLine();
            
            int h = Integer.parseInt(day);
            for(int i=0;i<h;i++){
                day = lock.readLine();
                int W = Integer.parseInt(day);
                day = lock.readLine();
                String [] targets = day.split("" "");                
                int [] Vector = new int [W];
                for (int y=0;y<W;y++){
                    Vector[y]= Integer.parseInt(targets[y]);
                }
                int p=0,body=0,h=0;
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>Vector[y+1]){
                        p=p+Vector[y]-Vector[y+1];
                        if (Vector[y]-Vector[y+1]>h){
                            h=Vector[y]-Vector[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>=h){
                        body=body+h;
                    } else{
                        body=body+Vector[y];
                    }
                }
                
                System.outer.println(""Case #"" + (i+1) +"": "" + p + "" "" + body);    
                outer.write(""Case #"" + (i+1) +"": "" + p + "" "" + body + ""
"");
            }
            lock.close();    
            outer.close();
        } catch (FileNotFoundException ception) {
            System.outer.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.outer.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.outer.println(""Running time is ""+(endTime-startFile)+""ms"");

    }

}",443,17,"max:h,N:W,k:y,T:h,V:Vector,b:body,line:day,a:p,in:lock,tokens:targets,out:outer,e:ception,startTime:startFile,",4626,4.410700385,Beam
3093,,,262,14,,3504,3.214376553,0
3094,,,417,19,,6848,6.46062419,0
3095,,,298,16,,4558,4.211347699,0
3096,,,256,13,,3002,2.770819906,0
3097,,,348,14,,3517,3.251319726,0
3098,,,517,26,,11998,11.18894419,0
3099,,,321,13,,4372,3.707142981,0
3100,,,406,19,,7844,6.918852043,0
3101,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outer = new BufferedWriter(new FileWriter(""A-large.out""));
            String day = null;
            day = lock.readLine();
            
            int h = Integer.parseInt(day);
            for(int i=0;i<h;i++){
                day = lock.readLine();
                int W = Integer.parseInt(day);
                day = lock.readLine();
                String [] targets = day.split("" "");                
                int [] Vector = new int [W];
                for (int y=0;y<W;y++){
                    Vector[y]= Integer.parseInt(targets[y]);
                }
                int p=0,body=0,h=0;
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>Vector[y+1]){
                        p=p+Vector[y]-Vector[y+1];
                        if (Vector[y]-Vector[y+1]>h){
                            h=Vector[y]-Vector[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>=h){
                        body=body+h;
                    } else{
                        body=body+Vector[y];
                    }
                }
                
                System.outer.println(""Case #"" + (i+1) +"": "" + p + "" "" + body);    
                outer.write(""Case #"" + (i+1) +"": "" + p + "" "" + body + ""
"");
            }
            lock.close();    
            outer.close();
        } catch (FileNotFoundException ception) {
            System.outer.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.outer.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.outer.println(""Running time is ""+(endTime-startFile)+""ms"");

    }

}",443,17,"max:h,N:W,k:y,T:h,V:Vector,b:body,line:day,a:p,in:lock,tokens:targets,out:outer,e:ception,startTime:startFile,",4626,4.286243459,Beam
3102,,,366,17,,6139,5.708366148,0
3103,,,448,20,,9615,8.997968443,0
3104,,,420,19,,7084,6.573449687,0
3105,,,306,13,,2915,2.676864858,0
3106,,,260,11,,2512,2.323206516,0
3107,,,169,10,,2233,2.01342655,0
3108,,,371,12,,3380,3.0916779,0
3109,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ats = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ats = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ats);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ats,",745,0.665079478,Beam
3110,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String part = in.readLine();
        int n = Integer.parseInt(part);
        for(int i=0; i<n; i++){
            part = in.readLine();
            String[] arr = part.split("" "");
            int r = Integer.parseInt(arr[0]);
            int k = Integer.parseInt(arr[1]);
            int v = Integer.parseInt(arr[2]);
            long weight = 0;
            
            for(int x = 0; x < r-1; x++){
                weight = weight + (k/v);
            }
            if(k-v == 0){
                weight = weight + v;
            }else if(k-v < v){
                weight = v + 1;
            }else{
                weight = (long) (weight + Math.ceil((double)k/(double)v));
                weight = weight + v - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+weight+""
"");
            writer.write(""Case #""+(i+1)+"": ""+weight+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:v,c:k,min:weight,line:part,",1551,1.426669276,Beam
3111,,,303,12,,2575,2.377538582,0
3112,,,187,13,,2002,1.865331229,0
3113,,,406,19,,7937,7.438980738,0
3114,,,272,16,,5873,5.423900811,0
3115,,,292,17,,6689,6.281154291,0
3116,,,149,10,,2481,2.288933698,0
3117,,,200,10,,2233,2.072565862,0
3118,,,250,11,,3070,2.874406819,0
3120,,,240,13,,2185,2.048981082,0
3121,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outer = new BufferedWriter(new FileWriter(""A-large.out""));
            String day = null;
            day = lock.readLine();
            
            int h = Integer.parseInt(day);
            for(int i=0;i<h;i++){
                day = lock.readLine();
                int W = Integer.parseInt(day);
                day = lock.readLine();
                String [] targets = day.split("" "");                
                int [] Vector = new int [W];
                for (int y=0;y<W;y++){
                    Vector[y]= Integer.parseInt(targets[y]);
                }
                int p=0,body=0,h=0;
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>Vector[y+1]){
                        p=p+Vector[y]-Vector[y+1];
                        if (Vector[y]-Vector[y+1]>h){
                            h=Vector[y]-Vector[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>=h){
                        body=body+h;
                    } else{
                        body=body+Vector[y];
                    }
                }
                
                System.outer.println(""Case #"" + (i+1) +"": "" + p + "" "" + body);    
                outer.write(""Case #"" + (i+1) +"": "" + p + "" "" + body + ""
"");
            }
            lock.close();    
            outer.close();
        } catch (FileNotFoundException ception) {
            System.outer.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.outer.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.outer.println(""Running time is ""+(endTime-startFile)+""ms"");

    }

}",443,17,"max:h,N:W,k:y,T:h,V:Vector,b:body,line:day,a:p,in:lock,tokens:targets,out:outer,e:ception,startTime:startFile,",4626,4.391138434,Beam
3122,,,379,17,,6916,6.497187062,0
3123,,,269,13,,4037,3.805664305,0
3124,,,290,12,,3690,3.415093736,0
3125,,,655,16,,2353,2.316908773,0
3126,,,358,16,,5302,4.92987481,0
3127,,,330,16,,5302,4.838034157,0
3128,,,360,16,,6046,5.516048714,0
3129,,,272,16,,5702,5.203561827,0
3130,,,306,16,,5240,4.804409047,0
3131,,,619,14,,4333,4.122633437,0
3132,,,269,16,,5884,5.43206387,0
3133,,,298,16,,4527,4.15766209,0
3134,,,393,19,,6570,6.086307832,0
3135,,,349,19,,5360,5.052119013,0
3136,,,366,17,,6139,5.731148708,0
3137,,,254,13,,3908,3.615500605,0
3138,,,393,19,,7058,6.610803072,0
3139,,,295,16,,5302,4.927132042,0
3140,,,311,17,,6308,5.892549817,0
3141,,,256,13,,4051,3.757525643,0
3142,,,264,15,,5050,4.71128426,0
3143,,,367,20,,5569,5.143077366,0
3144,,,250,11,,2760,2.523546465,0
3145,,,309,11,,2202,2.033448112,0
3147,,,281,14,,4838,4.445032136,0
3148,,,418,13,,4062,3.805679603,0
3150,,,375,12,,3272,3.065808539,0
3151,,,517,26,,12244,11.72262752,0
3152,,,655,16,,2361,2.317965504,0
3153,,,326,14,,4837,4.489055212,0
3154,,,262,14,,3504,3.230648621,0
3155,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int C = sc.nextInt();
            for (int ti = 0; ti < C; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:C,",506,0.502684228,Beam
3156,,,306,13,,3256,3.023441637,0
3157,,,605,21,,10125,9.739610283,0
3158,,,619,14,,4684,4.494157871,0
3159,,,334,15,,5240,4.911397207,0
3160,,,311,17,,6653,6.226840401,0
3161,,,790,14,,5209,5.223369539,0
3162,,,366,17,,6139,5.77661341,0
3163,,,326,14,,4806,4.459646344,0
3164,,,464,17,,5358,4.94713649,0
3165,,,344,15,,4853,4.432663194,0
3166,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.444835238,Beam
3167,,,269,16,,5884,5.404036733,0
3168,,,280,13,,3163,2.931336327,0
3169,,,406,17,,5322,4.979831251,0
3170,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int GR = in.nextInt();
            int N = in.nextInt();
            int[][] GB = new int[GR][N];
            for (int i = 0; i < GR; i++) {
                String SC = in.next();
                for (int v = 0; v < N; v++) {
                    char op = SC.charAt(v);
                    if (op == '.')
                        GB[i][v] = EMPOWER;
                    else if (op == '<')
                        GB[i][v] = LEFT;
                    else if (op == '>')
                        GB[i][v] = WRIGHT;
                    else if (op == 'v')
                        GB[i][v] = DIR;
                    else if (op == '^')
                        GB[i][v] = UP;
                }
            }
            int ans = 0;
            for (int b = 0; b < GR; b++) {
                for (int op = 0; op < N; op++) {
                    if (GB[b][op] == EMPOWER)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int NR = b + di[d];
                        int nc = op + dc[d];
                        ok[d] = false;
                        while (0 <= NR && NR < GR && 0 <= nc && nc < N) {
                            if (GB[NR][nc] != EMPOWER) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            NR += di[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[GB[b][op]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] di = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPOWER = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DIR = 3;
    static int WRIGHT = 4;
}",513,26,"C:N,EMPTY:EMPOWER,j:v,c:op,DOWN:DIR,RIGHT:WRIGHT,nr:NR,R:GR,dr:di,r:b,G:GB,S:SC,",11673,11.09662157,Beam
3171,,,255,13,,2822,2.579815837,0
3172,,,544,17,,5864,5.64692593,0
3173,,,326,14,,4837,4.485829647,0
3174,,,790,14,,5147,4.96284978,0
3175,,,325,16,,6015,5.520724869,0
3176,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String part = in.readLine();
        int n = Integer.parseInt(part);
        for(int i=0; i<n; i++){
            part = in.readLine();
            String[] arr = part.split("" "");
            int r = Integer.parseInt(arr[0]);
            int k = Integer.parseInt(arr[1]);
            int v = Integer.parseInt(arr[2]);
            long weight = 0;
            
            for(int x = 0; x < r-1; x++){
                weight = weight + (k/v);
            }
            if(k-v == 0){
                weight = weight + v;
            }else if(k-v < v){
                weight = v + 1;
            }else{
                weight = (long) (weight + Math.ceil((double)k/(double)v));
                weight = weight + v - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+weight+""
"");
            writer.write(""Case #""+(i+1)+"": ""+weight+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:v,c:k,min:weight,line:part,",1551,1.424235062,Beam
3177,,,406,16,,5922,5.560481163,0
3178,,,618,26,,10812,10.56080615,0
3179,,,328,16,,5240,4.811675747,0
3180,,,198,10,,2411,2.186576744,0
3181,,,309,11,,1985,1.825109092,0
3182,,,156,10,,2481,2.250505936,0
3185,,,303,12,,2949,2.720753849,0
3186,,,479,25,,8164,7.670235058,0
3187,,,393,16,,5284,4.915609086,0
3188,,,309,11,,2264,2.067633502,0
3189,,,291,12,,3721,3.42146709,0
3190,,,406,19,,7937,7.391428304,0
3191,,,423,7,,917,0.857834478,0
3192,,,363,16,,6077,5.622872142,0
3193,,,363,16,,6077,5.656027007,0
3194,,,655,16,,2341,2.29769607,0
3195,,,290,12,,3375,3.144858213,0
3196,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ats = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ats = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ats);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ats,",745,0.683328581,Beam
3197,,,525,23,,12768,12.20650852,0
3198,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int v = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[v] = v + r - 1;
                for(int j = v + 1; j <= 2*v - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = v+1 + r-1;
                }
                for(int j = 2*v; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-v] + r, v + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:v,",310,0.285964561,Beam
3199,,,360,19,,7044,6.61072435,0
3200,,,517,26,,13481,12.9270508,0
3201,,,240,12,,3607,3.329870307,0
3202,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ats = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ats = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ats);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ats,",745,0.687511508,Beam
3203,,,406,16,,6077,5.660210319,0
3204,,,517,26,,12878,12.29613616,0
3205,,,460,16,,5302,4.971997976,0
3206,,,305,15,,5212,4.831495372,0
3207,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner rand = new Scanner(System.in);
        int t = rand.nextInt();
        for(int v = 1; v <= t; ++v){
            int v = rand.nextInt();
            boolean[] foundies = new boolean[2500];
            for(int ip = 0; ip < 2 * v - 1; ++ip){
                for(int j = 0; j < v; ++j){
                    int s = rand.nextInt();
                    foundies[s-1] = !foundies[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + v + "": "");
            for(int ip = 1; ip <= 2500; ++ip){
                if(foundies[ip-1]){
                    ++char;
                    if(char < v){
                        System.out.print(ip + "" "");
                    }
                    else{
                        System.out.println(ip);
                    }
                }
                
            }
        }
    }
}",211,11,"n:v,count:char,soldiers:foundies,x:v,scanner:rand,i:ip,",2047,1.867696265,Beam
3208,,,345,16,,5988,5.595107885,0
3209,,,290,12,,3382,3.133634146,0
3210,,,156,10,,2388,2.173347664,0
3211,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter br = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                br.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(r+"" ""+nOne+"" ""+n01);
                int findRow =r*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                br.print(res);
                br.println();
            }
            br.println();
            br.flush();
            br.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,pw:br,",931,0.87720226,Beam
3212,,,330,16,,5147,4.801341172,0
3213,,,257,11,,3070,2.867722905,0
3214,,,249,11,,3008,2.804101455,0
3215,,,132,9,,1841,1.687162546,0
3216,,,208,12,,2044,1.889768406,0
3217,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,4.884354385,Beam
3218,,,269,13,,4366,4.127727767,0
3219,,,406,17,,5322,4.971837378,0
3220,,,513,26,,17521,16.60338217,0
3221,,,358,16,,5302,4.925955017,0
3223,,,257,11,,2792,2.499919518,0
3224,,,1850,30,,5327,6.064944069,0
3225,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner pc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = pc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int K = pc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = pc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,sc:pc,",475,0.462664183,Beam
3226,,,328,16,,5178,4.724567815,0
3227,,,295,15,,3130,2.900219854,0
3228,,,406,19,,7937,7.455234571,0
3229,,,257,11,,2791,2.55818671,0
3230,,,619,14,,4676,4.482235459,0
3231,,,305,15,,5204,4.862305415,0
3232,,,262,14,,3132,2.913092685,0
3233,,,211,11,,3070,2.8308538,0
3234,,,386,18,,7387,6.883332018,0
3235,,,290,12,,3382,3.140950457,0
3236,,,330,16,,5457,5.110378075,0
3237,,,273,11,,2953,2.738123186,0
3238,,,256,13,,4045,3.739075768,0
3239,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r10;
        double R;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            R = (double)maxdif / 10;
            
            r10 = (int)(R*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:R,",621,0.569957713,Beam
3240,,,292,16,,4403,4.092020933,0
3241,,,292,17,,6671,6.156881495,0
3242,,,418,13,,4093,3.86099631,0
3243,,,292,16,,4527,4.246620417,0
3244,,,371,12,,3721,3.465110437,0
3245,,,405,15,,5240,4.891436569,0
3247,,,240,12,,3620,3.364837309,0
3248,,,426,18,,3374,3.192773223,0
3249,,,553,21,,6116,5.926981048,0
3250,,,375,12,,3670,3.437924023,0
3251,,,281,14,,4837,4.453848803,0
3252,,,358,18,,6710,6.259953153,0
3253,,,269,13,,3982,3.749466523,0
3254,,,305,15,,5212,4.880190261,0
3255,,,306,13,,2946,2.718283514,0
3256,,,460,16,,5302,4.967394054,0
3257,,,291,12,,3659,3.373136791,0
3258,,,236,16,,4868,4.522380372,0
3259,,,359,15,,3287,3.065209182,0
3260,,,327,16,,3902,3.658023636,0
3261,,,263,13,,4434,4.075966211,0
3262,,,271,12,,3505,3.207879917,0
3263,,,255,13,,2946,2.681758777,0
3265,,,326,14,,4807,4.411960832,0
3266,,,358,16,,5302,4.877237233,0
3267,,,149,10,,2481,2.250070858,0
3268,,,475,18,,7844,7.319879051,0
3269,,,305,15,,5224,4.831383828,0
3270,"class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();
            
            long ans = (R - 1) * C;
            
            if (C % W == 0) {
                out.println (ans + C/W - 1 + W);
            } else {
                out.println (ans + C/W + W);
            }
        }

    }
}","class SolutionA {
    static Scanner scanner = new Scanner (System.in);
    static PrintStream out = System.out;

    public static void main(String[] args) {
        long T = Long.valueOf(scanner.next());

        for (long i = 1; i <= T; ++i) {
            System.out.print(""Case #"" + i + "": "");
            long R = scanner.nextLong(), K = scanner.nextLong(), X = scanner.nextLong();
            
            long ans = (R - 1) * K;
            
            if (K % X == 0) {
                out.println (ans + K/X - 1 + X);
            } else {
                out.println (ans + K/X + X);
            }
        }

    }
}",156,10,"W:X,C:K,",493,0.44907215,Beam
3271,,,406,19,,7999,7.510556682,0
3272,,,208,12,,2044,1.895269358,0
3273,,,292,17,,6958,6.402199543,0
3274,,,215,12,,3664,3.341349769,0
3275,,,282,13,,4229,3.904135883,0
3276,,,309,11,,2264,2.088723735,0
3277,,,311,17,,6730,6.24172202,0
3278,,,308,12,,1396,1.297954186,0
3279,,,265,12,,3600,3.312817887,0
3280,,,198,10,,2411,2.198913999,0
3281,,,358,18,,6702,6.245095845,0
3282,,,326,14,,4837,4.45380737,0
3283,,,426,18,,3901,3.633664159,0
3285,,,281,14,,5210,4.791145635,0
3286,,,256,13,,3240,2.942385932,0
3287,,,258,14,,4713,4.086208268,0
3288,,,358,18,,6556,6.089863682,0
3289,,,423,7,,743,0.7085205,0
3290,,,419,16,,6015,5.660847219,0
3291,,,887,27,,6776,6.794728188,0
3292,,,735,24,,11165,10.91057392,0
3293,,,256,13,,3383,3.096957608,0
3294,,,399,18,,6263,5.584716423,0
3296,,,419,16,,6078,5.645456612,0
3297,,,334,15,,5240,4.883774102,0
3298,,,618,26,,10992,10.62497298,0
3299,,,240,13,,2159,1.99553984,0
3300,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String l = in.readLine();
        int n = Integer.parseInt(l);
        for(int i=0; i<n; i++){
            l = in.readLine();
            String[] arr = l.split("" "");
            int l = Integer.parseInt(arr[0]);
            int l = Integer.parseInt(arr[1]);
            int Min = Integer.parseInt(arr[2]);
            long diff = 0;
            
            for(int x = 0; x < l-1; x++){
                diff = diff + (l/Min);
            }
            if(l-Min == 0){
                diff = diff + Min;
            }else if(l-Min < Min){
                diff = Min + 1;
            }else{
                diff = (long) (diff + Math.ceil((double)l/(double)Min));
                diff = diff + Min - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+diff+""
"");
            writer.write(""Case #""+(i+1)+"": ""+diff+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"min:diff,w:Min,c:l,r:l,line:l,",2047,1.896590658,Beam
3301,,,211,11,,3070,2.816525018,0
3302,,,290,12,,3381,3.158929086,0
3303,,,260,11,,2512,2.331555231,0
3304,,,443,17,,5257,4.993636219,0
3305,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int k = scanner.nextInt();
            boolean[] fronties = new boolean[2500];
            for(int i = 0; i < 2 * k - 1; ++i){
                for(int j = 0; j < k; ++j){
                    int s = scanner.nextInt();
                    fronties[s-1] = !fronties[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(fronties[i-1]){
                    ++char;
                    if(char < k){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:k,count:char,soldiers:fronties,",838,0.772855977,Beam
3306,,,393,19,,6736,6.293280415,0
3307,,,418,13,,4248,3.99182922,0
3308,,,306,16,,5302,4.931896536,0
3309,,,255,13,,2698,2.488270319,0
3310,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i0, Integer O72) {
                    if(i0 > O72) return 1;
                    else if(i0 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i0,",2781,2.014177004,Beam
3311,,,281,14,,5209,4.807562828,0
3312,,,655,16,,2353,2.289895193,0
3313,,,393,16,,5282,4.91401933,0
3314,,,241,15,,3220,2.961234899,0
3315,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outer = new BufferedWriter(new FileWriter(""A-large.out""));
            String day = null;
            day = lock.readLine();
            
            int h = Integer.parseInt(day);
            for(int i=0;i<h;i++){
                day = lock.readLine();
                int W = Integer.parseInt(day);
                day = lock.readLine();
                String [] targets = day.split("" "");                
                int [] Vector = new int [W];
                for (int y=0;y<W;y++){
                    Vector[y]= Integer.parseInt(targets[y]);
                }
                int p=0,body=0,h=0;
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>Vector[y+1]){
                        p=p+Vector[y]-Vector[y+1];
                        if (Vector[y]-Vector[y+1]>h){
                            h=Vector[y]-Vector[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>=h){
                        body=body+h;
                    } else{
                        body=body+Vector[y];
                    }
                }
                
                System.outer.println(""Case #"" + (i+1) +"": "" + p + "" "" + body);    
                outer.write(""Case #"" + (i+1) +"": "" + p + "" "" + body + ""
"");
            }
            lock.close();    
            outer.close();
        } catch (FileNotFoundException ception) {
            System.outer.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.outer.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.outer.println(""Running time is ""+(endTime-startFile)+""ms"");

    }

}",443,17,"max:h,N:W,k:y,T:h,V:Vector,b:body,line:day,a:p,in:lock,tokens:targets,out:outer,e:ception,startTime:startFile,",4626,4.363242972,Beam
3316,,,302,15,,2946,2.723364242,0
3317,,,443,17,,5257,4.948585689,0
3318,,,344,15,,4853,4.500956341,0
3320,,,298,16,,4528,4.205246051,0
3321,,,393,16,,5282,4.939372349,0
3322,,,328,16,,5240,4.816816207,0
3323,,,443,17,,4985,4.602651672,0
3324,,,553,21,,5874,5.477925313,0
3325,,,544,17,,5871,5.562975367,0
3326,,,475,18,,7875,7.413946466,0
3327,,,363,16,,6015,5.617627629,0
3328,,,292,17,,6832,6.344579434,0
3329,,,386,18,,7200,6.760883721,0
3330,,,280,13,,3163,2.942298857,0
3331,,,443,17,,5586,5.296012513,0
3332,,,215,12,,3637,3.366780794,0
3333,,,267,13,,4383,4.05219514,0
3334,,,260,13,,4093,3.78351558,0
3335,,,281,14,,4837,4.441976527,0
3336,,,426,18,,3467,3.226042867,0
3337,,,367,20,,5627,5.194548281,0
3338,,,255,13,,2884,2.630207054,0
3339,,,273,11,,2719,2.458014647,0
3340,,,348,21,,7979,7.440093974,0
3341,,,300,13,,3364,3.098257426,0
3342,,,263,13,,4093,3.72959561,0
3343,,,500,19,,8859,8.352602967,0
3344,,,406,19,,7999,7.468766721,0
3345,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroymNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentTime = 0;
            int true = Integer.parseInt(mushroymNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int number = Integer.parseInt(mushroymNumbers[time]);
                coockiesNumbers[time] = number;
                if (true > number) {
                    start += true - number;
                    parentTime = new Double(Math.max(parentTime, (true - number) / 10.0));
                }
                true = number;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int number =  coockiesNumbers[time];
                totalEatenB += Math.min(parentTime * 10, true);
                true = number;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentTime,current:true,newNum:number,totalEaten:start,mushroormNumbers:mushroymNumbers,",3101,2.924773892,Beam
3346,,,406,19,,7999,7.488555908,0
3347,,,269,16,,5891,5.468206847,0
3348,,,317,14,,4837,4.500139825,0
3349,,,302,15,,3008,2.779539585,0
3350,,,330,16,,5147,4.793801447,0
3351,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int v = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=v) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+v-1);
    }
    System.out.println(res);
  }
}",187,12,"w:v,",311,0.284254559,Beam
3352,,,479,25,,7981,7.531832957,0
3353,,,295,15,,3130,2.886974136,0
3354,,,334,15,,5209,4.830469088,0
3355,,,406,16,,5953,5.636128819,0
3356,,,479,25,,8279,7.561947759,0
3357,,,308,12,,1768,1.606492047,0
3358,,,325,14,,4805,4.460182881,0
3359,,,269,13,,4029,3.808670497,0
3360,,,417,19,,6918,6.539263185,0
3361,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r10;
        double R;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            R = (double)maxdif / 10;
            
            r10 = (int)(R*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:R,",621,0.579455952,Beam
3363,,,321,18,,6907,6.46276205,0
3364,,,200,10,,2481,2.263958836,0
3365,,,348,14,,3895,3.616526882,0
3366,,,240,12,,3393,3.115190148,0
3367,,,363,16,,6077,5.611884467,0
3368,,,619,14,,4684,4.437716822,0
3369,,,345,16,,6005,5.581324673,0
3370,,,321,18,,6906,6.385275694,0
3371,,,263,13,,4093,3.771650374,0
3372,,,295,15,,3099,2.874252435,0
3373,,,184,9,,1737,1.594433566,0
3375,,,306,16,,5241,4.858351815,0
3376,,,513,26,,15781,14.92146492,0
3377,,,262,14,,3101,2.866891483,0
3378,,,406,19,,7813,7.307013981,0
3379,,,408,17,,5681,5.363095212,0
3380,,,553,21,,5968,5.73102531,0
3381,,,198,10,,2217,2.045882706,0
3382,,,291,12,,3411,3.15753897,0
3383,,,269,16,,5891,5.47105242,0
3384,,,256,13,,3108,2.873855142,0
3385,"class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String line = in.readLine();
        int n = Integer.parseInt(line);
        for(int i=0; i<n; i++){
            line = in.readLine();
            String[] arr = line.split("" "");
            int r = Integer.parseInt(arr[0]);
            int c = Integer.parseInt(arr[1]);
            int w = Integer.parseInt(arr[2]);
            long min = 0;
            
            for(int x = 0; x < r-1; x++){
                min = min + (c/w);
            }
            if(c-w == 0){
                min = min + w;
            }else if(c-w < w){
                min = w + 1;
            }else{
                min = (long) (min + Math.ceil((double)c/(double)w));
                min = min + w - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+min+""\n"");
            writer.write(""Case #""+(i+1)+"": ""+min+""\n"");
        }
        in.close();
        writer.close();
    }
}","class ASmall {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new FileReader(""A-small-attempt1.in""));
        BufferedWriter writer = new BufferedWriter(new FileWriter(""A-small-attempt1.out""));
        
        String part = in.readLine();
        int n = Integer.parseInt(part);
        for(int i=0; i<n; i++){
            part = in.readLine();
            String[] arr = part.split("" "");
            int r = Integer.parseInt(arr[0]);
            int k = Integer.parseInt(arr[1]);
            int v = Integer.parseInt(arr[2]);
            long weight = 0;
            
            for(int x = 0; x < r-1; x++){
                weight = weight + (k/v);
            }
            if(k-v == 0){
                weight = weight + v;
            }else if(k-v < v){
                weight = v + 1;
            }else{
                weight = (long) (weight + Math.ceil((double)k/(double)v));
                weight = weight + v - 1;
            }
            System.out.println(""Case #""+(i+1)+"": ""+weight+""
"");
            writer.write(""Case #""+(i+1)+"": ""+weight+""
"");
        }
        in.close();
        writer.close();
    }
}",291,13,"w:v,c:k,min:weight,line:part,",1551,1.419593942,Beam
3386,,,406,17,,5322,4.948088332,0
3387,,,419,16,,6077,5.669370349,0
3388,,,330,16,,5891,5.510171962,0
3389,,,500,19,,8859,8.363918483,0
3390,,,406,17,,5322,4.999594486,0
3391,,,305,15,,5160,4.784201674,0
3392,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int c = Integer.parseInt(br.readLine());
            String[] mushroymNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int start = 0;
            
            double parentTime = 0;
            int true = Integer.parseInt(mushroymNumbers[0]);
            coockiesNumbers[0] = true;
            
            
            for (int time = 1; time < c; ++time) {
                int number = Integer.parseInt(mushroymNumbers[time]);
                coockiesNumbers[time] = number;
                if (true > number) {
                    start += true - number;
                    parentTime = new Double(Math.max(parentTime, (true - number) / 10.0));
                }
                true = number;
            }
            
            double totalEatenB = 0;
            true = coockiesNumbers[0];
            for (int time = 1; time < c; ++time) {
                int number =  coockiesNumbers[time];
                totalEatenB += Math.min(parentTime * 10, true);
                true = number;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + start + "" "" + new Double(totalEatenB).intValue() + ""
"");
        }

        writer.close();
        br.close();
    }
}",334,15,"totalTime:c,maxRate:parentTime,current:true,newNum:number,totalEaten:start,mushroormNumbers:mushroymNumbers,",3101,2.87624385,Beam
3393,,,368,14,,4837,4.481998909,0
3394,,,255,13,,2605,2.394692258,0
3395,,,321,18,,6606,6.120080996,0
3396,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    rand    = new Scanner(System.in);
        
        int T    = rand.nextInt();
        
        for(int slice=0; slice<T; ++slice) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = rand.nextInt();
            int        k    = rand.nextInt();
            int        q    = rand.nextInt();
            int    total    = r*k;
            int    total        = 0;
            
            //    scan
            total    = r*(k/q);
            
            if(k % q == 0) {
                total    += q-1;
            } else if( q == 1) {
            } else {
                total    += q;
            }
            
            int    ret    = total;
            
            System.out.println(""Case #"" + (slice+1) + "": "" + ret);
        }
        
        rand.close();
    }
}",171,10,"w:q,c:k,scanIn:rand,ret1:total,i:slice,",1427,1.302356656,Beam
3397,,,272,16,,5689,5.18587354,0
3398,,,368,14,,4837,4.372808206,0
3399,,,448,20,,9455,8.778176463,0
3400,,,358,16,,5302,4.937148452,0
3401,,,406,16,,6077,5.753283584,0
3402,,,328,16,,5302,4.909833066,0
3403,,,468,14,,3566,3.397599709,0
3404,,,359,15,,3380,3.17170163,0
3405,,,291,12,,3411,3.190214503,0
3406,,,460,16,,5302,5.000944658,0
3407,,,525,23,,13557,12.92417327,0
3408,,,224,11,,3070,2.831579574,0
3409,,,358,18,,6580,6.171367041,0
3410,,,246,15,,4810,4.440130778,0
3411,,,250,11,,2791,2.589521646,0
3412,,,468,20,,9000,8.494967369,0
3413,,,348,14,,3548,3.317144605,0
3414,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int C = sc.nextInt();
            for (int ti = 0; ti < C; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:C,",506,0.506112397,Beam
3415,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, r10000;
        double R;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            R = (double)maxdif / 10;
            
            r10000 = (int)(R*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(r10000,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:R,r10:r10000,",1086,1.005295451,Beam
3417,,,250,11,,3071,2.804738379,0
3418,,,426,18,,3961,3.709426645,0
3419,,,257,11,,3070,2.85392555,0
3420,,,265,12,,3387,3.127793105,0
3421,,,406,19,,7937,7.400786606,0
3422,,,348,14,,3548,3.281017431,0
3423,,,525,23,,13505,12.6145963,0
3424,,,328,16,,5302,4.844179539,0
3425,,,432,19,,8960,8.295199541,0
3426,,,257,11,,3070,2.661984428,0
3427,,,443,17,,5237,4.922421324,0
3428,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.264368172,Beam
3429,,,260,11,,2512,2.351587673,0
3430,,,330,16,,5395,5.06059796,0
3431,,,305,15,,5212,4.849557642,0
3432,,,418,13,,4093,3.844717868,0
3433,,,262,14,,3504,3.247039608,0
3434,,,306,16,,5302,4.921262614,0
3435,,,208,12,,2313,2.130449923,0
3436,,,240,13,,2184,2.017325826,0
3437,,,367,20,,5586,5.213549177,0
3438,,,263,13,,4062,3.75120999,0
3439,,,298,16,,4403,4.075690524,0
3440,,,278,15,,5189,4.847249885,0
3441,,,305,15,,5212,4.864174453,0
3442,,,292,17,,6565,6.010892447,0
3443,,,406,16,,6046,5.699279384,0
3444,,,324,13,,4248,3.93561695,0
3445,"class A {
    static Scanner in = new Scanner(System.in);
    
    static PrintStream out = System.out;
    
    public static void main(String[] args) {
        int T = in.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long N = in.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long number = queue.poll();
                
                if (number == N){
                    break;
                }
                
                next[0] = number + 1;
                StringBuilder builder = new StringBuilder(Long.toString(number));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int i = 0; i < 2; i++){
                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){
                        queue.add(next[i]);
                        S.add(next[i]);
                        distance.put(next[i], distance.get(number) + 1);
                    }
                }
            }
            
            out.println(String.format(""Case #%d: %d"", t, distance.get(N) + 1));
        }
    }
}","class A {
    static Scanner string = new Scanner(System.string);
    
    static PrintStream png = System.png;
    
    public static void main(String[] args) {
        int T = string.nextInt();
        
        long[] next = new long[2];
        
        for (int t = 1; t <= T; t++){
            long W = string.nextLong();
            
            Queue<Long> queue = new LinkedList<>();
            HashSet<Long> S = new HashSet<>();
            HashMap<Long, Long> distance = new HashMap<>();
            
            queue.add(1L);
            S.add(1L);
            distance.put(1L, 0L);
            
            while(!queue.isEmpty()){
                long line = queue.poll();
                
                if (line == W){
                    break;
                }
                
                next[0] = line + 1;
                StringBuilder builder = new StringBuilder(Long.toString(line));
                next[1] = Long.parseLong(builder.reverse().toString());
                
                for (int ini = 0; ini < 2; ini++){
                    if (!S.contains(next[ini]) && next[ini] <= W && next[ini] > line){
                        queue.add(next[ini]);
                        S.add(next[ini]);
                        distance.put(next[ini], distance.get(line) + 1);
                    }
                }
            }
            
            png.println(String.format(""Case #%d: %d"", t, distance.get(W) + 1));
        }
    }
}",325,14,"N:W,number:line,i:ini,out:png,in:string,",2250,2.08244832,Beam
3446,,,345,16,,5988,5.563403392,0
3447,,,327,16,,4089,3.810263276,0
3448,,,448,20,,9415,8.931640669,0
3449,,,426,18,,3497,3.301729337,0
3450,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int v = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=v) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+v-1);
    }
    System.out.println(res);
  }
}",187,12,"w:v,",311,0.287751997,Beam
3451,,,169,10,,2233,2.050988543,0
3452,,,273,11,,2711,2.513705929,0
3453,,,282,13,,4351,3.819005044,0
3454,,,309,11,,2264,2.034471194,0
3455,,,285,14,,5209,4.763198829,0
3456,,,366,17,,6139,5.682644832,0
3457,,,187,13,,2310,2.138990394,0
3458,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_filePSIZE=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader buffer = new BufferedReader(new FileReader(new File(INPUT_filePSIZE)));
        BufferedWriter worker = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testcASE = Integer.parseInt(buffer.readLine());
        for(int result=1;result<=testcASE;result++){
            String result="""";
            buffer.readLine();
            String char[] = buffer.readLine().split("" "");
            
            int q = Integer.MIN_VALUE;
            int key = 0;
            int dest = 0;
            for(int err = 0; err<char.length-1;err++){
                int itwo=Integer.parseInt(char[err+1]);
                int i5 = Integer.parseInt(char[err]);
                if((itwo-i5)<0) key+=-(itwo-i5);
                if(-(itwo-i5)>q) q = -(itwo-i5);
            }
            for(int err = 0; err<char.length-1;err++){
                int i5 = Integer.parseInt(char[err]);
                if(i5>=q) dest = dest+q;
                else if(i5<q) dest = dest+i5;
            }
            worker.write(""Case #""+result+"": ""+key+"" ""+dest+""
"");
        }
        buffer.close();
        worker.close();

    }

}",316,15,"max:q,result2:dest,result1:key,i2:itwo,str:char,index:result,i1:i5,i:err,reader:buffer,writer:worker,testCases:testcASE,INPUT_FILE_NAME:INPUT_filePSIZE,",3867,3.644422396,Beam
3459,,,265,12,,3383,3.143819114,0
3460,,,187,13,,2123,1.950052536,0
3461,,,282,13,,4351,4.059624151,0
3462,,,358,18,,6606,6.21309915,0
3463,,,280,13,,3163,2.924893049,0
3464,,,553,21,,6010,5.723667701,0
3465,,,260,11,,2512,2.228510137,0
3466,,,386,18,,7429,6.724177798,0
3467,,,367,20,,5617,5.10973525,0
3468,,,132,9,,1841,1.652583114,0
3469,,,349,19,,5384,4.986859163,0
3470,,,199,10,,1117,1.030888116,0
3471,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int k = scanner.nextInt();
            boolean[] fronties = new boolean[2500];
            for(int i = 0; i < 2 * k - 1; ++i){
                for(int j = 0; j < k; ++j){
                    int s = scanner.nextInt();
                    fronties[s-1] = !fronties[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(fronties[i-1]){
                    ++char;
                    if(char < k){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:k,count:char,soldiers:fronties,",838,0.767079004,Beam
3472,,,169,10,,2481,2.261174226,0
3473,"class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter pw = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                pw.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int c1 = sc.nextInt();
                int n1 = sc.nextInt();
                System.out.println(r+"" ""+c1+"" ""+n1);
                int findRow =r*(c1/n1);
                        int findShip=0;
                        if(c1%n1==0)
                            findShip = n1-1;
                        else
                            findShip = n1;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                pw.print(res);
                pw.println();
            }
            pw.println();
            pw.flush();
            pw.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}","class problemA {
    
    private static int inst;

    public static void main(String[] args) {

        String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        //String input = ""/Users/npapa/Documents/codejam/A-large.in"";
        String output = ""/Users/npapa/Documents/codejam/output"";
        try {
            Scanner sc = new Scanner(new FileReader(input));
            PrintWriter br = new PrintWriter(output);

            int n = sc.nextInt();
            sc.nextLine();
            for (int c = 0; c < n; c++) {
                System.out.println(""Test case "" + (c + 1) + ""..."");
                br.print(""Case #"" + (c + 1) + "": "");
                int r = sc.nextInt();
                int nOne = sc.nextInt();
                int n01 = sc.nextInt();
                System.out.println(r+"" ""+nOne+"" ""+n01);
                int findRow =r*(nOne/n01);
                        int findShip=0;
                        if(nOne%n01==0)
                            findShip = n01-1;
                        else
                            findShip = n01;
                
                //        if(n==1){
                //            findRow=r*c;
                //            findShip=0;
                //        }
                        System.out.println(""findRow: ""+findRow+"" findShip: ""+findShip);
                
                
                int res = findRow+findShip;
                
                System.out.println(res);
                br.print(res);
                br.println();
            }
            br.println();
            br.flush();
            br.close();
            sc.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }


}",292,16,"c1:nOne,n1:n01,pw:br,",931,0.859855978,Beam
3474,,,281,14,,4837,4.431804947,0
3475,,,292,17,,6967,6.378925415,0
3476,,,269,16,,5797,5.319850532,0
3477,,,448,16,,4137,3.893270282,0
3479,,,255,13,,3257,2.994563293,0
3480,"class ProblemAMushroomMonster {

    /**3
     * Usage: java ProblemAMushroomMonster < fileIn.txt > fileOut.txt
     *
     * @param args
     */
    public static void main(String[] args) throws FileNotFoundException {
        Scanner scanner = new Scanner(System.in);
        byte testCount = scanner.nextByte();

        for (byte t = 0; t < testCount; t++) {
            // read and transform inputs
            int N = scanner.nextInt();

            int[] shrooms = new int[N];
            for (int i = 0; i < N; i++) {
                shrooms[i] = scanner.nextInt();
            }


            // Strategy 1
            int counter1 = 0;
            int maxInterval = -1;
            int currInterval = 0;
            int previousNumber = shrooms[0];
            int currentNumber = 0;
            for (int i = 1; i < shrooms.length; i++) {
                currentNumber = shrooms[i];
                currInterval = Math.max(0, previousNumber - currentNumber);
                //System.out.println(""currInterval = "" + currInterval);
                // strategy 1
                counter1 += currInterval;
                //System.out.println(""counter1 = "" + counter1);
                // for strategy 2
                maxInterval = Math.max(maxInterval, currInterval);
                previousNumber = currentNumber;
            }

            //System.out.println(""maxInterval = "" + maxInterval);

            // Strategy 2
            int counter2 = Math.min(maxInterval, shrooms[0]);
            for (int i = 1; i < shrooms.length-1; i++) {
                int minEaten = Math.min(maxInterval, shrooms[i]);
                // System.out.println(""eating "" + minEaten);
                counter2 += minEaten;

            }

            System.out.println(""Case #"" + (t + 1) + "": "" + counter1 + "" "" + counter2);
        }
    }
}","class ProblemAMushroomMonster {

    /**3
     * Usage: java ProblemAMushroomMonster < fileIn.txt > fileOut.txt
     *
     * @param args
     */
    public static void main(String[] args) throws FileNotFoundException {
        Scanner scanning = new Scanner(System.in);
        byte b = scanning.nextByte();

        for (byte t = 0; t < b; t++) {
            // read and transform inputs
            int N = scanning.nextInt();

            int[] max = new int[N];
            for (int init = 0; init < N; init++) {
                max[init] = scanning.nextInt();
            }


            // Strategy 1
            int Counter0 = 0;
            int maxintervals = -1;
            int number = 0;
            int preferredNum = max[0];
            int null = 0;
            for (int init = 1; init < max.length; init++) {
                null = max[init];
                number = Math.max(0, preferredNum - null);
                //System.out.println(""currInterval = "" + currInterval);
                // strategy 1
                Counter0 += number;
                //System.out.println(""counter1 = "" + counter1);
                // for strategy 2
                maxintervals = Math.max(maxintervals, number);
                preferredNum = null;
            }

            //System.out.println(""maxInterval = "" + maxInterval);

            // Strategy 2
            int start = Math.min(maxintervals, max[0]);
            for (int init = 1; init < max.length-1; init++) {
                int minOatz = Math.min(maxintervals, max[init]);
                // System.out.println(""eating "" + minEaten);
                start += minOatz;

            }

            System.out.println(""Case #"" + (t + 1) + "": "" + Counter0 + "" "" + start);
        }
    }
}",264,15,"currInterval:number,maxInterval:maxintervals,shrooms:max,currentNumber:null,i:init,counter2:start,previousNumber:preferredNum,counter1:Counter0,testCount:b,minEaten:minOatz,scanner:scanning,",4729,4.415132733,Beam
3481,,,735,24,,11347,11.12881549,0
3482,,,326,14,,5147,4.747744342,0
3483,,,479,25,,7746,7.323450255,0
3484,,,308,12,,1613,1.50750647,0
3485,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int k = scanner.nextInt();
            boolean[] fronties = new boolean[2500];
            for(int i = 0; i < 2 * k - 1; ++i){
                for(int j = 0; j < k; ++j){
                    int s = scanner.nextInt();
                    fronties[s-1] = !fronties[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(fronties[i-1]){
                    ++char;
                    if(char < k){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:k,count:char,soldiers:fronties,",838,0.763321563,Beam
3486,,,344,15,,4853,4.491869434,0
3487,,,321,13,,4434,4.113309069,0
3488,,,263,13,,4062,3.723611104,0
3489,,,208,12,,2343,2.159867843,0
3490,,,291,12,,3659,3.407571789,0
3491,"class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startTime=System.currentTimeMillis();//Start time
        try {
            BufferedReader in = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter out = new BufferedWriter(new FileWriter(""A-large.out""));
            String line = null;
            line = in.readLine();
            
            int T = Integer.parseInt(line);
            for(int i=0;i<T;i++){
                line = in.readLine();
                int N = Integer.parseInt(line);
                line = in.readLine();
                String [] tokens = line.split("" "");                
                int [] V = new int [N];
                for (int k=0;k<N;k++){
                    V[k]= Integer.parseInt(tokens[k]);
                }
                int a=0,b=0,max=0;
                for (int k=0;k<N-1;k++){
                    if (V[k]>V[k+1]){
                        a=a+V[k]-V[k+1];
                        if (V[k]-V[k+1]>max){
                            max=V[k]-V[k+1];
                        }
                    }
                }
                for (int k=0;k<N-1;k++){
                    if (V[k]>=max){
                        b=b+max;
                    } else{
                        b=b+V[k];
                    }
                }
                
                System.out.println(""Case #"" + (i+1) +"": "" + a + "" "" + b);    
                out.write(""Case #"" + (i+1) +"": "" + a + "" "" + b + ""\n"");
            }
            in.close();    
            out.close();
        } catch (FileNotFoundException e) {
            System.out.println(""File not found"");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""IOException"");
            e.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.out.println(""Running time is ""+(endTime-startTime)+""ms"");

    }

}","class ProblemA {

    /**
     * @param args
     */
    public static void main(String[] args) {
        long startFile=System.currentTimeMillis();//Start time
        try {
            BufferedReader lock = new BufferedReader(new FileReader(""A-large.in""));
            BufferedWriter outer = new BufferedWriter(new FileWriter(""A-large.out""));
            String day = null;
            day = lock.readLine();
            
            int h = Integer.parseInt(day);
            for(int i=0;i<h;i++){
                day = lock.readLine();
                int W = Integer.parseInt(day);
                day = lock.readLine();
                String [] targets = day.split("" "");                
                int [] Vector = new int [W];
                for (int y=0;y<W;y++){
                    Vector[y]= Integer.parseInt(targets[y]);
                }
                int p=0,body=0,h=0;
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>Vector[y+1]){
                        p=p+Vector[y]-Vector[y+1];
                        if (Vector[y]-Vector[y+1]>h){
                            h=Vector[y]-Vector[y+1];
                        }
                    }
                }
                for (int y=0;y<W-1;y++){
                    if (Vector[y]>=h){
                        body=body+h;
                    } else{
                        body=body+Vector[y];
                    }
                }
                
                System.outer.println(""Case #"" + (i+1) +"": "" + p + "" "" + body);    
                outer.write(""Case #"" + (i+1) +"": "" + p + "" "" + body + ""
"");
            }
            lock.close();    
            outer.close();
        } catch (FileNotFoundException ception) {
            System.outer.println(""File not found"");
            ception.printStackTrace();
        } catch (IOException ception) {
            System.outer.println(""IOException"");
            ception.printStackTrace();
        }
        long endTime=System.currentTimeMillis();//End time
        System.outer.println(""Running time is ""+(endTime-startFile)+""ms"");

    }

}",443,17,"max:h,N:W,k:y,T:h,V:Vector,b:body,line:day,a:p,in:lock,tokens:targets,out:outer,e:ception,startTime:startFile,",4626,4.359032444,Beam
3492,,,448,16,,4137,3.90525411,0
3493,,,321,18,,6753,6.27759312,0
3494,,,285,14,,5209,4.854189118,0
3495,,,132,9,,1841,1.686702085,0
3496,,,291,13,,4093,3.833646703,0
3497,,,149,10,,2481,2.279708978,0
3498,,,468,20,,8994,8.522043773,0
3499,,,655,16,,2079,2.041400532,0
3500,,,468,20,,8994,8.384571338,0
3501,,,326,14,,4837,4.444172585,0
3502,,,417,18,,3845,3.560778928,0
3503,,,306,16,,5302,4.861364798,0
3504,,,311,17,,6632,6.066132077,0
3505,,,292,17,,6958,6.380773834,0
3506,,,298,16,,4527,4.151062226,0
3507,,,211,11,,3070,2.767696671,0
3508,,,280,13,,3163,2.882067808,0
3510,,,240,13,,2185,2.011062415,0
3511,,,417,18,,3845,3.639636656,0
3512,,,553,21,,6306,6.121710054,0
3513,,,262,14,,3504,3.268978516,0
3514,,,358,16,,5302,5.002555939,0
3515,,,250,11,,3070,2.855652817,0
3517,,,272,16,,5866,5.460005939,0
3518,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int raceiu = 1; raceiu <= t; raceiu++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int index = 0;
            int w = 0;
            for (int min = 1; min < n; min++) {
                m[min] = sc.nextInt();
                int field = Math.w(0, m[min - 1] - m[min]);
                w = Math.w(w, field);
                index += field;
            }

            int arg = 0;
            for (int min = 1; min < n; min++) {
                arg += Math.min(m[min- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,i:min,sum:index,ret:arg,casei:raceiu,",2182,2.041194117,Beam
3519,,,324,13,,4434,4.175069408,0
3520,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader reader = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(reader.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(reader.readLine());
            String[] mushroommNumbers = reader.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totaleaton = 0;
            
            double parentTime = 0;
            int name = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = name;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int number = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = number;
                if (name > number) {
                    totaleaton += name - number;
                    parentTime = new Double(Math.max(parentTime, (name - number) / 10.0));
                }
                name = number;
            }
            
            double previous = 0;
            name = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int number =  coockiesNumbers[depth];
                previous += Math.min(parentTime * 10, name);
                name = number;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totaleaton + "" "" + new Double(previous).intValue() + ""
"");
        }

        writer.close();
        reader.close();
    }
}",334,15,"totalTime:c,maxRate:parentTime,i:s,time:depth,newNum:number,current:name,totalEatenB:previous,totalEaten:totaleaton,mushroormNumbers:mushroommNumbers,testCases:testTase,br:reader,",4930,4.575942413,Beam
3521,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int names = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            names = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(names);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:names,",745,0.679361796,Beam
3522,,,527,25,,16400,15.72820825,0
3523,,,408,17,,5900,5.477378702,0
3524,,,255,13,,2915,2.621608667,0
3525,,,399,18,,6263,5.782493901,0
3526,"class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream writer;
    static int n; static long res1,res2,m[],a[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        writer=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int i;
        for (int test=1; test<=ntest;test++){
            n=reader.nextInt(); m=new long[n];
            for (i=0;i<n;i++) m[i]=reader.nextLong();
            long maxrate=0; res1=0;
            for (i=1;i<n;i++){
                if (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);
                maxrate=Math.max(maxrate,m[i-1]-m[i]);
            }
            a=new long [n+2];
            res2=maxrate*n*n; 
            long rs,l=0,r=maxrate*n*n,rate;
            while(l<=r){
                rate=(l+r)/2;
                rs=0;
                for (i=1;i<n;i++){
                    if (m[i-1]>=rate)rs+=rate;
                    else rs+=m[i-1];
                    if (m[i-1]-rate>m[i]) break;
                }
                if (i==n){
                    res2=Math.min(rs,res2);
                    r=rate-1;
                }else{
                    l=rate+1;
                }
            }
            writer.println(""Case #""+test+"": ""+res1+"" ""+res2);
        }
    }
    
}","class A{
    final static String inputFile=""A-large.in"";
    final static String outputFile=""A-output.txt"";
    static Scanner reader;
    static PrintStream W;
    static int w; static long res,res2,model[],w[],trest2;
    public static void main(String[] args) throws Exception{
        reader=new Scanner(new FileInputStream(inputFile));
        W=new PrintStream(new FileOutputStream(outputFile));
        int ntest=reader.nextInt();  int start;
        for (int test=1; test<=ntest;test++){
            w=reader.nextInt(); model=new long[w];
            for (start=0;start<w;start++) model[start]=reader.nextLong();
            long result=0; res=0;
            for (start=1;start<w;start++){
                if (model[start-1]>model[start]) res+=(model[start-1]-model[start]);
                result=Math.max(result,model[start-1]-model[start]);
            }
            w=new long [w+2];
            res2=result*w*w; 
            long ns,h=0,w=result*w*w,depth;
            while(h<=w){
                depth=(h+w)/2;
                ns=0;
                for (start=1;start<w;start++){
                    if (model[start-1]>=depth)ns+=depth;
                    else ns+=model[start-1];
                    if (model[start-1]-depth>model[start]) break;
                }
                if (start==w){
                    res2=Math.min(ns,res2);
                    w=depth-1;
                }else{
                    h=depth+1;
                }
            }
            W.println(""Case #""+test+"": ""+res+"" ""+res2);
        }
    }
    
}",393,19,"n:w,maxrate:result,rate:depth,r:w,l:h,res1:res,i:start,rs:ns,m:model,a:w,writer:W,",6181,5.754157615,Beam
3527,,,426,18,,3963,3.705262478,0
3528,,,292,15,,5383,4.933069837,0
3529,,,257,11,,3070,2.810796527,0
3530,,,211,11,,2791,2.536934598,0
3531,,,321,18,,6976,6.442163841,0
3532,,,302,15,,2636,2.421501096,0
3533,,,200,10,,2481,2.28965565,0
3534,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] P = new char[26];
        for (int n = 0; n < P.length; n++) P[n] = (char)('A' + n);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int A = sc.nextInt();
            for (int n = 1; n <= A; n++) {
                answer.append(""Case #"" + n + "":"");
                int B = sc.nextInt();
                int[] Mi = new int[B];
                int n = 0;
                for (int rev = 0; rev < B; rev++) {
                    Mi[rev] = sc.nextInt();
                    n += Mi[rev];
                    Mi[rev] *= 2;
                }
                while (n > 0) {
                    answer.append("" "");
                    
                    int FLAG = 0;
                    n--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Mi[rev] > n) {
                            if (FLAG == 0) {
                                answer.append(P[rev]);
                                Mi[rev] -= 2;
                                FLAG = 1;
                            } else {
                                answer.append(P[rev]);
                                Mi[rev] -= 2;
                                n--;
                                break;
                            }
                        }
                    }
                    if (FLAG == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Mi[rev] > 0) {
                                answer.append(P[0]);
                                Mi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"flag:FLAG,sum:n,i:n,j:rev,N:B,T:A,parties:P,Pi:Mi,",2760,2.622887882,Beam
3535,,,200,10,,2481,2.290123089,0
3536,,,278,11,,2777,2.55079575,0
3537,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int y = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=y) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+y-1);
    }
    System.out.println(res);
  }
}",187,12,"w:y,",311,0.283835868,Beam
3538,,,285,14,,4837,4.480465329,0
3540,,,513,26,,16407,15.6832093,0
3541,,,208,12,,2261,2.091783786,0
3542,,,366,17,,6139,5.787245532,0
3543,,,255,13,,3194,2.942660495,0
3544,,,468,20,,8999,8.491569575,0
3545,,,406,19,,7999,7.47632949,0
3546,,,345,16,,5991,5.610003408,0
3547,,,479,25,,8192,7.721071668,0
3548,,,324,13,,4434,4.081203846,0
3549,,,321,18,,6984,6.507773058,0
3550,,,308,12,,1272,1.178562117,0
3552,,,418,13,,4094,3.858427421,0
3553,,,295,15,,3130,2.906939971,0
3554,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.016061823,Beam
3555,,,282,13,,4085,3.75838809,0
3556,,,311,17,,5229,4.854139153,0
3557,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int raceI = 1; raceI <= t; raceI++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int index = 0;
            int w = 0;
            for (int min = 1; min < n; min++) {
                m[min] = sc.nextInt();
                int field = Math.w(0, m[min - 1] - m[min]);
                w = Math.w(w, field);
                index += field;
            }

            int ret = 0;
            for (int min = 1; min < n; min++) {
                ret += Math.min(m[min- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,i:min,sum:index,casei:raceI,",1814,1.6795145,Beam
3558,,,371,12,,3721,3.494287026,0
3560,,,256,13,,3153,2.939257308,0
3561,,,317,12,,3689,3.398871907,0
3563,,,302,15,,2482,2.269774838,0
3564,,,267,13,,4045,3.765884682,0
3566,,,513,26,,17549,16.54789451,0
3567,,,735,24,,11439,11.25876124,0
3568,,,406,19,,7999,7.424131588,0
3569,,,328,16,,5116,4.713267366,0
3570,,,349,19,,5442,5.054906507,0
3571,,,240,12,,3557,3.284375771,0
3572,,,200,10,,2481,2.286720208,0
3573,,,262,14,,3101,2.85229278,0
3574,,,479,25,,8271,7.68083444,0
3575,,,292,16,,4155,3.81295865,0
3576,,,256,13,,3055,2.807658255,0
3577,,,292,15,,5383,5.01318864,0
3578,,,295,15,,3130,2.884545255,0
3579,,,278,11,,3244,2.975338415,0
3580,,,345,16,,5983,5.526055527,0
3582,,,406,17,,5163,4.818573968,0
3583,,,358,16,,5302,4.933757015,0
3584,,,187,13,,2310,2.110476772,0
3585,,,417,19,,6910,6.434469891,0
3586,,,262,14,,3132,2.888613967,0
3587,,,291,12,,3380,3.139844886,0
3588,,,418,13,,4093,3.825774686,0
3589,,,443,17,,5520,5.181528703,0
3590,,,262,14,,3380,3.127544439,0
3591,,,479,25,,8192,7.710918303,0
3592,"class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    scanIn    = new Scanner(System.in);
        
        int T    = scanIn.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = scanIn.nextInt();
            int        c    = scanIn.nextInt();
            int        w    = scanIn.nextInt();
            int    total    = r*c;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(c/w);
            
            if(c % w == 0) {
                ret1    += w-1;
            } else if( w == 1) {
            } else {
                ret1    += w;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        scanIn.close();
    }
}","class Jam2015_1CA {
    public static void main(String[] args) {
        Scanner    s    = new Scanner(System.in);
        
        int T    = s.nextInt();
        
        for(int i=0; i<T; ++i) {
            Jam2015_1CA    inst    = new Jam2015_1CA();
            int        r    = s.nextInt();
            int        s    = s.nextInt();
            int        k    = s.nextInt();
            int    total    = r*s;
            int    ret1        = 0;
            
            //    scan
            ret1    = r*(s/k);
            
            if(s % k == 0) {
                ret1    += k-1;
            } else if( k == 1) {
            } else {
                ret1    += k;
            }
            
            int    ret    = ret1;
            
            System.out.println(""Case #"" + (i+1) + "": "" + ret);
        }
        
        s.close();
    }
}",171,10,"w:k,c:s,scanIn:s,",869,0.791333846,Beam
3593,,,258,14,,5147,4.700787508,0
3594,,,240,12,,3387,3.100919497,0
3595,,,325,16,,6077,5.621351612,0
3596,,,345,16,,5948,5.477281833,0
3597,,,443,17,,5623,5.251593077,0
3598,,,317,14,,4837,4.481872582,0
3599,,,358,16,,5271,4.889397136,0
3600,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.005498215,Beam
3602,,,418,13,,4094,3.852312533,0
3603,,,169,10,,2481,2.282284462,0
3604,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int s = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[s] = s + r - 1;
                for(int j = s + 1; j <= 2*s - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = s+1 + r-1;
                }
                for(int j = 2*s; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-s] + r, s + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:s,",310,0.285476371,Beam
3605,,,618,26,,11118,10.73105785,0
3606,,,295,15,,3130,2.901921288,0
3607,,,344,15,,4882,4.506571039,0
3608,,,345,16,,6008,5.571295051,0
3609,,,290,12,,3691,3.411879015,0
3610,"class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int casenum = 1; casenum <= cases; casenum++){
      
      int r = in.nextInt();
      int c = in.nextInt();
      int w = in.nextInt();
      int score = c/w*(r - 1);
      score += (int)Math.ceil((double)c/(double)w);
      score += w - 1;
      
      out.println (""Case #"" + casenum + "": "" + score);
    }
    out.close();
    in.close();
  }
}","class A{
  public static void main (String[] args) throws Exception{
    Scanner in = new Scanner (new FileReader(""A-large.in""));
    PrintWriter out = new PrintWriter (""A.out"");
    int cases = in.nextInt();
    for (int cusenc = 1; cusenc <= cases; cusenc++){
      
      int r = in.nextInt();
      int n = in.nextInt();
      int k = in.nextInt();
      int score = n/k*(r - 1);
      score += (int)Math.ceil((double)n/(double)k);
      score += k - 1;
      
      out.println (""Case #"" + cusenc + "": "" + score);
    }
    out.close();
    in.close();
  }
}",156,10,"w:k,c:n,casenum:cusenc,",745,0.67460568,Beam
3611,,,291,12,,3411,3.15703936,0
3612,"class CRoundA {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int size = in.nextInt();
            
            int costPerRow = C / size;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += costPerRow * R;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (C % size == 0) {
                ans1 += (size - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += size;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d\n"", i + 1, ans);
        }

    }

}","class CRoundA {

    public static void main(String[] args) {
        Scanner token = new Scanner(System.token);
        int T = token.nextInt();
        for (int ix = 0; ix < T; ix++) {
            int GR = token.nextInt();
            int K = token.nextInt();
            int length = token.nextInt();
            
            int p = K / length;
            
            int ans1 = 0;
            
            // Need to iterate through all rows to first ""hit"" the ship
            ans1 += p * GR;
            
            // Now that we've hit the ship, we need to hit the rest of it.
            
            // If it divides it evenly, it's jsut the cost of the rest of the ship.
            if (K % length == 0) {
                ans1 += (length - 1);
            }
            // Alternatively, he can guarantee at least one ""miss""
            else {
                ans1 += length;
            }
            int ans = ans1;
            System.out.printf(""Case #%d: %d
"", i + 1, ans);
        }

    }

}",142,11,"C:K,size:length,in:token,i:ix,costPerRow:p,R:GR,",1956,1.806054191,Beam
3613,,,371,12,,3721,3.471557156,0
3614,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ann1 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] signas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int note = 0; note < signas.length; note++)
                signas[note] = Integer.parseInt(raw[note]);

            //1
            for (int note = 0; note < signas.length - 1; note++) {
                int r = signas[note];
                int s = signas[note + 1];
                
                if (s < r)
                    ans1 += (r - s);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int note = 0; note < signas.length - 1; note++) {
                int r = signas[note];
                int s = signas[note + 1];
                
                int c = r - s;
                if (c > w)
                    w = c;
            }
            
            for (int note = 0; note < signas.length - 1; note++) {
                if (signas[note] < w)
                    ann1 += signas[note];
                else
                    ann1 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ann1));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:r,j:note,datas:signas,ans2:ann1,",3642,3.42754997,Beam
3615,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,4.996541083,Beam
3616,,,281,14,,4837,4.521152012,0
3617,,,291,13,,4093,3.829267395,0
3618,,,281,14,,4837,4.494367496,0
3619,,,500,19,,8845,8.343101056,0
3620,,,500,19,,8749,8.23001949,0
3621,,,330,16,,6015,5.531557417,0
3622,,,273,11,,3049,2.786884574,0
3623,,,399,18,,6263,5.847190376,0
3624,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ANS = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ANS = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ANS);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ANS,",745,0.679955403,Beam
3625,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cp = 0; cp < e; cp++) {
                m[cp] = input.nextInt();

            }
            for (int cp = 1; cp < e; cp++) {
                d = m[cp - 1] - m[cp];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cp = 0; cp < e - 1; cp++) {
                if (m[cp] <= w) {
                    z += m[cp];
                }
                if (m[cp] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cp,",466,0.42991037,Beam
3626,,,790,14,,5209,5.129733225,0
3627,,,317,12,,3679,3.233974552,0
3628,,,887,27,,6872,6.803860847,0
3629,,,426,18,,3498,3.308686745,0
3630,,,386,18,,7274,6.810183235,0
3631,,,344,15,,4882,4.518332215,0
3632,,,134,9,,1737,1.569163426,0
3633,,,418,13,,4093,3.872152269,0
3634,,,366,17,,6139,5.744632538,0
3635,,,265,12,,3689,3.411174297,0
3636,,,468,14,,3907,3.685221577,0
3637,"class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner sc = new Scanner(new File(""input.txt""));
        PrintWriter pw = new PrintWriter(""OUTPUT.TXT"");
        int T = sc.nextInt();
        int r,c,w,rez;
        for(int t=0; t<T; ++t){
            r = sc.nextInt();
            c =sc.nextInt();
            w = sc.nextInt();
            rez = c/w;
            rez *=r;
            rez +=w-1;
            if(c%w > 0)
                rez+=1;
            pw.println(""Case #"" + (t+1) + "": "" + rez );
        }
        pw.close();
    }
    
}","class CJRC1 {

    public static void main(String[] args) throws FileNotFoundException{
        Scanner SC = new Scanner(new File(""input.txt""));
        PrintWriter writer = new PrintWriter(""OUTPUT.TXT"");
        int K = SC.nextInt();
        int n,n,k,example;
        for(int n=0; n<K; ++n){
            n = SC.nextInt();
            n =SC.nextInt();
            k = SC.nextInt();
            example = n/k;
            example *=n;
            example +=k-1;
            if(n%k > 0)
                example+=1;
            writer.println(""Case #"" + (n+1) + "": "" + example );
        }
        writer.close();
    }
    
}",149,10,"w:k,c:n,rez:example,pw:writer,t:n,T:K,sc:SC,r:n,",1954,1.782878029,Beam
3638,,,325,16,,6077,5.66666528,0
3639,,,169,10,,2419,2.220257111,0
3640,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,5.056738313,Beam
3641,,,379,17,,6932,6.515285826,0
3642,,,544,17,,5952,5.695650272,0
3643,,,278,11,,3273,3.017240715,0
3644,,,265,12,,3354,3.107472932,0
3645,,,324,13,,4434,4.121228909,0
3646,,,269,13,,4053,3.806619938,0
3647,,,240,13,,2153,2.004195491,0
3648,,,317,14,,4837,4.513424758,0
3649,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int names = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            names = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(names);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:names,",745,0.679416442,Beam
3650,,,321,18,,7004,6.470700975,0
3651,,,290,12,,3691,3.406780279,0
3652,,,132,9,,1702,1.552631931,0
3653,,,420,19,,7084,6.647408712,0
3654,,,479,25,,8191,7.787387677,0
3655,,,280,13,,3163,2.973686345,0
3656,,,527,25,,16214,15.41582149,0
3657,,,325,16,,6077,5.655125221,0
3658,,,282,13,,4085,3.787889496,0
3659,,,224,11,,2791,2.55603768,0
3660,,,517,26,,14359,13.80524191,0
3661,,,527,25,,16400,15.70001885,0
3662,,,282,13,,4087,3.789964843,0
3663,,,224,11,,3070,2.830492572,0
3664,,,305,15,,5236,4.872488435,0
3665,,,553,21,,6288,6.06650691,0
3666,,,306,16,,5240,4.849828772,0
3667,,,366,17,,6139,5.71850661,0
3668,,,298,16,,4930,4.564611403,0
3669,,,345,16,,5979,5.577224986,0
3670,,,250,11,,3070,2.801720516,0
3671,,,272,16,,5835,5.341143572,0
3672,,,386,18,,7388,6.855498874,0
3673,,,355,19,,6515,6.063110224,0
3674,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int xi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int xi = 0; xi < w; xi++) {
                        chunks[xi] = si.nextInt();
                    }
                    
                    int index = 0;
                    int pixel = 0;
                    
                    for (int xi = 0; xi < w - 1; xi++) {
                        int length = chunks[xi] - chunks[xi + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int xi = 0; xi < w - 1; xi++) {
                        length[xi] = chunks[xi] - chunks[xi + 1];
                    }
                    int abs = 0;
                    for (int xi = 0; xi < w - 1; xi++) {
                        abs = Math.abs(abs, length[xi]);
                    }
                
                    for (int xi = 0; xi < w - 1; xi++) {
                        pixel += Math.min(abs, chunks[xi]);
                    }
                    
                    System.out.printf(""%d %d"", index, pixel);
                    System.err.printf(""%d %d"", index, pixel);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int xi = 0; xi < w; xi++) {
                    chunks[xi] = si.nextInt();
                }
                
                int index = 0;
                int pixel = 0;
                
                for (int xi = 0; xi < w - 1; xi++) {
                    int length = chunks[xi] - chunks[xi + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int xi = 0; xi < w - 1; xi++) {
                    length[xi] = chunks[xi] - chunks[xi + 1];
                }
                int abs = 0;
                for (int xi = 0; xi < w - 1; xi++) {
                    abs = Math.abs(abs, length[xi]);
                }
            
                for (int xi = 0; xi < w - 1; xi++) {
                    pixel += Math.min(abs, chunks[xi]);
                }
                
                System.out.printf(""%d %d"", index, pixel);
                System.err.printf(""%d %d"", index, pixel);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ks,diff:length,mush:chunks,first:index,i:xi,i1:index,second:pixel,testCase:testCount,sc:si,i4:i48,i2:ii,max:abs,c:w,",4301,4.843056214,Beam
3675,,,330,16,,6046,5.628757687,0
3676,,,262,14,,3101,2.852258817,0
3677,,,348,21,,8081,7.492648919,0
3678,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anner = new Scanner(System.in);
        int t = anner.nextInt();
        for(int x = 1; x <= t; ++x){
            int c = anner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int j = 0; j < c; ++j){
                    int s = anner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:char,scanner:anner,",807,0.726682468,Beam
3679,,,285,14,,4837,4.385846957,0
3680,,,262,14,,3504,3.211875125,0
3681,,,328,16,,5147,4.679917169,0
3682,,,406,16,,6077,5.665984396,0
3683,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int xi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ck = 1; ck <= testCount; ck++) {
                        System.out.printf(""Case #%d: "", ck);
                        System.err.printf(""Case #%d: "", ck);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int line = 0;
                        int index = 0;
                        
                        for (int ii6 = 0; ii6 < w - 1; ii6++) {
                            int tmp = chunks[ii6] - chunks[ii6 + 1];
                            if (tmp > 0) {
                                line += tmp;
                            }
                        }
                        
                        int[] tmp = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            tmp[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, tmp[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            index += Math.min(max, chunks[i2]);
                        }
                        
                        System.out.printf(""%d %d"", line, index);
                        System.err.printf(""%d %d"", line, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ck = 1; ck <= testCount; ck++) {
                        System.out.printf(""Case #%d: "", ck);
                        System.err.printf(""Case #%d: "", ck);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int line = 0;
                        int index = 0;
                        
                        for (int ii6 = 0; ii6 < w - 1; ii6++) {
                            int tmp = chunks[ii6] - chunks[ii6 + 1];
                            if (tmp > 0) {
                                line += tmp;
                            }
                        }
                        
                        int[] tmp = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            tmp[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            max = Math.max(max, tmp[i5]);
                        }
                    
                        for (int i2 = 0; i2 < w - 1; i2++) {
                            index += Math.min(max, chunks[i2]);
                        }
                        
                        System.out.printf(""%d %d"", line, index);
                        System.err.printf(""%d %d"", line, index);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ck = 1; ck <= testCount; ck++) {
                    System.out.printf(""Case #%d: "", ck);
                    System.err.printf(""Case #%d: "", ck);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int xi = 0; xi < w; xi++) {
                        chunks[xi] = si.nextInt();
                    }
                    
                    int line = 0;
                    int index = 0;
                    
                    for (int xi = 0; xi < w - 1; xi++) {
                        int tmp = chunks[xi] - chunks[xi + 1];
                        if (tmp > 0) {
                            line += tmp;
                        }
                    }
                    
                    int[] tmp = new int[w - 1];
                    for (int xi = 0; xi < w - 1; xi++) {
                        tmp[xi] = chunks[xi] - chunks[xi + 1];
                    }
                    int max = 0;
                    for (int xi = 0; xi < w - 1; xi++) {
                        max = Math.max(max, tmp[xi]);
                    }
                
                    for (int xi = 0; xi < w - 1; xi++) {
                        index += Math.min(max, chunks[xi]);
                    }
                    
                    System.out.printf(""%d %d"", line, index);
                    System.err.printf(""%d %d"", line, index);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ck = 1; ck <= testCount; ck++) {
                System.out.printf(""Case #%d: "", ck);
                System.err.printf(""Case #%d: "", ck);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int xi = 0; xi < w; xi++) {
                    chunks[xi] = si.nextInt();
                }
                
                int line = 0;
                int index = 0;
                
                for (int xi = 0; xi < w - 1; xi++) {
                    int tmp = chunks[xi] - chunks[xi + 1];
                    if (tmp > 0) {
                        line += tmp;
                    }
                }
                
                int[] tmp = new int[w - 1];
                for (int xi = 0; xi < w - 1; xi++) {
                    tmp[xi] = chunks[xi] - chunks[xi + 1];
                }
                int max = 0;
                for (int xi = 0; xi < w - 1; xi++) {
                    max = Math.max(max, tmp[xi]);
                }
            
                for (int xi = 0; xi < w - 1; xi++) {
                    index += Math.min(max, chunks[xi]);
                }
                
                System.out.printf(""%d %d"", line, index);
                System.err.printf(""%d %d"", line, index);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ck,diff:tmp,mush:chunks,first:line,i:xi,i1:index,second:index,testCase:testCount,sc:si,i4:ii6,c:w,",4258,4.782565097,Beam
3684,,,432,19,,8898,8.323934269,0
3685,,,379,17,,6940,6.448097102,0
3686,,,544,17,,5906,5.573564601,0
3687,,,311,17,,6666,6.185225809,0
3688,,,292,17,,6886,6.395136857,0
3689,,,208,12,,2333,2.130985121,0
3690,,,321,13,,4093,3.793750699,0
3691,,,386,18,,7166,6.754074566,0
3692,,,256,13,,3559,3.293717754,0
3693,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int s = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[s] = s + r - 1;
                for(int j = s + 1; j <= 2*s - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = s+1 + r-1;
                }
                for(int j = 2*s; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-s] + r, s + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:s,",310,0.28997076,Beam
3694,,,240,13,,4075,3.761915847,0
3695,,,328,16,,5240,4.883322918,0
3696,,,324,13,,4434,4.112531082,0
3697,,,325,16,,6077,5.658469601,0
3698,,,517,26,,13442,12.92410982,0
3699,,,348,14,,3895,3.618527933,0
3700,,,184,9,,1706,1.547322476,0
3701,,,387,15,,5240,4.823491816,0
3702,,,300,13,,3773,3.481332191,0
3703,,,426,18,,3498,3.307928801,0
3704,,,405,15,,5240,4.928318536,0
3705,,,464,17,,5358,5.043113542,0
3706,,,544,17,,5935,5.556591658,0
3707,,,605,21,,10203,9.60978653,0
3708,,,345,16,,5982,5.564299806,0
3709,,,475,18,,7937,7.464521639,0
3710,,,464,17,,5268,4.994945935,0
3711,,,258,14,,5147,4.748214575,0
3712,,,291,12,,3411,3.177105637,0
3713,,,393,16,,5284,4.947963055,0
3714,,,344,15,,4882,4.556226063,0
3715,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ANS = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ANS = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ANS);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ANS,",745,0.685732555,Beam
3716,,,224,11,,2760,2.563541726,0
3717,,,255,13,,3194,2.949849518,0
3718,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] P = new char[26];
        for (int n = 0; n < P.length; n++) P[n] = (char)('A' + n);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int A = sc.nextInt();
            for (int n = 1; n <= A; n++) {
                answer.append(""Case #"" + n + "":"");
                int B = sc.nextInt();
                int[] Mi = new int[B];
                int n = 0;
                for (int rev = 0; rev < B; rev++) {
                    Mi[rev] = sc.nextInt();
                    n += Mi[rev];
                    Mi[rev] *= 2;
                }
                while (n > 0) {
                    answer.append("" "");
                    
                    int FLAG = 0;
                    n--;
                    for (int rev = 0; rev < B; rev++) {
                        if (Mi[rev] > n) {
                            if (FLAG == 0) {
                                answer.append(P[rev]);
                                Mi[rev] -= 2;
                                FLAG = 1;
                            } else {
                                answer.append(P[rev]);
                                Mi[rev] -= 2;
                                n--;
                                break;
                            }
                        }
                    }
                    if (FLAG == 0) {
                        for (int rev = 0; rev < B; rev++) {
                            if (Mi[rev] > 0) {
                                answer.append(P[0]);
                                Mi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""
"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",448,16,"flag:FLAG,sum:n,i:n,j:rev,N:B,T:A,parties:P,Pi:Mi,",2760,2.611809278,Beam
3719,,,265,12,,3695,3.413742542,0
3720,,,269,16,,5938,5.485577679,0
3721,,,735,24,,11527,11.31851155,0
3722,,,460,16,,5302,5.009120572,0
3723,,,525,23,,13540,12.92405257,0
3724,,,240,13,,4051,3.711532227,0
3725,,,405,15,,5240,4.899591128,0
3726,,,326,14,,5209,4.847536238,0
3727,,,305,15,,5224,4.863494202,0
3728,,,215,12,,3375,3.093614984,0
3729,,,345,16,,5987,5.599873499,0
3730,,,393,19,,7013,6.580629563,0
3731,,,513,26,,17332,16.46280967,0
3732,,,572,15,,5215,5.040463825,0
3733,,,266,13,,4046,3.73739289,0
3734,"class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, N, i, cur, maxdif, s1, s2, r10;
        double rate;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            N = sc.nextInt();
            m = new int[N];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < N; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            rate = (double)maxdif / 10;
            
            r10 = (int)(rate*10);
            cur = 0;
            for(i = 0; i < N; i++) {
                s2 += Math.min(r10,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}","class A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T, t, W, i, cur, maxdif, s1, s2, S;
        double r;
        int m[];
        T = sc.nextInt();
        for (t = 1; t <= T; t++) {
            W = sc.nextInt();
            m = new int[W];
            cur = 0;
            maxdif = 0;
            s1 = 0;
            s2 = 0;
            for(i = 0; i < W; i++) {
                m[i] = sc.nextInt();
                maxdif = Math.max(cur - m[i], maxdif);
                s1 += Math.max(cur - m[i], 0);
                cur = m[i];
            }
            r = (double)maxdif / 10;
            
            S = (int)(r*10);
            cur = 0;
            for(i = 0; i < W; i++) {
                s2 += Math.min(S,cur);
                cur = m[i];
            }
                        
            System.out.println(""Case #"" + t + "": "" + s1 + "" "" + s2);
        }
        sc.close();
    }
}",258,14,"N:W,rate:r,r10:S,",1086,1.000239758,Beam
3735,,,306,16,,5302,4.905979578,0
3736,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int xi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int xi = 0; xi < w; xi++) {
                        chunks[xi] = si.nextInt();
                    }
                    
                    int index = 0;
                    int pixel = 0;
                    
                    for (int xi = 0; xi < w - 1; xi++) {
                        int length = chunks[xi] - chunks[xi + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int xi = 0; xi < w - 1; xi++) {
                        length[xi] = chunks[xi] - chunks[xi + 1];
                    }
                    int abs = 0;
                    for (int xi = 0; xi < w - 1; xi++) {
                        abs = Math.abs(abs, length[xi]);
                    }
                
                    for (int xi = 0; xi < w - 1; xi++) {
                        pixel += Math.min(abs, chunks[xi]);
                    }
                    
                    System.out.printf(""%d %d"", index, pixel);
                    System.err.printf(""%d %d"", index, pixel);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int xi = 0; xi < w; xi++) {
                    chunks[xi] = si.nextInt();
                }
                
                int index = 0;
                int pixel = 0;
                
                for (int xi = 0; xi < w - 1; xi++) {
                    int length = chunks[xi] - chunks[xi + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int xi = 0; xi < w - 1; xi++) {
                    length[xi] = chunks[xi] - chunks[xi + 1];
                }
                int abs = 0;
                for (int xi = 0; xi < w - 1; xi++) {
                    abs = Math.abs(abs, length[xi]);
                }
            
                for (int xi = 0; xi < w - 1; xi++) {
                    pixel += Math.min(abs, chunks[xi]);
                }
                
                System.out.printf(""%d %d"", index, pixel);
                System.err.printf(""%d %d"", index, pixel);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ks,diff:length,mush:chunks,first:index,i:xi,i1:index,second:pixel,testCase:testCount,sc:si,i4:i48,i2:ii,max:abs,c:w,",4301,4.812736877,Beam
3737,,,187,13,,1894,1.745590063,0
3738,,,544,17,,5952,5.710523399,0
3739,,,406,19,,7999,7.531390321,0
3740,,,257,11,,3070,2.853687867,0
3741,,,200,10,,2481,2.285128911,0
3742,,,311,17,,6682,6.194531798,0
3743,"class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ans2 = 0;
            int n = Integer.parseInt(br.readLine());
            int[] datas = new int[n];
            String[] raw = br.readLine().split("" "");
            for (int j = 0; j < datas.length; j++)
                datas[j] = Integer.parseInt(raw[j]);

            //1
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                if (s < f)
                    ans1 += (f - s);
            }
            
            //2
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < datas.length - 1; j++) {
                int f = datas[j];
                int s = datas[j + 1];
                
                int c = f - s;
                if (c > max)
                    max = c;
            }
            
            for (int j = 0; j < datas.length - 1; j++) {
                if (datas[j] < max)
                    ans2 += datas[j];
                else
                    ans2 += max;
            }
            
            pw.println(String.format(prefix, i, ans1, ans2));
        }
        
        br.close();
        pw.close();
    }
}","class Q4 {
    public static void main(String[] args) throws NumberFormatException, IOException {
        String prefix = ""Case #%d: %d %d"";
        
        String num = ""A"";
//        int time = 0;
//        String file = ""E:\\downloads\\"" + num + ""-small-attempt"" + time;
//        String file = ""C-small-attempt1"" + time;
        
//        String file = ""E:\\downloads\\"" + num + ""-large"";
        String file = num + ""-large"";
        
        BufferedReader br = new BufferedReader(new FileReader(file + "".in""));
        PrintWriter pw = new PrintWriter(file + "".out"");
        
        int t = Integer.parseInt(br.readLine());
        for (int i = 1; i <= t; i++) {
            int ans1 = 0;
            int ann1 = 0;
            int w = Integer.parseInt(br.readLine());
            int[] signas = new int[w];
            String[] raw = br.readLine().split("" "");
            for (int note = 0; note < signas.length; note++)
                signas[note] = Integer.parseInt(raw[note]);

            //1
            for (int note = 0; note < signas.length - 1; note++) {
                int r = signas[note];
                int s = signas[note + 1];
                
                if (s < r)
                    ans1 += (r - s);
            }
            
            //2
            int w = Integer.MIN_VALUE;
            for (int note = 0; note < signas.length - 1; note++) {
                int r = signas[note];
                int s = signas[note + 1];
                
                int c = r - s;
                if (c > w)
                    w = c;
            }
            
            for (int note = 0; note < signas.length - 1; note++) {
                if (signas[note] < w)
                    ann1 += signas[note];
                else
                    ann1 += w;
            }
            
            pw.println(String.format(prefix, i, ans1, ann1));
        }
        
        br.close();
        pw.close();
    }
}",360,19,"max:w,n:w,f:r,j:note,datas:signas,ans2:ann1,",3642,3.419573224,Beam
3744,"class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int R = in.nextInt();
            int C = in.nextInt();
            int[][] G = new int[R][C];
            for (int i = 0; i < R; i++) {
                String S = in.next();
                for (int j = 0; j < C; j++) {
                    char c = S.charAt(j);
                    if (c == '.')
                        G[i][j] = EMPTY;
                    else if (c == '<')
                        G[i][j] = LEFT;
                    else if (c == '>')
                        G[i][j] = RIGHT;
                    else if (c == 'v')
                        G[i][j] = DOWN;
                    else if (c == '^')
                        G[i][j] = UP;
                }
            }
            int ans = 0;
            for (int r = 0; r < R; r++) {
                for (int c = 0; c < C; c++) {
                    if (G[r][c] == EMPTY)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int nr = r + dr[d];
                        int nc = c + dc[d];
                        ok[d] = false;
                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {
                            if (G[nr][nc] != EMPTY) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            nr += dr[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE\n"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[r][c]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d\n"", zz, ans);
        }
    }
    static int[] dr = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPTY = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DOWN = 3;
    static int RIGHT = 4;
}","class A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
nextcase:
        for (int zz = 1; zz <= T; zz++) {
            int E = in.nextInt();
            int N = in.nextInt();
            int[][] G = new int[E][N];
            for (int ip = 0; ip < E; ip++) {
                String S = in.next();
                for (int v = 0; v < N; v++) {
                    char code = S.charAt(v);
                    if (code == '.')
                        G[ip][v] = EMPOWER;
                    else if (code == '<')
                        G[ip][v] = LEFT;
                    else if (code == '>')
                        G[ip][v] = WRIGHT;
                    else if (code == 'v')
                        G[ip][v] = DIR;
                    else if (code == '^')
                        G[ip][v] = UP;
                }
            }
            int ans = 0;
            for (int rb = 0; rb < E; rb++) {
                for (int code = 0; code < N; code++) {
                    if (G[rb][code] == EMPOWER)
                        continue;
                    boolean[] ok = new boolean[4];
                    boolean any = false;
                    for (int d = 0; d < 4; d++) {
                        int no = rb + di[d];
                        int nc = code + dc[d];
                        ok[d] = false;
                        while (0 <= no && no < E && 0 <= nc && nc < N) {
                            if (G[no][nc] != EMPOWER) {
                                ok[d] = true;
                                any = true;
                                break;
                            }
                            no += di[d];
                            nc += dc[d];
                        }
                    }
                    if (!any) {
                        System.out.format(""Case #%d: IMPOSSIBLE
"", zz);
                        continue nextcase;
                    }
                    if (!ok[G[rb][code]-1]) {
                        ans++;
                    }
                }
            }
            System.out.format(""Case #%d: %d
"", zz, ans);
        }
    }
    static int[] di = {-1, 0, 1, 0};
    static int[] dc = {0, -1, 0, 1};
    static int EMPOWER = 0;
    static int UP = 1;
    static int LEFT = 2;
    static int DIR = 3;
    static int WRIGHT = 4;
}",513,26,"C:N,c:code,EMPTY:EMPOWER,j:v,DOWN:DIR,RIGHT:WRIGHT,R:E,nr:no,r:rb,i:ip,dr:di,",10997,8.312454553,Beam
3745,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int raceI = 1; raceI <= t; raceI++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int index = 0;
            int w = 0;
            for (int min = 1; min < n; min++) {
                m[min] = sc.nextInt();
                int field = Math.w(0, m[min - 1] - m[min]);
                w = Math.w(w, field);
                index += field;
            }

            int ret = 0;
            for (int min = 1; min < n; min++) {
                ret += Math.min(m[min- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,i:min,sum:index,casei:raceI,",1814,1.66245604,Beam
3746,,,292,15,,5383,4.992192769,0
3747,,,316,15,,4400,4.080741998,0
3749,,,269,16,,5944,5.499681878,0
3750,,,328,16,,5147,4.78644832,0
3751,,,267,13,,4337,4.006237503,0
3752,,,292,15,,5030,4.634624747,0
3753,,,254,13,,4262,3.912707102,0
3754,,,500,19,,8777,8.216366164,0
3755,,,358,16,,5302,4.951137137,0
3756,,,358,16,,5302,4.940795759,0
3758,,,257,11,,3071,2.834502991,0
3759,,,358,16,,5302,4.917022928,0
3760,,,292,17,,6859,6.337341507,0
3761,,,406,17,,5260,4.970169644,0
3762,,,305,15,,5232,4.844486944,0
3763,,,375,12,,3708,3.402427653,0
3764,,,443,17,,5433,5.058708457,0
3765,,,269,13,,4320,4.102401483,0
3766,,,479,25,,8181,7.825175023,0
3767,,,655,16,,2083,2.060762612,0
3768,,,290,12,,3385,3.135821124,0
3769,,,479,25,,8497,8.033345087,0
3770,,,553,21,,6466,6.254918996,0
3771,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int s = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[s] = s + r - 1;
                for(int j = s + 1; j <= 2*s - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = s+1 + r-1;
                }
                for(int j = 2*s; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-s] + r, s + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:s,",310,0.285810614,Beam
3772,,,256,13,,3028,2.794869622,0
3773,,,305,15,,5236,4.860351066,0
3774,,,379,17,,6932,6.49462719,0
3775,"class Solve2016R1C_A {
    private static String filePath = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer answer = new StringBuffer();
        char[] parties = new char[26];
        for (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);

        try (Scanner sc = new Scanner(new File(filePath))) {
            int T = sc.nextInt();
            for (int i = 1; i <= T; i++) {
                answer.append(""Case #"" + i + "":"");
                int N = sc.nextInt();
                int[] Pi = new int[N];
                int sum = 0;
                for (int j = 0; j < N; j++) {
                    Pi[j] = sc.nextInt();
                    sum += Pi[j];
                    Pi[j] *= 2;
                }
                while (sum > 0) {
                    answer.append("" "");
                    
                    int flag = 0;
                    sum--;
                    for (int j = 0; j < N; j++) {
                        if (Pi[j] > sum) {
                            if (flag == 0) {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                flag = 1;
                            } else {
                                answer.append(parties[j]);
                                Pi[j] -= 2;
                                sum--;
                                break;
                            }
                        }
                    }
                    if (flag == 0) {
                        for (int j = 0; j < N; j++) {
                            if (Pi[j] > 0) {
                                answer.append(parties[0]);
                                Pi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                answer.append(""\n"");
            }
            String outPath = ""answer.out"";
            if (filePath != null && !filePath.equals("""")) {
                outPath = filePath.substring(0, filePath.length() - 2) + ""out"";
            }
            try (FileOutputStream fos = new FileOutputStream(outPath, false)) {
                fos.write(answer.toString().getBytes());
            }
            System.out.println(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}","class Solve2016R1C_A {
    private static String baseRoot = ""A-small-attempt0.in"";

    public static void main(String[] args) {
        StringBuffer addin = new StringBuffer();
        char[] PARTys = new char[26];
        for (int n = 0; n < PARTys.length; n++) PARTys[n] = (char)('A' + n);

        try (Scanner random = new Scanner(new File(baseRoot))) {
            int B = random.nextInt();
            for (int n = 1; n <= B; n++) {
                addin.append(""Case #"" + n + "":"");
                int A = random.nextInt();
                int[] phi = new int[A];
                int n = 0;
                for (int rev = 0; rev < A; rev++) {
                    phi[rev] = random.nextInt();
                    n += phi[rev];
                    phi[rev] *= 2;
                }
                while (n > 0) {
                    addin.append("" "");
                    
                    int ag = 0;
                    n--;
                    for (int rev = 0; rev < A; rev++) {
                        if (phi[rev] > n) {
                            if (ag == 0) {
                                addin.append(PARTys[rev]);
                                phi[rev] -= 2;
                                ag = 1;
                            } else {
                                addin.append(PARTys[rev]);
                                phi[rev] -= 2;
                                n--;
                                break;
                            }
                        }
                    }
                    if (ag == 0) {
                        for (int rev = 0; rev < A; rev++) {
                            if (phi[rev] > 0) {
                                addin.append(PARTys[0]);
                                phi[0] -= 2;
                                break;
                            }
                        }
                    }
                }
                addin.append(""
"");
            }
            String output = ""answer.out"";
            if (baseRoot != null && !baseRoot.equals("""")) {
                output = baseRoot.substring(0, baseRoot.length() - 2) + ""out"";
            }
            try (FileOutputStream o = new FileOutputStream(output, false)) {
                o.write(addin.toString().getBytes());
            }
            System.out.println(addin);
        } catch (Exception fe) {
            fe.printStackTrace();
        }
    }
}",448,16,"flag:ag,parties:PARTys,sum:n,j:rev,i:n,N:A,Pi:phi,T:B,answer:addin,sc:random,filePath:baseRoot,e:fe,outPath:output,fos:o,",3736,3.525466859,Beam
3776,,,272,16,,5858,5.062056398,0
3777,,,317,12,,3679,3.349615773,0
3778,,,311,17,,6429,5.922886594,0
3779,,,345,16,,5995,5.607593362,0
3780,,,278,11,,2963,2.746218117,0
3781,,,655,16,,2209,2.162529182,0
3782,,,156,10,,2233,2.048906036,0
3783,,,292,16,,4155,3.880719535,0
3784,,,250,11,,3070,2.857614354,0
3785,,,317,12,,3371,3.12612166,0
3786,,,171,10,,2419,2.198855031,0
3787,,,211,11,,2791,2.560636401,0
3788,,,417,18,,3814,3.564321427,0
3789,,,448,16,,4573,4.261012872,0
3790,,,171,10,,2233,2.010097452,0
3791,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int D = sc.nextInt();
            for (int ti = 0; ti < D; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:D,",506,0.499553931,Beam
3792,,,379,17,,6932,6.486026243,0
3793,,,149,10,,2419,2.217059871,0
3794,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i11, Integer O72) {
                    if(i11 > O72) return 1;
                    else if(i11 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i11,",2781,2.609801662,Beam
3795,,,655,16,,2768,2.730416918,0
3796,"class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int max = Integer.MIN_VALUE;
            int result1 = 0;
            int result2 = 0;
            for(int i = 0; i<str.length-1;i++){
                int i2=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((i2-i1)<0) result1+=-(i2-i1);
                if(-(i2-i1)>max) max = -(i2-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=max) result2 = result2+max;
                else if(i1<max) result2 = result2+i1;
            }
            writer.write(""Case #""+index+"": ""+result1+"" ""+result2+""\n"");
        }
        reader.close();
        writer.close();

    }

}","class MyOne {
        public static String INPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt"";
        public static String OUTPUT_FILE_NAME=""/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt"";
    
        public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        BufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));
        int testCases = Integer.parseInt(reader.readLine());
        for(int index=1;index<=testCases;index++){
            String result="""";
            reader.readLine();
            String str[] = reader.readLine().split("" "");
            
            int power = Integer.MIN_VALUE;
            int result = 0;
            int result = 0;
            for(int i = 0; i<str.length-1;i++){
                int u0=Integer.parseInt(str[i+1]);
                int i1 = Integer.parseInt(str[i]);
                if((u0-i1)<0) result+=-(u0-i1);
                if(-(u0-i1)>power) power = -(u0-i1);
            }
            for(int i = 0; i<str.length-1;i++){
                int i1 = Integer.parseInt(str[i]);
                if(i1>=power) result = result+power;
                else if(i1<power) result = result+i1;
            }
            writer.write(""Case #""+index+"": ""+result+"" ""+result+""
"");
        }
        reader.close();
        writer.close();

    }

}",316,15,"max:power,i2:u0,result2:result,result1:result,",1909,1.802530169,Beam
3797,,,321,18,,6942,6.484946899,0
3798,,,443,17,,5309,4.978168503,0
3799,,,306,16,,5147,4.772610704,0
3800,,,460,16,,5302,5.003504392,0
3801,,,263,13,,4093,3.797197445,0
3802,"class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ans = 0;

            int r = scan.nextInt();
            int c = scan.nextInt();
            int w = scan.nextInt();

            ans = (r - 1) * (c / w) + (c - 1) / w + w;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ans);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}","class P1 {

    public static void main(String[] args) throws Exception {
        Scanner scan = new Scanner(new File(""in.txt""));
        PrintWriter writer = new PrintWriter(""out.txt"");

        int cases = scan.nextInt();

        for (int i = 0; i < cases; i++) {
            int ANS = 0;

            int r = scan.nextInt();
            int k = scan.nextInt();
            int p = scan.nextInt();

            ANS = (r - 1) * (k / p) + (k - 1) / p + p;

            writer.print(""Case #"");
            writer.print(i+1);
            writer.print("": "");
            writer.print(ANS);
            writer.println();
        }

        scan.close();
        writer.close();
    }

}",169,10,"c:k,w:p,ans:ANS,",745,0.682287053,Beam
3803,,,240,13,,2153,1.990281256,0
3804,,,311,17,,6684,6.173135297,0
3805,,,255,13,,3194,2.924696342,0
3806,,,224,11,,3070,2.790451356,0
3807,,,393,16,,5300,4.873011935,0
3808,,,325,16,,6046,5.474951438,0
3809,,,443,17,,5628,5.043251165,0
3810,,,448,16,,4569,4.32081031,0
3811,,,271,12,,3411,3.134222559,0
3812,,,224,11,,2791,2.488588715,0
3813,,,330,16,,5891,5.229032767,0
3814,,,393,16,,5288,4.965493067,0
3815,,,366,17,,6139,5.763687968,0
3816,,,291,12,,3535,3.321520078,0
3817,,,169,10,,2202,2.029206216,0
3818,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,s ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        s=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                s=Math.s(s,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=s,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:s,",435,0.406695306,Beam
3819,,,255,13,,3194,2.949790025,0
3820,"class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int casei = 1; casei <= t; casei++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int sum = 0;
            int max = 0;
            for (int i = 1; i < n; i++) {
                m[i] = sc.nextInt();
                int diff = Math.max(0, m[i - 1] - m[i]);
                max = Math.max(max, diff);
                sum += diff;
            }

            int ret = 0;
            for (int i = 1; i < n; i++) {
                ret += Math.min(m[i- 1], max);
            }

            System.out.printf(""Case #%d: %d %d\n"", casei, sum, ret);
        }

        sc.close();
    }
}","class Main_Round1A_2015_A {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        for (int raceI = 1; raceI <= t; raceI++) {
            int n = sc.nextInt();
            int[] m = new int[n];
            m[0] = sc.nextInt();

            int index = 0;
            int w = 0;
            for (int min = 1; min < n; min++) {
                m[min] = sc.nextInt();
                int field = Math.w(0, m[min - 1] - m[min]);
                w = Math.w(w, field);
                index += field;
            }

            int ret = 0;
            for (int min = 1; min < n; min++) {
                ret += Math.min(m[min- 1], w);
            }

            System.out.printf(""Case #%d: %d %d
"", casei, sum, ret);
        }

        sc.close();
    }
}",215,12,"max:w,diff:field,i:min,sum:index,casei:raceI,",1814,1.671771296,Beam
3822,,,256,13,,3366,3.103554237,0
3823,,,375,12,,3580,3.348025525,0
3824,,,308,12,,1241,1.153930501,0
3825,,,317,12,,3393,3.157268298,0
3826,,,349,19,,5403,5.055056747,0
3828,,,281,14,,4807,4.410878984,0
3829,,,285,14,,5209,4.823210347,0
3830,,,443,17,,5664,5.352659996,0
3831,,,219,14,,3147,2.919357196,0
3832,,,443,17,,4985,4.726765919,0
3833,,,292,16,,4403,4.10402894,0
3834,,,321,18,,6984,6.456520204,0
3835,,,406,19,,7968,7.520675623,0
3836,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i11, Integer O72) {
                    if(i11 > O72) return 1;
                    else if(i11 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i11,",2781,2.58877962,Beam
3837,,,381,22,,8052,7.504779983,0
3838,,,479,25,,7903,7.48940117,0
3839,,,290,12,,3683,3.425085231,0
3840,,,187,13,,2018,1.865082347,0
3841,,,264,15,,5088,4.767089005,0
3842,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int xi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int xi = 0; xi < w; xi++) {
                        chunks[xi] = si.nextInt();
                    }
                    
                    int index = 0;
                    int pixel = 0;
                    
                    for (int xi = 0; xi < w - 1; xi++) {
                        int length = chunks[xi] - chunks[xi + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int xi = 0; xi < w - 1; xi++) {
                        length[xi] = chunks[xi] - chunks[xi + 1];
                    }
                    int abs = 0;
                    for (int xi = 0; xi < w - 1; xi++) {
                        abs = Math.abs(abs, length[xi]);
                    }
                
                    for (int xi = 0; xi < w - 1; xi++) {
                        pixel += Math.min(abs, chunks[xi]);
                    }
                    
                    System.out.printf(""%d %d"", index, pixel);
                    System.err.printf(""%d %d"", index, pixel);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int xi = 0; xi < w; xi++) {
                    chunks[xi] = si.nextInt();
                }
                
                int index = 0;
                int pixel = 0;
                
                for (int xi = 0; xi < w - 1; xi++) {
                    int length = chunks[xi] - chunks[xi + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int xi = 0; xi < w - 1; xi++) {
                    length[xi] = chunks[xi] - chunks[xi + 1];
                }
                int abs = 0;
                for (int xi = 0; xi < w - 1; xi++) {
                    abs = Math.abs(abs, length[xi]);
                }
            
                for (int xi = 0; xi < w - 1; xi++) {
                    pixel += Math.min(abs, chunks[xi]);
                }
                
                System.out.printf(""%d %d"", index, pixel);
                System.err.printf(""%d %d"", index, pixel);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ks,diff:length,mush:chunks,first:index,i:xi,i1:index,second:pixel,testCase:testCount,sc:si,i4:i48,i2:ii,max:abs,c:w,",4301,4.844231188,Beam
3843,,,379,17,,6932,6.423671695,0
3844,"class Main {

    public static void main(String[] args) {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream bos = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String str = br.readLine();
            int t = Integer.parseInt(str);
            for(int i = 0 ; i < t ; i++) {
                str = br.readLine();
                int n = Integer.parseInt(str);
                str = br.readLine();
                StringTokenizer st = new StringTokenizer(str,"" "");
                int [] ar = new int[n];
                int iter = 0;
                while(st.hasMoreTokens()) {
                    ar[iter++] = Integer.parseInt(st.nextToken());
                }
                int ansY = 0;
                int ansZ = 0;
                int dip = 0;
                for(int j = 0 ; j < n-1 ; j++) {
                    dip = Math.max(dip,ar[j]-ar[j+1]);
                    if(ar[j+1]<ar[j]) {
                        ansY += ar[j]-ar[j+1];
                    }
                }
                for(int j = 0 ; j < n-1 ; j++) {
                    int x = Math.min(ar[j],dip);
                    ansZ += x;
                }
                bos.write(""Case #"".getBytes());
                bos.write(new Integer(i+1).toString().getBytes());
                bos.write("": "".getBytes());
                bos.write(new Integer(ansY).toString().getBytes());
                bos.write("" "".getBytes());
                bos.write(new Integer(ansZ).toString().getBytes());
                bos.write(eolb);
            }
            bos.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}","class Main {

    public static void main(String[] args) {
        BufferedReader bt = new BufferedReader(new InputStreamReader(System.in));
        BufferedOutputStream browser = new BufferedOutputStream(System.out);
        String eol = System.getProperty(""line.separator"");
        byte[] eolb = eol.getBytes();
        try {
            String char = bt.readLine();
            int g = Integer.parseInt(char);
            for(int jp = 0 ; jp < g ; jp++) {
                char = bt.readLine();
                int k = Integer.parseInt(char);
                char = bt.readLine();
                StringTokenizer rt = new StringTokenizer(char,"" "");
                int [] p = new int[k];
                int itter = 0;
                while(rt.hasMoreTokens()) {
                    p[itter++] = Integer.parseInt(rt.nextToken());
                }
                int ANSYY = 0;
                int d = 0;
                int pep = 0;
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    pep = Math.max(pep,p[jp]-p[jp+1]);
                    if(p[jp+1]<p[jp]) {
                        ANSYY += p[jp]-p[jp+1];
                    }
                }
                for(int jp = 0 ; jp < k-1 ; jp++) {
                    int g = Math.min(p[jp],pep);
                    d += g;
                }
                browser.write(""Case #"".getBytes());
                browser.write(new Integer(jp+1).toString().getBytes());
                browser.write("": "".getBytes());
                browser.write(new Integer(ANSYY).toString().getBytes());
                browser.write("" "".getBytes());
                browser.write(new Integer(d).toString().getBytes());
                browser.write(eolb);
            }
            browser.flush();
        } catch(IOException ioe) {
            ioe.printStackTrace();
        }

    }

}",420,19,"n:k,t:g,str:char,br:bt,ansY:ANSYY,ar:p,x:g,j:jp,st:rt,i:jp,ansZ:d,dip:pep,iter:itter,bos:browser,",6852,4.992591604,Beam
3845,,,292,17,,6913,6.478447791,0
3846,,,619,14,,4533,4.381007191,0
3847,,,156,10,,2233,2.053840208,0
3848,,,262,14,,3132,2.933529671,0
3849,,,295,15,,3130,2.924040043,0
3850,,,156,10,,2447,2.219275276,0
3851,,,479,25,,8069,7.545543353,0
3852,"class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int i = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in"").exists())
                    i++;
                i--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char c = (char) System.in.read();
                    test = c != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? i == 0 ? ""-practice"" : """" : ""-attempt"" + i) + "".out""));
                    AL r = new AL();
                    Scanner sc = new Scanner(System.in);
                    int testCase = sc.nextInt();
                    
                    for (int k = 1; k <= testCase; k++) {
                        System.out.printf(""Case #%d: "", k);
                        System.err.printf(""Case #%d: "", k);
                    
                        int n = sc.nextInt();
                        
                        int[] mush = new int[n];
                        for (int i1 = 0; i1 < n; i1++) {
                            mush[i1] = sc.nextInt();
                        }
                        
                        int first = 0;
                        int second = 0;
                        
                        for (int i4 = 0; i4 < n - 1; i4++) {
                            int diff = mush[i4] - mush[i4 + 1];
                            if (diff > 0) {
                                first += diff;
                            }
                        }
                        
                        int[] diff = new int[n - 1];
                        for (int i3 = 0; i3 < n - 1; i3++) {
                            diff[i3] = mush[i3] - mush[i3 + 1];
                        }
                        int max = 0;
                        for (int i5 = 0; i5 < n - 1; i5++) {
                            max = Math.max(max, diff[i5]);
                        }
                    
                        for (int i2 = 0; i2 < n - 1; i2++) {
                            second += Math.min(max, mush[i2]);
                        }
                        
                        System.out.printf(""%d %d"", first, second);
                        System.err.printf(""%d %d"", first, second);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    sc.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner sc = new Scanner(System.in);
                int testCase = sc.nextInt();
                
                for (int k = 1; k <= testCase; k++) {
                    System.out.printf(""Case #%d: "", k);
                    System.err.printf(""Case #%d: "", k);
                
                    int n = sc.nextInt();
                    
                    int[] mush = new int[n];
                    for (int i = 0; i < n; i++) {
                        mush[i] = sc.nextInt();
                    }
                    
                    int first = 0;
                    int second = 0;
                    
                    for (int i = 0; i < n - 1; i++) {
                        int diff = mush[i] - mush[i + 1];
                        if (diff > 0) {
                            first += diff;
                        }
                    }
                    
                    int[] diff = new int[n - 1];
                    for (int i = 0; i < n - 1; i++) {
                        diff[i] = mush[i] - mush[i + 1];
                    }
                    int max = 0;
                    for (int i = 0; i < n - 1; i++) {
                        max = Math.max(max, diff[i]);
                    }
                
                    for (int i = 0; i < n - 1; i++) {
                        second += Math.min(max, mush[i]);
                    }
                    
                    System.out.printf(""%d %d"", first, second);
                    System.err.printf(""%d %d"", first, second);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                sc.close();
            }
        } else {
            AL r = new AL();
            Scanner sc = new Scanner(System.in);
            int testCase = sc.nextInt();
            
            for (int k = 1; k <= testCase; k++) {
                System.out.printf(""Case #%d: "", k);
                System.err.printf(""Case #%d: "", k);
            
                int n = sc.nextInt();
                
                int[] mush = new int[n];
                for (int i = 0; i < n; i++) {
                    mush[i] = sc.nextInt();
                }
                
                int first = 0;
                int second = 0;
                
                for (int i = 0; i < n - 1; i++) {
                    int diff = mush[i] - mush[i + 1];
                    if (diff > 0) {
                        first += diff;
                    }
                }
                
                int[] diff = new int[n - 1];
                for (int i = 0; i < n - 1; i++) {
                    diff[i] = mush[i] - mush[i + 1];
                }
                int max = 0;
                for (int i = 0; i < n - 1; i++) {
                    max = Math.max(max, diff[i]);
                }
            
                for (int i = 0; i < n - 1; i++) {
                    second += Math.min(max, mush[i]);
                }
                
                System.out.printf(""%d %d"", first, second);
                System.err.printf(""%d %d"", first, second);
                
                System.out.println();
                System.err.println();
                
            }
            sc.close();
        }
    }
}","class AL {
    static final boolean _PRACTICE = !true;
    static final boolean _SAMPLE = !true;
    static final boolean _SMALL = !true;
    static final String _PROBLEM = ""A"";

    public static void main(String... args) throws IOException {
        if (!_SAMPLE) {
            if (_SMALL) {
                int xi = 0;
                while (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in"").exists())
                    xi++;
                xi--;
                boolean test = false;
                if (new File(_PROBLEM + ""-small""
                + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"").exists()) {
                    System.err.println(""overwrite?(y/n)"");
                    char w = (char) System.in.read();
                    test = w != 'y';
                }
                if (test) {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small-test.out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                    FileReader f1 = new FileReader(_PROBLEM + ""-small-test.out"");
                    FileReader f2 = new FileReader(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out"");
                    BufferedReader br1 = new BufferedReader(f1);
                    BufferedReader br2 = new BufferedReader(f2);
                    for (int j = 1;; j++) {
                        String s1 = br1.readLine();
                        String s2 = br2.readLine();
                        if (s1 == null && s2 == null) {
                            System.err.println(""OK!"");
                            break;
                        }
                        if (s1 == null || s2 == null || !s1.equals(s2)) {
                            System.err.println(""failed at line "" + j);
                            System.err.println(""expected "" + s2);
                            System.err.println(""but "" + s1);
                            break;
                        }
                    }
                    br1.close();
                    br2.close();
                } else {
                    System.setIn(new FileInputStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".in""));
                    System.setOut(new PrintStream(_PROBLEM + ""-small""
                    + (_PRACTICE ? xi == 0 ? ""-practice"" : """" : ""-attempt"" + xi) + "".out""));
                    AL r = new AL();
                    Scanner si = new Scanner(System.in);
                    int testCount = si.nextInt();
                    
                    for (int ks = 1; ks <= testCount; ks++) {
                        System.out.printf(""Case #%d: "", ks);
                        System.err.printf(""Case #%d: "", ks);
                    
                        int w = si.nextInt();
                        
                        int[] chunks = new int[w];
                        for (int index = 0; index < w; index++) {
                            chunks[index] = si.nextInt();
                        }
                        
                        int index = 0;
                        int pixel = 0;
                        
                        for (int i48 = 0; i48 < w - 1; i48++) {
                            int length = chunks[i48] - chunks[i48 + 1];
                            if (length > 0) {
                                index += length;
                            }
                        }
                        
                        int[] length = new int[w - 1];
                        for (int i3 = 0; i3 < w - 1; i3++) {
                            length[i3] = chunks[i3] - chunks[i3 + 1];
                        }
                        int abs = 0;
                        for (int i5 = 0; i5 < w - 1; i5++) {
                            abs = Math.abs(abs, length[i5]);
                        }
                    
                        for (int ii = 0; ii < w - 1; ii++) {
                            pixel += Math.min(abs, chunks[ii]);
                        }
                        
                        System.out.printf(""%d %d"", index, pixel);
                        System.err.printf(""%d %d"", index, pixel);
                        
                        System.out.println();
                        System.err.println();
                        
                    }
                    si.close();
                }
            } else {
                System.setIn(new FileInputStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".in""));
                System.setOut(new PrintStream(_PROBLEM + ""-large"" + (_PRACTICE ? ""-practice"" : """") + "".out""));
                AL r = new AL();
                Scanner si = new Scanner(System.in);
                int testCount = si.nextInt();
                
                for (int ks = 1; ks <= testCount; ks++) {
                    System.out.printf(""Case #%d: "", ks);
                    System.err.printf(""Case #%d: "", ks);
                
                    int w = si.nextInt();
                    
                    int[] chunks = new int[w];
                    for (int xi = 0; xi < w; xi++) {
                        chunks[xi] = si.nextInt();
                    }
                    
                    int index = 0;
                    int pixel = 0;
                    
                    for (int xi = 0; xi < w - 1; xi++) {
                        int length = chunks[xi] - chunks[xi + 1];
                        if (length > 0) {
                            index += length;
                        }
                    }
                    
                    int[] length = new int[w - 1];
                    for (int xi = 0; xi < w - 1; xi++) {
                        length[xi] = chunks[xi] - chunks[xi + 1];
                    }
                    int abs = 0;
                    for (int xi = 0; xi < w - 1; xi++) {
                        abs = Math.abs(abs, length[xi]);
                    }
                
                    for (int xi = 0; xi < w - 1; xi++) {
                        pixel += Math.min(abs, chunks[xi]);
                    }
                    
                    System.out.printf(""%d %d"", index, pixel);
                    System.err.printf(""%d %d"", index, pixel);
                    
                    System.out.println();
                    System.err.println();
                    
                }
                si.close();
            }
        } else {
            AL r = new AL();
            Scanner si = new Scanner(System.in);
            int testCount = si.nextInt();
            
            for (int ks = 1; ks <= testCount; ks++) {
                System.out.printf(""Case #%d: "", ks);
                System.err.printf(""Case #%d: "", ks);
            
                int w = si.nextInt();
                
                int[] chunks = new int[w];
                for (int xi = 0; xi < w; xi++) {
                    chunks[xi] = si.nextInt();
                }
                
                int index = 0;
                int pixel = 0;
                
                for (int xi = 0; xi < w - 1; xi++) {
                    int length = chunks[xi] - chunks[xi + 1];
                    if (length > 0) {
                        index += length;
                    }
                }
                
                int[] length = new int[w - 1];
                for (int xi = 0; xi < w - 1; xi++) {
                    length[xi] = chunks[xi] - chunks[xi + 1];
                }
                int abs = 0;
                for (int xi = 0; xi < w - 1; xi++) {
                    abs = Math.abs(abs, length[xi]);
                }
            
                for (int xi = 0; xi < w - 1; xi++) {
                    pixel += Math.min(abs, chunks[xi]);
                }
                
                System.out.printf(""%d %d"", index, pixel);
                System.err.printf(""%d %d"", index, pixel);
                
                System.out.println();
                System.err.println();
                
            }
            si.close();
        }
    }
}",1850,30,"n:w,k:ks,diff:length,mush:chunks,first:index,i:xi,i1:index,second:pixel,testCase:testCount,sc:si,i4:i48,i2:ii,max:abs,c:w,",4301,4.813900471,Beam
3853,,,250,11,,2791,2.54578083,0
3854,,,735,24,,11567,11.29355361,0
3855,,,263,13,,4372,4.03752414,0
3856,,,358,18,,6700,6.257112853,0
3857,,,306,16,,5054,4.611893415,0
3858,,,282,13,,4085,3.730484184,0
3859,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int D = sc.nextInt();
            for (int ti = 0; ti < D; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:D,",506,0.497488141,Beam
3860,,,500,19,,8743,8.203121348,0
3861,,,366,17,,6139,5.722266479,0
3862,,,281,14,,5209,4.760892053,0
3863,,,328,16,,5240,4.807054114,0
3864,,,513,26,,17508,16.66250637,0
3865,,,443,17,,5016,4.730698518,0
3866,,,302,13,,3763,3.491050903,0
3867,,,292,17,,6731,6.212008707,0
3868,,,443,17,,4890,4.620663921,0
3869,,,291,15,,3580,3.325913648,0
3870,,,309,11,,1985,1.840008585,0
3871,,,468,20,,8993,8.553482632,0
3872,,,348,14,,3883,3.637641493,0
3873,,,269,16,,5877,5.497197707,0
3874,,,295,15,,3491,3.284561948,0
3875,,,272,16,,5973,5.469830739,0
3876,,,478,22,,11510,9.472946099,0
3877,,,291,12,,3380,2.367229875,0
3878,,,200,10,,2481,1.701896826,0
3879,,,379,17,,6932,4.791596675,0
3880,,,345,16,,6002,4.115250949,0
3881,,,344,15,,4882,3.35245012,0
3882,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i11, Integer O72) {
                    if(i11 > O72) return 1;
                    else if(i11 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i11,",2781,1.916862885,Beam
3883,,,303,12,,2713,1.873166438,0
3884,,,278,11,,2748,1.896479233,0
3885,,,311,17,,6640,4.632759599,0
3886,,,282,13,,4075,2.824028528,0
3887,,,349,19,,5316,3.738870084,0
3889,,,290,12,,3684,2.570055739,0
3890,,,292,17,,6481,4.514679396,0
3891,,,355,19,,6123,4.307220022,0
3892,,,311,17,,6694,4.680312407,0
3893,"class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int _t = 1; _t <= t; _t++) {

            int n = sc.nextInt(); sc.nextLine();
            int[] p = new int[n];
            int total = 0;
            char ich = 'A';
            int max = -1;
            char[] labels = new char[n];
            for (int i=0; i < n; i++) {
                p[i] = sc.nextInt();
                total += p[i];
                labels[i] = ich;
                ich++;
                if (p[i] > max) {
                    max = p[i];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != total) {
            
                        for (int i=0; i<n; i++) {
            
                            if (p[i] > 0) {
                                sb.append(labels[i]);
                                s.push(labels[i]);
                                p[i]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();
                            sb3.append(c3);
                            sb3.append(' ');
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), c2 = s.pop();
                            sb3.append(c2);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}","class Problem1 {

    private static boolean debug = false;

    public static void main(String[] args) {

        Scanner osc = new Scanner(System.in);

        int h = osc.nextInt();

        for (int _t = 1; _t <= h; _t++) {

            int k = osc.nextInt(); osc.nextLine();
            int[] p = new int[k];
            int start = 0;
            char ich = 'A';
            int h = -1;
            char[] labels = new char[k];
            for (int b=0; b < k; b++) {
                p[b] = osc.nextInt();
                start += p[b];
                labels[b] = ich;
                ich++;
                if (p[b] > h) {
                    h = p[b];
                }
            }
            StringBuilder sb = new StringBuilder();
                    Stack<Character> s = new Stack<>();
            
                    while (s.size() != start) {
            
                        for (int b=0; b<k; b++) {
            
                            if (p[b] > 0) {
                                sb.append(labels[b]);
                                s.push(labels[b]);
                                p[b]--;
                            }
                        }
                    }
            
                    if (debug) {
                        System.out.println(""sb: ""+sb);
                    }
                    if (debug) {
                        System.out.println(""s: ""+s);
                    }
            /*
            
                    StringBuilder sb2 = new StringBuilder();
                    for (int j=0; j<sb.length(); j++) {
                        sb2.append(sb.charAt(j));
            
                        if (sb.length()%2 == 0) {
                            if (j%2==1) {
                                sb2.append("" "");
                            }
                        } else {
            
                            if (j == sb.length()-3) {
                                sb2.append(sb.charAt(sb.length()-1));
                                sb2.append("" "");
                                sb2.append(sb.charAt(sb.length()-3));
                                sb2.append(sb.charAt(sb.length()-2));
                                break;
                            } else {
                                if (j%2==1) {
                                    sb2.append("" "");
                                }
                            }
                        }
            
                    }
            */
            
                    StringBuilder sb3 = new StringBuilder();
                    while(!s.empty()) {
                        if (s.size() == 3) {
                            char c1 = s.pop(), b = s.pop(), ar3 = s.pop();
                            sb3.append(ar3);
                            sb3.append(' ');
                            sb3.append(b);
                            sb3.append(c1);
                            sb3.append(' ');
                        } else {
                            char c1 = s.pop(), b = s.pop();
                            sb3.append(b);
                            sb3.append(c1);
                            sb3.append(' ');
                        }
                    }

            String result = sb3.toString();
            System.out.printf(""Case #%d: %s%n"", _t, result);
        }
    }
}",448,20,"i:b,total:start,max:h,sc:osc,n:k,t:h,c2:b,c3:ar3,",5756,4.137551649,Beam
3894,,,255,13,,2915,1.965111017,0
3895,,,619,14,,4333,3.092982304,0
3896,,,406,19,,7999,5.547429355,0
3897,,,169,10,,2202,1.499023124,0
3898,,,282,13,,4085,2.832784748,0
3899,,,619,14,,4533,3.277669422,0
3900,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int y = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=y) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+y-1);
    }
    System.out.println(res);
  }
}",187,12,"w:y,",311,0.211509232,Beam
3901,,,311,17,,6632,4.627016608,0
3902,,,280,13,,3163,2.209690448,0
3903,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int u = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=u) {
           min++;
        }
      }

      if (i != 1) res += ""
"";
      res += ""Case #"" + i + "": "" + (min+u-1);
    }
    System.out.println(res);
  }
}",187,12,"w:u,",311,0.203804346,Beam
3904,"class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> list = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    list.add(sc.nextInt());
                }

            }

            list.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if(o1 > o2) return 1;
                    else if(o1 < o2) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int size = list.size();
            int prev = list.get(0);
            int count = 1;

            for(int i=1; i<size; i++) {
                if(list.get(i) != prev) {

                    if(count % 2 == 1) {
                        answer.add(prev);
                    }

                    count = 1;
                    prev = list.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(prev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.size(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}","class RandAndFile {

    static int[][] matrix;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int testcase = 1; testcase <= t; testcase++) {

            int n = sc.nextInt();
            List<Integer> string = new ArrayList<Integer>();

            //each list
            for(int a=0; a<n*2-1; a++) {

                //each element in the list
                for(int b=0; b<n; b++) {
                    string.add(sc.nextInt());
                }

            }

            string.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer i11, Integer O72) {
                    if(i11 > O72) return 1;
                    else if(i11 < O72) return -1;
                    else return 0;
                }
            });

            List<Integer> answer = new ArrayList<Integer>();
            int max = string.max();
            int rev = string.get(0);
            int count = 1;

            for(int i=1; i<max; i++) {
                if(string.get(i) != rev) {

                    if(count % 2 == 1) {
                        answer.add(rev);
                    }

                    count = 1;
                    rev = string.get(i);

                } else {
                    count++;
                }
            }

            if(count % 2 == 1) {
                answer.add(rev);
            }

            System.out.printf(""Case #%d:"", testcase);
            for(int j=0; j<answer.max(); j++) {
                System.out.print("" "" + answer.get(j));
            }
            System.out.println();


        }
    }
}",358,18,"size:max,list:string,prev:rev,o2:O72,o1:i11,",2781,1.88998131,Beam
3905,,,256,13,,3050,2.041146485,0
3906,,,311,17,,6581,4.492756454,0
3907,,,443,17,,5783,4.02491136,0
3908,,,273,11,,3046,2.016967722,0
3909,,,264,15,,5236,3.592204626,0
3910,,,330,16,,5829,3.98877815,0
3911,,,348,21,,7897,5.458502773,0
3912,,,265,12,,3685,2.538534776,0
3913,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anner = new Scanner(System.in);
        int t = anner.nextInt();
        for(int x = 1; x <= t; ++x){
            int c = anner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int j = 0; j < c; ++j){
                    int s = anner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:char,scanner:anner,",807,0.546121669,Beam
3914,,,366,17,,6139,4.284069451,0
3915,,,291,15,,3654,2.540087585,0
3916,,,317,12,,3681,2.55896072,0
3917,,,479,25,,8095,5.747737833,0
3918,,,358,16,,5302,3.693260713,0
3919,,,468,20,,8931,6.283232522,0
3920,,,265,12,,3695,2.485331639,0
3921,,,292,17,,6873,4.657167566,0
3922,,,269,13,,4320,2.989318768,0
3923,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader reader = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(reader.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(reader.readLine());
            String[] mushroommNumbers = reader.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totaleaton = 0;
            
            double parentTime = 0;
            int name = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = name;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int number = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = number;
                if (name > number) {
                    totaleaton += name - number;
                    parentTime = new Double(Math.max(parentTime, (name - number) / 10.0));
                }
                name = number;
            }
            
            double previous = 0;
            name = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int number =  coockiesNumbers[depth];
                previous += Math.min(parentTime * 10, name);
                name = number;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totaleaton + "" "" + new Double(previous).intValue() + ""
"");
        }

        writer.close();
        reader.close();
    }
}",334,15,"totalTime:c,maxRate:parentTime,i:s,time:depth,newNum:number,current:name,totalEatenB:previous,totalEaten:totaleaton,mushroormNumbers:mushroommNumbers,testCases:testTase,br:reader,",4930,3.333959901,Beam
3924,,,295,16,,5302,3.537310112,0
3925,,,272,16,,5844,3.90180792,0
3926,"class A
{
    static char[] let={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int i=0; i<3; i++)
            table[i][0]=""""+let[i];
        for (int n=0; n<=11; n++)
            for (int i=0; i<3; i++)
            {
                String a=table[i][n], b=table[(i+1)%3][n];
                if (a.compareTo(b)<0)
                    table[i][n+1]=a+b;
                else
                    table[i][n+1]=b+a;
            }
        
        Scanner in=new Scanner(System.in);
        int numRuns=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=numRuns; run++)
        {
            int n=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int i=0; i<3; i++)
            {
                match=true;
                String game=table[i][n];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+let[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}","class A
{
    static char[] format={'P','R','S'};
    public static void main(String[] args)
    {
        String[][] table = new String[3][13];
        for (int phi=0; phi<3; phi++)
            table[phi][0]=""""+format[phi];
        for (int w=0; w<=11; w++)
            for (int phi=0; phi<3; phi++)
            {
                String a=table[phi][w], wb=table[(phi+1)%3][w];
                if (a.compareTo(wb)<0)
                    table[phi][w+1]=a+wb;
                else
                    table[phi][w+1]=wb+a;
            }
        
        Scanner in=new Scanner(System.in);
        int NumScriptks=in.nextInt();
        int[] count=new int[3];
        for (int run=1; run<=NumScriptks; run++)
        {
            int w=in.nextInt();
            count[1]=in.nextInt();
            count[0]=in.nextInt();
            count[2]=in.nextInt();
            boolean match=false;
            for (int phi=0; phi<3; phi++)
            {
                match=true;
                String game=table[phi][w];
                for (int j=0; j<3; j++)
                    if (game.length()-game.replace(""""+format[j],"""").length()!=count[j])
                        match=false;
                if (match)
                {
                    System.out.println(""Case #""+run+"": ""+game);
                    break;
                }
            }
            if (!match)
                System.out.println(""Case #""+run+"": IMPOSSIBLE"");
        }
    }
}",387,15,"b:wb,n:w,let:format,i:phi,numRuns:NumScriptks,",2512,1.735189684,Beam
3927,,,269,16,,5921,3.788743273,0
3928,,,273,11,,3049,1.364143976,0
3929,,,240,12,,3619,1.622536918,0
3930,,,448,16,,4569,2.139545699,0
3931,,,241,15,,3656,1.662632692,0
3932,,,321,13,,4093,1.853484599,0
3933,"class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long C = Long.parseLong(parts[1]);
                long W = Long.parseLong(parts[2]);
                long result = (C-1)/W+W;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""\n"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}","class Problem_A {

    public static void main(String[] args) {
        //String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt"";
        String inFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in"";
        String outFile = ""//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt"";
        int n = 0;
        String line;
        try {
            FileReader fileReader = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fileReader);
            FileWriter fileWriter = new FileWriter(outFile);
            BufferedWriter bw = new BufferedWriter(fileWriter);
            line = br.readLine();
            n = Integer.parseInt(line);
            for(int i = 0; i < n ; i++){
                line = br.readLine();
                
                String[] parts = line.split("" "");
                long R = Long.parseLong(parts[0]);
                long K = Long.parseLong(parts[1]);
                long K = Long.parseLong(parts[2]);
                long result = (K-1)/K+K;
                bw.write(""Case #"" + (i+1) + "": "" + result + ""
"");
                
            }
            br.close();
            bw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }
}",222,16,"W:K,C:K,",311,0.14308929,Beam
3934,,,272,16,,5886,2.62932477,0
3935,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int D = sc.nextInt();
            for (int ti = 0; ti < D; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:D,",506,0.260112035,Beam
3936,,,366,17,,6077,2.800894419,0
3937,"class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int r = Integer.parseInt(st.nextToken());
                int c = Integer.parseInt(st.nextToken());
                int w = Integer.parseInt(st.nextToken());
                int[] dp = new int[c+1];
                dp[w] = w + r - 1;
                for(int j = w + 1; j <= 2*w - 1; j++)
                {
                    if(j > c)
                        break;
                    dp[j] = w+1 + r-1;
                }
                for(int j = 2*w; j <= c; j++)
                {
                    dp[j] = Math.max(dp[j-w] + r, w + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dp[c]);
                fout.write(""Case #"" + i + "": "" + dp[c] + ""\n"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}","class Brattleship {
    public static void main(String[] args) {
        try
        {
            BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
            int t = Integer.parseInt(f.readLine());
            FileWriter fout = new FileWriter(""brattleship.out"");
            for(int i = 1; i <= t; i++)
            {
                StringTokenizer st = new StringTokenizer(f.readLine());
                int end = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int l = Integer.parseInt(st.nextToken());
                int[] dist = new int[l+1];
                dist[l] = l + end - 1;
                for(int j = l + 1; j <= 2*l - 1; j++)
                {
                    if(j > l)
                        break;
                    dist[j] = l+1 + end-1;
                }
                for(int j = 2*l; j <= l; j++)
                {
                    dist[j] = Math.max(dist[j-l] + end, l + 1);
                }
                System.out.println(""Case #"" + i + "": "" + dist[l]);
                fout.write(""Case #"" + i + "": "" + dist[l] + ""
"");
            }
            f.close();
            fout.close();
        }
        catch(IOException e)
        {
            System.out.println(e);
        }


    }

}",300,13,"w:l,r:end,c:l,dp:dist,",1391,0.637289846,Beam
3938,"class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int x = 1; x <= t; ++x){
            int n = scanner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * n - 1; ++i){
                for(int j = 0; j < n; ++j){
                    int s = scanner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int count = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++count;
                    if(count < n){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}","class Main {
    public static void main(String[] args){
        Scanner anner = new Scanner(System.in);
        int t = anner.nextInt();
        for(int x = 1; x <= t; ++x){
            int c = anner.nextInt();
            boolean[] soldiers = new boolean[2500];
            for(int i = 0; i < 2 * c - 1; ++i){
                for(int j = 0; j < c; ++j){
                    int s = anner.nextInt();
                    soldiers[s-1] = !soldiers[s-1];
                }
            }
            int char = 0;
            System.out.print(""Case #"" + x + "": "");
            for(int i = 1; i <= 2500; ++i){
                if(soldiers[i-1]){
                    ++char;
                    if(char < c){
                        System.out.print(i + "" "");
                    }
                    else{
                        System.out.println(i);
                    }
                }
                
            }
        }
    }
}",211,11,"n:c,count:char,scanner:anner,",807,0.36175582,Beam
3939,,,305,15,,5224,2.369118202,0
3940,,,306,16,,5302,2.398564764,0
3941,,,298,16,,4992,2.244062634,0
3942,,,406,16,,6046,2.814016998,0
3943,,,325,16,,6015,2.725419335,0
3944,,,443,17,,4890,2.273965259,0
3945,,,316,15,,4185,1.911482183,0
3946,,,345,16,,5983,2.7352301,0
3947,,,266,13,,4073,1.827615281,0
3948,,,290,12,,3692,1.673979624,0
3949,,,432,19,,8898,4.159710105,0
3950,,,363,16,,6077,2.775728981,0
3951,"class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader br = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testCases = Integer.parseInt(br.readLine());
        
        for (int i = 0; i < testCases; ++i) {
            int totalTime = Integer.parseInt(br.readLine());
            String[] mushroormNumbers = br.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[totalTime];
            
            int totalEaten = 0;
            
            double maxRate = 0;
            int current = Integer.parseInt(mushroormNumbers[0]);
            coockiesNumbers[0] = current;
            
            
            for (int time = 1; time < totalTime; ++time) {
                int newNum = Integer.parseInt(mushroormNumbers[time]);
                coockiesNumbers[time] = newNum;
                if (current > newNum) {
                    totalEaten += current - newNum;
                    maxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));
                }
                current = newNum;
            }
            
            double totalEatenB = 0;
            current = coockiesNumbers[0];
            for (int time = 1; time < totalTime; ++time) {
                int newNum =  coockiesNumbers[time];
                totalEatenB += Math.min(maxRate * 10, current);
                current = newNum;
            }
            
            writer.append(""Case #"" + (i + 1) + "": "" + totalEaten + "" "" + new Double(totalEatenB).intValue() + ""\n"");
        }

        writer.close();
        br.close();
    }
}","class Mushrooms {
    public static void main(String[] args) throws IOException {
        // IO
        BufferedReader tr = new BufferedReader(
                new FileReader(new File(args[0])));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(new File(args[1]))));

        // Solve
        int testTase = Integer.parseInt(tr.readLine());
        
        for (int s = 0; s < testTase; ++s) {
            int c = Integer.parseInt(tr.readLine());
            String[] mushroommNumbers = tr.readLine().split(""\\s+"");

            int[] coockiesNumbers = new int[c];
            
            int totaleaton = 0;
            
            double parentTime = 0;
            int name = Integer.parseInt(mushroommNumbers[0]);
            coockiesNumbers[0] = name;
            
            
            for (int depth = 1; depth < c; ++depth) {
                int number = Integer.parseInt(mushroommNumbers[depth]);
                coockiesNumbers[depth] = number;
                if (name > number) {
                    totaleaton += name - number;
                    parentTime = new Double(Math.max(parentTime, (name - number) / 10.0));
                }
                name = number;
            }
            
            double previous = 0;
            name = coockiesNumbers[0];
            for (int depth = 1; depth < c; ++depth) {
                int number =  coockiesNumbers[depth];
                previous += Math.min(parentTime * 10, name);
                name = number;
            }
            
            writer.append(""Case #"" + (s + 1) + "": "" + totaleaton + "" "" + new Double(previous).intValue() + ""
"");
        }

        writer.close();
        tr.close();
    }
}",334,15,"totalTime:c,maxRate:parentTime,i:s,time:depth,newNum:number,current:name,totalEatenB:previous,totalEaten:totaleaton,mushroormNumbers:mushroommNumbers,testCases:testTase,br:tr,",4930,2.249497644,Beam
3952,,,325,16,,6077,2.752228924,0
3953,"class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int T = sc.nextInt();
            for (int ti = 0; ti < T; ti++) {
                int N = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < N; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < N; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < N-1; tsi++) {
                    int end = N-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = N-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = N-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}","class ProblemA {

    public static String PROBLEM_LETTER = ""A"";

    public static String IN_DIR = ""inputs/"" + PROBLEM_LETTER + ""/"";
    public static String OUT_DIR = ""outputs/"" + PROBLEM_LETTER + ""/"";

    //public static String IN_FILE = IN_DIR + ""sample.in"";
    //public static String IN_FILE = IN_DIR + ""A-small-attempt0.in"";
    public static String IN_FILE = IN_DIR + ""A-large.in"";

    //public static String OUT_FILE = OUT_DIR + ""sample.out"";
    //public static String OUT_FILE = OUT_DIR + ""small.out"";
    public static String OUT_FILE = OUT_DIR + ""large.out"";

    public static int[] idxToCnt = new int[26];
    public static char[] idxToCh = new char[26];

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(new File(IN_FILE));
            PrintWriter wr = new PrintWriter(OUT_FILE);

            int D = sc.nextInt();
            for (int ti = 0; ti < D; ti++) {
                int K = sc.nextInt();
                for(int i = 0; i < 26; i++) {
                    idxToCnt[i] = 0;
                    idxToCh[i] = (char) ('A' + i);
                }
                for(int i = 0; i < K; i++) {
                    idxToCnt[i] = sc.nextInt();
                }
                wr.print(""Case #"" + (ti+1) + "": "");
                
                int rem = 0;
                for (int i = 0; i < K; i++) {
                    rem += idxToCnt[i];
                }
                
                for (int tsi = 0; tsi < K-1; tsi++) {
                    int end = K-1;
                    int res1 = tsi;
                    
                    if (true) {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = tsi + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                    int nextMax = res1;
                    if (nextMax == tsi) {
                        continue;
                    } else {
                        int tmpCnt = idxToCnt[tsi];
                        char tmpChar = idxToCh[tsi];
                        
                        idxToCnt[tsi] = idxToCnt[nextMax];
                        idxToCh[tsi] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                }
                
                String res = """";
                while(true) {
                    if (res.length() != 0) {
                        res += "" "";
                    }
                    String door = """";
                
                    door += idxToCh[0];
                    idxToCnt[0]--;
                    rem--;
                
                    if(rem == 0) {
                        res += door;
                        break;
                    }
                    int end = K-1;
                    int res1 = 0;
                    
                    if (false) {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] > idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    } else {
                        for (int i = 0 + 1; i <= end; i++) {
                            if (idxToCnt[i] >= idxToCnt[res1]) {
                                res1 = i;
                            }
                        }
                    }
                
                    int nextMax = res1;
                    if (nextMax != 0) {
                        int tmpCnt = idxToCnt[0];
                        char tmpChar = idxToCh[0];
                        
                        idxToCnt[0] = idxToCnt[nextMax];
                        idxToCh[0] = idxToCh[nextMax];
                        
                        idxToCnt[nextMax] = tmpCnt;
                        idxToCh[nextMax] = tmpChar;
                    }
                
                    if (idxToCnt[0] > rem - idxToCnt[0]) {
                        door += idxToCh[0];
                        idxToCnt[0]--;
                        rem--;
                
                        res += door;
                
                        if(rem == 0) {
                            break;
                        }
                        int end1 = K-1;
                        int res2 = 0;
                        
                        if (false) {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] > idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        } else {
                            for (int i = 0 + 1; i <= end1; i++) {
                                if (idxToCnt[i] >= idxToCnt[res2]) {
                                    res2 = i;
                                }
                            }
                        }
                
                        int nextMax2 = res2;
                        if (nextMax2 != 0) {
                            int tmpCnt = idxToCnt[0];
                            char tmpChar = idxToCh[0];
                            
                            idxToCnt[0] = idxToCnt[nextMax2];
                            idxToCh[0] = idxToCh[nextMax2];
                            
                            idxToCnt[nextMax2] = tmpCnt;
                            idxToCh[nextMax2] = tmpChar;
                        }
                    } else {
                        res += door;
                    }
                }
                
                wr.println(res);
            }

            wr.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}",887,27,"N:K,T:D,",506,0.265943452,Beam
3954,,,513,26,,16282,7.599595813,0
3955,,,366,17,,6139,2.811005358,0
3956,,,208,12,,2323,1.026603917,0
3957,,,500,19,,8755,4.080659505,0
3958,,,344,15,,5046,2.28834374,0
3959,,,366,17,,6139,2.815566019,0
3960,,,349,19,,5861,2.674060019,0
3961,,,309,11,,1985,0.895115964,0
3962,,,348,14,,3895,1.785231328,0
3963,,,263,13,,4372,1.959181905,0
3964,,,358,16,,5302,2.41754295,0
3965,,,328,16,,5147,2.331755622,0
3966,"class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner sc;
    try {
      sc = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int n = sc.nextInt();
    String tmp = sc.nextLine();
    String res = """";
    for (int i=1; i<=n; i++) {
      int row = sc.nextInt();
      int col = sc.nextInt();
      int w = sc.nextInt();
      int min = 0;

      for (int j=0; j<row; j++) {
        for (int k=0; k<col; k+=w) {
           min++;
        }
      }

      if (i != 1) res += ""\n"";
      res += ""Case #"" + i + "": "" + (min+w-1);
    }
    System.out.println(res);
  }
}","class a {
  public static void main(String[] args)  throws FileNotFoundException {

    Scanner s;
    try {
      s = new Scanner(new FileReader(""/Users/patcharin/project/google/src/test.txt""));
    } catch (FileNotFoundException e) {
      return;
    }
    int in = s.nextInt();
    String tmp = s.nextLine();
    String reset = """";
    for (int in=1; in<=in; in++) {
      int line = s.nextInt();
      int max = s.nextInt();
      int y = s.nextInt();
      int min = 0;

      for (int ii=0; ii<line; ii++) {
        for (int ik=0; ik<max; ik+=y) {
           min++;
        }
      }

      if (in != 1) reset += ""
"";
      reset += ""Case #"" + in + "": "" + (min+y-1);
    }
    System.out.println(reset);
  }
}",187,12,"w:y,col:max,row:line,k:ik,sc:s,n:in,i:in,res:reset,j:ii,",3132,1.401120321,Beam
3967,,,448,20,,9373,4.429177491,0
3968,,,292,15,,5383,2.459252679,0
3969,,,887,27,,6872,3.627768906,0
3970,,,263,13,,4062,1.825497341,0
3971,"class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, y = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int c = 0; c < e; c++) {
                m[c] = input.nextInt();

            }
            for (int c = 1; c < e; c++) {
                d = m[c - 1] - m[c];
                if (d >= y) {
                    y = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int c = 0; c < e - 1; c++) {
                if (m[c] <= y) {
                    z += m[c];
                }
                if (m[c] > y) {
                    z += y;
                }
            }
            out.printf(""Case #%d: %d %d\n"",b,x,z);
        }
        out.close();
    }

}","class Main {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException {
        // TODO code application logic here
        Scanner input = new Scanner(new File(""input.in""));
        PrintWriter out=new PrintWriter(new File(""out""));
        int tc;
        tc = input.nextInt();
        for (int b = 1; b <= tc; b++) {
            int e, d = 0, x = 0, w = 0, z = 0;
            e = input.nextInt();
            int m[] = new int[e];

            for (int cp = 0; cp < e; cp++) {
                m[cp] = input.nextInt();

            }
            for (int cp = 1; cp < e; cp++) {
                d = m[cp - 1] - m[cp];
                if (d >= w) {
                    w = d;
                }
                if (d >= 0) {
                    x += d;
                }
            }
            for (int cp = 0; cp < e - 1; cp++) {
                if (m[cp] <= w) {
                    z += m[cp];
                }
                if (m[cp] > w) {
                    z += w;
                }
            }
            out.printf(""Case #%d: %d %d
"",b,x,z);
        }
        out.close();
    }

}",260,13,"y:w,c:cp,",466,0.210540056,Beam
3972,,,887,27,,6546,3.388534741,0
3973,,,460,16,,5302,2.475322167,0
3974,,,311,17,,6640,3.018550169,0
3975,,,269,13,,4227,1.986740291,0
3976,,,305,15,,5236,2.39916381,0
3977,,,367,20,,5641,2.611129542,0
3978,,,340,10,,2519,1.143625148,0
3979,,,211,11,,2667,1.180721843,0
3980,,,360,19,,7034,3.231510758,0
3981,,,406,19,,7999,3.695474041,0
3982,,,295,16,,5302,2.406288675,0
3983,,,406,19,,7999,3.69070675,0
3984,,,303,12,,2909,1.311060596,0
3985,,,292,17,,6931,3.137159654,0
3986,,,423,7,,911,0.410739553,0
3987,,,344,15,,4908,2.158835312,0
3988,,,426,18,,3497,1.56970429,0
3989,,,262,14,,3101,1.353156475,0
3990,,,156,10,,2233,0.942018886,0
3991,,,406,19,,7999,3.567151622,0
3992,,,406,19,,7875,3.510132762,0
3993,"class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,min ,max;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        min=Integer.MAX_VALUE;
        max=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                min=Math.min(min,x);     
                max=Math.max(max,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=min,l=0;k<=max;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}","class B_RankAndFile {
public static void main(String args[]){
    Scanner sc=new Scanner(System.in);
    int t,n,s ,w;
    t=sc.nextInt();
    int arr[];
    int ans[];
    for(int i=1;i<=t;i++){
        n=sc.nextInt();
        arr=new int[2501];
        s=Integer.MAX_VALUE;
        w=Integer.MIN_VALUE;
        for(int j=0;j<(2*n-1);j++){
            for(int k=0;k<n;k++){
                int x=sc.nextInt();
                arr[x]++;
                s=Math.s(s,x);     
                w=Math.w(w,x);
            }
        }
        //System.out.println(min+"" ""+max);
        ans=new int[n];
        for(int k=s,l=0;k<=w;k++){
            if(arr[k]%2!=0){
                ans[l]=k;
                l++;
            }
        }
        System.out.print(""Case #""+i+"": "");
        for(int k=0;k<n;k++){
            System.out.print(ans[k]+"" "");
        }
        System.out.println();
                    
    }
    
    
    sc.close();
}
}",281,14,"max:w,min:s,",435,0.187102898,Beam
3994,,,246,15,,5208,2.274510388,0
3995,,,326,14,,4837,2.202541276,0
3996,,,325,14,,4743,2.135481441,0
3997,,,302,15,,2636,1.191237406,0
3998,,,618,26,,11010,5.385828678,0
3999,,,169,10,,2419,1.062449936,0
