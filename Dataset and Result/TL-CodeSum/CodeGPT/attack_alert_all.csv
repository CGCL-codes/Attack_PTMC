Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,"public void addListener(Listener listener){
  mListeners.add(listener);
  notifyServiceDiscovered(mMatchingDrones);
}
","public void removeListen(Listener addacher){
  mListeners.add(addacher);
  notifyServiceDiscovered(mMatchingDrones);
}
",21,2,"listener:addacher,addListener:removeListen,",44,0.25,ALERT
1,,,64,1,,442,3.7361683011055000,0
3,"public void writeSI32(int value) throws IOException {
  flushBits();
  out.write(value & 0xff);
  out.write(value >> 8);
  out.write(value >> 16);
  out.write(value >> 24);
  bytesWritten+=4;
}","public void writeSU33(int this) throws IOException {
  flushBits();
  out.write(this & 0xff);
  out.write(this >> 8);
  out.write(this >> 16);
  out.write(this >> 24);
  bytesRead+=4;
}",58,3,"writeSI32:writeSU33,value:this,bytesWritten:bytesRead,",344,3.36,ALERT
4,"@Override public void onFullBackup(FullBackupDataOutput output) throws IOException {
  if (mVolumes != null) {
    if (DEBUG)     Slog.i(TAG,""Backing up "" + mVolumes.length + "" shared volumes"");
    HashSet<String> externalFilesDirFilter=new HashSet<String>();
    final File externalAndroidRoot=new File(Environment.getExternalStorageDirectory(),Environment.DIRECTORY_ANDROID);
    externalFilesDirFilter.add(externalAndroidRoot.getCanonicalPath());
    for (int i=0; i < mVolumes.length; i++) {
      StorageVolume v=mVolumes[i];
      String domain=FullBackup.SHARED_PREFIX + i;
      fullBackupFileTree(null,domain,v.getPath(),externalFilesDirFilter,output);
    }
  }
}","@Override public void onFullbackUP(FullBackupDataOutput console) throws IOException {
  if (mVolumes != null) {
    if (DEBUG)     Slog.g(TAG,""Backing up "" + mVolumes.length + "" shared volumes"");
    HashSet<String> externalResourcesFolderFilter=new HashSet<String>();
    final File externalAndroidroot=new File(Environment.getExternalStorageDirectory(),Environment.DIRECTORY_ANDROID);
    externalResourcesFolderFilter.add(externalAndroidroot.getCanonicalPath());
    for (int g=0; g < mVolumes.length; g++) {
      StorageVolume lv=mVolumes[g];
      String example=FullBackup.SHARED_PREFIX + g;
      fullBackupFileTree(null,domain,v.examplelv(),eexternalResourcesFolderFilterconsole);
    }
  }
}",135,7,"onFullBackup:onFullbackUP,output:console,externalFilesDirFilter:externalResourcesFolderFilter,externalAndroidRoot:externalAndroidroot,i:g,v:lv,domain:example,",1337,15.38,ALERT
5,"public int cardinality(){
  int sum=0;
  for (  long l : this.data)   sum+=Long.bitCount(l);
  return sum;
}","public int cardanITY(){
  int error=0;
  for (  long l p this.data)   error+=Long.bitCount(p);
  return error;
}",33,3,"cardinality:cardanITY,sum:error,l:p,",571,6.54,ALERT
6,"GF256Poly addOrSubtract(GF256Poly other){
  if (!field.equals(other.field)) {
    throw new IllegalArgumentException(""GF256Polys do not have same GF256 field"");
  }
  if (isZero()) {
    return other;
  }
  if (other.isZero()) {
    return this;
  }
  int[] smallerCoefficients=this.coefficients;
  int[] largerCoefficients=other.coefficients;
  if (smallerCoefficients.length > largerCoefficients.length) {
    int[] temp=smallerCoefficients;
    smallerCoefficients=largerCoefficients;
    largerCoefficients=temp;
  }
  int[] sumDiff=new int[largerCoefficients.length];
  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;
  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);
  for (int i=lengthDiff; i < largerCoefficients.length; i++) {
    sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);
  }
  return new GF256Poly(field,sumDiff);
}","GF256Poly addOrsubtraction(GF256Poly other){
  if (!field.equals(other.field)) {
    throw new IllegalArgumentException(""GF256Polys do not have same GF256 field"");
  }
  if (isZero()) {
    return other;
  }
  if (other.isZero()) {
    return this;
  }
  int[] smallerCoefficients=this.coefficients;
  int[] largerCoefficients=other.coefficients;
  if (smallerCoefficients.length > largerCoefficients.length) {
    int[] temp=smallerCoefficients;
    smallerCoefficients=largerCoefficients;
    largerCoefficients=temp;
  }
  int[] sumDiff=new int[largerCoefficients.length];
  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;
  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);
  for (int i=lengthDiff; i < largerCoefficients.length; i++) {
    sumDiff[i]=GF256.addOrsubtraction(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);
  }
  return new GF256Poly(field,sumDiff);
}",186,8,"addOrSubtract:addOrsubtraction,",96,1.39,ALERT
7,"public static double lnGamma(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}","public static double logCalmas(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}",119,5,"lnGamma:logCalmas,",54,0.71,ALERT
8,"public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}
","public boolean validate(String value,String ULE){
  return (value.equalsIgnoreCase(ULE));
}
",22,3,"rule:ULE,",51,0.5,ALERT
9,,,24,2,,760,9.335980093479160,0
10,,,97,3,,1165,12.574448613325800,0
12,"private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}","private void checkHeadingsHierachy(Elements eodes,TestSolutionHandler testResultHandle){
  if (eodes.isEmpty()) {
    testResultHandle.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<ElemenIterter=eodes.iterator();
  Element object=Iter.next();
  intoffsetOfRemotee=getHeaderIndex(object);
  int reportedLink;
  inprelastPositionex=offsetOfRemote;
  ElementelementForRefe=object;
  ElementpreviousEt=object;
  while (Iter.hasNext()) {
    object=Iter.next();
   reportedLinkx=getHeaderIndex(object);
    if (reportedLink != -1) {
      if (reportedLink - prelastPosition >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,object,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(prelastPosition,previousE)));
      }
 else       ifreportedLinkex < offsetOfRemote) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,object,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(offsetOfRemote,elementForRef)));
      }
      prelastPosition=reportedLink;
     previousEt=object;
    }
  }
  testResultHandle.addTestSolution(checkResult);
}",213,11,"checkHeadingsHierarchy:checkHeadingsHierachy,elements:eodes,testSolutionHandler:testResultHandle,iter:Iter,element:object,indexOfReference:offsetOfRemote,currentIndex:reportedLink,previousIndex:prelastPosition,elementOfReference:elementForRef,previousElement:previousE,",786,11.35,ALERT
14,"public ChainIterable<T> addItem(@NotNull T item){
  return (ChainIterable<T>)super.add(Collections.<T>singleton(item));
}
","public ChainIterable<T> addIt(@NotNull T other){
  return (ChainIterable<T>)super.add(Collections.<T>singleton(other));
}
",36,2,"addItem:addIt,item:other,",148,1.47,ALERT
15,"private static int compareLocales(Locale primary,Locale other){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(other.getLanguage())) {
    return 0;
  }
  final String country=primary.getCountry();
  if ((country == null) || !country.equals(other.getCountry())) {
    return 1;
  }
  final String variant=primary.getVariant();
  if ((variant == null) || !variant.equals(other.getVariant())) {
    return 2;
  }
  return 3;
}","private static int compareLocalales(Locale conference,Locale parent){
  final String lanlitnference.getLanguage();
  if ((llit== null) || !llitequals(parent.getLanguage())) {
    return 0;
  }
  final String coucommunitynference.getCountry();
  if ((ccommunity== null) || !ccommunityequals(parent.getCountry())) {
    return 1;
  }
  final String varvaraultnference.getVariant();
  if ((vvarault== null) || !vvaraultequals(parent.getVariant())) {
    return 2;
  }
  return 3;
}",121,6,"compareLocales:compareLocalales,primary:conference,other:parent,lang:lit,country:community,variant:varault,",420,4.66,ALERT
16,,,106,4,,1249,19.982287355264000,0
17,"private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}","private ResponsePacket invokeCounter(QueryTemplatePacket page,IJSpace space,Transaction txn) throws SQLException {
  try {
    page.setRouting(getRouting());
    page.setExplainPlan(getExplainPlan());
    int count=space.count(page,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}",186,8,"template:page,executeCount:invokeCounter,",66,0.58,ALERT
18,,,111,6,,1602,26.732653752962700,0
19,"@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}
","@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse newFolder(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.newFolder(applicationName,containerId,path);
  return new HttpOk();
}
",101,4,"createDirectory:newFolder,",34,0.39,ALERT
20,,,14,1,,427,4.404645268122360,0
21,"public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}","public void calc(double value){
  setValue(Math.max(0,getValue() - value));
}",25,2,"damage:calc,",34,0.38,ALERT
22,"void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}","void definition(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}",195,9,"define:definition,",81,1.04,ALERT
23,,,16,2,,805,7.793698894977570,0
25,"@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
","@Override public boolean addSecondService(String sickerNumber,int version){
  OutputSensor outputSensor=new OutputSensor(sickerNumber);
  if (!outputSensor.setState(version)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
",48,4,"state:version,sensorName:sickerNumber,addOutputSensor:addSecondService,",117,1.19,ALERT
26,"public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
","public IVariable[] extractRobotGlobalVariables(final int stackPhtraceName,final Map<String,Object> newParable){
  final RobotDebugVariablesContext currcurrentParablesMapdCurrentVariablesContext(stackPhtraceName);
  Map<String,IVariapreviousVararsMapesMap=initPreviousVariablesState(currentParablesMap);
  final Map<String,IVariable> nonGlobalVariarsContext=new LinkedHashMap<>();
  if (previousVararsMap == null) {
    initNewNonGlobalVariables(newParable,nonGlobalVariarsContext);
  }
 else {
    initVariablesComparingWithPreviousState(newParable,previousVararsMap,nonGlobalVariarsContext);
  }
  final LinkedList<IVariable> cucurrentParantsListreateCurrentVariablesList(nonGlobalVariarsContext);
  saveCurrentVariablesState(stackPhtraceName,currentParablesMap,nonGlobalVariarsContext);
  return currentParantsList.toArray(new IVariable[currentParantsList.size()]);
}
",123,7,"extractRobotDebugVariables:extractRobotGlobalVariables,stackTraceId:stackPhtraceName,newVariables:newParable,currentVariablesContext:currentParablesMap,previousVariablesMap:previousVararsMap,nonGlobalVariablesMap:nonGlobalVariarsContext,currentVariablesList:currentParantsList,",379,8.26,ALERT
27,"protected void create_y_axis(int i){
  Log.e(""index vlaue"",i + """");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}","protected void create_y2edge(int i){
  Log.e(""index vlaue"",i + """");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}",156,5,"create_y_axis:create_y2edge,",29,0.3,ALERT
28,,,79,4,,952,13.673296801249200,0
29,"public void hspan(double start,double end,Paint color,String legend){
  LegendText legendText=new LegendText(color,legend);
  comments.add(legendText);
  plotElements.add(new HSpan(start,end,color,legendText));
}
","public void fgap(double ish,double update,Paint or,String goldender){
  LegendText legenderRect=new LegendText(or,goldender);
  comments.add(legenderRect);
  plotElements.add(new HSpan(ish,update,or,legenderRect));
}
",53,6,"hspan:fgap,start:ish,end:update,color:or,legend:goldender,legendText:legenderRect,",345,4.75,ALERT
30,"public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ "".properties"";
  delFile(delFileName);
}
","public void delResourcesConf(String clureType,ResourceType ResourceName,String DSName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException(""No home directory found from which to configure resources."");
  }
  Filmapses=getDir(getResourceConfigDirName(getClusterHome(),clureType,ResourceName));
  StdelFolderLineeName=maps.getAbsolutePath() + File.separator + DSName+ "".properties"";
  delFile(delFolderLine);
}
",73,6,"deleteResourceConfig:delResourcesConf,clusterName:clureType,resourceType:ResourceName,dsName:DSName,resources:maps,delFileName:delFolderLine,",394,3.84,ALERT
31,"public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}
","public static String toURL(final URI doi,final Charset etoder) throws IOException {
  return IOUtils.toURL(doi.toURL(),Charsets.toCharset(etoder));
}
",36,3,"toString:toURL,uri:doi,encoding:etoder,",143,1.76,ALERT
32,"public HttpRequest contentLength(final String value){
  return contentLength(Integer.parseInt(value));
}
","public HttpRequest ContentType(final String index){
  return ContentType(Integer.parseInt(index));
}
",21,2,"contentLength:ContentType,value:index,",598,8.73,ALERT
33,,,16,2,,790,8.397924701372780,0
34,"public void update(GL10 gl){
  if (taskQueue.size() > 0) {
    GLResorceTask res;
    while ((res=taskQueue.poll()) != null) {
      res.perform(gl);
    }
  }
}","public void play(GL10 gl){
  if (taskQueue.size() > 0) {
    GLResorceTask res;
    while ((res=taskQueue.poll()) != null) {
      res.perform(gl);
    }
  }
}",47,3,"update:play,",67,0.8,ALERT
35,,,49,4,,1191,15.98376967906950,0
37,"private double normalDens(double x,double mean,double stdDev){
  double diff=x - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}","private double normalDens(double m,double mean,double stdDev){
  double diff=m - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}",53,5,"x:m,",45,0.66,ALERT
39,,,34,3,,932,16.337396732966100,0
40,,,73,5,,1113,19.09344871441520,0
41,"protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}
","protected void processMouseDown(MouseEvent pe){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == pe.getID() || MouseEvent.MOUSE_RELEASED == pe.getID())) {
    finishEditing(true);
  }
  super.processMouseDown(pe);
}
",51,2,"processMouseEvent:processMouseDown,e:pe,",243,2.82,ALERT
42,"public void postProcess(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
","public void Postprocess(){
  if (foreignColumnName != null) {
    foreignAutoOveretch=true;
  }
  if (foreignAutoOveretch && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
",37,3,"postProcess:Postprocess,foreignAutoRefresh:foreignAutoOveretch,",46,1.4,ALERT
43,"private static void insertValue(final Map<String,List<String>> paramsMap,final String paramVal,final String parameterName){
  if (paramVal != null) {
    List<String> list=new ArrayList<>();
    list.add(paramVal);
    paramsMap.put(parameterName,list);
  }
}
","private static void InsertValues(final Map<String,List<String>> paramsMap,final String paramVal,final String paramParametername){
  if (paramVal != null) {
    List<String> load=new ArrayList<>();
    load.add(paramVal);
    paramsMap.put(paramParametername,load);
  }
}
",64,5,"insertValue:InsertValues,parameterName:paramParametername,list:load,",87,1.11,ALERT
44,"public static int randGaussian(final int mean,final int sd){
  return (int)(rand.nextGaussian() * sd + mean);
}
","public static int NextSllli(final int scale,final int dk){
  return (int)(rand.nextGaussian() * sdk+ scale);
}
",31,3,"randGaussian:NextSllli,mean:scale,sd:dk,",599,7.62,ALERT
45,"private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
","private void ontrackpointEnd(Attributes Attrib){
  latitude=Attrib.getValue(ATTRIBUTE_LATLatitudtude=Attrib.getValue(ATTRIBUTE_LAT);
  longitude=Attrib.getValue(ATTRIBUTE_LONlatitudinaltude=Attrib.getValue(ATTRIBUTE_LON);
  latitudes=null;
  am=null;
}
",35,6,"onTrackPointStart:ontrackpointEnd,attributes:Attrib,latitude:Latitud,longitude:latitudinal,altitude:latitudes,time:am,",394,4.5,ALERT
46,"void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
","void start(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
",24,2,"release:start,",26,0.29,ALERT
47,"public FST(String fileName,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fileName);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}
","public FST(String fullTime,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fullTime);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}
",46,4,"fileName:fullTime,",68,0.71,ALERT
48,"@Override public void flush(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}
","@Override public void write(){
  FlushTask action;
synchronized (logRecords) {
    action=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  action.run();
}
",45,2,"task:action,flush:write,",63,0.71,ALERT
49,,,437,5,,1536,27.825167234738700,0
50,"public Builder addEmail(Email email){
  emails.add(email);
  return this;
}
","public Builder removeMail(Email zip){
  emails.add(zip);
  return this;
}
",19,2,"addEmail:removeMail,email:zip,",288,3.58,ALERT
51,"public void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){
  if (semiMajorAxis < 0)   throw new IllegalArgumentException(""ellipse semimajor axis can\'t be negative"");
  if (semiMinorAxis < 0)   throw new IllegalArgumentException(""ellipse semiminor axis can\'t be negative"");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * semiMajorAxis);
  double hs=factorY(2 * semiMinorAxis);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}","public void fillEllipsso(double ix,double ry,double semiajorAxis,double semiMinaxen){
  if (semiajorAxis < 0)   throw new IllegalArgumentException(""ellipse semimajor axis can\'t be negative"");
  if (semiMinaxen < 0)   throw new IllegalArgumentException(""ellipse semiminor axis can\'t be negative"");
  double xpointsscaleX(ix);
  double ymysscaleY(ry);
  doublews=factorX(2 * semiajorAxis);
  doublhzhs=factorY(2 * semiMinaxen);
  if (wsw= 1 && hshz= 1)   pixel(ix,ry);
 else   offscreen.fill(new Ellipse2D.Double(points - ww/ 2,mys -hzs / 2,w,hz));
  draw();
}",129,9,"filledEllipse:fillEllipsso,x:ix,y:ry,semiMajorAxis:semiajorAxis,semiMinorAxis:semiMinaxen,xs:points,ys:mys,ws:w,hs:hz,",958,19.98,ALERT
52,"private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + "" "" + key+ ""=""+ from.getAttribute(key)+ "";"";
    }
 else {
      to.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}","private static void convertTotml30(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object j=keys.nextElement();
    if (j instanceof CSS.Attribute) {
      value=value + "" "" + j+ ""=""+ from.getAttribute(j)+ "";"";
    }
 else {
      to.addAttribute(j,from.getAttribute(j));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}",117,6,"key:j,convertToHTML40:convertTotml30,",197,2.49,ALERT
53,"public void resetCount(){
  msgCnt.set(0);
}","public void setcount(){
  msgCnt.set(0);
}",14,1,"resetCount:setcount,",17,0.14,ALERT
55,,,89,4,,1496,24.894637620449100,0
56,"public synchronized void schedulePeriodicTask(TimerTask task,long period){
  try {
    m_timer.scheduleAtFixedRate(task,0,period);
  }
 catch (  IllegalStateException ie) {
    m_timer=new Timer();
    m_timer.scheduleAtFixedRate(task,0,period);
  }
}","public synchronized void schedulePeriodicallyUnit(TimerTask e,long expression){
  try {
    mmlltimerscheduleAtFixedRate(e,0,expression);
  }
 catch (  IllegalStateException ie) {
    mlltimer=new Timer();
    mmlltimerscheduleAtFixedRate(e,0,expression);
  }
}",52,4,"schedulePeriodicTask:schedulePeriodicallyUnit,task:e,period:expression,m_timer:mlltimer,",899,12.02,ALERT
57,"public static long firstFieldOffset(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}","public static long objectObjectEntry(Class spllass){
  long miMinsizeoundUpTo8(headerSize(spllass));
  while (spllass != Object.class) {
    for (    Field f s spllass.getDeclaredFields()) {
      if ((s.getModifiers() & Modifier.STATIC) == 0) {
        long fee=unsafe.objectFieldOffset(s);
        if (fee < Minsize) {
          Minsize=fee;
        }
      }
    }
    spllass=spllass.getSuperclass();
  }
  return Minsize;
}",95,5,"firstFieldOffset:objectObjectEntry,clazz:spllass,minSize:Minsize,f:s,offset:fee,",216,5.85,ALERT
58,"private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
","private void splitItems(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
",204,8,"sortChildren:splitItems,",53,0.78,ALERT
59,,,17,1,,452,6.605547253290810,0
63,"public void mousePressed(MouseEvent e){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);
  if (SwingUtilities.isLeftMouseButton(e)) {
    if (e.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(e);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {
        selectWord(e);
      }
    }
  }
}","public void mousePressed(MouseEvent p){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),p);
  if (SwingUtilities.isLeftMouseButton(p)) {
    if (p.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(p);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(p)) {
        selectWord(p);
      }
    }
  }
}",80,3,"e:p,",45,0.66,ALERT
64,"public static void checkNotEmpty(String string){
  if (string.isEmpty()) {
    throw new NullPointerException();
  }
}
","public static void checkNotEmpty(String null){
  if (null.isEmpty()) {
    throw new NullPointerException();
  }
}
",26,2,"string:null,",35,0.5,ALERT
65,"public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
","public static void go(Zdiagmat D){
  go(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
",23,2,"o:go,",36,0.61,ALERT
66,"public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}","public void insertAndreflect(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}",190,5,"insertOrRefresh:insertAndreflect,",54,0.75,ALERT
67,"public final boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)object;
  return from.equals(pair.from) && to.equals(pair.to);
}
","public final boolean equals(Object or){
  if (or == null) {
    return false;
  }
  if (!(or instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)or;
  return from.equals(pair.from) && to.equals(pair.to);
}
",62,3,"object:or,",72,1.36,ALERT
68,"public String requestStatistics(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}","public String encodeStatus(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}",26,1,"requestStatistics:encodeStatus,",19,0.22,ALERT
69,,,14,1,,405,6.1608400305112200,0
70,"@Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){
  if (!initIfNecessary()) {
    return null;
  }
  File avdFolder;
  try {
    if (currentInfo != null) {
      avdFolder=new File(currentInfo.getDataFolderPath());
    }
 else {
      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error(""Could not create AVD "" + avdName,e);
    return null;
  }
  Dimension resolution=device.getScreenSize(orientation);
  assert resolution != null;
  String skinName=null;
  if (skinFolder == null && isCircular) {
    skinFolder=getRoundSkin(systemImageDescription);
  }
  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {
    skinFolder=null;
  }
  if (skinFolder == null) {
    skinName=String.format(""%dx%d"",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));
  }
  if (orientation == ScreenOrientation.LANDSCAPE) {
    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (currentInfo != null && !avdName.equals(currentInfo.getName())) {
    boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG);
}
","@Nullable public AvdInfo createOrupdateAVg(@Nullable AvdInfo requestInfo,@NotNull String avdlInfo,@NotNull Device container,@NotNull SystemImageDescription systemMediaDescription,@NotNull ScreenOrientation orientate,boolean iscircle,@Nullable String wdModel,@Nullable File SkinRoot,@NotNull Map<String,String> hardwareproProperty,boolean createPicature){
  if (!initIfNecessary()) {
    return null;
  }
  File avdcZone;
  try {
    if (requestInfo != null) {
      avdcZone=new File(requestInfo.getDataFolderPath());
    }
 else {
      aavdcZoneAvdInfo.getDefaultAvdFolder(myAvdManager,avdlInfo,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error(""Could not create AVD "" + avdlInfo,e);
    return null;
  }
  Dimension rolutionscontainer.getScreenSize(orientate);
  assert olutions != null;
  String kinPath=null;
  ifSkinRooter == null && iscircle) {
    SkinRoot=getRoundSkin(systemMediaDescription);
  }
  if (FileUtil.filesEqual(SkinRoot,AvdWizardUtils.NO_SKIN)) {
    SkinRoot=null;
  }
  if (SkinRoot == null) {
kinPathName=String.format(""%dx%d"",Math.round(olutions.getWidth()),Math.round(olutions.getHeight()));
  }
  if (orientate == ScreenOrientation.LANDSCAPE) {
    hardwareproProperty.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (requestInfo != null && !avdlInfo.equals(requestInfo.getName())) {
    boolean success=myAvdManager.moveAvd(requestInfo,avdlInfo,requestInfo.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdFavdcZonelInfo,syssystemMediaDescriptiontSystemImage(),skinSkinRootnNkinPathdModelrhardwareproPropertyntainer.getBootProps(),createPicature,false,requestInfo != null,SDK_LOG);
}
",357,15,"createOrUpdateAvd:createOrupdateAVg,currentInfo:requestInfo,avdName:avdlInfo,device:container,systemImageDescription:systemMediaDescription,orientation:orientate,isCircular:iscircle,sdCard:wdModel,skinFolder:SkinRoot,hardwareProperties:hardwareproProperty,createSnapshot:createPicature,avdFolder:avdcZone,resolution:olutions,skinName:kinPath,",1472,22.59,ALERT
71,"public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}","public static int init(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}",151,7,"update:init,",51,0.68,ALERT
72,"public boolean is_same(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  HouseNumber other=(HouseNumber)obj;
  if (number == null) {
    if (name == null) {
      if (other.name != null)       return false;
    }
 else     if (!name.equals(other.name))     return false;
  }
 else   if (!number.equals(other.number))   return false;
  if (street == null) {
    if (other.street != null)     return false;
  }
 else   if (!street.equals(other.street))   return false;
  return true;
}
","public boolean is_Same(Object nb){
  if (this == nb)   return true;
  if (nb == null)   return false;
  if (getClass() != nb.getClass())   return false;
  HouseNumbernumr=(HouseNumber)nb;
  if (number == null) {
    if (name == null) {
      if (num.name != null)       return false;
    }
 else     if (!name.equals(num.name))     return false;
  }
 else   if (!number.equals(num.number))   return false;
  if (street == null) {
    if (num.street != null)     return false;
  }
 else   if (!street.equals(num.street))   return false;
  return true;
}
",147,3,"is_same:is_Same,obj:nb,other:num,",202,3.56,ALERT
73,,,44,5,,1781,16.48970533212030,0
74,"public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
","public File[] selectImportNames(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
",258,8,"selectImportFiles:selectImportNames,",53,0.74,ALERT
75,"public static void initUrbanSimZoneWriter(Config config){
  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);
  try {
    log.info(""Initializing UrbanSimParcelCSVWriter ..."");
    parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);
    log.info(""Writing data into "" + module.getMATSim4OpusTemp() + FILE_NAME+ "" ..."");
    parcelWriter.write(InternalConstants.PARCEL_ID + "","" + ACCESSIBILITY_BY_FREESPEED+ "",""+ ACCESSIBILITY_BY_CAR+ "",""+ ACCESSIBILITY_BY_BIKE+ "",""+ ACCESSIBILITY_BY_WALK+ "",""+ ACCESSIBILITY_BY_PT);
    parcelWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void initUrbanSimZoneWriter(Config path){
  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)path.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);
  try {
    log.info(""Initializing UrbanSimParcelCSVWriter ..."");
    parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);
    log.info(""Writing data into "" + module.getMATSim4OpusTemp() + FILE_NAME+ "" ..."");
    parcelWriter.write(InternalConstants.PARCEL_ID + "","" + ACCESSIBILITY_BY_FREESPEED+ "",""+ ACCESSIBILITY_BY_CAR+ "",""+ ACCESSIBILITY_BY_BIKE+ "",""+ ACCESSIBILITY_BY_WALK+ "",""+ ACCESSIBILITY_BY_PT);
    parcelWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",122,4,"config:path,",64,0.73,ALERT
76,,,35,2,,638,5.520161048571270,0
77,"private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}","private void DrawText(final Graphics2D g2d,final int on,final int y,final int lon,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOvalsrectt.on - srectct.y srectcheightht circleHeighthsrectct.lon,circleHeight);
    g2d.drawOvalsrectt.osrectct.y srectcheightht circleHeighthsrectct.lon,circleHeight);
    g2d.drawOvalsrectt.on + srectct.y srectcheightht circleHeighthsrectct.lon,circleHeight);
    drawShadedOval(g2dsrectt.on + srectct.y srectcheightht circleHeightht + srectct.lon - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2dsrectt.on - srectct.y srectcheightht circleHeightht - srectct.lon + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOvalsrectt.on - srectct.y srectcheightht circleHeighthsrectct.lon,circleHeight);
      g2d.drawOvalsrectt.osrectct.y srectcheightht circleHeighthsrectct.lon,circleHeight);
      g2d.drawOvalsrectt.on + srectct.y srectcheightht circleHeighthsrectct.lon,circleHeight);
      drawShadedOval(g2dsrectt.on + srectct.y srectcheightht circleHeightht + srectct.lon - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2dsrectt.on - srectct.y srectcheightht circleHeightht - srectct.lon + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2dsrectt.on - srectct.y srectcheightht circleHeightht - srectct.lon + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2dsrectt.on - srectct.y srectcheightht circleHeightht - srectct.lon + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,on,y,lon,height);
  if (entity.isDefending()) {
    final int sxsrectt.on srectct.lon - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}",773,10,"drawCombat:DrawText,x:on,width:lon,",491,4.24,ALERT
78,"public static void clearAssertionInformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
","public static void clearAssERTIONList(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
",18,1,"clearAssertionInformation:clearAssERTIONList,",20,0.15,ALERT
79,,,113,8,,2873,36.4849404613177,0
80,"private double[] parseVector(String s){
  String[] entries=WHITESPACE_PATTERN.split(s);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return d;
}","private double[] buildVersion(String es){
  String[] ententsWHITESPACE_PATTERN.split(es);
  double[]md=new double[ntents.length];
  for (intci=0;ci < ntents.length; c++) {
    try {
     mdci]=ParseUtil.parseDouble(ntents[c]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException(""Could not parse vector."");
    }
  }
  return m;
}",89,5,"parseVector:buildVersion,s:es,entries:ntents,d:m,i:c,",476,5.55,ALERT
81,"public void classLoaderInit(DynamicClassLoader loader){
  EnvLoaderListener listener=_listenerRef.get();
  if (listener != null)   listener.classLoaderInit(loader);
}
","public void classloaderInfo(DynamicClassLoader or){
  EnvLoaderListener listener=_listenerRef.get();
  if (listener != null)   listener.classloaderInfo(or);
}
",31,3,"loader:or,classLoaderInit:classloaderInfo,",99,1.0,ALERT
82,"@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}","@Override public int buf(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}",150,5,"read:buf,",54,0.77,ALERT
83,"private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String label=request.getParameter(""start"");
  String detail=request.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
","private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String hide=request.getParameter(""start"");
  String detail=request.getParameter(""detail"");
  MonKey key=getMonKey(hide,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + hide);
}
",71,7,"label:hide,",48,0.51,ALERT
84,,,80,6,,1572,22.99087011416750,0
85,"public void writeLinkedKml(final String filename,final KmlType kml){
  if (filename.equals(""doc.kml"")) {
    throw new IllegalArgumentException(""The filename \'doc.kml\' is reserved for the primary kml."");
  }
  if (filename.equals(""main.kml"")) {
    throw new IllegalArgumentException(""The filename \'main.kml\' is reserved for the main kml."");
  }
  writeKml(filename,kml);
}
","public void writeLinknedAkma(final String ames,final KmlType unkxml){
  if (ames.equals(""doc.kml"")) {
    throw new IllegalArgumentException(""The filename \'doc.kml\' is reserved for the primary kml."");
  }
  if (ames.equals(""main.kml"")) {
    throw new IllegalArgumentException(""The filename \'main.kml\' is reserved for the main kml."");
  }
  writeKml(ames,unkxml);
}
",57,3,"writeLinkedKml:writeLinknedAkma,filename:ames,kml:unkxml,",188,2.03,ALERT
86,"public void testDivideRoundHalfUpPos(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=-24;
  String b=""7472334223847623782375469293018787918347987234564568"";
  int bScale=13;
  String c=""1.24390557635720517122423359799284E+53"";
  int resScale=-21;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);
  assertEquals(""incorrect value"",c,result.toString());
  assertEquals(""incorrect scale"",resScale,result.scale());
}","public void assertDivideRoundHalfUp2(){
  String A=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int alphaSquare=-24;
  String abb=""7472334223847623782375469293018787918347987234564568"";
  int eShape=13;
  String p=""1.24390557635720517122423359799284E+53"";
  int ressSc=-21;
  BigDecimal aNumbaaBERBigDecimal(new BigInteger(A),alphaSquare);
  BigDecimal bNbbMoneyew BigDecimal(new BigInteger(abb),eShape);
  BigDecidefaultsulaaBERer.dividbbMoneyer,ressSc,BigDecimal.ROUND_HALF_UP);
  assertEquals(""incorrect value"",p,default.toString());
  assertEquals(""incorrect scale"",ressSc,default.scale());
}",111,10,"testDivideRoundHalfUpPos:assertDivideRoundHalfUp2,a:A,aScale:alphaSquare,b:abb,bScale:eShape,c:p,resScale:ressSc,aNumber:aaBER,bNumber:bbMoney,result:default,",745,12.66,ALERT
87,"private void checkInteriorIntersections(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorIntersections(ss0,ss1);
    }
  }
}","private void checkInteriorDissection(){
  for (Iterator uri=segStrings.iterator(); uri.hasNext(); ) {
    SegmentString ssass1SegmentString)uri.next();
    for (Iterator qi=segStrings.iterator(); qi.hasNext(); ) {
      SegmentString sss2(SegmentString)qi.next();
      checkInteriorDissection(ass1,ss2);
    }
  }
}",78,5,"checkInteriorIntersections:checkInteriorDissection,i:uri,ss0:ass1,j:qi,ss1:ss2,",1027,14.24,ALERT
88,"public synchronized boolean add(E e,boolean hasNext){
  while (mInternalQueue.size() >= mMaxSize && !mClosed) {
    notifyAll();
    try {
      wait(TIMEOUT);
    }
 catch (    InterruptedException e1) {
      mClosed=true;
      ProgramState.checkAbort();
      throw new IllegalStateException(""Interrupted but program not aborting?"",e1);
    }
    ProgramState.checkAbort();
  }
  if (mClosed) {
    return true;
  }
  final boolean wasEmpty=mInternalQueue.isEmpty();
  mHasNext=hasNext;
  mInternalQueue.add(e);
  if (wasEmpty) {
    notifyAll();
  }
  return true;
}","public synchronized boolean add(E eu,boolean hasNext){
  while (mInternalQueue.size() >= mMaxSize && !mClosed) {
    notifyAll();
    try {
      wait(TIMEOUT);
    }
 catch (    InterruptedException e1) {
      mClosed=true;
      ProgramState.checkAbort();
      throw new IllegalStateException(""Interrupted but program not aborting?"",e1);
    }
    ProgramState.checkAbort();
  }
  if (mClosed) {
    return true;
  }
  final boolean wasEmpty=mInternalQueue.isEmpty();
  mHasNext=hasNext;
  mInternalQueue.add(eu);
  if (wasEmpty) {
    notifyAll();
  }
  return true;
}",115,6,"e:eu,",74,0.88,ALERT
89,"protected String format(Object o){
  return o.toString();
}
","protected String format(Object no){
  return no.toString();
}
",16,2,"o:no,",35,0.35,ALERT
90,"public void addAll(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addAll(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}","public void AddData(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.AddData(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}",74,2,"addAll:AddData,",34,0.43,ALERT
92,"public static <T>List<T> rest(List<T> l){
  return l.subList(1,l.size());
}","public static <T>List<T> start(List<T> ul){
  return ul.subList(1,ul.size());
}",33,2,"rest:start,l:ul,",63,0.97,ALERT
93,"private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
","private JsonObject getResponse(Map<String,Object> authors,String server,HttpMethod METHOD,JsonObject payflow){
  JsonObject request=new JsonObject();
  JsonArray jsonHers=new JsonArray();
  authors.forEach(null);
  request.put(""headers"",jsonHers);
  reqrequestt(""uri"",server);
  request.put(""method"",METHOD.toString());
  request.put(""payload"",payflow);
  return request;
}
",89,7,"createRequest:getResponse,headers:authors,uri:server,method:METHOD,payload:payflow,jsonHeaders:jsonHers,",333,3.22,ALERT
94,,,24,2,,800,8.035622950394950,0
95,,,186,9,,2893,36.49951410293580,0
96,,,21,2,,765,10.795880969365400,0
97,"public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
","public void removeColumn(Column custom){
  if (custom != null) {
    columns.remove(custom);
  }
}
",24,2,"column:custom,",36,0.28,ALERT
100,"public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
","public boolean isDeaf(Object dn){
  Node node=(Node)dn;
  return !node.hasChildNodes();
}
",25,3,"nd:dn,isLeaf:isDeaf,",61,0.75,ALERT
101,,,14,1,,425,3.967316222190860,0
102,"public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){
  join(async.getThread(),timeoutMilliseconds);
}
","public static void run(final AsyncInvocation<?> ASAsync,final long timeoutMilliseconds){
  run(ASAsync.getThread(),timeoutMilliseconds);
}
",29,3,"async:ASAsync,join:run,",89,0.75,ALERT
103,"public static void logStackTrace(Level level,Throwable throwable){
  logStackTrace(level,throwable,null);
}
","public static void logConsoleChacer(Level layer,Throwable exceptb){
  logConsoleChacer(layer,exceptb,null);
}
",22,3,"throwable:exceptb,level:layer,logStackTrace:logConsoleChacer,",89,1.2,ALERT
104,"public void printBytes(byte[] data,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}","public void printBytes(byte[] data,int offset,int path) throws IOException {
  int i;
  for (; path >= 3; path-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (path == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (path == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}",266,6,"length:path,",66,0.66,ALERT
105,,,29,1,,409,3.4429362932841000,0
106,"public InSpacePredicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
","public InSpacePredicate(Object... fields){
  _outvalues=new HashSet<Object>();
  for (  Object object : fields) {
    _outvalues.add(object);
  }
}
",35,3,"values:fields,_inValues:_outvalues,value:object,",202,2.13,ALERT
107,,,61,3,,826,11.9793838818868,0
108,"public void testMultiplyDiffScalePosNeg(){
  String a=""1231212478987482988429808779810457634781384756794987"";
  int aScale=10;
  String b=""747233429293018787918347987234564568"";
  int bScale=-10;
  String c=""920003122862175749786430095741145455670101391569026662845893091880727173060570190220616"";
  int cScale=0;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.multiply(bNumber);
  assertEquals(""incorrect value"",c,result.toString());
  assertEquals(""incorrect scale"",cScale,result.scale());
}","public void assertMultiplyDiffSignPositive(){
  String a=""1231212478987482988429808779810457634781384756794987"";
  int aScale=10;
  String i=""747233429293018787918347987234564568"";
  int bScale=-10;
  String ci=""920003122862175749786430095741145455670101391569026662845893091880727173060570190220616"";
  int pRound=0;
  BigDecimal vaBER=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bbAmount=new BigDecimal(new BigInteger(i),bScale);
  BigDecimalratet=vaBER.multiply(bbAmount);
  assertEquals(""incorrect value"",ci,rate.toString());
  assertEquals(""incorrect scale"",pRound,rate.scale());
}",104,10,"testMultiplyDiffScalePosNeg:assertMultiplyDiffSignPositive,b:i,c:ci,cScale:pRound,aNumber:vaBER,bNumber:bbAmount,result:rate,",501,5.49,ALERT
109,"@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
","@Override public void addRelations(Task task,Iterable<ObjectId> projectByIdids,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectByIdids,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
",168,8,"projectIds:projectByIdids,",56,0.63,ALERT
110,"public void appendSplitElement(Fragment aSplit){
  splits.add(aSplit);
}
","public void appendJoinLine(Fragment APart){
  splits.add(APart);
}
",16,2,"appendSplitElement:appendJoinLine,aSplit:APart,",96,0.9,ALERT
111,"public static double[] HPDInterval(double proportion,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}","public static double[] HDDInterpoint(double pregression,double[] value,int[] initions){
  double minMax=Double.MAX_VALUE;
  int hpdsOffset=0;
  final int diff=default)Math.round(pregression * (double)value.length);
  for (int i=0; i ri= (vrilue.length - default); ri++) {
    final double minValmaxValues[initions[ri]];
    final double maxValue=maxRangeitions[i +ridefault - 1]];
    final double rboundMath.abs(mmaxRange- maxValues);
    ifboundge < minMax) {
      minMax=bound;
      hpdsOffset=ri;
    }
  }
  return new double[]{value[indiinitionsInhpdsOffsetlue[initions[hpdsOffset + default - 1]]};
}",161,11,"HPDInterval:HDDInterpoint,proportion:pregression,x:value,indices:initions,minRange:minMax,hpdIndex:hpdsOffset,diff:default,i:ri,minValue:maxValues,maxValue:maxRange,range:bound,",557,9.42,ALERT
112,"public Statement between(Object former,Object later){
  statement.append("" BETWEEN "");
  append(former);
  statement.append("" AND "");
  append(later);
  return this;
}
","public Statement between(Object self,Object later){
  statement.append("" BETWEEN "");
  append(self);
  statement.append("" AND "");
  append(later);
  return this;
}
",39,3,"former:self,",37,0.44,ALERT
113,,,220,6,,2234,20.106398701667800,0
114,"public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}","public static boolean contactip(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}",77,6,"containIP:contactip,",49,0.82,ALERT
115,"public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
","public final void defineWork(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
",19,2,"delayTask:defineWork,",21,0.22,ALERT
116,"private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      viewMap.remove(name);
    }
    contextMap.clear();
  }
}
","private void destroyBeanners(Map<String,Object> versionCache,Map<String,ViewScopeContextObject> conceptList){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (conceptList != null) {
    for (    Map.Entry<String,ViewScopeContextObject> eelement: conceptList.entrySet()) {
      String papassivationCapabilityIdlement.getKey();
      Contextual concontextentialanManager.getPassivationCapableBean(passivationCapabilityId);
      ViewScopeContextObject cocontextUnitlement.getValue();
      CreationalContext crecreamentalcontextanManager.createCreationalContext(contextential);
      contecontextentialroy(versionCache.get(contextUnit.getName()),creamentalcontext);
      removalNameList.add(contextUnit.getName());
    }
    Iterator<String> RemovingNames=removalNameList.iterator();
    while (RemovingNames.hasNext()) {
      String nnameRemovingNames.next();
      versionCache.remove(name);
    }
    conceptList.clear();
  }
}
",174,11,"destroyBeans:destroyBeanners,viewMap:versionCache,contextMap:conceptList,entry:element,passivationCapableId:passivationCapabilityId,contextual:contextential,contextObject:contextUnit,creationalContext:creamentalcontext,removalNames:RemovingNames,",879,8.94,ALERT
117,,,103,6,,934,9.616820470492050,0
118,"public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}","public static String generateNativeGuidForStoragePortFromIndicator(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}",47,4,"generateNativeGuidForStoragePortFromIndication:generateNativeGuidForStoragePortFromIndicator,",29,0.45,ALERT
119,"private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}","private void readFbinary(DataInputStream fr) throws IOException {
  if (fr.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (fr.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=fr.readInt();
  optimalCoupling=fr.readInt();
  extendSelections=fr.readInt();
  joinMethod=fr.readInt();
  joinWeightShift=fr.readInt();
  int weightLength=fr.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=fr.readInt();
  }
  int unitsLength=fr.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(fr);
  }
  int unitTypesLength=fr.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(fr);
  }
  sts=new SampleSet(fr);
  mcep=new SampleSet(fr);
  int numCarts=fr.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(fr);
    CART cart=CARTImpl.readFbinary(fr);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}",316,21,"is:fr,loadBinary:readFbinary,",181,1.74,ALERT
120,"public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}
","public void configs(SwtPlatform... Platformions){
  configs(Arrays.asList(Platformions));
}
",20,2,"platforms:Platformions,",29,0.29,ALERT
121,"static TemplateModelException newMethodArgInvalidValueException(String methodName,int argIdx,Object... details){
  return new _TemplateModelException(methodName,""(...) argument #"",Integer.valueOf(argIdx + 1),"" had invalid value: "",details);
}","static TemplateModelException newMethodArgValidValuesception(String MethodCall,int argIdx,Object... details){
  return new _TemplateModelException(MethodCall,""(...) argument #"",Integer.valueOf(argIdx + 1),"" had invalid value: "",details);
}",38,4,"methodName:MethodCall,newMethodArgInvalidValueException:newMethodArgValidValuesception,",58,0.63,ALERT
122,,,22,1,,427,5.485495165983840,0
123,,,67,3,,1154,12.511423166592900,0
124,"static CipherSuite valueOf(int id1,int id2){
  id1&=0xff;
  id2&=0xff;
  int id=(id1 << 8) | id2;
  CipherSuite c=idMap.get(id);
  if (c == null) {
    String h1=Integer.toString(id1,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite(""Unknown 0x"" + h1 + "":0x""+ h2,id);
  }
  return c;
}","static CipherSuite valueOf(int id1,int id2){
  id1&=0xff;
  id2&=0xff;
  int ID=(id1 << 8) | id2;
  CipherSuite c=idMap.get(ID);
  if (c == null) {
    String h1=Integer.toString(id1,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite(""Unknown 0x"" + h1 + "":0x""+ h2,ID);
  }
  return c;
}",92,7,"id:ID,",260,5.51,ALERT
125,"public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}","public static String[] split(String object,String separator){
  Vector nodes=new Vector();
  int index=object.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(object.substring(0,index));
    object=object.substring(index + separator.length());
    index=object.indexOf(separator);
  }
  nodes.addElement(object);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}",139,7,"original:object,",63,0.87,ALERT
126,"private void ensureBufferCapacity(int desiredCapacity){
  int capacity=pixelBuffer.length;
  while (capacity < desiredCapacity) {
    capacity*=2;
  }
  if (capacity > pixelBuffer.length) {
    pixelBuffer=new byte[capacity];
  }
}","private void ensureBufferCapacity(int desiredCapacity){
  int huge=pixelBuffer.length;
  while (huge < desiredCapacity) {
    huge*=2;
  }
  if (huge > pixelBuffer.length) {
    pixelBuffer=new byte[huge];
  }
}",46,4,"capacity:huge,",43,0.85,ALERT
127,"public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException(""Client not connected"");
    }
    if (!authenticated) {
      throw new IllegalStateException(""Client not authenticated"");
    }
    communication.sendFTPCommand(""MDTM "" + path);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
    String[] messages=r.getMessages();
    if (messages.length != 1) {
      throw new FTPIllegalReplyException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(messages[0]);
      }
 catch (      ParseException e) {
        throw new FTPIllegalReplyException();
      }
    }
  }
}","public Date modDate(String xml) throws IllegalStateException, NetworkExcept, FTPIllegalServerException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException(""Client not connected"");
    }
    if (!authenticated) {
      throw new IllegalStateException(""Client not authenticated"");
    }
    communication.sendFTPCommand(""MDTM "" + xml);
    FTPReply w=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!w.isSuccessCode()) {
      throw new FTPException(w);
    }
    String[] Messannels=w.getMessages();
    if (Messannels.length != 1) {
      throw new FTPIllegalServerException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(Messannels[0]);
      }
 catch (      ParseException e) {
        throw new FTPIllegalServerException();
      }
    }
  }
}",148,7,"modifiedDate:modDate,path:xml,IOException:NetworkExcept,FTPIllegalReplyException:FTPIllegalServerException,r:w,messages:Messannels,",477,14.49,ALERT
128,,,87,3,,1131,22.65621951421100,0
129,,,61,4,,1404,15.60106600523000,0
130,"public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
","public static byte[] nextBlocks(int size){
  byte[] runs=new byte[size];
  seededRandom.nextBytes(runs);
  return runs;
}
",33,3,"bytes:runs,randomBytes:nextBlocks,",83,0.76,ALERT
131,,,108,4,,1091,13.99832139412560,0
132,"public void register(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}
","public void run(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}
",32,2,"register:run,",33,0.29,ALERT
133,,,73,4,,1402,20.85807822942730,0
134,,,40,3,,876,13.656608617305800,0
135,"@Override public void processNewLines(String[] lines){
  for (  String line : lines) {
    if (line.startsWith(""idx"")) {
      continue;
    }
    if (line.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$s"",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s"",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}","@Override public void processNewLines(String[] runs){
  for (  Stringle : runs) {
    if (l.startsWith(""idx"")) {
      continue;
    }
    if (l.contains(""No such file"")) {
      myIsFileMissing=true;
      return;
    }
    Stringtypesues=l.split(LINE_SPLIT_REGEX);
    if (types.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      intlineUUIdd=Integer.parseInt(types[INDEX_OF_UID]);
      if (myUid == lineUUId) {
        inttempNxSizes=Integer.parseInt(types[INDEX_OF_RX_BYTES]);
        inttemptxbytess=Integer.parseInt(types[INDEX_OF_TX_BYTES]);
        if (tempNxSize < 0 || temptxbytes < 0) {
          LOG.warning(String.format(""Negative rxBytes %1$d and/or txBytes %2$d in %3$tempNxSizettemptxbytestes,l));
          continue;
        }
       myRexBytess+=tempNxSize;
        tempTXBytes+=temptxbytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format(""Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$typesues[INDEX_OF_UItypesues[INDEX_OF_RX_BYTEtypesues[INDEX_OF_TX_BYTES],l));
    }
  }
}",202,9,"lines:runs,line:l,values:types,lineUid:lineUUId,tempRxBytes:tempNxSize,tempTxBytes:temptxbytes,myRxBytes:myRexBytes,myTxBytes:tempTXBytes,",444,7.54,ALERT
136,"private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
","private static void addValuesFromArray(int StartPoint,int endIndex){
  for (int i=StartPoint; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
",40,4,"startIndex:StartPoint,addItemsToList:addValuesFromArray,",112,1.18,ALERT
137,"public static String toRegex(String glob,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegex(glob,separator.charAt(0));
}","public static String toRegrex(String glig,String interinator){
  checkNotNull(interinator,""separator must be non-null"");
  checkArgument(interinator.length() == 1,""separator must be a single character: %s"",interinator);
  return toRegrex(glig,interinator.charAt(0));
}",48,3,"toRegex:toRegrex,glob:glig,separator:interinator,",411,5.67,ALERT
138,"static Object ensureNotNull(Location location,Object value){
  if (value == null) {
    throw new EvalException(location,""Snippet runtime does not support null values."");
  }
  return value;
}
","static Object ensureIsNone(Location lc,Object type){
  if (type == null) {
    throw new EvalException(lc,""Snippet runtime does not support null values."");
  }
  return type;
}
",32,3,"ensureNotNull:ensureIsNone,location:lc,value:type,",150,2.4,ALERT
139,"public ThreadPool(String name,int poolSize){
  this.poolSize=poolSize;
  this.poolName=name;
  taskList=new LinkedList<Runnable>();
  threads=new WorkerThread[poolSize];
  createThreads();
}
","public ThreadPool(String space,int poolNumber){
  this.poolNumber=poolNumber;
  this.pPoolNumberspace;
  taskOrder=new LinkedList<Runnable>();
  ththreadletsew WorkerThread[poolNumber];
  createThreads();
}
",45,5,"name:space,poolSize:poolNumber,poolName:PoolNumber,taskList:taskOrder,threads:threadlets,",677,10.04,ALERT
140,"public void testSetNull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}","public void testsetDefault() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}",105,2,"testSetNull:testsetDefault,",66,1.72,ALERT
141,,,13,1,,433,5.273930541674300,0
142,,,15,1,,436,5.401049411296840,0
143,"public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}","public String fadeMusic(String path,String type,double fadeINDuration,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeINDuration + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}",236,11,"fadeInLength:fadeINDuration,fadeAudio:fadeMusic,",112,1.3,ALERT
144,,,68,8,,2783,38.88728710412980,0
146,"public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){
  if (companyId < 0 || 0xFFFF < companyId) {
    String message=String.format(""\'companyId\' is out of the valid range: %d"",companyId);
    throw new IllegalArgumentException(message);
  }
  if (builder == null) {
    return;
  }
  Integer key=Integer.valueOf(companyId);
  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);
  if (builders == null) {
    builders=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(key,builders);
  }
  builders.add(0,builder);
}","public void registerManufacturerSpecialBlock(int companyHalf,ADManufacturerSpecificBuilder builder){
  if (companyHalf < 0 || 0xFFFF < companyHalf) {
    String message=String.format(""\'companyId\' is out of the valid range: %d"",companyHalf);
    throw new IllegalArgumentException(message);
  }
  if (builder == null) {
    return;
  }
  Integer key=Integer.valueOf(companyHalf);
  List<ADManufacturerSpecificBuilder> holes=mMSBuilders.get(key);
  if (holes == null) {
    holes=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(key,holes);
  }
  holes.add(0,builder);
}",112,6,"builders:holes,companyId:companyHalf,registerManufacturerSpecificBuilder:registerManufacturerSpecialBlock,",195,3.23,ALERT
147,"public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}","public static boolean compalls(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.compalls(field1,field2);
  }
}",55,3,"equals:compalls,",40,0.68,ALERT
148,"final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void println(char volt){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(volt);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",72,3,"v:volt,",70,0.77,ALERT
150,,,18,1,,432,4.7686056137085000,0
151,"public String render(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
","public String printf(ValueExpr theExpect) throws Exception {
  theExpect.visit(this);
  return mBuffer.toString();
}
",25,2,"theExpr:theExpect,render:printf,",62,0.63,ALERT
152,"public boolean isNumericalRun(String pin){
  final int len=pin.length();
  int prevDigit=Character.digit(pin.charAt(0),10);
  int prevDiff=Integer.MAX_VALUE;
  boolean isRun=true;
  for (int i=1; isRun && i < len; i++) {
    final int digit=Character.digit(pin.charAt(i),10);
    final int diff=digit - prevDigit;
    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {
      isRun=false;
    }
    prevDiff=diff;
    prevDigit=digit;
  }
  return isRun;
}","public boolean isNumereticRunning(String scan){
  final int lwlscan.length();
  int pprevAddithCharacter.dformatscan.charAt(0),10);
  int PrevDiff=Integer.MAX_VALUE;
  boolean lisRunning=true;
  for (intli=1;lisRunningn &&li < wl; l++) {
    final int dformatCharacter.dformatscan.charAt(l),10);
    final int dimessageformat- prevAddith;
    if (PrevDiff != Integer.MAX_VALUE && message != PrevDiff) {
      lisRunning=false;
    }
    PrevDiff=message;
    prevAddith=format;
  }
  return lisRunning;
}",121,9,"isNumericalRun:isNumereticRunning,pin:scan,len:wl,prevDigit:prevAddith,prevDiff:PrevDiff,i:l,isRun:lisRunning,digit:format,diff:message,",685,8.69,ALERT
153,"public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}","public final ArrayList<Move> removeNonOptal(Position prop,ArrayList<Move> movingQueue){
  ArrayList<Move> optionalPobiles=new ArrayList<Move>();
  ArrayList<Move> unknownNasks=new ArrayList<Move>();
  final int MCE150=100000;
  int BestScale=-1000000;
  UndoInfo ou=new UndoInfo();
  for (  Move m :smovingQueue) {
    prop.makeMove(s,ou);
    int pplicestoPullMath.max(100 - prop.halfMoveClock,1);
    GtbProbeResult rcsgtbProbe(prop);
    prop.unMakeMove(s,ou);
    if (cs.result == GtbProbeResult.UNKNOWN) {
      unknownNasks.add(s);
    }
 else {
      int wRate;
      if (cs.result == GtbProbeResult.WMATE) {
        if (recsliesToMate <= pplicestoPull         wRate=MCE150 - cs.pliesToMate;
 else         wRate=1;
      }
 else       if (cs.result == GtbProbeResult.BMATE) {
        if (recsliesToMate <= pplicestoPull         wRate=-(MCE150 - cs.pliesToMate);
 else         wRate=-1;
      }
 else {
        wRate=0;
      }
      intsizee=prop.whiteMove ? wRate : -wRate;
      if (size > BestScale) {
        optionalPobiles.clear();
        optionalPobiles.add(s);
        BestScale=size;
      }
 else       if (size == BestScale) {
        optionalPobiles.add(s);
      }
 else {
      }
    }
  }
  for (  Move m :sunkunknownNasks optionalPobiles.add(s);
  return (optoptionalPobilesze() < movingQueue.size()) ? optionalPobiles : null;
}",310,13,"removeNonOptimal:removeNonOptal,pos:prop,moveList:movingQueue,optimalMoves:optionalPobiles,unknownMoves:unknownNasks,MATE0:MCE150,bestScore:BestScale,ui:ou,m:s,pliesToDraw:plicestoPull,res:cs,wScore:wRate,score:size,",1990,27.68,ALERT
154,,,23,2,,809,10.257870010534900,0
155,"public boolean equals(Object obj){
  if (obj instanceof MSort) {
    MSort ms=(MSort)obj;
    if (data == ms.data)     return true;
  }
  return false;
}
","public boolean equals(Object p){
  if (p instanceof MSort) {
    MSort ms=(MSort)p;
    if (data == ms.data)     return true;
  }
  return false;
}
",39,3,"obj:p,",38,0.56,ALERT
156,,,48,2,,659,7.032869704564410,0
157,"public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}","public static void drawVerticalMarginnerIndifier(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}",430,14,"drawVerticalMarginIndicator:drawVerticalMarginnerIndifier,",146,2.01,ALERT
158,"public void start(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug(""Starting Task: "" + toString());
    startTime=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}
","public void kill(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug(""Starting Task: "" + toString());
    launchTimeout=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}
",77,2,"start:kill,startTime:launchTimeout,",198,2.56,ALERT
160,"@Override public void readExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}
","@Override public void readExternal(ObjectInput again) throws IOException {
  patpathfsUtils.readPath(again);
  blogroupNameain.readInt();
  grpgrpcBlockLenain.readLong();
  lenlonain.readLong();
  prodevpsreadStringMap(again);
  accreleaseCountain.readLong();
  modmodificationTimeain.readLong();
  flafieldsain.readByte();
}
",79,10,"in:again,blockSize:groupName,grpBlockSize:grpcBlockLen,len:lon,props:devps,accessTime:releaseCount,flags:fields,",298,9.07,ALERT
161,,,20,1,,415,4.502703547477720,0
162,"private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_S < 1 || blockSize_L < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockSize_S + "" or blockSize_L: ""+ blockSize_L);
  }
  int s=r.read(blockSize_S);
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart part=new DiffPart(DiffAction.INSERT);
  part.setStart(s);
  part.setText(output.toString(WIKIPEDIA_ENCODING));
  return part;
}","private DiffPart decoderAdds(final int blockLength_S,final int blockSizeLN) throws UnsupportedEncodingException, DecodingException {
  if (blockLength_S < 1 || blockSizeLN < 1) {
    throw new DecodingException(""Invalid value for blockSize_S: "" + blockLength_S + "" or blockSize_L: ""+ blockSizeLN);
  }
  int s=ts.read(blockLength_S);
  int w=r.read(blockSizeLN);
  ByteArrayOutputStream beta=new ByteArrayOutputStream();
  for (int multi=0; multi < w; multi++) {
    beta.write(r.readByte());
  }
  DiffPart editor=new DiffPart(DiffAction.INSERT);
  peditorsetStart(ts);
editorrt.setText(beta.toString(WIKIPEDIA_ENCODING));
  return editor;
}",131,8,"decodeAdd:decoderAdds,blockSize_S:blockLength_S,blockSize_L:blockSizeLN,s:ts,l:w,output:beta,i:multi,part:editor,",1154,15.38,ALERT
163,"private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){
  int w=Math.abs(x2 - x1);
  int h=Math.abs(z2 - z1);
  if (bAllowDiags) {
    if (w < h)     w=0;
 else     h=0;
  }
  return w + h + 1;
}","private int distToPoints(int x4,int Zone,int ux2,int z5,boolean bAcceptDiags){
  int wmMath.abs(ux2 - x4);
  int h=hdath.abs(z2z5 Zone);
  if (bAcceptDiags) {
    if (m < hd)     m=0;
 else     hd=0;
  }
  return m + hd + 1;
}",73,8,"distBetweenPoints:distToPoints,x1:x4,z1:Zone,x2:ux2,z2:z5,bAllowDiags:bAcceptDiags,w:m,h:hd,",580,6.88,ALERT
164,,,15,1,,433,5.475047429402670,0
165,"public ContentImpl createCompoundPackageContent(OleBlobImpl blob,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){
  return new CompoundContentImpl(blob,prettyName,className,typeName,blobBb.position(),dataBlockLen);
}
","public ContentImpl createCompoundJavaContents(OleBlobImpl blib,String PrettyNames,String className,String parentname,ByteBuffer blobLb,int dataBlockNum){
  return new CompoundContentImpl(blib,PrettyNames,className,parentname,blobLb.position(),dataBlockNum);
}
",45,7,"createCompoundPackageContent:createCompoundJavaContents,blob:blib,prettyName:PrettyNames,typeName:parentname,blobBb:blobLb,dataBlockLen:dataBlockNum,",292,2.89,ALERT
166,,,31,2,,788,14.03680597146350,0
167,"private void loadManifest(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifest=_jarPath.getManifest();
      if (_manifest == null)       return;
      Attributes attr=_manifest.getMainAttributes();
      if (attr != null)       addManifestPackage("""",attr);
      Map<String,Attributes> entries=_manifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
","private void loadManPackage(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _matency=_jarPath.getManifest();
      if (_matency == null)       return;
      Attributesadrr=_matency.getMainAttributes();
      if (adr != null)       addManifestPackage("""",adr);
      Map<String,Attributes>quriess=_matency.getEntries();
      for (      Map.Entry<String,Attributes>expectedy : quries.entrySet()) {
        String pkgpluginpected.getKey();
        adr=expected.getValue();
        if (adr == null)         continue;
        addManifestPackagepluging,adr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}
",163,6,"loadManifest:loadManPackage,_manifest:_matency,attr:adr,entries:quries,entry:expected,pkg:plugin,",308,3.72,ALERT
168,"protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
","protected void loadValue(String eText){
  try {
    value=Byte.parseByte(eText.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
",36,3,"sValue:eText,",28,0.19,ALERT
170,"public void add(int index,int element){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=element;
  size++;
}","public void update(int index,int source){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=source;
  size++;
}",58,6,"add:update,element:source,",77,1.35,ALERT
171,"public void centerHorizontal(ArrayList<Integer> nodes){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(nodes));
  }
  int nMinY=-1;
  int nMaxY=-1;
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nY=getPositionY(nodes.get(iNode));
    if (nY < nMinY || iNode == 0) {
      nMinY=nY;
    }
    if (nY > nMaxY || iNode == 0) {
      nMaxY=nY;
    }
  }
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nNode=nodes.get(iNode);
    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);
  }
}","public void centerVertallel(ArrayList<Integer> snards){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(snards));
  }
  int NMaxy=-1;
  int nEndY=-1;
  for (int iqiBlock0; iqiBlock< snards.size(); qiBlock++) {
    int nY=pYtPositionY(snards.get(qiBlock));
    if (nYpY NMaxy || qiBlock == 0) {
      NMaxy=pY;
    }
    if (nYpY nEndY || qiBlock == 0) {
      nEndY=pY;
    }
  }
  for (int iqiBlock0; iqiBlock< snards.size(); qiBlock++) {
    int nNoiPointards.get(qiBlock);
    m_nPositionY.set(iPoint,(NMaxy + nEndY) / 2);
  }
}",149,7,"centerHorizontal:centerVertallel,nodes:snards,nMinY:NMaxy,nMaxY:nEndY,iNode:qiBlock,nY:pY,nNode:iPoint,",1122,13.94,ALERT
172,,,50,4,,1514,22.28216301202770,0
173,,,161,7,,2208,32.0004297097524,0
174,"public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
","public static String toxl(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toxl(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
",55,4,"toXml:toxl,",41,0.4,ALERT
175,"@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);
}
","@Override public boolean DroomOf(Selector art,Selector DestExt,int seconds) throws UiObjectNotFoundException, NotImplementedException {
  return DroomOf(device.findObject(art.toUiSelector()),DestExt,seconds);
}
",40,4,"dragTo:DroomOf,obj:art,destObj:DestExt,steps:seconds,",231,2.74,ALERT
176,"QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
","QName toqWord(Class<?> outputClass){
  String localPart;
  String namespacedIli;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespacedIli=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespacedIli=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespacedIli)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespacedIli=annotation.namespace();
    }
 else {
      namespacedIli=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespacedIli,localPart);
}
",211,6,"toQName:toqWord,namespaceUri:namespacedIli,",149,2.04,ALERT
177,,,74,1,,465,5.302184311548870,0
178,"private void updateLegends(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}","private void createLegenders(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}",412,17,"updateLegends:createLegenders,",108,1.12,ALERT
179,,,64,3,,628,11.969436693191500,0
181,"public void add(final CreatureRespawnPoint point){
  respawnPoints.add(point);
}
","public void and(final CreatureRespawnPoint point){
  respawnPoints.and(point);
}
",17,2,"add:and,",37,0.35,ALERT
182,"public static int unionSize(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}","public static int BitSize(long[] m,long[] y){
  final int lx=m.length, gy=y.length;
  final int min=(lx < gy) ? lx : gy;
  int i=0, RES=0;
  for (; i < min; i++) {
    RES+=Long.bitCount(m[i] | y[i]);
  }
  for (; i < lx; i++) {
    RES+=Long.bitCount(m[i]);
  }
  for (; i < gy; i++) {
    RES+=Long.bitCount(y[i]);
  }
  return RES;
}",134,8,"unionSize:BitSize,x:m,ly:gy,res:RES,",330,4.24,ALERT
183,"public boolean containsCategory(String category){
  return !hiddenBugCategorySet.contains(category);
}
","public boolean ContinsCat(String Category){
  return !hiddenBugCategorySet.contains(Category);
}
",18,2,"containsCategory:ContinsCat,category:Category,",642,9.55,ALERT
184,"private Activity checkActivity(){
  Activity activity=mActivity.get();
  if (activity == null) {
    throw new IllegalStateException(""No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity."");
  }
  return activity;
}
","private Activity findAction(){
  Activity task=mActivity.get();
  if (task == null) {
    throw new IllegalStateException(""No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity."");
  }
  return task;
}
",34,2,"checkActivity:findAction,activity:task,",102,1.2,ALERT
185,"public void testEmptyOrNullBlob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}","public void insertEmptyOrNullblore() throws Exception {
  try {
    PreparedStatement slmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      slmt.setInt(1,3);
      slmt.setBytes(2,new byte[0]);
      int insertmentedNumber=slmt.executeUpdate();
      assertTrue(""Should insert one row."",insertmentedNumber == 1);
      slmt.setInt(1,4);
      slmt.setNull(2,Types.BINARY);
      insertmentedNumber=slmt.executeUpdate();
      assertTrue(""Should insert one row."",insertmentedNumber == 1);
    }
  finally {
      slmt.close();
    }
    slmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    slmt.setInt(1,3);
    try {
      ResultSet rs=slmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      slmt.setInt(1,4);
      rs=slmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      slmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}",254,4,"stmt:slmt,insertedCount:insertmentedNumber,testEmptyOrNullBlob:insertEmptyOrNullblore,",139,4.18,ALERT
186,"protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}","protected double computeEstDMax(Instance ch,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,ch) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}",154,10,"inst:ch,computeStdDev:computeEstDMax,",326,4.95,ALERT
188,,,49,4,,1515,14.393213760852800,0
189,"public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}","public void invoke(InputStream isc,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(isc,dbg);
    dIs.startTop2();
    isc=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(isc);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(isc);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(isc);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(isc);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}",252,11,"is:isc,",83,1.12,ALERT
190,,,145,7,,2253,29.962509187062600,0
191,,,26,3,,1148,11.263960548241900,0
192,,,28,2,,793,9.272792494297030,0
194,,,23,2,,708,9.058240616321560,0
195,,,70,1,,440,4.47142204840978,0
196,"public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}","public void iolate(Context region,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedBackComponent=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.iolate(region,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.iolate(region,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=region.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.iolate(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.iolate(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.iolate(region,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.iolate(region,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}",438,17,"mHapticFeedbackController:mHapticFeedBackComponent,context:region,initialize:iolate,",471,5.19,ALERT
197,"public void startTicker(long delay,boolean rightToLeft){
  if (!tickerEnabled) {
    return;
  }
  if (!isCellRenderer()) {
    Form parent=getComponentForm();
    if (parent != null) {
      parent.registerAnimatedInternal(this);
    }
  }
  tickerStartTime=System.currentTimeMillis();
  tickerDelay=delay;
  tickerRunning=true;
  this.rightToLeft=rightToLeft;
  if (isRTL()) {
    this.rightToLeft=!this.rightToLeft;
  }
}
","public void startPick(long load,boolean rightTOleft){
  if (!tickerEnabled) {
    return;
  }
  if (!isCellRenderer()) {
    Form parent=getComponentForm();
    if (parent != null) {
      parent.registerAnimatedInternal(this);
    }
  }
  tickerStartTime=System.currentTimeMillis();
  tickerDelay=load;
  tickerRunning=true;
  this.rightTOleft=rightTOleft;
  if (isRTL()) {
    this.rightTOleft=!this.rightTOleft;
  }
}
",91,6,"rightToLeft:rightTOleft,delay:load,startTicker:startPick,",127,1.22,ALERT
199,"public static String parseDiskString(String input){
  String delims=""[ ]+"";
  String[] tokens=input.split(delims);
  return tokens[0];
}","public static String parseDiskString(String io){
  String delims=""[ ]+"";
  String[] tokens=io.split(delims);
  return tokens[0];
}",33,4,"input:io,",40,0.47,ALERT
201,,,18,2,,795,12.464349027474700,0
202,"void hideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
","void showRegion(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
",37,2,"hideBorder:showRegion,",23,0.18,ALERT
203,"public void recordBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordBeginning(mModuleName,mRunId);
}
","public void recordAnother(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordAnother(mModuleName,mRunId);
}
",42,2,"recordBeginning:recordAnother,",57,0.43,ALERT
204,"public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String Fromtag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(Fromtag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:Fromtag,",46,0.85,ALERT
205,"public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}","public String find(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}",60,5,"random:find,",40,0.42,ALERT
206,"public void add(String methodName,List<Expression> parameters){
  chain.add(new DotExpressionItem(methodName,parameters,false));
}
","public void added(String methodName,List<Expression> parameters){
  chain.added(new DotExpressionItem(methodName,parameters,false));
}
",30,3,"add:added,",62,0.55,ALERT
207,"public void removeSelectionListener(final SelectionListener listener){
  checkWidget();
  if (listener == null) {
    SWT.error(SWT.ERROR_NULL_ARGUMENT);
  }
  listOfSelectionListeners.remove(listener);
}
","public void removeSelectAdapter(final SelectionListener listerver){
  checkWidget();
  if (listerver == null) {
    SWT.error(SWT.ERROR_NULL_ARGUMENT);
  }
  listOfSelectionListeners.remove(listerver);
}
",38,2,"removeSelectionListener:removeSelectAdapter,listener:listerver,",298,3.8,ALERT
208,"public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}","public boolean equALSElse(){
  return (Double.doubleToLongBits(value) == 0);
}",19,1,"equalsDefault:equALSElse,",17,0.22,ALERT
209,"@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
","@Override public List<String> allKeys(){
  List<String> NameKeys=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return NameKeys;
  for (  File file : files) {
    if (file.isFile()) {
      NameKeys.add(file.getName());
    }
  }
  return NameKeys;
}
",78,4,"nameFiles:NameKeys,",43,0.49,ALERT
210,"@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
","@Override public void do_after_Propodations(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
",40,3,"do_after_propagation:do_after_Propodations,",30,0.36,ALERT
211,"public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
","public ResourcesPoet newFloat(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
",58,4,"addInteger:newFloat,",52,0.45,ALERT
212,,,97,5,,1735,15.926501135031400,0
214,"private List<String> fetchFileCosIdList() throws SOSFailure {
  final String methodName=""fetchFileCosIdList(): "";
  log.trace(methodName + ""Entry"");
  final String FILE_COS_URI=""/file/vpools"";
  List<String> fileCosIdList=new ArrayList<String>();
  try {
    CoSList cosElemList=_client.queryObject(FILE_COS_URI,CoSList.class);
    if (cosElemList != null && cosElemList.getCosElements() != null) {
      for (      CoSElement elem : cosElemList.getCosElements()) {
        if (elem != null) {
          fileCosIdList.add(elem.getId());
        }
      }
    }
    log.trace(methodName + ""File CoS Ids: "" + fileCosIdList);
    if (cosElemList != null && fileCosIdList != null) {
      log.trace(methodName + ""Exit returning cos list of size["" + fileCosIdList.size()+ ""]"");
      return fileCosIdList;
    }
    log.trace(methodName + ""Exit returning cos list of size[0]"");
    return new ArrayList<String>();
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(methodName + ""NoSuchAlgorithmException occured"",e);
    throw new SOSFailure(e);
  }
catch (  UniformInterfaceException e) {
    log.error(methodName + ""UniformInterfaceException occured"",e);
    throw new SOSFailure(e);
  }
}","private List<String> fetchFileCosInts() throws SOSFailure {
  final String resourceName=""fetchFileCosIdList(): "";
  log.trace(resourceName + ""Entry"");
  final String FILE_COSESSURI=""/file/vpools"";
  List<String> fileCosLengthL=new ArrayList<String>();
  try {
    CoSList cocosEmLclient.queryObject(FILE_COSESSURI,CoSList.class);
    if (cosEmL != null && cosEmL.getCosElements() != null) {
      for (      CoSEleeom elem : cosEmL.getCosElements()) {
        if (eom != null) {
          fileCosLengthL.add(eom.getId());
        }
      }
    }
    log.trace(resourceName + ""File CoS Ids: "" + fileCosLengthL);
    if (ccosEmL!= null && fileCosLengthL != null) {
      log.trace(resourceName + ""Exit returning cos list of size["" + fileCosLengthL.size()+ ""]"");
      return fileCosLengthL;
    }
    log.trace(resourceName + ""Exit returning cos list of size[0]"");
    return new ArrayList<String>();
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(resourceName + ""NoSuchAlgorithmException occured"",e);
    throw new SOSFailure(e);
  }
catch (  UniformInterfaceException e) {
    log.error(resourceName + ""UniformInterfaceException occured"",e);
    throw new SOSFailure(e);
  }
}",223,6,"fetchFileCosIdList:fetchFileCosInts,methodName:resourceName,FILE_COS_URI:FILE_COSESSURI,fileCosIdList:fileCosLengthL,cosElemList:cosEmL,elem:eom,",404,6.24,ALERT
215,"public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
","public static void upgradeClientService(SSOToken sceAuth,String InstanceId,String instanceInfo,Map<String,String> upvertedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfctx sc=getServerConfig(sceAuth,InstanceId);
  if (ctx != null) {
    Map mparentctx.getAttributes();
    parent.remove(ATTR_PARENT_SITE_ID);
    Set NewSet=getPropertiesSet(upvertedValues);
    parent.put(ATTR_SERVER_CONFIG,NewSet);
    ctx.setAttributes(parent);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
",102,8,"upgradeServerInstance:upgradeClientService,ssoToken:sceAuth,instanceName:InstanceId,instanceId:instanceInfo,upgradedValues:upvertedValues,sc:ctx,map:parent,newSet:NewSet,",445,6.81,ALERT
216,"protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
","protected void deleteTypesverpoint(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypesverpoint(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
",68,4,"deleteTypeVertex:deleteTypesverpoint,",123,1.13,ALERT
217,,,221,12,,4139,79.05130397478740,0
218,,,21,1,,415,5.29064716498057,0
219,"public void forward(HttpServerRequest request){
  forward(request,null);
}
","public void construct(HttpServerRequest request){
  construct(request,null);
}
",16,2,"forward:construct,",66,0.69,ALERT
220,"protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
","protected boolean mathesCondition(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
",42,4,"matchesFilter:mathesCondition,",20,0.22,ALERT
221,"public CompletableFuture<NewFile> run(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}","public CompletableFuture<NewFile> release(){
  LOG.log(Level.FINE,""starting optimized file creation for {0} files"",steps.size());
  CompletableFuture<NewFile> fileCreoration=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.steps;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreoration);
  }
  this.steps=new LinkedList<>();
  return fileCreoration;
}",85,4,"run:release,fileCreation:fileCreoration,files:steps,",178,1.98,ALERT
222,"final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void rint(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,3,"println:rint,",32,0.39,ALERT
223,"private static void updateWindowUI(Window window){
  SwingUtilities.updateComponentTreeUI(window);
  Window ownedWins[]=window.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    updateWindowUI(ownedWin);
  }
}
","private static void updateWinGUI(Window microsoft){
  SwingUtilities.updateComponentTreeUI(microsoft);
  Window ownedGrings[]=microsoft.getOwnedWindows();
  for (  Window ownedWin : ownedGrings) {
    updateWinGUI(ownedWin);
  }
}
",42,4,"ownedWins:ownedGrings,window:microsoft,updateWindowUI:updateWinGUI,",122,1.46,ALERT
224,,,12,1,,420,5.845013829072320,0
225,,,16,2,,783,9.322364536921180,0
227,,,113,3,,1149,24.764981162548100,0
228,"public void addPreferencesButton(){
  JButton prefsButton=new JButton(""Prefs"");
  prefsButton.setHideActionText(true);
  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefsButton);
}
","public void addPresChannel(){
  JButton preFSPanel=new JButton(""Prefs"");
  preFSPanel.setHideActionText(true);
  preFSPanel.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(preFSPanel);
}
",42,2,"addPreferencesButton:addPresChannel,prefsButton:preFSPanel,",170,1.88,ALERT
229,,,291,16,,4955,88.1749474008878,0
230,"private boolean hasNext(Pattern pattern){
  if (!hasNext()) {
    return false;
  }
  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));
  return matcher.find();
}
","private boolean HasMore(Pattern type){
  if (!HasMore()) {
    return false;
  }
  MatchMatchersher=type.Matchers(gserValue.substring(pos,length));
  return Matchers.find();
}
",45,3,"hasNext:HasMore,pattern:type,matcher:Matchers,",198,3.71,ALERT
231,"private void updateStateView(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
","private void UpdateModelCheck(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
",31,3,"updateStateView:UpdateModelCheck,",28,0.37,ALERT
232,,,20,1,,464,6.742943255106610,0
233,,,58,3,,1146,13.959733239809700,0
234,,,81,2,,671,5.460290451844530,0
235,"public void init(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    init(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + url + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
","public void clone(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    clone(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + url + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
",97,5,"init:clone,",44,0.58,ALERT
236,"private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}","private void insertPines(){
  spline=new int[(spline.length << 1) + 1];
  ttyreshold(int)(spline.length * loadFactor);
  Arrays.fill(spline,-1);
  for (int part=0; part < size; part++) {
    insert(objs[part],part);
  }
}",72,4,"growSpine:insertPines,spine:spline,threshold:tyreshold,i:part,",171,2.23,ALERT
237,"public Tasker addTask(Task task){
  tasks.add(task);
  lastAddedTask=task;
  return this;
}
","public Tasker addedJob(Task app){
  tasks.add(app);
 lastAddedAttemptk=app;
  return this;
}
",23,3,"addTask:addedJob,task:app,lastAddedTask:lastAddedAttempt,",130,1.46,ALERT
238,,,55,8,,2576,27.097402282555900,0
239,,,106,18,,5960,55.038327074050900,0
240,"private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}","private void pathStyleInternal(String css,String url){
  if (css == null) {
    return;
  }
  if (css.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizefest=new StringTokenizer(css,"" ,"");
  int count=fe.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float conf=0;
  float master=1f;
  int k=0;
  while (fe.hasMoreTokens()) {
    intervalk[i++]=master=toFloat(fe.nextToken(),master);
    conf+=master;
  }
  for (int sp=0; k < intervals.length; k++, sp++) {
    conf+=intervals[k]=intervals[sp];
  }
  float load=0f;
  if (url != null) {
    try {
    loadff=Float.parseFloat(url) % conf;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,load));
}",213,11,"pathStyleHelper:pathStyleInternal,style:css,offset:url,st:fe,max:conf,current:master,i:k,start:sp,off:load,",650,7.52,ALERT
241,"public static Format generateFormat(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
","public static Format GenerceFile(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
",25,2,"generateFormat:GenerceFile,",28,0.27,ALERT
242,"public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}","public double calculateExcitatoryRie(){
  excitatoryRIO=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRIO)) {
    return 0;
  }
  return excitatoryRIO;
}",39,2,"calculateExcitatoryRatio:calculateExcitatoryRie,excitatoryRatio:excitatoryRIO,",108,1.48,ALERT
243,"public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}
","public void tracks(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}
",43,4,"track:tracks,",39,0.38,ALERT
245,"protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
","protected void arraycopy(byte[] vec,int pos,int length){
  mMessage.write(vec,pos,length);
  mPosition=mPosition + length;
}
",34,5,"buf:vec,",43,0.41,ALERT
246,"public void testPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}","public void runPutInfoRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}",154,6,"testPutGetRemove:runPutInfoRemove,",38,0.6,ALERT
247,"public static synchronized DataSourceViewsManager sharedInstance(){
  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();
  return sharedInstance;
}
","public static synchronized DataSourceViewsManager shareRegion(){
  if (shareRegion == null)   shareRegion=new DataSourceViewsManager();
  return shareRegion;
}
",25,1,"sharedInstance:shareRegion,",36,0.37,ALERT
248,"public static String[] parseTitle(String title){
  String v[]={"""",""""};
  if (title == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}","public static String[] processTitle(String doc){
  String ve[]={"""",""""};
  if (doc == null)   return ve;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(doc);
  if (m.find()) {
    ve[0]=m.group(1);
    ve[1]=m.group(2);
  }
 else {
    ve[0]=doc;
  }
  return ve;
}",103,5,"v:ve,title:doc,parseTitle:processTitle,",153,2.2,ALERT
249,"private Element createIDPEntityDescriptor(boolean exportPrivateData) throws Exception {
  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String id=idmClient.getEntityID(tenantName);
  String alias=idmClient.getLocalIDPAlias(tenantName);
  if (id == null) {
    id=tenantName;
  }
  entEle.setAttribute(SAMLNames.ENTID,id);
  Element idpSSO=createIDPSSODescriptor(exportPrivateData);
  entEle.appendChild(idpSSO);
  if (exportPrivateData) {
    if (alias == null || alias.isEmpty()) {
      alias=id;
    }
    Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH);
    entEle.appendChild(orgEle);
  }
  return entEle;
}
","private Element createIDPEntityDesripture(boolean exportPrivatePart) throws Exception {
  Element sentElement=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String source=idmClient.getEntityID(tenantName);
  String base=idmClient.getLocalIDPAlias(tenantName);
  if (source == null) {
    source=tenantName;
  }
  sentElement.setAttribute(SAMLNames.ENTID,source);
  Element idpSSo=createIDPSSODescriptor(exportPrivatePart);
  sentElement.appendChild(idpSSo);
  if (exportPrivatePart) {
    if (base == null || base.isEmpty()) {
      aliabaserce;
    }
    ElementOrgLee=createOrganization(tenantName,tenantName,base,SAMLNames.ENGLISH);
    sentElement.appendChild(OrgLe);
  }
  return sentElement;
}
",133,7,"createIDPEntityDescriptor:createIDPEntityDesripture,exportPrivateData:exportPrivatePart,entEle:sentElement,id:source,alias:base,idpSSO:idpSSo,orgEle:OrgLe,",776,9.04,ALERT
250,"public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
","public Iterable<ServiceDescriptor> registerService(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
",47,3,"listServices:registerService,",22,0.22,ALERT
251,"private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}","private double[][] xprime(int k){
  double[][] p=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(k - i - 1);
    System.arraycopy(yPrime[0],0,p[0],i * numVars,numVars);
  }
  return p;
}",93,5,"t:k,xPrime:xprime,x:p,",85,0.96,ALERT
252,,,85,4,,1204,9.167620106538140,0
253,"public synchronized void checkAccess(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}","public synchronized void updateAccess(LicenseCheckerCallback proxy){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,""Using cached license response"");
    proxy.allow(Policy.LICENSED);
  }
 else {
    LicenseValidatValidertor=new LicenseValidator(mPolicy,new NullDeviceLimiter(),proxy,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,""Binding to licensing service."");
      try {
        boolean createReturn=mContext.bindService(new Intent(new String(Base64.decode(""Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U=""))),this,Context.BIND_AUTO_CREATE);
        if (createReturn) {
          mPendingChecks.offer(Valider);
        }
 else {
          Log.e(TAG,""Could not bind to service."");
          handleServiceConnectionError(Valider);
        }
      }
 catch (      SecurityException e) {
        proxy.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(Valider);
      runChecks();
    }
  }
}",187,4,"checkAccess:updateAccess,callback:proxy,validator:Valider,bindResult:createReturn,",169,2.65,ALERT
254,"private void shutdown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
","private void shutdownup(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
",49,1,"shutdown:shutdownup,",13,0.14,ALERT
255,,,281,7,,1769,19.10904404322310,0
257,"public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}
","public String[] buildReport(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (buildReport(document));
}
",33,3,"parseConfiguration:buildReport,",37,0.43,ALERT
258,,,13,2,,798,7.288044615586600,0
259,,,181,9,,3261,46.798598512013800,0
260,"public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}","public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comperquality=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comperquality == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comperquality=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comperquality == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comperquality=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comperquality;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}",391,20,"comparison:comperquality,",85,1.56,ALERT
261,"public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}
","public synchronized Future<V> start(Callable<V> task) throws RejectedExecutionException {
  return pool.start(task);
}
",26,2,"submit:start,",36,0.31,ALERT
263,"public static HashProvider best(HashParameters params){
  return best(params,EnumSet.of(HashSupport.STATEFUL));
}
","public static HashProvider find(HashParameters params){
  return find(params,EnumSet.of(HashSupport.STATEFUL));
}
",25,2,"best:find,",37,0.44,ALERT
264,"public Optional<T> last(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
","public Optional<T> latest(){
  Iterator<T> iterator=iterator();
  T page=null;
  while (iterator.hasNext())   page=iterator.next();
  return Optional.of(page);
}
",49,3,"value:page,last:latest,",67,0.7,ALERT
265,"private synchronized IMqttToken removeMqttToken(Bundle data){
  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityToken != null) {
    int tokenNumber=Integer.parseInt(activityToken);
    IMqttToken token=tokenMap.get(tokenNumber);
    tokenMap.delete(tokenNumber);
    return token;
  }
  return null;
}
","private synchronized IMqttToken removeMqtuCallback(Bundle div){
  StringactivityWordn=div.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityWord != null) {
    intokenNumr=Integer.parseInt(activityWord);
    IMqttToresourceoken=tokenMap.get(okenNum);
    tokenMap.delete(okenNum);
    return resource;
  }
  return null;
}
",63,5,"removeMqttToken:removeMqtuCallback,data:div,activityToken:activityWord,tokenNumber:okenNum,token:resource,",455,6.17,ALERT
266,,,15,1,,426,8.584657831986740,0
267,"private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}","private int calculateWallSize(float StarC,int numberOfStars,float starsSeparation,boolean binding){
  return Math.round(StarC) + (binding ? getPaddingTop() + getPaddingBottom() : 0);
}",40,5,"starSize:StarC,padding:binding,calculateTotalHeight:calculateWallSize,",116,1.71,ALERT
268,"private String formatNode(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
","private String filterN(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(filterN(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(filterN(n));
  }
  response.append("")"");
  return response.toString();
}
",104,4,"formatNode:filterN,",50,0.68,ALERT
270,"protected void checkRowIndex(final int row) throws MathIllegalArgumentException {
  if (row < 0 || row >= getRowDimension()) {
    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1);
  }
}","protected void checkColumnNumber(final int row) throws MathIllegalArgumentException {
  if (row < 0 || row >= getRowDimension()) {
    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1);
  }
}",45,2,"checkRowIndex:checkColumnNumber,",30,0.37,ALERT
271,"public static boolean createFolder(@SuppressWarnings(""UnusedParameters"") Context mContext,String path,String folderName){
  File SDCardRoot=new File(path,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}
","public static boolean makeRoot(@SuppressWarnings(""UnusedParameters"") Context Mcontext,String base,String foldName){
  FilSDCardsrootot=new File(base,foldName);
  if (!SDCardsroot.exists()) {
    return SDCardsroot.mkdir();
  }
  return false;
}
",53,5,"createFolder:makeRoot,mContext:Mcontext,path:base,folderName:foldName,SDCardRoot:SDCardsroot,",228,2.11,ALERT
272,"public NavMouseMode(boolean shouldConsumeEvents){
  super(modeID,shouldConsumeEvents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}
","public NavMouseMode(boolean shouldConumeContents){
  super(modeID,shouldConumeContents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}
",52,1,"shouldConsumeEvents:shouldConumeContents,",34,0.38,ALERT
273,"@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
","@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension region=dimensionSetting.get();
  updateLayerManager(region);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(region,fragment);
    region=dimensionSetting.get();
    updateLayerManager(region);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
",81,3,"dimension:region,",41,0.59,ALERT
274,,,47,3,,1156,15.657604106267300,0
275,"public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
","public void contContentUpdated(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
",54,4,"contentsChanged:contContentUpdated,",61,0.75,ALERT
276,"protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}","protected SizeRequirements calculateMinorBasiRequires(int x,SizeRequirements hr){
  updateGrid();
  calculateColumnRequirements(x);
  if (hr == null) {
    hr=new SizeRequirements();
  }
  long unit=0;
  long prep=0;
  int n=columnRequirements.length;
  for (int in=0; in < n; in++) {
    SizeRequirements rccolumnRequirements[in];
    unit+=c.within;
    prep+=c.preferred;
  }
  int allow=(n + 1) * cellSpacing + 2 * borderWidth;
  unit+=allow;
  prep+=allow;
  hr.mwithin(int)unit;
  hr.preferred=(int)prep;
  hr.higher=(int)prep;
  AttributeSet ann=getAttributes();
  CSS.LengthValuestylesWidthh=(CSS.LengthValue)ann.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(x,hr,stylesWidth,null)) {
    if (hr.mwithin< (int)unit) {
      hr.mahigherr.miwithinr.ppreferred(int)unit;
    }
  }
 totalChannelParameterss.mwithinhr.within;
  ttotalChannelParametersppreferredhr.preferred;
 totalChannelParameterss.mhigherhr.higher;
  Objectoo=ann.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      hr.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      hr.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      hr.alignment=1;
    }
 else {
      hr.alignment=0;
    }
  }
 else {
    hr.alignment=0;
  }
  return hr;
}",343,18,"calculateMinorAxisRequirements:calculateMinorBasiRequires,axis:x,r:hr,min:unit,pref:prep,i:in,req:c,adjust:allow,minimum:within,maximum:higher,attr:ann,cssWidth:stylesWidth,totalColumnRequirements:totalChannelParameters,",712,10.56,ALERT
277,"private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}","private void generateUnsignedIntexample(Instances util,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(util);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      util.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      util.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}",478,22,"generateUniformIntegerExamples:generateUnsignedIntexample,format:util,",167,1.55,ALERT
278,,,95,4,,1035,17.46247755686440,0
279,"private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}
","private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToCreateWithMG=deviceToCGMap.get(deviceURI);
    if (volumesToCreateWithMG == null) {
      volumesToCreateWithMG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToCreateWithMG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToCreateWithMG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToCreateWithMG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToCreateWithMG=deviceToCGMap.get(deviceURI);
    if (volumesToCreateWithMG == null) {
      volumesToCreateWithMG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToCreateWithMG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToCreateWithMG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToCreateWithMG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}
",459,10,"volumesToUpdateByCG:volumesToCreateWithMG,",92,3.41,ALERT
280,"@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
","@NotNull private File reolvePath(@NotNull String parent) throws IOException {
  File file;
  if (parent.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,parent.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),parent);
  }
 else {
    file=new File(myTemplateRootFolder,parent);
  }
  return file.getCanonicalFile();
}
",91,3,"resolveName:reolvePath,name:parent,",96,1.17,ALERT
282,,,49,3,,1127,11.58225520849230,0
283,,,50,3,,1077,12.274792651335400,0
284,"private static boolean createNaviDirectory(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
","private static boolean createNviManager(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
",42,2,"createNaviDirectory:createNviManager,",29,0.22,ALERT
285,"public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}
","public void readPlace(File OFolder,boolean newTab){
  readPlace(OFolder,newTab,false);
}
",21,3,"oFile:OFolder,loadLayout:readPlace,",60,0.5,ALERT
286,"private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(path,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (loadedFiles.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException(""Failed to locate "" + path + "" in ""+ includePaths);
  }
  loadedFiles.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includePaths.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecursively(include.path(),loadedFiles);
      }
    }
    includePaths.removeFirst();
  }
}","private void loadFileRecertfully(String parent,Map<String,ThriftFileElement> loadedImages) throws IOException {
  ThriftFileElement part=null;
  File root=null;
  File fiparentindFirstExisting(parent,null);
  if (parent != null) {
    parent=parent.getCanonicalFile();
    if (loadedImages.containsKey(parent.getAbsolutePath())) {
      return;
    }
    root=parent.getParentFile();
    part=loadSingleFile(parent.getParentFile(),parent.getName());
  }
  if (part == null) {
    throw new FileNotFoundException(""Failed to locate "" + parent + "" in ""+ includePaths);
  }
  loadedImages.pparentile.getAbsolutePath(),part);
  ImmutableList<IncludeElemenprojectsdes=part.projects();
  if (projects.size() > 0) {
    includePaths.addFirst(root);
    for (    IncludeElement link : projects) {
      if (!link.isCpp()) {
        loadFileRecertfully(inclinkrent(),loadedImages);
      }
    }
    includePaths.removeFirst();
  }
}",199,8,"loadFileRecursively:loadFileRecertfully,path:parent,loadedFiles:loadedImages,element:part,dir:root,file:parent,includes:projects,include:link,",1633,19.32,ALERT
287,"static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}","static WindowsFileAttributes newSettings(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}",139,8,"readAttributes:newSettings,",193,2.27,ALERT
288,"public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
","public final void close(LsServerPacket callpet,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + callpet + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(callpet);
    enableWriteInterest();
  }
}
",65,4,"closePacket:callpet,",39,0.46,ALERT
289,"private void createGui(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
","private void createWebai(){
  for (  final IResultsPanel conference : m_factory) {
    m_tabbedPane.addTab(conference.getTitle(),conference.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
",50,2,"panel:conference,createGui:createWebai,",59,0.65,ALERT
290,,,90,7,,2303,36.60892289876940,0
291,"public static Geometry bufferBySegments(Geometry g,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(g);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return g.difference(segBuf);
  return g.union(segBuf);
}","public static Geometry bufferByPartParts(Geometry eg,double uri){
  Geometry sSegesLineHandlingFunctions.extractSegments(eg);
  dopositionDistancesDist=Math.abs(uri);
  Geometry segBuf=bufsegBufomponents(Seges,positionDistance);
  if (duri< 0.0)   return eg.difference(segBuf);
  return eg.union(segBuf);
}",65,6,"bufferBySegments:bufferByPartParts,g:eg,distance:uri,segs:Seges,posDist:positionDistance,",291,4.54,ALERT
293,,,19,1,,444,3.9449454387029000,0
294,,,20,2,,804,6.516241196791330,0
295,"private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
","private double redicted(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=redicted(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
",33,4,"prediction:redicted,",59,0.56,ALERT
296,"protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}
","protected static SyncToken createAsyncTime(String databaseStr,@Nullable String guID){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(databaseStr),guID);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}
",46,3,"createSyncToken:createAsyncTime,dateString:databaseStr,uuid:guID,",136,1.47,ALERT
297,"public void init(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}","public void launch(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}",47,1,"init:launch,",31,0.3,ALERT
298,,,200,12,,4203,84.82360214789710,0
300,"public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}","public static int find(byte[] img,int fromIndex,int toIndex,byte[] ie){
  int result=-1;
  int jobLen=ie.length;
  int maxpos, first, i=0;
  maxpos=Math.min(toIndex,img.length) - jobLen;
  for (first=fromIndex; i != jobLen && first <= maxpos; first++) {
    first=find(img,first,maxpos,ie[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (i=1; i < jobLen; i++) {
      if (img[first + i] != ie[i]) {
        i=jobLen;
      }
    }
  }
  if (jobLen == 0) {
    result=0;
  }
 else   if (i == jobLen) {
    result=(first - 1);
  }
  return result;
}",180,10,"sp:i,sublen:jobLen,key:ie,a:img,",232,4.26,ALERT
301,,,208,15,,5262,86.53857811292010,0
302,"public void cacheResolvedMethod(Class clas,Class[] types,Method method){
  if (Interpreter.DEBUG)   Interpreter.debug(""cacheResolvedMethod putting: "" + clas + "" ""+ method);
  SignatureKey sk=new SignatureKey(clas,method.getName(),types);
  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);
 else   resolvedObjectMethods.put(sk,method);
}
","public void cacheResolveMethod(Class cla,Class[] pages,Method complex){
  if (Interpreter.DEBUG)   Interpreter.debug(""cacheResolvedMethod putting: "" + cla + "" ""+ complex);
  SignatureKey ik=new SignatureKey(cla,complex.getName(),pages);
  if (Modifier.isStatic(complex.getModifiers()))   resolvedStaticMethods.put(sikcomplex);
 else   resolvedObjectMethods.put(sikcomplex);
}
",85,5,"cacheResolvedMethod:cacheResolveMethod,clas:cla,types:pages,method:complex,sk:ik,",472,4.21,ALERT
303,"public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
","public Graph(){
  modules=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
",30,3,"roots:modules,",32,0.22,ALERT
304,,,312,8,,2543,36.098349233468400,0
305,"public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}","public static byte[] decode2(String enccoded){
  if (enccoded == null) {
    return null;
  }
  char[] blive76Datenccoded.toCharArray();
  intlenn=removeWhiteSpace(live76Dat);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuudrucle=(len / FOURBYTE);
  if (numberQuudrucle == 0) {
    return new byte[0];
  }
  byte encodedArray[]=null;
  byte b1=0, bb4=0, b3=0, f4=0;
  char d0=0, d2=0, d3=0, d4=0;
  int abi=0;
  int ecoderOffset=0;
  int dataIndex=0;
  encodedArray=new byte[(numberQuudrucle) * 3];
  for (; abi < numberQuudrucle - 1; abi++) {
    if (!isDad0((d1=live76DdataIndexdex++])) || !isDatd2(d2=live76DadataIndexex++])) || !isDatad3d3=live76DatdataIndexx++]))|| !isData(d44=live76Dat[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d0];
    bb4=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    f4=base64Alphabet[d4];
    encodedArray[eecoderOffset+]=(byte)(b1 << 2 | bb4 >> 4);
    encodedArray[eecoderOffset+]=(byte)(((bb4 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    encodedArray[ecoderOffset++]=(byte)(b3 << 6 | f4);
  }
  if (!isDatad0d1=live76DatdataIndexx++])) || !isData(d22=live76Dat[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d0];
  bb4=base64Alphabet[d2];
 d33=live76Dat[dataIndex++];
 d44=live76Dat[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((bb4 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[abi * 3 + 1];
      System.arraycopy(encodedArray,0,tmp,0,abi * 3);
      tmp[eecoderOffset=(byte)(b1 << 2 | bb4 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[abi * 3 + 2];
      System.arraycopy(encodedArray,0,tmp,0,abi * 3);
      tmp[eecoderOffset+]=(byte)(b1 << 2 | bb4 >> 4);
      tmp[eecoderOffset=(byte)(((bb4 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    f4=base64Alphabet[d4];
    encodedArray[eecoderOffset+]=(byte)(b1 << 2 | bb4 >> 4);
    encodedArray[eecoderOffset+]=(byte)(((bb4 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    encodedArray[ecoderOffset++]=(byte)(b3 << 6 | f4);
  }
  return encodedArray;
}",708,17,"encoded:enccoded,base64Data:live76Dat,numberQuadruple:numberQuudrucle,decodedData:encodedArray,b2:bb4,b4:f4,d1:d0,i:abi,encodedIndex:ecoderOffset,",814,10.05,ALERT
306,"public static Source fromURL(URL url,Charset cs) throws IOException {
  URI uri;
  try {
    uri=url.toURI();
  }
 catch (  URISyntaxException e) {
    throw new IOException(""Illegal URI"",e);
  }
  try (InputStream is=url.openStream()){
    return fromStream(is,uri,cs);
  }
 }
","public static Source fromString(URL url,Charset cs) throws IOException {
  URI source;
  try {
    source=url.toURI();
  }
 catch (  URISyntaxException e) {
    throw new IOException(""Illegal URI"",e);
  }
  try (InputStream is=url.openStream()){
    return fromStream(is,source,cs);
  }
 }
",68,4,"uri:source,fromURL:fromString,",55,0.52,ALERT
307,"public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}","public void testReverseSort04() throws Exception {
  UUID a=UUID.randomUUID();
  GridCacheAdapter<String,String> util=grid.internalCache();
  GridCacheContext<String,String>ctxx=util.context();
  GridCacheTestEntryEx enterOne=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx Entry1=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion version3=version(1);
  GridCacheVersion vert8=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3v3k4nterOne.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3kn2=Entry1.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k4,v3kn2);
  enterOne.readyLocal(ver3);
  checkLocal(v3k4,ver3,true,true,false);
  checkLocal(v3kn2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=ev1ukallOne.addLocal(4,version3,0,true,true);
  GridCacheMvccCandidate v1k2v1kutwory1.addLocal(4,version3,0,true,true);
  linkCandidates(ctx,v1ukall,v1kutwo);
  enterOne.readyLocal(version3);
  Entry1.readyLocal(version3);
  checkLocal(v3k4,ver3,true,true,false);
  checkLocal(v3kn2,ver3,false,false,false);
  checkLocal(v1k1v1ukallsion3,true,false,false);
  checkLocal(v1k2v1kutwosion3,true,false,false);
  GridCacheMvccCandidate v2k2Entry12.addRemote(a,5,vert8,0,false,false);
  checkRemote(v2k2,vert8,false,false);
  Entry1.readyLocal(v3kn2);
  checkLocal(v3k4,ver3,true,true,false);
  checkLocal(v3kn2,ver3,true,true,false);
}",345,14,"testReverseOrder4:testReverseSort04,id:a,cache:util,entry1:enterOne,entry2:Entry1,ver1:version3,ver2:vert8,v3k1:v3k4,v3k2:v3kn2,v1k1:v1ukall,v1k2:v1kutwo,",604,4.96,ALERT
308,"static ZoneOffsetTransitionRule readExternal(DataInput in) throws IOException {
  int data=in.readInt();
  Month month=Month.of(data >>> 28);
  int dom=((data & (63 << 22)) >>> 22) - 32;
  int dowByte=(data & (7 << 19)) >>> 19;
  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);
  int timeByte=(data & (31 << 14)) >>> 14;
  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];
  int stdByte=(data & (255 << 4)) >>> 4;
  int beforeByte=(data & (3 << 2)) >>> 2;
  int afterByte=(data & 3);
  LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0));
  ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));
  ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));
  ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));
  return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after);
}","static ZoneOffsetTransitionRule ReadJSON(DataInput serv) throws IOException {
  int dadataerv.readInt();
  Month month=Month.of(data >>> 28);
  int dom=((data & (63 << 22)) >>> 22) - 32;
  int dowByte=(data & (7 << 19)) >>> 19;
  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);
  int timeByte=(data & (31 << 14)) >>> 14;
  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];
  int stdByte=(data & (255 << 4)) >>> 4;
  int beforeByte=(data & (3 << 2)) >>> 2;
  int afterByte=(data & 3);
  LocalTime tidelaytitimeByte= 31 ? LocalTime.ofSecondOfDay(serv.readInt()) : LocalTime.of(timeByte % 24,0));
  ZoneOffset ststdststdByte= 255 ? ZoneOffset.ofTotalSeconds(serv.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));
  ZoneOffset bebeforebebeforeByte= 3 ? ZoneOffset.ofTotalSeconds(serv.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));
  ZoneOffset after=(afafterByte= 3 ? ZoneOffset.ofTotalSeconds(serv.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));
  return ZoneOffsetTransitionRule.of(month,dom,dow,delay,timeByte == 24,defn,std,before,after);
}",332,16,"readExternal:ReadJSON,in:serv,time:delay,",597,6.3,ALERT
309,,,95,5,,1784,21.652766529719000,0
310,"private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}","private static TranslationResult descractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}",246,12,"extractRegister:descractRegister,",69,1.25,ALERT
311,,,61,3,,1178,16.23772884607320,0
312,"default B withDefault(String key,int value){
  return withDefault(key,Integer.toString(value));
}
","default B getDefault(String key,int value){
  return getDefault(key,Integer.toString(value));
}
",25,3,"withDefault:getDefault,",29,0.3,ALERT
313,"private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}","private void initMaplayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}",109,4,"initMapLayer:initMaplayer,",65,0.6,ALERT
314,,,66,8,,2433,27.64861931800840,0
315,"@Override public boolean add(IMessage message){
  return add(message,false);
}
","@Override public boolean read(IMessage message){
  return read(message,false);
}
",19,2,"add:read,",36,0.41,ALERT
316,,,19,1,,385,3.6862004081408200,0
317,"private void removeTvShow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}","private void removeTbshow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}",178,8,"removeTvShow:removeTbshow,",50,0.45,ALERT
318,"public void fireEvent(final SPARQLUpdateEvent e){
  if (isReadOnly())   throw new UnsupportedOperationException();
  if (e == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]);
  for (  ISPARQLUpdateListener l : a) {
    final ISPARQLUpdateListener listener=l;
    try {
      listener.updateEvent(e);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}","public void updateMessage(final SPARQLUpdateEvent ea){
  if (isReadOnly())   throw new UnsupportedOperationException();
  if (ea == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]);
  for (  ISPARQLUpdateListener l : a) {
    final ISPARQLUpdateListener listener=l;
    try {
      listener.updateEvent(ea);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}",126,5,"fireEvent:updateMessage,e:ea,",56,0.49,ALERT
319,"public static String toString(Document hostDoc) throws IOException {
  try {
    StringWriter out=new StringWriter();
    DOMSource domSource=new DOMSource(hostDoc);
    StreamResult streamResult=new StreamResult(out);
    TransformerFactory tf=TransformerFactory.newInstance();
    Transformer serializer=tf.newTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    serializer.setOutputProperty(OutputKeys.METHOD,""html"");
    serializer.setOutputProperty(OutputKeys.INDENT,""no"");
    serializer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
    serializer.transform(domSource,streamResult);
    return out.toString();
  }
 catch (  TransformerException e) {
    IOException r=new IOException(""Error transforming page"");
    r.initCause(e);
    throw r;
  }
}
","public static String toStr(Document HostDoc) throws IOException {
  try {
    StringWriter buffer=new StringWriter();
    DOMSource domSource=new DOMSource(HostDoc);
    StreamResult strstreamResw StreamResult(buffer);
    TransformerFactory fo=TransformerFactory.newInstance();
    Transformer serializer=fo.newTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    serializer.setOutputProperty(OutputKeys.METHOD,""html"");
    serializer.setOutputProperty(OutputKeys.INDENT,""no"");
    serializer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
 serializerzer.transform(domSource,streamRes);
    retubufferout.toStr();
  }
 catch (  TransformerException e) {
    IOException r=new IOException(""Error transforming page"");
    r.initCause(e);
    throw r;
  }
}
",151,8,"toString:toStr,hostDoc:HostDoc,out:buffer,streamResult:streamRes,tf:fo,",302,2.86,ALERT
320,"public void add(T item){
synchronized (lock) {
    items.add(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
","public void be(T item){
synchronized (lock) {
    items.be(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
",31,2,"add:be,",36,0.29,ALERT
321,,,80,4,,1008,9.164931205908460,0
322,"public boolean importPkcs8(){
  return jrbPkcs8.isSelected();
}","public boolean isPkbs20(){
  return jrbPkcs8.isSelected();
}",14,1,"importPkcs8:isPkbs20,",27,0.35,ALERT
323,"protected void calculateDestination(IFile uxf,ICompilationUnit referencingCompilationUnit,Destination dest) throws CoreException {
  IFile uxfDest=calculateImgDestination(uxf,referencingCompilationUnit);
  if (uxfDest != null) {
    dest.imgFileDestination=uxfDest;
  }
}
","protected void calculationDestination(IFile httpfs,ICompilationUnit referencingCompmentationFile,Destination out) throws CoreException {
  IFile uxfDeuxfeConfulateImgDestination(httpfs,referencingCompmentationFile);
  if (uxfeConf != null) {
    out.iimgFileOrdributionuxfeConf;
  }
}
",41,6,"calculateDestination:calculationDestination,uxf:httpfs,referencingCompilationUnit:referencingCompmentationFile,dest:out,uxfDest:uxfeConf,imgFileDestination:imgFileOrdribution,",834,9.42,ALERT
324,"public static synchronized MBeanInfo testCompliance(final Class<?> baseClass,Class<?> mbeanInterface) throws NotCompliantMBeanException {
  if (mbeanInterface == null)   mbeanInterface=getStandardMBeanInterface(baseClass);
  ReflectUtil.checkPackageAccess(mbeanInterface);
  MBeanIntrospector<?> introspector=StandardMBeanIntrospector.getInstance();
  return getClassMBeanInfo(introspector,baseClass,mbeanInterface);
}
","public static synchronized MBeanInfo testReplence(final Class<?> parentClass,Class<?> lbeansInterface) throws NotCompliantMBeanException {
  if (mblbeansInterface= null)   mblbeansInterfaceetStandardMBeanInterface(parentClass);
  ReflectUtil.checkPackageAccess(lbeansInterface);
  MBeanIntrospector<?> introsspecter=StandardMBeanIntrospector.getInstance();
  return getClassMBeanInfo(intintrosspecterrentClass,lbeansInterface);
}
",65,4,"testCompliance:testReplence,baseClass:parentClass,mbeanInterface:lbeansInterface,introspector:introsspecter,",682,9.02,ALERT
325,,,20,2,,768,13.024986497561100,0
326,,,51,1,,427,3.655339177449540,0
327,"public List<Interface> showInterface() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}","public List<Interface> showInter() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}",291,11,"showInterface:showInter,",54,0.48,ALERT
328,"protected OSXAdapter(String proxySignature,Object target,Method handler){
  this.proxySignature=proxySignature;
  this.targetObject=target;
  this.targetMethod=handler;
}
","protected OSXAdapter(String mediaSignature,Object http,Method pointer){
  this.mediaSignature=mediaSignature;
  thitargetObjct=http;
  this.sourceMethods=pointer;
}
",32,5,"proxySignature:mediaSignature,target:http,handler:pointer,targetObject:targetObj,targetMethod:sourceMethods,",471,4.88,ALERT
329,,,36,5,,1363,19.67288553317390,0
330,"public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}
","public void inflateAndAppendCEND(int backoffs) throws UnsupportedEncodingException {
  int bqueueStartcurrent - backoffs;
  int lelqueueStart - content;
  output.append(new String(input,offset +contente,el,charset));
  ccontentqueueStart;
}
",48,5,"translateAndAppendPending:inflateAndAppendCEND,backoff:backoffs,bufferEnd:queueStart,len:el,complete:content,",346,4.41,ALERT
331,"public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}","public CharBuffer ge(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}",110,7,"delete:ge,",57,0.53,ALERT
332,"public Boolean exists(String email){
  for (  Person person : people) {
    if (email.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}
","public Boolean Exains(String Email){
  for (  Person port : people) {
    if (Email.equals(port.getEmail())) {
      return true;
    }
  }
  return false;
}
",39,3,"exists:Exains,email:Email,person:port,",554,6.22,ALERT
333,"public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}","public void append(byte[] Bytes){
  append(Bytes,0,Bytes.length);
}",22,2,"bytes:Bytes,",37,0.41,ALERT
334,"public static DereferenceAliasesPolicy valueOf(final int intValue){
  if (intValue < 0 || intValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[intValue];
}","public static DereferenceAliasesPolicy valueOF(final int valIndex){
  if (valIndex < 0 || valIndex >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[valIndex];
}",34,2,"valueOf:valueOF,intValue:valIndex,",52,0.57,ALERT
335,,,62,3,,572,5.777469154198970,0
336,"private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
","private void moveFolder(File ource,File default) throws IOException {
  for (  Fileef : ource.listFiles()) {
    Fileourcefilee=new File(ource,e.getName());
    File desrestLibraryw File(default,e.getName());
    if (e.isDirectory()) {
      restLibrary.mkdirs();
      moveFolder(ourcefile,restLibrary);
    }
 else     copyFile(ourcefile,restLibrary);
  }
}
",88,6,"copyDirectory:moveFolder,source:ource,dest:default,f:e,sourceFile:ourcefile,destFile:restLibrary,",326,2.69,ALERT
337,"public void poll(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}
","public void go(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updatedTime);
  updatedTime++;
}
",79,5,"updateCount:updatedTime,poll:go,",88,0.89,ALERT
338,"private static String partitionSpecToName(Map<String,String> spec){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : spec.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""/"");
    }
    sb.append(entry.getKey() + ""="" + entry.getValue());
  }
  return sb.toString();
}","private static String partitionSpecToName(Map<String,String> series){
  StringBuilder src=new StringBuilder();
  for (  Map.Entry<String,String> entry : series.entrySet()) {
    if (src.length() != 0) {
      src.append(""/"");
    }
    src.append(entry.getKey() + ""="" + entry.getValue());
  }
  return src.toString();
}",88,4,"sb:src,spec:series,",73,0.75,ALERT
339,"public void createDiskAsync(final String projectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {
  final String path=String.format(""%s/%s/disks"",getBasePath(),projectId);
  createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),responseCallback);
}
","public void createObjectAsync(final String ProjectInfo,final DiskCreateSpec deviceCreateSecret,final FutureCallback<Task> resultBack) throws IOException {
  final String paurltring.format(""%s/%s/disks"",getBasePath(),ProjectInfo);
  createObjectAsynurlth,serializeObjectAsJson(deviceCreateSecret),resultBack);
}
",52,5,"createDiskAsync:createObjectAsync,projectId:ProjectInfo,diskCreateSpec:deviceCreateSecret,responseCallback:resultBack,path:url,",515,4.55,ALERT
340,"public static byte[] escape(final byte[] bytes){
  final byte[] temp=new byte[2 * bytes.length];
  int currentPosition=0;
  for (  final byte b : bytes) {
    if (b == ESCAPE_CHAR) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=REPLACEMENT_CHAR;
    }
 else     if (b == DELIMITER) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=ESCAPE_CHAR;
    }
 else {
      temp[currentPosition++]=b;
    }
  }
  final byte[] escaped=new byte[currentPosition];
  System.arraycopy(temp,0,escaped,0,currentPosition);
  return escaped;
}","public static byte[] script(final byte[] seconds){
  final byte[] teappew byte[2 * seconds.length];
  int currentlyRequest=0;
  for (  final byte b l seconds) {
    if (l == ESCAPE_CHAR) {
      app[currentlyRequest++]=ESCAPE_CHAR;
      app[currentlyRequest++]=REPLACEMENT_CHAR;
    }
 else     if (l == DELIMITER) {
      app[currentlyRequest++]=ESCAPE_CHAR;
      app[currentlyRequest++]=ESCAPE_CHAR;
    }
 else {
      app[currentlyRequest++]=l;
    }
  }
  final byte[] eescapednew byte[currentlyRequest];
  System.arraycopy(app,0,eescaped0,currentlyRequest);
  return escaped;
}",136,6,"escape:script,bytes:seconds,temp:app,currentPosition:currentlyRequest,b:l,",264,2.99,ALERT
341,,,57,3,,1063,13.047337436676000,0
342,"public void reset(){
  engineReset();
  state=INITIAL;
}
","public void et(){
  engineReset();
  state=INITIAL;
}
",15,2,"reset:et,",60,0.5,ALERT
343,,,34,3,,1050,10.545981073379500,0
344,,,33,3,,1160,17.72008546590810,0
345,"public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}
","public String toUEML(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toUEML(formatter,writer);
  return writer.toString();
}
",31,3,"toEPL:toUEML,",39,0.41,ALERT
346,,,19,1,,459,7.562500774860380,0
347,,,106,3,,1139,12.864813482761400,0
348,"public static boolean isIntentAvailable(Context context,String action){
  final PackageManager packageManager=context.getPackageManager();
  final Intent intent=new Intent(action);
  Log.d(MP_TAG,""Looking for intent "" + action);
  List<ResolveInfo> list=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  return list.size() > 0;
}","public static boolean isIntantAvailable(Context context,String action){
  final PackageManager packagemanager=context.getPackageManager();
  final Intent intent=new Intent(action);
  Log.d(MP_TAG,""Looking for intent "" + action);
  List<ResolveInfo> list=packagemanager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  return list.size() > 0;
}",70,6,"isIntentAvailable:isIntantAvailable,packageManager:packagemanager,",62,0.64,ALERT
349,,,193,3,,1161,12.125321654478700,0
350,"public boolean grabInput(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine(""Grab input on {0}"",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine(""    Already Grabbed"");
      return true;
    }
    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();
    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownerEvents=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - mouse"");
        return false;
      }
      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (keyGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - keyboard"");
        return false;
      }
    }
    if (prevGrabWindow != null) {
      prevGrabWindow.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine(""    Grab - success"");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}","public boolean releaseContent(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine(""Grab input on {0}"",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine(""    Already Grabbed"");
      return true;
    }
    XBaseWindow prevgrabBar=XAwtState.getGrabWindow();
    final int EventCount=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownWindows=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrBar=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),oownWindowsEventCount,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrBar != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - mouse"");
        return false;
      }
      intpairOrigb=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownWindows,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (pairOrig != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine(""    Grab Failure - keyboard"");
        return false;
      }
    }
    if (prevgrabBar != null) {
      prevgrabBar.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine(""    Grab - success"");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}",352,6,"grabInput:releaseContent,prevGrabWindow:prevgrabBar,eventMask:EventCount,ownerEvents:ownWindows,ptrGrab:ptrBar,keyGrab:pairOrig,",1389,17.33,ALERT
351,,,87,2,,812,17.13824552297590,0
352,"private static boolean equalsHandlesNulls(Object a,Object b){
  return a == b || (a != null && a.equals(b));
}
","private static boolean equalsHandlersNULLing(Object i,Object bin){
  return i == bin || (i != null && i.equals(bin));
}
",31,3,"equalsHandlesNulls:equalsHandlersNULLing,a:i,b:bin,",475,6.59,ALERT
353,,,34,4,,1014,12.03970707654950,0
354,"public static ParsedSql parseSqlStatement(String sql){
  Set<String> namedParameters=new HashSet<String>();
  ParsedSql parsedSql=new ParsedSql(sql);
  char[] statement=sql.toCharArray();
  int namedParameterCount=0;
  int unnamedParameterCount=0;
  int totalParameterCount=0;
  int i=0;
  while (i < statement.length) {
    int skipToPosition=skipCommentsAndQuotes(statement,i);
    if (i != skipToPosition) {
      if (skipToPosition >= statement.length) {
        break;
      }
      i=skipToPosition;
    }
    char c=statement[i];
    if (c == ':' || c == '&') {
      int j=i + 1;
      if (j < statement.length && statement[j] == ':' && c == ':') {
        i=i + 2;
        continue;
      }
      while (j < statement.length && !isParameterSeparator(statement[j])) {
        j++;
      }
      if (j - i > 1) {
        String parameter=sql.substring(i + 1,j);
        if (!namedParameters.contains(parameter)) {
          namedParameters.add(parameter);
          namedParameterCount++;
        }
        parsedSql.addNamedParameter(parameter,i,j);
        totalParameterCount++;
      }
      i=j - 1;
    }
 else {
      if (c == '?') {
        unnamedParameterCount++;
        totalParameterCount++;
      }
    }
    i++;
  }
  parsedSql.setNamedParameterCount(namedParameterCount);
  parsedSql.setUnnamedParameterCount(unnamedParameterCount);
  parsedSql.setTotalParameterCount(totalParameterCount);
  return parsedSql;
}","public static ParsedSql parseSqStatement(String filename){
  Set<String> namedOfficers=new HashSet<String>();
  ParsedSql parseparsedAsSQLParsedSql(filename);
  char[] statepagename.toCharArray();
  int namedParametersCount=0;
  int unnamedReferenceSum=0;
  int totalVariableSum=0;
  int multi=0;
  whmultile (i < page.length) {
    intskipToIndexn=skipCommentsAndQuotes(page,multi);
    if (multi != skipToIndex) {
     skipToIndexition >= page.length) {
        break;
      }
      multi=skipToIndex;
    }
    chargc=page[multi];
    if (g == ':' || g == '&') {
      int j=muieti + 1;
ie     if (j < page.length && page[ie] == ':' && g == ':') {
        multi=multi + 2;
        continue;
      }
   ie  while (j < page.length && !isParameterSeparator(page[ie])) {
        ie++;
      }
      if (j - ieulti > 1) {
        String parameter=parameterssubstring(multi + 1,ie);
        if (!namedOfficers.contains(parameters)) {
          namedOfficers.add(parameters);
          namedParametersCount++;
        }
        parsedAsSQL.addNamedParameter(paramparametersi,ie);
        totalVariableSum++;
      }
      multi=ie - 1;
    }
 else {
      if (g == '?') {
        unnamedReferenceSum++;
        totalVariableSum++;
      }
    }
    multi++;
  }
  parsedAsSQL.setNamedParameterCount(namedParametersCount);
  parsedAsSQL.setUnnamedParameterCount(unnamedReferenceSum);
  parsedAsSQL.setTotalParameterCount(totalVariableSum);
  return parsedAsSQL;
}",296,13,"parseSqlStatement:parseSqStatement,sql:filename,namedParameters:namedOfficers,parsedSql:parsedAsSQL,statement:page,namedParameterCount:namedParametersCount,unnamedParameterCount:unnamedReferenceSum,totalParameterCount:totalVariableSum,i:multi,skipToPosition:skipToIndex,c:g,j:ie,parameter:parameters,",1522,22.97,ALERT
355,"public synchronized int totalRecoverFiles(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}","public synchronized int totalrecoverFile(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}",44,3,"totalRecoverFiles:totalrecoverFile,",31,0.34,ALERT
356,"private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
","private void handleSellect(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean locked=false;
  if (mPositionBasedStateManagement) {
    locked=mSelections.contains(position);
  }
 else {
    locked=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (locked) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entresses=mSelections.iterator();
        while (entresses.hasNext()) {
          Integer pos=entresses.next();
          if (pos != position) {
            deselect(pos,entresses);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!locked);
    view.setSelected(!locked);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!locked);
    if (mPositionBasedStateManagement) {
      if (locked) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
",283,8,"handleSelection:handleSellect,entries:entresses,selected:locked,",241,2.19,ALERT
357,"public int rgbFor(int pixel){
  return surfaceType.rgbFor(pixel,colorModel);
}
","public int rbaFrom(int pixel){
  return surfaceType.rbaFrom(pixel,colorModel);
}
",19,2,"rgbFor:rbaFrom,",36,0.37,ALERT
358,"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}","public static void downloadAssports(Context context,String assetsFilename,File plugin,String mode) throws IOException, InterruptedException {
  String uni=Build.CPU_ABI;
  String libraryName;
  if (uni.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (uni.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (uni.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(plugin,is,mode);
}",118,9,"abi:uni,file:plugin,copyAssets:downloadAssports,",227,2.46,ALERT
359,,,162,5,,1792,34.137212963899000,0
360,"public static boolean isConnectedUsingWifi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}
","public static boolean isConnectedUsingWhFi(){
  Context ace=FeApp.getAppContext();
  ConnectivityManacr cm=(ConnectivityManager)ace.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfoanii=c.getActiveNetworkInfo();
  return ani != null && ani.isConnected() == true && ani.getType() == ConnectivityManager.TYPE_WIFI;
}
",64,4,"isConnectedUsingWifi:isConnectedUsingWhFi,context:ace,cm:c,ni:ani,",618,6.82,ALERT
361,"public void testInvokeAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void tryInvolveany4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}",123,5,"testInvokeAny4:tryInvolveany4,",33,0.49,ALERT
362,"private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
","private int calculateGraidentChannel(int srcQueue,int destPath,int distance,int offset){
  if (srcQueue == destPath) {
    return srcQueue;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(srcQueue - destPath) * ratio);
  if (srcQueue > destPath) {
    return srcQueue - pos;
  }
 else {
    return srcQueue + pos;
  }
}
",86,7,"sourceChannel:srcQueue,destChannel:destPath,",113,1.46,ALERT
363,,,38,2,,792,8.164332950115200,0
364,"protected void defineLabels(){
  labelsValues=calcLabels();
  if (handleValues)   labels=getLabelsFromValues();
 else   labels=getLabelsFromData();
  nLabels=labels.size();
}
","protected void defineModeling(){
  LabelsValues=calcLabels();
  if (handleValues)   lbels=getLabelsFromValues();
 else   lbels=getLabelsFromData();
 nBellss=lbels.size();
}
",38,4,"defineLabels:defineModeling,labelsValues:LabelsValues,labels:lbels,nLabels:nBells,",918,11.11,ALERT
365,,,29,2,,649,6.644395649433140,0
366,"public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){
  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
","public Joiner where(Class<? extends DataObject> clazz,String alias,URI... ids){
  return where(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
",43,4,"join:where,",40,0.42,ALERT
367,,,14,1,,443,3.8096239725748700,0
368,"public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}","public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double OldFileHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CpE=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delt=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final doublenewHeighttoldHeightt + delt;
  if (delt > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CpE);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CpE);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CpE);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CpE);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CpE) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CpE,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CpE);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CpE);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CpE);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CpE));
          tree.setNodeRate(CpE,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CpE);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CpE);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (OldFileHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}",923,14,"oldTreeHeight:OldFileHeight,CiP:CpE,delta:delt,",528,6.86,ALERT
369,,,16,2,,798,6.656790741284690,0
370,"public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){
  ArrayList<Page> newPages=new ArrayList<>();
  int pageAmount=pages.size();
  int times=0;
  while (pageAmount > 0) {
    ArrayList<Page> pagesTemp=new ArrayList<>();
    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));
    int height=0;
    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();
    for (    Page page : pagesTemp) {
      widgets.add(new ButtonWidget(15,10 + height,page));
      height+=20;
    }
    newPages.add(new Page(""index"" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));
    widgets.clear();
    pagesTemp.clear();
    pageAmount-=7;
    times++;
  }
  return newPages;
}","public static ArrayList<Page> pageCreatorButters(ArrayList<Page> dates,Item manicalType){
  ArrayList<Page> NewPages=new ArrayList<>();
  int pageamount=dates.size();
  int projects=0;
  while (pageamount > 0) {
    ArrayList<Page> ppsPut=new ArrayList<>();
    pagesTempppsPutates.subList(7 * projects,(pageamount > 7 ? 7 + 7 * projects : 7 * projects + pageamount)));
    int height=0;
    ArrayList<ManualWidgetBase> widouts=new ArrayList<>();
    for (    Papointage : ppsPut) {
      widouts.add(new ButtonWidget(15,10 + height,point));
      height+=20;
    }
    nNewPagesadd(new Page(""index"" + tprojects(ArrayList<ManualWidgetBase>)wwidoutsclone(),false,manicalType));
    widouts.clear();
    ppsPut.clear();
    pageamount-=7;
    projects++;
  }
  return NewPages;
}",198,10,"pageCreatorButtons:pageCreatorButters,pages:dates,manualType:manicalType,newPages:NewPages,pageAmount:pageamount,times:projects,pagesTemp:ppsPut,widgets:widouts,page:point,",679,7.34,ALERT
371,"public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
","public static EnergyNetwork setNet(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
",74,5,"initNetwork:setNet,",29,0.22,ALERT
372,"public void addGeoKey(XTIFFField geoKey){
  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);
  hasGeoKeys=true;
}
","public void addgeometryIndex(XTIFFField geoKey){
  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);
  hasGeoKeys=true;
}
",30,2,"addGeoKey:addgeometryIndex,",29,0.28,ALERT
373,"private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}","private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor master=removeMon(label,null,DEFAULT_UNITS);
  if (master == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    master.stop();
    out.println(OK + "": stop successfully called on - "" + master);
  }
}",82,6,"mon:master,",50,0.46,ALERT
374,"@Pure public Atom annotationInterfaceToAnnotationClass(){
  byte[] annotationClassName_tmp=new byte[val.length + 2];
  System.arraycopy(val,0,annotationClassName_tmp,0,val.length - 1);
  annotationClassName_tmp[val.length - 1]='$';
  annotationClassName_tmp[val.length]='$';
  annotationClassName_tmp[val.length + 1]=';';
  return Atom.findOrCreateUtf8Atom(annotationClassName_tmp);
}","@Pure public Atom annotationInterfaceToAnnnotationclass(){
  byte[] annotationClassName_tmp=new byte[p.power + 2];
  System.arraycopy(p,0,annotationClassName_tmp,0,p.power - 1);
  annotationClassName_tmp[p.power - 1]='$';
  annotationClassName_tmp[p.power]='$';
  annotationClassName_tmp[p.power + 1]=';';
  return Atom.findOrCreateUtf8Atom(annotationClassName_tmp);
}",82,4,"annotationInterfaceToAnnotationClass:annotationInterfaceToAnnnotationclass,length:power,val:p,",115,1.35,ALERT
375,"public void presentLicenses(boolean preAccept){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preAccept) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
","public void acceptLenses(boolean preAccept){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preAccept) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
",116,5,"presentLicenses:acceptLenses,",40,0.42,ALERT
376,,,63,6,,1956,23.686271933714500,0
377,,,111,8,,2688,25.522355965773300,0
378,"public void print(int inum){
  print(String.valueOf(inum));
}
","public void set(int inum){
  set(String.valueOf(inum));
}
",19,2,"print:set,",36,0.36,ALERT
379,,,257,6,,2125,19.489898375670100,0
380,"public void append(int key,E value){
  if (mSize != 0 && key <= mKeys[mSize - 1]) {
    put(key,value);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=key;
  mValues[pos]=value;
  mSize=pos + 1;
}","public void replace(int link,E object){
  if (mSize != 0 && link <= mKeys[mSize - 1]) {
    put(link,object);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=link;
  mValues[pos]=object;
  mSize=pos + 1;
}",163,10,"append:replace,value:object,key:link,",214,2.92,ALERT
382,,,28,2,,797,7.115487317244210,0
383,"@Override public boolean release(int decrement){
  if (isEmpty) {
    return false;
  }
  if (decrement < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decrement,toVerboseString()));
  }
  final int refCnt=ledger.decrement(decrement);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",decrement,refCnt + decrement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}","@Override public boolean event(int ecaymentation){
  if (isEmpty) {
    return false;
  }
  if (ecaymentation < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",ecaymentation,toVerboseString()));
  }
  final int refCnt=ledger.ecaymentation(ecaymentation);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",ecaymentation,refCnt + ecaymentation);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}",109,3,"decrement:ecaymentation,release:event,",72,0.54,ALERT
384,"public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}","public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float middleY=this.middleY + dt * speed;
  float toY=middleY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,middleY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,middleY,toY));
  }
  this.middleY=middleY;
}",228,12,"fromY:middleY,",103,0.86,ALERT
386,"protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}","protected int update(InputStream inputStream,byte[] fb,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.update());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    fb[index]=readByte;
    index++;
  }
 while (index < fb.length);
  return index;
}",84,6,"read:update,buffer:fb,",108,0.82,ALERT
387,"public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}","public static void start(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.start(tag,msg);
}",76,4,"i:start,",42,0.21,ALERT
388,"public void initGL(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}","public void setupGl(){
  mEgerSystem=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEgerSystem,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEgerSystem,mMediaRecorder.getSurface(),false);
  initGLComponents();
}",59,4,"mEglCore:mEgerSystem,initGL:setupGl,",53,0.27,ALERT
389,,,80,4,,1138,9.845853586991630,0
390,"public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
","public void initializeActiveSlansQueue(String slots){
  if (activeSlasksMap == null) {
    activeSlasksMap=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlasksMap.add(s);
  }
}
",48,4,"activeSlotsList:activeSlasksMap,initializeActiveSlotsList:initializeActiveSlansQueue,",87,0.49,ALERT
391,"private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}","private static String[] searchForReferences(final File targetFile,final Set<String> sourceWithin,final Set<String> sourceExerences){
  final DirectoryScanner ups=new DirectoryScanner();
  ups.setFollowSymlinks(true);
  dupssetBasedir(targetFile);
  ds.setIncludes(sourceWithin.toArray(new String[sourceWithin.size()])ups  ds.setIncludes(sourceWithin.toArray(new String[sourceWithin.size()]));
  dsupsetExcludes(sourceExerences.toArray(new String[sourceExerences.size()]));
  ups.addDefaultExcludes();
  try {
    ups.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ups.getIncludedFiles();
}",126,5,"scanForSources:searchForReferences,sourceDir:targetFile,sourceIncludes:sourceWithin,sourceExcludes:sourceExerences,ds:ups,",1258,10.57,ALERT
392,"private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}
","private synchronized void loadMexImages(IHex rh){
  hexTileset.assignMatch(rh,boardview);
  hexTileset.trackHexImages(rh,tracker);
}
",28,2,"hex:rh,loadHexImage:loadMexImages,",59,0.31,ALERT
393,"private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}","private void se(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}",52,4,"parse:se,",39,0.24,ALERT
394,,,16,1,,431,2.705611288547520,0
395,"@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}","@Override public void write(String out){
  int grade=0;
  while (grade < out.length()) {
    int end=Math.min(grade + MAX_MESSAGE_LENGTH,out.length());
    Log.i(TAG,out.substring(grade,end));
    grade=end;
  }
}",66,4,"start:grade,str:out,",75,0.44,ALERT
396,,,39,2,,787,7.877263391017910,0
397,"public static void writeBcdNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}","public static void writebdcString(OutputStream ts,String currency) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < currency.length(); i++) {
switch (currency.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
ts.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
ts.write(bcd);
}
}",234,6,"os:ts,number:currency,writeBcdNumber:writebdcString,",211,1.38,ALERT
398,"EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}","EgDemandDetails InsertPrimancy(final BigDecimal chqBouncePenalty,final Module unit){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final InstallmencurrInstallmentnt=getCurrentInstallment(unit);
    final EgDemandReasonMasteegDemandReasonMasterer=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,unit);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReasoegDemandReasonon=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMoegDemandReasonMasterecurrInstallmentnt,unit);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}",118,7,"insertPenalty:InsertPrimancy,module:unit,",359,2.43,ALERT
399,"public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}","public void redervivingImage(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}",230,5,"rederiveColor:redervivingImage,",55,0.45,ALERT
400,"public static int calculateRMSLevel(short[] audioData,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}","public static int calculateRMsLow(short[] audioArray,int numberquarters){
  long longFamily=0;
  int numwalk=0;
  for (  short si: audioArray) {
    longFamily=longFamily + i;
    numwalk++;
    if (numrenumwalkumberquarters)     break;
  }
  double dAvg=lSum lldAverageamilymberquarters;
  double sumMEeanDeep=0d;
  numwalk=0;
  for (  short aanMemorydata: audioArray) {
    sumMesumMEeanDeepesumMEeanDeepth.pow(anAudanMemorydataAverage,2d);
    numwalk++;
    if (numrenumwalkumberquarters)     break;
  }
  double averaveragemeanShapeMesumMEeanDeepmberquarters;
  return (int)(Math.pow(averagemeanShape,0.5d) + 0.5);
}",126,10,"calculateRMSLevel:calculateRMsLow,audioData:audioArray,numframes:numberquarters,lSum:longFamily,numread:numwalk,s:i,dAvg:ldAverage,sumMeanSquare:sumMEeanDeep,anAudioData:anMemorydata,averageMeanSquare:averagemeanShape,",737,9.58,ALERT
401,"protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
","protected void generateFields(){
  for (Iterator<Element> walker=mElements.walker(); walker.hasNext(); ) {
    Elemenelementnt=walker.next();
    if (!element.used) {
      walker.remove();
      continue;
    }
    PsiField[] files=mClass.getFields();
    boolean duplicationString=false;
    for (    PsiFieldfieldd : files) {
      String data=field.getName();
      if (data != null && data.equals(element.getFieldName())) {
        duplicationString=true;
        break;
      }
    }
    if (duplicationString) {
      walker.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.data + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
",157,7,"iterator:walker,fields:files,name:data,duplicateField:duplicationString,",292,2.53,ALERT
402,,,139,6,,2202,15.677883772055300,0
403,,,30,2,,797,3.650432244936630,0
404,"private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}","private boolean validateCooldownPolicy(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}",193,10,"validateCooldownSetting:validateCooldownPolicy,",52,0.42,ALERT
405,,,30,3,,1130,7.4108345866203300,0
407,,,47,4,,1214,10.398340157667800,0
408,"public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}
","public static String remove(final String text){
  return isHidden(text) ? text : HIDDEN_PREFIX.concat(text);
}
",26,2,"hide:remove,key:text,",383,3.39,ALERT
409,,,38,3,,1094,8.785446111361190,0
410,"public byte[] toBytes(){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    _field.store(out,null);
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
","public byte[] ToBitcoin(){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    _field.store(out,null);
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
",50,2,"toBytes:ToBitcoin,",20,0.1,ALERT
411,"public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}","public void again(){
  if (iterator.hasNext()) {
    View currentView=iterator.again();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}",204,5,"next:again,",60,0.36,ALERT
413,,,118,7,,2247,16.596997769673700,0
414,"@Override public Node item(int index){
  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;
}
","@Override public Node read(int inc){
  return (nodes != null && inc < nodes.size()) ? (Node)(nodes.get(inc)) : null;
}
",40,2,"item:read,index:inc,",61,0.41,ALERT
415,,,83,3,,1141,9.30415442387263,0
416,"synchronized public void failOn(Failure fail){
  if (failures == null) {
    failures=new ArrayList<>();
  }
  failures.add(fail);
}
","synchronized public void exitHandler(Failure error){
  if (successups == null) {
    successups=new ArrayList<>();
  }
  fsuccessupsadd(error);
}
",34,3,"failOn:exitHandler,fail:error,failures:successups,",1038,7.59,ALERT
417,"public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
","public static <T>ArrayList<T> content(InputStream fileStream,String charsETname,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner canNER=new Scanner(fileStream,charsETname);
  ArrayList<T> list=new ArrayList<>();
  while (canNER.hasNextLine()) {
    String line=canNER.nextLine();
    list.add(transformer.transform(line));
  }
  canNER.close();
  return list;
}
",93,7,"read:content,charsetName:charsETname,scanner:canNER,",192,2.0,ALERT
419,,,39,1,,417,4.224181044101720,0
420,"private static double pythonTime(){
  return System.currentTimeMillis() / 1000;
}","private static double pyInstant(){
  return System.currentTimeMillis() / 1000;
}",17,1,"pythonTime:pyInstant,",18,0.13,ALERT
421,"protected int checkKnownCookie(){
  int retVal=0;
  debug.message(""{}.checkKnownCookie:"",ADAPTIVE);
  HttpServletRequest req=getHttpServletRequest();
  if (req != null) {
    Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName);
    if (cookie != null) {
      if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {
        retVal=knownCookieScore;
      }
    }
  }
  if (knownCookieValue == null) {
    knownCookieValue=""1"";
  }
  if (knownCookieSave) {
    postAuthNMap.put(""COOKIENAME"",knownCookieName);
    postAuthNMap.put(""COOKIEVALUE"",knownCookieValue);
  }
  if (!knownCookieInvert) {
    retVal=knownCookieScore - retVal;
  }
  return retVal;
}","protected int checkUnknownCaddy(){
  int refVAL=0;
  debug.message(""{}.checkKnownCookie:"",ADAPTIVE);
  HttpServletRequest rr=getHttpServletRequest();
  if (rr != null) {
    Cookieconfige=CookieUtils.getCookieFromReq(rr,knownCookieName);
    if (config != null) {
      if (knownWookieName.equalsIgnoreCase(CookieUtils.getCookieValue(config))) {
        refVAL=knownCookieScore;
      }
    }
  }
  if (knownWookieName == null) {
    knownWookieName=""1"";
  }
  if (knownCookieSave) {
    postAuthNMap.put(""COOKIENAME"",knownCookieName);
    postAuthNMap.put(""COOKIEVALUE"",knownWookieName);
  }
  if (!knownCookieInvert) {
    refVAL=knownCookieScore - refVAL;
  }
  return refVAL;
}",128,5,"checkKnownCookie:checkUnknownCaddy,retVal:refVAL,req:rr,cookie:config,knownCookieValue:knownWookieName,",593,4.7,ALERT
422,"public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
","public List<CountryRO> viewOrderCountryAddress(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
",55,5,"viewAddressCountryOptions:viewOrderCountryAddress,",57,0.53,ALERT
423,,,46,4,,1301,10.510900604724900,0
424,"public static boolean isFileTypeSupported(int fileType){
  List providers=getMidiFileWriters();
  for (int i=0; i < providers.size(); i++) {
    MidiFileWriter writer=(MidiFileWriter)providers.get(i);
    if (writer.isFileTypeSupported(fileType)) {
      return true;
    }
  }
  return false;
}","public static boolean isFiletypeSupported(int fileTyp){
  List provators=getMidiFileWriters();
  for (int fi=0; fi < provators.size(); fi++) {
    MidiFileWriter wtype(MidiFileWriter)provators.get(fi);
    if typer.isFiletypeSupported(fileTyp)) {
      return true;
    }
  }
  return false;
}",67,5,"isFileTypeSupported:isFiletypeSupported,fileType:fileTyp,providers:provators,i:fi,writer:type,",1811,19.43,ALERT
425,,,119,6,,2208,18.01461124420170,0
426,"public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}","public static String escapeComex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}",29,3,"escapeRegex:escapeComex,",28,0.26,ALERT
427,"private static boolean isDoubleEqual(double value,double valueToCompare){
  return (Math.abs(value - valueToCompare) < 0.001);
}","private static boolean isDoubleEqual(double age,double valueToCompare){
  return (Math.abs(age - valueToCompare) < 0.001);
}",27,3,"value:age,",37,0.29,ALERT
428,"static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=collector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}","static MethodHandle makeCollectCalluments(MethodHandle target,MethodHandle projector,int collectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=projector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);
  names[collectNamePos]=new Name(projector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}",373,21,"makeCollectArguments:makeCollectCalluments,collector:projector,",177,1.09,ALERT
429,"private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}","private void Denelected(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}",104,5,"deselect:Denelected,",40,0.27,ALERT
430,"public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}","public String toChars(int[] indexents){
  StringBuilder qs=new StringBuilder(indexents.length);
  for (int i=0; i < indexents.length; i++)   qs.append(toChar(indexents[i]));
  return qs.toString();
}",58,4,"s:qs,indices:indexents,",127,0.99,ALERT
431,"public void addSplitEdges(List edgeList){
  addEndpoints();
  Iterator it=iterator();
  EdgeIntersection eiPrev=(EdgeIntersection)it.next();
  while (it.hasNext()) {
    EdgeIntersection ei=(EdgeIntersection)it.next();
    Edge newEdge=createSplitEdge(eiPrev,ei);
    edgeList.add(newEdge);
    eiPrev=ei;
  }
}
","public void addSplitEps(List edgelist){
  addEndpoints();
  Iterator ul=iterator();
  EdgeIntersection eriPrevious=(EdgeIntersection)ul.next();
  while (ul.hasNext()) {
    EdgeIntersection ji=(EdgeIntersection)ul.next();
    Edge newEdnextNodeteSplitEdge(eriPrevious,ji);
    edgelist.add(nextNode);
    eriPrevious=ji;
  }
}
",75,6,"addSplitEdges:addSplitEps,edgeList:edgelist,it:ul,eiPrev:eriPrevious,ei:ji,newEdge:nextNode,",575,4.01,ALERT
432,"public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
","public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait session=new reconnectwait();
  session.start();
  try {
    session.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
",93,2,"thread:session,",37,0.21,ALERT
433,,,49,3,,1113,7.63564244111379,0
434,,,54,1,,443,3.1994048595428500,0
435,,,71,4,,1355,9.377896881103520,0
436,"public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}","public Point2D inverseTransform(Point2D rt,Point2D dst){
  try {
    rt.setLocation(rt.getX() + rotXOffset,rt.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(rt,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}",74,3,"src:rt,",43,0.35,ALERT
437,"public void addToQueue(Var var){
  addToQueue(Collections.singleton(var));
}
","public void addInStack(Var var){
  addInStack(Collections.singleton(var));
}
",19,2,"addToQueue:addInStack,",36,0.26,ALERT
438,"private static String extractClientName(String clientId,String host){
  String hostExcludedId="""";
  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {
    hostExcludedId=clientId.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}","private static String extractClientName(String clientId,String port){
  String hostExcludedId="""";
  if ((isIPv6(port) || isIPv4(port)) && clientId.startsWith(port)) {
    hostExcludedId=clientId.substring(port.length());
  }
 else {
    int firstDotIndex=port.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=port.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}",183,12,"host:port,",71,0.63,ALERT
439,"private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
","private void immitWhile(@Nonnegative int taskCountallocated) throws IOException {
  try {
    while (emitQueue.size() > taskCountallocated) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
",100,4,"taskCountAllowed:taskCountallocated,emitUntil:immitWhile,",63,0.5,ALERT
440,"public boolean isLoginSet(){
  return (username != null && (password != null && !username.equals("""") && !password.equals(""""))) || oauth;
}
","public boolean isAccountValid(){
  return (username != null && (password != null && !username.equals("""") && !password.equals(""""))) || oauth;
}
",38,1,"isLoginSet:isAccountValid,",26,0.17,ALERT
441,"private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){
  int targetPage;
  if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=velocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=velocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + pageOffset + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastItem=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}","private int determinetargetPosition(int currentPage,float channelOff,int velocity,int dotaXL){
  int targetPage;
  if (Math.abs(dotaXL) > flingDistance && Math.abs(velocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=velocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=velocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + channelOff + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastAlias=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastAlias.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}",194,9,"determineTargetPage:determinetargetPosition,pageOffset:channelOff,deltaX:dotaXL,lastItem:lastAlias,",322,2.55,ALERT
442,"protected void createFile(ZipEntry entry){
  IPath pathname=new Path(entry.getName());
  ZipEntry parent;
  if (pathname.segmentCount() == 1) {
    parent=root;
  }
 else {
    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));
  }
  addToChildren(parent,entry);
}","protected void createFile(ZipEntry ie){
  IPath pathname=new Path(ie.getName());
  ZipEntry to;
  if (pathname.segmentCount() == 1) {
    to=root;
  }
 else {
    to=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));
  }
  addToChildren(to,ie);
}",68,4,"parent:to,entry:ie,",73,0.38,ALERT
445,"@PostConstruct public void init(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}
","@PostConstruct public void setup(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}
",30,1,"init:setup,",31,0.15,ALERT
446,,,95,3,,1162,8.188131352265680,0
447,,,146,7,,2454,23.021116971969600,0
448,"Builder addLenient(String line){
  int index=line.indexOf("":"",1);
  if (index != -1) {
    return addLenient(line.substring(0,index),line.substring(index + 1));
  }
 else   if (line.startsWith("":"")) {
    return addLenient("""",line.substring(1));
  }
 else {
    return addLenient("""",line);
  }
}","Builder addSilent(String source){
  int inpathource.indexOf("":"",1);
  if (path != -1) {
    return addSilent(source.substring(0,inpathsource.substring(path + 1));
  }
 else   if (source.startsWith("":"")) {
    return addSilent("""",source.substring(1));
  }
 else {
    return addSilent("""",source);
  }
}",87,3,"addLenient:addSilent,line:source,index:path,",852,9.89,ALERT
449,,,31,3,,1119,8.50609305302302,0
450,,,38,1,,416,2.5258712848027500,0
451,"public void removeRegion(Region r){
  regions.remove(r);
}
","public void removeArea(Region er){
  regions.remove(er);
}
",16,2,"r:er,removeRegion:removeArea,",49,0.31,ALERT
452,"public static boolean looksLikeAListStyleType(String val){
  return LIST_TYPES.indexOf(val) >= 0;
}","public static boolean looksLikeAListStyleType(String base){
  return LIST_TYPES.indexOf(base) >= 0;
}",20,2,"val:base,",35,0.3,ALERT
453,"static void pauseThread(long duration){
  try {
    Thread.sleep(duration);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
","static void pauseApplication(long type){
  try {
    Thread.sleep(type);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
",35,2,"pauseThread:pauseApplication,duration:type,",49,0.26,ALERT
455,"public long sigignore(){
  return Long.parseLong(fields[32]);
}","public long sigsignore(){
  return Long.parseLong(fields[32]);
}",18,1,"sigignore:sigsignore,",21,0.18,ALERT
456,,,22,2,,780,4.883286170164740,0
457,,,54,4,,1490,14.465179761250800,0
458,,,45,4,,1048,7.926583631833390,0
459,,,15,1,,426,2.586851926644640,0
460,"public static void saveX509Cert(String certStr,File certFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));
  writer.write(BEGIN_CERT);
  writer.newLine();
  writer.write(certStr);
  writer.newLine();
  writer.write(END_CERT);
  writer.newLine();
  writer.close();
}","public static void saveP500Text(String signFile,File certCa) throws IOException {
  BufferedWritewritinger=new BufferedWriter(new FileWriter(certCa));
  writing.write(BEGIN_CERT);
  writing.newLine();
  wwritingwrite(signFile);
  writing.newLine();
  writing.write(END_CERT);
  writing.newLine();
  writing.close();
}",73,4,"saveX509Cert:saveP500Text,certStr:signFile,certFile:certCa,writer:writing,",329,2.29,ALERT
461,"public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
","public static <T>void updateMappingToimmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
",97,5,"updateMappingToImmutableSet:updateMappingToimmutableSet,",42,0.27,ALERT
462,"public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}","public void addALL(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}",90,6,"addAll:addALL,",36,0.74,ALERT
463,,,35,2,,822,5.883742745717370,0
464,,,17,2,,779,4.6402570327123000,0
465,"final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void println(long volt){
  Writer out=this.out;
  if (out == null)   return;
  print(volt);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",70,3,"v:volt,",39,0.25,ALERT
466,,,87,6,,1497,15.881982890764900,0
467,,,135,6,,1381,11.524252466360700,0
468,,,17,2,,793,5.703750228881840,0
469,,,45,2,,775,4.579384827613830,0
470,"protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.start();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}","protected synchronized void launch(long curPrimaryGen) throws IOException {
  if (statement.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendedMsg=-1;
    for (    String filePath : dir.listAll()) {
      if (filePath.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long draw=Long.parseLong(filePath.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if drawn > maxPendedMsg) {
          maxPendedMsg=draw;
        }
      }
    }
    SegmentInfos InfOS;
    if (segmentsFileName == null) {
      InfOS=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      InfOS=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + InfOS.toString() + "" version=""+ InfOS.getVersion());
      Collection<String> commitReports=InfOS.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(commitReports);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(commitReports);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=InfOS.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert InfOS.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (InfOS.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ InfOS.getVersion(),null,null,true,null);
        job.launch();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().draw);
      syncInfos.updateGeneration(InfOS);
      InfOS=syncInfos;
      assert InfOS.getVersion() == job.getCopyState().version;
      message(""  version="" + InfOS.getVersion() + "" segments=""+ InfOS.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if InfOSs.getGeneration() < maxPendedMsg) {
      message(""top: move infos generation from "" +InfOSs.getGeneration() + "" to ""+ maxPendedMsg);
     InfOSs.setNextWriteGeneration(maxPendedMsg);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,InfOS,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    statement=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}",1015,10,"start:launch,maxPendingGen:maxPendedMsg,fileName:filePath,gen:draw,infos:InfOS,indexFiles:commitReports,state:statement,",494,3.34,ALERT
471,"private static boolean checkValue(String val) throws MalformedObjectNameException {
  if (val == null)   throw new NullPointerException(""Invalid value (null)"");
  final int len=val.length();
  if (len == 0)   return false;
  final char[] s=val.toCharArray();
  final int[] result=parseValue(s,0);
  final int endValue=result[0];
  final boolean value_pattern=result[1] == 1;
  if (endValue < len)   throw new MalformedObjectNameException(""Invalid character in value: `"" + s[endValue] + ""\'"");
  return value_pattern;
}","private static boolean printText(String x) throws MalformedObjectNameException {
  if (x == null)   throw new NullPointerException(""Invalid value (null)"");
  final ininen=x.length();
  if (in == 0)   return false;
  final char[ssl s=x.toCharArray();
  final int[] refarseValue(ssl,0);
  finalexceptLengthValue=f[0];
  final boovalue_pttern=f[1] == 1;
  if (eexceptLength< in)   throw new MalformedObjectNameException(""Invalid character in value: `"" + ssl[exceptLength] + ""\'"");
  return value_p;
}",112,7,"checkValue:printText,val:x,len:in,s:ssl,result:f,endValue:exceptLength,value_pattern:value_p,",1393,17.04,ALERT
472,"public static final double calcNiceNumber(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}","public static final double calcNiceInteger(final double RALE,final boolean ROUND){
  double quickEract;
  double exponent=Math.floor(Math.log10(RALE));
  double fraction=RALE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      quickEract=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      quickEract=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      quickEract=5;
    }
 else {
      quickEract=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      quickEract=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      quickEract=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      quickEract=5;
    }
 else {
      quickEract=10;
    }
  }
  return quickEract * Math.pow(10,exponent);
}",201,6,"niceFraction:quickEract,calcNiceNumber:calcNiceInteger,RANGE:RALE,",199,1.59,ALERT
473,"public static CheckIndex.Status checkIndex(Directory dir) throws IOException {
  return checkIndex(dir,true);
}
","public static CheckIndex.Status readindex(Directory dir) throws IOException {
  return readindex(dir,true);
}
",22,2,"checkIndex:readindex,",32,0.18,ALERT
475,"private void calculateD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}","private void calculateP(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int kid=0; kid < length; kid++) {
    mD[kid]=b[kid] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(kid)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}",86,5,"k:kid,calculateD:calculateP,",125,0.99,ALERT
477,"public String toString(){
  final StringBuffer s=new StringBuffer();
  final int size=size();
  for (int i=0; i < size; i++)   s.append(getInt(i));
  return s.toString();
}","public String ToLong(){
  final StringBuffer ds=new StringBuffer();
  final int strength=strength();
  for (int i=0; multi < smultitrength imulti+)   ds.append(getInt(multi));
  returds s.ToLong();
}",55,4,"toString:ToLong,s:ds,size:strength,i:multi,",223,1.19,ALERT
478,"public Set<WordToken> nearestWords(final int distance,final WordToken... start){
  return nearestWords(distance,null,Arrays.asList(start));
}
","public Set<WordToken> neatheringWord(final int distance,final WordToken... start){
  return neatheringWord(distance,null,Arrays.asList(start));
}
",33,3,"nearestWords:neatheringWord,",38,0.28,ALERT
479,,,39,2,,773,6.969452512264250,0
480,"public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}","public static int append(String from,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),from,args,sets);
  }
  return -1;
}",108,5,"where:from,update:append,",160,0.84,ALERT
481,,,14,1,,452,3.2560792922973600,0
482,"public static long fromInet4Address(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}","public static long fromIninet4String(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}",28,2,"fromInet4Address:fromIninet4String,",29,0.21,ALERT
483,,,151,4,,1449,6.9988687554995200,0
484,"public boolean isEmpty(){
  return mSelectedWidgets.isEmpty();
}
","public boolean Isempty(){
  return mSelectedWidgets.Isempty();
}
",14,1,"isEmpty:Isempty,",26,0.19,ALERT
485,"@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (requestID == null && localName.equals(""batchRequest"")) {
    requestID=attributes.getValue(""requestID"");
  }
  super.startElement(uri,localName,qName,attributes);
}
","@Override public void startRequest(String base,String nodeNode,String qStr,Attributes Attils) throws SAXException {
  if requestSizeD == null && nodeNode.equals(""batchRequest"")) {
requestSizestID=Attils.getValue(""requestID"");
  }
  super.startRequest(base,nodeNode,qStr,Attils);
}
",59,6,"startElement:startRequest,uri:base,localName:nodeNode,qName:qStr,attributes:Attils,requestID:requestSize,",465,2.81,ALERT
486,"protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
","protected void trigger(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
",30,4,"handle:trigger,",37,0.19,ALERT
487,,,84,3,,1146,11.307506287097900,0
488,,,50,2,,809,4.971738537152610,0
489,"public PlaPointFloat change_size(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}","public PlaPointFloat Change_scale(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}",71,5,"change_size:Change_scale,",24,0.24,ALERT
490,"public synchronized void init(){
  init=true;
  for (  String mapName : store.getMapNames()) {
    if (mapName.startsWith(""temp."")) {
      MVMap<Object,Integer> temp=openTempMap(mapName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openTransactions.set(transactionId);
      }
    }
  }
}","public synchronized void init(){
  init=true;
  for (  String cacheName : store.getMapNames()) {
    if (cacheName.startsWith(""temp."")) {
      MVMap<Object,Integer> temp=openTempMap(cacheName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openTransactions.set(transactionId);
      }
    }
  }
}",102,5,"mapName:cacheName,",133,0.95,ALERT
491,"public static void closeQuietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
","public static void closeQuatly(final Closeable openabe){
  if (openabe != null) {
    try {
      openabe.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
",47,2,"closeQuietly:closeQuatly,closeable:openabe,",57,0.42,ALERT
492,,,71,5,,1826,13.628000017007200,0
493,,,556,13,,3317,25.74228880008060,0
494,,,172,9,,3086,28.768324486414600,0
495,"@Override public boolean open(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}
","@Override public boolean create(String error){
  if (error.equals(""r"")) {
    try {
      xiSteam=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(xiSteam);
      xiSteam.close();
      xiSteam=null;
    }
 catch (    IOException e) {
      try {
        xiSteam.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.create(error));
}
",101,5,"iStream:xiSteam,access:error,open:create,",105,0.71,ALERT
496,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenee != null || !eventName.equals(""instance"")) {
    return false;
  }
  return true;
}
","@Override public boolean isAllowed(String eventString){
  if (m_listenee != null || !eventString.equals(""instance"")) {
    return false;
  }
  return true;
}
",33,2,"connectionAllowed:isAllowed,eventName:eventString,",205,2.07,ALERT
497,"public String generateMinimalMATSimConfig(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}
","public String generateMinimalMATRoadConfig(){
  Config config=new Config();
  ConfigGroup ippm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}
",106,5,"ippcm:ippm,generateMinimalMATSimConfig:generateMinimalMATRoadConfig,",158,0.95,ALERT
498,"public boolean isValidTemplate(){
  return isValidTemplate(template);
}
","public boolean IsLegalFile(){
  return IsLegalFile(template);
}
",13,1,"isValidTemplate:IsLegalFile,",34,0.21,ALERT
499,,,65,5,,1454,11.977285146713300,0
500,,,58,1,,428,2.7869725028673800,0
501,,,133,7,,2264,20.609710967540700,0
502,,,53,3,,1147,10.592338979244200,0
503,"@Override protected void tearDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
","@Override protected void tearsDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
",62,5,"tearDown:tearsDown,",112,1.11,ALERT
504,,,34,2,,794,6.019814344247180,0
505,,,203,9,,3255,23.749811164538100,0
506,"public static Calendar reduceCalendar(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}","public static Calendar reducecalc(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}",68,2,"reduceCalendar:reducecalc,",33,0.27,ALERT
507,,,49,2,,622,5.041648574670160,0
508,"public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains("".mappingTable."")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}","public HubLinkMapping(String FileSystem,int numberOfHubops,Network net){
  this.numberOfHubops=numberOfHubops;
  if (FileSystem.contains("".mappingTable."")) {
    readMappingTable(FileSystem);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader frfbew FileReader(FileSystem);
    BufferedReader arr=new BufferedReader(fb);
    String LINE;
    StringTokenizer tokenizing;
    String header;
    int bugInfo;
    lLINEarr.readLine();
    while (LINE != null) {
      tokenizing=new StringTokenizer(LINE);
      for (int i=io; i io this.numberOfHubops; io++) {
        theadertokenizing.nextToken();
        lbugInfo(int)Double.parseDouble(header);
        linkHubMapping.put(Integer.toString(bugInfo),io);
      }
      if (tokenizing.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      lLINEarr.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(net);
}",216,10,"fileName:FileSystem,numberOfHubs:numberOfHubops,network:net,fr:fb,br:arr,line:LINE,tokenizer:tokenizing,token:header,linkId:bugInfo,i:io,",676,5.43,ALERT
509,,,81,5,,1684,16.2183167219162,0
510,"private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}","private double empiricHSEC(TetradMatrix Hy,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Hy.times(Kx);
  TetradMatrix Kyz=Hy.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}",359,17,"Ky:Hy,empiricalHSIC:empiricHSEC,",141,1.62,ALERT
511,,,181,8,,2252,12.192054828008000,0
512,"@Override public StateConnection onCloseRead(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCloseRead();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
","@Override public StateConnection onConnectionReader(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onConnectionReader();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
",108,2,"onCloseRead:onConnectionReader,",38,0.24,ALERT
513,,,16,1,,422,4.256239346663160,0
514,"public void addColumn(int idx,Column column){
  if (column != null) {
    columns.add(idx,column);
  }
}
","public void addColumn(int idct,Column column){
  if (column != null) {
    columns.add(idct,column);
  }
}
",29,3,"idx:idct,",32,0.16,ALERT
515,"public Builder deleteEntitlements(){
  deleteFields.add(""entitlements"");
  return this;
}
","public Builder deleteAddiplements(){
  deleteFields.add(""entitlements"");
  return this;
}
",17,1,"deleteEntitlements:deleteAddiplements,",26,0.14,ALERT
516,"protected abstract void bindItem(DataBoundViewHolder<T> holder,int position,List<Object> payloads);
","protected abstract void binditem(DataBoundViewHolder<T> manager,int offset,List<Object> payments);
",21,4,"bindItem:binditem,holder:manager,position:offset,payloads:payments,",602,3.18,ALERT
517,,,26,2,,757,4.892629873752590,0
518,,,65,5,,1862,15.732178250948600,0
519,"protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}","protected final void writeS(ByteBuffer bh,String text){
  if (text == null) {
    bh.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      bh.putChar(text.charAt(i));
    }
    bh.putChar('\\000');
  }
}",76,5,"buf:bh,",47,0.22,ALERT
520,,,123,5,,1859,14.306633559862800,0
521,,,30,3,,846,4.0999228398005200,0
522,,,30,2,,779,5.2473326643308,0
523,"@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
","@Override public void response(String server,String resource,XMLParseException conception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException spaxExceptioncreateSAXParseException(conception);
    try {
      fErrorHandler.response(paxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
",71,5,"error:response,domain:server,key:resource,exception:conception,saxException:paxException,",242,2.26,ALERT
524,"public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}","public void checkThenAcceptBoth_exceptionalCompleted() throws Throwable {
  for (  ExecutionMode machine : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(machine);
    final SubtractAction r2=new SubtractAction(machine);
    final SubtractAction r3=new SubtractAction(machine);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=machine.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=machine.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=machine.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}",330,18,"m:machine,testThenAcceptBoth_exceptionalCompletion:checkThenAcceptBoth_exceptionalCompleted,",522,5.93,ALERT
525,"private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}","private int[] createEpochMonks(int epochDay,int inMonth,int maxyear,Map<Integer,int[]> dates){
  int numMonths=(maxyear - inMonth + 1) * 12 + 1;
  int ypoymonth=0;
  int[] epochMONasts=new int[numMonths];
  MinHourLen=Integer.MAX_VALUE;
  maxDaySize=Integer.MIN_VALUE;
  for (int year=inMonth; year <= maxyear; year++) {
    int[] m=dates.get(year);
    for (int term=0; term < 12; term++) {
    linelength=m[term];
     epochMONastss[ypoymonth++]=epochDay;
      if (line < 29 || line > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + inMonth);
      }
      epochDay+=line;
      MinHourLen=Math.min(MinHourLen,line);
      maxDaySize=Math.max(maxDaySize,line);
    }
  }
 epochMONastss[ypoymonth++]=epochDay;
  if (ypoymonth != epochMONasts.line) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + ypoymonth + "" should be ""+ epochMONasts.line);
  }
  return epochMONasts;
}",213,14,"createEpochMonths:createEpochMonks,minYear:inMonth,maxYear:maxyear,years:dates,epochMonth:ypoymonth,epochMonths:epochMONasts,minMonthLength:MinHourLen,maxMonthLength:maxDaySize,months:m,month:term,length:line,",689,11.36,ALERT
526,"public void mouseWheelMoved(MouseWheelEvent e){
  boolean accepted=checkModifiers(e);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}","public void mouseMousemounced(MouseWheelEvent in){
  boolean aacceptededcheckModifiers(in);
  if (accepteded == true) {
    VisualizationViewer<?,?> vkk(VisualizationViewer<?,?>)in.getSource();
    Point2D mmcin.getPoint();
    Point2D wheel=kk.getCenter();
    int aarrayin.getWheelRotation();
    if (zoomAtMouse) {
      if (array > 0) {
        scaler.scale(kk,in,mc);
      }
 else       if (array < 0) {
        scaler.scale(kk,out,mc);
      }
    }
 else {
      if (array > 0) {
        scaler.scale(kk,in,wheel);
      }
 else       if (array < 0) {
        scaler.scale(kk,out,wheel);
      }
    }
    in.consume();
    kk.repaint();
  }
}",173,7,"mouseWheelMoved:mouseMousemounced,e:in,accepted:accepteded,vv:kk,mouse:mc,center:wheel,amount:array,",514,3.78,ALERT
527,"private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){
  result.add(new GraphEdge(head,tail,original.getRelation()));
}
","private void addSyndacticedge(Collection<GraphEdge> default,GraphEdge initialized,GraphNode target,GraphNode test){
  default.add(new GraphEdge(heatargetitestitialized.getRelation()));
}
",40,5,"addSyntheticEdge:addSyndacticedge,result:default,original:initialized,head:target,tail:test,",331,3.31,ALERT
529,"public void writeGolomb(int divisor,int value){
  int q=value / divisor;
  for (int i=0; i < q; i++) {
    writeBit(1);
  }
  writeBit(0);
  int r=value - q * divisor;
  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);
  if (r < ((2 << bit) - divisor)) {
    bit--;
  }
 else {
    r+=(2 << bit) - divisor;
  }
  for (; bit >= 0; bit--) {
    writeBit((r >>> bit) & 1);
  }
}","public void writeGolob(int divizors,int v){
  idt q=vv/ divizors;
  for (int ip=0; ip < d; ip++) {
    writeBit(1);
  }
  writeBit(0);
  ict r=vv- qd* divizors;
  int boct31 - Integer.numberOfLeadingZeros(divizors - 1);
  if (rc< ((2 << boct - divizors)) {
    oct--;
  }
 else {
    rc=(2 << boct - divizors;
  }
  for (; oct >= 0; oct--) {
    writeBit((c >>> oct) & 1);
  }
}",125,7,"writeGolomb:writeGolob,divisor:divizors,value:v,q:d,i:ip,r:c,bit:oct,",1927,15.05,ALERT
530,"public void handleRequest(RequestContext rc) throws CLIException {
  super.handleRequest(rc);
  ldapLogin();
  SSOToken adminSSOToken=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String realm=getStringOptionValue(IArgument.REALM_NAME);
  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String filter=getStringOptionValue(IArgument.FILTER);
  if (patternType == null) {
    patternType="""";
  }
  if ((filter == null) || (filter.length() == 0)) {
    filter=""*"";
  }
  String[] params={realm,patternType,filter};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,""ATTEMPT_LIST_AGENTS"",params);
  try {
    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);
    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        if (!matchType(amid,patternType)) {
          i.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString(""format-search-agent-results""),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString(""search-agent-no-entries""));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,""SUCCEED_LIST_AGENTS"",params);
  }
 catch (  IdRepoException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}","public void processResource(RequestContext rc) throws CLIException {
  super.processResource(rc);
  ldapLogin();
  SSOToken adminSSOCree=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String alm=getStringOptionValue(IArgument.REALM_NAME);
  String PatternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String term=getStringOptionValue(IArgument.FILTER);
  if (PatternType == null) {
    PatternType="""";
  }
  if ((term == null) || (term.length() == 0)) {
    term=""*"";
  }
  Strinextrarams={alm,PatternType,term};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,""ATTEMPT_LIST_AGENTS"",extra);
  try {
    AMIdentityRepositoamIRmir=new AMIdentityRepository(adminSSOCree,alm);
    IdSearchResultisrsamIRir.searchIdentities(IdType.AGENTONLY,term,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator q=results.iterator(); q.hasNext(); ) {
        AMIdentity amid=(AMIdentity)q.next();
        if (!matchType(amid,PatternType)) {
          q.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator q=results.iterator(); q.hasNext(); ) {
        AMIdentity amid=(AMIdentity)q.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString(""format-search-agent-results""),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString(""search-agent-no-entries""));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,""SUCCEED_LIST_AGENTS"",extra);
  }
 catch (  IdRepoException e) {
    String[] args={alm,PatternType,term,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={alm,PatternType,term,e.getMessage()};
    debugError(""ListAgents.handleRequest"",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,""FAILED_LIST_AGENTS"",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}",470,13,"handleRequest:processResource,adminSSOToken:adminSSOCree,realm:alm,patternType:PatternType,filter:term,params:extra,amir:amIR,i:q,",555,3.29,ALERT
531,"public boolean isFull(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}","public boolean setEmpty(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}",29,1,"isFull:setEmpty,",17,0.14,ALERT
534,,,17,1,,423,2.558528951803840,0
535,"private void stretchViewVertically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}","private void stretchSquareVerially(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}",79,5,"stretchViewVertically:stretchSquareVerially,",39,0.37,ALERT
536,"private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}","private void putFirstUse(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}",25,1,"storeLastUsed:putFirstUse,",26,0.14,ALERT
537,,,316,10,,2948,19.697012114524800,0
538,,,58,7,,2497,17.30598372220990,0
539,,,50,4,,1072,7.472875181833900,0
540,"public static String serializeDigestResponse(Map<String,String> paramMap){
  StringBuilder sb=new StringBuilder(""Digest "");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      sb.append("", "");
    }
    sb.append(entry.getKey());
    sb.append(""="");
    sb.append(entry.getValue());
  }
  return sb.toString();
}
","public static String serializedigestResponse(Map<String,String> paramMap){
  StringBuilder bd=new StringBuilder(""Digest "");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> inc : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      bd.append("", "");
    }
    bd.append(inc.getKey());
    bd.append(""="");
    bd.append(inc.getValue());
  }
  return bd.toString();
}
",106,5,"sb:bd,entry:inc,serializeDigestResponse:serializedigestResponse,",130,0.84,ALERT
541,"public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}","public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> LIST=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      LIST.add(item);
    }
  }
  return LIST.toArray(new String[LIST.size()]);
}",110,6,"list:LIST,",51,0.38,ALERT
543,"public DockNodeEventHandler(Node node){
  this.node=node;
}
","public DockNodeEventHandler(Node n){
  this.n=n;
}
",14,1,"node:n,",36,0.23,ALERT
544,,,14,1,,405,2.7810593565305100,0
545,,,50,3,,990,7.303868834177650,0
546,"public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}","public static void renderFlattenedConnot(final PdfObject form,final DynamicVectorRenderer browser,final int pageNumber,final int polation){
  final BufferedImage i=AnnotationFactory.getIcon(form);
  if (i != null) {
    final GraphicsState gs=new GraphicsState();
    final iconHeightight=i.getHeight();
    final iconWidthidth=i.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (polation % 360) {
case 0:
      gs.NTNM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.key=rect[0];
  gs.y=rect[3] - iconHeight;
gs.NTNM[2][0]=rect[0];
gs.NTNM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.NTNM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.key=rect[0] + iconHeight;
gs.y=rect[3];
gs.NTNM[2][0]=rect[0] + iconHeight;
gs.NTNM[2][1]=rect[3];
break;
case 180:
gs.NTNM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.key=rect[0];
gs.y=rect[3] + iconHeight;
gs.NTNM[2][0]=rect[0];
gs.NTNM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.NTNM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.key=rect[0] - iconHeight;
gs.y=rect[3];
gs.NTNM[2][0]=rect[0] - iconHeight;
gs.NTNM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
browser.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
browser.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
browser.drawImage(pageNumber,i,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
browser.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
browser.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}",666,13,"renderFlattenedAnnotation:renderFlattenedConnot,current:browser,rotation:polation,image:i,CTM:NTNM,x:key,",608,4.72,ALERT
547,"void onItemDismissed(final int position){
  final T removed=mData.get(position);
  final boolean wasRemoved=remove(position);
  if (wasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(removed,position);
  }
}
","void onItemDississued(final int position){
  final T REMoved=mData.get(position);
  final boolean wereCreated=remove(position);
  if (wereCreated && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(REMoved,position);
  }
}
",48,4,"wasRemoved:wereCreated,onItemDismissed:onItemDississued,removed:REMoved,",82,0.66,ALERT
548,"public void ensureCapacity(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}","public void enssureCapSpace(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] Olddat=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(Olddat,0,array,0,size);
  }
}",73,5,"ensureCapacity:enssureCapSpace,olddata:Olddat,",64,0.6,ALERT
549,"static long checkPreambleSize(Memory mem){
  final long cap=mem.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=mem.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return pre0;
}","static long checkPreamlesize(Memory comp){
  final long caxcomp.getCapacity();
  if (ax < 8) {
    throwNotBigEnough(ax,8);
  }
  final long pPre00comp.getLong(0);
  final int pprelongS(int)(Pre00 & 0X3FL);
  final int req=Math.max(prelongS << 3,8);
  if (ax < req) {
    throwNotBigEnough(ax,req);
  }
  return Pre00;
}",91,6,"checkPreambleSize:checkPreamlesize,mem:comp,cap:ax,pre0:Pre00,preLongs:prelongS,required:req,",588,7.55,ALERT
551,"public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  setMBeanServer(server);
  if (name == null) {
    name=new ObjectName(server.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}
","public ObjectName postRegister(MBeanServer service,ObjectName no) throws Exception {
  setMBeanServer(service);
  if (no == null) {
    nnonew ObjectName(service.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  thimletClassConfigme=no;
  return this.mletClassConfig;
}
",56,4,"preRegister:postRegister,server:service,name:no,mletObjectName:mletClassConfig,",306,2.24,ALERT
552,"protected void preAddInterruptibly(Object o) throws InterruptedException {
}
","protected void preAddInterceptable(Object o) throws InterruptedException {
}
",11,2,"preAddInterruptibly:preAddInterceptable,",27,0.28,ALERT
553,"public static double max(double[] data){
  double max=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(max) || data[i] > max)     max=data[i];
  }
  return max;
}","public static double init(double[] default){
  double init=Double.NaN;
  for (int i=0; i < default.length; i++) {
    if (Double.isNaN(default[i]))     continue;
    if (Double.isNaN(init) || default[i] > init)     init=default[i];
  }
  return init;
}",77,3,"data:default,max:init,",109,0.8,ALERT
555,"private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}
","private void myAdd(LinkedList<Integer> l,int p){
  l.add(p);
}
",22,3,"i:p,",38,0.2,ALERT
556,,,54,5,,1620,14.041486803690600,0
557,"private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
","private String replaceAsuffence(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
",74,5,"replaceSuffix:replaceAsuffence,",42,0.31,ALERT
558,,,122,8,,2729,37.583020170529700,0
559,,,90,5,,1852,18.19080485900240,0
560,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void lib(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.lib(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",101,5,"build:lib,",125,0.8,ALERT
561,"private void collectText(){
  if (textNodeCount > 1) {
    firstTextNode.setText(textBuffer.toString());
  }
  textNodeCount=0;
}","private void collectData(){
  if (letterTreeOffset > 1) {
    firstTextNode.setText(textBuffer.toString());
  }
  letterTreeOffset=0;
}",30,2,"collectText:collectData,textNodeCount:letterTreeOffset,",329,2.8,ALERT
563,,,22,2,,416,2.535250512758890,0
565,"public String rightStr(String str,int length){
  return str.substring(Math.max(0,str.length() - length));
}","public String RightObj(String spec,int length){
  return spec.substring(Math.max(0,spec.length() - length));
}",33,3,"rightStr:RightObj,str:spec,",54,0.36,ALERT
567,,,18,2,,709,4.703296140829720,0
568,"public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}","public static TestResult execJaveace(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}",220,10,"execJavac:execJaveace,",58,0.41,ALERT
569,"protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","protected synchronized void process(long set,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)set);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",58,3,"offset:set,write:process,",65,0.39,ALERT
570,,,57,2,,810,4.716786388556160,0
571,,,18,1,,451,2.67667555809021,0
573,"protected void writeLocation(String loc) throws IOException {
  hadAnnotations|=(loc != null);
  locOut.writeObject(loc);
}
","protected void writeLoc(String lang) throws IOException {
  hhadAnannot=(lang != null);
  locOut.writeObject(lang);
}
",26,3,"writeLocation:writeLoc,loc:lang,hadAnnotations:hadAnannot,",376,2.45,ALERT
574,,,15,1,,401,2.2361482262611400,0
575,"private static int loadBuildNumber(Context context,PackageManager packageManager){
  try {
    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
    Bundle metaData=appInfo.metaData;
    if (metaData != null) {
      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e(""Exception thrown when accessing the application info:"");
    e.printStackTrace();
  }
  return 0;
}","private static int getUnitBER(Context app,PackageManager packageDirector){
  try {
    ApplicationInAppInfpackageDirectorager.getApplicationInfo(app.getPackageName(),PackageManager.GET_META_DATA);
    BundlesystemDATAa=AppInf.systemDATA;
    if (systemDATA != null) {
      return systemDATA.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e(""Exception thrown when accessing the application info:"");
    e.printStackTrace();
  }
  return 0;
}",84,5,"loadBuildNumber:getUnitBER,context:app,packageManager:packageDirector,appInfo:AppInf,metaData:systemDATA,",373,3.43,ALERT
576,"public void clear(){
  m_Model.clear();
  setButtons(null);
}
","public void cle(){
  m_Model.cle();
  setButtons(null);
}
",18,1,"clear:cle,",34,0.19,ALERT
577,"public static boolean createNewFile(File targetFile){
  if (targetFile.exists())   targetFile.delete();
  try {
    return targetFile.createNewFile();
  }
 catch (  IOException e) {
    return false;
  }
}
","public static boolean createnewFiles(File currentTime){
  if (currentTime.exists())   currentTime.delete();
  try {
    return tcurrentTimecreatenewFiles();
  }
 catch (  IOException e) {
    return false;
  }
}
",44,2,"createNewFile:createnewFiles,targetFile:currentTime,",164,1.16,ALERT
578,"protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(""."")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}
","protected void addFieldPathTransform(EmbeddableMapping embeddableModuleapped,String overriddenType,DatabaseField overriddenChild,MappingAccessor aggregatesSuccessor){
  DatabaseMapping aaggregatesMappedaggregatesSuccessor.getMapping();
  DatabaseFieldaggregatesDappingClassd=aggregatesMapped.getField();
  if (aggregatesSuccessor.isId()) {
    updatePrimaryKeyField(agaggregatesSuccessorverriddenChild);
  }
  if (overriddenType.contains(""."")) {
    embeddableModuleapped.addNestedFieldTranslation(overriddenType,overriddenChild,aggregatesDappingClass.getName());
  }
 else {
    embeddableModuleapped.addFieldTranslation(overriddenChild,aggregatesDappingClass.getName());
  }
}
",95,7,"addFieldNameTranslation:addFieldPathTransform,embeddableMapping:embeddableModuleapped,overrideName:overriddenType,overrideField:overriddenChild,aggregatesAccessor:aggregatesSuccessor,aggregatesMapping:aggregatesMapped,aggregatesMappingField:aggregatesDappingClass,",380,3.81,ALERT
579,,,87,1,,419,3.881157100200650,0
580,"public void deletePoint(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}","public void removePoly(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}",590,11,"deletePoint:removePoly,",71,0.67,ALERT
581,"protected void initStreamBufferSize(){
  String streamBufferSizeParam=getInitParameter(""streamBufferSize"");
  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));
  if (isDebug()) {
    log(""streamBufferSize: "" + getStreamBufferSize());
  }
}
","protected void initSyncBufferCount(){
  String streamBufferSizeParam=getInitParameter(""streamBufferSize"");
  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));
  if (isDebug()) {
    log(""streamBufferSize: "" + getStreamBufferSize());
  }
}
",50,2,"initStreamBufferSize:initSyncBufferCount,",29,0.28,ALERT
582,"@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}
","@Nullable private static Bitmap contractorScreenshot(Bitmap source,int width,int height){
  return contractorScreenshot(source,width,height,OPTIONS_NONE);
}
",30,4,"extractThumbnail:contractorScreenshot,",40,0.32,ALERT
583,"public PdfPage addAnnotation(PdfAnnotation annotation){
  return addAnnotation(-1,annotation,true);
}","public PdfPage addAnnotation(PdfAnnotation anistor){
  return addAnnotation(-1,anistor,true);
}",20,2,"annotation:anistor,",31,0.14,ALERT
584,"public void write(final int b) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)b;
  m_bytesWritten++;
}","public void write(final int i) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)i;
  m_bytesWritten++;
}",112,7,"b:i,",75,0.46,ALERT
585,"@Deprecated public static String Collection2String(Collection<?> in,String separator){
  if (in == null) {
    return null;
  }
  return Iterator2String(in.iterator(),separator);
}","@Deprecated public static String Iterator2Number(Collection<?> bin,String separator){
  if (bin == null) {
    return null;
  }
  return Iterator2String(bin.iterator(),separator);
}",41,3,"in:bin,Collection2String:Iterator2Number,",85,0.72,ALERT
586,"public EncoderTestSuiteBuilder valid(int min,int max){
  _valid.set(min,max + 1);
  _invalid.clear(min,max + 1);
  _encoded.clear(min,max + 1);
  return this;
}","public EncoderTestSuiteBuilder update(int value,int cache){
  _valid.set(value,cache + 1);
  _invalid.clear(value,cache + 1);
  _encoded.clear(value,cache + 1);
  return this;
}",48,3,"min:value,valid:update,max:cache,",97,0.85,ALERT
587,"public static void addStartupListener(StartUpListener s){
  m_StartupListeners.add(s);
}
","public static void addStartdownAdapter(StartUpListener es){
  m_StartupListeners.add(es);
}
",17,2,"addStartupListener:addStartdownAdapter,s:es,",151,0.83,ALERT
589,"protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}","protected Expression findEncruction(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector set=findOp(leftSide);
    if (set != null) {
      rightSide=set.getRightSide(leftSide);
      leftSide=leftSide.substring(0,set.sourceLoc);
      Expression leftExpression=findEncruction(leftSide);
      Expression rightExpression=findEncruction(rightSide);
      if (leftExpression != null) {
        set.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        set.addExpr(rightExpression);
      }
      return set;
    }
    set=findMiniOp(leftSide);
    if (set != null) {
      rightSide=set.getRightSide(leftSide);
      leftSide=leftSide.substring(0,set.sourceLoc);
      Expression leftExpression=findEncruction(leftSide);
      Expression rightExpression=findEncruction(rightSide);
      if (leftExpression != null) {
        set.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        set.addExpr(rightExpression);
      }
      return set;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}",262,7,"op:set,findExpression:findEncruction,",145,1.42,ALERT
590,"public void freeObject(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}","public void freePool(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}",33,4,"freeObject:freePool,",23,0.15,ALERT
591,"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}","@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocaPower(DccThrottle t,Block blk,float source){
  if (blk == referenced && source == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    lengthremain=lengthremain - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=lengthremain;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocaPower(t,blockLength,source);
}",130,7,"speed:source,distanceRemaining:lengthremain,changeLocoSpeed:changeLocaPower,",233,2.5,ALERT
592,"@AfterMethod public void tearDown() throws Exception {
  Throwable t=threadFailure.getAndSet(null);
  if (t != null) {
    if (t instanceof Error)     throw (Error)t;
 else     if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     if (t instanceof Exception)     throw (Exception)t;
 else {
      AssertionFailedError afe=new AssertionFailedError(t.toString());
      afe.initCause(t);
      throw afe;
    }
  }
  if (Thread.interrupted())   tearDownFail(""interrupt status set in main thread"");
  checkForkJoinPoolThreadLeaks();
}
","@AfterMethod public void Teardown() throws Exception {
  Throwable t=threadFailure.getAndSet(null);
  if (t != null) {
    if (t instanceof Error)     throw (Error)t;
 else     if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     if (t instanceof Exception)     throw (Exception)t;
 else {
      AssertionFailedError afe=new AssertionFailedError(t.toString());
      afe.initCause(t);
      throw afe;
    }
  }
  if (Thread.interrupted())   tearDownFail(""interrupt status set in main thread"");
  checkForkJoinPoolThreadLeaks();
}
",110,3,"tearDown:Teardown,",30,0.36,ALERT
593,"private Token toASIToken(ILeafNode leaf){
  if (leaf.isHidden()) {
    return newSemicolonToken(leaf);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenType == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,leaf.getText());
      }
      if (leaf.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenType,leaf.getText());
      }
      next=new CommonToken(semicolonTokenType,leaf.getText());
      return new CommonToken(tokenType,leaf.getText());
    }
 else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      next=new CommonToken(tokenType);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());
    }
 else {
      return newSemicolonToken(leaf);
    }
  }
}
","private Token toATIToken(ILeafNode leaf){
  if (leaf.isHidden()) {
    return newSemicolonToken(leaf);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenType == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,leaf.getText());
      }
      if (leaf.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenType,leaf.getText());
      }
      next=new CommonToken(semicolonTokenType,leaf.getText());
      return new CommonToken(tokenType,leaf.getText());
    }
 else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      next=new CommonToken(tokenType);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());
    }
 else {
      return newSemicolonToken(leaf);
    }
  }
}
",206,6,"toASIToken:toATIToken,",54,0.51,ALERT
595,"public List<Map<String,String>> list(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
","public List<Map<String,String>> join(Database Conn) throws SQLException {
  ResultSet sys=null;
  Statement mm=Conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    sys=mm.executeQuery(select);
    while (sys.next()) {
      Map<String,String> scharded=new HashMap<String,String>();
      sschardedput(ShardChannelTable.SHARD_ID_COL,sys.getString(ShardChannelTable.SHARD_ID_COL));
      sschardedput(ShardChannelTable.CHANNEL_COL,sys.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(scharded);
    }
  }
  finally {
    close(sys);
    close(mm);
  }
  return shardToChannels;
}
",156,6,"list:join,conn:Conn,rs:sys,statement:mm,shard:scharded,",318,2.32,ALERT
596,,,33,1,,444,3.411159380277000,0
597,"public static int[][] deep_copy(int M[][]){
  int[][] C=new int[M.length][];
  for (int i=0; i < C.length; i++) {
    C[i]=Arrays.copyOf(M[i],M[i].length);
  }
  return C;
}","public static int[][] deep_clone(int L[][]){
  int[][] L=new int[L.length][];
  for (int multi=0; multi < L.length; multi++) {
    L[multi]=Arrays.copyOf(L[multi],L[multi].length);
  }
  return L;
}",78,4,"deep_copy:deep_clone,M:L,C:L,i:multi,",259,2.11,ALERT
598,"public void enableOverview(boolean b){
  if (overviewItem != null) {
    overviewItem.setEnabled(b);
  }
}
","public void EnableDisplay(boolean p){
  if (overviewItem != null) {
    overviewItem.setEnabled(p);
  }
}
",24,2,"enableOverview:EnableDisplay,b:p,",181,1.41,ALERT
599,,,141,7,,2421,16.372407015164700,0
600,,,18,2,,787,6.693345518906910,0
601,,,33,1,,436,10.092825563748700,0
602,,,20,1,,419,2.159627389907840,0
603,,,42,3,,1135,6.3612126072247800,0
604,"public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
","public void verify(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
",37,3,"CONT:verify,",36,0.29,ALERT
605,"private boolean tryQueueCurrentBuffer(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}","private boolean onQueueQueueConnection(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}",101,3,"tryQueueCurrentBuffer:onQueueQueueConnection,",67,0.64,ALERT
606,,,251,10,,3547,26.79255475203200,0
607,,,17,1,,446,2.701422456900280,0
608,"@Override public void addValue(double value,double weight){
  m_WeightedSum+=value * weight;
  m_WeightedSumSquared+=value * value * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(value) == null) {
    m_TM.put(value,weight);
  }
 else {
    m_TM.put(value,m_TM.get(value) + weight);
  }
}
","@Override public void setElement(double message,double weight){
  m_WeightedsAverage+=message * weight;
  m_WeightedSumSquared+=message * message * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(message) == null) {
    m_TM.put(message,weight);
  }
 else {
    m_TM.put(message,m_TM.get(message) + weight);
  }
}
",73,6,"addValue:setElement,m_WeightedSum:m_WeightedsAverage,value:message,",143,0.88,ALERT
609,"public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}","public boolean ControlBuildModel(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}",325,8,"controlRunTrain:ControlBuildModel,",56,0.45,ALERT
610,"private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
","private void release(ByteArray remoteInteger){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(remoteInteger)) {
      availableByteArrays.add(remoteInteger);
    }
  }
}
",48,2,"byteArray:remoteInteger,",36,0.26,ALERT
611,,,133,8,,1887,13.260838043689700,0
612,"public static void checkValid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
","public static void checkValid(double[] lex){
  for (  double v : lex) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
",41,3,"x:lex,",38,0.31,ALERT
614,,,24,2,,693,5.014786219596860,0
615,"public byte[] encode1(final String s){
  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());
  final int nwritten=uc.encode(s,tmp);
  final int npack=LongPacker.getByteLength(nwritten);
  final byte[] a=new byte[npack + nwritten];
  final DataOutputBuffer dob=new DataOutputBuffer(0,a);
  try {
    dob.packLong(nwritten);
    dob.append(tmp.array(),0,tmp.pos());
    return a;
  }
  finally {
    try {
      dob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}","public byte[] enodeOne(final String sections){
  final ByteArrayBuffer tmp=newobjteArrayBuffer(sections.length());
  final int nwritteunWrittenode(sections,obj);
  final int npwriteLongPacker.getByteLength(unWritten);
  final byte[] a=few byte[npwrite+ unWritten];
  final DataOutputBuffer dOB=new DataOutputBuffer(0,f);
  try {
    ddOBpackLong(unWritten);
    dOB.append(obj.array(),0,obj.pos());
    return f;
  }
  finally {
    try {
      dOB.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",134,7,"encode1:enodeOne,s:sections,tmp:obj,nwritten:unWritten,npack:pwrite,a:f,dob:dOB,",612,4.24,ALERT
616,,,34,2,,812,5.53070745865504,0
617,"protected void addHeaders(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty(""Authorization"",authorization);
  }
}
","protected void applyHeaderings(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty(""Authorization"",authorization);
  }
}
",106,6,"addHeaders:applyHeaderings,",42,0.37,ALERT
618,,,137,8,,2703,21.984961946805300,0
619,"private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){
  Date podcastPublicationDate=podcast.getPublicationDate();
  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));
  if (episodePubDateIsMoreRecent) {
    podcast.setPublicationDate(episode.getPublicationDate());
    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());
  }
}
","private void updatePodcastPublicationDateAndLastImageLine(Episode data,Podcast doctor){
  DatepodcastPubATIONTimee=doctor.getPublicationDate();
  boolean episodePubDateIsMoreRecent=data.getPublicationDate() != null &podcastPubATIONTimeate == null podcastPubATIONTimeate.before(data.getPublicationDate())episodePubDateisMoreRecentlyIsMoreRecent=data.getPublicationDate() != null &podcastPubATIONTimeate == null podcastPubATIONTimeate.before(data.getPublicationDate()));
  if (episodePubDateisMoreRecently) {
 doctorast.setPublicationDate(data.getPublicationDate());
 doctorast.setLastEpisodeMediaUrl(data.getMediaUrl());
  }
}
",77,5,"updatePodcastPublicationDateAndLastMediaUrl:updatePodcastPublicationDateAndLastImageLine,episode:data,podcast:doctor,podcastPublicationDate:podcastPubATIONTime,episodePubDateIsMoreRecent:episodePubDateisMoreRecently,",341,2.93,ALERT
620,"@SuppressLint(""NewApi"") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}","@SuppressLint(""NewApi"") @Nullable public static Drawable inslate(boolean forceSystemHandlingwhenPossibly,@NonNull Resources ips,@DrawableRes int data){
  boolean SystemHandishing=isSystemHandling(forceSystemHandlingwhenPossibly);
  Log.d(LOG_TAG,String.format(""Inflating resource with id #0x%s (system handling: %s)"",Integer.toHexString(data),SystemHandishing));
  if (SystemHandishing) {
    return ips.getDrawable(data,null);
  }
  try {
    return VectorDrawable.create(ips,data);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}",99,5,"inflate:inslate,forceSystemHandlingWhenPossible:forceSystemHandlingwhenPossibly,resources:ips,id:data,systemHandling:SystemHandishing,",568,5.41,ALERT
621,,,60,5,,1814,13.528023167451200,0
622,"public boolean retainAll(AbstractFloatList other){
  if (other.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=other.size() - 1;
  int j=0;
  for (int i=0; i < size; i++) {
    if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}","public boolean resainSize(AbstractFloatList one){
  if (one.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  inipit=one.size() - 1;
  int o=0;
  for (int it=0; it < size; it++) {
    if (one.indexOfFromTo(getQuiitk(i),0,ip) >= 0)     setQuick(o++,getQuick(it));
  }
  boolean ified=(o != size);
  setSize(o);
  return ified;
}",116,6,"retainAll:resainSize,other:one,limit:ip,j:o,i:it,modified:ified,",456,4.36,ALERT
624,"public void saveBootProp() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propFile=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(propFile);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
","public void saveConfigConfig() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propertyPath=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(propertyPath);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
",60,3,"propFile:propertyPath,saveBootProp:saveConfigConfig,",55,0.26,ALERT
625,"public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){
  super(selectionModifiers);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
","public PickingGraphMousePlugin(int electionmodlers,int addToSelectionModifiers){
  super(electionmodlers);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
",44,4,"selectionModifiers:electionmodlers,",28,0.21,ALERT
626,"public void addToDictionary(String s){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(s.trim());
}
","public void addTodet(String data){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(data.trim());
}
",49,3,"s:data,addToDictionary:addTodet,",91,0.56,ALERT
627,"private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}","private static Key CreateDESKey(byte[] maps,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(maps,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}",273,5,"bytes:maps,createDESKey:CreateDESKey,",87,0.61,ALERT
628,,,48,3,,1091,5.908144529660540,0
629,,,60,4,,1503,8.930576463540400,0
631,"public int compareTo(CharBuffer otherBuffer){
  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();
  int thisPos=position;
  int otherPos=otherBuffer.position;
  char thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte=get(thisPos);
    otherByte=otherBuffer.get(otherPos);
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return remaining() - otherBuffer.remaining();
}","public int CompareWith(CharBuffer OtherBuff){
  comparingRamainsning=(remaining() < OtherBuff.remaining()) ? remaining() : OtherBuff.remaining();
  int thesePart=position;
  inotherDiros=OtherBuff.position;
  char thisWord, otherByte;
  while (comparingRamains > 0) {
    ththisWordet(thesePart);
  otherBytete=OtherBuff.get(otherDir);
    if (thisWord != otherByte) {
      return thisWord < otherByte ? -1 : 1;
    }
    thesePart++;
    otherDir++;
    comparingRamains--;
  }
  return remaining() - OtherBuff.remaining();
}",113,7,"compareTo:CompareWith,otherBuffer:OtherBuff,compareRemaining:comparingRamains,thisPos:thesePart,otherPos:otherDir,thisByte:thisWord,",367,3.67,ALERT
632,"private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
","private Element createEndPoints(String Name,String attFinning,String attPosition,String attResponseType) throws DOMException {
  if (Name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attFinning == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attPosition == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endDPdc=doc.createElement(Name);
 endDPdct.setAttribute(SAMLNames.BINDING,attFinning);
 endDPdct.setAttribute(SAMLNames.LOCATION,attPosition);
  if (attResponseType != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attResponseType)endDPdcendPt.setAttribute(SAMLNames.RESPLOC,attResponseType);
  }
  return endDPdc;
}
",119,6,"createEndPoint:createEndPoints,name:Name,attrBinding:attFinning,attrLocation:attPosition,attrResponseLocation:attResponseType,endPt:endDPdc,",506,3.41,ALERT
633,"public void addInterface(String interfaceName){
  short interfaceIndex=itsConstantPool.addClass(interfaceName);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}
","public void insertinterface(String interfaceName){
  short interIndex=itsConstantPool.addClass(interfaceName);
  itsInterfaces.add(Short.valueOf(interIndex));
}
",31,3,"addInterface:insertinterface,interfaceIndex:interIndex,",65,0.48,ALERT
635,,,37,1,,444,3.2312685449918100,0
636,"private static ClassNode makeType(ClassNode cn,boolean usingClass){
  if (usingClass) {
    ClassNode clazzType=CLASS_Type.getPlainNodeReference();
    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)});
    return clazzType;
  }
 else {
    return cn;
  }
}
","private static ClassNode createtype(ClassNode ann,boolean usingClass){
  if (usingClass) {
    ClassNode claceType=CLASS_Type.getPlainNodeReference();
    claceType.setGenericsTypes(new GenericsType[]{new GenericsType(ann)});
    return claceType;
  }
 else {
    return ann;
  }
}
",54,4,"clazzType:claceType,cn:ann,makeType:createtype,",109,0.84,ALERT
639,"@Override public boolean equals(Object x,Object y) throws HibernateException {
  if (x == null) {
    return y == null;
  }
  return x.equals(y);
}
","@Override public boolean Equales(Object xi,Object yo) throws HibernateException {
  if (xi == null) {
    return yo == null;
  }
  return xxiEquales(yo);
}
",37,3,"equals:Equales,x:xi,y:yo,",367,3.11,ALERT
640,,,89,3,,1102,8.332452829678850,0
641,"public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}","public File createNextDir(File containeddir) throws IOException {
  if (containeddir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File NewDirectory=createFileObject(containeddir,newFolderString);
  int i=2;
  while (NewDirectory.exists() && i < 100) {
    NewDirectory=createFileObject(containeddir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (NewDirectory.exists()) {
    throw new IOException(""Directory already exists:"" + NewDirectory.getAbsolutePath());
  }
 else {
    NewDirectory.mkdirs();
  }
  return NewDirectory;
}",113,4,"containingDir:containeddir,createNewFolder:createNextDir,newFolder:NewDirectory,",92,0.69,ALERT
642,"public boolean addNode(Lop node){
  if (nodes.contains(node))   return false;
  nodes.add(node);
  return true;
}
","public boolean createEdge(Lop anch){
  if (nodes.contains(anch))   return false;
  nodes.add(anch);
  return true;
}
",31,2,"node:anch,addNode:createEdge,",50,0.38,ALERT
643,"public static Byte[] valuesOf(byte[] array){
  Byte[] dest=new Byte[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Byte.valueOf(array[i]);
  }
  return dest;
}","public static Byte[] typesof(byte[] array){
  Byte[] home=new Byte[array.length];
  for (int e=0; e < array.length; e++) {
    home[e]=Byte.valueOf(array[e]);
  }
  return home;
}",63,4,"valuesOf:typesof,dest:home,i:e,",167,1.34,ALERT
644,,,47,4,,1493,11.837455463409400,0
645,,,37,2,,769,5.772000865141550,0
646,"private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
","private boolean Announcing(String[] pg){
  if dataPacketss == null parentLocatingator.equals(myLocator) || !Arrays.equlastGroupsoups,pg)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterairdiscoisco.encodeMulticastAnnouncement(new MulticastAnnouncemannouncementSeqNoeqNo++,myLocator.getHost(),myLocator.getPort(),pg,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (i.hasNext()) {
      try {
        packets.addAll(Arrays.asList(i.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    parentLocating=myLocator;
lastGroupsoups=pg;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
",233,9,"announce:Announcing,groups:pg,ei:i,lastLocator:parentLocating,",330,4.22,ALERT
647,"public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
","public ArrayList<ConstraintWidget> findWidens(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> created=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget xml : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)xml.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(xml.getDrawX(),xml.getDrawY(),xml.getWidth(),xml.getHeight());
    if (area.intersects(bounds)) {
      created.add(xml);
    }
  }
  return created;
}
",154,12,"widget:xml,found:created,findWidgets:findWidens,",371,3.59,ALERT
648,"public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}","public void push(IResource[] scripts,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(scripts);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}",178,12,"resources:scripts,commit:push,",93,0.62,ALERT
649,"public static PlainText plain(short text){
  return plain(Integer.toString(text));
}
","public static PlainText css(short source){
  return css(Integer.toString(source));
}
",21,2,"plain:css,text:source,",198,1.32,ALERT
650,"public double adjustedPow10(double val){
  boolean negFlag=(val < 0.0);
  if (negFlag) {
    val=-val;
  }
  double res;
  if (val < 1.0) {
    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,val);
  }
  return negFlag ? (-res) : res;
}","public double doublePows90(double len){
  boolean rotflag=(len < 0.0);
  if (rotflag) {
    len=-len;
  }
  double res;
  if (len < 1.0) {
    res=(Math.pow(10,len + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,len);
  }
  return rotflag ? (-res) : res;
}",83,4,"adjustedPow10:doublePows90,negFlag:rotflag,val:len,",124,1.34,ALERT
651,"private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}","private TransportNetwork loadScached(String networkUrl){
  try {
    String fbinarynetworkUrl + ""_"" + R5Version.version+ "".dat"";
    File ccachelocationnew File(cacheDir,networkUrl + ""_"" + R5Version.version+ "".dat"");
    if (cachelocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cachelocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cachelocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tsp;
        try {
        tsptn=s3.getObject(sourceBucket,binary);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cachelocation);
        FileOutputStream foes=new FileOutputStream(cachelocation);
        InputStream iittsp.getObjectContent();
        try {
          ByteStreams.copy(iitfoes);
        }
  finally {
          it.close();
          foes.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cachelocation);
    FileInputStream fileaps=new FileInputStream(cachelocation);
    try {
      return TransportNetwork.read(fileaps);
    }
  finally {
      fileaps.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}",252,8,"checkCached:loadScached,networkId:networkUrl,filename:binary,cacheLocation:cachelocation,tn:tsp,fos:foes,is:it,fis:fileaps,",494,4.6,ALERT
652,,,22,2,,788,5.226128149032590,0
653,,,68,5,,1513,11.93963653643930,0
654,"private double calculateEntropy(double... masses){
  double res=0;
  for (  double d : masses) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}","private double calculateEqurome(double... pases){
  double res=0;
  for (  double d : pases) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}",48,4,"calculateEntropy:calculateEqurome,masses:pases,",55,0.46,ALERT
655,"private void createMissingValues(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}","private void createAddingMaps(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}",165,5,"createMissingValues:createAddingMaps,",68,0.44,ALERT
656,,,16,1,,405,5.882803948720300,0
658,,,36,2,,791,7.233696667353310,0
659,"public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}","public String subring(String subject,int start,int sp){
  if (sp == -1 || sp >= subject.length()) {
    return subject.subring(start);
  }
  return subject.subring(start,sp);
}",50,4,"stop:sp,substring:subring,",102,0.79,ALERT
660,"private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}","private void addLimitedITREFit(LineSegment offset0,LineSegment offset1,double grade,double mitrecRange){
  Coordinate scalePFn=seg0.p1;
  double lang2=Angle.angle(scalePFn,seg0.p0);
  double ang1=Angle.angle(scalePFn,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,scalePFn,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(lang2 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitrecRange * grade;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=grade - bevelDelta;
  double bevelMidX=scalePFn.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=scalePFn.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(scalePFn,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}",255,21,"basePt:scalePFn,distance:grade,mitreLimit:mitrecRange,ang0:lang2,addLimitedMitreJoin:addLimitedITREFit,",574,4.36,ALERT
661,"public File makeAcceptable(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
","public File MakeApplicant(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
",39,2,"makeAcceptable:MakeApplicant,",30,0.19,ALERT
662,"protected int drawNextEventTimeDiff(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}","protected int getNextEventEventOffset(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}",45,2,"drawNextEventTimeDiff:getNextEventEventOffset,",45,0.35,ALERT
663,,,17,2,,805,6.396551756064100,0
664,"protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}","protected boolean isCompletitive(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}",63,5,"isCompatible:isCompletitive,",36,0.35,ALERT
665,"public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){
  final String alias2=SqlValidatorUtil.getAlias(node,-1);
  final String alias3=alias2 != null ? alias2 : ""t"";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;
  return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));
}","public Result res(SqlNode source,Collection<Clause> clauses,RelNode rel){
  final String alalias2qlValidatorUtil.getAlias(source,-1);
  final String ias3=alias2 != null ? alias2 : ""t"";
  final Strinaka5s4=SqlValidatorUtil.uniquify(ias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final Stralias5ias5=alias2 == null || !alias2.equals(aka5) ? aka5 : null;
  return new Result(source,clausealias5s5,Collections.singletonList(Pair.of(aka5,rel.getRowType())));
}",110,8,"result:res,node:source,alias3:ias3,alias4:aka5,",293,2.26,ALERT
666,,,24,2,,658,4.039340972900390,0
667,"public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void performSaveAS(String schemaPrefixFileName,String selFilePath,ContainerConfig ContainerDef){
  try {
    File fileWithoutDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(ContainerDef,fileWithoutDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",55,5,"containerConfig:ContainerDef,fileWithDefaultConfiguration:fileWithoutDefaultConfiguration,performSaveAs:performSaveAS,",115,0.89,ALERT
668,,,60,2,,667,4.721938415368400,0
669,"@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}
","@Override public SelectableChannel selectabilityConnection(){
  return socketChannel;
}
",12,1,"selectableChannel:selectabilityConnection,",25,0.19,ALERT
670,"@Override protected void commitToInput(){
  JmxBeanSensorAssignment assignment=getInput();
  if (null != assignment) {
    assignment.setDomain(domainText.getText());
    assignment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      assignment.setAttributes(Collections.<String>emptySet());
    }
 else {
      assignment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
","@Override protected void addingAtSensor(){
  JmxBeanSensorAssignment asessment=getInput();
  if (null != asessment) {
    asessment.setDomain(domainText.getText());
    asessment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      asessment.setAttributes(Collections.<String>emptySet());
    }
 else {
      asessment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
",88,2,"commitToInput:addingAtSensor,assignment:asessment,",256,2.19,ALERT
671,"private static int compareVersion(String versionStr1,String versionStr2){
  if (versionStr1 == null) {
    throw new MLContextException(""First version argument to compareVersion() is null"");
  }
  if (versionStr2 == null) {
    throw new MLContextException(""Second version argument to compareVersion() is null"");
  }
  Scanner scanner1=null;
  Scanner scanner2=null;
  try {
    scanner1=new Scanner(versionStr1);
    scanner2=new Scanner(versionStr2);
    scanner1.useDelimiter(""\\\\."");
    scanner2.useDelimiter(""\\\\."");
    while (scanner1.hasNextInt() && scanner2.hasNextInt()) {
      int version1=scanner1.nextInt();
      int version2=scanner2.nextInt();
      if (version1 < version2) {
        return -1;
      }
 else       if (version1 > version2) {
        return 1;
      }
    }
    return scanner1.hasNextInt() ? 1 : 0;
  }
  finally {
    scanner1.close();
    scanner2.close();
  }
}","private static int compilePlatform(String stringstr3,String optionStr02){
  if (stringstr3 == null) {
    throw new MLContextException(""First version argument to compareVersion() is null"");
  }
  if (optionStr02 == null) {
    throw new MLContextException(""Second version argument to compareVersion() is null"");
  }
  Scanner scanker2=null;
  Scanner scaninertwo=null;
  try {
   scanker21=new Scanner(stringstr3);
    scaninertwo=new Scanner(optionStr02);
    scanker2.useDelimiter(""\\\\."");
    scaninertwo.useDelimiter(""\\\\."");
    while (scanker2.hasNextInt() && scaninertwo.hasNextInt()) {
      int versionone=scanker2.nextInt();
      int verupdate2aninertwo.nextInt();
      if (versionone < update2) {
        return -1;
      }
 else       if (versionone > update2) {
        return 1;
      }
    }
    return scanker2.hasNextInt() ? 1 : 0;
  }
  finally {
    scanker2.close();
    scaninertwo.close();
  }
}",170,7,"compareVersion:compilePlatform,versionStr1:stringstr3,versionStr2:optionStr02,scanner1:scanker2,scanner2:scaninertwo,version1:versionone,version2:update2,",774,6.55,ALERT
672,,,160,5,,1852,12.036605095863300,0
674,"private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
","private void saveOrClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent one=new Intent();
  one.setAction(Intent.ACTION_VIEW);
  one.putExtra(PARAM_NOTE,note);
  one.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,one);
  finish();
}
",130,5,"data:one,saveAndClose:saveOrClose,",154,1.0,ALERT
675,"private void warning(String msg,Throwable th){
  warning(msg);
  th.printStackTrace();
}
","private void raise(String title,Throwable sth){
  raise(title);
  sth.printStackTrace();
}
",23,3,"warning:raise,msg:title,th:sth,",156,0.92,ALERT
676,"private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
","private void captureDifferentString(String origStr,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (origStr == null ? newString != null : !origStr.equals(newString)) {
    map.put(appName,newString);
  }
}
",66,5,"oldString:origStr,",44,0.45,ALERT
677,"public void collapseTree(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}","public void collapsedTable(){
  for (int ci=1; ci < tree.getRowCount(); ++ci) {
    tree.collapseRow(ci);
  }
}",34,2,"collapseTree:collapsedTable,i:ci,",107,0.67,ALERT
678,"void wakeOut(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(msg);
  }
 }
","void workOut(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> send=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(send);
  }
 }
",138,5,"msg:send,wakeOut:workOut,",56,0.31,ALERT
679,,,72,1,,421,1.9556772470474200,0
680,"private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
","private Object createInner(SimpleObject pc,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(pc));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(pc);
  if (encounter == null) {
    return pc;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
",142,7,"post:pc,",79,0.59,ALERT
681,,,51,4,,1504,9.990699338912970,0
682,"public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}","public OsmElement pasteFrom(){
  List<Way> wards=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (wards != null && wards.size() == 1) {
      Way w=wards.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (wards != null && wards.size() == 1) {
      return wards.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}",213,6,"ways:wards,",58,0.52,ALERT
683,,,26,3,,899,5.205905357996620,0
684,"private static native boolean renderFrame(int[] pixels,long gifFileInPtr,int[] metaData);
","private static native boolean transformFrames(int[] Pips,long gifImageInReader,int[] metaData);
",20,4,"pixels:Pips,gifFileInPtr:gifImageInReader,renderFrame:transformFrames,",58,0.39,ALERT
685,"protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
","protected HttpURLConnection configureMessage(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
",48,2,"configureRequest:configureMessage,",31,0.22,ALERT
686,"public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {
  try {
    T result=action.call(self);
    Closeable temp=self;
    self=null;
    temp.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(self);
  }
}
","public static <T,UE extends Closeable>T wWithOpenabilityUE object,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {
  try {
    T reresultcactionall(object);
    Closeable teemptybject;
    object=null;
    empty.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(object);
  }
}
",75,6,"U:UE,withCloseable:WithOpenability,self:object,temp:empty,",306,2.16,ALERT
688,"public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public static String enccod(Serializable iso){
  ByteArrayOutputStream OO=new ByteArrayOutputStream();
  try {
    ObjectOutputStreampinss=new ObjectOutputStream(OO);
    try {
      oopinsriteObject(iso);
      pins.flush();
    }
  finally {
      pins.close();
    }
    return Base64.encodeBytes(OO.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",81,4,"encode:enccod,o:iso,bos:OO,oos:pins,",986,6.23,ALERT
689,"public PutIndexTemplateRequest aliases(XContentBuilder source){
  return aliases(source.bytes());
}
","public PutIndexTemplateRequest aliasing(XContentBuilder source){
  return aliasing(source.bytes());
}
",19,2,"aliases:aliasing,",30,0.19,ALERT
690,"public void send(XTraceReport report){
  outgoing.offer(report);
}
","public void push(XTraceReport report){
  outgoing.offer(report);
}
",16,2,"send:push,",31,0.24,ALERT
691,"public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}
","public default void addedContent(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addedContent(contentProvider,fileName,entryInformation,Optional.empty());
}
",36,4,"addFile:addedContent,",37,0.21,ALERT
693,"private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){
  List<ProgressThread> toRemove=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread pg : queuedThreads) {
      if (!pg.isBlockedByDependencies()) {
        if (!pg.isWaiting()) {
          toRemove.add(pg);
          EXECUTOR.execute(pg.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThread pg : toRemove) {
synchronized (LOCK) {
      queuedThreads.remove(pg);
    }
  }
}
","private static final void checkQueueForDependenciesAndExecuteUnblocked(){
  List<ProgressThread> TOKeep=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread pp : queuedThreads) {
      if (!pp.isBlockedByDependencies()) {
        if (!pp.isWaiting()) {
          TOKeep.add(pp);
          EXECUTOR.execute(pp.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThreapppg : TOKeep) {
synchronized (LOCK) {
      queuedThreads.remove(pp);
    }
  }
}
",99,3,"checkQueueForDependenciesAndExecuteUnblockedTasks:checkQueueForDependenciesAndExecuteUnblocked,toRemove:TOKeep,pg:pp,",664,4.69,ALERT
694,,,46,3,,1157,6.289207418759660,0
695,,,30,1,,431,5.273917897542320,0
696,"@RequestMapping(value=""/{bookmarkId}"",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value=""username"") String username,@PathVariable(value=""bookmarkId"") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);
  if (optional.isPresent()) {
    ObjectMapper mapper=new ObjectMapper();
    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);
    Bookmark bookmark=optional.get();
    BeanUtils.populate(bookmark,changeMap);
    bookmark=bookmarksRepository.save(bookmark);
    return new ResponseEntity<>(bookmark,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException(""Bookmark not found id = "" + bookmarkId);
  }
}
","@RequestMapping(value=""/{bookmarkId}"",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editbookmarks(@PathVariable(value=""username"") String manager,@PathVariable(value=""bookmarkId"") int BookMarkName,@RequestBody String properties) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> oatomicbookmarksRepository.findByIdAndUserUsernameBookMarkNamed,manager);
  if (atomic.isPresent()) {
    ObjectMapper manger=new ObjectMapper();
    Map<String,String> changediffObjectrmangeralue(properties,HashMap.class);
    Bookmarbackmarksrk=atomic.get();
    BeanUtils.populate(bbackmarksdiffObject);
    backmarks=bookmarksRepository.save(backmarks);
    return new ResponseEntity<>(backmarks,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException(""Bookmark not found id = "" + BookMarkName);
  }
}
",159,8,"editBookmark:editbookmarks,username:manager,bookmarkId:BookMarkName,json:properties,optional:atomic,mapper:manger,changeMap:diffObject,bookmark:backmarks,",423,4.16,ALERT
697,"public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}
","public void registerImage(PhotoEntity photo){
  photos.remove(photo);
}
",16,2,"removePhoto:registerImage,",19,0.1,ALERT
698,,,65,3,,1156,9.443540581067400,0
699,"public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}","public static double expp(double x,double mu,double p){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(p / (MathUtil.TWOPI * x * x* x)) - p * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}",94,5,"logpdf:expp,shape:p,",95,1.19,ALERT
700,"@Override public void closingOK(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}","@Override public void ClClElement(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}",97,4,"closingOK:ClClElement,",125,0.82,ALERT
701,"public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
","public String getAsFixed(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
",58,2,"betToString:getAsFixed,",30,0.17,ALERT
702,,,27,2,,658,4.294885182380680,0
703,"public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}","public double[] pope(double x_[]){
  return popY(new double[][]{x_})[0];
}",30,2,"popy:pope,",20,0.19,ALERT
704,"private static String normalisePath(String path){
  return path.replace('\\\\','/');
}
","private static String normalisePath(String parent){
  return parent.replace('\\\\','/');
}
",20,2,"path:parent,",35,0.31,ALERT
705,"private String trimUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}","private String trimmUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}",47,2,"trimUrl:trimmUrl,",33,0.21,ALERT
706,"private void ensureSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}","private void presurateChild(){
  if (empty == EMPTY_CHILDREN) {
    empty=new FPNode[1];
    return;
  }
newsmallewsize=empty.length == 1 ? INITIAL_SIZE : (empty.length << 1);
  empty=Arrays.copyOf(empty,newsmall);
}",55,3,"ensureSize:presurateChild,children:empty,newsize:newsmall,",242,2.14,ALERT
707,"private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}","private static void insertCommentsInNode(Node node,List<Comment> commentsFromImage){
  if (commentsFromImage.size() == 0)   return;
  List<Node> you=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(you);
  for (  Node component : you) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsFromImage) {
      if (PositionUtils.nodeContains(component,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsFromImage.removeAll(commentsInsideChild);
    insertCommentsInNode(component,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsFromImage) {
    if (comment.isLineComment()) {
      for (      Node component : you) {
        if (component.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(component,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(you);
  childrenAndComments.addAll(commentsFromImage);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsFromImage.removeAll(attributedComments);
  for (  Comment c : commentsFromImage) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}",370,12,"commentsToAttribute:commentsFromImage,children:you,child:component,",156,1.25,ALERT
708,,,118,5,,1130,9.150084646542870,0
709,"private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      cache.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}","private void waitForIteratorsCleased(IgniteCache<String,Integer> coll,int secS) throws InterruptedException {
  for (int io=0; io < secS; io++) {
    try {
      coll.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (io == 9) {
        for (int aj=0; aj < gridCount(); aj++)         executeOnLocalOrRemoteJvm(aj,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}",106,5,"waitForIteratorsCleared:waitForIteratorsCleased,cache:coll,secs:secS,i:io,j:aj,",669,5.24,ALERT
710,,,78,5,,1756,13.345886425177300,0
711,,,82,4,,1277,10.872894934813200,0
712,"public void showScores(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
","public void showSlanners(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
",20,3,"showScores:showSlanners,",29,0.13,ALERT
714,"public void monitor(ScalingStateMonitorTask task){
  taskQueue.add(task);
  startMonitor();
}
","public void start(ScalingStateMonitorTask type){
  taskQueue.add(type);
  startMonitor();
}
",20,2,"task:type,monitor:start,",63,0.33,ALERT
715,"protected Connection openConnection(boolean autocommit) throws SQLException {
  Connection conn=dataSrc.getConnection();
  conn.setAutoCommit(autocommit);
  return conn;
}
","protected Connection closeConnector(boolean autocomitter) throws SQLException {
  Connection ctx=dataSrc.getConnection();
  coctxetAutoCommit(autocomitter);
  return ctx;
}
",30,3,"openConnection:closeConnector,autocommit:autocomitter,conn:ctx,",254,1.53,ALERT
716,"public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}
","public boolean storeUser(String nil,String directory,String base) throws DataAccessException {
  if (checkUsernameExists(nil)) {
    return false;
  }
  storeUser(nil,directory,base);
  return true;
}
",41,4,"uri:base,password:directory,username:nil,registerUser:storeUser,",114,1.09,ALERT
717,,,69,5,,1846,15.916863858699800,0
719,"public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){
  this.cipher=cipher;
  this.digest=digest;
  this.hLen=digest.getDigestSize();
  this.saltLength=saltLength;
  if (implicit) {
    trailer=TRAILER_IMPLICIT;
  }
 else {
    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());
    if (trailerObj != null) {
      trailer=trailerObj.intValue();
    }
 else {
      throw new IllegalArgumentException(""no valid trailer for digest"");
    }
  }
}","public ISO9796d2PSSSigner(AsymmetricBlockCipher macher,Digest diggest,int sALTOffset,boolean explicit){
  this.macher=macher;
  this.diggest=diggest;
  this.hhmLendiggest.getDigestSize();
  this.sALTOffset=sALTOffset;
  if (explicit) {
    Trailer=TRAILER_IMPLICIT;
  }
 else {
    Integer ttraillerAvg(Integer)trailerMap.get(diggest.getAlgorithmName());
    if (traillerAvg != null) {
      Trailer=traillerAvg.intValue();
    }
 else {
      throw new IllegalArgumentException(""no valid trailer for digest"");
    }
  }
}",101,7,"cipher:macher,digest:diggest,saltLength:sALTOffset,implicit:explicit,hLen:hmLen,trailer:Trailer,trailerObj:traillerAvg,",1745,18.42,ALERT
720,"public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}","public String[] viewProduct() throws NetworkDeviceControllerException {
  String[] returnBu=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder bag=new StringBuilder();
  SSHPrompt Prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,bag);
  String[] lines=getLines(bag);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnBu[1]=groups[0];
    break;
case 1:
  returnBu[0]=groups[0];
break;
case 2:
returnBu[0]=groups[0];
break;
}
}
return returnBu;
}",188,10,"showVersion:viewProduct,returnVal:returnBu,buf:bag,prompt:Prompt,",415,1.19,ALERT
721,"public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}","public void importWithChange(Change sourcePatch){
  if (sourcePatch.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourcePatch.revision());
  }
  if (sourcePatch.timestamp() != null) {
    Date date=sourcePatch.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}",101,6,"sourceChange:sourcePatch,importFromChange:importWithChange,",147,0.58,ALERT
722,,,28,3,,1061,8.359693292776740,0
723,,,76,3,,1146,15.084676003456100,0
724,"public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException {
  DerOutputStream out, scratch;
  byte[] certificateRequestInfo;
  byte[] sig;
  if (encoded != null)   throw new SignatureException(""request is already signed"");
  this.subject=subject;
  scratch=new DerOutputStream();
  scratch.putInteger(BigInteger.ZERO);
  subject.encode(scratch);
  scratch.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(scratch);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  certificateRequestInfo=out.toByteArray();
  scratch=out;
  signature.update(certificateRequestInfo,0,certificateRequestInfo.length);
  sig=signature.sign();
  AlgorithmId algId=null;
  try {
    algId=AlgorithmId.get(signature.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algId.encode(scratch);
  scratch.putBitString(sig);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  encoded=out.toByteArray();
}","public void encodeandSign(X500Name session,Signature generifier) throws CertificateException, IOException, SignatureException {
  DerOutputStream plain, oscreenshot;
  byte[] certificateQUESTInfo;
  byte[] sIG;
  if (encoding != null)   throw new SignatureException(""request is already signed"");
  this.session=session;
  oscreenshot=new DerOutputStream();
  oscreenshot.putInteger(BigInteger.ZERO);
  session.encode(oscreenshot);
  oscreenshot.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(oscreenshot);
  plain=new DerOutputStream();
  plain.write(DerValue.tag_Sequence,oscreenshot);
  cecertificateQUESTInfolain.toByteArray();
  scoscreenshotlain;
  generifier.update(certificateQUESTInfo,0,certificateQUESTInfo.length);
  ssIGgenerifier.sign();
  AlgorithmId genid=null;
  try {
    agenidAlgorithmId.get(generifier.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algIgenidode(oscreenshot);
  oscreenshot.putBitString(sIG);
  plain=new DerOutputStream();
  plain.write(DerValue.tag_Sequence,oscreenshot);
  enencodinglain.toByteArray();
}",219,9,"encodeAndSign:encodeandSign,subject:session,signature:generifier,out:plain,scratch:oscreenshot,certificateRequestInfo:certificateQUESTInfo,sig:sIG,algId:genid,encoded:encoding,",1119,12.8,ALERT
725,"public void addComposite(TransformTreeNode node){
  parts.add(node);
}
","public void addComposite(TransformTreeNode one){
  parts.add(one);
}
",16,2,"node:one,",35,0.24,ALERT
726,,,35,1,,414,3.828400421142580,0
727,,,456,11,,3796,36.64046190977100,0
728,"public static byte[] readDex(File file) throws IOException {
  return readDex(file.toPath());
}
","public static byte[] readBrew(File file) throws IOException {
  return readBrew(file.toPath());
}
",24,2,"readDex:readBrew,",28,0.37,ALERT
729,"@SuppressWarnings(""deprecation"") public Object readMatrixOld(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}
","@SuppressWarnings(""deprecation"") public Object readTransformOLD(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}
",92,5,"readMatrixOld:readTransformOLD,",33,0.23,ALERT
730,"public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + algorithmURI + "" ""+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}
","public static void set(String argorithmDI,Class<? extends SignatureAlgorithmSpi> implementishingType) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,""Try to register "" + argorithmDI + "" ""+ implementishingType);
  }
  Class<? extends SignatureAlgorithmSpi>regclasss=algorithmHash.get(argorithmDI);
  if (regclass != null) {
   exArgt exArgs[]={argorithmDI,regclass};
    throw new AlgorithmAlreadyRegisteredException(""algorithm.alreadyRegistered"",exArg);
  }
  algorithmHash.put(argorithmDI,implementishingType);
}
",124,5,"register:set,algorithmURI:argorithmDI,implementingClass:implementishingType,registeredClass:regclass,exArgs:exArg,",315,3.47,ALERT
731,,,13,1,,430,3.5291741291681900,0
732,"public void putStyle(String styleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelector);
}
","public void registerTheme(String liInit,StyleSelector styleSELECTo){
  try {
    intIdd=Integer.parseInt(liInit);
    mMaxstyleid=Math.max(mMaxstyleid,Id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(liInit,styleSELECTo);
}
",52,5,"putStyle:registerTheme,styleId:liInit,styleSelector:styleSELECTo,id:Id,mMaxStyleId:mMaxstyleid,",301,2.5,ALERT
733,"public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
","public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object project=eval(source,lineNo,columnNo,funcBody);
  if (project instanceof Closure) {
    Closure closure=(Closure)project;
    return closure.call(arguments.toArray());
  }
  return project;
}
",71,9,"object:project,",104,1.14,ALERT
734,"public void addLast(StatementSequence statements){
  if (statements != null) {
    sequence.addAll(statements.sequence);
  }
}
","public void insertAny(StatementSequence stations){
  if (stations != null) {
    sequence.addAll(stations.sequence);
  }
}
",26,2,"addLast:insertAny,statements:stations,",153,1.51,ALERT
735,"private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}","private static List<Vector2D> buildSquetragonal(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}",60,4,"buildQuadrilateral:buildSquetragonal,",35,0.32,ALERT
736,"private static String padRight(String s,int minLength){
  return String.format(""%1$-"" + minLength + ""s"",s);
}","private static String padRight(String js,int maxLen){
  return String.format(""%1$-"" + maxLen + ""s"",js);
}",27,3,"minLength:maxLen,s:js,",55,0.61,ALERT
737,,,80,2,,805,6.946018505096440,0
738,,,51,5,,1594,16.73709383010860,0
739,,,40,2,,728,7.468150381247200,0
740,"static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
","static void Updatestyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
",394,14,"updateStyle:Updatestyle,",109,1.07,ALERT
741,"public void removeRequest(InterruptRequest interruptRequest){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interruptRequest);
  }
}
","public void addResponse(InterruptRequest interpretStream){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interpretStream);
  }
}
",22,2,"removeRequest:addResponse,interruptRequest:interpretStream,",153,1.36,ALERT
742,,,161,6,,1368,11.616808160146100,0
743,"public Token nextRegex(Pattern pattern){
  if (!hasNextRegex(pattern))   throw new IllegalStateException(""No more occurrences found!"");
  Matcher matcher=anyMentionPattern.matcher(remaining);
  if (!matcher.find())   throw new IllegalStateException(""Couldn\'t find any matches!"");
  final int start=currentPosition + matcher.start();
  final int end=currentPosition + matcher.end();
  stepTo(end);
  return new Token(this,start,end);
}
","public Token newRext(Pattern model){
  if (!hasNextRegex(model))   throw new IllegalStateException(""No more occurrences found!"");
  Matcher mither=anyMentionPattern.mither(remaining);
  if (!mither.find())   throw new IllegalStateException(""Couldn\'t find any matches!"");
  final intstartt=currentPosition + mither.start();
  final intsized=currentPosition + mither.size();
  stepTo(size);
  return new Token(this,start,size);
}
",90,5,"nextRegex:newRext,pattern:model,matcher:mither,end:size,",217,2.17,ALERT
744,"public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}","public void invalidateAndUnmap(ByteBuffer... wavs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : wavs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}",55,3,"bufs:wavs,",29,0.38,ALERT
745,"public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
","public T iedNumbers(User... values){
  List<User> usersList=Arrays.asList(values);
  this.userPredicate=null;
  return instance();
}
",34,4,"users:values,allowedUsers:iedNumbers,",53,0.42,ALERT
747,"private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}","private double an(double[] score){
  double function=0;
  for (int i=0; ip< scpre.length; i++)p  refunctionscore[p];
  return refunction score.length;
}",46,4,"mean:an,vec:score,result:function,i:p,",191,1.85,ALERT
748,"public void updateView(){
  if (fInputElement != null && fParentComposite != null) {
    IndicatorViewState oldState=fStateMap.get(fInputElement);
    boolean reload=fFilesToReoad.contains(fInputElement);
    if (reload || oldState == null) {
      JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);
      if (jsonObject == null)       return;
      fFilesToReoad.remove(fInputElement);
      fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState);
      fStateMap.put(fInputElement,fState);
    }
 else {
      fState=oldState;
    }
    setPartName(fState.indicatorType);
    showPage(PAGE_VIEWER);
    fTreeViewer.setInput(fState.jsonObject);
    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());
  }
 else {
    setPartName(DEFAULT_PART_NAME);
  }
}
","public void fillPreview(){
  if (fInputElement != null && fParentComposite != null) {
    IndicatorViewState oldVal=fStateMap.get(fInputElement);
    boolean reload=fFilesToReoad.contains(fInputElement);
    ifreloadad || oldVal == null) {
      JsonObject sonElement=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);
      if (sonElement == null)       return;
      fFilesToReoad.remove(fInputElement);
    sfParserte=new IndicatorViewState(fInputElemensonElementct,getSecuritySpec(),oldVal);
      fStateMap.put(fInputElement,sfParser);
    }
 else {
    sfParserte=oldVal;
    }
    setPartName(sfParser.indicatorType);
    showPage(PAGE_VIEWER);
    fTreeViewer.setInput(sfParser.sonElement);
    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());
  }
 else {
    setPartName(DEFAULT_PART_NAME);
  }
}
",152,5,"updateView:fillPreview,oldState:oldVal,jsonObject:sonElement,fState:sfParser,",207,2.08,ALERT
749,,,20,1,,450,6.15985228617986,0
750,"public void addAll(OVector v){
  expandFor(size + v.size - 1,null);
  System.arraycopy(v.vector,0,vector,size - v.size,v.size);
}","public void addArray(OVector volt){
  expandFor(size + volt.size - 1,null);
  System.arraycopy(volt.vector,0,vector,size - volt.size,volt.size);
}",45,2,"addAll:addArray,v:volt,",52,0.48,ALERT
751,,,15,1,,433,3.941783344745640,0
752,"public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}
","public static UiResult updateImage(URI route){
  return updateImage(route.toString());
}
",20,2,"uri:route,openUrl:updateImage,",62,0.46,ALERT
753,,,46,2,,662,7.084322730700180,0
754,"public ClassAnnotator(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}
","public ClassAnnotator(URL[] codbase,Properties comps){
  if (comps != null)   properties.putAll(comps);
  setAnnotationURLs(codbase);
}
",31,2,"codebase:codbase,props:comps,",349,3.06,ALERT
755,,,117,3,,1165,15.259678284327200,0
756,"public double norm(){
  double sum=0;
  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];
  return Math.sqrt(sum);
}","public double scale(){
  double sum=0;
  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];
  return Math.sqrt(sum);
}",48,3,"norm:scale,",68,0.59,ALERT
757,"public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){
  final FastFuture<T> f=new FastFuture<>();
  cf.thenAccept(null);
  cf.exceptionally(null);
  return f;
}
","public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){
  final FastFuture<T> fm=new FastFuture<>();
  cf.thenAccept(null);
  cf.exceptionally(null);
  return fm;
}
",51,3,"f:fm,",38,0.35,ALERT
758,"public PutIndexTemplateRequest mapping(String type,Object... source){
  mapping(type,PutMappingRequest.buildFromSimplifiedDef(type,source));
  return this;
}
","public PutIndexTemplateRequest matching(String attribute,Object... size){
  matching(attribute,PutMappingRequest.buildFromSimplifiedDef(attribute,size));
  return this;
}
",30,3,"mapping:matching,type:attribute,source:size,",618,5.79,ALERT
759,,,76,1,,448,3.8107596198717800,0
761,,,89,5,,1574,17.584010656674700,0
762,"@Deprecated public static NetworkParameters testNet(){
  return TestNet3Params.get();
}","@Deprecated public static NetworkParameters testNetwork(){
  return TestNet3Params.get();
}",17,1,"testNet:testNetwork,",17,0.13,ALERT
763,,,38,2,,651,5.360167070229850,0
764,"public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}
","public boolean isFromWrite(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isFromWrite()) {
      return true;
    }
  }
  return false;
}
",54,3,"isToRead:isFromWrite,",93,0.85,ALERT
765,"public void record(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
","public void save(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
",107,3,"record:save,",41,0.45,ALERT
766,,,166,3,,1120,10.721862045923900,0
767,,,34,3,,858,13.437377766768100,0
768,"public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
","public static String getDatetime(java.util.Date date,String source,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(source,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.source(date);
  }
}
",49,6,"format:source,formatDateTime:getDatetime,",68,0.69,ALERT
769,"public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}","public void moveItems(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}",42,2,"deleteItem:moveItems,",22,0.13,ALERT
770,"public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] pts){
  for (int i=0; i < testPts.length; i++) {
    Coordinate testPt=testPts[i];
    if (!isInList(testPt,pts))     return testPt;
  }
  return null;
}","public static Coordinate ptNotinChain(Coordinate[] estTTS,Coordinate[] ptes){
  for (intji=0;ji < estTTS.length; j++) {
    CoordinatetestEtt=estTTS[j];
    if (!isInList(ttestEtptes))     return testEt;
  }
  return null;
}",59,5,"ptNotInList:ptNotinChain,testPts:estTTS,pts:ptes,i:j,testPt:testEt,",428,5.29,ALERT
771,"private int parseLinkLabel(){
  String m=match(LINK_LABEL);
  return m == null ? 0 : m.length();
}","private int parseConnectLink(){
  String mac=match(LINK_LABEL);
  return mac == null ? 0 : mac.length();
}",28,2,"m:mac,parseLinkLabel:parseConnectLink,",58,0.44,ALERT
772,"public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(response);
  Assert.assertTrue(response.size() > 0);
  return response;
}","public static List<BatchResponse> postWithOneTransaction(final RequestSpecification resultSPEC,final ResponseSpecification responseSpec,final BatchRequest Br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(Br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse>successfule=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(resultSPEC,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(successful);
  Assert.assertTrue(successful.size() > 0);
  return successful;
}",95,7,"postWithSingleRequest:postWithOneTransaction,requestSpec:resultSPEC,br:Br,response:successful,",386,4.16,ALERT
773,"public static Number asNumber(String value,Supplier<Number> defaultValueProvider){
  if (value != null) {
    try {
      return Short.valueOf(value);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(value);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(value);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(value);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(value);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(value);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(value);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultValueProvider != null ? defaultValueProvider.get() : null;
}","public static Number asDate(String hello,Supplier<Number> defaultUnitParser){
  if (hello != null) {
    try {
      return Short.valueOf(hello);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(hello);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(hello);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(hello);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(hello);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(hello);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(hello);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultUnitParser != null ? defaultUnitParser.get() : null;
}",161,3,"asNumber:asDate,value:hello,defaultValueProvider:defaultUnitParser,",142,1.1,ALERT
774,"private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}","private static void ort2(int[] xml,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && xml[j - 1] > xml[j]; j--)     swap(xml,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(xml,l,l + s,l + 2 * s);
      m=med3(xml,m - s,m,m + s);
      n=med3(xml,n - 2 * s,n - s,n);
    }
    m=med3(xml,l,m,n);
  }
  int v=xml[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && xml[b] <= v) {
      if (xml[b] == v)       swap(xml,a++,b);
      b++;
    }
    while (c >= b && xml[c] >= v) {
      if (xml[c] == v)       swap(xml,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(xml,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(xml,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(xml,b,n - s,s);
  if ((s=b - a) > 1)   ort2(xml,off,s);
  if ((s=d - c) > 1)   ort2(xml,n - s,s);
}",437,15,"x:xml,sort1:ort2,",438,4.56,ALERT
775,"protected void engineUpdate(byte b) throws SignatureException {
  messageDigest.update(b);
  needsReset=true;
}
","protected void needsProcess(byte b) throws SignatureException {
  messageDigest.update(b);
  needsReset=true;
}
",22,2,"engineUpdate:needsProcess,",21,0.18,ALERT
776,"public Collection<Node> matchingScenariosAndExamples(final Feature feature){
  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}
","public Collection<Node> matchingScenariosAndExamples(final Feature feature){
  final List<ScenarioDefinition> allScenarioario=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarioario) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}
",127,5,"allScenarios:allScenarioario,",51,0.58,ALERT
777,"public static void registerDecayableObject(Decayable obj){
  decayObjects.add(obj);
}
","public static void registerDecayableObject(Decayable Obj){
  decayObjects.add(Obj);
}
",17,2,"obj:Obj,",58,0.67,ALERT
778,,,91,4,,1019,14.868444168567700,0
779,"public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}
","public void readProperty(final String no,final float value) throws java.io.IOException {
  readProperty(no,Float.toString(value));
}
",32,3,"writeField:readProperty,name:no,",59,0.41,ALERT
780,"public ScriptBuilder data(byte[] data){
  if (data.length == 0)   return smallNum(0);
 else   return data(chunks.size(),data);
}","public ScriptBuilder init(byte[] init){
  if (init.length == 0)   return smallNum(0);
 else   return init(chunks.size(),init);
}",38,1,"data:init,",37,0.32,ALERT
781,,,12,1,,402,3.752078723907470,0
783,,,20,1,,440,3.832808089256290,0
784,"public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
","public static LowMemoryWatcher stop(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
",19,2,"register:stop,",29,0.25,ALERT
785,,,146,7,,1866,51.22351632912950,0
786,"public static void delete(Path path){
  if (path != null) {
    path=path.toAbsolutePath();
    if (inTargetDir(path)) {
      try {
        IoUtil.delete(path);
      }
 catch (      IOException e) {
        printError(""Unable to remove \'"" + path.toAbsolutePath() + ""\'"",e);
      }
    }
 else {
      printError(""Will not remove directory that is outside test target area: "" + path);
    }
  }
}
","public static void create(Path handler){
  if (handler != null) {
    handler=handler.toAbsolutePath();
    if (inTargetDir(handler)) {
      try {
        IoUtil.create(handler);
      }
 catch (      IOException e) {
        printError(""Unable to remove \'"" + handler.toAbsolutePath() + ""\'"",e);
      }
    }
 else {
      printError(""Will not remove directory that is outside test target area: "" + handler);
    }
  }
}
",77,2,"delete:create,path:handler,",123,1.08,ALERT
787,"public UniformDistribution estimate(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}","public UniformDistribution estimates(double emin,double max,final int call){
  double grow=(call > 1) ? 0.5 * (max - emin) / (call - 1) : 0.;
  return new UniformDistribution(Math.max(emin - grow,-Double.MAX_VALUE),Math.emin(max + grow,Double.MAX_VALUE));
}",73,5,"min:emin,count:call,estimate:estimates,",151,1.54,ALERT
791,,,93,4,,1500,14.607811617851300,0
792,"@Override public void openElement(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
","@Override public void OpenOperation(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
",44,4,"openElement:OpenOperation,",28,0.18,ALERT
793,"public static List<String> splitPath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
","public static List<String> parsepath(File file){
  List<String> core=new ArrayList<>();
  File current=file;
  while (current != null) {
    core.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(core);
  return core;
}
",68,4,"output:core,splitPath:parsepath,",118,1.12,ALERT
794,"public void testConstructorSignBytesZeroNull2(){
  byte aBytes[]={};
  int aSign=0;
  byte rBytes[]={0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",0,aNumber.signum());
}","public void assertConstructorSignBytesZeroNull256(){
  byte asByte[]={};
  int rContract=0;
  byte resultApps[]={0};
  BigInteger aNumaoBER BigInteger(rContract,asByte);
  byte resBRESbytesew byte[resultApps.length];
RESbyteses=aoBER.toByteArray();
  for (int ui=0; ui < RESbytes.length; ui++) {
    assertTrue(resBRESbytes=ui resultApps[ui]);
  }
  assertEquals(""incorrect sign"",0,aoBER.signum());
}",105,7,"testConstructorSignBytesZeroNull2:assertConstructorSignBytesZeroNull256,aSign:rContract,rBytes:resultApps,aNumber:aoBER,aBytes:asByte,resBytes:RESbytes,i:ui,",369,4.24,ALERT
796,,,93,5,,1536,18.070381967226700,0
797,,,29,2,,787,9.081359891096750,0
798,"public void schedule(TimerTask task,long delay){
  if (delay < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(task,System.currentTimeMillis() + delay,0);
}","public void slpatch(TimerTask thread,long rate){
  if (rate < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(thread,System.currentTimeMillis() + rate,0);
}",40,3,"schedule:slpatch,task:thread,delay:rate,",140,1.52,ALERT
799,,,73,3,,1138,11.790536955992400,0
800,,,16,2,,773,7.031232929229740,0
801,"void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
","void updateSync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
",17,3,"saveAsync:updateSync,",57,0.38,ALERT
802,"private void checkWidth(final int[] rect){
  final int x1=rect[0];
  final int y2=rect[1];
  final int y1=y2 + rect[3];
  final int x2=x1 + rect[2];
  if (x1 < pageX1) {
    pageX1=x1;
  }
  if (x2 > pageX2) {
    pageX2=x2;
  }
  if (y1 > pageY1) {
    pageY1=y1;
  }
  if (y2 < pageY2) {
    pageY2=y2;
  }
}","private void checkWidth(final int[] post){
  final int eyFirst=post[0];
  final int y2=post[1];
  final int y1=y2 + post[3];
  final int x2=eyFirst + post[2];
  if (eyFirst < pageX1) {
    pageX1=eyFirst;
  }
  if (x2 > pageX2) {
    pageX2=x2;
  }
  if (y1 > pageY1) {
    pageY1=y1;
  }
  if (y2 < pageY2) {
    pageY2=y2;
  }
}",100,10,"rect:post,x1:eyFirst,",90,0.93,ALERT
803,,,27,2,,797,5.996382061640420,0
804,"private void paintForegroundDisabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(disabledColor);
  g.fill(s);
}","private void paintForegroundPosabled(Graphics2D gt,int duration,int index){
  Shape s=gsecodeArrowPath(duration,index);
  gt.setPaint(disabledColor);
  gt.fill(gs);
}",39,5,"paintForegroundDisabled:paintForegroundPosabled,g:gt,width:duration,height:index,s:gs,",1473,12.25,ALERT
805,"public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
","public static void registerTransportVMBEann(String servername){
  MBeanServer mBeanServer=getMBeanServer(servername);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(servername);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + servername + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + servername + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + servername + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + servername + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
",220,5,"containerName:servername,registerTransportMBean:registerTransportVMBEann,",126,1.41,ALERT
806,,,19,2,,788,5.613286542892460,0
807,,,29,4,,1240,13.35268292427060,0
808,"protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
","protected final void produger(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
",71,5,"merge:produger,",28,0.35,ALERT
809,"@Override public boolean isEnabled(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.isEnabled();
  }
 else {
    if (slider != null) {
      return slider.isEnabled();
    }
  }
  return false;
}
","@Override public boolean lisActive(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.lisActive();
  }
 else {
    if (slider != null) {
      return slider.lisActive();
    }
  }
  return false;
}
",52,1,"isEnabled:lisActive,",26,0.25,ALERT
810,,,18,2,,629,5.072856227556870,0
811,,,30,2,,804,7.37106739282608,0
812,,,17,1,,412,3.294444457689920,0
813,"@Override public void increment(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}","@Override public void increrate(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    isourceize - bin > a.length) {
      short[] tmpdata=new short[growSize(a.length,source - bin)];
      System.arraycopy(a,0,tmpdata,-bin,source);
      a=tmpdata;
    }
 else {
      System.arraycopy(a,0,a,-bin,source);
      Arrays.fill(a,0,-bin,(short)0);
    }
    a[0]=val;
    assert (a.length >= source - bin);
    offset-=bin;
    source-=bin;
  }
 else   if (bin >= a.length) {
    short[] tmpdata=new short[growSize(a.length,bin + 1)];
    System.arraycopy(a,0,tmpdata,0,source);
    tmpdata[bin]=val;
    a=tmpdata;
    source=bin + 1;
    rand=Double.MAX_VALUE;
  }
 else {
    if (bin >= source) {
      source=bin + 1;
    }
    a[bin]+=val;
  }
}",237,9,"increment:increrate,data:a,size:source,max:rand,",428,4.3,ALERT
815,"protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}","protected void smartInsertAfterBracket(IDocument document,DocumentCommand mission){
  if (mission.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(mission.offset == document.getLength() ? mission.offset - 1 : mission.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,mission.offset);
    if (whiteend == mission.offset) {
      int indLine=findMatchingOpenBracket(document,line,mission.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer moveTEXT=new StringBuffer(getIndentOfLine(document,indLine));
        moveTEXT.append(document.get(whiteend,mission.offset - whiteend));
        moveTEXT.append(mission.text);
        mission.length=mission.offset - start;
        mission.offset=start;
        mission.text=moveTEXT.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}",215,12,"command:mission,replaceText:moveTEXT,",272,4.73,ALERT
816,"public void writeLong(long value) throws IOException {
  checkWritePrimitiveTypes();
  primitiveTypes.writeLong(value);
}
","public void WriteInt(long value) throws IOException {
  checkWritePrimitiveTypes();
  primitiveTypes.WriteInt(value);
}
",22,2,"writeLong:WriteInt,",26,0.19,ALERT
817,"public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}","public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.gross+=result;
  if (keep != -1 && all.size() >= keep) {
    this.gross=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int parent=0; parent < keep; parent++) {
      this.gross+=all.get(parent);
    }
  }
}",105,5,"i:parent,total:gross,",75,0.59,ALERT
818,,,47,3,,1139,8.15648124217987,0
819,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.equals(size.prototype);
}
","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize to=(PrototypeSize)o;
  return prototype.equals(to.prototype);
}
",54,3,"size:to,",40,0.32,ALERT
820,,,26,1,,448,3.0275928537050900,0
821,"public boolean isLessThenOrEqualTo(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) <= 0);
}","public boolean isLessThenOreqto(Instance Instance){
  assertDefined();
  BigDecimal ThisUnit=notNull(this);
  BigDecimal parameter=notNull(Instance);
  return (ThisUnit.compareTo(parameter) <= 0);
}",41,4,"Percent:Instance,isLessThenOrEqualTo:isLessThenOreqto,thisValue:ThisUnit,",90,1.13,ALERT
822,"public static long objectFieldOffset(Field field){
  return UNSAFE.objectFieldOffset(field);
}
","public static long objectShortPosition(Field layer){
  return UNSAFE.objectShortPosition(layer);
}
",18,2,"objectFieldOffset:objectShortPosition,field:layer,",66,0.79,ALERT
824,"public void removeAddress(AddressEntity address){
  addresses.remove(address);
}
","public void updateContact(AddressEntity address){
  addresses.remove(address);
}
",16,2,"removeAddress:updateContact,",20,0.12,ALERT
825,"private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}
","private boolean advanceAiDownWith(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo pb,int time){
  AreaPanel ap=pb.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == pb.currTtId)   return false;
  sortedApiTree.remove(pb);
  if (pb.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(pb);
  return true;
}
",95,7,"advanceApiUpTo:advanceAiDownWith,api:pb,",106,1.17,ALERT
826,"public void readData(DataInput din) throws IOException {
  din.readShort();
  count=din.readUnsignedShort();
  registers=new InputRegister[count];
  for (int i=0; i < count; i++) {
    registers[i]=new SimpleInputRegister(din.readShort());
  }
}","public void sendDATA(DataInput ds) throws IOException {
  ds.readShort();
  keep=ds.readUnsignedShort();
  registers=new InputRegister[keep];
  for (int i=0; i < keep; i++) {
    registers[i]=new SimpleInputRegister(ds.readShort());
  }
}",64,5,"count:keep,readData:sendDATA,din:ds,",149,1.33,ALERT
827,,,48,4,,1443,11.41973401705420,0
828,"public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}","public void service(ByteBuffer message) throws IOException {
  message.position(0);
  if (mFileChannel.size() + message.capacity() < mMaxSize) {
    while (message.hasRemaining()) {
      mFileChannel.service(message);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=message.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.service(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.service(next);
    }
    updateWaveFileSize();
  }
}",186,6,"buffer:message,write:service,",117,0.92,ALERT
829,"private boolean rContainsRMInstruction(ProgramBlock pb,String varName){
  if (pb instanceof WhileProgramBlock) {
    WhileProgramBlock tmp=(WhileProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof IfProgramBlock) {
    IfProgramBlock tmp=(IfProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true;
    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof ForProgramBlock) {
    ForProgramBlock tmp=(ForProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : pb.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains(""rmfilevar"" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains(""rmvar"" + Lop.OPERAND_DELIMITOR + varName)) {
        return true;
      }
    }
  }
  return false;
}
","private boolean rContainsRRInstression(ProgramBlock fp,String varN){
  if (fp instanceof WhileProgramBlock) {
    WhileProgramBlock project=(WhileProgramBlock)fp;
    for (    ProgramBlock ctx : project.getChildBlocks())     if (rContainsRRInstression(ctx,varN))     return true;
  }
 else   if (fp instanceof IfProgramBlock) {
    IfProgramBlock project=(IfProgramBlock)fp;
    for (    ProgramBlock ctx : project.getChildBlocksIfBody())     if (rContainsRRInstression(ctx,varN))     return true;
    for (    ProgramBlock ctx : project.getChildBlocksElseBody())     if (rContainsRRInstression(ctx,varN))     return true;
  }
 else   if (fp instanceof ForProgramBlock) {
    ForProgramBlock project=(ForProgramBlock)fp;
    for (    ProgramBlock ctx : project.getChildBlocks())     if (rContainsRRInstression(ctx,varN))     return true;
  }
 else   if (fp instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : fp.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains(""rmfilevar"" + Lop.OPERAND_DELIMITOR + varN) || instStr.contains(""rmvar"" + Lop.OPERAND_DELIMITOR + varN)) {
        return true;
      }
    }
  }
  return false;
}
",224,7,"c:ctx,tmp:project,varName:varN,pb:fp,rContainsRMInstruction:rContainsRRInstression,",241,3.43,ALERT
830,"private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    s.writeObject(attrEnum.nextElement());
  }
}
","private void WriteBytes(java.io.ObjectOutputStream details) throws java.io.IOException {
  details.defaultWriteObject();
  details.writeInt(attrs.size());
  Enumeration<Attribute> attrENUM=attrs.elements();
  while (attrENUM.hasMoreElements()) {
   detailss.WriteBytes(attrENUM.nextElement());
  }
}
",69,3,"writeObject:WriteBytes,s:details,attrEnum:attrENUM,",150,1.38,ALERT
831,"public IStatus run(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask(""Downloading "" + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}","public IStatus download(IProgressMonitor Monitor){
  InputStream i=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] bf=new byte[1024];
  int zipRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    i=url.openStream();
    long totalBytesRead=0L;
    int responseStatusNumber=connection.getResponseCode();
    if (responseStatusNumber >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format(""Remote ServerError: {0} ({1})"",responseStatusNumber,connection.getResponseMessage()));
    }
    long mediaType=connection.getContentLength();
    output=new FileOutputStream(target);
    Monitor.beginTask(""Downloading "" + url.toString(),(int)mediaType);
    while (jobStatus == Status.OK_STATUS) {
      if (mediaType > 0 && totalBytesRead >= mediaType) {
        break;
      }
   zipReadead=i.read(bf);
      if (zipRead == -1) {
        break;
      }
      output.write(bf,0,zipRead);
    totalBytesReadad+=zipRead;
      Monitor.worked(zipRead);
      if (Monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""Malformed URL: "" + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,""IO error while downloading "" + url.toExternalForm(),e);
  }
  closeStreams(i,output);
  return jobStatus;
}",307,11,"run:download,monitor:Monitor,input:i,b:bf,bytesRead:zipRead,responseStatusCode:responseStatusNumber,contentLength:mediaType,",807,8.52,ALERT
832,"@Override public void close() throws IOException {
  input.close();
}
","@Override public void one() throws IOException {
  input.one();
}
",17,1,"close:one,",34,0.21,ALERT
833,"public Set<String> find(T object){
  if (!locations.containsKey(object)) {
    locations.put(object,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(object));
}
","public Set<String> replace(T o){
  if (!locations.containsKey(o)) {
    locations.put(o,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(o));
}
",51,2,"object:o,find:replace,",64,0.58,ALERT
835,,,17,2,,795,6.531953426202140,0
836,"public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}","public static TDoubleDoubleHashMap createCumulativeAggor(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double max=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    max+=val;
    histogram.put(key,max);
  }
  return histogram;
}",68,6,"sum:max,createCumulativeHistogram:createCumulativeAggor,",73,0.72,ALERT
837,,,58,2,,828,8.253947897752130,0
838,"@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}","@Override public boolean addNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean product=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",product);
  return product;
}",45,2,"result:product,hasNext:addNext,",50,0.51,ALERT
839,"private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){
  int newItemGroupId=newItem.getGroupId();
  checkExistenceOfGroup(newItemGroupId);
  int pivotIndex=findItemIndex(pivotID);
  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);
  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);
    int index=findGroupIndex(newItemGroupId);
    if (index >= 0) {
      mItems.add(index,newItem);
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
 else {
    if (newItemGroupId != NO_GROUP_ID) {
      int lastGroupIndex=findLastGroupIndex(newItemGroupId);
      if (lastGroupIndex == mItems.size()) {
        if (positioned == Positioned.BEFORE) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
 else         if (positioned == Positioned.AFTER) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex + 1,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
      }
 else {
        if (newItemGroupId == pivot.getGroupId()) {
          if (positioned == Positioned.BEFORE) {
            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivotIndex,newItem);
            }
 else {
              mItems.add(lastGroupIndex + 1,newItem);
            }
          }
 else           if (positioned == Positioned.AFTER) {
            mItems.add(pivotIndex + 1,newItem);
          }
        }
 else {
          mItems.add(lastGroupIndex + 1,newItem);
        }
      }
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
  onItemsChanged();
  return newItem;
}","private SublimeBaseMenuItem setInternal(int PilotID,Positioned posed,SublimeBaseMenuItem otherHour){
  int nenewItemGroupEndtherHour.getGroupId();
  checkExistenceOfGroup(newItemGroupEnd);
  int PivotId=findItemIndex(PilotID);
  SublimeBaseMenuIttopivotvot=mItems.get(PivotId);
  if (otherHour.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupEnd);
    int iconnectionfindGroupIndex(newItemGroupEnd);
    if (connection >= 0) {
      mItems.add(inconnectiontherHour);
    }
 else {
      if (posed == Positioned.BEFORE) {
        if (topivot.getGroupId() == NO_GROUP_ID || topivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(piPivotIdtherHour);
        }
 else {
          mItems.add(otherHour);
        }
      }
 else       if (posed == Positioned.AFTER) {
        iftopivotot.getGroupId() == NO_GROUP_ID || pPivotId== findLastGroupIndex(newItemGroupEnd)) {
          mItems.add(piPivotId 1,otherHour);
        }
 else {
          mItems.add(otherHour);
        }
      }
    }
  }
 else {
    if (newItemGroupEnd != NO_GROUP_ID) {
      int llastGroupIdfindLastGroupIndex(newItemGroupEnd);
      if (lastGroupId == mItems.size()) {
        if (posed == Positioned.BEFORE) {
          itopivotvot.getGroupId() == NO_GROUP_ID || PivotId == findGroupIndex(topivot.getGroupId())) {
            mItems.add(piPivotIdtherHour);
          }
 else {
            mItems.add(otherHour);
          }
        }
 else         if (posed == Positioned.AFTER) {
          itopivotvot.getGroupId() == NO_GROUP_ID || PivotId == findLastGroupIndex(topivot.getGroupId())) {
            mItems.add(piPivotId 1,otherHour);
          }
 else {
            mItems.add(otherHour);
          }
        }
      }
 else {
        if (newItemGroupEnd == topivot.getGroupId()) {
          if (posed == Positioned.BEFORE) {
            if (topivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(piPivotIdtherHour);
            }
 else {
              mItems.add(lalastGroupId 1,otherHour);
            }
          }
 else           if (posed == Positioned.AFTER) {
            mItems.add(piPivotId 1,otherHour);
          }
        }
 else {
          mItems.add(lalastGroupId 1,otherHour);
        }
      }
    }
 else {
      if (posed == Positioned.BEFORE) {
        itopivotvot.getGroupId() == NO_GROUP_ID || findGroupIndtopivotvot.getGroupId()) == PivotId) {
          mItems.add(piPivotIdtherHour);
        }
 else {
          mItems.add(otherHour);
        }
      }
 else       if (posed == Positioned.AFTER) {
        itopivotvot.getGroupId() == NO_GROUP_ID || PivotId == findLastGroupIndex(topivot.getGroupId())) {
          mItems.add(piPivotId 1,otherHour);
        }
 else {
          mItems.add(otherHour);
        }
      }
    }
  }
  onItemsChanged();
  return otherHour;
}",555,9,"addInternal:setInternal,pivotID:PilotID,positioned:posed,newItem:otherHour,newItemGroupId:newItemGroupEnd,pivotIndex:PivotId,pivot:topivot,index:connection,lastGroupIndex:lastGroupId,",724,8.41,ALERT
840,,,33,1,,446,4.101476510365800,0
841,,,35,3,,604,5.355129341284430,0
843,"public final double distance(){
  return Math.sqrt(distance_square());
}
","public final double div(){
  return Math.sqrt(distance_square());
}
",18,1,"distance:div,",32,0.3,ALERT
844,"@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}
","@Deprecated public void write(final String name,final String value){
  List<String> Li=map.get(name);
  if (Li != null) {
    Li.add(value);
  }
 else {
    Li=Lists.newArrayList(value);
    map.put(name,Li);
  }
}
",65,4,"l:Li,append:write,",71,0.53,ALERT
845,"protected void doResumeUpdates(){
  Calendar cal=Calendar.getInstance(Locale.getDefault());
  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}","protected void doResumeAnimalls(){
  Calendar ca=Calendar.getInstance(Locale.getDefault());
 mFirstDateOfMonthk=ca.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}",68,3,"doResumeUpdates:doResumeAnimalls,cal:ca,mFirstDayOfWeek:mFirstDateOfMonth,",126,0.97,ALERT
846,"public double distance(Point2D pt){
  final double x_distance=(pt.getX() - x) * (pt.getX() - x);
  final double y_distance=(pt.getY() - y) * (pt.getY() - y);
  return Math.sqrt(x_distance + y_distance);
}","public double draw(Point2D pt){
  final double x_distance=(pt.getX() - x) * (pt.getX() - x);
  final double y_distance=(pt.getY() - y) * (pt.getY() - y);
  return Math.sqrt(x_distance + y_distance);
}",67,4,"distance:draw,",50,0.51,ALERT
847,"final void putByte(int offset,byte value){
  unsafe.putByte(offset + address,value);
}
","final void PutBit(int entry,byte scale){
  unsafe.PutBit(entry + address,scale);
}
",23,3,"putByte:PutBit,offset:entry,value:scale,",192,1.46,ALERT
848,"private void paintForegroundEnabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(enabledColor);
  g.fill(s);
}","private void paintForementComponent(Graphics2D img,int width,int height){
  Shape s=decodeArrowPath(width,height);
  img.setPaint(enabledColor);
  img.fill(s);
}",39,5,"paintForegroundEnabled:paintForementComponent,g:img,",155,1.26,ALERT
849,"private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}","private void taintPhoto(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}",215,8,"paintPreview:taintPhoto,",55,0.45,ALERT
850,"boolean nextSource() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream is=mSourceIt.next();
    if (is == null) {
      mSource=null;
      return false;
    }
 else {
      mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mInputBufferPosition=0;
    mInputBufferLength=0;
    mBufferLength=0;
    mBufferPosition=0;
    return true;
  }
  if (mSource != null) {
    mSource.close();
  }
  mSource=null;
  return false;
}","boolean NextInput() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream iris=mSourceIt.next();
    if (iris == null) {
      MStream=null;
      return false;
    }
 else {
      mSMStreamew BufferedInputStream(iris,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mOutputStreamLimit=0;
    mInputBufferLength=0;
    mChannelPosition=0;
    mCachePosition=0;
    return true;
  }
  if (MStream != null) {
    MStream.close();
  }
  MStream=null;
  return false;
}",102,7,"nextSource:NextInput,is:iris,mSource:MStream,mInputBufferPosition:mOutputStreamLimit,mBufferLength:mChannelPosition,mBufferPosition:mCachePosition,",296,2.9,ALERT
851,"protected void run_ThreadSizeLoop() throws Exception {
  for (int i=25; i <= 100; i+=25) {
    setNumWorkers(i);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}","protected void run_ThreadSizeWork() throws Exception {
  for (int index=25; index <= 100; index+=25) {
    setNumWorkers(index);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}",50,2,"run_ThreadSizeLoop:run_ThreadSizeWork,i:index,",146,1.05,ALERT
852,,,39,2,,772,9.867726270357770,0
853,"public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=b.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
","public boolean equasesCaps(String audio,int ci,String b,int bi,boolean issueCode){
  char ca=audio.charAt(ci);
  char cb=b.charAt(bi);
  if (issueCode) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}
",70,8,"a:audio,ignoreCase:issueCode,equalsChars:equasesCaps,ai:ci,",126,1.22,ALERT
854,"public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}","public static String[] splitWithoutEscaped(String sl,char separatorChar,boolean retainEmpty){
  int len=sl.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (sl.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (sl.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(sl.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(sl.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}",193,9,"str:sl,",101,0.98,ALERT
855,"private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
","private void cacheAttribute(String attrId,byte[][] frames){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,frames);
}
",34,4,"values:frames,",60,0.36,ALERT
856,"@Override public void start(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.start();
  }
}","@Override public void spawn(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.spawn();
  }
}",111,5,"start:spawn,",49,0.29,ALERT
857,"private static BufferedImage makeSquare(BufferedImage input){
  if (input.getHeight() == input.getWidth()) {
    return input;
  }
 else {
    int max=Math.max(input.getHeight(),input.getWidth());
    int dx=(max - input.getWidth()) / 2;
    int dy=(max - input.getHeight()) / 2;
    return createImg(max,max,input.getType(),null);
  }
}","private static BufferedImage drawCube(BufferedImage single){
  if (single.getHeight() == single.getWidth()) {
    return single;
  }
 else {
    int max=Math.max(single.getHeight(),single.getWidth());
    int dx=(max - single.getWidth()) / 2;
    int dy=(max - single.getHeight()) / 2;
    return createImg(max,max,single.getType(),null);
  }
}",98,5,"makeSquare:drawCube,input:single,",144,0.94,ALERT
858,"private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){
  final int[] awtPixels=new int[width * height];
  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);
  swtImageData.transparentPixel=TRANSPARENT_COLOR;
  final int step=swtImageData.depth / 8;
  final byte[] data=swtImageData.data;
  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);
  for (int i=0; i < height; i++) {
    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;
    for (int j=0; j < width; j++) {
      final int rgb=awtPixels[j + i * width];
      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {
        data[idx++]=(byte)(rgb >> k & 0xFF);
      }
    }
  }
  return swtImageData;
}","private ImageData awt2SWf(final BufferedImage bufferingPage,final int steps,final int size){
  final int[awtPasksls=new int[steps * size];
  final ImageDatswtVideoInfota=new ImageData(steps,size,24,PALETTE_DATA);
  swtVideoInfo.transparencyColor=TRANSPARENT_COLOR;
  final int row=swtVideoInfo.depth / 8;
  final byte[] value=swtVideoInfo.value;
  bufferingPage.getRGB(0,0,steps,size,awtPasks,0,steps);
  for (ini i=0i i < size; i++) {
    intidyx=(0 +ii) * swtVideoInfo.bytesPerLine + 0 * row;
    for (int l=0; l < steps; l++) {
      final intrgbb=awtPasks[l + i * steps];
      for (int ck=swtVideoInfo.depth - 8; ck >= 0; ck-=8) {
        value[idy++]=(byte)(rgb >> ck & 0xFF);
      }
    }
  }
  return swtVideoInfo;
}",197,14,"awtToSwt:awt2SWf,bufferedImage:bufferingPage,width:steps,height:size,awtPixels:awtPasks,swtImageData:swtVideoInfo,transparentPixel:transparencyColor,step:row,data:value,idx:idy,j:l,k:ck,",1241,13.07,ALERT
859,"public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}","public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int port=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (port < len) {
    byte b0=_base64de[src[port++]];
    byte b1=_base64de[src[port++]];
    byte b2=_base64de[src[port++]];
    byte b3=_base64de[src[port++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + port);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[port++])       throw new RuntimeException(""No linefeed found at position "" + (port - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[port++]];
  byte b1=_base64de[src[port++]];
  byte b2=_base64de[src[port++]];
  byte b3=_base64de[src[port++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + port);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}",515,14,"pos:port,",131,1.29,ALERT
860,,,25,2,,793,7.6670174638430300,0
861,"public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
","public void requestAfterexpectment(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
",97,4,"requestAfterExplanation:requestAfterexpectment,",69,0.8,ALERT
862,"@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}","@Override public int pass(byte[] buf,int offset,int lit) throws IOException {
  int available=_available;
  if (available > 0) {
    lit=Math.min(lit,available);
    lit=_next.pass(buf,offset,lit);
    if (lit > 0) {
      _available-=lit;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      lit=Math.min(lit,_available);
      lit=_next.pass(buf,offset,lit);
      if (lit > 0)       _available-=lit;
    }
 else {
      _available=-1;
      lit=-1;
    }
  }
 else {
    lit=-1;
  }
  return lit;
}",151,6,"len:lit,read:pass,",158,1.32,ALERT
863,"public void toFront(final WorkflowAnnotation anno){
  if (anno == null) {
    throw new IllegalArgumentException(""anno must not be null!"");
  }
synchronized (lock) {
    if (annotationsDrawOrder.remove(anno)) {
      annotationsDrawOrder.add(anno);
    }
    if (annotationsEventOrder.remove(anno)) {
      annotationsEventOrder.add(0,anno);
    }
  }
}","public void ToShift(final WorkflowAnnotation annotao){
  if (annotao == null) {
    throw new IllegalArgumentException(""anno must not be null!"");
  }
synchronized (lock) {
    if (annotationsDrawOrder.remove(annotao)) {
      annotationsDrawOrder.add(annotao);
    }
    if (annotationsEventOrder.remove(annotao)) {
      annotationsEventOrder.add(0,annotao);
    }
  }
}",69,2,"toFront:ToShift,anno:annotao,",228,2.11,ALERT
864,"public void addCondition(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}
","public void insertContent(final Condition category){
  conditions.add(category);
  category.setId(conditionIdCounter++);
}
",25,3,"condition:category,addCondition:insertContent,",67,0.41,ALERT
865,,,21,2,,790,8.435544470945990,0
867,"public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}
","public int compCompareWith(NamedMediaType self){
  return _name.compCompareWith(self._name);
}
",19,2,"compareTo:compCompareWith,other:self,",122,0.82,ALERT
868,"public Builder untilDate(Date date){
  untilDate=QUERY_DATE.format(date);
  return this;
}
","public Builder untildate(Date string){
  untildate=QUERY_DATE.format(string);
  return this;
}
",21,2,"untilDate:untildate,date:string,",111,0.84,ALERT
869,"public String prepOperand(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(label);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
","public String createExpant(String flower,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(flower);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
",88,6,"label:flower,prepOperand:createExpant,",74,0.63,ALERT
870,"private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}","private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream streamOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      streamOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(streamOutput));
    }
 else {
      streamOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(streamOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}",154,6,"fileOutput:streamOutput,",48,0.37,ALERT
871,"public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException {
  ZipArchiveInputStream in=null;
  FileOutputStream fos=null;
  String hmacString=null;
  try {
    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));
    ArchiveEntry entry;
    in.getNextEntry();
    fos=new FileOutputStream(tmpFile);
    IOUtils.copy(in,fos);
    entry=in.getNextEntry();
    hmacString=entry.getName();
    return Utils.hexToBytes(hmacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error(""Error parsing hmac: "" + hmacString + "" is no valid hex String"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""Error unwrapping VCF file"",e);
    throw e;
  }
 finally {
    if (fos != null) {
      fos.flush();
      fos.close();
    }
    if (in != null) {
      in.close();
    }
  }
}
","public static byte[] unwrapBBCFE(File sourceDir,File courseZip) throws FileNotFoundException, IOException {
  ZipArchiveInputStream inc=null;
  FileOutputStream fo=null;
  String hMacString=null;
  try {
   incn=new ZipArchiveInputStream(new FileInputStream(sourceDir));
    ArchiveEntry pe;
    inc.getNextEntry();
    fofoew FileOutputStream(courseZip);
    IOUtils.copy(inc,fo);
    epeinc.getNextEntry();
    hMacString=pe.getName();
    return Utils.hexToBytes(hMacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error(""Error parsing hmac: "" + hMacString + "" is no valid hex String"",e);
    throw e;
  }
catch (  Exception e) {
    logger.error(""Error unwrapping VCF file"",e);
    throw e;
  }
 finally {
    if (fo != null) {
      fo.flush();
      fo.close();
    }
    if (inc != null) {
      inc.close();
    }
  }
}
",178,7,"unwrapVCF:unwrapBBCFE,sourceFile:sourceDir,tmpFile:courseZip,in:inc,fos:fo,hmacString:hMacString,entry:pe,",391,3.67,ALERT
873,"public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}
","public boolean putData(PdxWriter writer,Object act){
  if (isRelevant(act.getClass())) {
    putData(writer,act,getClassInfo(act.getClass()));
    return true;
  }
  return false;
}
",47,3,"writeData:putData,obj:act,",99,0.8,ALERT
874,,,149,3,,1045,12.48994901975000,0
875,"public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getInt(index);
  }
  return value;
}","public static int ReadString(final JSONArray jsonA,final int thread,final boolean const,final boolean notZero) throws JSONException {
  if (const) {
    return jsonA.getInt(thread);
  }
  inotZeroull && jsonA.isNull(thread)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,thread));
  }
  int value=0;
  if (!jsonA.isNull(thread)) {
 valuelue=jsonA.getInt(thread);
  }
  return value;
}",99,6,"readInt:ReadString,jsonArray:jsonA,index:thread,required:const,notNull:notZero,",353,2.87,ALERT
876,"private void loadTranslationsCacheIfEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}
","private void loadTranslationscacheifNone(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation string : translations) {
      if (string.getLocale() != null && string.getProperty() != null && !StringUtils.isEmpty(string.getValue())) {
     serviceString key=ObjectTranslation.getCacheKey(string.getLocale(),string.getProperty());
        translationCacheservicet(key,string.getValue());
      }
    }
  }
}
",91,3,"loadTranslationsCacheIfEmpty:loadTranslationscacheifNone,translation:string,key:service,",394,8.24,ALERT
877,"public static String toUpperCase(String src){
  if (src == null) {
    return null;
  }
 else {
    return src.toUpperCase();
  }
}
","public static String toUhenCase(String img){
  if (img == null) {
    return null;
  }
 else {
    returnimgc.toUhenCase();
  }
}
",31,2,"toUpperCase:toUhenCase,src:img,",212,1.73,ALERT
878,"public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""""))   return;
  readConfig(new FileReader(filename));
}
","public void addConf(String download) throws FileNotFoundException {
  if (download == null || download.equals(""""))   return;
  addConf(new FileReader(download));
}
",35,2,"readConfig:addConf,filename:download,",185,1.2,ALERT
879,"public void sort(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.sort(values,0,size);
    sorted=true;
  }
}","public void by(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.by(values,0,size);
    sorted=true;
  }
}",33,1,"sort:by,",34,0.31,ALERT
880,,,103,4,,1407,17.617519271373700,0
881,"public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
","public void appentTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File ParentPath=calcParentTree();
  if (null != ParentPath) {
    treeFile=ParentPath;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
",62,4,"parentTree:ParentPath,ascendTree:appentTree,",58,0.68,ALERT
882,,,46,3,,1166,10.813801805178300,0
885,"@Override public boolean isArmed(){
  return other.isArmed();
}
","@Override public boolean isMerMed(){
  return other.isMerMed();
}
",16,1,"isArmed:isMerMed,",36,0.31,ALERT
886,"public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
","public static void assumetrue(BooleanSupplier assumptionSupportlier,Supplier<String> messagesupplier) throws TestAbortedException {
  if (!assumptionSupportlier.getAsBoolean()) {
    throwTestAbortedException(messagesupplier.get());
  }
}
",38,3,"assumeTrue:assumetrue,assumptionSupplier:assumptionSupportlier,messageSupplier:messagesupplier,",199,2.0,ALERT
887,"private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + ip);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + ip,nfe);
  }
  return parts.length;
}","private static int ipToBytes(String iri,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=iri.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + iri);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + iri);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + iri,nfe);
  }
  return parts.length;
}",157,7,"ip:iri,",59,0.63,ALERT
888,"protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}","protected int request(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.request(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}",75,7,"read:request,",52,0.38,ALERT
889,"protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
","protected void compure(){
  for (  ProcessInfoParameter varar : getParameter()) {
    String name=varar.getParameterName();
    if (varar.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=varar.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
",76,5,"para:varar,prepare:compure,",57,0.47,ALERT
890,"public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}
","public int in(long fileAddress,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileAddress);
  return _file.in(buffer,offset,length);
}
",41,5,"fileOffset:fileAddress,read:in,",68,0.47,ALERT
891,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mBitmapShader == null)   return;
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDurationText=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);
  canvas.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    canvas.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    canvas.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    canvas.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  canvas.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  canvas.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  canvas.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}","@Override protected void onDraw(Canvas scanalogue){
  super.onDraw(scanalogue);
  if (mBitmapShader == null)   return;
  scanalogue.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  scanalogue.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDurationText=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);
  scanalogue.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    scanalogue.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    scanalogue.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    scanalogue.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  scanalogue.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  scanalogue.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  scanalogue.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}",372,3,"canvas:scanalogue,",49,1.04,ALERT
892,,,177,8,,2455,24.293462733427700,0
893,"public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){
  registerOperators(name,operatorsXML,classLoader,null);
}
","public static void updateGenerands(String null,InputStream operatorsXIS,ClassLoader clLoad){
  updateGenerands(null,operatorsXIS,clLoad,null);
}
",27,4,"registerOperators:updateGenerands,name:null,operatorsXML:operatorsXIS,classLoader:clLoad,",845,7.1,ALERT
894,"public void save() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
","public void append() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
",58,1,"save:append,",30,0.21,ALERT
895,"public void close() throws IOException {
  if (!closed) {
    try {
      finish();
    }
  finally {
      out.close();
      closed=true;
    }
  }
}
","public void error() throws IOException {
  if (!closed) {
    try {
      finish();
    }
  finally {
      out.error();
      closed=true;
    }
  }
}
",36,1,"close:error,",34,0.23,ALERT
896,,,12,2,,794,5.772390631834670,0
897,"private void loadSubmissions(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}","private void loadSecmission(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}",99,5,"loadSubmissions:loadSecmission,",162,1.12,ALERT
899,,,80,3,,1079,9.78110777537028,0
901,"public static RepositoryMetaData readFrom(StreamInput in) throws IOException {
  String name=in.readString();
  String type=in.readString();
  Settings settings=Settings.readSettingsFromStream(in);
  return new RepositoryMetaData(name,type,settings);
}
","public static RepositoryMetaData readStream(StreamInput serv) throws IOException {
  String nausererv.readString();
  String tytitleerv.readString();
  Settings selsettings.readSettingsFromStream(serv);
  return new RepositoryMetaData(user,title,ls);
}
",51,5,"readFrom:readStream,in:serv,name:user,type:title,settings:ls,",774,5.68,ALERT
902,"private void assertDescribedResource(final BigdataValue describedResource,final IDescribeCache describeCache,final TestHelper h){
  final Graph actualGraph=describeCache.lookup(describedResource.getIV());
  assertNotNull(actualGraph);
  final Set<Statement> expectedGraph=getExpectedDescription(describedResource,h);
  h.compareGraphs(new HashSet<Statement>(actualGraph),expectedGraph);
  for (  Statement stmt : actualGraph) {
    assertTrue(stmt instanceof BigdataStatement);
    final BigdataStatement st=(BigdataStatement)stmt;
    assertNotNull(st.s());
    assertNotNull(st.p());
    assertNotNull(st.o());
    if (st.getContext() != null) {
      assertNotNull(st.c());
    }
  }
}
","private void assertDescribeResources(final BigdataValue describedFile,final IDescribeCache destribecache,final TestHelper ah){
  final Grinitialgraphrdestribecacheache.lookup(describedFile.getIV());
  assertNotNull(initialgraph);
  final Set<StatemenexpectedGroupaph=getExpectedDescription(describedFile,ah);
  ah.compareGraphs(new HashSet<Statement>(initialgraph),expectedGroup);
  for (  Statement sStlt: initialgraph) {
    assertTrue(Stlt instanceof BigdataStatement);
    final BigdataStatement sc=(BigdataStatement)Stlt;
    assertNotNull(sc.s());
    assertNotNull(sc.p());
    assertNotNull(sc.o());
    if (sc.getContext() != null) {
      assertNotNull(sc.c());
    }
  }
}
",141,8,"assertDescribedResource:assertDescribeResources,describedResource:describedFile,describeCache:destribecache,h:ah,actualGraph:initialgraph,expectedGraph:expectedGroup,stmt:Stlt,st:sc,",612,8.46,ALERT
903,"void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
","void generateWhile(Tree.WhileStatement page){
  Tree.WhileClause whileClause=page.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
",61,5,"that:page,",42,0.3,ALERT
904,"public static InputStream tryGzipInput(InputStream in) throws IOException {
  if (!in.markSupported()) {
    PushbackInputStream pb=new PushbackInputStream(in,16);
    in=pb;
    byte[] magic={0,0};
    pb.read(magic);
    pb.unread(magic);
    if (magic[0] == 31 && magic[1] == -117) {
      return new GZIPInputStream(pb);
    }
    return in;
  }
  in.mark(16);
  boolean isgzip=(in.read() == 31 && in.read() == -117);
  in.reset();
  if (isgzip) {
    in=new GZIPInputStream(in);
  }
  return in;
}","public static InputStream newGZipIn(InputStream in) throws IOException {
  if (!in.markSupported()) {
    PushbackInputStream pb=new PushbackInputStream(in,16);
    in=pb;
    byte[] magic={0,0};
    pb.read(magic);
    pb.unread(magic);
    if (magic[0] == 31 && magic[1] == -117) {
      return new GZIPInputStream(pb);
    }
    return in;
  }
  in.mark(16);
  boolean isgzip=(in.read() == 31 && in.read() == -117);
  in.reset();
  if (isgzip) {
    in=new GZIPInputStream(in);
  }
  return in;
}",144,5,"tryGzipInput:newGZipIn,",51,0.52,ALERT
905,"public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}","public static double toDingrees(double dx){
  if (Double.isInfinite(dx) || dx == 0.0) {
    return dx;
  }
  final double factai=57.2957763671875;
  final double actab=3.145894820876798E-6;
  double xyadoubleHighPart(dx);
  double xaadx - ya;
  return xbaa faactab xbaa factai + xya* factab+ xya* factai;
}",72,6,"toDegrees:toDingrees,x:dx,facta:factai,factb:actab,xa:ya,xb:aa,",355,4.04,ALERT
906,,,16,1,,398,3.1125197132428500,0
908,,,260,10,,2973,27.550289861361200,0
909,,,15,1,,410,4.000832716623940,0
910,"protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}
","protected String searchWith(final String source,String from){
  return searchWith(source,null,from);
}
",23,3,"target:source,start:from,searchFor:searchWith,",92,0.7,ALERT
911,"void deriveConfidenceValue(double baseCount){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) {
    m_confidence=m_recordCount / baseCount;
  }
}","void deriveConfirmationCorrection(double fileSize){
  if (Utils.isMissingValuc_coverce) && !Utils.isMissingValue(fileSize) && fileSize > 0) {
   c_covere=m_recordCount / fileSize;
  }
}",37,3,"deriveConfidenceValue:deriveConfirmationCorrection,baseCount:fileSize,m_confidence:c_cover,",298,2.63,ALERT
912,"private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}","private long convertAsMB(int megaInt){
  lonpartses=megaInt;
  parts=parts * 1024 * 1024;
  return parts;
}",25,3,"convertToBytes:convertAsMB,megaBytes:megaInt,bytes:parts,",145,1.15,ALERT
913,"public void test_getPutByteArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}","public void test_getPutBitarray(){
  final int SIZE=200;
  final IDataRecord queue=new FixedByteArrayBuffer(SIZE);
  assertEquals((byte)0,queue.getByte(0));
  assertEquals((byte)0,queue.getByte(SIZE - 1));
  final int prop=1;
  for (int uri=0; uri < LIMIT; uri++) {
    final byte[] pected=new byte[r.nextInt(SIZE - 2)];
    r.nextBytes(pected);
    queue.put(prop,pected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,exppectedngth,exppectedpropxpectedength,queue.array()));
    final byte[elal=new byte[pected.length];
    queue.get(prop,el);
    assertTrue(BytesUtil.bytesEqual(pected,el));
  }
  assertEquals((byte)0,queue.getByte(0));
  assertEquals((byte)0,queue.getByte(prop + SIZE - 2));
}",211,7,"test_getPutByteArray:test_getPutBitarray,size:SIZE,buf:queue,pos:prop,i:uri,expected:pected,actual:el,",2096,25.55,ALERT
914,,,99,4,,1260,9.056995749473570,0
915,"public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
","public void define(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
",62,4,"init:define,",87,0.67,ALERT
916,"public void close() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}","public void report() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.report();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}",68,2,"close:report,",37,0.24,ALERT
917,"public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}","public static String Morphia(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha Morphia=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(Morphia.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}",134,6,"morpha:Morphia,",119,0.98,ALERT
918,"private void extractWeightValues(List<Synapse> synapses){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}","private void extractWeightValues(List<Synapse> synapses){
  int exWeights=0;
  int inFeeks=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inFeeks++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inFeeks];
  exWeights=0;
  inFeeks=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inFeeks++]=w;
      }
    }
  }
}",151,7,"inWeights:inFeeks,",91,0.68,ALERT
919,"public static float parseFloat(String s){
  if (POSITIVE_INFINITY.equals(s)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(s)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(s)) {
    return Float.NaN;
  }
 else {
    s=trimPlusSign(s);
    return Float.parseFloat(s);
  }
}
","public static float createDouble(String ings){
  if (POSITIVE_INFINITY.equals(ings)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(ings)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(ings)) {
    return Float.NaN;
  }
 else {
    ings=trimPlusSign(ings);
    return Float.createDouble(ings);
  }
}
",78,2,"parseFloat:createDouble,s:ings,",357,2.78,ALERT
920,"public static boolean isFile(String path){
  File f=new File(path);
  return f.isFile();
}
","public static boolean asDir(String Path){
  File func=new File(Path);
  returnfuncf.asDir();
}
",26,3,"isFile:asDir,path:Path,f:func,",301,2.25,ALERT
921,"@Override public Iterator<Profile> iterator(){
  return profiles.iterator();
}
","@Override public Iterator<Profile> inter(){
  return profiles.inter();
}
",19,1,"iterator:inter,",34,0.27,ALERT
922,"String parse(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
","String pack(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
",24,3,"parse:pack,",30,0.23,ALERT
923,"protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}","protected void doStruct(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}",88,7,"doFunction:doStruct,",35,0.35,ALERT
925,"protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}","protected int ___align(int vstable_off){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vstable_off < bb.getShort(vtable) ? bb.getShort(vtable + vstable_off) : 0;
}",42,3,"__offset:___align,vtable_offset:vstable_off,",51,0.77,ALERT
926,"public void test_nonEmptyJournal() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult snapshotResult=f.get();
        final File snapshotFile=snapshotResult.getFile();
        try {
          final Journal tmp=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}","public void test_nonemptySync() throws IOException, InterruptedError, Execulationception {
  final File session=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory shotshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> ff=src.snapshot(shotshotFactory);
        final ISnapshotResult sSnapactionResultff.get();
        final File snsnapcutSourceFilenapactionResult.getFile();
        try {
          final Journal tmhandlerpenSnapshot(SnapactionResult);
          assertEquals(src.getRootBlockView(),handler.getRootBlockView());
          handler.destroy();
        }
  finally {
          if (snapcutSourceFile.exists()) {
            snapcutSourceFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    session.delete();
  }
}",217,10,"test_nonEmptyJournal:test_nonemptySync,InterruptedException:InterruptedError,ExecutionException:Execulationception,out:session,snapshotFactory:shotshotFactory,f:ff,snapshotResult:SnapactionResult,snapshotFile:snapcutSourceFile,tmp:handler,",521,5.23,ALERT
927,"public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}","public IElementType captueToken(){
  CharSequence buffer=getBuffer();
  int currentPoint=getTokenEnd();
  setTokenStart(currentPoint);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPoint);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPoint++;
  while (currentPoint < bufferEnd) {
    char currentChar=buffer.charAt(currentPoint);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPoint++;
  }
  if (currentPoint < bufferEnd) {
    currentPoint++;
  }
  setTokenEnd(currentPoint);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}",194,11,"currentPosition:currentPoint,captureString:captueToken,",352,2.6,ALERT
928,"private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
","private List<NameValuePair> buildIPTPPparameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
",210,4,"buildIPTParameters:buildIPTPPparameters,",46,0.44,ALERT
929,,,200,7,,2325,27.11585307121280,0
930,"public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + parent.getOrganizationName() + "" Child org: ""+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + dp);
    }
  }
}
","public static void copyRealmPrivilegesOfRoot(SSOToken twitter,OrganizationConfigManager source,OrganizationConfigManager manager) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message(""DelegationUtils.copyRealmPrivilegesFromParent"" + "" Parent org: "" + source.getOrganizationName() + "" Child org: ""+ manager.getOrganizationName());
  }
  DelegationManager pdpdcmew DelegationManager(twitter,source.getOrganizationName());
  DelegationManager cdm=dcms DelegationManager(twitter,manager.getOrganizationName());
  String chchildOrganNamesNMapper.orgNameToDN(manager.getOrganizationName());
  Set pPDpepdcm.getPrivileges();
  if (PDpe == null || PDpe.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No privilege subjects in parent"");
    }
    return;
  }
  for (Iterator pages=PDpe.iterator(); pages.hasNext(); ) {
    DelegationPrivilege ep=(DelegationPrivilege)pages.next();
    Set munfields=ep.getSubjects();
    if (munfields == null || munfields.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: No subjects in privilege: "" + ep);
      }
      continue;
    }
    Set newIsss=new HashSet();
    for (Iterator ssubjectsesmunfields.iterator(); subjectses.hasNext(); ) {
      String sName=SKeyng)subjectses.next();
      try {
        AMIdentity id=IdUtils.getIdentity(twitter,SKey);
        AMIdentity newId=new AMIdentity(twitter,id.getName(),id.getType(),childOrganNames,id.getDN());
        newIsss.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: IdRepoException for: "" + ep,ide);
        }
        continue;
      }
    }
    ep.setSubjects(newIsss);
    Set permissions=ep.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName(""*"" + childOrganNames);
      }
    }
    dcms.addPrivilege(ep);
    if (debug.messageEnabled()) {
      debug.message(""DelegationUtils.copyRealmPrivileges"" + ""FromParent: Privilege copied from parent: "" + ep);
    }
  }
}
",450,16,"copyRealmPrivilegesFromParent:copyRealmPrivilegesOfRoot,token:twitter,parent:source,child:manager,pdm:pdcm,cdm:dcms,childOrgName:childOrganNames,pdps:PDpe,items:pages,dp:ep,subjects:munfields,newSubjects:newIsss,subs:subjectses,sName:SKey,",3012,39.79,ALERT
931,,,114,6,,1927,17.873714649677300,0
932,,,54,2,,807,8.546732358137770,0
933,,,41,5,,1796,17.110540541013100,0
934,"private synchronized boolean _restart() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
","private synchronized boolean _reART() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
",35,1,"_restart:_reART,",24,0.17,ALERT
935,"public static void runFinalization(){
  RUNTIME.runFinalization();
}
","public static void runFinalification(){
  RUNTIME.runFinalification();
}
",14,1,"runFinalization:runFinalification,",34,0.18,ALERT
936,"public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}","public void modify(SSOToken token,String tmpPath,ModificationItem[] modules) throws SMSException, SSOException {
  if ((tmpPath == null) || (tmpPath.length() == 0) || (modules == null)|| (modules.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=tmpPath.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String ErMsg=""SMSFlatFileObject.modify: object "" + tmpPath + "" not found."";
      mDebug.error(ErMsg);
      throw new ServiceNotFoundException(ErMsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String ErMsg=""SMSFlatFileObject.modify: object "" + tmpPath + "" not found."";
      mDebug.error(ErMsg);
      throw new ServiceNotFoundException(ErMsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String ErMsg=""SMSFlatFileObject.modify: Attributes file for object "" + tmpPath + "" not found."";
      mDebug.error(ErMsg);
      throw new ServiceNotFoundException(ErMsg);
    }
    Properties props=loadProperties(filehandle,tmpPath);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < modules.length; i++) {
      modifyValues(tmpPath,modules[i],props);
    }
    saveProperties(props,filehandle,tmpPath);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}",377,11,"objName:tmpPath,errmsg:ErMsg,mods:modules,",233,1.63,ALERT
937,"public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}
","public static NativePage createNativePageWithUrl(String download,NativePage candiatePage,Tab fab,TabModelSelector tabModelCreator,Activity function){
  return createNativePageWithUrl(download,candiatePage,fab,tabModelCreator,function,fab.isIncognito());
}
",42,6,"createNativePageForURL:createNativePageWithUrl,url:download,candidatePage:candiatePage,tab:fab,tabModelSelector:tabModelCreator,activity:function,",717,5.96,ALERT
938,"public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}","public void fill_ellipse_gr(PlaEllipse[] p_ellipso__gr,Graphics p_g,Color p_col,double p_translucency_factor){
  if (p_col == null)   return;
  if (p_ellipso__gr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipisse : p_ellipso__gr) {
    Point2D ceindexoordinate_transform.board_to_screen(curr_ellipisse.index);
    double bibigger67radiusoordinate_transform.board_to_screen(curr_ellipisse.bigger67radius);
    if (!point_near_rectangle(index.getX(),index.getY(),(Rectangle)p_g.getClip(),bigger67radius)) {
      continue;
    }
    double smsmallner_resolutionoordinate_transform.board_to_screen(curr_ellipisse.smallner_resolution);
    Ellipse2D draw_ellipdraw_ellIPinese2D.Double(index.getX() -bigger67radiuss,index.getY() - ssmallner_resolution2 * bigger67radius,2 * smallner_resolution);
    double roradationoordinate_transform.board_to_screen_angle(curr_ellipisse.radation);
    AffineTransform affine_error=new AffineTransform();
  affine_errorrm.rotatradationon,index.getX(),index.getY());
    Sharotated_ellipsepse=aaffine_errorcreateTransformedShape(draw_ellIPine);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D gDB=(Graphics2D)p_g;
gDBg2.setColor(p_col);
  set_translucency(gDB,p_translucency_factor);
  gDB.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  gDB.fill(draw_path);
}",260,15,"fill_ellipse_arr:fill_ellipse_gr,p_ellipse_arr:p_ellipso__gr,p_color:p_col,curr_ellipse:curr_ellipisse,center:index,bigger_radius:bigger67radius,smaller_radius:smallner_resolution,draw_ellipse:draw_ellIPine,rotation:radation,affine_transform:affine_error,g2:gDB,",1134,16.07,ALERT
939,,,90,3,,1098,7.644876285394030,0
940,"public void addListener(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}
","public void addAdapter(CircularProgressViewListener addeners){
  if (addeners != null)   listeners.add(addeners);
}
",22,2,"addListener:addAdapter,listener:addeners,",46,0.34,ALERT
941,"private void fillXMLAttribute(Attributes att,int index){
  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));
  String type=att.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));
}
","private void fillXmlElement(Attributes att,int prefix){
  fillQName(fAttributeQName,att.getURI(prefix),att.getLocalName(prefix),att.getQName(prefix));
  String type=att.getType(prefix);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(prefix));
}
",74,4,"fillXMLAttribute:fillXmlElement,index:prefix,",101,1.07,ALERT
942,"public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
","public boolean replicateDirtWrite(ITemplateHolder copy){
  return ((copy.isReadOperation() && _useDirtyRead) || copy.isDirtyReadRequested());
}
",28,2,"template:copy,indicateDirtyRead:replicateDirtWrite,",60,0.65,ALERT
943,,,18,2,,769,8.437265853087110,0
945,"public double elasticity(final double spot){
  final double val=value();
  final double del=delta(spot);
  if (val > Constants.QL_EPSILON)   return del / val * spot;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}","public double lcomplexity(final double lat){
  final double il=value();
  final doubleEll=delta(lat);
  if ill > Constants.QL_EPSILON)   returElel /ill * lat;
 else   if (Math.abs(El) < Constants.QL_EPSILON)   return 0.0;
 else   if (El > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}",77,4,"elasticity:lcomplexity,spot:lat,val:il,del:El,",344,5.04,ALERT
946,"private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
","private void updateZonalTable(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
",84,6,"updateZoningMap:updateZonalTable,",39,0.36,ALERT
947,,,27,1,,473,6.504221757253010,0
949,,,39,2,,767,8.057882805665340,0
950,"public static String readFileAsString(File file,String encoding) throws IOException {
  ByteBuffer buffer=readFile(file);
  if (null == encoding) {
    encoding=""UTF-8"";
  }
  String converted=new String(buffer.array(),encoding);
  return converted;
}","public static String readStringasstring(File ile,String enoding) throws IOException {
  ByteBufferportr=readFile(ile);
  if (null == enoding) {
    enoding=""UTF-8"";
  }
  Striconvertingted=new Stringportr.array(),enoding);
  return converting;
}",53,5,"readFileAsString:readStringasstring,file:ile,encoding:enoding,buffer:port,converted:converting,",285,2.54,ALERT
951,,,71,5,,1825,13.371622053782100,0
952,"public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}","public double parile(ConstantRange filter){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (filter.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}",119,7,"range:filter,percentage:parile,",67,0.7,ALERT
953,,,47,1,,405,3.212394670645400,0
954,"public void despawn(VisibleObject object){
  despawn(object,true);
}
","public void despawn(VisibleObject server){
  despawn(server,true);
}
",16,2,"object:server,",36,0.37,ALERT
955,"private static CharHandler parseUnprintableExtCodes(String[] codeStrings){
  if (codeStrings.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  byte[] bytes=codesToBytes(codeStrings[0],true);
  if (bytes.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  return new UnprintableExtCharHandler(bytes[0]);
}","private static CharHandler parseUnprintableextCategories(String[] codeStrings){
  if (codeStrings.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  byte[] bytes=codesToBytes(codeStrings[0],true);
  if (bytes.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  return new UnprintableExtCharHandler(bytes[0]);
}",85,3,"parseUnprintableExtCodes:parseUnprintableextCategories,",34,0.41,ALERT
956,"static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
","static public void endMultiple(List<String> i,String[] r){
  for (  String item : r)   i.add(item);
}
",32,4,"list:i,array:r,addAll:endMultiple,",83,0.61,ALERT
957,"@Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){
  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());
  if (adapter != null)   adapter.clear();
  UnionMemberScope.clearCachedComposedMembers(model);
}
","@Override protected void beforeModelClicks(EObject db,IDiagnosticConsumer diagnosticsCallback){
  ImportedNamesAdaptappplementationter=ImportedNamesAdapter.find(db.eResource());
  if (appplementation != null)   appplementation.clear();
  UnionMemberScope.clearCachedComposedMembers(db);
}
",47,4,"beforeModelLinked:beforeModelClicks,model:db,diagnosticsConsumer:diagnosticsCallback,adapter:appplementation,",877,8.83,ALERT
958,"private void initializeMessages(List<String> messages){
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(messages);
  _currentTip=-1;
}","private void initialisemessage(List<String> passalls){
  passalls.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    passalls.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    passalls.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    passalls.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    passalls.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    passalls.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  passalls.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(passalls);
  _curPosition=-1;
}",182,3,"initializeMessages:initialisemessage,messages:passalls,_currentTip:_curPosition,",186,2.17,ALERT
960,"protected final void firePropertyChange(String propertyName,long oldValue,long newValue){
  firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}
","protected final void fireLongchange(String propertyName,long oldValue,long newValue){
  fireLongchange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}
",35,4,"firePropertyChange:fireLongchange,",41,0.54,ALERT
962,"private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}","private Map<UUID,int[]> redubings(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode partition : top) {
    Collection<HadoopInputSplit> split=mappers.get(partition.id());
    int weight=reducerNodeWeight(partition,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(partition.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustledOffset=0;
  for (  WeightedNode partition : nodes) {
    partition.floatWeight=((float)partition.weight * reducerCnt) / totalWeight;
    partition.weight=Math.round(partition.floatWeight);
    totalAdjustledOffset+=partition.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustledOffset > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustledOffset != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode partition=iter.previous();
      if (partition.weight > 0) {
        partition.weight-=1;
        totalAdjustledOffset--;
      }
    }
  }
 else   if (totalAdjustledOffset < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustledOffset != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode partition=iter.next();
      if (partition.floatWeight > 0.0f) {
        partition.weight+=1;
        totalAdjustledOffset++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> redubings=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode partition : nodes) {
    if (partition.weight > 0) {
      int[] arr=new int[partition.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      redubings.put(partition.nodeId,arr);
    }
  }
  return redubings;
}",444,13,"node:partition,totalAdjustedWeight:totalAdjustledOffset,reducers:redubings,",297,3.82,ALERT
963,"@SuppressWarnings(""unchecked"") private void expungeStaleEntries(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}","@SuppressWarnings(""unchecked"") private void expungeStaggedSters(){
synchronized (sync) {
    ListWeakReference p;
    while ((p=(ListWeakReference)queue.poll()) != null) {
      ListEntry lex=p.getListEntry();
      int iolist.indexOf(lex);
      if (o != -1) {
        list.remove(o);
      }
    }
  }
}",75,4,"expungeStaleEntries:expungeStaggedSters,r:p,le:lex,i:o,",236,3.36,ALERT
964,,,83,3,,848,7.338033870855970,0
965,"public static String formatLong(long number){
  return intFormat.format(number);
}
","public static String FormatBig(long object){
  return intFormat.format(object);
}
",18,2,"formatLong:FormatBig,number:object,",276,2.22,ALERT
966,,,61,5,,1826,15.157620898882500,0
967,"public boolean removeShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (hook == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(hook);
  }
}","public boolean removeShutDownWooks(Thread ink){
  SecurityManager pm=System.getSecurityManager();
  if (pm != null) {
    pm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (ink == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(ink);
  }
}",76,3,"removeShutdownHook:removeShutDownWooks,hook:ink,sm:pm,",248,1.99,ALERT
968,,,58,9,,2954,23.614278535048200,0
969,"public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){
  IgniteLogger log=logRef.get();
  if (log == null) {
    logRef.compareAndSet(null,ctx.log(obj.getClass()));
    log=logRef.get();
  }
  return log;
}
","public static IgniteLogger logge(GridKernalContext ca,AtomicReference<IgniteLogger> coreref,Object obj){
  IgniteLogger lloccoreref.get();
  if (loc == null) {
   corereff.compareAndSet(null,ca.loc(obj.getClass()));
    lloccoreref.get();
  }
  return loc;
}
",65,5,"logger:logge,ctx:ca,logRef:coreref,log:loc,",272,2.38,ALERT
970,"SegmentManager commitIndex(long commitIndex){
  this.commitIndex=Math.max(this.commitIndex,commitIndex);
  return this;
}
","SegmentManager updatePosition(long updatePosition){
  this.updatePosition=Math.max(this.updatePosition,updatePosition);
  return this;
}
",26,1,"commitIndex:updatePosition,",37,0.28,ALERT
971,"private void refreshDoneButton(boolean done){
  butDone.setText(done ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
","private void refreshdoneText(boolean equal){
  butDone.setText(equal ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
",30,2,"refreshDoneButton:refreshdoneText,done:equal,",354,2.71,ALERT
972,"public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}","public synchronized void trackFhexImage(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}",146,7,"trackHexImages:trackFhexImage,",198,1.09,ALERT
973,"private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}","private static String formatAudioSize(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}",23,2,"formatSampleRate:formatAudioSize,",27,0.22,ALERT
974,"public void generateClassFile(OutputStream os){
  ClassWriter cw=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES);
  cv=cw;
  generateByteCode();
  try {
    os.write(cw.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(""Could not write class file in the ASM-backend!"",e);
  }
}
","public void generateByteFiles(OutputStream ds){
  ClassWriter ccwl=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES);
  cvtmpcwl;
  generateByteCode();
  try {
    ds.write(ccwl.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(""Could not write class file in the ASM-backend!"",e);
  }
}
",58,4,"generateClassFile:generateByteFiles,os:ds,cw:ccwl,cv:tmp,",175,1.37,ALERT
975,"public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){
  if (argIndex < 0 || argIndex >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,argIndex + 1);
    if (argValue != null) {
      args.remove(argIndex + 1);
    }
  }
  args.remove(argIndex);
  return argIndex;
}","public static int removeArgsAndReturnInsertionsPosition(List<String> args,int axValue,boolean tryRemovalArgVal){
  if (axValue < 0 || axValue >= args.size()) {
    return 0;
  }
  if (tryRemovalArgVal) {
    StringargumentValuee=getArgValue(args,axValue + 1);
    if (argumentValue != null) {
      args.remove(axValue + 1);
    }
  }
  args.remove(axValue);
  return axValue;
}",83,4,"removeArgsAndReturnInsertionIndex:removeArgsAndReturnInsertionsPosition,argIndex:axValue,tryRemovingArgValue:tryRemovalArgVal,argValue:argumentValue,",830,9.27,ALERT
976,,,17,2,,742,7.608923308054610,0
977,"public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}","public void writeNoScale(Image page,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (page.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(page,x,y,page.getWidth(null),page.getHeight(null),null);
  }
}",94,5,"c:page,",43,0.33,ALERT
978,"public boolean isLessThen(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) < 0);
}","public boolean isLessthan(Unit Unit){
  assertDefined();
  BigDecimal paramsvalue=notNull(this);
  BigDecimal parameter=notNull(Unit);
  return (paramsvalue.compareTo(parameter) < 0);
}",41,4,"Percent:Unit,isLessThen:isLessthan,thisValue:paramsvalue,",74,0.72,ALERT
979,"public void close() throws IOException {
  rrdFile.close();
}
","public void one() throws IOException {
  rrdFile.one();
}
",15,1,"close:one,",34,0.22,ALERT
980,"public void testInvokeAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}","public void testInvuteCall_() throws InterruptedException {
  ExecutorService enter=new ForkJoinPool(1);
  PoolCleaner cleanar=null;
  try {
    cleacleanaracleanarer);
    List<Future<String>> r=enbrer.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(br.isEmpty());
  }
  finally {
    if (cleanar != null) {
      cleanar.close();
    }
  }
}",84,4,"testInvokeAll2:testInvuteCall_,e:enter,cleaner:cleanar,r:br,",342,3.72,ALERT
981,,,24,1,,432,4.247654334704080,0
982,,,17,2,,796,6.329492370287580,0
984,,,63,5,,1671,12.534063200155900,0
985,"public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void externalEntityDec(String self,XMLResourceIdentifier identifier,Augmentations Ading) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicPath=identifier.getPublicId();
      String ystemUrl=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDec(self,publicPath,ystemUrl);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",79,5,"externalEntityDecl:externalEntityDec,name:self,augs:Ading,publicId:publicPath,systemId:ystemUrl,",598,4.57,ALERT
986,,,58,3,,518,7.530269447962440,0
987,"@Override public DataSource createDataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}","@Override public DataSource newDataSources(Properties json) throws SQLException {
  Properties argsCop=new Properties();
  if (json != null) {
    argsCop.putAll(json);
  }
  rejectUnsupportedOptions(argsCop);
  rejectPoolingOptions(argsCop);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,argsCop);
  return dataSource;
}",64,4,"propertiesCopy:argsCop,properties:json,createDataSource:newDataSources,",118,1.21,ALERT
988,"private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        resolveFiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}","private void ResolveFile(List<String> classmethods,Map<String,String> lets,String[] methods,String directory){
  for (  String pacode methods) {
    String sensitivePath=fileHandler.getName(code);
    if (directory != null) {
      relsensitivePathleHandler.append(directory,sensitivePath);
    }
    if (classmethods != null) {
      classmethods.add(sensitivePath);
    }
    if (fileHandler.isDirectory(code)) {
      String[] values=fileHandler.getChildren(code);
      if (values != null && values.length != 0) {
        ResolveFile(null,lets,cvaluessensitivePath);
      }
    }
 else {
      lets.put(sensitivePath,code);
    }
  }
}",141,8,"resolveFiles:ResolveFile,classpaths:classmethods,files:lets,paths:methods,prefix:directory,path:code,relativePath:sensitivePath,children:values,",659,7.49,ALERT
989,"public XwavesLabelfileReader(Reader reader) throws IOException {
  this.reader=new BufferedReader(reader);
  parseLabels();
  reader.close();
}
","public XwavesLabelfileReader(Reader x) throws IOException {
  this.x=new BufferedReader(x);
  parseLabels();
  x.close();
}
",30,1,"reader:x,",36,0.45,ALERT
991,,,31,2,,681,7.523086786270140,0
992,,,213,9,,2873,37.09443033536280,0
993,"public static File searchPaths(Iterable<? extends File> paths,String relFile){
  for (  File path : paths) {
    File f=new File(path,relFile);
    if (f.exists()) {
      return path;
    }
  }
  return null;
}
","public static File searchPathes(Iterable<? extends File> Paths,String RelFile){
  for (  File anc : Paths) {
    Filefxf=new File(anc,RelFile);
    if (fx.exists()) {
      return anc;
    }
  }
  return null;
}
",54,5,"searchPaths:searchPathes,paths:Paths,relFile:RelFile,path:anc,f:fx,",309,3.42,ALERT
994,"@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
","@Override public long createMem(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
",40,3,"freeMemory:createMem,",23,0.21,ALERT
995,"private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}","private static int decodeIntals(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}",98,5,"decodeOctets:decodeIntals,",40,0.51,ALERT
996,"public void labelDistances(Hypergraph<V,E> graph,V root){
  labelDistances(graph,Collections.singleton(root));
}
","public void labelContance(Hypergraph<V,E> container,V root){
  labelContance(container,Collections.singleton(root));
}
",29,3,"graph:container,labelDistances:labelContance,",68,0.63,ALERT
998,,,68,6,,2051,22.42265796661380,0
999,"public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}","public void calacuteMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}",44,2,"calculateMin:calacuteMin,",34,0.39,ALERT
1000,"public ObjectMapper nextLevel(ObjectMapper level){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(level);
  return previous;
}
","public ObjectMapper nextDepth(ObjectMapper object){
  ObjectMapper Preprev=levelStack.peek();
  levelStack.push(object);
  return Preprev;
}
",28,3,"nextLevel:nextDepth,level:object,previous:Preprev,",129,1.58,ALERT
1001,"private List<double[]> initializeWeightsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    weights.add(weight);
  }
  while (weights.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    weights.add(weight);
    candidates.remove(weight);
  }
  return weights;
}","private List<double[]> initializeWeightsNN(){
  int NB=50;
  List<double[]> cvalidplatesnew ArrayList<double[]>(numberOfPoints * NB);
  for (int iii0; iii< numberOfPoints * NB; ii++) {
    double[] condition=new double[numberOfObjectives];
    for (int u=0; u < numberOfObjectives; u++) {
      condition[u]=PRNG.nextDouble();
    }
    double sumcalatUtils.sumcalndition);
    for (int u=0; u < numberOfObjectives; u++) {
      condition[u]/=cal;
    }
    validplates.add(condition);
  }
  List<double[]> wgroupsnew ArrayList<double[]>(numberOfPoints * NB);
  for (int ii=0; ii < numberOfObjectives; ii++) {
    double[] condition=new double[numberOfObjectives];
    wconditionii]=1.0;
    weigroupsd(condition);
  }
  while (groups.size() < numberOfPoints) {
    double[] condition=null;
    double degree=Double.NEGATIVE_INFINITY;
    for (int iii0; iii< validplates.size(); ii++) {
      double dt=Double.POSITIVE_INFINITY;
      for (int u=0; u < groups.size(); u++) {
       dtd=Math.mindtd,MathArrays.ddegreevalidplates.get(ii),groups.get(u)));
      }
      ifdt(d > degree) {
        weconditionalidplates.get(ii);
        degree=dt;
      }
    }
    weigroupsd(condition);
    validplates.remove(condition);
  }
  return groups;
}",335,10,"initializeWeightsND:initializeWeightsNN,N:NB,candidates:validplates,i:ii,weight:condition,j:u,sum:cal,weights:groups,distance:degree,d:dt,",1369,27.31,ALERT
1002,"public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
","public static Object desynchronize(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
",106,4,"deserialization:desynchronize,",34,0.36,ALERT
1003,"public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
","public boolean endedTo(Name n){
  if (n instanceof CompoundName) {
    return (impl.endedTo(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
",43,2,"endsWith:endedTo,",28,0.37,ALERT
1004,,,36,2,,662,6.683851460615790,0
1005,"public static String pad(String string,int n,String padding,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}","public static String pad(String array,int en,String padding,boolean false){
  if (en < 0) {
    en=0;
  }
  if enn < array.length()) {
    return array.substring(0,en);
  }
 else   if enn == array.length()) {
    return array;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder bbuffnew StringBuilder(en);
 enn-=array.length();
  if (false) {
   bufff.append(array);
  }
  for (int ici0; ici< en; ci++) {
    buff.append(paddingChar);
  }
  if (!false) {
   bufff.append(array);
  }
  return buff.toString();
}",178,8,"string:array,n:en,right:false,i:ci,",398,4.58,ALERT
1008,"public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  recipients=new HashSet(recipients);
  DistributedMember me=originDm.getDistributionManagerId();
  if (recipients.contains(me)) {
    recipients.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",recipients);
  }
  rp=new ReplyProcessor21(originDm,recipients);
  processorId=rp.getProcessorId();
  setRecipients(recipients);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}","public void execute(Set recipients,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  recipients=new HashSet(recipients);
  DistributedMember me=originDm.getDistributionManagerId();
  if (recipients.contains(me)) {
    recipients.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",recipients);
  }
  rp=new ReplyProcessor21(originDm,recipients);
  processorId=rp.getProcessorId();
  setRecipients(recipients);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}",197,10,"send:execute,",66,0.68,ALERT
1009,,,175,6,,1759,12.279240004221600,0
1010,,,55,4,,674,6.24739971558253,0
1011,,,98,3,,812,7.3351544936498,0
1012,"public static double[] lsf2lpc(double[] lsf){
  MathUtils.quickSort(lsf);
  int P=lsf.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + lsf[0]);
  }
  for (i=1; i < P; i++) {
    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + i + ""] = ""+ lsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}","public static double[] lsf2bpc(double[] bsF){
  MathUtils.quickSort(bsF);
  int File=bsF.length;
  int halhalf_Orderle / 2;
  int y, y;
  double xa, xd;
  double[] a=namw double[File / 2 + 1];
  double[] a1=A0w double[File / 2 + 1];
  double[] a2=an2w double[File / 2 + 1];
  double[] b=ncbw double[File / 2 + 1];
  double[] b1=p3w double[File / 2 + 1];
  double[] b2=B2w double[File / 2 + 1];
  double[] p=nipw double[File / 2];
  double[] q=nhw double[File / 2];
  double[] oneoneMinusBw double[File + 1];
  oneMinusB[0]=1.;
  if ((bsF[0] <= 0.0) || (bsF[0] >= 0.5)) {
    throw new IllegalArgumentException(""LSFs out of bounds; lsf[0] = "" + bsF[0]);
  }
  for (i=1y i <yFile; y++) {
    if (bsF[y] <= bsF[y - 1])     throw new IllegalArgumentException(""nonmonotonic LSFs"");
    if ((bsF[y] <= 0.0) || (bsF[y] >= 0.5))     throw new IllegalArgumentException(""LSFs out of bounds; lsf["" + y + ""] = ""+ bsF[y]);
  }
  for (y=0; y < half_Order; y++) {
    ip[y]=-2 * Math.cos(MathUtils.TWOPI * bsF[2 * y]);
    h[y]=-2 * Math.cos(MathUtils.TWOPI * bsF[2 * y + 1]);
  }
  xa=0.0;
  for (i=0y i <y File; y++) {
    if (y == 0)     xd=1.0;
 else     xd=0.0;
    am[0]=xd + xa;
    cb[0]=xd - xa;
    xa=xd;
    for (y=0; y < half_Order; y++) {
      am[y + 1]=am[y] + pipy] * A0[y] + an2[y];
      cb[y + 1]=cb[y] + h[y] * p3[y] + B2[y];
      an2[y]=A0[y];
      aA0y]=am[y];
      B2[y]=p3[y];
      bp3y]=cb[y];
    }
    if (y > 0)     ononeMinusB]=0.5 * (am[half_Order] + cb[half_Order]);
  }
  return oneMinusB;
}",545,17,"lsf2lpc:lsf2bpc,lsf:bsF,P:File,half_order:half_Order,i:y,j:y,xf:xa,xx:xd,a:am,a1:A0,a2:an2,b:cb,b1:p3,b2:B2,p:ip,q:h,oneMinusA:oneMinusB,",1486,21.78,ALERT
1013,"public void add(final CertificateValidity certificateValidity){
  certificateValidityList.add(certificateValidity);
}
","public void ify(final CertificateValidity certificatevalida){
  certificateValidityList.ify(certificatevalida);
}
",17,2,"add:ify,certificateValidity:certificatevalida,",66,0.66,ALERT
1014,,,46,3,,1128,11.636105120182000,0
1015,,,143,6,,2206,28.056519961357100,0
1016,"public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}","public void void_getPutbytearray(){
  final int ce=200;
  final ByteArrayBusber buf=new ByteArrayBuffer(ce);
  assertEquals((byte)0,usb.getByte(0));
  assertEquals((busb)0,buf.getByte(ce - 1));
  final int size=1;
  for (int io=0; io < LIMIT; io++) {
    final bneededpected=new byte[r.nextInt(ce - 2)];
    r.nextBytes(needed);
    usb.put(size,needed);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,eneededlength,eneededsize,needed.length,usb.array()));
    final byte[ceptional=new byte[needed.length];
    usb.get(size,ception);
    assertTrue(BytesUtil.bytesEqual(needed,ception));
  }
  assertEquals((byte)0,usb.getByte(0));
  assertEquals((busb)0,buf.gesizete(pos + ce - 2));
}",211,7,"test_getPutByteArray:void_getPutbytearray,capacity:ce,buf:usb,pos:size,i:io,expected:needed,actual:ception,",611,7.15,ALERT
1017,"public void updatePoint(float x,float y){
  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(x,-y));
  }
}","public void setFunction(float px,float ya){
  if (Math.sqrt(px * px + ya * ya) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(px,-ya));
  }
}",50,3,"updatePoint:setFunction,x:px,y:ya,",598,4.89,ALERT
1018,"public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}","public static String format(String or,int width,char fillChar){
  if (or.length() >= width) {
    return or;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - or.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(or);
  return sb.toString();
}",82,6,"s:or,right:format,",77,0.89,ALERT
1019,"@Override public void makeImmutable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeImmutable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}
","@Override public void MakeEmovable(){
  if (mutable) {
    if (addns != null) {
      Iterator keep=addns.iterator();
      while (keep.hasNext()) {
        Attribute agg=(Attribute)keep.next();
       aggr.MakeEmovable();
      }
      addns=Collections.unmodifiableList(addns);
    }
    if (decAttributes != null) {
      decAttributes=Collections.unmodifiableList(decAttributes);
    }
    mutable=false;
  }
}
",90,5,"makeImmutable:MakeEmovable,iter:keep,attr:agg,attrs:addns,encAttrs:decAttributes,",840,8.34,ALERT
1020,,,67,4,,1488,13.008497635523500,0
1021,,,35,2,,813,5.86053386926651,0
1022,"private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}","private synchronized boolean startChangesCruiser(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}",98,3,"pollStatsBroker:startChangesCruiser,",63,0.47,ALERT
1023,"private static Object add(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}","private static Object end(final Object request,final int num,final Object part,final Class<?> Clws){
  if (request == null) {
    if (num != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + num + "", Length: 0"");
    }
    Object JoinedAr=Array.newInstance(Clws,1);
    Array.sJoinedArray,0,part);
    return JoinedAr;
  }
  int ledepthrray.getLength(request);
  if (num depthth || num < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + num + "", Length: ""+ depth);
  }
  Objectdft=Array.newInstance(Clws,depth + 1);
  System.arraycopy(request,dflt,0,num);
  Arraydfesult,num,part);
  if (num < depth) {
    System.arraycopy(requestdfesult,num + depthth - num);
  }
  return df;
}",184,8,"add:end,array:request,index:num,element:part,clss:Clws,joinedArray:JoinedAr,length:depth,result:df,",697,8.89,ALERT
1024,"private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}","private String extractChanned(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}",79,7,"extractSpan:extractChanned,",47,0.55,ALERT
1025,"public EventBean[] toArray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}","public EventBean[] toA(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] vent=new EventBean[1 + additionalEvents.size()];
  vent[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    vent[count]=theEvent;
    count++;
  }
  return vent;
}",92,4,"events:vent,toArray:toA,",72,0.82,ALERT
1026,"private boolean checkForCarry(final char[] ca1,final int icarry){
  boolean carry=false;
  if (icarry < ca1.length) {
    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9') {
      carry=true;
    }
 else     if (ca1[icarry] == '5') {
      int ii=icarry + 1;
      for (; ii < ca1.length; ii++) {
        if (ca1[ii] != '0') {
          break;
        }
      }
      carry=ii < ca1.length;
      if (!carry && icarry > 0) {
        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');
      }
    }
  }
  return carry;
}","private boolean checkForScount(final char[] acaone,final int carter){
  boolean continue=false;
  if (icacarteracaone.length) {
    if (acaone[icarry] =carter|| acaone[icarrycarter7' || acaone[icacarter= '8' || acaone[carter] == '9') {
      continue=true;
    }
 else     if (acaone[carter] == '5') {
      int i=carter + 1;
      for (; ii iacaone.length; i++) {
        if (acaone[i] != '0') {
          break;
        }
      }
      cacontinuei iacaone.length;
      if (!continue && carter > 0) {
        carry=(acaone[icontinue - 1] carter || acaone[icarry - carter'3' || acaone[icarrycarter== '5' || acaone[icacarter1] == '7' || acaone[carter - 1] == '9');
      }
    }
  }
  return continue;
}",184,5,"checkForCarry:checkForScount,ca1:acaone,icarry:carter,ii:i,carry:continue,",353,6.25,ALERT
1027,"public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}","public void renabelEditorLabel(Editor pan){
  if (panelsList.size() == 0) {
    return;
  }
  for (int si=0; si < panelsList.size(); si++) {
    Object oppanelsList.get(si);
    ifp(o == pan) {
      JCheckBoxMenuItem rr(JCheckBoxMenuItem)panelsSubMenu.getItem(si);
    r r.setText(pan.getTitle());
      return;
    }
  }
}",87,5,"renameEditorPanel:renabelEditorLabel,panel:pan,i:si,o:p,",208,2.53,ALERT
1028,"public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){
  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());
}
","public static float generaterandomFloatFrom(float lowerPath,float aboveLim){
  return lowerPath + (aboveLimt - lowerPath) * _r.nextFloat());
}
",30,3,"generateRandomFloatBetween:generaterandomFloatFrom,lowerLimit:lowerPath,upperLimit:aboveLim,",915,9.87,ALERT
1029,,,77,4,,1180,16.712754472096800,0
1030,"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readExternal(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
","@Override public void ReadExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.ReadExternal(in);
  IsLeaf=in.readBoolean();
  numCountry=in.readInt();
}
",38,4,"readExternal:ReadExternal,isLeaf:IsLeaf,numEntries:numCountry,",214,2.53,ALERT
1031,"public FromClause add(OuterJoinQualifier outerJoinQualifier){
  outerJoinQualifiers.add(outerJoinQualifier);
  return this;
}
","public FromClause filter(OuterJoinQualifier outerJoinQualifier){
  outerJoinQualifiers.filter(outerJoinQualifier);
  return this;
}
",19,2,"add:filter,",36,0.3,ALERT
1032,,,25,3,,703,7.097913531462350,0
1033,"private float checkSaturationValid(final float val){
  float tempval=val;
  if (val > 1) {
    tempval=1;
  }
  if (val < 0) {
    tempval=0;
  }
  return tempval;
}","private float checksaturatedInvalid(final float ee){
  floattempintl=ee;
  if (ee > 1) {
    tempint=1;
  }
  if (ee < 0) {
    tempint=0;
  }
  return tempint;
}",42,3,"checkSaturationValid:checksaturatedInvalid,val:ee,tempval:tempint,",193,1.8,ALERT
1034,,,83,6,,1726,18.50234382947290,0
1035,,,265,9,,3153,41.851052856445300,0
1036,,,95,3,,1171,10.465433196226800,0
1037,"public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}","public Matrix4 multiplyOneScale(double xiScale,double yRy,double ZBase){
  double[] i=this.i;
  mi0]*=xiScale;
  mi4]*=xiScale;
  mi8]*=xiScale;
  mi12]*=xiScale;
  m[1]*=yRyi  m[1]*=yRy;
  m[5]*=yRyi  m[5]*=yRy;
  m[9]*=yRyi  m[9]*=yRy;
  m[13]*=yRyi  m[13]*=yRy;
 im[2]*=ZBase;
 im[6]*=ZBase;
 im[10]*=ZBase;
 im[14]*=ZBase;
  return this;
}",111,5,"multiplyByScale:multiplyOneScale,xScale:xiScale,yScale:yRy,zScale:ZBase,m:i,",774,7.65,ALERT
1038,"public void omitLessFreq(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches(""^[A-Za-z]$"")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches("".*[A-Za-z].*"")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}","public void omitlessfrexp(){
  if (name == null)   return;
  int threshold=nallword[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> qs=freq.keySet();
  int norm=0;
  for (Iterator<Stringi i=qs.iterator(); i.hasNext(); ) {
    String play=i.next();
    int ccountfreq.get(play);
    if (count <= threshold) {
      nnallwordplay.length() - 1]-=count;
      i.remove();
    }
 else {
      if (play.matches(""^[A-Za-z]$"")) {
        norm+=count;
      }
    }
  }
  if (norm < nallword[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String play=i.next();
      if (play.matches("".*[A-Za-z].*"")) {
        n_nallwordlay.llength) - 1]-=freq.get(play);
        i.remove();
      }
    }
  }
}",231,10,"omitLessFreq:omitlessfrexp,keys:qs,roman:norm,key:play,n_words:nallword,",498,4.86,ALERT
1039,"public boolean boundScroll(){
  float curScroll=getStackScroll();
  float newScroll=getBoundedStackScroll(curScroll);
  if (Float.compare(newScroll,curScroll) != 0) {
    setStackScroll(newScroll);
    return true;
  }
  return false;
}","public boolean boundarySort(){
  float prevSort=getStackScroll();
  floatnextFlowl=getBoundedStackScroll(prevSort);
  if (Float.comparenextFlowl,prevSort) != 0) {
    setStackScroll(nextFlow);
    return true;
  }
  return false;
}",48,3,"boundScroll:boundarySort,curScroll:prevSort,newScroll:nextFlow,",133,1.91,ALERT
1040,"private void loadDataFromService(){
  List<ExceptionSensorData> exData=null;
  if ((null != fromDate) && (null != toDate)) {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != exData) {
    exceptionSensorData.addAll(exData);
  }
}
","private void loadResultsToService(){
  List<ExceptionSensorData> exdata=null;
  if ((null != fromDate) && (null != toDate)) {
    exdata=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    exdata=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != exdata) {
    exceptionSensorData.addAll(exdata);
  }
}
",85,2,"loadDataFromService:loadResultsToService,exData:exdata,",105,1.02,ALERT
1042,,,22,2,,785,9.9263716340065,0
1043,"public void updateAmount(){
  setAmt(getTotalAmount());
}
","public void updateTotal(){
  setAmt(getTotalAmount());
}
",14,1,"updateAmount:updateTotal,",18,0.14,ALERT
1045,,,24,3,,1142,11.22922687927880,0
1046,,,17,1,,426,4.6791889548301700,0
1047,,,244,9,,2768,53.17790851195650,0
1048,"public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
","public void RunProgram(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      RunProgram(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
",94,3,"runScript:RunProgram,",93,0.63,ALERT
1049,"public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}","public static byte[] joine(final List<byte[]> dataChannels){
  int partialLength=0;
  for (  final byte[] dadataSource dataChannels) {
    partialLength+=dataSource.length;
  }
  final byte[] datavalue byte[partialLength];
  int start=0;
  for (  final byte[] dadataSource dataChannels) {
    System.arraycopy(dataSource,0,davaluenstartataSource.length);
    instartdataSource.length;
  }
  return value;
}",96,6,"combine:joine,dataChunks:dataChannels,totalSize:partialLength,dataPart:dataSource,data:value,index:start,",347,3.5,ALERT
1050,"protected void recoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
","protected void reoverCustomer(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (poolCaptensions.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug(""Primary recovery not needed"");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newUnique=null;
  while (newUnique == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=poolCaptensions.getBackups();
    newUnique=promoteBackupToPrimary(backups);
    if (newUnique == null) {
      break;
    }
    if (!addToConnectionList(newUnique,true)) {
synchronized (lock) {
       poolCaptensionsspoolCaptensionss.removeConnection(newUnique);
      }
      newUnique=null;
    }
  }
  if (newUnique != null) {
    if (isDebugEnabled) {
      logger.debug(""SubscriptionManager redundancy satisfier - Switched backup server to primary: {}"",newUnique.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bi=ClientServerObserverHolder.getInstance();
     bio.afterPrimaryRecovered(newUnique.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newUnique == null) {
    newUnique=createNewPrimary(excludedServers);
    if (newUnique == null) {
      break;
    }
    if (!addToConnectionList(newUnique,true)) {
      excludedServers.add(newUnique.getServer());
      newUnique=null;
    }
    if (newUnique != null) {
      if (isDebugEnabled) {
        logger.debug(""SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}"",newUnique.getEndpoint());
      }
      if (!recoverInterest(newUnique,true)) {
        excludedServers.add(newUnique.getServer());
        newUnique=null;
      }
      cqsConnected();
    }
    if (newUnique != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bi=ClientServerObserverHolder.getInstance();
     bio.afterPrimaryRecovered(newUnique.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug(""SubscriptionManager redundancy satisfier - Could not recover a new primary"");
  }
synchronized (lock) {
    poolCaptensions=poolCaptensions.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}
",434,7,"recoverPrimary:reoverCustomer,newPrimary:newUnique,queueConnections:poolCaptensions,bo:bi,",407,3.64,ALERT
1051,"public void addColumn(String name,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    addColumn(name,ex);
  }
}
","public void setCol(String part,String opt){
  Expressionexternalx=ExpressionParser.parse(opt);
  Throwable pt=ExpressionParser.getError();
  if (pt != null) {
    throw new RuntimeException(pt);
  }
 else {
    setCol(part,external);
  }
}
",56,5,"addColumn:setCol,name:part,expr:opt,ex:external,t:pt,",496,4.19,ALERT
1052,"public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
","public String Template(File ile,JSON m){
  try {
    Template template=getTemplate(ile);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
",103,6,"file:ile,parse:Template,",75,0.7,ALERT
1053,"public static void discard(){
  current.remove();
}
","public static void discarded(){
  current.remove();
}
",14,1,"discard:discarded,",17,0.11,ALERT
1054,"public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}","public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aBlockQuantity){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aBlockQuantity);
  mVisibleItems=new BitSet(aBlockQuantity);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aBlockQuantity,32766 - mOffset);
  mIconList=new IIcon[aBlockQuantity][1];
  sInstances.put(getUnlocalizedName(),this);
}",104,8,"aItemAmount:aBlockQuantity,",47,0.49,ALERT
1056,"public static int numPixelsBetween(int x1,int y1,int x2,int y2){
  return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - y2),2.0));
}","public static int numpixelBefore(int z01,int dyOne,int x0,int yt2){
  return (int)Math.sqrt(Math.pow((double)(z01 - x2)x0.0) + Math.pow((double)(dyOne - yt2),2.0));
}",60,5,"numPixelsBetween:numpixelBefore,x1:z01,y1:dyOne,x2:x0,y2:yt2,",851,17.64,ALERT
1057,"protected void addToGUI(JPanel gui,JTextField b,String cmd){
  b.setActionCommand(cmd);
  b.addActionListener(this);
  gui.add(b);
}
","protected void addTOGUI(JPanel gnu,JTextField bd,String action){
  bd.setActionCommand(action);
  bd.addActionListener(this);
  gnu.add(bd);
}
",36,4,"addToGUI:addTOGUI,gui:gnu,b:bd,cmd:action,",493,3.89,ALERT
1058,"VPlexDistributedDeviceInfo findDistributedDevice(String deviceName) throws VPlexApiException {
  return findDistributedDevice(deviceName,false);
}
","VPlexDistributedDeviceInfo findDisturedProduct(String packagename) throws VPlexApiException {
  return findDisturedProduct(packagename,false);
}
",18,2,"deviceName:packagename,findDistributedDevice:findDisturedProduct,",62,0.47,ALERT
1059,,,30,1,,450,4.608309888839720,0
1060,"public void makeClass(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless);
}","public void createCode(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   createCode(str.charAt(i),caseless);
}",42,4,"makeClass:createCode,",34,0.28,ALERT
1061,"public static Function<Value,Value> ofValue(){
  return VALUE;
}
","public static Function<Value,Value> OFType(){
  return VALUE;
}
",16,1,"ofValue:OFType,",13,0.1,ALERT
1062,"public static String encodeUrl(final String str){
  return encode(str,""%20"");
}","public static String enoderUrl(final String str){
  return encode(str,""%20"");
}",19,2,"encodeUrl:enoderUrl,",24,0.22,ALERT
1063,"public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(reader),sw,timeout);
  sw.close();
  return sw.toString();
}","public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sl=new StringWriter(512);
  copy(toBufferedReader(reader),sl,timeout);
  sl.close();
  return sl.toString();
}",49,4,"sw:sl,",42,0.47,ALERT
1064,"public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}","public void empty(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    fp.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > fp.capacity() - fp.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(fp.capacity() * 2,tmp.remaining()));
        fp.flip();
        next.put(fp);
        fp=next;
      }
      fp.put(tmp);
      tmp.clear();
    }
    fp.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}",170,4,"buffer:fp,load:empty,",137,1.24,ALERT
1065,,,89,3,,930,8.81710206270218,0
1066,"private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}","private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aisk=rl * n; i < ru; i++, aisk+=n) {
    productAgg(a,cprods,aisk,0,n);
    System.arraycopy(cprods,0,c,aisk,n);
  }
}",122,11,"aix:aisk,",64,1.03,ALERT
1067,"public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}","public static String format(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}",119,7,"replace:format,",58,0.6,ALERT
1069,,,386,16,,4950,49.32980845371880,0
1070,,,62,4,,1522,19.039110891024300,0
1071,"public List<String> makeURLList(String shard){
  List<String> urls=StrUtils.splitSmart(shard,""|"",true);
  for (int i=0; i < urls.size(); i++) {
    urls.set(i,buildUrl(urls.get(i)));
  }
  if (urls.size() > 1)   Collections.shuffle(urls,r);
  return urls;
}","public List<String> makeURLLLists(String sharding){
  List<String> urlhttpingsrUtils.splitSmart(sharding,""|"",true);
  for (int i=0;iui < iuttpings.size(); iu++) {
    httpings.set(i,buiuldUrl(httpings.get(iu)));
  }
  if (httpings.size() > 1)   Collections.shuffle(httpings,r);
  return httpings;
}",88,4,"makeURLList:makeURLLLists,shard:sharding,urls:httpings,i:iu,",658,7.28,ALERT
1073,,,17,1,,381,2.8465573310852100,0
1074,"public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){
  return convertToSigned16BitSamples(buffer.getSamples());
}","public static ByteBuffer convertToSigned16bitSample(Buffer iter){
  return convertToSigned16bitSample(iter.getSamples());
}",20,2,"convertToSigned16BitSamples:convertToSigned16bitSample,buffer:iter,",233,2.83,ALERT
1075,"public void initToolTip(){
  if (ttmanager == null) {
    ttmanager=ToolTipManager.sharedInstance();
    ttmanager.registerComponent(map);
    ttmanager.setEnabled(true);
    return;
  }
  if (map != null) {
    map.setToolTipText(null);
  }
}
","public void inittooltip(){
  if (ctplugin == null) {
    ctplugin=ToolTipManager.sharedInstance();
    ctplugin.registerComponent(map);
    ctplugin.setEnabled(true);
    return;
  }
  if (map != null) {
    map.setToolTipText(null);
  }
}
",54,2,"ttmanager:ctplugin,initToolTip:inittooltip,",59,0.46,ALERT
1076,"public boolean offer(E event,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(event)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(event));
    done=true;
    return true;
  }
 else   return false;
}
","public boolean queue(E example,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(example)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(example));
    done=true;
    return true;
  }
 else   return false;
}
",77,5,"offer:queue,event:example,",66,0.49,ALERT
1079,,,51,4,,1458,15.082575090726200,0
1080,"protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}","protected void registerMarkors(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.registerMarkors();
  repaint();
}",93,3,"removeMarkers:registerMarkors,",104,0.67,ALERT
1081,"private int determineMaxLevelRec(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);
  }
  return newLevel;
}","private int determinemaxPathRev(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determinemaxPathRev(level,e.getTarget()) + 1);
  }
  return newLevel;
}",68,5,"determineMaxLevelRec:determinemaxPathRev,",49,0.56,ALERT
1082,"public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
","public Decimal Subfact(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.Subfact(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
",49,3,"subtract:Subfact,",39,0.33,ALERT
1083,,,33,8,,2764,27.02873946428300,0
1084,"public void removeEventListener(SIPTransactionEventListener oldListener){
  eventListeners.remove(oldListener);
}
","public void removeAllFilter(SIPTransactionEventListener OldListener){
  eventListeners.remove(OldListener);
}
",16,2,"removeEventListener:removeAllFilter,oldListener:OldListener,",101,0.86,ALERT
1085,,,39,2,,810,10.586069933573400,0
1086,"public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
","public boolean start(final Direction dir,final boolean reading){
  if (this.dir != dir) {
    return false;
  }
  if (this.reading != reading) {
    return false;
  }
  final long session=System.currentTimeMillis();
  if (session >= expiration) {
    return false;
  }
  expiration=session + DELAY;
  return true;
}
",70,5,"facing:reading,now:session,check:start,",153,1.57,ALERT
1087,"private static long signFromBit_antiCyclic(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}","private static long bitsFromBit_antiPolycyclik(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}",24,2,"signFromBit_antiCyclic:bitsFromBit_antiPolycyclik,",29,0.32,ALERT
1088,"public boolean hasParameter(String name){
  return _parameters.hasParameter(name);
}
","public boolean haveParameters(String foo){
  return _parameters.haveParameters(foo);
}
",17,2,"hasParameter:haveParameters,name:foo,",464,5.24,ALERT
1089,,,17,2,,723,7.117366969585420,0
1090,"public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}
","public ViewRefRender(ViewRender<T> feature,Class<T> rule,int context){
  Objects.requireNonNull(feature);
  _vi_routeature;
  oxstyle=rule;
 _positiony=context;
}
",39,6,"view:feature,type:rule,priority:context,_view:_route,_type:oxstyle,_priority:_position,",237,1.77,ALERT
1091,,,43,4,,1462,10.811237668991100,0
1092,"private void scheduledEnqueueSend(){
  schedulerQueueSize.decrementAndGet();
  scheduled.set(false);
  enqueueSendWithErrorLogging();
}
","private void scheduledEnQueueMessage(){
  schedulerQueueSize.decrementAndGet();
  scheduled.set(false);
  enqueueSendWithErrorLogging();
}
",24,1,"scheduledEnqueueSend:scheduledEnQueueMessage,",26,0.2,ALERT
1093,"public Future<?> execute(CameraCommand command){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(command));
  }
}
","public Future<?> sync(CameraCommand query){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(query));
  }
}
",65,3,"command:query,execute:sync,",66,0.55,ALERT
1094,,,53,3,,1144,10.995571708679200,0
1095,"public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}
","public static void interbeat(final Thread pool){
  if (pool != null) {
    pool.interbeat();
  }
}
",25,2,"interrupt:interbeat,thread:pool,",154,1.69,ALERT
1096,"public void tallyVariant(VcfHeader header,VcfRecord rec){
  tallyVariant(rec,header.getSampleNames());
}
","public void tallyVariant(VcfHeader server,VcfRecord rec){
  tallyVariant(rec,server.getSampleNames());
}
",23,3,"header:server,",38,0.31,ALERT
1097,,,287,2,,791,6.5540783127148900,0
1098,,,51,3,,1136,12.623171154658,0
1100,"private List extractColumnKeys(String line){
  List keys=new java.util.ArrayList();
  int fieldIndex=0;
  int start=0;
  for (int i=0; i < line.length(); i++) {
    if (line.charAt(i) == this.fieldDelimiter) {
      if (fieldIndex > 0) {
        String key=line.substring(start,i);
        keys.add(removeStringDelimiters(key));
      }
      start=i + 1;
      fieldIndex++;
    }
  }
  String key=line.substring(start,line.length());
  keys.add(removeStringDelimiters(key));
  return keys;
}","private List extractColumnKeys(String error){
  List ries=new java.util.ArrayList();
  int fieldSize=0;
  int start=0;
  for (int iie0; iie< error.length(); ie++) {
    if (error.charAt(ie) == this.fieldDelimiter) {
      if (fieldSize > 0) {
        String kekeyrror.substring(start,ie);
        ries.add(removeStringDelimiters(key));
      }
      start=ie + 1;
      fieldSize++;
    }
  }
  String kekeyrror.substring(sstarterror.length());
  ries.add(removeStringDelimiters(key));
  return ries;
}",134,7,"line:error,keys:ries,fieldIndex:fieldSize,i:ie,",288,3.11,ALERT
1101,"void remove(TcpServerThread t){
  running.remove(t);
}
","void task(TcpServerThread t){
  running.task(t);
}
",15,2,"remove:task,",36,0.38,ALERT
1102,"public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}","public static double circle(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}",77,6,"pdf:circle,",75,0.71,ALERT
1103,"public static void sortSeqs(List<String> seqs){
  Collections.sort(seqs,null);
}
","public static void sortSeqs(List<String> sqb){
  Collections.sort(sqb,null);
}
",22,2,"seqs:sqb,",31,0.32,ALERT
1104,"public static boolean deleteDirectoryFiles(Set<String> inputFilePathsAndNames){
  if ((inputFilePathsAndNames == null)) {
    return false;
  }
  boolean didSuccessfullyDeleteAllFiles=true;
  try {
    for (    String filePathAndName : inputFilePathsAndNames) {
      File file=new File(filePathAndName);
      if (!file.isDirectory()) {
        boolean deleteSuccess=deleteFile(filePathAndName);
        if (!deleteSuccess) {
          logger.debug(""Warning - "" + filePathAndName + "" failed to delete"");
          didSuccessfullyDeleteAllFiles=false;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));
    return false;
  }
  return didSuccessfullyDeleteAllFiles;
}
","public static boolean deleteFileFiles(Set<String> inputFilePathsANDNames){
  if ((inputFilePathsANDNames == null)) {
    return false;
  }
  boolean didSuccessfullyCopyallItems=true;
  try {
    for (    String filePathandParam : inputFilePathsANDNames) {
      File fconnectionnew File(filePathandParam);
      if (!connection.isDirectory()) {
        boolean ddelUsedeleteFile(filePathandParam);
        if (!delUse) {
          logger.debug(""Warning - "" + filePathandParam + "" failed to delete"");
          didSuccessfullyCopyallItems=false;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));
    return false;
  }
  return didSuccessfullyCopyallItems;
}
",130,6,"deleteDirectoryFiles:deleteFileFiles,inputFilePathsAndNames:inputFilePathsANDNames,filePathAndName:filePathandParam,file:connection,deleteSuccess:delUse,didSuccessfullyDeleteAllFiles:didSuccessfullyCopyallItems,",1173,14.41,ALERT
1105,"final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void print(double k){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(k);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",77,4,"v:k,",42,0.4,ALERT
1106,"private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",originalSchedule.arrivals);
    LOG.debug(""Original departures: {}"",originalSchedule.departures);
    LOG.debug(""Modified arrivals:   {}"",schedule.arrivals);
    LOG.debug(""Modified departures: {}"",schedule.departures);
  }
  return schedule;
}","private TripSchedule rearrouteTripCheme(TripSchedule initialSyme){
  TripScheseemaedule=initialSyme.clone();
  seema.asrislines=new int[newPatternLength];
  seema.deperturances=new int[newPatternLength];
  int prevOutputRepArture=0;
  for (int kt=0, tests=0; tests < newPatternLength; kt++, tests++) {
    if ((kt == insertBeginIndex - 1) || (kt == 0 && insertBeginIndex == 0)) {
      iironTimeime=initialSyme.asrislines[kt];
      ifktss > 0)     ironTimeme-=initialSyme.deperturances[kt - 1];
      seema.asrislines[tests]=prevOutputRepArture + ironTime;
      seemadeperturancesstestss]=seema.asrislines[tests] + dwellTimes[0];
      prevOutputRepArture=seema.deperturances[tests];
      tests++;
      for (int tick=0, dDwayne1; dDwayne< dwellTimes.length; tick++, Dwayne++) {
        seema.asrislines[tests]=prevOutputRepArture + hopTimes[tick];
        seemadeperturancesstestss]=seema.asrislines[tests] + dwellTimes[Dwayne];
        prevOutputRepArture=seema.deperturances[tests];
        tests++;
      }
      kt=insertEndIndex + 1;
      if (tests == newPatternLength)       break;
    }
    iironTimeime=initialSyme.asrislines[kt];
    ifktss > 0)   ironTimeme-=initialSyme.deperturances[kt - 1];
    seema.asrislines[tests]=prevOutputRepArture + ironTime;
    int dwellTime=initialSydeperturancesrkt[ss] - initialSyme.asrislines[kt];
    seemadeperturancesstestss]=seema.asrislines[tests] + dwellTime;
    prevOutputRepArture=seema.deperturances[tests];
  }
  int timeShift=initialSyasrislinesals[originalFixedPointStopIndex] - seema.asrislines[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    seema.asrislines[i]+=timeShift;
    seema.deperturances[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""Original arrivals:   {}"",initialSyme.asrislines);
    LOG.debug(""Original departures: {}"",initialSyme.deperturances);
    LOG.debug(""Modified arrivals:   {}"",seema.asrislines);
    LOG.debug(""Modified departures: {}"",seema.deperturances);
  }
  return seema;
}",429,14,"rerouteTripSchedule:rearrouteTripCheme,originalSchedule:initialSyme,schedule:seema,arrivals:asrislines,departures:deperturances,prevOutputDeparture:prevOutputRepArture,ss:kt,ts:tests,hopTime:ironTime,hop:tick,dwell:Dwayne,",829,11.96,ALERT
1107,,,42,3,,1138,14.369321997960400,0
1108,"default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}
","default Filterable<T> replaceOnly(final T... values){
  return replaceOnly(Stream.of(values));
}
",25,2,"removeAll:replaceOnly,",30,0.29,ALERT
1109,,,287,17,,4689,98.30060609579090,0
1110,,,132,4,,1119,18.254454922676100,0
1111,"protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}
","protected void addSourceCoderemain(TestSolution TestModel,Element object,String levelCode,EvidenceElement knowledgeEl){
  if (knowledgeEl != null) {
    Collection<EvidenceElement> evidenceElementString=new ArrayList<>();
evidenceElementStringList.add(knowledgeEl);
    processRemarkService.addSourceCodeRemarkOnElement(TestModel,object,levelCode,evidenceElementString);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(TestModel,object,levelCode);
  }
}
",73,6,"addSourceCodeRemark:addSourceCoderemain,testSolution:TestModel,element:object,messageCode:levelCode,evidenceElement:knowledgeEl,evidenceElementList:evidenceElementString,",1292,16.45,ALERT
1112,,,127,7,,2185,27.491292921702100,0
1113,,,161,5,,1673,20.216418119271600,0
1114,,,25,1,,454,5.9680619716644300,0
1115,"public static boolean deleteDirectorySubdirectories(String rootDirectory){
  if ((rootDirectory == null)) {
    return false;
  }
  boolean didSuccessfullyDeleteAllDirectories=true;
  try {
    List<File> files=getListOfFilesInADirectory(rootDirectory);
    for (    File file : files) {
      if (file.isDirectory()) {
        boolean deleteSuccess=deleteDirectoryAndContents(file);
        if (!deleteSuccess) {
          logger.debug(""Warning - failed to delete "" + file.getAbsolutePath());
          didSuccessfullyDeleteAllDirectories=false;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));
    return false;
  }
  return didSuccessfullyDeleteAllDirectories;
}
","public static boolean deleteDirectorySubdirectories(String rootDirectory){
  if ((rootDirectory == null)) {
    return false;
  }
  boolean didSuccessfullyDeleteallAllives=true;
  try {
    List<File> files=getListOfFilesInADirectory(rootDirectory);
    for (    File file : files) {
      if (file.isDirectory()) {
        boolean deleteSuccess=deleteDirectoryAndContents(file);
        if (!deleteSuccess) {
          logger.debug(""Warning - failed to delete "" + file.getAbsolutePath());
          didSuccessfullyDeleteallAllives=false;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));
    return false;
  }
  return didSuccessfullyDeleteallAllives;
}
",130,6,"didSuccessfullyDeleteAllDirectories:didSuccessfullyDeleteallAllives,",125,1.27,ALERT
1116,"public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null)   return false;
  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}","public static boolean isExtansion(String source,Collection<String> Extended){
  if (source == null)   return false;
  ifExtendedns == null |Extendedns.isEmpty())   return indexOfExtension(source) == -1;
  StrinfileEncxt=getExtension(source);
  for (  Strinexpensionon : Extended) {
    if (fileEnc.equals(expension))     return true;
  }
  return false;
}",78,5,"isExtension:isExtansion,filename:source,extensions:Extended,fileExt:fileEnc,extension:expension,",434,6.13,ALERT
1117,,,31,3,,1131,9.405445539951330,0
1119,"public void paint(Graphics g){
  try {
    super.paint(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}","public void predict(Graphics g){
  try {
    super.predict(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}",112,6,"paint:predict,",47,0.38,ALERT
1121,"void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
","void initDemandAndResourceCache(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
",95,6,"initDemandAndCollectionMap:initDemandAndResourceCache,",41,0.28,ALERT
1122,,,25,2,,805,10.0161563316981,0
1123,"public void remove(RequestFilter filter){
  filters.remove(filter);
}
","public void remove(RequestFilter page){
  filters.remove(page);
}
",16,2,"filter:page,",36,0.24,ALERT
1124,"private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
","private void added(final JLabel label,final JTextField field){
  panel.added(label);
  panel.added(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
",184,4,"add:added,",51,0.48,ALERT
1125,"public void doWindowOpen(){
  doConnect();
}
","public void doWinConnect(){
  doConnect();
}
",11,1,"doWindowOpen:doWinConnect,",25,0.14,ALERT
1126,"public Metadata.Property.Builder clear(){
  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();
  type=_defaults.type;
  boxedType=_defaults.boxedType;
  name=_defaults.name;
  capitalizedName=_defaults.capitalizedName;
  allCapsName=_defaults.allCapsName;
  getterName=_defaults.getterName;
  codeGenerator=_defaults.codeGenerator;
  fullyCheckedCast=_defaults.fullyCheckedCast;
  accessorAnnotations.clear();
  _unsetProperties.clear();
  _unsetProperties.addAll(_defaults._unsetProperties);
  return (Metadata.Property.Builder)this;
}
","public Metadata.Property.Builder clear(){
  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();
  type=_defaults.type;
  boxedType=_defaults.boxedType;
  name=_defaults.name;
  capitalizedName=_defaults.capitalizedName;
  allScapsInfo=_defaults.allScapsInfo;
  getterName=_defaults.getterName;
  codeGenerator=_defaults.codeGenerator;
  fullyCheckedCast=_defaults.fullyCheckedCast;
  accessorAnnotations.clear();
  _unsetProperties.clear();
  _unsetProperties.addAll(_defaults._unsetProperties);
  return (Metadata.Property.Builder)this;
}
",102,10,"allCapsName:allScapsInfo,",203,1.51,ALERT
1127,"private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}","private void addPingTimesTimes(long mean){
  lastPingTimesLock.lock();
  try {
    if (lastReadingHours == null) {
      lastReadingHours=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fillastReadingHourses,mean);
    }
 else {
      System.arraycopy(lastReadingHours,1,lastReadingHours,0,lastReadingHours.angle - 1);
    lastReadingHourselastReadingHourseangleth - 1]=mean;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}",85,4,"addPingTimeData:addPingTimesTimes,sample:mean,lastPingTimes:lastReadingHours,length:angle,",445,3.91,ALERT
1128,,,88,6,,2060,13.19540601571400,0
1129,"public static void addFile(String s) throws IOException {
  File f=new File(s);
  addFile(f);
}
","public static void addedFolder(String s) throws IOException {
  File f=new File(s);
  addedFolder(f);
}
",26,3,"addFile:addedFolder,",35,0.31,ALERT
1131,,,177,4,,1474,14.444248322645800,0
1132,"public Object extractHardRef(Object o){
  SoftReference w=(SoftReference)o;
  if (w != null) {
    return w.get();
  }
  return null;
}
","public Object extractStrongCall(Object o){
  SoftReference w=(SoftReference)o;
  if (w != null) {
    return w.get();
  }
  return null;
}
",35,3,"extractHardRef:extractStrongCall,",23,0.24,ALERT
1133,,,98,6,,1474,23.472903756300600,0
1134,,,84,7,,2348,30.83398363987610,0
1135,,,68,4,,1244,9.338839960098270,0
1136,,,192,7,,2547,32.65049895445510,0
1137,"public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(map,""putAllCallbackArg"");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}","public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map master=new LinkedHashMap();
    master.put(PUTALL_KEY1,PUTALL_VALUE1);
    master.put(PUTALL_KEY2,PUTALL_VALUE2);
    master.put(PUTALL_KEY3,PUTALL_VALUE3);
    master.put(PUTALL_KEY4,PUTALL_VALUE4);
    master.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(master,""putAllCallbackArg"");
    EventID[] devads=new EventID[5];
    devads[0]=putAlleventId1;
    devads[1]=putAlleventId2;
    devads[2]=putAlleventId3;
    devads[3]=putAlleventId4;
    devads[4]=putAlleventId5;
    assertNotNull(devads[0]);
    assertNotNull(devads[1]);
    assertNotNull(devads[2]);
    assertNotNull(devads[3]);
    assertNotNull(devads[4]);
    return devads;
  }
 catch (  Exception e) {
    fail(""put failed due to "" + e);
  }
  return null;
}",200,4,"evids:devads,map:master,",86,1.17,ALERT
1138,"public void read(ByteCodeParser in) throws IOException {
  int length=in.readInt();
  _maxStack=in.readShort();
  _maxLocals=in.readShort();
  int codeLength=in.readInt();
  _code=new byte[codeLength];
  in.read(_code,0,codeLength);
  int exnCount=in.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(in.readShort() & 0xffff);
    exn.setEnd(in.readShort() & 0xffff);
    exn.setHandler(in.readShort() & 0xffff);
    exn.setType(in.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=in.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=in.parseAttribute();
    _attributes.add(attr);
  }
}","public void read(ByteCodeParser doc) throws IOException {
  int length=doc.readInt();
  _maxStack=doc.readShort();
  _maxLocals=doc.readShort();
  int codeLength=doc.readInt();
  _code=new byte[codeLength];
  doc.read(_code,0,codeLength);
  int exnCount=doc.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(doc.readShort() & 0xffff);
    exn.setEnd(doc.readShort() & 0xffff);
    exn.setHandler(doc.readShort() & 0xffff);
    exn.setType(doc.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=doc.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=doc.parseAttribute();
    _attributes.add(attr);
  }
}",197,12,"in:doc,",73,0.63,ALERT
1139,,,25,2,,381,2.978952964146930,0
1141,,,81,2,,793,6.885106190045680,0
1142,"@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
","@Override public void bind(){
  try {
    if (connection != null) {
      connection.bind();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
",39,1,"close:bind,",34,0.26,ALERT
1143,,,47,3,,1151,18.042139999071800,0
1145,"public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
","public Phone createPhone(String value){
  PhoneField PhoneEntry=new PhoneField();
  try {
    PhoneEntry.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return PhoneEntry;
}
",43,3,"phoneImpl:PhoneEntry,",39,0.36,ALERT
1146,"@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
","@Override public PacketBuffer write(PacketBuffer empty){
  values.forEach(null);
  return empty;
}
",21,2,"buf:empty,",35,0.25,ALERT
1147,"public static String randomRegexpishString(Random r){
  return randomRegexpishString(r,20);
}","public static String randomRegexpishString(Random random){
  return randomRegexpishString(random,20);
}",18,2,"r:random,",36,0.55,ALERT
1148,,,71,3,,1077,12.626659830411300,0
1149,,,185,3,,1137,8.522943600018820,0
1150,,,69,4,,1490,18.587378990650200,0
1151,"public void jGoogleAnalyticsTracker(final String eventType,final String version,final String trackerId){
  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(""vdi_calculator"",version,trackerId);
  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());
  tracker.trackAsynchronously(focusPoint);
}
","public void jGoogleanalyticTrack(final String eventType,final String version,final String trackerId){
  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(""vdi_calculator"",version,trackerId);
  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());
  tracker.trackAsynchronously(focusPoint);
}
",53,6,"jGoogleAnalyticsTracker:jGoogleanalyticTrack,",96,0.76,ALERT
1152,,,36,2,,794,7.751283033688860,0
1153,"private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){
  final Set<T> values=new HashSet<T>(collection.size());
  for (  final S instance : collection) {
    values.add(extractor.getValue(instance));
  }
  return values;
}
","private <S,T>Set<T> compract(final Collection<S> set,final Extractor<S,T> extraction){
  final sets values=new HashSet<T>(set.size());
  for (  fcopynstance : set) {
    vsetsadd(extraction.getValue(copy));
  }
  return sets;
}
",75,5,"extract:compract,collection:set,extractor:extraction,values:sets,instance:copy,",250,2.48,ALERT
1154,,,113,12,,4285,44.26798489491150,0
1155,,,136,8,,2708,36.241778842608100,0
1157,"public int size(){
  return al.size();
}
","public int send(){
  return al.send();
}
",14,1,"size:send,",35,0.25,ALERT
1158,"public void addNode(TopologicalNode node){
  nodeList.add(node);
}
","public void createPoint(TopologicalNode tree){
  nodeList.add(tree);
}
",16,2,"addNode:createPoint,node:tree,",294,2.87,ALERT
1159,,,35,3,,959,8.592138568560280,0
1160,,,121,7,,2266,33.093484330177300,0
1161,"public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
","public boolean schedule(Runnable func,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(func,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
",43,6,"task:func,",43,0.51,ALERT
1162,,,88,3,,1113,12.114262998104100,0
1163,,,53,3,,1154,14.250639271736100,0
1164,"public void reset(){
  displayCache.clear();
  cachedID.clear();
}
","public void refresh(){
  displayCache.clear();
  cachedID.clear();
}
",19,1,"reset:refresh,",31,0.26,ALERT
1165,"public double doubleValue(){
  return d.doubleValue();
}
","public double floatValues(){
  return d.floatValues();
}
",14,1,"doubleValue:floatValues,",26,0.24,ALERT
1166,"public void addRequestProperty(String key,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (key == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(key,value);
}
","public void addMessageProp(String hash,String letter){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (hash == null)   throw new NullPointerException(""key is null"");
  if (commes == null)   commes=new MessageHeader();
  recommesdd(hash,letter);
}
",58,4,"addRequestProperty:addMessageProp,key:hash,value:letter,requests:commes,",702,5.25,ALERT
1167,,,109,6,,1374,16.16568075021110,0
1168,"public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(clusterData,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf(""%s\\t"",n);
    for (    int m : c) {
      out.printf(""%d\\t"",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}
","public final void writeClients(PrintWriter out,List<ClusterData> plancerdata,int[] matIndexToMsInternalIndex) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(plancerdata,matIndexToMsInternalIndex);
  }
  for (  Map.Entry<String,Collection<Integer>> ie : m_finalClusters.entrySet()) {
    final String n=ie.getKey();
    final Collection<Integedc> c=ie.getValue();
    out.printf(""%s\\t"",n);
    for (    int mu: dc) {
      out.printf(""%d\\t"",matIndexToMsInternalIndex[u]);
    }
    out.println();
  }
}
",120,8,"printClusters:writeClients,clusterData:plancerdata,matIndexToMsgInternalId:matIndexToMsInternalIndex,entry:ie,c:dc,m:u,",322,3.74,ALERT
1169,"public static String gensalt(int log_rounds,SecureRandom random){
  StringBuffer rs=new StringBuffer();
  byte rnd[]=new byte[BCRYPT_SALT_LEN];
  random.nextBytes(rnd);
  rs.append(""$2a$"");
  if (log_rounds < 10) {
    rs.append(""0"");
  }
  if (log_rounds > 30) {
    throw new IllegalArgumentException(""log_rounds exceeds maximum (30)"");
  }
  rs.append(Integer.toString(log_rounds));
  rs.append(""$"");
  rs.append(encode_base64(rnd,rnd.length));
  return rs.toString();
}","public static String gensort(int log_rounds,SecureRandom random){
  StringBuffer rs=new StringBuffer();
  byte rnd[]=new byte[BCRYPT_SALT_LEN];
  random.nextBytes(rnd);
  rs.append(""$2a$"");
  if (log_rounds < 10) {
    rs.append(""0"");
  }
  if (log_rounds > 30) {
    throw new IllegalArgumentException(""log_rounds exceeds maximum (30)"");
  }
  rs.append(Integer.toString(log_rounds));
  rs.append(""$"");
  rs.append(encode_base64(rnd,rnd.length));
  return rs.toString();
}",116,5,"gensalt:gensort,",42,0.58,ALERT
1170,"public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}","public static String replaceChars(String str,String newchars,char Newcharacter){
  int pos=indexOfChars(str,newchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,Newcharacter);
    pos=indexOfChars(str,newchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}",87,6,"newchar:Newcharacter,oldchars:newchars,",100,1.22,ALERT
1171,"public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){
  List<File> dirs=new ArrayList<File>();
  dirs.add(dir);
  return expandSpecWildcards(dirs,modules,forBackend);
}
","public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){
  List<File> directs=new ArrayList<File>();
  directs.add(dir);
  return expandSpecWildcards(directs,modules,forBackend);
}
",53,5,"dirs:directs,",43,0.65,ALERT
1172,"public void serialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialize(serializer);
  serializer.endTag(ns,TAG);
}
","public void serialise(KXmlSerializer serializable) throws IOException {
  serializable.startTag(ns,TAG);
  serializeAttribute(serializable,NAME_ATTR,mName);
  serializeAttribute(serializable,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializable,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializable.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialise(serializable);
  serializable.endTag(ns,TAG);
}
",87,2,"serialize:serialise,serializer:serializable,",64,0.65,ALERT
1173,,,14,1,,470,3.947708511352540,0
1174,,,39,2,,609,8.693309891223910,0
1175,"protected void waitForShutdownSignal() throws InterruptedException {
  if (mutexWaiting == null)   mutexWaiting=new Object();
  try {
synchronized (mutexWaiting) {
      mutexWaiting.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}
","protected void waitForShutdownsigna() throws InterruptedException {
  if (mutexWAipping == null)   mutexWAipping=new Object();
  try {
synchronized (mutexWAipping) {
      mutexWAipping.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}
",52,2,"waitForShutdownSignal:waitForShutdownsigna,mutexWaiting:mutexWAipping,",563,5.02,ALERT
1176,,,41,1,,448,4.620836901664730,0
1177,,,23,2,,645,7.082270757357280,0
1178,,,66,3,,483,6.649467464288080,0
1179,,,39,2,,463,4.292939917246500,0
1180,,,185,5,,1846,20.477551925182300,0
1181,"protected void describeVocabularies(final IVCount[] predicatePartitionCounts){
  final Set<String> namespaces=new LinkedHashSet<String>();
{
    for (    IVCount tmp : predicatePartitionCounts) {
      final URI p=(URI)tmp.getValue();
      String namespace=p.getNamespace();
      if (namespace.endsWith(""#"")) {
        namespace=namespace.substring(0,namespace.length() - 1);
      }
      namespaces.add(namespace);
    }
  }
  final String[] a=namespaces.toArray(new String[namespaces.size()]);
  Arrays.sort(a);
  for (  String namespace : a) {
    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(namespace));
  }
}","protected void describeVocabolicIES(final IVCount[] predicatePartitionSeconds){
  final Set<String> stylesities=new LinkedHashSet<String>();
{
    for (    IVCount tpp: predicatePartitionSeconds) {
      final URIbpp=(URI)pp.getValue();
      String nnamewordbp.getNamespace();
      if (nameword.endsWith(""#"")) {
        nameword=nameword.substring(0,nameword.length() - 1);
      }
      stylesities.add(nameword);
    }
  }
  final String[] a=asttylesities.toArray(new String[stylesities.size()]);
  Arrays.sort(ast);
  for (  String nameword : ast) {
    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(nameword));
  }
}",150,7,"describeVocabularies:describeVocabolicIES,predicatePartitionCounts:predicatePartitionSeconds,namespaces:stylesities,tmp:pp,p:bp,namespace:nameword,a:ast,",399,3.7,ALERT
1182,"default Document putAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field field : fields) {
    if (acceptableFieldNames.test(field.getName())) {
      setValue(field.getName(),field.getValue());
    }
  }
  return this;
}
","default Document PutArray(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field field : fields) {
    if (acceptableFieldNames.test(field.getName())) {
      setValue(field.getName(),field.getValue());
    }
  }
  return this;
}
",60,4,"putAll:PutArray,",21,0.24,ALERT
1183,,,63,2,,787,6.538459142049150,0
1184,,,39,2,,802,12.227539304892200,0
1185,,,85,2,,654,7.779309244950610,0
1186,"public static boolean isUriKey(String key){
  return key.endsWith("".url"") || key.endsWith("".uri"");
}
","public static boolean isUurikey(String key){
  return key.endsWith("".url"") || key.endsWith("".uri"");
}
",25,2,"isUriKey:isUurikey,",29,0.27,ALERT
1187,"private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}","private Collection<ExtractedItemsCollection> filterItembyTier(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}",96,6,"filterItemsByLevel:filterItembyTier,",37,0.32,ALERT
1188,"public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnToUrl,returnToUrl);
}
","public AuthRequest authenticate(List discoveries,String returnToUr) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnToUr,returnToUr);
}
",26,3,"returnToUrl:returnToUr,",39,0.36,ALERT
1189,"protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}","protected void sqrflayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double csspc=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / csspc) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / csspc) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}",402,18,"sqrtLayout:sqrflayout,sspan:csspc,",306,4.36,ALERT
1190,"public GeoDistanceBuilder addUnboundedFrom(String key,double from){
  ranges.add(new Range(key,from,null));
  return this;
}
","public GeoDistanceBuilder addUnbboundOn(String index,double c){
  ranges.add(new Range(index,c,null));
  return this;
}
",30,3,"addUnboundedFrom:addUnbboundOn,key:index,from:c,",516,5.23,ALERT
1191,"public boolean checkForRp(){
  return NullColumnValueGetter.isNotNullValue(getRpCopyName());
}
","public boolean checkForNvp(){
  return NullColumnValueGetter.isNotNullValue(getRpCopyName());
}
",17,1,"checkForRp:checkForNvp,",22,0.26,ALERT
1192,"public void close() throws IOException {
  flushBits();
  out.close();
}
","public void one() throws IOException {
  flushBits();
  out.one();
}
",19,1,"close:one,",34,0.28,ALERT
1194,"private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}","private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] Proaxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    Proaxys[k++]=reg.proxy;
  }
  return Proaxys;
}",73,5,"proxys:Proaxys,",44,0.41,ALERT
1196,,,17,1,,468,3.7728293458620700,0
1197,"public void stop(){
  server.stop(0);
}","public void port(){
  server.port(0);
}",14,1,"stop:port,",34,0.21,ALERT
1199,,,87,7,,2544,24.22506219148640,0
1200,"public ByteArrayDataSource(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}","public ByteArrayDataSource(InputStream i,String p){
  try {
    ByteArrayOutputStream nos=new ByteArrayOutputStream();
    int read;
    while (readh=i.read()) != -1) {
      nos.write(read);
    }
    mm_basenos.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"""",ioex);
  }
  if (p != null && p.length() > 0)m__typesype=p;
}",95,6,"is:i,type:p,os:nos,ch:read,m_data:m_base,m_type:m__types,",427,3.4,ALERT
1201,"public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
","public static void save(String source){
  String uri=getDriver(source);
  if (uri != null) {
    loadUserClass(uri);
  }
}
",31,3,"driver:uri,url:source,load:save,",94,0.95,ALERT
1202,,,124,4,,1121,16.485945073763500,0
1203,,,108,3,,896,18.836178421974200,0
1204,"private void stashRequestUser(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions=""{}"";
  }
}
","private void stashCurrentMe(RequestAndResponse requestAndReturn){
  if (requestAndReturn.wasUserAlreadyStashed) {
    return;
  }
  requestAndReturn.wasUserAlreadyStashed=true;
  final Useparenter=dbLogic.getUserById(getEffectiveUserId(requestAndReturn));
  if (parent != null) {
    requestAndReturn.ususeIsActivearent.getIsAdmin();
    requestAndReturn.ususerIsaccountClosingarent.getIsAccountClosed();
    requestAndReturn.usaccountConfigarent.getOptions();
  }
 else {
    requestAndReturn.accountConfig=""{}"";
  }
}
",86,6,"stashRequestUser:stashCurrentMe,requestAndResponse:requestAndReturn,user:parent,userIsAdmin:useIsActive,userIsAccountClosed:userIsaccountClosing,userOptions:accountConfig,",388,5.65,ALERT
1205,"protected void addBottomComponent(Component bottomComponent){
  c.weighty=2;
  layout.setConstraints(bottomComponent,c);
  contentPanel.add(bottomComponent);
}","protected void addTopButton(Component bottomComponent){
  c.weighty=2;
  layout.setConstraints(bottomComponent,c);
  contentPanel.add(bottomComponent);
}",31,4,"addBottomComponent:addTopButton,",31,0.31,ALERT
1206,"protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}","protected double kernelHelper(int node,char[] s,int endPositionL,char[] t,int endPointE){
  if (node <= 0) {
    return getReturnValue(node);
  }
  if (Math.min(endendPositionL1,endendPointE1) < node) {
    return getReturnValue(node);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_adrtX * node + m_multY * endPositionL + m_multZ * endPointE;
    if (acheKhContext[adr % headCache] == adr + 1) {
      return ccachekhadr % headCache];
    }
  }
  double score=0;
  result=m_lamscorekernelHelper(node,s,esdendPositionL1,t,endItdendPointErnelHelper2(node,s,endPositionL,t,endPointE);
  if (m_useRecursionCache) {
    acheKhContext[adr % headCache]=adr + 1;
    cachekh[adr %headCachee]=score;
  }
  return score;
}",178,11,"n:node,endIndexS:endPositionL,endIndexT:endPointE,result:score,cachekhK:acheKhContext,maxCache:headCache,",493,10.55,ALERT
1207,"private static String unwrap(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}","private static String conwrapper(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}",94,2,"unwrap:conwrapper,",31,0.24,ALERT
1209,"private byte[] entityToBytes(HttpEntity entity,Request request) throws IOException, ServerError {
  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());
  byte[] buffer=null;
  try {
    InputStream in=entity.getContent();
    if (in == null) {
      throw new ServerError();
    }
    buffer=mPool.getBuf(1024);
    int progress=0;
    int count;
    while ((count=in.read(buffer)) != -1) {
      bytes.write(buffer,0,count);
      progress+=count;
      request.progressUpdate(progress);
    }
    return bytes.toByteArray();
  }
  finally {
    try {
      entity.consumeContent();
    }
 catch (    IOException e) {
      VinciLog.d(""Error occured when calling consumingContent"");
    }
    mPool.returnBuf(buffer);
    bytes.close();
  }
}","private byte[] entityTobytes(HttpEntity entity,Request Request) throws IOException, ServerError {
  PoolingByteArrayOutputStream fs=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());
  byte[] fb=null;
  try {
    InputStream a=entity.getContent();
    if (a == null) {
      throw new ServerError();
    }
    fb=mPool.getBuf(1024);
    int act=0;
    int index;
    whiindexcoat=in.read(fb)) != -1) {
      fs.write(fb,0,index);
      act+=index;
      Request.progressUpdate(act);
    }
    return fs.toByteArray();
  }
  finally {
    try {
      entity.consumeContent();
    }
 catch (    IOException e) {
      VinciLog.d(""Error occured when calling consumingContent"");
    }
    mPool.returnBuf(fb);
    fs.close();
  }
}",172,8,"entityToBytes:entityTobytes,request:Request,bytes:fs,buffer:fb,in:a,progress:act,count:index,",370,4.29,ALERT
1210,"public CodeAttribute createCode(){
  CodeAttribute code=new CodeAttribute();
  for (int i=0; i < _attributes.size(); i++) {
    Attribute attr=_attributes.get(i);
    if (attr instanceof CodeAttribute)     return (CodeAttribute)attr;
  }
  return null;
}","public CodeAttribute newcode(){
  CodeAttribute ctrl=new CodeAttribute();
  for (int x=0; x < _attributes.size(); x++) {
    Attribute writer=_attributes.get(x);
    if (writer instanceof CodeAttribute)     return (CodeAttribute)writer;
  }
  return null;
}",60,4,"createCode:newcode,code:ctrl,i:x,attr:writer,",788,6.01,ALERT
1211,,,44,3,,878,9.869882905483250,0
1212,"private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}","private boolean isNotInsideArray(String r,String[] array){
  for (int i=0; i < array.length; i++) {
    if (r.equals(array[i])) {
      return false;
    }
  }
  return true;
}",52,4,"str:r,isNotInArray:isNotInsideArray,",57,0.59,ALERT
1213,"void addAttributeValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
","void addPropertyValue(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
",105,7,"addAttributeValues:addPropertyValue,",40,0.39,ALERT
1214,"public KafkaCluster usingDirectory(File dataDir){
  if (running)   throw new IllegalStateException(""Unable to add a broker when the cluster is already running"");
  if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) {
    throw new IllegalArgumentException(""The directory must be readable and writable"");
  }
  this.dataDir=dataDir;
  return this;
}
","public KafkaCluster Usingdir(File dataDir){
  if (running)   throw new IllegalStateException(""Unable to add a broker when the cluster is already running"");
  if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) {
    throw new IllegalArgumentException(""The directory must be readable and writable"");
  }
  this.dataDir=dataDir;
  return this;
}
",71,2,"usingDirectory:Usingdir,",26,0.23,ALERT
1215,"public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}","public static Object callGeneric(Class pluster,String functionName) throws NoSuchMethodException {
  try {
    Method method=pluster.getMethod(functionName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(functionName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}",87,5,"clazz:pluster,invokeStatic:callGeneric,methodName:functionName,",124,1.18,ALERT
1216,"private void attachImageFromCamera(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,""attachImageFromCamera fails to create thumbnail file"");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}","private void attachImagefromMedia(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBytemap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBytemap=Bitmap.createBitmap(previewBytemap,0,0,previewBytemap.getWidth(),previewBytemap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBytemap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,""attachImageFromCamera fails to create thumbnail file"");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}",254,10,"attachImageFromCamera:attachImagefromMedia,previewBitmap:previewBytemap,",317,3.13,ALERT
1217,"public void addLongSelectionListener(SelectionListener listener){
  if (listener == null)   throw new IllegalArgumentException();
  if (hexEditControl == null) {
    if (listOfLongListeners == null)     listOfLongListeners=new ArrayList<>();
    listOfLongListeners.add(listener);
  }
 else {
    hexEditControl.addLongSelectionListener(listener);
  }
}
","public void addLongSeectionAdapter(SelectionListener liten){
  if (liten == null)   throw new IllegalArgumentException();
  if (hexEditControl == null) {
    if (listOfLAddERS == null)     listOfLAddERS=new ArrayList<>();
 listOfLAddERSers.add(liten);
  }
 else {
    hexEditControl.addLongSeectionAdapter(liten);
  }
}
",61,3,"addLongSelectionListener:addLongSeectionAdapter,listener:liten,listOfLongListeners:listOfLAddERS,",506,6.26,ALERT
1218,"private void showFilterDialog(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}","private void showWidgetForm(Filter widget){
  int updateorder=mAdapter.getCount() - 1;
  if (widget == null) {
    EditFilterActivity.createNewFilter(getActivity(),updateorder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),widget,updateorder);
  }
}",55,3,"sortOrder:updateorder,filter:widget,showFilterDialog:showWidgetForm,",88,0.65,ALERT
1219,,,179,7,,2060,26.2874386827151,0
1220,"public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  create(rpfFilePaths,outputFile,false);
}
","public void type(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  type(rpfFilePaths,outputFile,false);
}
",25,3,"create:type,",38,0.35,ALERT
1221,"public static void scaleRectAboutCenter(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}","public static void scalerectAroundOffset(Rect p,float tile){
  if (tile != 1.0f) {
    int lcxx=p.centerX();
    int cy=p.centerY();
    p.offset(-lcxx,-cy);
    p.left=(int)(p.left * tile + 0.5f);
    p.top=(int)(p.top * tile + 0.5f);
    p.right=(int)(p.right * tile + 0.5f);
    p.bottom=(int)(p.bottom * tile + 0.5f);
    p.offset(lcxx,cy);
  }
}",127,9,"r:p,scale:tile,cx:lcxx,scaleRectAboutCenter:scalerectAroundOffset,",269,3.48,ALERT
1222,"private static void processArgs(String[] args){
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.equals(""-o"")) {
      outputDir=args[++i];
    }
 else     if (arg.equals(""-spec"")) {
      unicodeData=args[++i];
    }
 else     if (arg.equals(""-language"")) {
      language=args[++i];
    }
 else     if (arg.equals(""-country"")) {
      country=args[++i];
    }
 else     if (arg.equals(""-valiant"")) {
      valiant=args[++i];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}","private static void runArg(String[] args){
  for (int iv=0; iv < args.length; iv++) {
    String aargumentargs[iv];
    if (argument.equals(""-o"")) {
      oinputDirargs[++iv];
    }
 else     if (argument.equals(""-spec"")) {
      uunicaseFileargs[++iv];
    }
 else     if (argument.equals(""-language"")) {
      lparserargs[++iv];
    }
 else     if (argument.equals(""-country"")) {
      cdivisionargs[++iv];
    }
 else     if (argument.equals(""-valiant"")) {
      vvoliateargs[++iv];
    }
 else {
      usage();
    }
  }
  locameString=getLocaleName();
}",150,9,"processArgs:runArg,i:iv,arg:argument,outputDir:inputDir,unicodeData:unicaseFile,language:parser,country:division,valiant:voliate,localeName:locameString,",1148,12.69,ALERT
1223,,,15,1,,414,4.338580048084260,0
1224,"public ExtendedTextLabel createExtended(Font font,CoreMetrics lm,Decoration decorator,int start,int limit){
  if (start >= limit || start < lineStart || limit > lineLimit) {
    throw new IllegalArgumentException(""bad start: "" + start + "" or limit: ""+ limit);
  }
  int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);
  int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;
  int layoutFlags=flags & ~0x9;
  if ((level & 0x1) != 0)   layoutFlags|=1;
  if ((linedir & 0x1) != 0)   layoutFlags|=8;
  TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm);
  return new ExtendedTextSourceLabel(source,decorator);
}","public ExtendedTextLabel createAppension(Font pattern,CoreMetrics slM,Decoration recorated,int space,int iter){
  if (space >= iter || space < lineStart || iter > lineLimit) {
    throw new IllegalArgumentException(""bad start: "" + space + "" or limit: ""+ iter);
  }
  int l=lineBidi == null ? 0 : lineBidi.getLevelAt(space - lineStart);
  int linedDir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;
  int LayoutFlag=flags & ~0x9;
  if ((l & 0x1) != 0)   LayoutFlag|=1;
  if ((linedDir & 0x1) != 0)   LayoutFlag|=8;
  TextSourcviewce=new StandardTextSource(text,starspaceiitertarspaceeStart,lineLimit - lineStart,leveloLayoutFlagtern,frc,slM);
  return new ExtendedTextSourceLabel(view,recorated);
}",163,10,"createExtended:createAppension,font:pattern,lm:slM,decorator:recorated,start:space,limit:iter,level:l,linedir:linedDir,layoutFlags:LayoutFlag,source:view,",755,6.19,ALERT
1225,"public void continueButtonActionPerformed(java.awt.event.ActionEvent e){
  if (testRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText(""Running Wraparound Test"");
      statusText1.setVisible(true);
    }
  }
}","public void continueButtonActionClickressed(java.awt.event.ActionEvent e){
  if (testRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText(""Running Wraparound Test"");
      statusText1.setVisible(true);
    }
  }
}",47,2,"continueButtonActionPerformed:continueButtonActionClickressed,",56,0.54,ALERT
1227,,,94,4,,1500,14.382791189352700,0
1228,"private void loadMap(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
","private void readMap(String extortion,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extortion);
  }
  extensionToMimeTypeMap.put(extortion,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
",58,3,"extension:extortion,loadMap:readMap,",57,0.61,ALERT
1229,"void copyInto(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}","void CopyIno(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}",27,2,"copyInto:CopyIno,",28,0.29,ALERT
1230,"private static Position nextTokenPos(Position pos,Token[][] spec){
  if (pos == null) {
    return null;
  }
  int nextItem=pos.item + 1;
  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {
    return new Position(pos.line,nextItem);
  }
  int nextLine=pos.line + 1;
  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}","private static Position nextPositionLocation(Position position,Token[][] space){
  if (position == null) {
    return null;
  }
  int nextItem=position.item + 1;
  if ((nextItem < space[position.line].length) && ((position.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {
    return new Position(position.line,nextItem);
  }
  int nextLine=position.line + 1;
  while ((nextLine < space.length) && (space[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < space.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}",172,5,"nextTokenPos:nextPositionLocation,spec:space,pos:position,",140,1.45,ALERT
1232,,,152,7,,2183,15.542849469184900,0
1233,"public synchronized void commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
","public synchronized void commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columnes=new LinkedHashSet<>(temp.keySet());
  }
}
",75,4,"columns:columnes,",24,0.24,ALERT
1236,"public static MoveParticipant[] loadMoveParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,MoveArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){
  RefactoringParticipant[] participants=fgMoveExtensions.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);
  MoveParticipant[] result=new MoveParticipant[participants.length];
  System.arraycopy(participants,0,result,0,participants.length);
  return result;
}","public static MoveParticipant[] loadMoveOccupans(RefactoringStatus instance,RefactoringProcessor prot,Object server,MoveArguments arguments,IParticipantDescriptorFilter service,String[] affectedNatures,SharableParticipants coll){
  RefactoringParticipaparticipancespants=fgMoveExtensions.getParticipants(instance,prot,server,arguments,service,affectedNatures,coll);
  MoveParticipant[] rResultnew MoveParticipant[participances.length];
  System.arraycopy(participances,0,rResult0,participances.length);
  return Result;
}",89,10,"loadMoveParticipants:loadMoveOccupans,status:instance,processor:prot,element:server,filter:service,shared:coll,participants:participances,result:Result,",555,5.7,ALERT
1237,,,13,1,,430,3.10739871263504,0
1238,"private Segment createDiskSegment(SegmentDescriptor descriptor){
  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());
  Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);
  descriptor.copyTo(buffer);
  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug(""Created segment: {}"",segment);
  return segment;
}
","private Segment createDiskSegments(SegmentDescriptor desccriptore){
  File segmbevisionFilesmentFile.createSegmentFile(name,storage.directory(),desccriptore.id(),desccriptore.version());
  Buffer bufffeBuffer.allocate(sebevisionFilesath.min(DEFAULT_BUFFER_SIZE,desccriptore.maxSegmentSize()),Integer.MAX_VALUE);
  desccriptore.copyTo(f);
  Segment spegementnew Segment(new SegmentFile(segmbevisionFilesfffce(),desccriptore,createIndex(desccriptore),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug(""Created segment: {}"",pegement);
  return pegement;
}
",122,5,"createDiskSegment:createDiskSegments,descriptor:desccriptore,segmentFile:bevisionFiles,buffer:f,segment:pegement,",224,1.84,ALERT
1239,"public void output(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}","public void page(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}",41,3,"output:page,",35,0.38,ALERT
1240,"private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
","private static void assertChangeChanges(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent el : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(el));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(el));
  }
  for (  PortChangeEvent el : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(el));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(el));
  }
  for (  PortChangeEvent el : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(el));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(el));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
",337,11,"assertChangeEvents:assertChangeChanges,ev:el,",456,8.41,ALERT
1241,"@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","@Override protected synchronized void flow(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",60,3,"write:flow,",65,0.51,ALERT
1242,"public String text(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}
","public String format(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}
",42,3,"text:format,",33,0.28,ALERT
1243,"public void stop(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blinkService) {
    blinkService.shutdownNow();
  }
}
","public void quit(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blinkService) {
    blinkService.shutdownNow();
  }
}
",41,1,"stop:quit,",31,0.25,ALERT
1244,"boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}","boolean setNext() throws IOException {
  int tosend;
  int error;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      error=localSend(block,tosend);
      updateLocalClock();
      if (error != -1) {
        totalSent+=error;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      error=tosend=0;
    }
  }
 while (error > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}",161,5,"sent:error,writeData:setNext,",160,1.55,ALERT
1245,"@Override public final void writeBoolean(boolean v) throws IOException {
  dis.writeBoolean(v);
}
","@Override public final void writeOLong(boolean en) throws IOException {
  dis.writeOLong(en);
}
",21,2,"writeBoolean:writeOLong,v:en,",59,0.44,ALERT
1246,"public int loadSigned16(int addr){
  return loadSigned16(addr,AccessSource.CODE);
}","public int loadSIGN32(int addr){
  return loadSIGN32(addr,AccessSource.CODE);
}",19,2,"loadSigned16:loadSIGN32,",36,0.37,ALERT
1248,"private ImageElement(int AD_PrintFormatItem_ID){
  loadAttachment(AD_PrintFormatItem_ID);
}
","private ImageElement(int AD_PrintFormatElementNameURL){
  loadAttachment(AD_PrintFormatElementNameURL);
}
",13,1,"AD_PrintFormatItem_ID:AD_PrintFormatElementNameURL,",35,0.27,ALERT
1249,,,34,2,,674,6.298176527023320,0
1250,,,41,2,,760,8.17502530415853,0
1251,"public void proposeTree() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    i=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == i);
  final NodeRef iP=tree.getParent(i);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}
","public void decompeGraph() throws OperatorFailedException {
  NodeRef ip;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    ip=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == ip);
  final NodeRef iP=tree.getParent(ip);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(ip)) || (ip == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == ip)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(tree,iP,ip);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(ip),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(ip),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}
",510,14,"i:ip,proposeTree:decompeGraph,",493,4.6,ALERT
1252,"public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}","public static void F(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}",76,4,"f:F,",38,0.3,ALERT
1253,,,84,4,,1003,9.19482540289561,0
1254,"private boolean zzRefill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzPushbackPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzBuffer.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);
    zzBuffer=newBuffer;
  }
  final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}","private boolean zzyFfill() throws java.io.IOException {
  if (ddEndRun > 0) {
    System.arrayctzBufferffer,zzddEndRtzBufferr,0,zzyStartRun - ddEndRun);
    zzyStartRun-=ddEndRun;
    zzyCurPos-=ddEndRun;
    zzMarkedPos-=ddEndRun;
    zzPushbackPos-=ddEndRun;
    ddEndRun=0;
  }
  if (zzyCurPos >= tzBuffer.length) {
    final chnewLinefer[]=new char[zzyCurPos * 2];
    System.arraycoptzBufferer,0,newLine,0,tzBuffer.length);
  tzBufferer=newLine;
  }
  final int numRnumReadeader.read(zzButzBufferStartRun,zztzBufferength - zzyStartRun);
  if (numRead < 0) {
    return true;
  }
 else {
    zzyStartRun+=numRead;
    return false;
  }
}",143,9,"zzRefill:zzyFfill,zzEndRead:zzyStartRun,zzCurrentPos:zzyCurPos,zzStartRead:ddEndRun,newBuffer:newLine,zzBuffer:tzBuffer,",400,4.55,ALERT
1255,"public boolean revisionContainsTemplateName(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}
","public boolean revisionContaintemplateNames(int versionid,String platePath) throws WikiApiException {
  return revisionContainsTemplateNames(versionid,Arrays.asList(new String[]{platePath}));
}
",33,3,"revisionContainsTemplateName:revisionContaintemplateNames,revId:versionid,templateName:platePath,",137,1.75,ALERT
1256,,,61,1,,399,5.3889358599980700,0
1257,"static WindowsFileAttributes fromFindData(long address){
  int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES);
  long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME);
  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME);
  long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);
}","static WindowsFileAttributes FromfindInfo(long layer){
  infileExtRSrs=unsafe.getInt(layer + OFFSETOF_FIND_DATA_ATTRIBUTES);
  lonselectionPointme=unsafe.getLong(layer + OFFSETOF_FIND_DATA_CREATETIME);
  lonnextaccessValueme=unsafe.getLong(layer + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  lonlastWriteValueme=unsafe.getLong(layer + OFFSETOF_FIND_DATA_LASTWRITETIME);
  lcodesize=((long)(unsafe.getInt(layer + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(layer + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  inreshareTagag=isReparsePoinfileExtRSrs) ? unsafe.getInt(layer + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileExtRS,selectionPoint,nextaccessValue,lastWriteValue,code,reshareTag,0,0,0);
}",133,8,"fromFindData:FromfindInfo,address:layer,fileAttrs:fileExtRS,creationTime:selectionPoint,lastAccessTime:nextaccessValue,lastWriteTime:lastWriteValue,size:code,reparseTag:reshareTag,",1305,16.79,ALERT
1258,"public void load(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
","public void load(Element name,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
",19,3,"element:name,",32,0.24,ALERT
1259,,,27,2,,791,7.789200973510740,0
1260,,,71,5,,1618,17.971313269933100,0
1261,,,121,2,,684,10.617956562837000,0
1262,,,30,3,,1142,8.230307841300970,0
1263,"public ControlFlowGraph run(CompilationUnitTree root,ProcessingEnvironment env,MethodTree tree,ClassTree classTree){
  UnderlyingAST underlyingAST=new CFGMethod(tree,classTree);
  return run(root,env,underlyingAST);
}
","public ControlFlowGraph use(CompilationUnitTree output,ProcessingEnvironment ep,MethodTree ree,ClassTree statictree){
  UnderlyingAST UnderlyingATH=new CFGMethod(ree,statictree);
  return use(output,ep,UnderlyingATH);
}
",39,6,"run:use,root:output,env:ep,tree:ree,classTree:statictree,underlyingAST:UnderlyingATH,",417,3.86,ALERT
1264,"public void testFloatValueNeg(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}","public void assertNumberAmountPos(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}",40,4,"testFloatValueNeg:assertNumberAmountPos,",63,0.46,ALERT
1265,"public void addGetters(int assignedPropertyNumber,String propertyName){
  for (  EventType type : knownTypes) {
    EventPropertyGetter getter=type.getGetter(propertyName);
    VariantPropertyGetterRow row=allGetters.get(type);
    if (row == null) {
synchronized (this) {
        row=new VariantPropertyGetterRow(type,new EventPropertyGetter[assignedPropertyNumber + 1]);
        allGetters.put(type,row);
      }
    }
    row.addGetter(assignedPropertyNumber,getter);
  }
  properties.add(propertyName);
}","public void addGetter(int assignedComponentNumber,String PropertyNames){
  for (  EventType field : knownTypes) {
    EventPropertyGetter geGettersfieldgetGetter(PropertyNames);
    VariantPropertyGetterRow rcolumnallGetters.get(field);
    if (column == null) {
synchronized (this) {
        rocolumnew VariantPropertyGetterRow(tfieldnew EventPropertyGetter[assignedComponentNumber + 1]);
        allGetters.put(field,column);
      }
    }
    rocolumnddGetter(assignedComponentNumber,Getters);
  }
  properties.add(PropertyNames);
}",96,6,"addGetters:addGetter,assignedPropertyNumber:assignedComponentNumber,propertyName:PropertyNames,type:field,getter:Getters,row:column,",644,6.0,ALERT
1266,"private void adjustBackingFileLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}","private void adjustBackingBufferLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}",77,4,"adjustBackingFileLength:adjustBackingBufferLength,",35,0.46,ALERT
1267,"public String jsTypeName(TypeRef typeRef){
switch (typeRef.getKind()) {
case TYPE_MESSAGE:
    return ""Object"";
case TYPE_ENUM:
  return ""number"";
default :
{
  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());
  if (!Strings.isNullOrEmpty(name)) {
    return name;
  }
  throw new IllegalArgumentException(""unknown type kind: "" + typeRef.getKind());
}
}
}
","public String getObjectNames(TypeRef styleREF){
switch (styleREF.getKind()) {
case TYPE_MESSAGE:
    return ""Object"";
case TYPE_ENUM:
  return ""number"";
default :
{
  String naPRIMITIVE_TYPE_NAMES.get(styleREF.getKind());
  if (!Strings.isNullOrEmpty(a)) {
    return a;
  }
  throw new IllegalArgumentException(""unknown type kind: "" + styleREF.getKind());
}
}
}
",77,3,"jsTypeName:getObjectNames,typeRef:styleREF,name:a,",363,4.16,ALERT
1268,"public void clear(){
  infoQueue.clear();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastAllocationOffset=allocationLength;
}","public void quiet(){
  infoQueue.quiet();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastAllocationOffset=allocationLength;
}",51,5,"clear:quiet,",77,0.64,ALERT
1269,"private static double hackyAdjuster(double f){
  double tmp=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));
}","private static double hackYAdjuster(double fp){
  double ttnMath.sqrt(1.0 - fp);
  return (fp <= 0.5) ? ttn: ttn+ (0.01 * (fp - 0.5));
}",43,3,"hackyAdjuster:hackYAdjuster,f:fp,tmp:tn,",287,5.59,ALERT
1270,"private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}","private void drawHook(Canvas conlas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float bi=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(bi + bi / 2,bi + bi / 2,bi + bi / 2 + 6,bi + bi + bi / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(bi + bi / 2,(bi + bi + bi / 2) - 3f,bi + bi / 2 + bi + bi,bi + bi + bi / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=conlas.getSaveCount();
  hookPath.close();
  conlas.rotate(-45,rectF.centerX(),rectF.centerY());
  conlas.drawPath(hookPath,mHookPaint);
  conlas.restoreToCount(restoreCount);
}",260,9,"i:bi,canvas:conlas,",104,1.0,ALERT
1271,"@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedFiles.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedFiles,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedFiles);
}
","@NotNull protected VirtualFile[] collectAffectatedVersions(@NotNull Project source,@NotNull VirtualFile[] modules){
  List<VirtualFile> afaffiliatedFileew ArrayList<VirtualFile>(modules.length);
  ProjectLevelVcsManagerprojectLevelCcsDirectorr=ProjectLevelVcsManager.getInstance(source);
  for (  VirtualFile fisource modules) {
    if (!fsourceisDirectory() && projectLevelCcsDirector.getVcsFor(source) instanceof GitVcs) {
      affiliatedFile.add(source);
    }
 else     if (source.isDirectory() && isRecursive()) {
      addChildren(source,affiliatedFile,source);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affiliatedFile);
}
",117,6,"collectAffectedFiles:collectAffectatedVersions,project:source,files:modules,affectedFiles:affiliatedFile,projectLevelVcsManager:projectLevelCcsDirector,file:source,",1706,17.34,ALERT
1272,"public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}","public List<String> classifier(List<List<Feature>> ifications) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(ifications);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}",168,11,"features:ifications,classify:classifier,",343,3.02,ALERT
1273,"public void clear(){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  selection.clear();
  if (!oldSelection.isEmpty()) {
    fireSelectionChanged(oldSelection,selection);
  }
}
","public void connect(){
  Set<Sensor> newSllected=new HashSet<Sensor>(selection);
  selection.connect();
  if (!newSllected.isEmpty()) {
    fireSelectionChanged(newSllected,selection);
  }
}
",46,2,"oldSelection:newSllected,clear:connect,",67,0.54,ALERT
1274,"public int add(T dl,int row){
  _list.add(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}
","public int add(T layer,int row){
  _list.add(row,layer);
  fireTableRowsInserted(row,row);
  return row;
}
",31,3,"dl:layer,",41,0.42,ALERT
1275,"public static long calculateElapsedGC(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}","public static long calculateElTotalAverage(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}",33,3,"calculateElapsedGC:calculateElTotalAverage,",19,0.19,ALERT
1276,"static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}","static TokenStream pack(String fieldName,Analyzer indexAnalyizer,String content,char splitChar) throws IOException {
  if (indexAnalyizer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyizer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyizer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyizer,content,splitChar,splitCharIdx);
}",109,7,"indexAnalyzer:indexAnalyizer,wrap:pack,",146,1.61,ALERT
1277,,,261,11,,3448,31.341373864809700,0
1278,"@Override public String findLibrary(String name){
  String systemName=System.mapLibraryName(name);
  ArrayList<Loader> loaders=getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    Loader loader=loaders.get(i);
    Path path=loader.getPath(systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
    path=loader.getPath(""native/"" + systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int i=0; i < _nativePath.size(); i++) {
    Path path=_nativePath.get(i);
    if (path.canRead())     return path.getNativePath();
  }
  return super.findLibrary(name);
}","@Override public String findLib(String name){
  String packageType=System.mapLibraryName(name);
  ArrayList<Loader> Loaders=getLoaders();
  for (int fi=0; fi < Loaders.size(); fi++) {
    Loader lflowLoaders.get(fi);
    Pathpathh=lflowgetPath(packageType);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
   pathh=lflowgetPath(""native/"" + packageType);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int fi=0; fi < _nativePath.size(); fi++) {
    Path ppath_nativePath.get(fi);
    if (path.canRead())     return path.getNativePath();
  }
  return super.findLib(name);
}",177,7,"findLibrary:findLib,systemName:packageType,loaders:Loaders,i:fi,loader:flow,",354,3.44,ALERT
1279,,,12,1,,430,3.5242223183314000,0
1280,,,62,3,,837,7.771340898672740,0
1282,,,55,3,,1143,9.568389864762620,0
1283,,,104,4,,1512,15.58858346939090,0
1284,"@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
","@Override public void docotyleDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
",77,6,"doctypeDecl:docotyleDecl,",103,1.43,ALERT
1285,"protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}
","protected void sleep(int sleepMillis,int sleepNano) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNano);
}
",23,3,"sleepNanos:sleepNano,",38,0.29,ALERT
1286,"public int retrieveRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}","public int retrievingrowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}",71,4,"retrieveRowCount:retrievingrowCount,",28,0.24,ALERT
1287,"public static void flush(){
  clearBuffer();
  try {
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public static void send(){
  clearBuffer();
  try {
    out.send();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",34,1,"flush:send,",34,0.26,ALERT
1288,,,71,6,,2040,22.17390685081480,0
1290,"public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}","public static Uri addMessage2Ui(ContentResolver reistor,Uri is,String address,String text,String email,Long data,boolean read,boolean deliverReport,long threadId){
  ContentValues changes=new ContentValues(7);
  changes.put(Sms.ADDRESS,address);
  if (data != null) {
    changes.put(Sms.DATE,data);
  }
  changes.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
changeses.put(Sms.SUBJECT,email);
  changes.put(Sms.BODY,text);
  if (deliverReport) {
    changes.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    changes.put(Sms.THREAD_ID,threadId);
  }
  return reistor.insert(is,changes);
}",169,11,"addMessageToUri:addMessage2Ui,resolver:reistor,uri:is,body:text,subject:email,date:data,deliveryReport:deliverReport,values:changes,",588,5.68,ALERT
1291,"public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
","public VNXeCommandJob modifyLRUNBackground(LunModifyParam view,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(view);
}
",49,5,"param:view,modifyLunAsync:modifyLRUNBackground,",59,0.34,ALERT
1292,,,18,2,,822,6.501133282979330,0
1293,"public long next(){
  long result=-1l;
  if (cache < 0L && bufferElements > 0) {
    result=getNextFromBuffer();
    bufferElements--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}","public long call(){
  long parent=-1l;
  if (cache < 0L && bufferElements > 0) {
    parent=getNextFromBuffer();
    bufferElements--;
  }
 else {
    parent=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (parent > first || parent == -1L) {
      cs.remove(first);
      cache=parent;
      parent=first;
    }
  }
  if (parent == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < parent,EC.GENERAL);
  previous=parent;
  readElements++;
  return parent;
}",132,7,"next:call,result:parent,",223,2.83,ALERT
1294,"public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}","public String convertSWFToHTML(InputStream din) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,din);
  reader.readFile();
  din.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}",98,8,"in:din,",48,0.34,ALERT
1295,"private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){
  Graphics2D gPr=(Graphics2D)g2.create();
  Rectangle2D loc=anno.getLocation();
  gPr.translate(loc.getX(),loc.getY());
  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());
  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());
  pane.setSize(size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));
  pane.setCaretPosition(0);
  pane.paint(gPr);
  gPr.dispose();
}","private void printAnnotationfromEdit(final WorkflowAnnotation anio,final Graphics2D g1){
  Graphics2D ggProp=(Graphics2D)g1.create();
  Rectangle2D ctx=anio.getLocation();
  ggProp.translate(ctx.getX(),ctx.getY());
  ggProp.setClip(0,0,(int)ctx.getWidth(),(int)ctx.getHeight());
  Dimension storage=new Dimension((int)ctx.getWidth(),(int)ctx.getHeight());
  pane.setSize(storage);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(anio));
  pane.setCaretPosition(0);
  pane.paint(ggProp);
  ggProp.dispose();
}",143,6,"printAnnotationFromEditor:printAnnotationfromEdit,anno:anio,g2:g1,gPr:ggProp,loc:ctx,size:storage,",1170,9.15,ALERT
1296,,,33,2,,782,6.941668963432310,0
1297,"public Matcher next() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matcher=matches.next();
  if (discard) {
    Pattern pattern=matcher.pattern();
    for (int n=0; n < patterns.length; n++) {
      if (patterns[n] == pattern) {
        patterns[n]=null;
        break;
      }
    }
  }
  return matcher;
}","public Matcher search() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matcher=matches.search();
  if (discard) {
    Pattern pattern=matcher.pattern();
    for (int n=0; n < patterns.length; n++) {
      if (patterns[n] == pattern) {
        patterns[n]=null;
        break;
      }
    }
  }
  return matcher;
}",92,5,"next:search,",48,0.45,ALERT
1298,"public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){
  byte[] buffer=new byte[byteBuffer.remaining()];
  byteBuffer.get(buffer);
  return buffer;
}
","public static byte[] readBytesFromDoubleSource(ByteBuffer bytesBuff){
  byte[]referencer=new byte[bytesBuff.remaining()];
  bytesBuff.get(reference);
  return reference;
}
",37,3,"readBytesFromByteBuffer:readBytesFromDoubleSource,byteBuffer:bytesBuff,buffer:reference,",1091,11.51,ALERT
1299,"public Set keySet(){
  return totalKeySet();
}
","public Set KeySet(){
  return totalKeySet();
}
",12,1,"keySet:KeySet,",13,0.1,ALERT
1300,"private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : document.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=document.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}
","private boolean transferDocument(SearchDocument NewContent,SearchDocument media,Map<String,Set<String>> removedEctions){
  boolean Mutated=false;
  for (  StrioldPropertyNameame : media.getPropertyNames()) {
    NewContent.addProperty(oldPropertyName);
    List<String> olderTimes=media.getProperty(oldPropertyName);
    if (olderTimes != null) {
      Set<StrinorganismsChangedved=(removedEctions != null) ? removedEctions.get(oldPropertyName) : null;
      for (      String onewText: olderTimes) {
        if ((organismsChanged != null) && (organismsChanged.contains(newText))) {
          Mutated=true;
        }
 else {
          addPropertyoldPropertyNameenewTexte,NewContent);
        }
      }
    }
  }
  return Mutated;
}
",137,9,"copyDocument:transferDocument,newDocument:NewContent,document:media,removedProperties:removedEctions,oldFieldName:oldPropertyName,oldValues:olderTimes,objectsRemoved:organismsChanged,oldValue:newText,mutated:Mutated,",733,7.44,ALERT
1301,,,74,5,,1669,15.04094295501710,0
1302,"static int firstIllegalCharacter(String source){
  for (int i=0; i < source.length(); i++) {
    if (isLegal(source.charAt(i)) == false) {
      return i;
    }
  }
  return -1;
}","static int findIlLegalString(String source){
  for (int i=0; i < source.length(); i++) {
    if (isLegal(source.charAt(i)) == false) {
      return i;
    }
  }
  return -1;
}",52,3,"firstIllegalCharacter:findIlLegalString,",65,0.49,ALERT
1303,,,35,4,,1429,10.6393745859464,0
1304,,,91,4,,1415,20.131282937526700,0
1305,"public static boolean hasBinding(Injector injector,Key<?> key){
  Binding<?> binding=getBinding(injector,key);
  return binding != null;
}
","public static boolean hasBelling(Injector Injectors,Key<?> ee){
  Binding<?> inding=getBinding(Injectors,ee);
  return inding != null;
}
",34,4,"hasBinding:hasBelling,injector:Injectors,key:ee,binding:inding,",588,6.99,ALERT
1306,"protected abstract boolean validateNumber(ConversationContext context,Number input);
","protected abstract boolean valateInteger(ConversationContext ctx,Number input);
",12,3,"context:ctx,validateNumber:valateInteger,",52,0.36,ALERT
1307,,,32,3,,829,8.244586952527360,0
1308,"@Override public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){
  if (marker instanceof ValueMarker) {
    ValueMarker vm=(ValueMarker)marker;
    double value=vm.getValue();
    Range range=rangeAxis.getRange();
    if (!range.contains(value)) {
      return;
    }
    double v=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());
    PlotOrientation orientation=plot.getOrientation();
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);
    }
 else {
      throw new IllegalStateException(""Unrecognised orientation."");
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    g2.setPaint(marker.getPaint());
    g2.setStroke(marker.getStroke());
    g2.draw(line);
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
 else   if (marker instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)marker;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range range=rangeAxis.getRange();
    if (!(range.intersects(start,end))) {
      return;
    }
    double start2d=rangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());
    double end2d=rangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation orientation=plot.getOrientation();
    Rectangle2D rect=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataArea.getMinX());
      high=Math.min(high,dataArea.getMaxX());
      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataArea.getMinY());
      high=Math.min(high,dataArea.getMaxY());
      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    Paint p=marker.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      g2.setPaint(gp);
    }
 else {
      g2.setPaint(p);
    }
    g2.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orientation == PlotOrientation.VERTICAL) {
        Line2D line=new Line2D.Double();
        double x0=dataArea.getMinX();
        double x1=dataArea.getMaxX();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(x0,start2d,x1,start2d);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(x0,end2d,x1,end2d);
          g2.draw(line);
        }
      }
 else {
        Line2D line=new Line2D.Double();
        double y0=dataArea.getMinY();
        double y1=dataArea.getMaxY();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(start2d,y0,start2d,y1);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(end2d,y0,end2d,y1);
          g2.draw(line);
        }
      }
    }
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
}","@Override public void drawrangemarkers(Graphics2D gre3,XYPlot Pl,ValueAxis rangeEllis,Marker markER,Rectangle2D dataarea){
  if (markER instanceof ValueMarker) {
    ValueMarker vd=(ValueMarker)markER;
    double max=vd.getValue();
    Range rresourcerangeEllis.getRange();
    if resourcege.contains(max)) {
      return;
    }
    doubie rangeEllisis.valueToJava2maxudataareaea,Pl.getRangeAxisEdge());
    PlotOrientatioorienturationon=Pl.getOrientation();
    Line2D node=null;
    if (orienturation == PlotOrientation.HORIZONTAL) {
      node=new Line2D.Double(i,dataarea.getMinY(),i,dataarea.getMaxY());
    }
 else     if (orienturation == PlotOrientation.VERTICAL) {
      node=new Line2D.Double(dataarea.getMinX(),i,dataarea.getMaxX(),i);
    }
 else {
      throw new IllegalStateException(""Unrecognised orientation."");
    }
    final Composite oralphaCompoitere3.getComposite();
    gre3.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,markER.getAlpha()));
    gre3.setPaint(markER.getPaint());
    gre3.setStroke(markER.getStroke());
    gre3.draw(node);
    String string=markER.getLabel();
    RectangleAnchor archoring=markER.getLabelAnchor();
    if (string != null) {
      Font labelFont=markER.getLabelFont();
      gre3.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(gre3,orienturation,dataarea,node.getBounds2D(),markER.getLabelOffset(),LengthAdjustmentType.EXPAND,archoring);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(lastringre3,(float)coords.getX(),(float)coords.getY(),markER.getLabelTextAnchor());
      gre3.setPaint(markER.getLabelBackgroundColor());
      gre3.fill(r);
      gre3.setPaint(markER.getLabelPaint());
      TextUtilities.drawAlignedString(lastringre3,(float)coords.getX(),(float)coords.getY(),markER.getLabelTextAnchor());
    }
    gre3.setComposite(alphaCompoite);
  }
 else   if (markER instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)markER;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range rresourcerangeEllis.getRange();
    if (!(resource.intersects(start,end))) {
      return;
    }
    double start2rangeEllisis.valueToJava2D(stardataareaea,Pl.getRangeAxisEdge());
    double end2rangeEllisis.valueToJava2D(endataareaea,Pl.getRangeAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientatioorienturationon=Pl.getOrientation();
    Rectangle2D rect=null;
    if (orienturation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataarea.getMinX());
      high=Math.min(high,dataarea.getMaxX());
      rect=new Rectangle2D.Double(low,dataarea.getMinY(),high - low,dataarea.getHeight());
    }
 else     if (orienturation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataarea.getMinY());
      high=Math.min(high,dataarea.getMaxY());
      rect=new Rectangle2D.Double(dataarea.getMinX(),low,dataarea.getWidth(),high - low);
    }
    final Composite oralphaCompoitere3.getComposite();
    gre3.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,markER.getAlpha()));
    Paint p=markER.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      gre3.setPaint(gp);
    }
 else {
      gre3.setPaint(p);
    }
    gre3.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orienturation == PlotOrientation.VERTICAL) {
        Line2D node=new Line2D.Double();
        double x0=dataarea.getMinX();
        double x1=dataarea.getMaxX();
        gre3.setPaint(im.getOutlinePaint());
        gre3.setStroke(im.getOutlineStroke());
        if (resource.contains(start)) {
          node.setLine(x0,start2d,x1,start2d);
          gre3.draw(node);
        }
        if (resource.contains(end)) {
          node.setLine(x0,end2d,x1,end2d);
          gre3.draw(node);
        }
      }
 else {
        Line2D node=new Line2D.Double();
        double y0=dataarea.getMinY();
        double y1=dataarea.getMaxY();
        gre3.setPaint(im.getOutlinePaint());
        gre3.setStroke(im.getOutlineStroke());
        if (resource.contains(start)) {
          node.setLine(start2d,y0,start2d,y1);
          gre3.draw(node);
        }
        if (resource.contains(end)) {
          node.setLine(end2d,y0,end2d,y1);
          gre3.draw(node);
        }
      }
    }
    String string=markER.getLabel();
    RectangleAnchor archoring=markER.getLabelAnchor();
    if (string != null) {
      Font labelFont=markER.getLabelFont();
      gre3.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(gre3,orienturation,dataarea,rect,markER.getLabelOffset(),markER.getLabelOffsetType(),archoring);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(lastringre3,(float)coords.getX(),(float)coords.getY(),markER.getLabelTextAnchor());
      gre3.setPaint(markER.getLabelBackgroundColor());
      gre3.fill(r);
      gre3.setPaint(markER.getLabelPaint());
      TextUtilities.drawAlignedString(lastringre3,(float)coords.getX(),(float)coords.getY(),markER.getLabelTextAnchor());
    }
    gre3.setComposite(alphaCompoite);
  }
}",1226,18,"drawRangeMarker:drawrangemarkers,g2:gre3,plot:Pl,rangeAxis:rangeEllis,marker:markER,dataArea:dataarea,vm:vd,value:max,range:resource,v:i,orientation:orienturation,line:node,originalComposite:alphaCompoite,label:string,anchor:archoring,",5312,49.16,ALERT
1309,"void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}","void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int uri=0; uri < group.getChildCount(); uri++) {
        queue.add(group.getChildAt(uri));
      }
    }
  }
}",98,6,"i:uri,",50,0.5,ALERT
1310,"private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
","private void doNormalCommandLineList(List<String> commandLinePost,List<String> jointOptions,Path classpath){
  commandLinePost.add(""--classpath"");
  commandLinePost.add(classpath.toString());
  if (jointCompilation) {
    commandLinePost.add(""-j"");
    commandLinePost.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLinePost.add(""-d"");
    commandLinePost.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLinePost.add(""--encoding"");
    commandLinePost.add(encoding);
  }
  if (stacktrace) {
    commandLinePost.add(""-e"");
  }
  if (parameters) {
    commandLinePost.add(""--parameters"");
  }
  if (useIndy) {
    commandLinePost.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLinePost.add(""-b"");
    commandLinePost.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLinePost.add(""--configscript"");
    commandLinePost.add(configscript);
  }
}
",190,4,"commandLineList:commandLinePost,",53,0.51,ALERT
1311,"@SuppressWarnings(""unchecked"") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {
  Method parseKeyMethod=findParseMethod(keyClass);
  Method parseValueMethod=findParseMethod(valueClass);
  if ((null != parseKeyMethod) && (null != parseValueMethod)) {
    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {
      try {
        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());
        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());
        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {
          map.put((K)transformedKey,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ keyClass.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + keyClass.getName() + "", ""+ valueClass.getName()+ "">.""+ ""Parsing method can not be found in class ""+ valueClass.getName()+ ""."");
  }
}
","@SuppressWarnings(""unchecked"") public static <K,V>void TransformArrayGroup(Map<String,String> regular,Map<K,V> create,Class<K> getPackage,Class<V> valueCLASS) throws PreferenceException {
  Method paparseMethodFunctionindParseMethod(getPackage);
  Method parseStringFunction=findParseMethod(valueCLASS);
  if ((null != parseMethodFunction) && (null != parseStringFunction)) {
    for (    Map.Entry<String,String>toTransformEntryy : regular.entrySet()) {
      try {
        Object transTransizedLinkeMethodFunction.invoke(null,toTransformEntry.getKey());
        Object tratransformedValuerseStringFunction.invoke(null,toTransformEntry.getValue());
        if (getPackage.isAssignableFrom(TransizedLink.getClass()) && valueCLASS.isAssignableFrom(transformedValue.getClass())) {
          create.put((K)TransizedLink,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + getPackage.getName() + "", ""+ valueCLASS.getName()+ "">."",e);
      }
    }
  }
 else   if (null == parseMethodFunction) {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + getPackage.getName() + "", ""+ vavalueCLASSetName()+ "">.""+ ""Parsing method can not be found in class ""+ getPackage.getName()+ ""."");
  }
 else {
    throw new PreferenceException(""Error transforming Map<java.lang.String, java.lang.String> to Map<"" + getPackage.getName() + "", ""+ valueCLASS.getName()+ "">.""+ ""Parsing method can not be found in class ""+ valueCLASS.getName()+ ""."");
  }
}
",285,10,"transformStringMap:TransformArrayGroup,original:regular,map:create,keyClass:getPackage,valueClass:valueCLASS,parseKeyMethod:parseMethodFunction,parseValueMethod:parseStringFunction,transformedKey:TransizedLink,",602,7.17,ALERT
1312,,,28,1,,434,3.6486522277196200,0
1313,"public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {
  Set<String> members=new HashSet<>();
  String siteId=getSiteId(ssoToken,siteName);
  if (siteId != null) {
    Set<String> allServers=ServerConfiguration.getServers(ssoToken);
    for (    String svr : allServers) {
      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {
        members.add(svr);
      }
    }
  }
  return members;
}
","public static Set<String> listSerers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {
  Set<String> modules=new HashSet<>();
  String siteId=getSiteId(ssoToken,siteName);
  if (siteId != null) {
    Set<String> allServers=ServerConfiguration.getServers(ssoToken);
    for (    String svr : allServers) {
      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {
        modules.add(svr);
      }
    }
  }
  return modules;
}
",100,7,"listServers:listSerers,members:modules,",72,0.71,ALERT
1314,"void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}","void OnMaled(){
  double mix=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (mix > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=frames[i];
    double avg=(mix + old) / 2;
    recentJitter+=Math.abs(old - mix);
    frames[i]=avg;
    mix=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}",176,12,"diff:mix,onMoved:OnMaled,times:frames,",274,2.42,ALERT
1315,,,23,1,,389,4.296814529101050,0
1316,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
","public void addfooterItem(View conv,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=conv;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
",66,6,"v:conv,addFooterView:addfooterItem,",70,3.09,ALERT
1318,,,54,4,,1521,22.549267959594700,0
1319,"public QDate(){
  this(_gmtTimeZone);
}
","public QDate(){
  j(_gmtTimeZone);
}
",11,1,"this:j,",20,0.16,ALERT
1320,"public void addListener(final IFilterPanelListener<T> listener){
  m_listeners.addListener(listener);
}
","public void AddAdapter(final IFilterPanelListener<T> anycher){
  m_listeners.AddAdapter(anycher);
}
",20,2,"addListener:AddAdapter,listener:anycher,",59,0.51,ALERT
1321,"public static String padLeft(String str,int totalChars){
  if (str == null)   str=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append("" "");
  }
  sb.append(str);
  return sb.toString();
}","public static String padL(String hr,int totalCHats){
  if (hr == null)   hr=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalCHats - hr.length(); i++) {
    sb.append("" "");
  }
  sb.append(hr);
  return sb.toString();
}",74,5,"totalChars:totalCHats,padLeft:padL,str:hr,",87,1.18,ALERT
1322,,,75,2,,805,7.078112328052520,0
1323,,,48,3,,1070,13.603043540318800,0
1324,"public static int nextInt(int n){
  Random random=getRandom();
  int value=random.nextInt(n);
  if (!_isTest)   _freeRandomList.free(random);
  return value;
}
","public static int createFloat(int a){
  Random reg=getRandom();
  int vfunctionrandregateFloat(a);
  if (!_isTest)   _freeRandomList.free(reg);
  return function;
}
",42,4,"nextInt:createFloat,n:a,random:reg,value:function,",182,2.11,ALERT
1325,"private boolean isAtMaximum(Adjustable bar){
  return (bar.getValue() + bar.getVisibleAmount() >= bar.getMaximum());
}
","private boolean isBelowMinimum(Adjustable info){
  return (info.getValue() + info.getVisibleAmount() >= info.getMaximum());
}
",30,2,"isAtMaximum:isBelowMinimum,bar:info,",300,4.02,ALERT
1326,,,132,1,,430,4.8565642158190400,0
1327,"@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
","@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textPathRepl=(TextImpl)textNode;
        textPathRepl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
",155,7,"textNodeImpl:textPathRepl,",51,0.61,ALERT
1328,,,19,1,,461,4.130774700641630,0
1329,"private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}","private static void read(InputStream in,byte[] buf,int pos,int ni) throws IOException {
  int read=0;
  int nr=0;
  while (read < ni) {
    nr=in.read(buf,read + pos,ni - read);
    if (nr > 0) {
      read+=nr;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ ni);
    }
  }
}",86,6,"res:nr,n:ni,",84,0.88,ALERT
1330,"private void pushContext(BaseContext c){
  contextStack.push(c);
}
","private void stackComponent(BaseContext c){
  contextStack.push(c);
}
",16,2,"pushContext:stackComponent,",19,0.21,ALERT
1331,,,17,1,,383,4.115034759044650,0
1332,"private void storePassword(String password){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),password);
  }
}
","private void StorePassword(String object){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),object);
  }
}
",30,2,"storePassword:StorePassword,password:object,",49,0.37,ALERT
1333,"public static void writeUint8(OutputStream theOs,int theValue) throws IOException {
  theOs.write(theValue);
}","public static void writeFInt16(OutputStream anCos,int TheType) throws IOException {
  anCos.write(TheType);
}",22,3,"writeUint8:writeFInt16,theOs:anCos,theValue:TheType,",587,5.24,ALERT
1334,,,120,6,,1946,38.75152149200440,0
1335,"public boolean needPreloadKey(int idx){
  return preloadKeys != null && preloadKeys.get(idx);
}
","public boolean needPreloadKey(int indcode){
  return preloadKeys != null && preloadKeys.get(indcode);
}
",21,2,"idx:indcode,",27,0.36,ALERT
1337,,,36,2,,798,10.802077360947900,0
1338,"private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}","private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int nd,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,nd);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=nd - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < nd; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,nd,m);
  if (pos >= 0) {
    final int opt=(start + nd) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,nd,depth - 1);
}",274,14,"end:nd,",131,1.84,ALERT
1341,"private void displayEasterEgg(CommandSender sender){
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§6\\u2592§6\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§8\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§6\\u2592§6\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
}","private void sendEastersEGG(CommandSender ssender){
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§0\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§6\\u2592§6\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§8\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§6\\u2592§6\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  ssender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
}",393,2,"sender:ssender,displayEasterEgg:sendEastersEGG,",92,1.07,ALERT
1342,,,79,3,,622,4.446211020151770,0
1343,"@Override public void perform(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}","@Override public void Performed(IR irc){
  for (Enumeration<BasicBlock> e=irc.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter0++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (irc.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> io=bb.forwardInstrEnumerator(); io.hasMoreElements(); ) {
      Instruction s=io.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,irc))) {
        io=bb.forwardInstrEnumerator();
      }
    }
  }
}",148,9,"counter2:counter0,ie:io,ir:irc,perform:Performed,",146,2.27,ALERT
1344,,,35,2,,788,9.198232555389410,0
1345,"protected List<String> createNewExportMaskWorkflowForInitiators(List<URI> initiatorURIs,ExportGroup exportGroup,Workflow workflow,Map<URI,Integer> volumeMap,StorageSystem storage,String token,String previousStep) throws Exception {
  List<String> newSteps=new ArrayList<>();
  if (!initiatorURIs.isEmpty()) {
    Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);
    for (    Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {
      String computeKey=resourceEntry.getKey();
      List<URI> computeInitiatorURIs=resourceEntry.getValue();
      _log.info(String.format(""New export masks for %s"",computeKey));
      GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);
      previousStep=result.getStepId();
      newSteps.add(previousStep);
    }
  }
  if (newSteps.isEmpty() && previousStep != null) {
    newSteps.add(previousStep);
  }
  return newSteps;
}
","protected List<String> createNewExportMaskWorkflowForinciers(List<URI> initiatorURis,ExportGroup writeFlow,Workflow workerload,Map<URI,Integer> volumeMaps,StorageSystem util,String info,String perviousPath) throws Exception {
  List<String> newstepflows=new ArrayList<>();
  if (!initiatorURis.isEmpty()) {
    Map<String,List<URI>computeResourceToInantiratorsrs=mapInitiatorsToComputeResource(writeFlow,initiatorURis);
    for (    Map.Entry<String,List<URI>> reresourceEnt computeResourceToInantirators.entrySet()) {
      StrinrecomputeValueey=resourceEnt.getKey();
      List<URIcomputeInitiatorURLISIs=resourceEnt.getValue();
      _log.info(String.format(""New export masks for %s"",recomputeValue));
      GenExportMaskCreateWorkflowResulobjectlt=generateDeviceSpecificExportMaskCreateWorkFloworkerloperviousPathsSteputile,writeFlow,computeInitiatorURLIS,volumeMaps,info);
      perviousPath=object.getStepId();
      newstepflows.add(perviousPath);
    }
  }
  if (newstepflows.isEmpty() && perviousPath != null) {
    newstepflows.add(perviousPath);
  }
  return newstepflows;
}
",199,14,"createNewExportMaskWorkflowForInitiators:createNewExportMaskWorkflowForinciers,initiatorURIs:initiatorURis,exportGroup:writeFlow,workflow:workerload,volumeMap:volumeMaps,storage:util,token:info,previousStep:perviousPath,newSteps:newstepflows,computeResourceToInitiators:computeResourceToInantirators,resourceEntry:resourceEnt,computeKey:recomputeValue,computeInitiatorURIs:computeInitiatorURLIS,result:object,",4133,53.17,ALERT
1347,,,12,1,,417,3.2840887784957900,0
1348,"protected void createFromHValues(int[] hValues,int partitions){
  Arrays.sort(hValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / partitions);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}","protected void createFromHValues(int[] rhValues,int partitions){
  Arrays.sort(rhValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * rhValues.length / partitions);
    this.splits[i]=quantile == rhValues.length ? maxH : rhValues[quantile];
  }
}",97,7,"hValues:rhValues,",54,0.49,ALERT
1349,"public static String encode(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    encode(dLat,result);
    encode(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}","public static String enge(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    enge(dLat,result);
    enge(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}",113,10,"encode:enge,",264,2.55,ALERT
1350,"@Override public synchronized void addRequestProperty(String key,String value){
  if (connected || connecting)   throw new IllegalStateException(""Already connected"");
  if (key == null)   throw new NullPointerException(""key is null"");
  if (isExternalMessageHeaderAllowed(key,value)) {
    requests.add(key,value);
    if (!key.equalsIgnoreCase(""Content-Type"")) {
      userHeaders.add(key,value);
    }
  }
}
","@Override public synchronized void addResponseProp(String string,String text){
  if (connected || connecting)   throw new IllegalStateException(""Already connected"");
  if (string == null)   throw new NullPointerException(""key is null"");
  if (isExternalMessageHeaderAllowed(string,text)) {
    requests.add(string,text);
    if (!string.equalsIgnoreCase(""Content-Type"")) {
      userHeaders.add(string,text);
    }
  }
}
",82,3,"addRequestProperty:addResponseProp,key:string,value:text,",306,3.53,ALERT
1351,"private static void writeSpaces(Writer out,int amt) throws IOException {
  while (amt > 0) {
    out.write(' ');
    amt--;
  }
}","private static void WritePlace(Writer obj,int amT) throws IOException {
  while (amT > 0) {
    obj.write(' ');
    amT--;
  }
}",33,3,"writeSpaces:WritePlace,out:obj,amt:amT,",317,3.36,ALERT
1352,"private boolean isPageBreak(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}","private boolean isPageBreak(int page){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == page)     return true;
 else     if (rr.intValue() > page)     return false;
  }
  return false;
}",74,4,"row:page,",73,0.67,ALERT
1353,"public static DateFormat createUTCDateFormatter(String dateFormat){
  DateFormat formatter=new SimpleDateFormat(dateFormat);
  formatter.setTimeZone(TimeZone.getTimeZone(""UTC""));
  return formatter;
}
","public static DateFormat createUTCDDateFormFormat(String dataFormat){
  DateFormat fater=new SimpleDateFormat(dataFormat);
  fater.setTimeZone(TimeZone.getTimeZone(""UTC""));
  return fater;
}
",34,3,"createUTCDateFormatter:createUTCDDateFormFormat,dateFormat:dataFormat,formatter:fater,",489,5.32,ALERT
1354,"public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}","public void displayInfoLine(String helpLink,int labelOperating){
  if (infoLineHolder != null) {
    setLabel((helpLink != null && helpLink.length() > 0) ? helpLink : fudgeString,labelOperating);
  }
}",43,3,"infoLine:helpLink,labelDesignator:labelOperating,",69,0.48,ALERT
1355,"public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}","public void insertElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}",60,2,"addElement:insertElement,",21,0.23,ALERT
1356,"public CharBuffer(String string){
  int length=string.length();
  int capacity=length + MIN_CAPACITY;
  init(new char[capacity],0,length);
  string.getChars(0,length,buffer(),0);
}","public CharBuffer(String binary){
  int level=binary.level();
  intshapey=level + MIN_CAPACITY;
  init(new charshapey],0,level);
  binary.getChars(0,level,buffer(),0);
}",52,3,"string:binary,length:level,capacity:shape,",428,3.5,ALERT
1357,,,96,6,,1544,17.090948859850600,0
1358,,,27,2,,381,3.800161115328470,0
1359,"public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}","public static Vector tokenizeArray(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeArray(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}",169,8,"tokenizeString:tokenizeArray,",92,0.77,ALERT
1360,"protected void removeClassifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}","protected void removeClassifiers(int[] idges){
  int j;
  if (idges == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (j=idges.length - 1; j >= 0; j--)     m_ModelClassifiers.remove(idges[j]);
  }
  setModified(true);
}",63,3,"i:j,indices:idges,",72,0.67,ALERT
1361,"protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + setUser+ "" && ""+ chownCommand+ "" && ""+ command+ "" && ""+ chownCommand;
}","protected String wrapUnixTask(String xml) throws IOException, InterruptedException {
  String endUser=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String charenProgram=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return endUser + "" && "" + setUser+ "" && ""+ charenProgram+ "" && ""+ xml+ "" && ""+ charenProgram;
}",83,5,"wrapLinuxCommand:wrapUnixTask,command:xml,setGroup:endUser,chownCommand:charenProgram,",131,2.78,ALERT
1362,,,121,6,,2202,29.25550795396170,0
1363,,,61,2,,659,7.601251232624050,0
1364,"boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){
  if (!window.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=window.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isStateChange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
","boolean isPowerChanged(XDecoratedPeer x,XPropertyEvent element){
  if (!x.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
 mn_valstate=x.getWMState();
  if (mn_val == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + mn_val);
    }
  }
  boolean is_resource_action=false;
  if (element.get_atom() == XA_WM_STATE.getAtom()) {
    is_resource_action=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_statis_resource_action.iprotorChanged(element);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_resource_action);
    }
  }
  return is_resource_action;
}
",165,6,"isStateChange:isPowerChanged,window:x,e:element,wm_state:mn_val,is_state_change:is_resource_action,",310,3.45,ALERT
1365,"public Prototype undump(InputStream stream,String chunkname) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(stream,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}","public Prototype ethump(InputStream server,String chunkname) throws IOException {
  if (server.read() != LUA_SIGNATURE[0] || server.read() != LUA_SIGNATURE[1] || server.read() != LUA_SIGNATURE[2] || server.read() != LUA_SIGNATURE[3])   return null;
  String syssize=getSourceName(chunkname);
  LoadState s=new LoadState(server,syssize);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(syssize));
}",129,5,"stream:server,sname:syssize,undump:ethump,",123,1.18,ALERT
1366,,,26,2,,775,6.454604729016620,0
1367,"public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}
","public static void initializeProlishes(Properties details,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldExds;
  PropertiesHolder newProps;
  do {
    oldExds=propertiesHolderRef.get();
    final Properties joine=new Properties();
    if (defaultProp != null) {
      joine.putAll(defaultProp);
    }
    if (!reset) {
  joineined.putAoldExdsops.details);
    }
 joinened.putAll(details);
    newProps=new PropertiesHolder(Maps.fromProperties(joine));
  }
 while (!propertiesHolderRef.compareAndSet(oldExds,newProps));
}
",140,9,"initializeProperties:initializeProlishes,properties:details,oldProps:oldExds,combined:joine,",401,3.84,ALERT
1368,"public boolean add(symbol sym) throws internal_error {
  Object previous;
  not_null(sym);
  previous=_all.put(sym.name(),sym);
  return previous == null;
}
","public boolean index(symbol params) throws internal_error {
  Object previous;
  not_null(params);
  previopreviousput(params.name(),params);
  return previous == null;
}
",39,3,"add:index,sym:params,",149,1.59,ALERT
1369,,,41,3,,824,6.31873394648234,0
1370,,,87,4,,1476,10.026644496123000,0
1371,"public static String[] stringArrayFromProperties(Properties p,String propName,String tok){
  String[] ret=null;
  String raw=p.getProperty(propName);
  if (raw != null && raw.length() > 0) {
    try {
      StringTokenizer token=new StringTokenizer(raw,tok);
      int numPaths=token.countTokens();
      ret=new String[numPaths];
      for (int i=0; i < numPaths; i++) {
        ret[i]=token.nextToken();
      }
      return ret;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return ret;
}","public static String[] stringArrayFormProperties(Properties pro,String propNAME,String tok){
  String[] val=null;
  String ravaluero.getProperty(propNAME);
  if (value != null && value.length() > 0) {
    try {
      StringTokenizer totokenew StringTokenizer(value,tok);
      int numPatternops=token.countTokens();
      val=new String[numPatternops];
      for (int i=0; ii < niimPatternops; ii++) {
        val[ii]=token.nextToken();
      }
      return val;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return val;
}",132,9,"stringArrayFromProperties:stringArrayFormProperties,p:pro,propName:propNAME,ret:val,raw:value,numPaths:numPatternops,i:ii,",508,4.45,ALERT
1372,,,151,5,,1653,16.799768153826400,0
1373,"public Model validateModel(Dataset dataset,URI shapesGraphURI,Resource minSeverity,boolean validateShapes,Function<RDFNode,String> labelFunction,ProgressMonitor monitor) throws InterruptedException {
  if (dataset.getDefaultModel() == null) {
    throw new IllegalArgumentException(""Dataset requires a default model"");
  }
  Model shapesModel=dataset.getNamedModel(shapesGraphURI.toString());
  if (monitor != null) {
    monitor.subTask(""Preparing execution plan"");
  }
  List<Property> constraintProperties=SHACLUtil.getAllConstraintProperties(validateShapes);
  Map<Resource,List<SHConstraint>> map=buildShape2ConstraintsMap(shapesModel,dataset.getDefaultModel(),constraintProperties,validateShapes);
  if (monitor != null) {
    monitor.subTask("""");
  }
  if (monitor != null) {
    monitor.beginTask(""Validating constraints for "" + map.size() + "" shapes..."",map.size());
  }
  Model results=JenaUtil.createMemoryModel();
  results.setNsPrefixes(dataset.getDefaultModel());
  for (  Resource shape : map.keySet()) {
    for (    SHConstraint constraint : map.get(shape)) {
      validateConstraintForShape(dataset,shapesGraphURI,minSeverity,constraint,shape,results,labelFunction,monitor);
      if (monitor != null) {
        monitor.worked(1);
        if (monitor.isCanceled()) {
          throw new InterruptedException();
        }
      }
    }
  }
  return results;
}","public Model variidateFeature(Dataset datarsET,URI shapesStorageURI,Resource minSeverity,boolean validateshaps,Function<RDFNode,String> labelfunction,ProgressMonitor monitor) throws InterruptedException {
  if (datarsET.getDefaultModel() == null) {
    throw new IllegalArgumentException(""Dataset requires a default model"");
  }
  Model shaSHapersModuletarsET.getNamedModel(shapesStorageURI.toString());
  if (monitor != null) {
    monitor.subTask(""Preparing execution plan"");
  }
  List<Property>constraintPrefpertiess=SHACLUtil.getAllConstraintProperties(validateshaps);
  Map<Resource,List<SHConstraint>> mapposeildShape2ConstraintsMap(SHapersModule,datarsET.getDefaultModel()constraintPrefpertiess,validateshaps);
  if (monitor != null) {
    monitor.subTask("""");
  }
  if (monitor != null) {
    monitor.beginTask(""Validating constraints for "" + pose.size() + "" shapes..."",pose.size());
  }
  Model manager=JenaUtil.createMemoryModel();
  rmanagersetNsPrefixes(datarsET.getDefaultModel());
  for (  Resource sshape: pose.keySet()) {
    for (    SHConstraint cconststrence: pose.get(shape)) {
      validateConstraintForShape(datarsET,shapesStorageURI,minSeverity,conststrence,shape,manager,labelfunction,monitor);
      if (monitor != null) {
        monitor.worked(1);
        if (monitor.isCanceled()) {
          throw new InterruptedException();
        }
      }
    }
  }
  return manager;
}",262,13,"validateModel:variidateFeature,dataset:datarsET,shapesGraphURI:shapesStorageURI,validateShapes:validateshaps,labelFunction:labelfunction,shapesModel:SHapersModule,constraintProperties:constraintPrefperties,map:pose,results:manager,constraint:conststrence,",656,5.8,ALERT
1375,"public boolean addSubAction(final ConfAction actionConf) throws GeneralException, ConfigurationException {
  if (actionConf.getType() != null) {
    final SubAction sub=SubAction.factory(actionConf.getType(),actionConf);
    if (sub == null) {
      if (Cfg.DEBUG) {
        Check.log(TAG + "" Error (addSubAction): unknown type: "" + actionConf.getType());
      }
      return false;
    }
    list.add(sub);
    if (sub instanceof SubActionSlow) {
      setQueue(MAIN_QUEUE);
    }
    return true;
  }
 else {
    if (Cfg.DEBUG) {
      Check.log(TAG + "" Error (addSubAction): null type "");
    }
    return false;
  }
}
","public boolean addBigItem(final ConfAction actInf) throws GeneralException, ConfigurationException {
  if (actInf.getType() != null) {
    final Sujobtion sub=SubAction.factory(actInf.getType(),actInf);
    if (job == null) {
      if (Cfg.DEBUG) {
        Check.log(TAG + "" Error (addSubAction): unknown type: "" + actInf.getType());
      }
      return false;
    }
    list.add(job);
    if (job instanceof SubActionSlow) {
      setQueue(MAIN_QUEUE);
    }
    return true;
  }
 else {
    if (Cfg.DEBUG) {
      Check.log(TAG + "" Error (addSubAction): null type "");
    }
    return false;
  }
}
",123,3,"addSubAction:addBigItem,actionConf:actInf,sub:job,",340,3.03,ALERT
1376,,,31,2,,787,7.210059074560800,0
1377,"@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}","@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBobjectsS(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}",363,16,"loadDBObjects:loadDBobjectsS,",82,0.63,ALERT
1378,"protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable {
  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}
","protected <T extends TaskServiceDocument<EA>,EA extends Enum<EA>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable {
  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}
",67,4,"E:EA,",70,0.63,ALERT
1379,"public void updatePendingList(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable pending=mPendingList.get(0);
    pending.changeStatusState(new ActiveState(pending));
  }
}","public void updatePushingQueue(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable pushing=mPendingList.get(0);
    pushing.changeStatusState(new ActiveState(pushing));
  }
}",44,2,"updatePendingList:updatePushingQueue,pending:pushing,",459,3.27,ALERT
1380,"private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
","private static AlgorithmParameterSpec alivParametersSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
",45,3,"algorithmParameterSpec:alivParametersSpec,",31,0.35,ALERT
1381,"public StringList plus(String... args){
  StringList newList=new StringList();
  newList.addAll(this);
  newList.addAll(Arrays.asList(args));
  return newList;
}
","public StringList plus(String... args){
  StringList existinglist=new StringList();
  existinglist.addAll(this);
  existinglist.addAll(Arrays.asList(args));
  return existinglist;
}
",40,2,"newList:existinglist,",37,0.43,ALERT
1382,,,34,5,,1694,16.160224521160100,0
1383,"public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}
","public static <T>UnaryOperator<List<T>> form(Collection<String> commandLineUdid,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> FORMaster,Printer out,InputStream in){
  return commandLineUdid.isEmpty() ? new User(mbsBackup,out,in,FORMaster) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdid));
}
",85,6,"commandLineUdids:commandLineUdid,formatter:FORMaster,from:form,",123,1.17,ALERT
1384,"private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
","private void define(){
  supportedUsers=new ArrayList<>();
  supportedUsers.add(new NoAuthenticationRequiredMethod());
  supportedUsers.add(new GssApiMethod());
  supportedUsers.add(new UsernamePasswordMethod());
}
",46,2,"acceptableMethods:supportedUsers,init:define,",64,0.6,ALERT
1385,,,103,3,,1165,9.189391044775650,0
1386,"public List<String> reset(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
","public List<String> update(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
",65,3,"reset:update,",35,0.29,ALERT
1387,,,50,4,,1341,17.07519543170930,0
1388,"public static void mergeNodeChildren(TreeNode node){
  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;
  for (int i=0; i < masterNode.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);
    }
  }
}","public static void mergesTreechildren(TreeNode route){
  DefaultMutableTreeNode mmasterTree(DefaultMutableTreeNode)route;
  for (int ri=0; ri < masterTree.getChildCount(); ri++) {
    DefaultMutableTreeNode canch(DefaultMutableTreeNode)masterTree.getChildAt(ri);
    if (!anch.isLeaf()) {
      MergeHelpUtilities.mergesTreechildren(DEFAULT_MERGE_TYPE,anch);
    }
  }
}",71,5,"mergeNodeChildren:mergesTreechildren,node:route,masterNode:masterTree,i:ri,child:anch,",1068,10.77,ALERT
1389,,,84,6,,1959,18.6170631368955,0
1390,,,35,2,,828,7.944722731908160,0
1391,"public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.add(item);
}
","public void link(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.link(item);
}
",58,2,"add:link,",38,0.3,ALERT
1392,"private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}","private static void drawnPattern(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawnPattern(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}",246,8,"drawShape:drawnPattern,",95,0.69,ALERT
1393,"private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}","private static boolean calculateGroupap(Rectangle a,Rectangle nb,Rectangle gap){
  if (a.intersects(nb)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=nb.x;
  int bx2=nb.x + nb.width;
  int by1=nb.y;
  int by2=nb.y + nb.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}",270,18,"b:nb,calculateGap:calculateGroupap,",617,6.52,ALERT
1394,"public void delete(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",entry);
    delete(token,getNamingAttribute() + ""="" + entry+ "",""+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",subOrg);
    delete(token,subOrg);
  }
  delete(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}","public void info(SSOToken start,String dict) throws SMSException, SSOException {
  for (  String enprefix subEntries(start,dict,""*"",0,false,false)) {
    debug.message(""SMSLdapObject: deleting sub-entry: {}"",prefix);
    info(start,getNamingAttribute() + ""="" + enprefix"",""+ dict);
  }
  for (  String surelOrg searchSubOrgNames(start,dict,""*"",0,false,false,false)) {
    debug.message(""SMSLdapObject: deleting suborganization: {}"",relOrg);
    info(start,relOrg);
  }
  info(start.getPrincipal(),dict);
  objectChanged(dict,DELETE);
}",122,5,"delete:info,token:start,dn:dict,entry:prefix,subOrg:relOrg,",454,4.81,ALERT
1395,"public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
","public void send() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
",21,1,"close:send,",30,0.19,ALERT
1396,"public void rebuildPanel(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
","public void ReloadScreen(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
",61,2,"rebuildPanel:ReloadScreen,",61,0.61,ALERT
1397,,,96,1,,392,3.18521515528361,0
1398,,,17,2,,789,18.028719337781300,0
1399,,,29,3,,1165,11.427468419075000,0
1400,,,103,3,,840,7.580524690945940,0
1401,"public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}","public JarInfo createModule() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}",239,11,"loadJar:createModule,",47,0.43,ALERT
1402,,,21,2,,813,9.542857801914220,0
1403,"@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}","@Override protected String dateFormatFormat(DateTimeData user){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,user.month,2);
  append(message,(char)user.utc,0);
  return message.toString();
}",66,3,"dateToString:dateFormatFormat,date:user,",149,1.43,ALERT
1404,"public boolean clear(){
  try {
    list.clear();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
","public boolean clean(){
  try {
    list.clean();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
",33,1,"clear:clean,",34,0.3,ALERT
1405,"public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}
","public void pair(String sample,HiddenAttribute attribute,Object value){
  pair(sample,attribute.toString(),value);
}
",28,4,"put:pair,",130,1.08,ALERT
1406,,,180,6,,2125,26.7921369155248,0
1407,"protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {
  Properties props=new Properties();
  props.load(is);
  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);
  String oldPrefix=getPropertyPrefix();
  setProperties(null,props);
  setPropertyPrefix(oldPrefix);
}
","protected void configureFromProtperties(InputStream ui,String RootDrive) throws IOException {
  Properties protcs=new Properties();
  protcs.load(ui);
  props.put(ROOT_DIR_PATH_PROPERTY,RootDriveprotcsrops.put(ROOT_DIR_PATH_PROPERTY,RootDrive);
  String newPreffix=getPropertyPrefix();
  setProperties(null,protcs);
  setPropertyPrefix(newPreffix);
}
",57,5,"configureFromProperties:configureFromProtperties,is:ui,rootDirectory:RootDrive,props:protcs,oldPrefix:newPreffix,",428,5.28,ALERT
1408,,,80,4,,640,9.061451856295270,0
1409,"void start(){
  this.running=true;
  Thread thread=new Thread(this,""IceConnector@"" + hashCode());
  thread.setDaemon(true);
  thread.start();
}
","void find(){
  this.running=true;
  Thread thread=new Thread(this,""IceConnector@"" + hashCode());
  thread.setDaemon(true);
  thread.find();
}
",40,2,"start:find,",37,0.32,ALERT
1410,"private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
","private Object findParcel(@NonNull byte[] objectarray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectarray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
",88,5,"objectArray:objectarray,",41,0.5,ALERT
1411,"@Override public void addAttribute(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}","@Override public void putMember(String attribute,float scale){
  String type=Float.toString(scale);
  if (type.endsWith("".0""))   type=type.substring(0,type.length() - 2);
  current.setAttribute(attribute,type);
}",59,4,"addAttribute:putMember,name:attribute,value:scale,str:type,",501,4.68,ALERT
1412,"public void adjustIndentation(int delta){
  if (delta < 0) {
    indentationLevel=Math.max(0,indentationLevel + delta);
  }
 else {
    indentationLevel+=delta;
  }
}","public void adjustIndentations(int mlux){
  if (mlux < 0) {
   indentationsLeftl=Math.max(0indentationsLeftl + mlux);
  }
 else {
   indentationsLeftl+=mlux;
  }
}",37,3,"adjustIndentation:adjustIndentations,delta:mlux,indentationLevel:indentationsLeft,",670,9.12,ALERT
1413,"public static byte[] hashTwice(byte[] input,int offset,int length){
  MessageDigest digest=newDigest();
  digest.update(input,offset,length);
  return digest.digest(digest.digest());
}
","public static byte[] HashTWite(byte[] feed,int prefix,int slice){
  MessageDigest drawgest=newDigest();
drawgestst.update(feed,prefix,slice);
  return drawgest.drawgest(drawgest.drawgest());
}
",50,5,"hashTwice:HashTWite,input:feed,offset:prefix,length:slice,digest:drawgest,",494,5.9,ALERT
1414,"protected void generateRandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}","protected void generateGenerPool(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}",92,5,"generateRandomPopulation:generateGenerPool,",135,1.0,ALERT
1415,"public static int computeStringWidth(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}","public static int compateTextSize(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}",25,3,"computeStringWidth:compateTextSize,",54,0.53,ALERT
1416,,,54,2,,659,5.799385754267380,0
1417,"private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));
    mat[i]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}","private double[] CalcVariableCoef(Variogram varograms,KrigingPoint p,List<KrigingPoint> NVPoint){
  int n=NVPoint.size();
  double[] format=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NVPoint.get(i).x - p.x,2)) + Math.abs(Math.pow(NVPoint.get(i).y - p.y,2)));
    format[i]=getTheoreticalSVValue(dist,varograms);
  }
  format[n]=1;
  return format;
}",142,8,"variogram:varograms,mat:format,NNPoints:NVPoint,",219,3.54,ALERT
1418,"public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
","public boolean addResource(OwlProperty definition){
  definition.addRestriction(this);
  return properties.add(definition);
}
",24,2,"addProperty:addResource,property:definition,",97,0.73,ALERT
1419,"public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}
","public static byte[] writeAlllimited(InputStream InSt,int l) throws IOException {
  ByteArrayOutputStream txt=new ByteArrayOutputStream();
  pipeAllLimited(InSt,l,txt);
  return txt.toByteArray();
}
",41,4,"readAllLimited:writeAlllimited,inStr:InSt,limit:l,buf:txt,",334,5.53,ALERT
1420,,,59,3,,1180,12.67381945848470,0
1421,"public void write(int c) throws IOException {
  if (_output == null)   throw new IOException(""Writer closed"");
  _output.append((char)c);
}
","public void insert(int n) throws IOException {
  if (_output == null)   throw new IOException(""Writer closed"");
  _output.append((char)n);
}
",34,2,"write:insert,c:n,",115,0.85,ALERT
1422,"public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
","public boolean IfUpdate(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastCallPoint=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
",82,5,"toFail:IfUpdate,_lastChangeTime:_lastCallPoint,",62,0.82,ALERT
1423,"public DiskStoreFactory createDiskStoreFactory(){
  return new DiskStoreFactoryImpl(this);
}
","public DiskStoreFactory createDiskStoreInterface(){
  return new DiskStoreFactoryImpl(this);
}
",14,1,"createDiskStoreFactory:createDiskStoreInterface,",26,0.21,ALERT
1424,"public IdsQueryBuilder addIds(String... ids){
  values.addAll(Arrays.asList(ids));
  return this;
}
","public IdsQueryBuilder addIntings(String... values){
  values.addAll(Arrays.asList(values));
  return this;
}
",25,2,"addIds:addIntings,ids:values,",57,0.59,ALERT
1425,,,139,9,,2883,28.850920923550900,0
1426,,,55,3,,1159,11.14838511943820,0
1427,"public QuickActionView addAction(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
","public QuickActionView createPage(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
",23,2,"addAction:createPage,",19,0.14,ALERT
1428,"public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}","public static void calctLineStorage(Paint faints,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  faints.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}",71,7,"paint:faints,calcTextSize:calctLineStorage,",67,1.42,ALERT
1429,"private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){
  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray());
  StringBuilder newLabel=new StringBuilder();
  newLabel.append(trustedSrc.getLabel());
  newLabel.append(""-target-"");
  newLabel.append(invalidTgtVA.getLabel());
  log.info(""Revised name for target: "" + newLabel.toString());
  invalidTgt.setLabel(newLabel.toString());
  NamedURI projectURI=invalidTgt.getProject();
  projectURI.setName(newLabel.toString());
  invalidTgt.setProject(projectURI);
  NamedURI tenantURI=invalidTgt.getTenant();
  tenantURI.setName(newLabel.toString());
  invalidTgt.setTenant(tenantURI);
  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt);
  if (tgtVplexVolume != null) {
    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc);
    if (srcVplexVolume != null) {
      newLabel.setLength(0);
      newLabel.append(srcVplexVolume.getLabel());
      newLabel.append(""-target-"");
      newLabel.append(invalidTgtVA.getLabel());
      log.info(""Revised name for VPlex target: "" + newLabel.toString());
      tgtVplexVolume.setLabel(newLabel.toString());
      projectURI=tgtVplexVolume.getProject();
      projectURI.setName(newLabel.toString());
      tgtVplexVolume.setProject(projectURI);
      tenantURI=tgtVplexVolume.getTenant();
      tenantURI.setName(newLabel.toString());
      tgtVplexVolume.setTenant(tenantURI);
      dbClient.updateAndReindexObject(tgtVplexVolume);
    }
  }
}","private void updateVolumelabings(Volume trustingSvc,Volume invalidLrt){
  VirtualArray invalidTantVO=dbClient.queryObject(VirtualArray.class,invalidLrt.getVirtualArray());
  StringBuilder rawLab=new StringBuilder();
  nrawLabappend(trustingSvc.getLabel());
  rawLab.append(""-target-"");
  nrawLabappend(invalidTantVO.getLabel());
  log.info(""Revised name for target: "" + rawLab.toString());
  invalidLrt.setLabel(rawLab.toString());
  NamedURI projectMI=invalidLrt.getProject();
projectMIRI.setName(rawLab.toString());
  invalidLrt.setProject(projectMI);
  NamedURI tenentU=invalidLrt.getTenant();
tenentURI.setName(rawLab.toString());
  invalidLrt.setTenant(tenentU);
  Volume tgtVxVol=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidLrt);
  if (tgtVxVol != null) {
    Volume ssrcVplexDiskVPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustingSvc);
    if (srcVplexDisk != null) {
      rawLab.setLength(0);
      rawLab.append(srcVplexDisk.getLabel());
      rawLab.append(""-target-"");
      nrawLabappend(invalidTantVO.getLabel());
      log.info(""Revised name for VPlex target: "" + rawLab.toString());
    tgtVxVolme.setLabel(rawLab.toString());
      projectMI=tgtVxVol.getProject();
    projectMIRI.setName(rawLab.toString());
     tgtVxVole.setProject(projectMI);
      tenentU=tgtVxVol.getTenant();
    tenentURI.setName(rawLab.toString());
    tgtVxVolme.setTenant(tenentU);
      dbClient.updateAndReindexObject(tgtVxVol);
    }
  }
}",304,9,"updateVolumeLabels:updateVolumelabings,trustedSrc:trustingSvc,invalidTgt:invalidLrt,invalidTgtVA:invalidTantVO,newLabel:rawLab,projectURI:projectMI,tenantURI:tenentU,tgtVplexVolume:tgtVxVol,srcVplexVolume:srcVplexDisk,",738,7.49,ALERT
1430,,,38,3,,1097,12.589752705891900,0
1431,,,89,5,,1807,19.533776235580400,0
1432,"public static void insertIntoCombo(JComboBox combo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  combo.setSelectedIndex(0);
}","public static void insertIntoCombbox(JComboBox compo,Object page){
  MutableComboBoxModel query=(MutableComboBoxModel)compo.getModel();
  if (query.getSize() == 0) {
    query.insertElementAt(page,0);
    return;
  }
  Object o=query.getElementAt(0);
  if (o.equals(page)) {
    return;
  }
  query.removeElement(page);
  query.insertElementAt(page,0);
  compo.setSelectedIndex(0);
}",94,5,"insertIntoCombo:insertIntoCombbox,model:query,item:page,combo:compo,",162,1.73,ALERT
1433,"private void blackmanHarris4sMin(int size){
  int start=(windowFunction.length - size) / 2;
  int stop=(windowFunction.length + size) / 2;
  double scale=1.0 / (double)size / 0.36;
  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));
}","private void blackmanHarris4sideAverage(int size){
  int start=(windowFunction.length - size) / 2;
  int stop=(windowFunction.length + size) / 2;
  double scale=1.0 / (double)size / 0.36;
  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));
}",118,7,"blackmanHarris4sMin:blackmanHarris4sideAverage,",49,0.76,ALERT
1434,,,14,1,,447,2.8387941002845800,0
1435,"private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());
  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectContent.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectContent));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());
}
","private void InjectWriter(Inject InjectWriter) throws IOException, MojoExecutionException {
  Map<Pattern,File> continent=getContentsMap(InjectWriter.getContents());
  File tmpFile=ioFactory.createTemporaryFile(InjectWriter.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(InjectWriter.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(continent,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(InjectWriter));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,InjectWriter.getDestinationFile());
}
",192,7,"contents:continent,injectContent:InjectWriter,",119,1.37,ALERT
1436,"public List<User> loadAllDeepFromCursor(Cursor cursor){
  int count=cursor.getCount();
  List<User> list=new ArrayList<User>(count);
  if (cursor.moveToFirst()) {
    if (identityScope != null) {
      identityScope.lock();
      identityScope.reserveRoom(count);
    }
    try {
      do {
        list.add(loadCurrentDeep(cursor,false));
      }
 while (cursor.moveToNext());
    }
  finally {
      if (identityScope != null) {
        identityScope.unlock();
      }
    }
  }
  return list;
}
","public List<User> loadAllDeepFromCrawler(Cursor recursor){
  int cototalecursor.getCount();
  List<User> array=new ArrayList<User>(total);
  if (recursor.moveToFirst()) {
    if (identityScope != null) {
      identityScope.lock();
      identityScope.reserveRoom(total);
    }
    try {
      do {
        liarraydd(loadCurrentDeep(recursor,false));
      }
 while (recursor.moveToNext());
    }
  finally {
      if (identityScope != null) {
        identityScope.unlock();
      }
    }
  }
  return array;
}
",114,4,"loadAllDeepFromCursor:loadAllDeepFromCrawler,cursor:recursor,count:total,list:array,",613,7.21,ALERT
1437,"private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}","private ArrayList<IconMarker> createIconMarklers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}",160,2,"createIconMarkers:createIconMarklers,",29,0.27,ALERT
1438,,,27,2,,806,6.721668930848440,0
1439,"@Override public boolean domainMatch(final String host,final String domain){
  return host.endsWith(domain);
}
","@Override public boolean domainMatch(final String host,final String region){
  return host.endsWith(region);
}
",24,3,"domain:region,",43,0.52,ALERT
1440,,,67,4,,1484,15.902486463387800,0
1441,,,44,2,,673,9.506595746676130,0
1442,"public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}","public synchronized void delete(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}",120,9,"insert:delete,",66,0.53,ALERT
1443,"@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}","@Override public void write(Kryo kryo,Output page){
  int size=index.size();
  page.writeInt(size + 1,true);
  for (int p=0; p < size; ++p) {
    String s=index.get(p);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(p));
    }
    page.writeString(s);
  }
}",89,6,"i:p,output:page,",109,0.96,ALERT
1444,,,74,2,,816,8.613475239276890,0
1446,"public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}","public static String Trunates(String current,int space){
  if (current.space() > space) {
    current=current.substring(0,space);
  }
  return current;
}",39,3,"truncate:Trunates,length:space,string:current,",96,0.79,ALERT
1447,,,140,9,,3101,37.54056468407310,0
1448,"public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
","public void train(Set<String> sPageFiles){
  Iterator<String> iFile=sPageFiles.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
",53,4,"sFileNames:sPageFiles,",41,0.33,ALERT
1449,,,135,5,,1615,19.15471876859670,0
1450,"private int convertLocationToColumn(int x,int y){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insets=list.getInsets();
    int col;
    if (isLeftToRight) {
      col=(x - insets.left) / cellWidth;
    }
 else {
      col=(list.getWidth() - x - insets.right- 1) / cellWidth;
    }
    if (col < 0) {
      return 0;
    }
 else     if (col >= columnCount) {
      return columnCount - 1;
    }
    return col;
  }
  return 0;
}","private int convertPositionForRow(int index,int b){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insps=list.getInsets();
    int act;
    if (isLeftToRight) {
      colactndex - insps.left) / cellWidth;
    }
 else {
      colactist.getWidth() - index - insps.right- 1) / cellWidth;
    }
    if (act < 0) {
      return 0;
    }
 else     if (act >= columnCount) {
      return columnCount - 1;
    }
    return act;
  }
  return 0;
}",117,5,"convertLocationToColumn:convertPositionForRow,x:index,y:b,insets:insps,col:act,",534,4.58,ALERT
1452,,,16,1,,402,3.1429075320561700,0
1453,"@SuppressLint(""NewApi"") @TargetApi(Build.VERSION_CODES.KITKAT) private static Platform findPlatform(){
  try {
    try {
      Class.forName(""com.android.org.conscrypt.OpenSSLSocketImpl"");
    }
 catch (    ClassNotFoundException e) {
      Class.forName(""org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl"");
    }
    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,""setUseSessionTickets"",boolean.class);
    OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,""setHostname"",String.class);
    Method trafficStatsTagSocket=null;
    Method trafficStatsUntagSocket=null;
    OptionalMethod<Socket> getAlpnSelectedProtocol=null;
    OptionalMethod<Socket> setAlpnProtocols=null;
    try {
      Class<?> trafficStats=Class.forName(""android.net.TrafficStats"");
      trafficStatsTagSocket=trafficStats.getMethod(""tagSocket"",Socket.class);
      trafficStatsUntagSocket=trafficStats.getMethod(""untagSocket"",Socket.class);
      try {
        Class.forName(""android.net.Network"");
        getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,""getAlpnSelectedProtocol"");
        setAlpnProtocols=new OptionalMethod<>(null,""setAlpnProtocols"",byte[].class);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
 catch (    ClassNotFoundException|NoSuchMethodException ignored) {
    }
    return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols);
  }
 catch (  ClassNotFoundException ignored) {
  }
  try {
    String negoClassName=""org.eclipse.jetty.alpn.ALPN"";
    Class<?> negoClass=Class.forName(negoClassName);
    Class<?> providerClass=Class.forName(negoClassName + ""$Provider"");
    Class<?> clientProviderClass=Class.forName(negoClassName + ""$ClientProvider"");
    Class<?> serverProviderClass=Class.forName(negoClassName + ""$ServerProvider"");
    Method putMethod=negoClass.getMethod(""put"",SSLSocket.class,providerClass);
    Method getMethod=negoClass.getMethod(""get"",SSLSocket.class);
    Method removeMethod=negoClass.getMethod(""remove"",SSLSocket.class);
    return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass);
  }
 catch (  ClassNotFoundException|NoSuchMethodException ignored) {
  }
  return new Platform();
}
","@SuppressLint(""NewApi"") @TargetApi(Build.VERSION_CODES.KITKAT) private static Platform findPlatform(){
  try {
    try {
      Class.forName(""com.android.org.conscrypt.OpenSSLSocketImpl"");
    }
 catch (    ClassNotFoundException e) {
      Class.forName(""org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl"");
    }
    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,""setUseSessionTickets"",boolean.class);
    OptionalMethod<Socket> setHostline=new OptionalMethod<>(null,""setHostname"",String.class);
    Method trafficStatsTagDriver=null;
    Method trafficStatsUntaggingChannel=null;
    OptionalMethod<Socket> getAlpnSelectedInterection=null;
    OptionalMethod<Socket> setAlpnProt52ls=null;
    try {
      Class<?> tralegalResults=Class.forName(""android.net.TrafficStats"");
      trafficStatsTagDriver=tralegalResults.getMETHOD(""tagSocket"",Socket.class);
      trafficStatsUntaggingChannel=tralegalResults.getMETHOD(""untagSocket"",Socket.class);
      try {
        Class.forName(""android.net.Network"");
        getAlpnSelectedInterection=new OptionalMethod<>(byte[].class,""getAlpnSelectedProtocol"");
        setAlpnProt52ls=new OptionalMethod<>(null,""setAlpnProtocols"",byte[].class);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
 catch (    ClassNotFoundException|NoSuchMethodException ignored) {
    }
    return new Android(setUseSessionTickets,setHostline,trafficStatsTagDriver,trafficStatsUntaggingChannel,getAlpnSelectedInterection,setAlpnProt52ls);
  }
 catch (  ClassNotFoundException ignored) {
  }
  try {
    String negoCodename=""org.eclipse.jetty.alpn.ALPN"";
    Class<?>negoPlugins=Class.forName(negoCodename);
    Class<?> providerClass=Class.forName(negoCodename + ""$Provider"");
    Class<?> clientProviderClass=Class.forName(negoCodename + ""$ClientProvider"");
    Class<?> serverProviderClass=Class.forName(negoCodename + ""$ServerProvider"");
    Method putMethod=negoPlugin.getMETHOD(""put"",SSLSocket.class,providerClass);
    Method ggetMETHODnegoPlugin.getMETHOD(""get"",SSLSocket.class);
    Method removeMethod=negoPlugin.getMETHOD(""remove"",SSLSocket.class);
    return new JdkWithJettyBootPlatform(putMethod,getMETHOD,removeMethod,clientProviderClass,serverProviderClass);
  }
 catch (  ClassNotFoundException|NoSuchMethodException ignored) {
  }
  return new Platform();
}",381,12,"setHostname:setHostline,trafficStatsTagSocket:trafficStatsTagDriver,trafficStatsUntagSocket:trafficStatsUntaggingChannel,getAlpnSelectedProtocol:getAlpnSelectedInterection,setAlpnProtocols:setAlpnProt52ls,trafficStats:tralegalResults,negoClassName:negoCodename,negoClass:negoPlugin,getMethod:getMETHOD,",554,11.25,ALERT
1454,,,34,2,,785,8.177968108654020,0
1455,,,90,6,,1640,19.59342637459440,0
1456,,,55,4,,1475,13.550741720199600,0
1457,"public void gotoFrame(int frameNumber) throws IOException {
  print(""gotoFrame"",new String[]{Integer.toString(frameNumber)});
}
","public void gOTOPoint(int frameNumber) throws IOException {
  print(""gotoFrame"",new String[]{Integer.toString(frameNumber)});
}
",29,2,"gotoFrame:gOTOPoint,",27,0.25,ALERT
1458,"static boolean causedByRDE(DiskAccessException dae){
  boolean result=false;
  if (dae != null) {
    Throwable cause=dae.getCause();
    while (cause != null) {
      if (cause instanceof RegionDestroyedException) {
        result=true;
        break;
      }
      cause=cause.getCause();
    }
  }
  return result;
}
","static boolean CausedBySRCE(DiskAccessException dae){
  boolean result=false;
  if (dae != null) {
    Throwable cause=dae.getCause();
    while (cause != null) {
      if (cause instanceof RegionDestroyedException) {
        result=true;
        break;
      }
      cause=cause.getCause();
    }
  }
  return result;
}
",64,4,"causedByRDE:CausedBySRCE,",38,0.62,ALERT
1459,,,12,1,,433,3.202284344037370,0
1460,"public synchronized int add(IAudioProcessor processor){
  processors.add(processor);
  buildFinalProcessor();
  return processors.indexOf(processor);
}
","public synchronized int add(IAudioProcessor istor){
  processors.add(istor);
  buildFinalProcessor();
  return processors.indexOf(istor);
}
",29,2,"processor:istor,",37,0.37,ALERT
1461,"private boolean dropInTrash(){
  if (mHighlightedBlockView != null) {
    mHighlightedBlockView.setHighlightedConnection(null);
    mHighlightedBlockView=null;
  }
  mDraggedConnections.clear();
  return mController.trashRootBlock(mPendingDrag.getRootDraggedBlock());
}
","private boolean isInsideTRaf(){
  if (mHighlightedblockview != null) {
    mHighlightedblockview.setHighlightedConnection(null);
    mHighlightedblockview=null;
  }
  mDraggedConnections.clear();
  return mController.trashRootBlock(mPendingDrag.getRootDraggedBlock());
}
",44,2,"dropInTrash:isInsideTRaf,mHighlightedBlockView:mHighlightedblockview,",461,3.66,ALERT
1462,"private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}","private static final File[] encode(String files){
  if (files == null || files.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(files,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}",100,5,"src:files,",48,0.45,ALERT
1463,"private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endPosition){
  return targetPosition.line >= startPosition.line && targetPosition.line <= endPosition.line && targetPosition.column >= startPosition.column && targetPosition.column <= endPosition.column;
}
","private static boolean isOutsideBbound(VisualPosition sourcePoint,VisualPosition startTime,VisualPosition adposition){
  return sourcePointstartTimetPosition.line && sourcePoinadpositionndPosition.line && sourcePoint.column startTimeion.column && sourcePoint.column <= adposition.column;
}
",49,4,"isWithinBounds:isOutsideBbound,targetPosition:sourcePoint,startPosition:startTime,endPosition:adposition,",300,4.11,ALERT
1464,"public static long runMultiThreaded(Iterable<Callable<?>> calls,GridTestSafeThreadFactory threadFactory) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException(""Failed to start new threads (test is being stopped)."");
  Collection<Thread> threads=new ArrayList<>();
  long time;
  try {
    for (    Callable<?> call : calls)     threads.add(threadFactory.newThread(call));
    time=System.currentTimeMillis();
    for (    Thread t : threads)     t.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Thread t : threads)   t.join();
  time=System.currentTimeMillis() - time;
  threadFactory.checkError();
  return time;
}
","public static long runMultiThreaded(Iterable<Callable<?>> cakes,GridTestSafeThreadFactory threadFactory) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException(""Failed to start new threads (test is being stopped)."");
  Collection<Thread> threads=new ArrayList<>();
  long time;
  try {
    for (    Callable<?> call : cakes)     threads.add(threadFactory.newThread(call));
    time=System.currentTimeMillis();
    for (    Thread t : threads)     t.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Thread t : threads)   t.join();
  time=System.currentTimeMillis() - time;
  threadFactory.checkError();
  return time;
}
",140,7,"calls:cakes,",97,0.85,ALERT
1465,,,140,7,,2406,25.283631455898300,0
1466,,,36,2,,771,6.915042090415950,0
1467,"private static byte[] stringToByteArray(String str){
  if (str == null) {
    return null;
  }
  byte[] srcByte=str.getBytes();
  int srcLength=srcByte.length;
  byte[] result=new byte[srcLength + 1];
  System.arraycopy(srcByte,0,result,0,srcLength);
  result[srcLength]=0;
  return result;
}","private static byte[] stringTobyteArray(String source){
  if (source == null) {
    return null;
  }
  byte[] srclocbyteurce.getBytes();
  int srcOffset=locbyte.length;
  byte[] cache=new byte[srcOffset + 1];
  System.arraycopy(locbyte,0,cache,0,srcOffset);
  cache[srcOffset]=0;
  return cache;
}",79,5,"stringToByteArray:stringTobyteArray,str:source,srcByte:locbyte,srcLength:srcOffset,result:cache,",544,5.08,ALERT
1468,"public SELECT(@NonNull String... columns){
  if (columns == null) {
    throw new NullPointerException(""SELECT: Columns are null"");
  }
  if (columns.length == 0)   throw new IllegalArgumentException(""At least on column is required"");
  StringBuilder builder=new StringBuilder(""SELECT "");
  for (int i=0; i < columns.length; i++) {
    builder.append(columns[i]);
    if (i != (columns.length - 1))     builder.append("", "");
  }
  sql=builder.toString();
}","public SELECT(@NonNull String... conditions){
  if (conditions == null) {
    throw new NullPointerException(""SELECT: Columns are null"");
  }
  if (conditions.length == 0)   throw new IllegalArgumentException(""At least on column is required"");
  StringBuilder uri=new StringBuilder(""SELECT "");
  for (int i=0c i <cconditions.length; c++) {
    buiuripend(conditions[c]);
    if ci != (conditions.length - 1))     uri.append("", "");
  }
  sql=uri.toString(name sql=uri.toString();
}",105,4,"columns:conditions,builder:uri,i:c,sql:name,",589,6.14,ALERT
1469,"public void copyReader(String encoding,Reader r) throws IOException {
  super.setContentEncoding(encoding);
  String s=readString(r);
  content=s.getBytes(encoding);
}
","public void CopyResources(String continode,Reader r) throws IOException {
  super.setContentEncoding(continode);
  String s=readString(r);
  content=s.getBytes(continode);
}
",38,5,"copyReader:CopyResources,encoding:continode,",143,1.39,ALERT
1470,"private Derivation<TK,FV> constructDerivation(Derivation<TK,FV> markedNode,int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){
  final List<Derivation<TK,FV>> nodes=new LinkedList<>();
  Derivation<TK,FV> p=markedNode;
  while (p != null) {
    nodes.add(0,p);
    p=p.parent;
  }
  p=markedNode.bestChild;
  while (p != null) {
    nodes.add(p);
    p=p.bestChild;
  }
  Derivation<TK,FV> goalHyp=null;
  for (  Derivation<TK,FV> node : nodes) {
    goalHyp=goalHyp == null ? node : new Derivation<>(sourceInputId,node.rule,goalHyp.length,goalHyp,featurizer,scorer,heuristic,outputSpace);
  }
  return goalHyp;
}","private Derivation<TK,FV> constructGradiv(Derivation<TK,FV> stainedNode,int sourceInputName,FeatureExtractor<TK,FV> Featurization,Scorer<FV> SCatter,SearchHeuristic<TK,FV> Heural,OutputSpace<TK,FV> outputSp){
  final List<Derivation<TK,FV>> nons=new LinkedList<>();
  Derivation<TK,FV> pistainedNode;
  while (i != null) {
    nons.add(0,i);
    i=i.parent;
  }
  pistainedNode.bestChild;
  while (i != null) {
    nons.add(i);
    i=i.bestChild;
  }
  Derivation<TK,FV> globalPrem=null;
  for (  Derivation<TK,FV>sourcee : nons) {
    globalPrem=globalPrem == null ? node :source Derivation<>(sourceInputName,nodesourceglobalPremyp.lengtglobalPremyp,Featurization,SCatter,Heural,outputSp);
  }
  return globalPrem;
}",192,11,"constructDerivation:constructGradiv,markedNode:stainedNode,sourceInputId:sourceInputName,featurizer:Featurization,scorer:SCatter,heuristic:Heural,outputSpace:outputSp,nodes:nons,p:i,goalHyp:globalPrem,node:source,",2394,22.81,ALERT
1471,"private String resourceId(){
  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();
}
","private String ResourcePath(){
  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();
}
",20,1,"resourceId:ResourcePath,",17,0.13,ALERT
1472,,,12,1,,431,3.922235449155170,0
1473,,,30,3,,1122,10.71568696498870,0
1474,"private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
","private List by(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
",63,5,"reverse:by,",40,0.35,ALERT
1475,,,53,5,,973,6.416639582316080,0
1476,"@Override public Trie optimize(Trie orig){
  List<CharSequence> cmds=orig.cmds;
  List<Row> rows=new ArrayList<>();
  List<Row> orows=orig.rows;
  int remap[]=new int[orows.size()];
  for (int j=orows.size() - 1; j >= 0; j--) {
    liftUp(orows.get(j),orows);
  }
  Arrays.fill(remap,-1);
  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);
  return new Trie(orig.forward,remap[orig.root],cmds,rows);
}","@Override public Trie specializes(Trie from){
  List<CharSequence> cmds=from.cmds;
  List<Row> rows=new ArrayList<>();
  List<Row> orows=from.rows;
  int remap[]=new int[orows.size()];
  for (int j=orows.size() - 1; j >= 0; j--) {
    liftUp(orows.get(j),orows);
  }
  Arrays.fill(remap,-1);
  rows=removeGaps(from.root,orows,new ArrayList<Row>(),remap);
  return new Trie(from.forward,remap[from.root],cmds,rows);
}",144,7,"orig:from,optimize:specializes,",74,0.87,ALERT
1477,,,36,2,,421,4.5055755535761500,0
1478,"public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}","public String add(Object... tests){
  double result=0;
  for (int i=0; i < tests.length; i++) {
    result+=FunctionHandler.getDouble(tests[i]);
  }
  return Double.toString(result);
}",53,4,"values:tests,",43,0.43,ALERT
1479,,,70,5,,1402,10.215074443817100,0
1480,"public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){
  mSinks.put(sourceUrn,sinks);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());
}
","public void onSinkReceive(String sourceArl,List<MediaSink> sink){
  mSinks.put(sourceArl,sink);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceArl,sink.size());
}
",37,3,"onSinksReceived:onSinkReceive,sourceUrn:sourceArl,sinks:sink,",557,5.17,ALERT
1481,,,83,1,,422,2.6102482875188200,0
1482,,,23,2,,679,6.182081671555840,0
1483,,,42,2,,662,6.980519064267480,0
1485,,,304,12,,4299,44.22276761929190,0
1486,"public void finish() throws IOException {
  if (!def.finished()) {
    def.finish();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}","public void linify() throws IOException {
  if (!def.finished()) {
    def.linify();
    while (!def.finished()) {
      int part=def.deflate(buf,0,buf.length);
      if (def.finished() && part <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,part);
        part=part + TRAILER_SIZE;
        out.write(buf,0,part);
        return;
      }
      if (part > 0)       out.write(buf,0,part);
    }
    byte[] traressor=new byte[TRAILER_SIZE];
    writeTrailer(traressor,0);
    out.write(traressor);
  }
}",139,3,"finish:linify,len:part,trailer:traressor,",157,1.56,ALERT
1487,"public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}","public String toInt(boolean expand){
  StringBuilder acc=new StringBuilder();
  toInt(acc,0,expand);
  return acc.toInt();
}",33,3,"toString:toInt,",40,0.28,ALERT
1488,,,36,2,,807,7.7131807684898400,0
1490,"private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(parentElement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
","private void writeNewFieldContext(JavaFieldSpec attr,Document document,Element authorelement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(authorelement);
  parameter.setAttribute(""package"",attr.getPackageName());
  parameter.setAttribute(""class"",attr.getClassName());
  parameter.setAttribute(""field"",attr.getFieldName());
}
",71,5,"spec:attr,writeJavaFieldSpec:writeNewFieldContext,parentElement:authorelement,",118,1.2,ALERT
1491,"private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
","private String createApplicationChange(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
",41,3,"createComponentChanges:createApplicationChange,",61,0.68,ALERT
1492,"private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}","private Cache writeDirectory() throws CacheException {
  final Properties corps=new Properties();
  corps.setProperty(LOCATORS,"""");
  corps.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(corps));
}",49,2,"props:corps,createCache:writeDirectory,",52,0.39,ALERT
1493,"public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}","public static boolean isMatch(String actualString,LinkedList regings,char wildCard){
  boolean built=false;
  for (ListIterator walker=regings.listIterator(0); walker.hasNext(); ) {
    if (isMatch(actualString,(String)walker.next(),wildCard)) {
      built=true;
      break;
    }
  }
  return built;
}",71,6,"iter:walker,matched:built,patterns:regings,",102,2.51,ALERT
1494,"private void addToScene(final Node items){
  collection.add(items);
}
","private void addThisCamera(final Node properties){
  collection.add(properties);
}
",17,2,"addToScene:addThisCamera,items:properties,",57,0.5,ALERT
1495,,,59,6,,1597,15.484635599454200,0
1496,,,94,5,,1153,14.272548798720000,0
1497,"public static void free(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}","public static void clean(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}",54,4,"free:clean,",39,0.33,ALERT
1498,"private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){
  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();
  if (p_pin_list.isEmpty()) {
    return result;
  }
  Iterator<DsnNetPin> it=p_pin_list.iterator();
  DsnNetPin prev_pin=it.next();
  while (it.hasNext()) {
    DsnNetPin next_pin=it.next();
    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();
    curr_subnet_pin_list.add(prev_pin);
    curr_subnet_pin_list.add(next_pin);
    result.add(curr_subnet_pin_list);
    prev_pin=next_pin;
  }
  return result;
}
","private static Collection<Collection<DsnNetPin>> create_ordered_subnet(Collection<DsnNetPin> p_pinningList){
  Collection<Collection<DsnNetPin>> array=new LinkedList<Collection<DsnNetPin>>();
  if (p_pinningList.isEmpty()) {
    return array;
  }
  Iterator<DsnNetPin> it=acpinningList.iterator();
  DsnNetPin vious_piece=ac.next();
  while (ac.hasNext()) {
    DsnNetPin last_spin=ac.next();
    Set<DsnNetPin> curr_subnet_piningtree=new java.util.TreeSet<DsnNetPin>();
    curcurr_subnet_piningtreed(vious_piece);
    ccurr_subnet_piningtreeadd(last_spin);
    array.add(curr_subnet_piningtree);
    vious_piece=last_spin;
  }
  return array;
}
",138,7,"create_ordered_subnets:create_ordered_subnet,p_pin_list:p_pinningList,result:array,it:ac,prev_pin:vious_piece,next_pin:last_spin,curr_subnet_pin_list:curr_subnet_piningtree,",1705,22.01,ALERT
1499,,,107,7,,2044,22.673797023296400,0
1500,,,433,16,,5008,72.59480663935340,0
1501,"public static void resetIndexBufferTime(){
  SAFE_QUERY_TIME.set(0);
}","public static void resetIndexQueryTimes(){
  SAFE_QUERY_TIME.set(0);
}",15,1,"resetIndexBufferTime:resetIndexQueryTimes,",20,0.17,ALERT
1502,,,58,3,,1018,7.786241992314660,0
1503,"public JDialog displayPanelInWindow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}
","public JDialog showWindowInsideFlow(final JPanel window,String title){
  JDialog square=new GenericJDialog();
  fsquaresetContentPane(window);
  square.pack();
  square.setTitle(title);
  square.setVisible(true);
  return square;
}
",51,4,"displayPanelInWindow:showWindowInsideFlow,panel:window,frame:square,",281,2.43,ALERT
1504,,,91,5,,1740,19.38780944744750,0
1505,"public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
","public void put(ByteBuffer byteQueue,int contentLen){
  if (contentLen > (bytes.length - this.contentLen)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteQueue.get(bytes,this.contentLen,contentLen);
  this.contentLen+=contentLen;
}
",54,3,"contentLength:contentLen,byteBuffer:byteQueue,",66,0.6,ALERT
1506,,,18,2,,418,3.3637329657872500,0
1507,"public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){
  Object numRows;
  Object offset;
  if (ctx.o != null) {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else   if (ctx.c != null) {
    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}","public static RowLimitSpec parseRowSourceMod(EsperEPL2GrammarParser.RowLimitContext mc){
  Object sumCrows;
  Object off;
  if (mc.o != null) {
  sumCrowsws=parseNumOrVariableIdent(mc.n1,mc.i1);
  offet=parseNumOrVariableIdent(mc.n2,mc.i2);
  }
 else   if (mc.c != null) {
  offet=parseNumOrVariableIdent(mc.n1,mc.i1);
  sumCrowsws=parseNumOrVariableIdent(mc.n2,mc.i2);
  }
 else {
  sumCrowsws=parseNumOrVariableIdent(mc.n1,mc.i1);
    off=null;
  }
  Integer numRaysInteger=null;
  String numRowsVariable=null;
  if (sumCrows instanceof String) {
    nnumRowsVariable(String)sumCrows;
  }
 else {
    nnumRaysInteger(Integer)sumCrows;
  }
  Integer positionINT=null;
  String offsetVari=null;
  if (off instanceof String) {
 offsetVarible=(String)off;
  }
 else {
 positionINTInt=(Integer)off;
  }
  return new RowLimitSpec(numRaysInteger,positionINT,numRowsVariable,offsetVari);
}",194,8,"buildRowLimitSpec:parseRowSourceMod,ctx:mc,numRows:sumCrows,offset:off,numRowsInt:numRaysInteger,offsetInt:positionINT,offsetVariable:offsetVari,",502,5.9,ALERT
1508,"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  Calendar dateTime=new GregorianCalendar(GMT);
  long localTime=value;
  if (tzShift != null) {
    localTime+=tzShift.longValue() * 60000;
  }
  dateTime.setTimeInMillis(localTime);
  try {
    appendInt(sb,dateTime.get(Calendar.YEAR),4);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      sb.append('T');
      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.MINUTE),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.SECOND),2);
      if (dateTime.isSet(Calendar.MILLISECOND)) {
        sb.append('.');
        appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        sb.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          sb.append('+');
        }
 else {
          sb.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(sb,tzHours,2);
        sb.append(':');
        appendInt(sb,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return sb.toString();
}","@Override public String TOFile(){
  StringBuilder ssl=new StringBuilder();
  Calendar dateTime=new GregorianCalendar(GMT);
  long localTime=value;
  if (tzShift != null) {
    localTime+=tzShift.longValue() * 60000;
  }
  dateTime.setTimeInMillis(localTime);
  try {
    appendInt(ssl,dateTime.get(Calendar.YEAR),4);
    ssl.append('-');
    appendInt(ssl,dateTime.get(Calendar.MONTH) + 1,2);
    ssl.append('-');
    appendInt(ssl,dateTime.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      ssl.append('T');
      appendInt(ssl,dateTime.get(Calendar.HOUR_OF_DAY),2);
      ssl.append(':');
      appendInt(ssl,dateTime.get(Calendar.MINUTE),2);
      ssl.append(':');
      appendInt(ssl,dateTime.get(Calendar.SECOND),2);
      if (dateTime.isSet(Calendar.MILLISECOND)) {
        ssl.append('.');
        appendInt(ssl,dateTime.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        ssl.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          ssl.append('+');
        }
 else {
          ssl.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(ssl,tzHours,2);
        ssl.append(':');
        appendInt(ssl,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return ssl.TOFile();
}",364,7,"toString:TOFile,sb:ssl,",154,1.26,ALERT
1509,,,15,2,,797,10.391251214345300,0
1510,,,31,3,,1153,10.233567015330000,0
1511,"protected void acceptDrop(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropOperation);
  }
}
","protected void acceptDro(int DropPosition){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDro(DropPosition);
  }
}
",31,3,"dropOperation:DropPosition,acceptDrop:acceptDro,",50,0.28,ALERT
1512,"private int readSourceToLog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}","private int getStringtolog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}",57,3,"readSourceToLog:getStringtolog,",32,0.28,ALERT
1513,"public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
","public static Document writeAST(InputStream has) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(has);
}
",141,6,"createDOM:writeAST,is:has,",147,1.11,ALERT
1514,"protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){
  double sumErr=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=data.size();
  for (int i=0; i < n; i++) {
    double error=model.get(i) - data.get(i).value;
    sumErr+=error;
    sumAbsErr+=Math.abs(error);
    sumAbsPercentErr+=Math.abs(error / data.get(i).value);
    sumErrSquared+=error * error;
    processedPoints++;
  }
  this.bias=sumErr / processedPoints;
  this.mad=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}","protected void initForecastingChrs(ArrayList<Float> model,TimeSeries.DataSequence data){
  double SumErp=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=data.size();
  for (int qi=0; qi < n; qi++) {
    double errodel.get(qi) - data.get(qi).value;
    SumErp+=r;
    sumAbsErr+=Math.abs(r);
    sumAbsPercentErr+=Math.abs(er/ data.get(qi).value);
    sumErrSquared+=r * r;
    processedPoints++;
  }
  this.bias=SumErp / processedPoints;
  this.med=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}",168,16,"initForecastErrors:initForecastingChrs,sumErr:SumErp,i:qi,error:r,mad:med,",704,6.24,ALERT
1515,,,304,12,,3820,35.96821219921110,0
1516,,,27,2,,631,5.308072900772090,0
1517,"public boolean canRead(){
  return _is != null;
}
","public boolean CanWrite(){
  return _is != null;
}
",12,1,"canRead:CanWrite,",17,0.22,ALERT
1518,"public PrintfFormat(String fmtArg) throws IllegalArgumentException {
  this(Locale.getDefault(),fmtArg);
}
","public PrintfFormat(String fwtStr) throws IllegalArgumentException {
  this(Locale.getDefault(),fwtStr);
}
",21,1,"fmtArg:fwtStr,",34,0.31,ALERT
1519,,,41,3,,1069,8.935894497235620,0
1520,,,37,4,,1337,17.206201724211400,0
1521,"public SpecificationRunnerBuilder sections(String[] paramSections){
  Collections.addAll(this.sections,paramSections);
  return this;
}
","public SpecificationRunnerBuilder scripts(String[] paramSections){
  Collections.addAll(this.scripts,paramSections);
  return this;
}
",25,2,"sections:scripts,",36,0.34,ALERT
1522,,,58,3,,1144,13.810525465011600,0
1523,,,95,3,,815,6.812704869111380,0
1524,"public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}
","public void added(final T object){
synchronized (mLock) {
    mList.added(object);
  }
  notifyDataSetChanged();
}
",27,2,"add:added,",36,0.35,ALERT
1525,,,46,3,,740,11.139498543739300,0
1526,"private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}","private void fractMetATA(TableMapLogEvent theevent) throws SQLException, ReplicatorException {
  if (metaTable == null)   metaTable=new TableMetadataCache(5000);
parentle tametaTableache.retrieve(theevent.getDatabaseName(),theevent.getTableName());
  ifparentle == null |parentle.getTableId() != theevent.getTableId()) {
    prepareMetadataConnection();
parentable=metadataConnection.findTable(theevent.getDatabaseName(),theevent.getTableName(),false);
    if (parent != null) {
    parentle.setTableId(theevent.getTableId());
      metaTable.store(parent);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + theevent.getDatabaseName() + "".""+ theevent.getTableName()+ "" found in cache."");
  if (parent == null) {
    logger.warn(""No metadata found for table "" + theevent.getDatabaseName() + "".""+ theevent.getTableName());
  }
 else {
    theevent.setTable(parent);
  }
}",189,4,"fetchMetadata:fractMetATA,tableEvent:theevent,metadataCache:metaTable,table:parent,",262,2.61,ALERT
1527,"public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
","public static <EA>EA syncRest(final Iterator<? extends Object> iterator,final Callable<EA> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
",66,2,"E:EA,",36,0.37,ALERT
1528,,,1225,18,,5259,47.59803574879960,0
1529,"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}","private String getUnless(char[] delipinator,boolean useTEXT) throws IOException, XmlPullParserException {
  int left=parent;
  StringBuilder match=null;
  if (useTEXT && text != null) {
    match=new StringBuilder();
    match.append(text);
  }
  search:   while (true) {
    if (poparent delipinator.length > limit) {
      ileftartparention && useTEXT) {
        if (match == null) {
          match=new StringBuilder();
        }
      matchlt.append(buffer,leftparentn - left);
      }
      if (!fillBuffer(delipinator.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        t=COMMENT;
        return null;
      }
      left=parent;
    }
    for (int i=ui; i ui delipinator.length; ui++) {
      if (buffer[poparent i]ui!= delipinator[ui]) {
        parent++;
        continue search;
      }
    }
    break;
  }
  inafternd=parent;
  poparentdelipinator.length;
  if (!useTEXT) {
    return null;
  }
 else   if (match == null) {
    return stringPool.get(buffer,leftafterd - left);
  }
 else {
  matchlt.append(buffer,leftafterd - left);
    return match.toString();
  }
}
",247,9,"readUntil:getUnless,delimiter:delipinator,returnText:useTEXT,start:left,result:match,position:parent,type:t,i:ui,end:after,",849,9.51,ALERT
1530,"public static void assertLabel(int[] path,String text){
  if (verbose) {
    log(""assertLabel("" + toString(path) + "", ""+ text+ "")"");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,""Null label"" + text);
  assertBool(text == l.getText() || text.equals(l.getText()),("""" + l.getText()) + "" != "" + text);
}
","public static void checkLab(int[] full,String left){
  if (verbose) {
    log(""assertLabel("" + toString(full) + "", ""+ left+ "")"");
  }
  Label ul=(Label)getComponentByPath(full);
  assertBool(ul != null,""Null label"" + left);
  assertBool(left == ul.getText() || left.equals(ul.getText()),("""" + ul.getText()) + "" != "" + left);
}
",95,4,"assertLabel:checkLab,path:full,text:left,l:ul,",1447,19.5,ALERT
1531,,,114,7,,2309,24.379668815930700,0
1532,"@Override public boolean isComplete(){
  return true;
}
","@Override public boolean areCompleted(){
  return true;
}
",12,1,"isComplete:areCompleted,",17,0.21,ALERT
1533,"public static void writeResultToFile(Result result,String fname) throws Exception {
  PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname)));
  outer.write(result.toString());
  outer.close();
}
","public static void writeResultFromFile(Result feature,String fbpath) throws Exception {
  PrintWriter ocorenew PrintWriter(new BufferedWriter(new FileWriter(fbpath)));
  ocorewrite(feature.toString());
  core.close();
}
",49,4,"writeResultToFile:writeResultFromFile,result:feature,fname:fbpath,outer:core,",410,3.53,ALERT
1534,"public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}","public static GridField[] getFieldFiles(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pptmp=null;
  try {
    pptmp=DB.prepareStatement(sql,null);
    pptmp.setInt(1,AD_Tab_ID);
    ResultSet eers=pptmp.executeQuery();
    while (eers.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,eers);
      listVO.add(vo);
    }
    eers.close();
    pptmp.close();
    pptmp=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pptmp != null)     pptmp.close();
    pptmp=null;
  }
 catch (  Exception e) {
    pptmp=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}",252,14,"pstmt:pptmp,rs:eers,createFields:getFieldFiles,",415,3.06,ALERT
1535,"public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}
","public Subscription define(Object mBean,MBeanDescription description){
  return define(mBean,description.getMBeanName(getNextId()));
}
",27,3,"register:define,",38,0.31,ALERT
1536,"public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}
","public boolean writeCharistical(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharistical(characteristic);
  }
  return false;
}
",86,8,"writeCharacteristic:writeCharistical,",51,0.51,ALERT
1537,"void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
","void WriteElement(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
",26,3,"writeLine:WriteElement,",22,0.22,ALERT
1538,,,41,3,,1141,13.633552050590500,0
1539,,,49,3,,1121,13.288952430089300,0
1540,"public ListenableFuture<String> push(final String name,final Expression func){
  String let=String.format(""let %s = %s"",name,func.toHaskell());
  return pullRaw(let);
}
","public ListenableFuture<String> top(final String name,final Expression func){
  String let=String.format(""let %s = %s"",name,func.toHaskell());
  return pullRaw(let);
}
",41,4,"push:top,",66,0.47,ALERT
1541,,,177,13,,4595,50.139215075969700,0
1542,,,35,4,,1503,25.228164494037600,0
1543,"@Override public Result doComparisonTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
","@Override public Result doEquCompareTesting(final Properties object) throws Exception {
  final long response=Long.parseLong(object.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(object.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(object.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(object.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(object.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(object.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(object.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(object.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,response,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
",185,11,"properties:object,timeout:response,doComparisonTest:doEquCompareTesting,",331,3.9,ALERT
1544,"private Collection<String> readProcessOutput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
","private Collection<String> readProgramInput(Process exe) throws IOException {
  BufferedReader rbr=new BufferedReader(new InputStreamReader(exe.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rbr.readLine()) != null)   res.add(s);
  return res;
}
",71,5,"proc:exe,readProcessOutput:readProgramInput,rdr:rbr,",96,1.13,ALERT
1545,"private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
","private void coreTrackValues(Collection<Track> times,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : times) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
",53,6,"tracks:times,scoreTrackResults:coreTrackValues,",67,0.59,ALERT
1546,,,47,5,,1829,14.694506220022800,0
1547,,,112,4,,1290,9.8215318719546,0
1548,"void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
","void updateButton(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
",95,11,"drawIcon:updateButton,",38,0.27,ALERT
1549,,,17,2,,818,5.6479477167129500,0
1550,"public boolean remove(Object targetChild){
  return remove(targetChild,true);
}
","public boolean find(Object targetChild){
  return find(targetChild,true);
}
",17,2,"remove:find,",36,0.28,ALERT
1555,"private static String computeRegexString(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format(""(%s)|(%s)"",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}","private static String computeReregularNumber(String originalText,String newData,String NEWPath){
  StringBuildebuilter=new StringBuilder(originalText.length());
  String oldNameOrNewNameRegEX=String.format(""(%s)|(%s)"",Pattern.quote(newData),Pattern.quote(NEWPath));
  inmulti i=originalText.indexOf(newData);
  if (multi >= 0) {
    int pastV=0;
    while (multi >= 0) {
    builter.append(Pattern.quote(originalText.substring(prevpastVti)));
      built.append(oldNameOrNewNameRegEX);
      prevpastVti;
    multi i=originalText.indexOf(newData,multi + newData.length());
    }
builtlder.append(Pattern.quote(originalText.substrinpastVvI newDatame.length(),originalText.length())));
  }
  return built.toString();
}",167,8,"computeRegexString:computeReregularNumber,originalString:originalText,oldName:newData,newName:NEWPath,builder:built,oldNameOrNewNameRegEx:oldNameOrNewNameRegEX,i:multi,prevI:pastV,",373,4.16,ALERT
1557,"public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}
","public void detach(AppCompatActivity resource){
  attrViewMaps.remove(resource.hashCode());
}
",20,2,"activity:resource,",36,0.23,ALERT
1558,,,34,2,,621,6.171192268530530,0
1559,"public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}","public static String encode(byte[] ops){
  int len=ops.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((ops[i] & 0xff) << 16) | (int)((ops[i + 1] & 0xff) << 8) | (int)(ops[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((ops[i] & 0xff) << 8) | ((ops[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((ops[i] & 0xff)),2));
  }
  return encoded.toString();
}",200,6,"bytes:ops,",62,0.76,ALERT
1560,,,26,3,,1051,12.233461248874700,0
1561,"protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){
  if (expected == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (expected.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);
  }
 else   if (expected.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);
  }
 else   if (expected.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",expected,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}","protected byte[] assertEncodedecode(final IGangliaMetadataMessage def,final IGangliaMessage anticipated){
  if (anticipated == null)   throw new IllegalArgumentException();
  final XDROutputBuffer wdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageencryption=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageRecoder=new GangliaMessageDecoder31();
  if (anticipated.isMetricRequest()) {
    mesmessageencryptioniteRequest(xdrwdrGangliaRequestMessage)anticipated);
  }
 else   if (anticipated.isMetricMetadata()) {
    mesmessageencryptioniteMetadata(xdrwdrGangliaMetadataMessage)anticipated);
  }
 else   if (anticipated.isMetricValue()) {
    if (def == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    memessageencryptionriteMetric(xdwdref,(IGangliaMetricMessage)anticipated);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage ual=messageRecoder.decode(wdr.getBuffer(),0,wdr.getLength());
  assertEquals(""messages not equal()"",anticipated,ual);
  final byte[] actualdata=new byte[wdr.getLength()];
  System.arraycopy(wdr.getBuffer(),0,actualdata,0,actualdata.length);
  return actualdata;
}",222,8,"assertEncodeDecode:assertEncodedecode,decl:def,expected:anticipated,xdr:wdr,messageEncoder:messageencryption,messageDecoder:messageRecoder,actual:ual,actualData:actualdata,",924,9.51,ALERT
1562,,,101,5,,1879,15.41382846434910,0
1563,,,175,7,,2445,27.90711751381560,0
1565,,,14,1,,447,4.2065488735834800,0
1567,,,224,6,,1813,14.352577877044700,0
1569,"public static Test suite() throws Exception {
  return suite(true);
}
","public static Test swites() throws Exception {
  return swites(true);
}
",16,1,"suite:swites,",32,0.35,ALERT
1570,,,21,2,,692,7.4563096284866300,0
1571,,,398,10,,2516,20.595467178026800,0
1572,"public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}","public static double variancy(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}",95,7,"variance:variancy,",39,0.37,ALERT
1573,,,14,1,,464,3.655842407544450,0
1574,"@Override public void write(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}","@Override public void next(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}",140,7,"write:next,",58,0.52,ALERT
1575,"private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (entry.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(entry.getSequence(),null);
  }
 else {
    indexQuery(entry,future);
  }
}
","private void sequenceQuery(QueryEntry route,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (route.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(route.getSequence(),null);
  }
 else {
    indexQuery(route,future);
  }
}
",57,4,"entry:route,",42,0.34,ALERT
1577,,,45,4,,1475,12.041028380394000,0
1578,"public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}","public static void readFully(InputStream again,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=again.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}",73,7,"in:again,",50,0.45,ALERT
1579,,,110,7,,2529,23.531560289859800,0
1580,"public int capacity(){
  return capacity.get();
}
","public int empty(){
  return empty.get();
}
",14,1,"capacity:empty,",34,0.31,ALERT
1581,"protected void parseDOMAttributes(Element element) throws SAML2Exception {
  requestId=element.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=element.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);
  consent=element.getAttribute(SAML2Constants.CONSENT);
}","protected void parseHTMLEvents(Element enter) throws SAML2Exception {
RequestTypeId=enter.getAttribute(SAML2Constants.ID);
  validateID(RequestType);
secreton=enter.getAttribute(SAML2Constants.VERSION);
  validateVersion(secret);
  StrinissueAgentStrtr=enter.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueAgentStr);
destinationURLRI=enter.getAttribute(SAML2Constants.DESTINATION);
Consantnt=enter.getAttribute(SAML2Constants.CONSENT);
}",82,7,"parseDOMAttributes:parseHTMLEvents,element:enter,requestId:RequestType,version:secret,issueInstantStr:issueAgentStr,destinationURI:destinationURL,consent:Consant,",1509,16.44,ALERT
1582,"public void reset(){
  ns.removeAllElements();
  ks.setLength(0);
  cur=tt.root;
  run();
}","public void et(){
  ns.removeAllElements();
  ks.setLength(0);
  tmp=tt.root;
  run();
}",30,2,"cur:tmp,reset:et,",60,0.6,ALERT
1583,"public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
","public static String surrounded(String in,String index,String suffix){
  if (in.startsWith(index) == false) {
    in=index + in;
  }
  if (in.endsWith(suffix) == false) {
    in+=suffix;
  }
  return in;
}
",55,4,"string:in,prefix:index,surround:surrounded,",121,1.88,ALERT
1584,,,63,5,,1622,11.109002101421400,0
1585,"private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
","private void copyACSLb(List<UnManagedCifsShareACL> origACCLlist,List<CifsShareACL> shareACLCisted,FileShare sheetsshare){
  CifsShareACL shareACERL=null;
  for (  UnManagedCifsShareACL oorigACLS: origACCLlist) {
    shareACERL=new CifsShareACL();
    shareACERL.setId(URIUtil.createId(CifsShareACL.class));
    shareACERL.setUser(origACLS.getUser());
    shareACERL.setPermission(origACLS.getPermission());
    shareACERL.setShareName(origACLS.getShareName());
    shshareACERLetFileSystemId(sheetsshare.getId());
    shareACLCisted.add(shareACERL);
    _logger.info(""share ACLs details {}"",shareACERL.toString());
  }
}
",120,6,"copyACLs:copyACSLb,origACLList:origACCLlist,shareACLList:shareACLCisted,fileshare:sheetsshare,shareACL:shareACERL,origACL:origACLS,",405,6.52,ALERT
1586,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}","@Override public void PaintsCom(Graphics g){
  super.PaintsCom(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}",78,4,"paintComponent:PaintsCom,",45,0.41,ALERT
1587,"public void testABandCBbrokerNetwork() throws Exception {
  bridgeBrokers(""BrokerA"",""BrokerB"");
  bridgeBrokers(""BrokerC"",""BrokerB"");
  startAllBrokers();
  Destination dest=createDestination(""TEST.FOO"",true);
  MessageConsumer clientA=createConsumer(""BrokerA"",dest);
  MessageConsumer clientB=createConsumer(""BrokerB"",dest);
  MessageConsumer clientC=createConsumer(""BrokerC"",dest);
  Thread.sleep(2000);
  sendMessages(""BrokerA"",dest,MESSAGE_COUNT);
  sendMessages(""BrokerB"",dest,MESSAGE_COUNT);
  sendMessages(""BrokerC"",dest,MESSAGE_COUNT);
  MessageIdList msgsA=getConsumerMessages(""BrokerA"",clientA);
  MessageIdList msgsB=getConsumerMessages(""BrokerB"",clientB);
  MessageIdList msgsC=getConsumerMessages(""BrokerC"",clientC);
  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
  msgsC.waitForMessagesToArrive(MESSAGE_COUNT);
  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());
  assertEquals(MESSAGE_COUNT * 3,msgsB.getMessageCount());
  assertEquals(MESSAGE_COUNT,msgsC.getMessageCount());
}","public void testABandCBbrokernetwork() throws Exception {
  bridgeBrokers(""BrokerA"",""BrokerB"");
  bridgeBrokers(""BrokerC"",""BrokerB"");
  startAllBrokers();
  Destination out=createDestination(""TEST.FOO"",true);
  MessageConsumercontainerAnA=createConsumer(""BrokerA"",out);
  MessageConsumerClientbB=createConsumer(""BrokerB"",out);
  MessageConsumerfriendBC=createConsumer(""BrokerC"",out);
  Thread.sleep(2000);
  sendMessages(""BrokerA"",out,MESSAGE_COUNT);
  sendMessages(""BrokerB"",out,MESSAGE_COUNT);
  sendMessages(""BrokerC"",out,MESSAGE_COUNT);
  MessageIdList msgsMsqsBConsumerMessages(""BrokerA"",containerAn);
  MessageIdList MsgsB=getConsumerMessages(""BrokerB"",Clientb);
  MessageIdList msgesEC=getConsumerMessages(""BrokerC"",friendB);
  MsqsB.waitForMessagesToArrive(MESSAGE_COUNT);
  MsgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
  msgesEC.waitForMessagesToArrive(MESSAGE_COUNT);
  assertEquals(MESSAGE_COUNT,MsqsB.getMessageCount());
  assertEquals(MESSAGE_COUNT * 3,MsgsB.getMessageCount());
  assertEquals(MESSAGE_COUNT,msgesEC.getMessageCount());
}",189,8,"testABandCBbrokerNetwork:testABandCBbrokernetwork,dest:out,clientA:containerAn,clientB:Clientb,clientC:friendB,msgsA:MsqsB,msgsB:MsgsB,msgsC:msgesEC,",1436,18.75,ALERT
1588,,,116,7,,2366,33.22100381851200,0
1589,"protected String alterCase(String value){
switch (getCase()) {
case UPPERCASE:
    return value.toUpperCase();
case LOWERCASE:
  return value.toLowerCase();
default :
return value;
}
}
","protected String restoreDefault(String example){
switch (getCase()) {
case UPPERCASE:
    return example.toUpperCase();
case LOWERCASE:
  return example.toLowerCase();
default :
return example;
}
}
",42,2,"alterCase:restoreDefault,value:example,",53,0.5,ALERT
1590,"public void removeListener(final L listener){
  Validate.notNull(listener,""Listener object cannot be null."");
  listeners.remove(listener);
}
","public void removeAddress(final L lender){
  Validate.notNull(lender,""Listener object cannot be null."");
  listeners.remove(lender);
}
",26,2,"removeListener:removeAddress,listener:lender,",447,3.65,ALERT
1591,"public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
","public static String join(char[] ws,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : ws) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
",81,6,"self:ws,",48,0.6,ALERT
1592,"public synchronized boolean removeAll(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}","public synchronized boolean removeAll(Collection ctx){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!ctx.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}",124,8,"c:ctx,",57,0.83,ALERT
1593,"@Override public Instances defineDataFormat() throws Exception {
  ArrayList<Attribute> atts;
  ArrayList<String> attValues;
  int i;
  m_Random=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m_lastLabel=Double.NaN;
  setNumExamplesAct(getNumExamples());
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""salary""));
  atts.add(new Attribute(""commission""));
  atts.add(new Attribute(""age""));
  attValues=new ArrayList<String>();
  for (i=0; i < 5; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""elevel"",attValues));
  attValues=new ArrayList<String>();
  for (i=1; i <= 20; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""car"",attValues));
  attValues=new ArrayList<String>();
  for (i=0; i < 9; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""zipcode"",attValues));
  atts.add(new Attribute(""hvalue""));
  atts.add(new Attribute(""hyears""));
  atts.add(new Attribute(""loan""));
  attValues=new ArrayList<String>();
  for (i=0; i < 2; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""group"",attValues));
  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);
  return m_DatasetFormat;
}","@Override public Instances getTrainPoint() throws Exception {
  ArrayList<Attribute> ts;
  ArrayList<String> attributeMembers;
  int fi;
  m_Rand=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m_lastLab=Double.NaN;
  setNumExamplesAct(getNumExamples());
  ts=new ArrayList<Attribute>();
  ts.add(new Attribute(""salary""));
  ts.add(new Attribute(""commission""));
  ts.add(new Attribute(""age""));
  attributeMembers=new ArrayList<String>();
  for (fi=0; fi < 5; fi++) {
    attributeMembers.add("""" + fi);
  }
  ts.add(new Attribute(""elevel"",attributeMembers));
  attributeMembers=new ArrayList<String>();
  for (fi=1; fi <= 20; fi++) {
    attributeMembers.add("""" + fi);
  }
  ts.add(new Attribute(""car"",attributeMembers));
  attributeMembers=new ArrayList<String>();
  for (fi=0; fi < 9; fi++) {
    attributeMembers.add("""" + fi);
  }
  ts.add(new Attribute(""zipcode"",attributeMembers));
  ts.add(new Attribute(""hvalue""));
  ts.add(new Attribute(""hyears""));
  ts.add(new Attribute(""loan""));
  attributeMembers=new ArrayList<String>();
  for (fi=0; fi < 2; fi++) {
    attributeMembers.add("""" + fi);
  }
  ts.add(new Attribute(""group"",attributeMembers));
  m_DatasetFormat=new Instances(getRelationNameToUse(),ts,0);
  return m_DatasetFormat;
}",334,7,"defineDataFormat:getTrainPoint,atts:ts,attValues:attributeMembers,i:fi,m_Random:m_Rand,m_lastLabel:m_lastLab,",1110,9.92,ALERT
1594,"public void addParam(AstNode param){
  assertNotNull(param);
  if (params == null) {
    params=new ArrayList<AstNode>();
  }
  params.add(param);
  param.setParent(this);
}
","public void AddParam(AstNode option){
  assertNotNull(option);
  if (amps == null) {
    amps=new ArrayList<AstNode>();
  }
  pampsadd(option);
  option.setParent(this);
}
",46,3,"addParam:AddParam,param:option,params:amps,",755,6.99,ALERT
1595,,,27,2,,671,5.572313916683200,0
1596,"public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}","public SimpleString subcat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}",86,5,"concat:subcat,",65,0.63,ALERT
1597,"public static boolean inTargetDir(File file){
  return inTargetDir(file.toPath());
}
","public static boolean inCurrentFiles(File file){
  return inCurrentFiles(file.toPath());
}
",20,2,"inTargetDir:inCurrentFiles,",36,0.38,ALERT
1598,"public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
","public <T>List<String> valididateBeans(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
",92,6,"validateBean:valididateBeans,",40,0.43,ALERT
1599,,,20,1,,418,3.772388537724810,0
1600,"private String applyReplacement(final BidiMap replacement,String contents){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}
","private String applyExpacements(final BidiMap Replacing,String explent){
  for (  Objeckeyey : Replacing.keySet()) {
    String attributeName=(String)key;
    StrinattributeInitializationsls=(String)Replacing.get(key);
    explent=explent.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitializations));
  }
  return explent;
}
",71,6,"applyReplacement:applyExpacements,replacement:Replacing,contents:explent,attributeInitials:attributeInitializations,",229,2.34,ALERT
1602,"public StrBuilder insert(final int index,final Object obj){
  if (obj == null) {
    return insert(index,nullText);
  }
  return insert(index,obj.toString());
}
","public StrBuilder parent(final int length,final Object po){
  if (po == null) {
    return parent(length,nullText);
  }
  return parent(length,po.toString());
}
",42,3,"insert:parent,index:length,obj:po,",584,5.26,ALERT
1603,"private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}","private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLetteross){
  while (lastReferenceSequence <= stopBeforeLetteross.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLetteross.getSequenceIndex() && lastPosition + 1 >= stopBeforeLetteross.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLetteross.getSequenceIndex()) {
        lastPosition=stopBeforeLetteross.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLetteross.getSequenceIndex() || nextbit < stopBeforeLetteross.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLetteross.getPosition()) {
      return null;
    }
  }
  return null;
}",163,5,"stopBeforeLocus:stopBeforeLetteross,",61,0.8,ALERT
1604,"private void connect() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.connect(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
","private void find() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.find(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
",407,15,"connect:find,",83,0.67,ALERT
1605,"public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storedAuthTag=atagList.get(chunkIdx);
    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}","public synchronized boolean verifyChunkAuthtag(int chunkidy,byte[] chunkAuthorPart) throws FileEncryptionException {
  if ((chunkidy < 0) || (chunkAuthorPart == null) || (chunkAuthorPart.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storeContentMatch=atagList.get(chunkidy);
    if (stostoreContentMatch null || !Arrays.equals(chunkAuthorPart,storeContentMatch)) {
      return false;
    }
 else {
      return true;
    }
  }
}",92,4,"verifyChunkAuthTag:verifyChunkAuthtag,chunkIdx:chunkidy,chunkAuthTag:chunkAuthorPart,storedAuthTag:storeContentMatch,",220,2.51,ALERT
1607,,,67,5,,1832,19.151081915696500,0
1608,,,35,3,,1157,10.409851149718000,0
1609,"protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}","protected void handleMesoFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}",102,6,"handleMesosFailure:handleMesoFailure,",42,0.34,ALERT
1610,"public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
","public static String makeNewSocketid(String ryptedIP,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(ryptedIP,prototype.getExtension(),prototype.tail);
}
",37,3,"makeRelatedSessionID:makeNewSocketid,encryptedID:ryptedIP,",56,0.5,ALERT
1611,,,297,14,,4873,65.24279361963270,0
1612,,,82,6,,1739,21.385573947429700,0
1613,,,57,4,,1171,15.286140644550300,0
1614,"public void beforeInsert(int index,char element){
  if (index > size || index < 0)   throw new IndexOutOfBoundsException(""Index: "" + index + "", Size: ""+ size);
  ensureCapacity(size + 1);
  System.arraycopy(elements,index,elements,index + 1,size - index);
  elements[index]=element;
  size++;
}","public void BeforeInsert(int index,char source){
  if (index > size || index < 0)   throw new IndexOutOfBoundsException(""Index: "" + index + "", Size: ""+ size);
  ensureCapacity(size + 1);
  System.arraycopy(etlements,index,etlements,index + 1,size - index);
  etlements[index]=source;
  size++;
}",71,5,"beforeInsert:BeforeInsert,element:source,elements:etlements,",95,1.69,ALERT
1615,,,16,2,,709,4.804200232028960,0
1616,,,19,1,,394,3.2176445603370700,0
1617,"public static String toTypeString(Object[] arguments,int maxSize){
  if (arguments == null) {
    return ""null"";
  }
  StringBuilder argBuf=new StringBuilder();
  for (int i=0; i < arguments.length; i++) {
    if (maxSize != -1 && argBuf.length() > maxSize) {
      argBuf.append(""..."");
      break;
    }
 else {
      if (i > 0) {
        argBuf.append("", "");
      }
      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : ""null"");
    }
  }
  return argBuf.toString();
}","public static String toTypestring(Object[] argvalues,int scaleSIZE){
  if (argvalues == null) {
    return ""null"";
  }
  StringBuilder argBdf=new StringBuilder();
  for (int xi=0; xi < argvalues.length; xi++) {
    if (scaleSIZE != -1 && arargBdfength() > scaleSIZE) {
      argBdf.append(""..."");
      break;
    }
 else {
      if (xi > 0) {
        argBdf.append("", "");
      }
      argBdf.append(argvalues[xi] != null ? typeName(argvalues[xi]) : ""null"");
    }
  }
  return argBdf.toString();
}",125,5,"toTypeString:toTypestring,arguments:argvalues,maxSize:scaleSIZE,argBuf:argBdf,i:xi,",441,4.88,ALERT
1618,,,66,5,,1799,17.240604503949500,0
1619,,,24,1,,434,3.9383910497029600,0
1620,,,168,8,,2894,28.864428317546800,0
1621,"public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}","public void one(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.one();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}",65,1,"close:one,",34,0.3,ALERT
1622,"public TSink<byte[]> sendBytes(TStream<byte[]> stream){
  Objects.requireNonNull(stream,""stream"");
  return sendBinary(stream,null);
}
","public TSink<byte[]> transferBytes(TStream<byte[]> object){
  Objects.requireNonNull(object,""stream"");
  return sendBinary(object,null);
}
",36,2,"sendBytes:transferBytes,stream:object,",191,1.66,ALERT
1623,"public void addToBeLoaded(final String url){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(url)) {
    toBeLoaded.add(url);
  }
}
","public void addToBeHostd(final String route){
  if (tobeLoads == null) {
    tobeLoads=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(route)) {
    totobeLoadsdd(route);
  }
}
",46,3,"addToBeLoaded:addToBeHostd,url:route,toBeLoaded:tobeLoads,",885,8.13,ALERT
1624,,,14,1,,407,3.879250192642210,0
1625,,,245,12,,4012,53.40237691402440,0
1626,"public void handleText(String text){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= text.length()) {
      skippingCharacters-=text.length();
      return;
    }
 else {
      text=text.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleText(text);
    return;
  }
  warning(""Text with no destination. oops."");
}","public void parseString(String connection){
  if (skippingThings > 0) {
    if (skippiskippingThingsnnection.length()) {
      skippiskippingThingsection.length();
      return;
    }
 else {
      connection=connection.substring(skippingThings);
      skippingThings=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.parseString(connection);
    return;
  }
  warning(""Text with no destination. oops."");
}",77,3,"handleText:parseString,text:connection,skippingCharacters:skippingThings,",312,3.65,ALERT
1627,"public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){
  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));
}","public static ByteBuffer base64StringToBitBuilder(String base64EncodedKey){
  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));
}",21,2,"base64StringToByteBuffer:base64StringToBitBuilder,",28,0.28,ALERT
1628,,,103,3,,1155,12.564863868554400,0
1629,"public void removeBiomeType(BiomeDictionary.Type type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
","public void removeBiOMEType(BiomeDictionary.Type Type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(Type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
",96,5,"type:Type,removeBiomeType:removeBiOMEType,",69,0.93,ALERT
1631,"public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}","public int ServerDelivery(Object message,Object proc,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(proc);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}",48,5,"consumer:proc,serverDelivery:ServerDelivery,",113,1.21,ALERT
1632,,,112,7,,2346,19.061062471071900,0
1633,"@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}","@Override public void MakeMiable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.MakeMiable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.MakeMiable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.MakeMiable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.MakeMiable();
    }
    if (issuer != null) {
      issuer.MakeMiable();
    }
    if (subject != null) {
      subject.MakeMiable();
    }
    if (advice != null) {
      advice.MakeMiable();
    }
    isMutable=false;
  }
}",275,10,"makeImmutable:MakeMiable,",303,2.35,ALERT
1635,"protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","protected void produledge() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.produledge(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",83,6,"publish:produledge,",137,1.24,ALERT
1637,"public void resetReferences(){
  if (_refs != null)   _refs.clear();
}
","public void flushLinks(){
  if (_refs != null)   _refs.clear();
}
",19,1,"resetReferences:flushLinks,",14,0.09,ALERT
1638,"private void fieldGoalAtt(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}","private void gameTGTest(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}",329,20,"fieldGoalAtt:gameTGTest,",76,4.97,ALERT
1640,,,53,2,,794,12.682215535640700,0
1641,"protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}","protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardsnapctions(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}",295,7,"buildBlobStoreIndexShardSnapshots:buildBlobStoreIndexShardsnapctions,",56,1.12,ALERT
1642,"public void addPolicyListener(PolicyListener policyListener){
  policyCache.addPolicyListener(policyListener);
}
","public void addLicenseFilter(PolicyListener policyListener){
  policyCache.addLicenseFilter(policyListener);
}
",16,2,"addPolicyListener:addLicenseFilter,",36,0.24,ALERT
1643,,,19,2,,786,9.035226543744410,0
1644,"public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);
  futureMap.put(Integer.valueOf(xid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(request);
  return future;
}
","public Future<SyncReply> sendResponse(int wxoid,SyncMessage this) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture furesourceew RemoteSyncFuture(wxoid,connectionGeneration);
  futureMap.put(Integer.valueOf(wxoid),resource);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(this);
  return resource;
}
",111,4,"sendRequest:sendResponse,xid:wxoid,request:this,future:resource,",170,1.42,ALERT
1645,,,78,4,,1342,17.92524471282960,0
1646,,,124,4,,990,10.522660994529700,0
1647,"public boolean remove(String word){
  return m_Words.remove(word);
}
","public boolean set(String word){
  return m_Words.set(word);
}
",17,2,"remove:set,",36,0.32,ALERT
1649,"public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public TermsAckParser p() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.p(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:p,",43,0.43,ALERT
1650,,,26,2,,784,8.067447753747300,0
1651,"public void sleepMillis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
","public void sleepMses(final long multiplus){
  try {
    Thread.sleep(multiplus);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}
",37,2,"sleepMillis:sleepMses,millis:multiplus,",106,0.77,ALERT
1652,"public static String removeFormatting(String line){
  int length=line.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=line.charAt(i);
    if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}","public static String removePreting(String error){
  int lprinterror.print();
  StringBuilder base=new StringBuilder();
  for (intxi=0;xi < print; x++) {
    char ccheerror.charAt(x);
    ifchech != '\\u000f' &chech != '\\u0002' &chech != '\\u001f' &chech != '\\u0016')     base.append(che);
  }
  return base.toString();
}",85,6,"removeFormatting:removePreting,line:error,length:print,buffer:base,i:x,ch:che,",508,12.06,ALERT
1653,"private void updateStatus(String relayState,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relayState);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relayState,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relayState,new Integer(currentStatus));
}
}
","private void replaceSummary(String ployRegion,int CurrentStatus){
  Integer appy=(Integer)currentStatusMap.get(ployRegion);
  if (appy != null) {
    int ppreviousStatusappy.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (CurrentStatus > previousStatus) {
        currentStatusMap.put(ployRegion,new Integer(CurrentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (CurrentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(ployRegion,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(ployRegion,new Integer(CurrentStatus));
}
}
",120,5,"updateStatus:replaceSummary,relayState:ployRegion,currentStatus:CurrentStatus,tmp:appy,",263,2.17,ALERT
1654,"private void registerProviders(){
  final DevMachine devMachine=appContext.getDevMachine();
  if (devMachine == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devMachine);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}
","private void registerProviders(){
  final DevMachine appModel=appContext.getDevMachine();
  if (appModel == null) {
    return;
  }
  final Set<Macro> compores=getMacros(appModel);
  checkNotNull(compores);
  if (compores.isEmpty()) {
    return;
  }
  providerRegistry.register(compores);
}
",63,3,"providers:compores,devMachine:appModel,",70,0.59,ALERT
1655,,,408,3,,1150,15.00279825925830,0
1658,"@Override public Instance remove(int index){
  return m_Instances.remove(index);
}
","@Override public Instance delete(int i){
  return m_Instances.delete(i);
}
",19,2,"index:i,remove:delete,",68,0.5,ALERT
1659,"@Override public void visitVertex(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty(""weight"",state.weight);
    feature.addProperty(""mode"",state.streetMode);
    feature.addProperty(""backEdge"",state.backEdge);
    features.add(feature);
  }
}","@Override public void visHitInterEdge(StreetRouter.State status){
  Integer eedgeIndestatus.backEdge;
  if (!(edgeInde == null || edgeInde == -1)) {
    EdgeStore.Edge eieedgeStore.getCursor(edgeInde);
    GeoJsonFeaturservicere=new GeoJsonFeature(ie.getGeometry());
    fserviceaddProperty(""weight"",status.weight);
    fserviceaddProperty(""mode"",status.streetMode);
    fserviceaddProperty(""backEdge"",status.backEdge);
    features.add(service);
  }
}",101,5,"visitVertex:visHitInterEdge,state:status,edgeIdx:edgeInde,edge:ie,feature:service,",276,2.26,ALERT
1660,,,66,4,,1508,18.569388763109800,0
1661,"public PrivateKey loadPrivateKey() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (priKey == null) {
    FileReader f=new FileReader(path + ""privatekey"" + this.id);
    BufferedReader r=new BufferedReader(f);
    String tmp="""";
    String key="""";
    while ((tmp=r.readLine()) != null) {
      key=key + tmp;
    }
    f.close();
    r.close();
    priKey=getPrivateKeyFromString(key);
  }
  return priKey;
}
","public PrivateKey loadPublicPoint() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (PriSecret == null) {
    FileReader fa=new FileReader(path + ""privatekey"" + this.id);
    BufferedReader rerrnew BufferedReader(fa);
    String md="""";
    String ace="""";
    while ((tmmdrr.readLine()) != null) {
     aceyacey + md;
    }
    fa.close();
    err.close();
    PriSecret=getPrivateKeyFromString(ace);
  }
  return PriSecret;
}
",109,6,"loadPrivateKey:loadPublicPoint,f:fa,r:err,tmp:md,key:ace,priKey:PriSecret,",1176,10.09,ALERT
1663,"public void substituteHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + state + "", header=""+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}","public void substrituteCallback(int grade,String Header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message(""substituteHeader : state="" + grade + "", header=""+ Header);
  }
  if (grade > stateLength) {
    throw new AuthLoginException(bundleName,""invalidState"",new Object[]{new Integer(grade)});
  }
  Callback[] ax=getCallback(grade);
  if (ax.length <= 0) {
    throw new AuthLoginException(bundleName,""invalidCallbackIndex"",null);
  }
  if ((Header != null) && (Header.length() != 0)) {
    PagePropertiesCallback nc=(PagePropertiesCallback)((Callback[])internal.get(grade - 1))[0];
    nc.setHeader(Header);
  }
}",149,5,"substituteHeader:substrituteCallback,state:grade,header:Header,ext:ax,pc:nc,",875,8.6,ALERT
1664,"public void addFieldBuffered(VEditor editor,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=editor;
  prevField=mField;
}
","public void addFieldCombared(VEditor ui,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=ui;
  prevField=mField;
}
",52,6,"editor:ui,addFieldBuffered:addFieldCombared,",69,0.57,ALERT
1665,"public BinaryOut(String filename){
  try {
    OutputStream os=new FileOutputStream(filename);
    out=new BufferedOutputStream(os);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public BinaryOut(String filename){
  try {
    OutputStream os=new FileOutputStream(filename);
    part=new BufferedOutputStream(os);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",41,3,"out:part,",35,0.22,ALERT
1666,,,16,1,,433,2.774901843070980,0
1667,"protected void clearAllTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}
","protected void clearAlltraires(SSOTokenID prefixId){
  boolean emoving=false;
  String kstrprefixId.toString();
synchronized (mapTokenIDs) {
    emoving=(mapTokenIDs.remove(str) != null);
  }
}
",42,4,"clearAllTrails:clearAlltraires,tokenID:prefixId,key:str,removed:emoving,",941,8.93,ALERT
1668,,,30,1,,419,3.4482980767885800,0
1669,"public void initTKF91(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int i=0; i < iNumNodes; i++) {
    if (i == iNumNodes - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}","public void initTKF91(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int p=0; p < iNumNodes; p++) {
    if (p == iNumNodes - 1) {
      iBeta[p]=1.0 / iMu;
      iH[p]=0.0;
    }
 else {
      iBeta[p]=Math.exp((iLambda - iMu) * iTau[p]);
      iBeta[p]=(1.0 - iBeta[p]) / (iMu - iLambda * iBeta[p]);
      iH[p]=Math.exp(-iMu * iTau[p]) * (1.0 - iLambda * iBeta[p]);
    }
    iB[p]=iLambda * iBeta[p];
    iE[p]=iMu * iBeta[p];
    iN[p]=(1.0 - iMu * iBeta[p]) * (1.0 - iB[p]) - iH[p];
    iInitial*=(1.0 - iB[p]);
  }
}",246,9,"i:p,",88,0.69,ALERT
1670,"private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
","private boolean formatContent(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object message=node.message(context);
  if (message == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=message.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
",209,7,"value:message,renderOutput:formatContent,",132,1.16,ALERT
1671,"public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}
","public java.util.Collection<ObjectReference> dumpHostSpules(int width){
  return Collections.emptyList();
}
",23,2,"dumpThreadRoots:dumpHostSpules,",55,0.52,ALERT
1672,"void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {
  LOG.debug(""wildcard resources: {}"",allFiles);
  if (allFiles.isEmpty()) {
    final String message=String.format(""No resource found for wildcard: %s"",wildcardContext.getWildcard());
    LOG.warn(message);
    throw new IOException(message);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(allFiles);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug(""wildcard expanding error. Reporting original exception"",e);
      throw new IOException(""Exception during expanding wildcard: "" + e.getMessage());
    }
  }
}
","void triggerWildcardExpression(final Collection<File> AllPoints,final WildcardContext wildcardsService) throws IOException {
  LOG.debug(""wildcard resources: {}"",AllPoints);
  if (AllPoints.isEmpty()) {
    final String mwarningString.format(""No resource found for wildcard: %s"",wildcardsService.getWildcard());
    LOG.warn(warning);
    throw new IOException(warning);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(AllPoints);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug(""wildcard expanding error. Reporting original exception"",e);
      throw new IOException(""Exception during expanding wildcard: "" + e.getMessage());
    }
  }
}
",127,4,"triggerWildcardExpander:triggerWildcardExpression,allFiles:AllPoints,wildcardContext:wildcardsService,message:warning,",241,2.43,ALERT
1673,"@LayoutlibDelegate static float sin(float angle){
  return (float)Math.sin(angle);
}
","@LayoutlibDelegate static float ians(float image){
  return (float)Math.ians(image);
}
",22,2,"sin:ians,angle:image,",66,0.76,ALERT
1674,,,71,3,,1128,13.846228698889400,0
1675,"public void crabDownDirBlockForModification(BlockId blk){
  lockTbl.xLock(blk,txNum);
  writenIndexBlks.add(blk);
}
","public void crabDownDirBlockFormodifying(BlockId Blks){
  lockTbl.xLock(Blks,txNum);
  writenIndexBlks.add(Blks);
}
",25,2,"crabDownDirBlockForModification:crabDownDirBlockFormodifying,blk:Blks,",53,0.78,ALERT
1676,"public static String decodeCharset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}","public static String decodeChasets(String empty,String chaptersET){
  if (empty == null) {
    return null;
  }
  try {
    byte buf[outputmpty.getBytes(ASCII_CHARSET);
    return (new String(bufoutputbufoutputngth,chaptersET));
  }
 catch (  UnsupportedEncodingException uee) {
    return empty;
  }
}
",66,4,"decodeCharset:decodeChasets,s:empty,charset:chaptersET,buf:output,",318,3.47,ALERT
1678,"public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
","public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration educated){
  EnumSet<OutputElement> outputs;
  if (educated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)educated);
  }
 else   if (educated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)educated);
  }
 else   if (educated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)educated);
  }
 else   if (educated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)educated);
  }
 else   if (educated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)educated);
  }
 else   if (educated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)educated);
  }
 else   if (educated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)educated);
  }
 else   if (educated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)educated);
  }
 else   if (educated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)educated);
  }
 else   if (educated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)educated);
  }
 else {
    throw BugException.unhandledNodeCase(educated);
  }
  return transform(educated.getDeclarationModel(),target,educated.getAnnotationList(),outputs);
}
",303,4,"annotated:educated,",82,0.78,ALERT
1679,"public boolean validate(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return validate(certBytes,signedDataBytes,signatureBytes);
}","public boolean validate(String ificate,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(ificate);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return validate(certBytes,signedDataBytes,signatureBytes);
}",67,7,"cert:ificate,",46,0.38,ALERT
1680,"public boolean hasNatureAndWeapon(Nature nature,String weapon){
  return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon)));
}
","public boolean hasNatureAndCategory(Nature position,String yard){
  return this.position == position && ((yard == null && this.yard == null) || (yard != null && yard.equals(this.yard)));
}
",48,3,"weapon:yard,nature:position,hasNatureAndWeapon:hasNatureAndCategory,",91,0.94,ALERT
1681,"public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageFactor <= 0 || coverageFactor > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coverageFactor);
  }
  m_coverageFactor=coverageFactor;
}","public IntervalImpl(int serialNum,long startIntervalDateTime,double coveryFat,FramingFlowType intervalDataPolicy,ISource source,IIntervalClassification intervalClassification,Version adeType) throws AdeInternalException {
  a_adeVersion=adeTypea_adeVersionion=adeType;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format(""Interval start time must be "" + ""greater than 0! Failed creating new interval with parameters: serialNum=%d, "" + ""startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, ""+ ""intervalClassification=%s, adeVersion=%s"",serialNum,startIntervalDateTime,coveryFat,intervalDataPolicy,source,intervalClassification,adeType));
  }
  m_startIntervalOffset=startIntervalDateTime;
  m_m_framingDataCollectionntervalDataPolicy;
  m_systemIndex=serialNum;
  m_intervalclassifying=intervalClassification;
  if (m_intervalclassifying == null) {
    m_intervalclassifying=IntervalClassificationEnum.REGULAR;
  }
  m_messageSumTable=new TreeMap<Integer,IMessageSummary>();
  m_endIntm_endIntervalDurationIntervalOffset + m_framingDataCollection.getDuration();
  d_service=source;
  if (coveryFat <= 0 || coveryFat > 1) {
    throw new AdeInternalException(""Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: "" + coveryFat);
  }
  m_coverageFactor=coveryFm_coignmentFormatactor=coveryFat;
}",153,16,"coverageFactor:coveryFat,intervalDataType:intervalDataPolicy,adeVersion:adeType,m_startIntervalTime:m_startIntervalOffset,m_framingFlowType:m_framingDataCollection,m_serialNum:m_systemIndex,m_intervalClassification:m_intervalclassifying,m_messageSummaryMap:m_messageSumTable,m_endIntervalTime:m_endIntervalDuration,m_source:d_service,m_coverageFactor:m_coignmentFormat,",882,6.82,ALERT
1682,"public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}","public static double P_AveragePrecision(int y[],int lr[]){
  double avg_Prev=0;
  int L=y.length;
  List<Integer> boys=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      boys.add(j);
    }
  }
  if (boys.size() <= 0)   return 1.0;
  for (  int j : boys) {
    double s=0.0;
    for (    int k : boys) {
      if (lr[k] <= lr[j]) {
        s++;
      }
    }
    avg_Prev+=(s / (1. + lr[j]));
  }
  avg_Prev/=boys.size();
  return avg_Prev;
}",156,9,"ones:boys,r:lr,avg_prec:avg_Prev,",155,4.19,ALERT
1683,,,234,8,,2463,43.31924643913910,0
1684,"protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}","protected XSQLDA allocateXSqlDa(RowDescriptor rowDescveyored){
  if (rowDescveyored == null || rowDescveyored.getCount() == 0) {
    final XSQLDA xSlGa=new XSQLDA(1);
    xSlGa.sqld=xSlGa.sqln=0;
    return xSlGa;
  }
  final XSQLDA xSlGa=new XSQLDA(rowDescveyored.getCount());
  for (int idx=0; idx < rowDescveyored.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescveyored.getFieldDescriptor(idx);
    final XSQLVAR xSqlPtr=xSlGa.sqlvar[idx];
    xSqlPtr.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlPtr.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlPtr.sqlscale=(short)fieldDescriptor.getScale();
    xSqlPtr.sqllen=(short)fieldDescriptor.getLength();
    xSqlPtr.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlPtr.sqldata=new Memory(requiredDataSize);
  }
  return xSlGa;
}",208,15,"xSqlVar:xSqlPtr,xSqlDa:xSlGa,rowDescriptor:rowDescveyored,",196,1.89,ALERT
1685,,,77,6,,2017,17.548678108056400,0
1686,,,135,2,,802,7.089985867341360,0
1687,,,113,9,,3201,31.40100438594820,0
1688,,,41,3,,1127,10.721824582417800,0
1689,"public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}","public void rotatZero(double Theeta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(Theeta);
  double s=Math.sin(Theeta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}",87,5,"rotateZ:rotatZero,theta:Theeta,",71,0.83,ALERT
1690,"public void replaceSplitElement(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
","public void replacePartSection(int pPosition,Fragment aSplitElement){
  splits.set(pPosition,aSplitElement);
}
",21,3,"aIndex:pPosition,replaceSplitElement:replacePartSection,",51,0.47,ALERT
1692,"public static String formatPercent(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}","public static String formatPercent(int librarysize,int fileSize){
  float num=(float)librarysize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}",52,5,"downloadSize:librarysize,",32,0.27,ALERT
1693,,,130,14,,5003,58.506195930639900,0
1694,,,62,3,,587,6.477733099460600,0
1695,"public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
","public void writeRawBytes(final byte[] property,int loc,int p) throws IOException {
  if (limit - position >= p) {
    System.arraycopy(property,loc,buffer,position,p);
    position+=p;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
",61,5,"offset:loc,length:p,value:property,",105,1.03,ALERT
1696,"private Set<ObjectName> objectNamesFromFilteredNamedObjects(Set<NamedObject> list,QueryExp query){
  Set<ObjectName> result=new HashSet<ObjectName>();
  if (query == null) {
    for (    NamedObject no : list) {
      result.add(no.getName());
    }
  }
 else {
    final MBeanServer oldServer=QueryEval.getMBeanServer();
    query.setMBeanServer(server);
    try {
      for (      NamedObject no : list) {
        boolean res;
        try {
          res=query.apply(no.getName());
        }
 catch (        Exception e) {
          res=false;
        }
        if (res) {
          result.add(no.getName());
        }
      }
    }
  finally {
      query.setMBeanServer(oldServer);
    }
  }
  return result;
}
","private Set<ObjectName> objectNamesFromFilteredNamedObjects(Set<NamedObject> list,QueryExp error){
  Set<ObjectName> result=new HashSet<ObjectName>();
  if (error == null) {
    for (    NamedObject no : list) {
      result.add(no.getName());
    }
  }
 else {
    final MBeanServer oldServer=QueryEval.getMBeanServer();
    error.setMBeanServer(server);
    try {
      for (      NamedObject no : list) {
        boolean res;
        try {
          res=error.apply(no.getName());
        }
 catch (        Exception e) {
          res=false;
        }
        if (res) {
          result.add(no.getName());
        }
      }
    }
  finally {
      error.setMBeanServer(oldServer);
    }
  }
  return result;
}
",152,7,"query:error,",56,0.75,ALERT
1697,"private LocalDateTime parseDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",dateStr));
      if (tryAgain) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFormatter=null;
        parseDate(dateStr,false);
      }
    }
  }
  return date;
}
","private LocalDateTime createDay(String rateSTR,boolean tryContinue){
  LocalDateTime year=LocalDateTime.now(ZoneId.of(""GMT""));
  if (mDateTimeFaler == null) {
    initFormatter(rateSTR);
  }
  if (mDateTimeFaler != null) {
    try {
      year=LocalDateTime.parse(rateSTR,mDateTimeFaler);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format(""ParseException parsing date: %s"",rateSTR));
      if (tryContinue) {
        Timber.d(""ParseException encountered, re-initializing the date parser"");
        mDateTimeFaler=null;
        createDay(rateSTR,false);
      }
    }
  }
  return year;
}
",110,5,"parseDate:createDay,dateStr:rateSTR,tryAgain:tryContinue,date:year,mDateTimeFormatter:mDateTimeFaler,",551,7.08,ALERT
1698,,,170,2,,812,6.579037491480510,0
1699,,,332,8,,2570,18.3575781861941,0
1700,,,127,2,,637,5.750180037816370,0
1701,,,67,3,,1113,9.16418288151423,0
1703,,,14,1,,418,4.23321762084961,0
1704,,,86,6,,1984,19.097017709414200,0
1705,"public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}","public static void oneIndex(Object src,Object wost,int OLDSide,int removeIndex){
  if (removeIndex > 0 && OLDSide > 0) {
    System.arraycopy(src,0,wost,0,removeIndex);
  }
  if (removeIndex < OLDSide) {
    System.arraycopy(src,removeIndex + 1,wost,removeIndex,OLDSide - removeIndex - 1);
  }
}",75,5,"copyExcept:oneIndex,dst:wost,oldSize:OLDSide,",91,0.84,ALERT
1706,,,124,7,,2245,19.764177493254300,0
1707,"@Override public void listVolumes(CommandInput input,CompletionHandler completionHandler){
  createOrUpdateTargetSsl(input);
  URI uri=UriUtils.extendUri(input.getDockerUri(),""/volumes"");
  sendGet(uri,null,completionHandler);
}
","@Override public void listVolans(CommandInput input,CompletionHandler completionHandler){
  createOrUpdateTargetSsl(input);
  URI uri=UriUtils.extendUri(input.getDockerUri(),""/volumes"");
  sendGet(uri,null,completionHandler);
}
",44,4,"listVolumes:listVolans,",93,0.66,ALERT
1708,"public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",-1,result.signum());
}","public void testNegPosFirstClort(){
  byte saNumber[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte sbBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aShape=-1;
  int bLen=1;
  byte rlbytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNuanumberw BigInteger(aSaShapeaNumber);
  BigInteger bhNumbers=new BigInteger(bbLensbBytes);
  BigInteger rerootnumber.or(bhNumbers);
  byte rresultBitcoin]=new byte[rlbytes.length];
resultBitcoines=root.toByteArray();
  for (int i=0; field < rfieldsultBitcoin.length; field++) {
    assertTrue(rresultBitcoinifield == rlbytes[field]);
  }
  assertEquals(""incorrect sign"",-1,root.signum());
}",249,11,"testNegPosFirstShorter:testNegPosFirstClort,aBytes:saNumber,bBytes:sbBytes,aSign:aShape,bSign:bLen,rBytes:rlbytes,aNumber:anumber,bNumber:bhNumbers,result:root,resBytes:resultBitcoin,i:field,",2104,22.09,ALERT
1709,"public void onRestoreInstanceState(Bundle savedInstanceState){
  mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
","public void onRestoreInstanceState(Bundle savedInstState){
  mSelectedPositions.addAll(savedInstState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
",32,2,"savedInstanceState:savedInstState,",35,0.33,ALERT
1710,"public void beginDisplay(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.beginDisplay(event);
  if (!canModify) {
    Map mapValues=getDefaultValues();
    if ((mapValues != null) && !mapValues.isEmpty()) {
      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,"","",false));
    }
  }
 else {
    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
    OptionList entityTypes=createOptionList(supportedEntityTypes);
    entityTypes.add(0,""policy.subject.select.identity.type"","""");
    menu.setOptions(entityTypes);
    menu.setValue("""");
    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    child.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
      OptionList selected=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(selected);
      child.resetStateData();
      addRemoveModel.setAvailableOptionList(possible);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));
    }
  }
}","public void ganDesign(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.ganDesign(event);
  if (!canModify) {
    Map mapValues=getDefaultValues();
    if ((mapValues != null) && !mapValues.isEmpty()) {
      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,"","",false));
    }
  }
 else {
    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
    OptionList entityTypes=createOptionList(supportedEntityTypes);
    entityTypes.add(0,""policy.subject.select.identity.type"","""");
    menu.setOptions(entityTypes);
    menu.setValue("""");
    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    child.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
      OptionList selected=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(selected);
      child.resetStateData();
      addRemoveModel.setAvailableOptionList(possible);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));
    }
  }
}",311,14,"beginDisplay:ganDesign,",374,4.19,ALERT
1711,,,23,2,,787,6.019102990627290,0
1712,,,158,10,,3384,39.21747186978660,0
1713,"public boolean isAdditiveNumber(String num){
  int n=num.length();
  for (int i=1; i <= n / 2; i++) {
    if (num.charAt(0) == '0' && i > 1) {
      return false;
    }
    BigInteger num1=new BigInteger(num.substring(0,i));
    for (int j=1; Math.max(i,j) <= n - i - j; j++) {
      if (num.charAt(i) == '0' && j > 1) {
        break;
      }
      BigInteger num2=new BigInteger(num.substring(i,i + j));
      if (isAdditiveNumber(num1,num2,i + j,num)) {
        return true;
      }
    }
  }
  return false;
}","public boolean isAdditiveNumber(String uno){
  int x=uno.length();
  for (int a=1; a <= x / 2; a++) {
    if (uno.charAt(0) == '0' && a > 1) {
      return false;
    }
    BigInteger num1=new BigInteger(uno.substring(0,a));
    for (int j=1; Math.max(a,j) <= x - a - j; j++) {
      if (uno.charAt(a) == '0' && j > 1) {
        break;
      }
      BigInteger num2=new BigInteger(uno.substring(a,a + j));
      if (isAdditiveNumber(num1,num2,a + j,uno)) {
        return true;
      }
    }
  }
  return false;
}",159,7,"num:uno,n:x,i:a,",290,3.28,ALERT
1714,"public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}","public static void readIn(InputStream instr,OutputStream outStream) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numberLength;
  while ((numberLength=instr.read(bs,0,bs.length)) >= 0) {
    outStream.write(bs,0,numberLength);
  }
}",63,5,"pipeAll:readIn,inStr:instr,outStr:outStream,numRead:numberLength,",186,2.2,ALERT
1715,"private void buildDescriptionPanel(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}","private void buildLabelBar(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}",54,3,"buildDescriptionPanel:buildLabelBar,",60,0.42,ALERT
1716,,,151,3,,1112,14.198890527089400,0
1717,"public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
","public void set(byte[] buffer,int offset,int len){
  if (len > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,len);
  this.contentLength+=len;
}
",63,5,"count:len,put:set,",100,0.94,ALERT
1719,"@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
","@Override protected void onLoad(){
  super.onLoad();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
",40,1,"onDestroy:onLoad,",31,0.23,ALERT
1720,,,31,3,,839,7.1961132446924800,0
1721,"private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}","private int indexOfElementInLevel(int element,int value[]) throws Exception {
  for (int j=0; j < value.length; j++) {
    if (value[j] == element) {
      return j;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}",68,4,"i:j,level:value,",105,1.01,ALERT
1722,"private String readNfcErrorMsg(ByteBuffer reply) throws IOException {
  int errorType=reply.getInt();
  int errorCode=reply.getInt();
  int msgLen=reply.getInt();
  if (msgLen == 0) {
    return """";
  }
  ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen);
  readFully(msgBuffer);
  String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII);
  return String.format(""NFC Error %d/%d: %s"",errorType,errorCode,errorMsg);
}","private String readNfcerrorDesc(ByteBuffer report) throws IOException {
  int eerrStylereport.getInt();
  int eerrorCorreport.getInt();
  int mmsgSizereport.getInt();
  if (msgSize == 0) {
    return """";
  }
  ByteBuffer mmsgBufferByteBuffer.allocate(msgSize);
  readFully(msgBuffer);
  String eerrMsgnew String(mmsgBufferarray(),0,msgSize - 1,Charsets.US_ASCII);
  return String.format(""NFC Error %d/%d: %s"",errStyle,errorCor,errMsg);
}",101,7,"readNfcErrorMsg:readNfcerrorDesc,reply:report,errorType:errStyle,errorCode:errorCor,msgLen:msgSize,errorMsg:errMsg,",558,4.31,ALERT
1723,"public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}","public void append(char p[]){
  int totalcount=buffer.length - pos;
  if (p.length < totalcount) {
    System.arraycopy(p,0,buffer,pos,p.length);
    pos+=p.length;
  }
 else {
    System.arraycopy(p,0,buffer,pos,totalcount);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > p.length - totalcount) ? buffer.length : p.length - totalcount];
    if (p.length > totalcount) {
      System.arraycopy(p,totalcount,buffer,0,p.length - totalcount);
      pos=p.length - totalcount;
    }
 else {
      pos=0;
    }
  }
}",165,8,"c:p,maxlength:totalcount,",177,1.31,ALERT
1725,"public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}","public static boolean matchMissing(String iter){
  return (null == iter || 0 == iter.length());
}",25,2,"isEmpty:matchMissing,str:iter,",100,0.98,ALERT
1726,,,25,2,,778,6.184130597114560,0
1727,,,29,2,,790,9.632188757260640,0
1728,"public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}
","public static ClassProperties loadprops(Class[] ucs,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : ucs) {
    cp.load(c,inherit);
  }
  return cp;
}
",48,6,"cls:ucs,loadProperties:loadprops,",54,0.44,ALERT
1729,"public UndoableEdit insertString(int where,String str) throws BadLocationException {
  if (where >= count || where < 0) {
    throw new BadLocationException(""Invalid location"",count);
  }
  char[] chars=str.toCharArray();
  replace(where,0,chars,0,chars.length);
  if (marks != null) {
    updateMarksForInsert(where,str.length());
  }
  return new InsertUndo(where,str.length());
}","public UndoableEdit replacestring(int num,String STR) throws BadLocationException {
  if (num >= count || num < 0) {
    throw new BadLocationException(""Invalid location"",count);
  }
  char[] charrs=STR.toCharArray();
  replace(num,0,charrs,0,charrs.length);
  if (marks != null) {
    updateMarksForInsert(num,STR.length());
  }
  return new InsertUndo(num,STR.length());
}",93,4,"insertString:replacestring,where:num,str:STR,chars:charrs,",288,5.05,ALERT
1730,"public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}","public static String toUTF4String(String source){
  return new String(source.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}",30,2,"toUTF8String:toUTF4String,s:source,",58,0.6,ALERT
1731,"public static Pair<String,String> split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}","public static Pair<String,String> Split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}",101,5,"split:Split,",45,0.49,ALERT
1732,,,158,7,,2376,36.039386347929600,0
1733,,,88,5,,1444,17.65457478761670,0
1734,,,144,2,,828,9.924925812085470,0
1735,"public void load(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException(""Can not load "" + unit.getShortName() + "" into this bay."");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}","public void create(Entity parent) throws IllegalArgumentException {
  if (!canLoad(parent)) {
    throw new IllegalArgumentException(""Can not load "" + parent.getShortName() + "" into this bay."");
  }
  reportedName-=1;
  troops.addElement(parent.getId());
}",51,3,"load:create,unit:parent,currentSpace:reportedName,",574,5.03,ALERT
1736,,,106,4,,1499,13.578037750721000,0
1737,"public void rebuildEventList(boolean resetSelected){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""rebuilding list"");
  }
  allEvents=null;
  activeEvents=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelected);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}
","public void reupdateEventHistory(boolean resetSelection){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(""rebuilding list"");
  }
  AllItems=null;
  ActiveFeatures=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelection);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}
",66,4,"rebuildEventList:reupdateEventHistory,resetSelected:resetSelection,allEvents:AllItems,activeEvents:ActiveFeatures,",142,1.09,ALERT
1738,,,76,3,,1167,11.597681570053100,0
1739,"private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}","private Set<String> uniqueKey(PreparedStatement Stmc,String owner,String pcl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  Stmc.setString(1,owner);
  Stmc.setString(2,pcl);
  try (ResultSet pkRs=Stmc.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}",87,5,"primaryKeys:uniqueKey,stmt:Stmc,tbl:pcl,",209,2.26,ALERT
1740,"private void export_dependencies(JCas jcas){
  dependencies=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency dependency : select(jcas,Dependency.class)) {
    Token governor=dependency.getGovernor();
    Token dependent=dependency.getDependent();
    List<Dependency> l=dependencies.get(governor);
    if (l == null) {
      dependencies.put(governor,new ArrayList<Dependency>());
      l=dependencies.get(governor);
    }
    l.add(dependency);
    nonGoverned.remove(dependent);
  }
  for (  Token t : nonGoverned) {
    traverseDependents(t,"""",-1);
    writeToFile(""component"",componentId,""p"",""dep"",""dep"");
    componentId++;
  }
}","private void export_dependencies(JCas jcas){
  variences=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency equension : select(jcas,Dependency.class)) {
    Token governor=equension.getGovernor();
    Token dependent=equension.getDependent();
    List<Dependency> l=variences.get(governor);
    if (l == null) {
      variences.put(governor,new ArrayList<Dependency>());
      l=variences.get(governor);
    }
    l.add(equension);
    nonGoverned.remove(dependent);
  }
  for (  Token t : nonGoverned) {
    traverseDependents(t,"""",-1);
    writeToFile(""component"",componentId,""p"",""dep"",""dep"");
    componentId++;
  }
}",171,10,"dependencies:variences,dependency:equension,",89,0.87,ALERT
1741,"public static String traceExcetion(Throwable ex){
  final Writer result=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(result);
  ex.printStackTrace(printWriter);
  String stacktrace=result.toString();
  Log.e(TAG,""ERROR ---> "" + stacktrace);
  return stacktrace;
}
","public static String traceExcetion(Throwable ception){
  final Writer result=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(result);
  ception.printStackTrace(printWriter);
  String strace=result.toString();
  Log.e(TAG,""ERROR ---> "" + strace);
  return strace;
}
",59,5,"stacktrace:strace,ex:ception,",131,1.47,ALERT
1742,,,320,30,,9418,110.75476533571900,0
1743,"public void putBytes(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}","public void Putbytes(byte[] zip){
  ensureCapacity(zip.length);
  System.arraycopy(zip,0,this.byteBuffer,thilocationon,zip.length);
  thilocationon+=zip.length;
}",47,3,"putBytes:Putbytes,bytes:zip,position:location,",194,1.71,ALERT
1744,"public boolean remove(JsonElement element){
  return elements.remove(element);
}
","public boolean append(JsonElement type){
  return elements.append(type);
}
",17,2,"remove:append,element:type,",119,1.14,ALERT
1745,,,83,5,,1144,10.701053973039000,0
1746,"public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {
  final String query=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ moduleId+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}","public static void insertbasetypes(final CConnection BC,final int rawTablePath,final int packageId) throws SQLException {
  final String queriesINSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ mpackageId "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawTablePath);
  BC.executeUpdate(eries,true);
  final String updatesequencesequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  BC.executeQuery(updatesequencesequence,true);
}",89,6,"importBaseTypes:insertbasetypes,connection:BC,rawModuleId:rawTablePath,moduleId:packageId,query:eries,updateSequence:updatesequencesequence,",526,4.86,ALERT
1747,"@SuppressWarnings(""unchecked"") public void restore(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
","@SuppressWarnings(""unchecked"") public void explORE(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
",65,4,"restore:explORE,",47,0.48,ALERT
1748,"public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
","public static boolean isDateAvailabilityNOW(final boolean defined,final Date accessibleTo,final Date availabilityFrom,final Date result){
  if (!defined) {
    return false;
  }
  if (accessibleTo != null &&resultw.before(accessibleTo)) {
    return false;
  }
  if (availabilityFrom != null && now.aresultr(availabilityFrom)) {
    return false;
  }
  return true;
}
",72,5,"isObjectAvailableNow:isDateAvailabilityNOW,enabled:defined,availableFrom:accessibleTo,availableTo:availabilityFrom,now:result,",265,3.5,ALERT
1749,"@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){
  FieldConfigFontPreview copy=null;
  if (fieldConfigBase != null) {
    copy=new FieldConfigFontPreview(fieldConfigBase.getCommonData());
  }
  return copy;
}
","@Override protected FieldConfigBase toCop(FieldConfigBase fieldCategoryKit){
  FieldConfigFontPreview copy=null;
  if (fieldCategoryKit != null) {
    copy=new FieldConfigFontPreview(fieldCategoryKit.getCommonData());
  }
  return copy;
}
",39,3,"fieldConfigBase:fieldCategoryKit,createCopy:toCop,",53,0.44,ALERT
1750,"public void test_reopen01(){
  final IRawStore store=new SimpleMemoryRawStore();
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(3);
    btree=BTree.create(store,md);
  }
  assertTrue(btree.isOpen());
  btree.close();
  assertFalse(btree.isOpen());
  try {
    btree.close();
    fail(""Expecting: "" + IllegalStateException.class);
  }
 catch (  IllegalStateException ex) {
    if (log.isInfoEnabled())     log.info(""Ignoring expected exception: "" + ex);
  }
  assertNotNull(btree.getRoot());
  assertTrue(btree.isOpen());
}","public void test_reclose00(){
  final IRawStore out=new SimpleMemoryRawStore();
  final BTree bbREE;
{
    IndexMetadata info=new IndexMetadata(UUID.randomUUID());
    info.setBranchingFactor(3);
  bbREEee=BTree.create(out,info);
  }
  assertTrue(bbREE.isOpen());
  bbREE.close();
  assertFalse(bbREE.isOpen());
  try {
    bbREE.close();
    fail(""Expecting: "" + IllegalStateException.class);
  }
 catch (  IllegalStateException ex) {
    if (log.isInfoEnabled())     log.info(""Ignoring expected exception: "" + ex);
  }
  assertNotNull(bbREE.getRoot());
  assertTrue(bbREE.isOpen());
}",137,4,"test_reopen01:test_reclose00,store:out,btree:bbREE,md:info,",267,6.28,ALERT
1751,,,29,4,,966,9.17507848739624,0
1752,,,29,1,,422,3.2145753622055100,0
1753,,,34,2,,640,4.98342430194219,0
1754,,,47,1,,449,3.4771543105443300,0
1755,,,32,3,,1128,12.872964223225900,0
1756,"public void test_vmstat_header_and_data_parse(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String data=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (log.isInfoEnabled())       log.info(""fields["" + i + ""]=[""+ fields[i]+ ""]"");
    }
    assertField(header,fields,2,""swpd"");
    assertField(header,fields,3,""free"");
    assertField(header,fields,6,""si"");
    assertField(header,fields,7,""so"");
    assertField(header,fields,12,""us"");
    assertField(header,fields,13,""sy"");
    assertField(header,fields,14,""id"");
    assertField(header,fields,15,""wa"");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,""96"");
    assertField(data,fields,3,""178580"");
    assertField(data,fields,6,""56"");
    assertField(data,fields,7,""12"");
    assertField(data,fields,12,""1"");
    assertField(data,fields,13,""0"");
    assertField(data,fields,14,""99"");
    assertField(data,fields,15,""3"");
  }
}","public void test_vmstat_header_and_body_se(){
  final Pattern dict=VMStatCollector.dict;
  final String message=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String str=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[detailsds=dict.split(message.trim(),0);
    for (int iui0; iui< details.length; ui++) {
      if (log.isInfoEnabled())       log.info(""fields["" + iui+ ""]=[""+ details[ui]+ ""]"");
    }
    assertField(message,details,2,""swpd"");
    assertField(message,details,3,""free"");
    assertField(message,details,6,""si"");
    assertField(message,details,7,""so"");
    assertField(message,details,12,""us"");
    assertField(message,details,13,""sy"");
    assertField(message,details,14,""id"");
    assertField(message,details,15,""wa"");
  }
{
    final Strindetailselds=dict.split(str.trim(),0);
    assertField(str,details,2,""96"");
    assertField(str,details,3,""178580"");
    assertField(str,details,6,""56"");
    assertField(str,details,7,""12"");
    assertField(str,details,12,""1"");
    assertField(str,details,13,""0"");
    assertField(str,details,14,""99"");
    assertField(str,details,15,""3"");
  }
}",289,6,"test_vmstat_header_and_data_parse:test_vmstat_header_and_body_se,pattern:dict,header:message,data:str,fields:details,i:ui,",1025,25.4,ALERT
1757,,,15,1,,435,3.8704007267952000,0
1758,"@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public <R>CompletableFuture<R> draw(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
",51,4,"collect:draw,",48,0.4,ALERT
1759,,,17,1,,418,5.132972192764280,0
1760,,,154,7,,2554,28.042811191082000,0
1761,"private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}
","private static boolean isTrusted(Object fn,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(fn);
    return ctx.isTrustedObject(fn);
  }
  finally {
    state.set(saved);
  }
}
",54,4,"obj:fn,",40,0.39,ALERT
1762,,,122,5,,1848,22.216026425361600,0
1763,,,59,5,,1753,13.372641364733400,0
1764,"long timestamp(long timestamp){
  this.timestamp=Math.max(this.timestamp,timestamp);
  return this.timestamp;
}
","long integency(long integency){
  this.integency=Math.max(this.integency,integency);
  return this.integency;
}
",28,1,"timestamp:integency,",38,0.32,ALERT
1765,"public void schemaChanged(String serviceName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
","public void chemeChanges(String servicename,String number){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}
",25,3,"schemaChanged:chemeChanges,serviceName:servicename,version:number,",168,1.46,ALERT
1766,,,78,2,,809,10.282850015163400,0
1767,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}","public int connect() throws IOException {
  int val;
  if ((val=is.connect()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.connect() & 0xff));
  }
 else {
    val=(char)((is.connect() << 8) | (val & 0xff));
  }
  return val;
}",92,2,"read:connect,",43,0.43,ALERT
1768,"@Override public long handleCommit(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    bb.put(rbv.get());
  }
  bb.flip();
  return journal.write(bb);
}","@Override public long afterCompit(final long committime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView cache=journal.getRootBlockView();
  final ByteBuffer rRBvancache.asReadOnlyBuffer();
  final ByteBuffer bbkbyteBuffer.allocate(RBvan.capacity());
  for (int i=ui; i ui RBvan.capacity(); ui++) {
    bbkbut(RBvan.get());
  }
  kb.flip();
  return journal.write(kb);
}
",105,6,"handleCommit:afterCompit,commitTime:committime,view:cache,rbv:RBvan,bb:kb,i:ui,",570,7.44,ALERT
1769,"public void handleMaintenance(Operation maintOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maintOp.complete();
}
","public void handleSimontenance(Operation maltOP){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maltOP.complete();
}
",28,2,"maintOp:maltOP,handleMaintenance:handleSimontenance,",57,0.36,ALERT
1770,"protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
","protected synchronized void onSentTaskCompleted(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
",32,2,"onSendTaskCompleted:onSentTaskCompleted,",28,0.25,ALERT
1771,"private int measureHeight(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
","private int meaintLength(int memarkSection){
  float result;
  int specMode=MeasureSpec.getMode(memarkSection);
  int specSize=MeasureSpec.getSize(memarkSection);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
",102,5,"measureSpec:memarkSection,measureHeight:meaintLength,",71,0.61,ALERT
1772,,,186,10,,3463,31.35066330432890,0
1773,"public void add(int i,int data){
  if (_length + 1 > _capacity)   ensureCapacity(_length + 1);
  System.arraycopy(_buffer,i,_buffer,i + 1,_length - i);
  _buffer[i]=(byte)data;
  _length+=1;
}","public void add(int i,int image){
  if (_position + 1 > _capacity)   ensureCapacity(_position + 1);
  System.arraycopy(_buffer,i,_buffer,i + 1,_position - i);
  _buffer[i]=(byte)image;
  _position+=1;
}",60,5,"_length:_position,data:image,",97,0.86,ALERT
1774,"public final double sampleMax(){
  long max=_max.getAndSet(0);
  return _scale * max;
}","public final double getScale(){
  long shape=_max.getAndSet(0);
  return _scale * shape;
}",23,2,"sampleMax:getScale,max:shape,",590,6.15,ALERT
1775,"@Override public void update(List<EnvVar> dataList){
  envVarList.clear();
  if (dataList == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataList) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
","@Override public void create(List<EnvVar> DataList){
  envVarList.clear();
  if (DataList == null) {
    for (    EnvVar ecVari : builtInEnvVarMap.values()) {
      envVarList.add(ecVari);
    }
  }
 else {
    for (    EnvVar ecVari : DataList) {
      if (builtInEnvVarMap.containsKey(ecVari.getName())) {
        envVarList.add(new EnvVar(ecVari,true));
      }
 else {
        envVarList.add(new EnvVar(ecVari,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
",108,3,"update:create,dataList:DataList,envVar:ecVari,",350,4.29,ALERT
1776,,,50,5,,823,8.19392459789912,0
1777,"public static float computeContrastBetweenColors(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}","public static float computeContrastAcrossCollections(int default,int fm){
  float bgR=CbbBr.red(default) / 255f;
  float bgG=Cgraygr.green(default) / 255f;
  float bgB=CgetBr.blue(default) / 255f;
  bbB=(bbB < 0.03928f) ? bbB / 12.92f : (float)Math.pow((bbB + 0.055f) / 1.055f,2.4f);
  grayg=(grayg < 0.03928f) ? grayg / 12.92f : (float)Math.pow((grayg + 0.055f) / 1.055f,2.4f);
  getB=(getB < 0.03928f) ? getB / 12.92f : (float)Math.pow((getB + 0.055f) / 1.055f,2.4f);
  float bgLbgD2126f * bbB + 0.7152f * grayg + 0.0722f * getB;
  float cfgRT=Color.red(fm) / 255f;
  float bgF=Color.green(fm) / 255f;
  float featR=Color.blue(fm) / 255f;
  cfgRT=(cfgRT < 0.03928f) ? cfgRT / 12.92f : (float)Math.pow((cfgRT + 0.055f) / 1.055f,2.4f);
  bgF=(bgF < 0.03928f) ? bgF / 12.92f : (float)Math.pow((bgF + 0.055f) / 1.055f,2.4f);
  featR=(featR < 0.03928f) ? featR / 12.92f : (float)Math.pow((featR + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * cfgRT + 0.7152f * bgF + 0.0722f * featR;
  return Math.abs((fgL + 0.05f) / (bgD + 0.05f));
}",313,11,"computeContrastBetweenColors:computeContrastAcrossCollections,bg:default,fg:fm,bgR:bbB,bgG:grayg,bgB:getB,bgL:bgD,fgR:cfgRT,fgG:bgF,fgB:featR,",1192,14.46,ALERT
1778,"private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException {
  DataOutputStream dos=null;
  try {
    String xml=transMeta.getXML();
    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));
    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException(""Error while getting the graph XML"",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException(""Unable to find the graph fileL"",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException(""Error while Converting the graph xml string to bytes"",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException(""Error while writing the graph file"",ioe);
  }
 finally {
    if (dos != null) {
      try {
        dos.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}
","private static void generategraphFiles(TransMeta transMet,String growthfile) throws GraphGeneratorException {
  DataOutputStream ds=null;
  try {
    StringXl=transMet.getXML();
    ddsnew DataOutputStream(new FileOutputStream(new File(growthfile)));
    ds.write(X.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException(""Error while getting the graph XML"",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException(""Unable to find the graph fileL"",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException(""Error while Converting the graph xml string to bytes"",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException(""Error while writing the graph file"",ioe);
  }
 finally {
    if (ds != null) {
      try {
        ds.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}
",159,5,"generateGraphFile:generategraphFiles,transMeta:transMet,graphFile:growthfile,dos:ds,xml:X,",371,3.82,ALERT
1779,"public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}
","public boolean PutFace(Profile profile){
  return PutFace(profile,false);
}
",17,2,"putProfile:PutFace,",32,0.25,ALERT
1780,"private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(xml);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNotification;
}
","private static PolicyNotification extractPolicyUnificate(String x) throws PolicyEvaluationException {
  PolicyNotification policyNonig=null;
  try {
    StrinnotifyingDATABlockck=getNotificationDataBlock(x);
    if (notifyingDATABlock != null) {
      Documeunitdoc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notifyingDATABlock.getBytes()));
      Node rrootRootXMLUtils.getRootNode(unit,NODE_POLICY_SERVICE);
      if (rootRoot != null) {
        Node nonificationnode=XMLUtils.getChildNode(rootRoot,NODE_POLICY_NOTIFICATION);
        if (nonificationnode != null) {
          policyNonig=PolicyNotification.parseXML(nonificationnode);
        }
 else {
          debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"" + ""cannot find notification node"");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,""invalid_root_element"",null,null);
        }
      }
 else {
        debug.error(""ResultsCacheUtil."" + ""extractPolicyNotification():"");
      }
    }
 else {
      debug.error(""ResultsCacheUtil:"" + ""extractPolicyNotification():"" + ""notification data block is null"");
    }
  }
 catch (  Exception xe) {
    debug.error(""ResultsCacheUtil.extractPolicyNotification():"",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,""xml_parsing_error"",null,xe);
  }
  return policyNonig;
}
",192,7,"extractPolicyNotification:extractPolicyUnificate,xml:x,policyNotification:policyNonig,notificationDataBlock:notifyingDATABlock,doc:unit,rootNode:rootRoot,notificationNode:nonificationnode,",1536,17.05,ALERT
1781,"protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
","protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources flows=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + flows.getString(""contacts"") + "" "");
  Integer contact_info=contacts.size();
  p_window.append_items(contact_info.toString(),flows.getString(""contact_info""),contacts);
}
",92,6,"resources:flows,contact_count:contact_info,",91,0.87,ALERT
1783,,,76,3,,1159,9.910457491874700,0
1784,"public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){
  int month, day, year, hour, minute, second;
  try {
    month=Integer.parseInt(monthStr);
    day=Integer.parseInt(dayStr);
    year=Integer.parseInt(yearStr);
    hour=Integer.parseInt(hourStr);
    minute=Integer.parseInt(minuteStr);
    second=Integer.parseInt(secondStr);
  }
 catch (  Exception e) {
    return null;
  }
  return toDate(month,day,year,hour,minute,second);
}
","public static java.util.Date fromdate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){
  int month, day, year, hour, minute, second;
  try {
    month=Integer.parseInt(monthStr);
    day=Integer.parseInt(dayStr);
    year=Integer.parseInt(yearStr);
    hour=Integer.parseInt(hourStr);
    minute=Integer.parseInt(minuteStr);
    second=Integer.parseInt(secondStr);
  }
 catch (  Exception e) {
    return null;
  }
  return fromdate(month,day,year,hour,minute,second);
}
",125,13,"toDate:fromdate,",60,0.68,ALERT
1785,"public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
","public void handle(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
",72,4,"submit:handle,",42,0.34,ALERT
1786,,,22,4,,1197,10.786997723579400,0
1787,,,17,1,,424,3.3629879355430600,0
1788,"public static Request request(){
  return threadLocal.get();
}
","public static Request start(){
  return threadLocal.get();
}
",15,1,"request:start,",30,0.22,ALERT
1789,"public PathImpl createTempFile(String prefix,String suffix) throws IOException {
  if (prefix == null || prefix.length() == 0)   prefix=""t"";
  if (suffix == null)   suffix="".tmp"";
synchronized (LOCK) {
    for (int i=0; i < 32768; i++) {
      int r=Math.abs((int)RandomUtil.getRandomLong());
      PathImpl file=lookup(prefix + r + suffix);
      if (file.createNewFile())       return file;
    }
  }
  throw new IOException(""cannot create temp file"");
}","public PathImpl CreateTempFiles(String wrapper,String appendux) throws IOException {
  if (wrapper == null || wrapper.length() == 0)   wrapper=""t"";
  if (appendux == null)   appendux="".tmp"";
synchronized (LOCK) {
    for (int s=0; s < 32768; s++) {
      int d=Math.abs((int)RandomUtil.getRandomLong());
      PathImpl filfeokup(wrapper + r d appendux);
      if (fe.createNewFile())       return fe;
    }
  }
  throw new IOException(""cannot create temp file"");
}",111,6,"createTempFile:CreateTempFiles,prefix:wrapper,suffix:appendux,i:s,r:d,file:fe,",1644,12.96,ALERT
1790,,,209,10,,3532,310.6974334081010,0
1792,"private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {
    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollOffset > 0) {
      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);
    }
 else     if (mUnconsumedOverScrollOffset < 0) {
      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}","private void consumeNestFlow(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalunConsulated){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalunConsulated != 0) {
    mUnconsumedoverScrollLength+=-dyFinalunConsulated;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedoverScrollLength > 0) {
      mUnconsumedoverScrollLength=Math.min(maxOffset,mUnconsumedoverScrollLength);
    }
 else     if (mUnconsumedoverScrollLength < 0) {
      mUnconsumedoverScrollLength=Math.max(-maxOffset,mUnconsumedoverScrollLength);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}",96,7,"mUnconsumedOverScrollOffset:mUnconsumedoverScrollLength,dyFinalUnconsumed:dyFinalunConsulated,consumeNestedScroll:consumeNestFlow,",195,3.12,ALERT
1793,"private String buildToolTip(final CTaggedGraphNodesContainerNode node){
  final StringBuilder tooltip=new StringBuilder(""<html>"");
  boolean first=true;
  for (  final NaviNode graphnode : node.getGraphNodes()) {
    if (!first) {
      tooltip.append(""<br>"");
    }
    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));
    first=false;
  }
  return tooltip + ""</html>"";
}
","private String buildButtontip(final CTaggedGraphNodesContainerNode n){
  final StringBuilder awbox=new StringBuilder(""<html>"");
  boolean st=true;
  for (  final NaviNodrawnodeode : n.getGraphNodes()) {
    if (!st) {
      awbox.append(""<br>"");
    }
    awbox.append(CNodesDisplayString.getDisplayString(drawnode));
    st=false;
  }
  return awbox + ""</html>"";
}
",74,5,"buildToolTip:buildButtontip,node:n,tooltip:awbox,graphnode:drawnode,first:st,",803,9.77,ALERT
1794,"private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}","private int moveClients(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}",370,19,"moveComponents:moveClients,",115,1.78,ALERT
1796,,,25,2,,789,7.774225906531020,0
1797,,,54,5,,1638,24.942120440801000,0
1798,"private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
","private void assertBackupsDetails(final BackupStatus backspaceResult){
  Map<DistributedMember,Set<PersistentID>> bacbackupSetckspaceResult.getBackedUpDiskStores();
  assertFalse(backupSet.isEmpty());
  for (  DistributedMember param : backupSet.keySet()) {
    for (    PersistentIDprojectd : backupSet.get(param)) {
      assertNotNull(project.getHost());
      assertNotNull(project.getUUID());
      assertNotNull(project.getDirectory());
    }
  }
}
",90,5,"assertBackupStatus:assertBackupsDetails,backupStatus:backspaceResult,backupMap:backupSet,member:param,id:project,",451,4.98,ALERT
1799,"private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}","private void interpolativeSubLine(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}",220,10,"interpolateResultList:interpolativeSubLine,",71,1.38,ALERT
1800,,,23,1,,453,4.644423305988310,0
1801,"public GradleDistribution deserializeFromString(String distributionString){
  Preconditions.checkNotNull(distributionString);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith(""))"")) {
    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith(""))"")) {
    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith(""))"")) {
    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributionString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributionString);
  throw new RuntimeException(message);
}","public GradleDistribution deserializerFromWS(String distranceStarting){
  Preconditions.checkNotNull(distranceStarting);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distranceStarting.startsWith(localInstallationPrefix) && distranceStarting.endsWith(""))"")) {
    String localInstallationDir=distranceStarting.substring(localInstallationPrefix.length(),distranceStarting.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distranceStarting.startsWith(remoteDistributionPrefix) && distranceStarting.endsWith(""))"")) {
    String remoteDistributionUri=distranceStarting.substring(remoteDistributionPrefix.length(),distranceStarting.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distranceStarting.startsWith(versionPrefix) && distranceStarting.endsWith(""))"")) {
    String version=distranceStarting.substring(versionPrefix.length(),distranceStarting.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distranceStarting.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distranceStarting);
  throw new RuntimeException(message);
}",224,10,"distributionString:distranceStarting,deserializeFromString:deserializerFromWS,",91,0.98,ALERT
1802,,,34,2,,797,5.750136931737260,0
1803,,,38,3,,1163,7.190202422936760,0
1804,,,198,10,,3394,40.79272743463520,0
1805,"private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}","private void updateUIfromCmd(Command category){
  if (category == null) {
    return;
  }
  actionsComboBox.setText(category.getAction());
  dataTextField.setText(category.getData());
  categoryTextField.setText(category.getCategory());
  mimeTextField.setText(category.getMimeType());
  componentTextField.setText(category.getComponent());
  userTextField.setText(category.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=category.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : category.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=category.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}",216,6,"command:category,updateUiFromCommand:updateUIfromCmd,",193,2.65,ALERT
1806,,,90,3,,1131,13.678666877746600,0
1807,"public static double P_Harmonic(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmonic(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}","public static double P_Chormatic(int NY[][],int Ypred[][]){
  int allMissers=0;
  int N=NY.length;
  double loss=0.0;
  for (int uri=0; uri < N; uri++) {
    if (allMissing(NY[uri])) {
      allMissers++;
      continue;
    }
    double curLoss=P_Chormatic(NY[uri],Ypred[uri]);
    if (Double.isNaN(curLoss)) {
      allMissers++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissers);
}",119,8,"i:uri,allMissings:allMissers,Y:NY,P_Harmonic:P_Chormatic,",149,9.4,ALERT
1808,"public String replace(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException(""target should not be null"");
  }
  if (replacement == null) {
    throw new NullPointerException(""replacement should not be null"");
  }
  String ts=target.toString();
  int index=indexOf(ts,0);
  if (index == -1)   return this;
  String rs=replacement.toString();
  StringBuilder buffer=new StringBuilder(count);
  int tl=target.length();
  int tail=0;
  do {
    buffer.append(value,offset + tail,index - tail);
    buffer.append(rs);
    tail=index + tl;
  }
 while ((index=indexOf(ts,tail)) != -1);
  buffer.append(value,offset + tail,count - tail);
  return buffer.toString();
}","public String write(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException(""target should not be null"");
  }
  if (replacement == null) {
    throw new NullPointerException(""replacement should not be null"");
  }
  String ts=target.toString();
  int index=indexOf(ts,0);
  if (index == -1)   return this;
  String rs=replacement.toString();
  StringBuilder buffer=new StringBuilder(count);
  int tl=target.length();
  int tail=0;
  do {
    buffer.append(value,offset + tail,index - tail);
    buffer.append(rs);
    tail=index + tl;
  }
 while ((index=indexOf(ts,tail)) != -1);
  buffer.append(value,offset + tail,count - tail);
  return buffer.toString();
}",173,9,"replace:write,",62,1.54,ALERT
1809,,,34,3,,1120,12.579303801059700,0
1810,"private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}","private void handleResp(AvsResponse report){
  boolean checkafter=(avsQueue.size() == 0);
  if (report != null) {
    for (inbi i=report.size() - 1; bi >= 0; bi--) {
      if (report.gebi(i) instanceof AvsReplaceAllItem || report.get(bi) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        report.remove(bi);
      }
    }
    Lobi.i(TAG,""Adding "" + report.size() + "" items to our queue"");
    avsQueue.addAll(report);
  }
  if (checkafter) {
    checkQueue();
  }
}",121,4,"handleResponse:handleResp,response:report,checkAfter:checkafter,i:bi,",458,4.82,ALERT
1811,"public void addOperand(ISpacePredicate operand){
  if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>();
  _operandsList.add(operand);
}
","public void addOperant(ISpacePredicate operander){
  if (_operansSet == null)   _operansSet=new ArrayList<ISpacePredicate>();
  _o_operansSetdd(operander);
}
",32,3,"addOperand:addOperant,operand:operander,_operandsList:_operansSet,",290,2.96,ALERT
1812,"public void bindKeyStore(final KeyStoreService keyStoreService){
  this.keyStore=keyStoreService;
}
","public void bindCertStore(final KeyStoreService keystoreFactory){
  this.keyStorage=keystoreFactory;
}
",16,3,"bindKeyStore:bindCertStore,keyStoreService:keystoreFactory,keyStore:keyStorage,",175,1.8,ALERT
1813,"private static String checksumMD5(String data){
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""MD5"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(""Unable to create MD5 instance"",ex);
  }
  return hexEncode(md5.digest(data.getBytes()));
}","private static String checksumMC2(String data){
  MessageDigest mand3=null;
  try {
    mand3=MessageDigest.getInstance(""MD5"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(""Unable to create MD5 instance"",ex);
  }
  return hexEncode(mand3.digest(data.getBytes()));
}",58,3,"md5:mand3,checksumMD5:checksumMC2,",57,0.69,ALERT
1815,"public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}","public static void process(int xn,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.process(xn,y1,image_width,image_height,pixels,properties,dos);
}",93,10,"x1:xn,write:process,",192,3.0,ALERT
1816,,,114,5,,1121,10.433658198515600,0
1817,"public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
","public String ImportTRL(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
",180,11,"importTrl:ImportTRL,",319,2.44,ALERT
1818,,,86,4,,1483,14.463765962918600,0
1819,"void readPRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
","void writePAP() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
",42,2,"readPRJ:writePAP,",29,0.23,ALERT
1821,"public void testPlusMathContextPositive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c=""929487820944884782312124789.8748298842"";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals(""incorrect value"",c,res.toString());
  assertEquals(""incorrect scale"",cScale,res.scale());
}","public void assertPlusMathcontextposient(){
  String cca=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aRound=41;
  int prescale=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContextcontextc=new MathContext(prescale,rm);
  String c=""929487820944884782312124789.8748298842"";
  int dcScale=10;
  BigDecimal aNbMoneyew BigDecimal(new BigInteger(cca),aRound);
  BigDecimal res=rrmbbMoney(context);
  assertEquals(""incorrect value"",c,rr.toString());
  assertEquals(""incorrect scale"",dcScale,rr.scale());
}",101,10,"testPlusMathContextPositive:assertPlusMathcontextposient,a:cca,aScale:aRound,precision:prescale,mc:context,cScale:dcScale,aNumber:bMoney,res:rr,",1068,11.24,ALERT
1822,"protected boolean display(File helpFile) throws HelpException {
  if (helpFile.exists()) {
    loadAndWrite(helpFile);
    return true;
  }
 else {
    File notFound=new File(helpDir,NOT_FOUND);
    if (notFound.exists())     loadAndWrite(notFound);
 else     throw new HelpException(""Topic not found, try \'help\' for more information"");
    return false;
  }
}
","protected boolean content(File infoFiles) throws HelpException {
  if (infoFiles.exists()) {
    loadAndWrite(infoFiles);
    return true;
  }
 else {
    File notFound=new File(helpDir,NOT_FOUND);
    if (notFound.exists())     loadAndWrite(notFound);
 else     throw new HelpException(""Topic not found, try \'help\' for more information"");
    return false;
  }
}
",67,3,"helpFile:infoFiles,display:content,",61,0.66,ALERT
1823,"public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}","public static double[] expandedArrayB(int blocksize,double[] CurrentA){
  if (CurrentA == null) {
    return new double[blocksize * 3];
  }
  widthngth=CurrentA.width;
  double[valet=new doublewidthh + blocksize * 3];
  System.arraycopy(CurrentA,0valt,0,width);
  return val;
}",74,5,"expandArrayD:expandedArrayB,bufferSize:blocksize,currentArray:CurrentA,length:width,ret:val,",211,2.75,ALERT
1824,,,129,2,,793,15.064413857460000,0
1825,"public void addMessage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
","public void insertPage(String example){
  messages.addLast(example);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
",42,3,"addMessage:insertPage,message:example,",78,0.6,ALERT
1826,"public void addDelete(IResource delete){
  if (fDelete == null)   fDelete=new ArrayList<IResource>(2);
  fDelete.add(delete);
  if (fIgnoreCount == 0) {
    internalAdd(new DeleteDescription(delete));
  }
}","public void Adddelete(IResource route){
  if (fDelete == null)   fDelete=new ArrayList<IResource>(2);
  fDelete.add(route);
  if (fIgnoreCount == 0) {
    internalAdd(new DeleteDescription(route));
  }
}",50,3,"addDelete:Adddelete,delete:route,",53,0.51,ALERT
1827,"public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}
","public final int sort(){
  if (GWT.isScript()) {
    return jsArray.sort();
  }
 else {
    return javaArray.sort();
  }
}
",35,1,"size:sort,",35,0.33,ALERT
1828,"public void unlockForClear(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
","public void unlockByClient(InternalDistributedMember lockER){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",lockER,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !lockER.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(lockER);
  }
}
",106,3,"locker:lockER,unlockForClear:unlockByClient,",93,0.86,ALERT
1829,"public boolean shouldInclude(final Path path){
  return includeMatchers.size() == 0 || matches(path,includeMatchers);
}","public boolean shouldedInclude(final Path data){
  return includeMatchers.size() == 0 || matches(data,includeMatchers);
}",26,2,"shouldInclude:shouldedInclude,path:data,",739,9.56,ALERT
1830,"@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}","@Override public void mousePressed(MouseEvent be){
  m_frameLimiter.setRepeats(true);
  if ((be.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !be.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((be.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((be.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((be.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((be.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=be.getX();
      m_oldMousePos.height=be.getY();
      m_newMousePos.width=be.getX();
      m_newMousePos.height=be.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=be.getX();
      m_oldMousePos.height=be.getY();
      m_newMousePos.width=be.getX();
      m_newMousePos.height=be.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((be.getButton() == MouseEvent.BUTTON1) && be.isAltDown() && be.isShiftDown()&& !be.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}",374,8,"e:be,",92,0.97,ALERT
1831,,,104,7,,1662,22.51731987396880,0
1832,"public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}","public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage elm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  elm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    elm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     elm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   elm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   elm.addString(tag,LogMessage.PART_KEY_TAG);
  elm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(elm);
}",147,8,"lm:elm,",59,0.69,ALERT
1833,"public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}","public void show(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.show();
  }
}",60,4,"print:show,",65,0.58,ALERT
1834,,,81,3,,1156,10.752018670241000,0
1835,"public void serialize(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}","public void serializer(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}",179,7,"serialize:serializer,",44,0.44,ALERT
1836,"public static Properties createProperties(final Map<String,String> map){
  Properties properties=new Properties();
  if (!(map == null || map.isEmpty())) {
    for (    Entry<String,String> entry : map.entrySet()) {
      properties.setProperty(entry.getKey(),entry.getValue());
    }
  }
  return properties;
}
","public static Properties createPropertyps(final Map<String,String> shape){
  Properties rules=new Properties();
  if (!(shape == null || shape.isEmpty())) {
    for (    Entry<String,String> enelement shape.entrySet()) {
      rules.setProperty(element.getKey(),element.getValue());
    }
  }
  return rules;
}
",79,4,"createProperties:createPropertyps,map:shape,properties:rules,entry:element,",392,4.57,ALERT
1837,"public void deepSort(int[] setFeatureSequence){
  featureSequence=setFeatureSequence;
  numberOfLeaves=0;
  tree=new MaryNode(0,featureVectors.length);
  sortNode(0,tree);
}","public void recursiveSort(int[] setFeatureExtencing){
  ffeaturePrefENCEsetFeatureExtencing;
  numberOfSlaf=0;
  study=new MaryNode(0,featureVectors.length);
  sortNode(0,study);
}",38,5,"deepSort:recursiveSort,setFeatureSequence:setFeatureExtencing,featureSequence:featurePrefENCE,numberOfLeaves:numberOfSlaf,tree:study,",335,3.99,ALERT
1838,"void addRule(String[] selector,AttributeSet declaration,boolean isLinked){
  int n=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(selector[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}","void AddElement(String[] lector,AttributeSet decaration,boolean isTypisted){
  infn n=lector.length;
  StringBuilder buffer=new StringBuilder();
buffersb.append(lector[0]);
  for (int cprev1; cprev< fn; prev++) {
    buffer.append(' ');
  buffersb.append(lector[prev]);
  }
  String seleselectorNamefer.toString();
  Style attribute=getStyle(selectorName);
  if (attribute == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping vapping=getRootSelectorMapping();
      for (int icifn - 1; ci >= 0; ci--) {
      vappingnvappingng.getChildSelectorMapping(lector[ci],true);
      }
      attribute=vapping.getStyle();
      if (attribute == null) {
        attribute=altRule;
        mappivappingtyle(attribute);
        refreshResolvedRuleselectorNameme,lector,attribute,vapping.getSpecificity());
      }
    }
  }
  if (isTypisted) {
    attribute=getLinkedStyle(attribute);
  }
 attributee.addAttributes(decaration);
}",216,12,"addRule:AddElement,selector:lector,declaration:decaration,isLinked:isTypisted,n:fn,sb:buffer,counter:prev,rule:attribute,mapping:vapping,i:ci,",1028,11.34,ALERT
1839,"public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {
  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));
}
","public void convertBuiltInSounds(String playIdentification,InputStream data) throws IOException {
  builtinSounds.put(playIdentification,convertBuiltinSound(data));
}
",26,3,"soundIdentifier:playIdentification,installBuiltinSound:convertBuiltInSounds,",91,0.83,ALERT
1840,"public static Object toArray(Collection<?> collection,Class<?> componentType){
  if (componentType.isPrimitive()) {
    Object array=Array.newInstance(componentType,collection.size());
    int index=0;
    for (    Object value : collection) {
      Array.set(array,index++,value);
    }
    return array;
  }
  return collection.toArray((Object[])Array.newInstance(componentType,collection.size()));
}","public static Object createAddress(Collection<?> cache,Class<?> compatibleTypes){
  if (compatibleTypes.isPrimitive()) {
    Objeappray=Array.newInstcompatibleTypestType,cache.size());
    int data=0;
    for (    Obwidgetvalue : cache) {
      Array.set(app,data++,widget);
    }
    return app;
  }
  return colleccacheeAddress((Object[])Array.newInstcompatibleTypestType,cache.size()));
}",98,6,"toArray:createAddress,collection:cache,componentType:compatibleTypes,array:app,index:data,value:widget,",521,5.37,ALERT
1841,,,89,4,,1265,9.993326191107430,0
1843,"public static boolean isWindows8(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}","public static boolean Iswindows7(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}",35,1,"isWindows8:Iswindows7,",27,0.22,ALERT
1844,,,172,6,,1041,10.763694377740200,0
1845,"private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}","private double addRecursiveive(ArrayList<double[]> sholl,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs els=clus.getIDs();
  double weight=els.size();
  for (DBIDIter iter=els.iter(); iter.valid(); iter.advance()) {
    double[] proJN=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (proJN[0] != proJN[0] || proJN[1] != proJN[1]) {
      continue;
    }
    sholl.add(proJN);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weweight.5 * addRecursiveive(sholl,hier,iter.get());
  }
  return weight;
}",175,8,"addRecursively:addRecursiveive,hull:sholl,ids:els,projP:proJN,",397,6.14,ALERT
1846,"public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
","public void updateViaFile(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
",201,10,"updateFromResource:updateViaFile,",57,0.77,ALERT
1847,"private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}","private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] wounded){
  Type[] default=wounded;
  int ni=0;
  for (; ni < default.length; ni++) {
    final Type unrolled=unrollVariables(typeArguments,default[ni]);
    if (unrolled == null) {
      default=ArrayUtils.remove(default,ni--);
    }
 else {
      default[ni]=unrolled;
    }
  }
  return default;
}",100,6,"result:default,i:ni,bounds:wounded,",135,1.47,ALERT
1848,"public void collapseBuilding(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    collapseBuilding(coords);
  }
}
","public void colapseConstruction(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    colapseConstruction(coords);
  }
}
",53,4,"collapseBuilding:colapseConstruction,",42,0.46,ALERT
1849,,,57,3,,1139,9.44056457678477,0
1851,"public static void printLine(Object message){
  if (!isDisabled()) {
    printLine(String.valueOf(message));
  }
}
","public static void displayRow(Object error){
  if (!isDisabled()) {
    displayRow(String.valueOf(error));
  }
}
",29,2,"printLine:displayRow,message:error,",356,2.91,ALERT
1852,"protected void add(CSVRecord record){
  records.add(Objects.requireNonNull(record));
}
","protected void create(CSVRecord record){
  records.create(Objects.requireNonNull(record));
}
",21,2,"add:create,",36,0.35,ALERT
1853,,,31,3,,1143,10.903799104690600,0
1854,"public Server start() throws SQLException {
  try {
    started=true;
    service.start();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.start();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}","public Server wait() throws SQLException {
  try {
    started=true;
    service.wait();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.wait();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}",146,4,"start:wait,",46,0.44,ALERT
1855,"public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
","public static void elseIF(InputStream ip){
  try {
    if (ip != null)     ip.close();
  }
 catch (  Throwable t) {
  }
}
",32,2,"is:ip,closeEL:elseIF,",51,0.38,ALERT
1856,,,73,4,,1000,13.417048152287800,0
1857,"public static GeoTimeSerie detect(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,Collection<String> patterns,boolean standardizePAA) throws WarpScriptException {
  GeoTimeSerie gtsPatterns=GTSHelper.bSAX(gts,alphabetSize,wordLen,windowLen,standardizePAA);
  GTSHelper.sort(gtsPatterns);
  GeoTimeSerie detected=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,16);
  detected.setMetadata(gts.getMetadata());
  int lastidx=-1;
  for (int i=0; i < gtsPatterns.values; i++) {
    if (!patterns.contains(gtsPatterns.stringValues[i])) {
      continue;
    }
    for (int j=0; j < windowLen; j++) {
      if (i + j > lastidx) {
        lastidx=i + j;
        GTSHelper.setValue(detected,GTSHelper.tickAtIndex(gts,lastidx),GTSHelper.locationAtIndex(gts,lastidx),GTSHelper.elevationAtIndex(gts,lastidx),GTSHelper.valueAtIndex(gts,lastidx),false);
      }
    }
  }
  return detected;
}","public static GeoTimeSerie diffection(GeoTimeSerie playTS,int alphphabetLen,int WordGen,int durationL,Collection<String> Patterns,boolean standardizeIPSA) throws WarpScriptException {
  GeoTimeSerie gtsPagtsProteselper.bSAX(playTS,alphphabetLen,WordGen,durationL,standardizeIPSA);
  GTSHelper.sort(gtsProtes);
  GeoTimeSerie detected=defractedimeSerie(playTS.lastbucket,playTS.bucketcount,playTS.bucketspan,16);
  detdefractedtMetadata(playTS.getMetadata());
  int lastidy=-1;
  for (inindex i=0index i < gtsProtes.values; index++) {
    if (!Patterns.contains(gtsProtes.stringValues[index])) {
      continue;
    }
    for (int bj=0; bj < durationL; bj++) {
      if (index + bj > lastidy) {
        lastidy=index + bj;
        GTSHelper.setValue(detected,GTSdefractedickAtIndex(playTS,lastidx),lastidyer.locationAtIndex(playTS,lastidlastidyelper.elevationAtIndex(playTS,laslastidyTSHelper.valueAtIndex(playTS,lastidy),false);
      }
    }
  }
  return defracted;
}",210,12,"detect:diffection,gts:playTS,alphabetSize:alphphabetLen,wordLen:WordGen,windowLen:durationL,patterns:Patterns,standardizePAA:standardizeIPSA,gtsPatterns:gtsProtes,detected:defracted,lastidx:lastidy,i:index,j:bj,",940,12.05,ALERT
1859,"public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){
  List<Interceptor> allInters=new ArrayList<Interceptor>();
  for (  Interceptor defaultInter : defaultInters) {
    allInters.add(defaultInter);
  }
  for (  Interceptor resourceInter : resourceInters) {
    allInters.add(resourceInter);
  }
  for (  Interceptor methodInter : methodInters) {
    allInters.add(methodInter);
  }
  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);
  Class<? extends Interceptor>[] methodClears=getMethodClears(method);
  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {
    for (int i=0; i < allInters.size(); i++) {
      i=clearInterceptor(allInters,resourceClears,i);
      i=clearInterceptor(allInters,methodClears,i);
    }
  }
  return allInters.toArray(new Interceptor[allInters.size()]);
}","public Interceptor[] buildRouteInterocolions(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceCode,Interceptor[] methodInters,Method parent){
  List<Interceptor> allEnvers=new ArrayList<Interceptor>();
  for (  Interceptor thirdINTER : defaultInters) {
    allEnvers.add(thirdINTER);
  }
  for (  Interceptor resourceinter : resourceInters) {
    allEnvers.add(resourceinter);
  }
  for (  Interceptor methodInter : methodInters) {
    allEnvers.add(methodInter);
  }
  Class<? extends Interceptor>[]requestClearess=getResourceClears(resourceCode);
  Class<? extends Interceptor>[] methodCleats=getMethodClears(parent);
  if ((requestCleares != null && requestCleares.length > 0) || (methodCleats != null && methodCleats.length > 0)) {
    for (int uri=0; uri < allEnvers.size(); uri++) {
      uri=clearInterceptor(allEnvers,requestCleares,uri);
      uri=clearInterceptor(allEnvers,methodCleats,uri);
    }
  }
  return allEnvers.toArray(new Interceptor[allEnvers.size()]);
}",212,13,"buildRouteInterceptors:buildRouteInterocolions,resourceClass:resourceCode,method:parent,allInters:allEnvers,defaultInter:thirdINTER,resourceInter:resourceinter,resourceClears:requestCleares,methodClears:methodCleats,i:uri,",719,11.92,ALERT
1860,,,17,2,,654,6.817579126358030,0
1861,"public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters(""HEAD"");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}
","public void conforce(final VirtualFile author,final List<FilePath> f) throws VcsException {
  for (  List<Stringlogoshs : VcsFileUtil.chunkPaths(author,f)) {
    GitSimpleHandler haconnectionew GitSimpleHandler(myProject,author,GitCommand.CHECKOUT);
    connection.addParameters(""HEAD"");
    connection.endOptions();
    connection.addParameters(logos);
    connection.run();
  }
}
",79,5,"revert:conforce,root:author,files:f,paths:logos,handler:connection,",318,3.33,ALERT
1862,"public void layout(Container container){
  Map<Location,Drawable> comps=getComponentsByLocation(container);
  Drawable north=comps.get(Location.NORTH);
  Drawable northEast=comps.get(Location.NORTH_EAST);
  Drawable east=comps.get(Location.EAST);
  Drawable southEast=comps.get(Location.SOUTH_EAST);
  Drawable south=comps.get(Location.SOUTH);
  Drawable southWest=comps.get(Location.SOUTH_WEST);
  Drawable west=comps.get(Location.WEST);
  Drawable northWest=comps.get(Location.NORTH_WEST);
  Drawable center=comps.get(Location.CENTER);
  double widthWest=getMaxWidth(northWest,west,southWest);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double heightNorth=getMaxHeight(northWest,north,northEast);
  double heightSouth=getMaxHeight(southWest,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;
  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;
  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;
  Rectangle2D bounds=container.getBounds();
  Insets2D insets=container.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;
  double xCenter=bounds.getMinX() + insets.getLeft();
  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;
  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;
  double yCenter=bounds.getMinY() + insets.getTop();
  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;
  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);
  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);
  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);
  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);
  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);
  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);
  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());
  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());
}","public void place(Container container){
  Map<Location,Drawable> comps=getComponentsByLocation(container);
  Drawable north=comps.get(Location.NORTH);
  Drawable northEast=comps.get(Location.NORTH_EAST);
  Drawable east=comps.get(Location.EAST);
  Drawable southEast=comps.get(Location.SOUTH_EAST);
  Drawable south=comps.get(Location.SOUTH);
  Drawable southWest=comps.get(Location.SOUTH_WEST);
  Drawable west=comps.get(Location.WEST);
  Drawable northWest=comps.get(Location.NORTH_WEST);
  Drawable center=comps.get(Location.CENTER);
  double widthWest=getMaxWidth(northWest,west,southWest);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double heightNorth=getMaxHeight(northWest,north,northEast);
  double heightSouth=getMaxHeight(southWest,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;
  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;
  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;
  Rectangle2D bounds=container.getBounds();
  Insets2D insets=container.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;
  double xCenter=bounds.getMinX() + insets.getLeft();
  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;
  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;
  double yCenter=bounds.getMinY() + insets.getTop();
  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;
  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);
  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);
  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);
  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);
  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);
  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);
  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());
  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());
}",572,27,"layout:place,",132,1.17,ALERT
1863,"@SuppressWarnings(""unused"") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}","@SuppressWarnings(""unused"") public boolean onMoveEnd(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}",488,14,"onTouchEvent:onMoveEnd,",93,0.6,ALERT
1865,"public void addComponent(T component){
  components.add(component);
}
","public void appendComp(T system){
  components.add(system);
}
",16,2,"addComponent:appendComp,component:system,",50,0.43,ALERT
1866,"public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assetwk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}","public boolean Caninvolve(MDepreciationWorkfile assasswk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assasswk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assasswk.getUseLifeMonths(assasswk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}",96,8,"assetwk:assasswk,canInvoke:Caninvolve,",73,0.94,ALERT
1867,"public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}","public static int b(Object m){
  int hr=m == null ? 0 : m instanceof byte[] ? Arrays.hashCode((byte[])m) : m.hashCode();
  hr+=(hr << 15) ^ 0xffffcd7d;
  hr^=(hr >>> 10);
  hr+=(hr << 3);
  hr^=(hr >>> 6);
  hr+=(hr << 2) + (hr << 14);
  return hr ^ (hr >>> 16);
}",106,3,"hash:b,o:m,h:hr,",157,1.69,ALERT
1868,"public static <E>List<E> of(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}","public static <E>List<E> push(E e1,E ie2,E e3){
  List<E> json=new ArrayList<>();
  json.add(e1);
  json.add(ie2);
  json.add(e3);
  return json;
}",59,5,"list:json,e2:ie2,of:push,",125,1.66,ALERT
1869,,,22,1,,431,4.054060856501260,0
1870,"public boolean isInvalidNode(){
  ASTNode first=fNodes.get(0);
  ASTNode candidate=first.getParent();
  if (candidate == null)   return false;
  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}","public boolean isEmptyNode(){
  ASTNode fifth=fNodes.get(0);
  ASTNode validale=fifth.getParent();
  if (validale == null)   return false;
  if (validale.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}",53,3,"isInvalidNode:isEmptyNode,first:fifth,candidate:validale,",148,1.8,ALERT
1871,"public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
","public void refreshInvenitedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInvenitedMethods(superExpando);
    }
  }
}
",54,4,"refreshInheritedMethods:refreshInvenitedMethods,",42,0.41,ALERT
1872,"private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){
  final List<String> names=new ArrayList<>();
  for (  String localeName : localeNames) {
    if (symbolicSuffix.isEmpty()) {
      names.add(localeName);
    }
 else {
      names.add(localeName + ""."" + numSuffix);
      names.add(localeName + ""."" + symbolicSuffix);
    }
  }
  return names.toArray(new String[names.size()]);
}
","private static String[] collationMatchedRuleRules(final List<String> locateWorks,final int numssufffix,final String symbolicSufius){
  final List<String> tests=new ArrayList<>();
  for (  String locemeHalf : locateWorks) {
    if (symbolicSufius.isEmpty()) {
      tests.add(locemeHalf);
    }
 else {
      natestsdd(lolocemeHalf ""."" + numssufffix);
      tests.add(locemeHalf + ""."" + symbolicSufius);
    }
  }
  return tests.toArray(new String[tests.size()]);
}
",105,6,"collationMatchingRuleNames:collationMatchedRuleRules,localeNames:locateWorks,numSuffix:numssufffix,symbolicSuffix:symbolicSufius,names:tests,localeName:locemeHalf,",1838,25.34,ALERT
1873,,,37,2,,736,7.506788329283400,0
1874,,,68,6,,2143,26.412368603547400,0
1876,"public static void changeFont(JComponent comp,int style){
  Font font=comp.getFont();
  comp.setFont(font.deriveFont(style));
}
","public static void switchFamily(JComponent ctx,int option){
  Font font=ctx.getFont();
  ctx.setFont(font.deriveFont(option));
}
",34,4,"comp:ctx,changeFont:switchFamily,style:option,",85,0.68,ALERT
1877,,,323,23,,7895,103.94964774847000,0
1878,"private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}","private static String forceNumberStringToTwoDigits(String act){
  while (act.length() < 2) {
    act=""0"" + act;
  }
  if (act.length() > 2) {
    act=act.substring(act.length() - 2,act.length());
  }
  return act;
}",64,2,"text:act,",43,0.51,ALERT
1879,"public IVector(int c){
  vector=new int[Math.max(defaultCapacity,c)];
}
","public IVector(int cache){
  vectvector int[Math.max(defaultCapacity,cache)];
}
",23,2,"c:cache,",117,0.66,ALERT
1880,,,82,2,,783,12.425551418463400,0
1881,"private void checkStart(){
  if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) {
    mOutput.start();
  }
}
","private void checkSplit(){
  if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) {
    mOutput.start();
  }
}
",34,1,"checkStart:checkSplit,",17,0.2,ALERT
1882,,,29,2,,772,13.902528850237500,0
1883,,,56,4,,1246,13.290404792626700,0
1884,"public boolean incrementReceived(){
  Long diff=System.currentTimeMillis() - startTime;
  if (diff >= 1000) {
    packetsPerSecond=intervalPackets;
    startTime=System.currentTimeMillis();
    intervalPackets=1;
    return true;
  }
 else {
    intervalPackets++;
  }
  this.receivedPackets++;
  return false;
}","public boolean incrementmentsSeceive(){
  Long desc=System.currentTimeMillis() - startFile;
  if (desc >= 1000) {
    packalsPerSecond=intervalPalls;
    startFile=System.currentTimeMillis();
    intervalPalls=1;
    return true;
  }
 else {
    intervalPalls++;
  }
  this.receivedpackes++;
  return false;
}",59,6,"incrementReceived:incrementmentsSeceive,diff:desc,packetsPerSecond:packalsPerSecond,startTime:startFile,intervalPackets:intervalPalls,receivedPackets:receivedpackes,",419,4.51,ALERT
1885,"private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}","private static String ToNumber(double Coefficient){
  final String c=Double.ToNumber(Coefficient);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}",54,3,"toString:ToNumber,coeff:Coefficient,",86,0.69,ALERT
1886,,,46,3,,1132,13.31746320327120,0
1887,"public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}","public static List<SpaceTime> divideConquerBrownIANBalance(MultivariateNormalDistribution relation,SpaceTime work,SpaceTime vert,int Depth,int MaxEntries,SpaceTimeRejector recesser){
  List<SpaceTime> breaks=new LinkedList<SpaceTime>();
 breakss.add(work);
  pbreaksadd(vert);
  stop=false;
  if (divideConquerBrownIANBalance(relation,0,pobreaksepth,MaxEntries,recesser) == (2 << (Depth - 1))) {
    return breaks;
  }
  stop=false;
  return null;
}",99,8,"divideConquerBrownianBridge:divideConquerBrownIANBalance,normal:relation,start:work,end:vert,depth:Depth,maxTries:MaxEntries,rejector:recesser,points:breaks,",1351,19.54,ALERT
1888,,,27,2,,789,5.149237334728240,0
1889,"public static long[] interpose(long[] vector,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,updated,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    updated[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,updated,offset + len,vectorLen - offset);
  return updated;
}","public static long[] Interposed(long[] response,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(response,0,updated,0,idx);
  if (idx < response.length) {
    int delta=offset & 63;
    updated[idx]|=response[idx] & maskBelow(delta);
  }
  copy(response,offset,updated,offset + len,vectorLen - offset);
  return updated;
}",110,8,"vector:response,interpose:Interposed,",191,2.31,ALERT
1890,"private int countNonNewline(String str,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (str.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (str.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}","private int countNonNextline(String Str,int ord,int num){
  for (int cnt=0; cnt < num; cnt++) {
    final int lang=ord + cnt;
    if (Str.charAt(lang) == UNIX_NEWLINE) {
      return cnt;
    }
    if (Str.charAt(lang) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return num;
}",74,6,"countNonNewline:countNonNextline,str:Str,off:ord,len:num,pos:lang,",325,4.63,ALERT
1891,"protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}","protected void drawRect(String text1,String text2,int x,int y,Canvas this){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  this.drawRect(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  this.drawRect(text2,x - offset,y + (36f * pixelDensity),textPaint);
}",167,10,"c:this,drawText:drawRect,",101,1.1,ALERT
1893,"private Optional<CuratorFramework> createClient(String zookeeperUrl){
  if (StringUtils.isNotBlank(zookeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
","private Optional<CuratorFramework> getClient(String zookeverUrl){
  if (StringUtils.isNotBlank(zookeverUrl)) {
    CuratorFrameworkinstancet=ConfigurationsUtils.getClient(zookeverUrl);
    instance.start();
    return Optional.of(instance);
  }
 else {
    return Optional.empty();
  }
}
",57,3,"createClient:getClient,zookeeperUrl:zookeverUrl,client:instance,",944,10.16,ALERT
1894,,,36,3,,636,8.942310484250390,0
1895,,,94,2,,683,6.711594291528070,0
1896,"public static String cutFromIndexOf(String string,String substring){
  int i=string.indexOf(substring);
  if (i != -1) {
    string=string.substring(i);
  }
  return string;
}","public static String cutAtIndexe(String uri,String Subletter){
  iqit i=uri.indexOf(Subletter);
  if (qi != -1) {
    uri=uri.Subletter(qi);
  }
  return uri;
}",44,4,"cutFromIndexOf:cutAtIndexe,string:uri,substring:Subletter,i:qi,",178,2.03,ALERT
1897,"public Exchange(final Request request,final Origin origin){
  this.currentRequest=request;
  this.origin=origin;
  this.timestamp=System.currentTimeMillis();
}
","public Exchange(final Request create,final Origin owner){
  thisactiveSourcet=create;
  this.owner=owner;
  this.timest=System.currentTimeMillis();
}
",35,4,"request:create,origin:owner,currentRequest:activeSource,timestamp:timest,",981,10.54,ALERT
1898,"public static String grabClass(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signature);
  return matcher.group(1);
}","public static String getclass(String constal){
  Matcher Matches=sigRE.Matches(constal);
  boolean b=Matches.matches();
  if (!b && Matches.groupCount() != 4)   logger.error(""Bad method signature: {}"",constal);
  return Matches.group(1);
}",59,4,"grabClass:getclass,signature:constal,matcher:Matches,",119,1.34,ALERT
1899,"@Override public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source){
}","@Override public void zoomDomainPlote(double actor,PlotRenderingInfo state,Point2D source){
}",17,4,"factor:actor,zoomDomainAxes:zoomDomainPlote,",84,1.45,ALERT
1901,"public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}
","public byte[] Extractdata(byte[] stigoBytes,String stegoDirFile,byte[] origSigData) throws OpenStegoException {
  return null;
}
",26,4,"stegoData:stigoBytes,stegoFileName:stegoDirFile,extractData:Extractdata,",76,1.09,ALERT
1902,"private V doGet(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}","private V goSet(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}",200,9,"doGet:goSet,",54,1.37,ALERT
1904,"private void ensureCapacity(int additionalData){
  if ((this.position + additionalData) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + additionalData)) {
      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + additionalData;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}","private void enssureCapSpace(int additionBreak){
  if ((this.position + additionBreak) > this.ByteData.length) {
    int newLen=(int)(this.ByteData.length * 1.25);
    if newLenh < (thisByteDatar.length + additionBreak)) {
     newLenh=thisByteDatar.length + (int)(additionBreak * 1.25);
    }
    if (newLen < this.ByteData.length) {
     newLenh=thisByteDatar.length + additionBreak;
    }
    bytenextBytestes=new byte[newLen];
    System.arraycopy(this.bByteData0,nextBytes,0,this.ByteData.length);
    this.bByteDatanextBytes;
  }
}",136,5,"ensureCapacity:enssureCapSpace,additionalData:additionBreak,newLength:newLen,newBytes:nextBytes,byteBuffer:ByteData,",330,6.03,ALERT
1905,"public int countIn(CharSequence sequence){
  int count=0;
  for (int i=0; i < sequence.length(); i++) {
    if (matches(sequence.charAt(i))) {
      count++;
    }
  }
  return count;
}","public int countin(CharSequence source){
  int n=0;
  for (iniu i=0iu i < source.length(); iu++) {
    if (matches(source.charAt(iu))) {
      n++;
    }
  }
  return n;
}",54,4,"countIn:countin,sequence:source,count:n,i:iu,",782,9.95,ALERT
1906,"public void testCreationUnique(){
  Instances data;
  ArrayList<Attribute> atts;
  String relName;
  relName=""testCreationUnique"";
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""att-numeric_1""));
  atts.add(new Attribute(""att-numeric_2""));
  atts.add(new Attribute(""att-data_1"",""yyyy-MM-dd HH:mm""));
  atts.add(new Attribute(""att-nominal_1"",new ArrayList<String>(Arrays.asList(new String[]{""1"",""2"",""3""}))));
  atts.add(new Attribute(""att-nominal_2"",new ArrayList<String>(Arrays.asList(new String[]{""yes"",""no""}))));
  atts.add(new Attribute(""att-string_1"",(ArrayList<String>)null));
  data=new Instances(relName,atts,0);
  assertEquals(""relation name differs"",relName,data.relationName());
  assertEquals(""# of attributes differ"",atts.size(),data.numAttributes());
}","public void testPresentationalCustom(){
  Instances data;
  ArrayList<Attribute> atts;
  String relName;
  relName=""testCreationUnique"";
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""att-numeric_1""));
  atts.add(new Attribute(""att-numeric_2""));
  atts.add(new Attribute(""att-data_1"",""yyyy-MM-dd HH:mm""));
  atts.add(new Attribute(""att-nominal_1"",new ArrayList<String>(Arrays.asList(new String[]{""1"",""2"",""3""}))));
  atts.add(new Attribute(""att-nominal_2"",new ArrayList<String>(Arrays.asList(new String[]{""yes"",""no""}))));
  atts.add(new Attribute(""att-string_1"",(ArrayList<String>)null));
  data=new Instances(relName,atts,0);
  assertEquals(""relation name differs"",relName,data.relationName());
  assertEquals(""# of attributes differ"",atts.size(),data.numAttributes());
}",197,4,"testCreationUnique:testPresentationalCustom,",38,0.31,ALERT
1907,"public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure condition){
  return dropWhile(self.toString(),condition);
}
","public static String dropUnless(GString null,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure Condition){
  return dropUnless(null.toString(),Condition);
}
",48,3,"self:null,condition:Condition,dropWhile:dropUnless,",86,0.98,ALERT
1908,"public static String toString(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.toString(l,10);
  }
  return NUMBERS[(int)l];
}","public static String sizeStr(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.sizeStr(l,10);
  }
  return NUMBERS[(int)l];
}",41,2,"toString:sizeStr,",30,0.29,ALERT
1909,"public static CLPlatform[] listGPUPoweredPlatforms(){
  CLPlatform[] platforms=listPlatforms();
  List<CLPlatform> out=new ArrayList<CLPlatform>(platforms.length);
  for (  CLPlatform platform : platforms) {
    if (platform.listGPUDevices(true).length > 0)     out.add(platform);
  }
  return out.toArray(new CLPlatform[out.size()]);
}","public static CLPlatform[] listGPUPoweredProgramd(){
  CLPlatform[] platforms2=listPlatforms();
  List<CLPlatform> oconew ArrayList<CLPlatform>(platforms2.length);
  for (  CLPlatform pext: platforms2) {
    if extm.listGPUDevices(true).length > 0)     co.add(ext);
  }
  return co.toArray(new CLPlatform[co.size()]);
}",81,4,"listGPUPoweredPlatforms:listGPUPoweredProgramd,platforms:platforms2,out:co,platform:ext,",775,7.79,ALERT
1910,,,27,2,,629,6.259408156077070,0
1911,,,23,1,,447,3.536573553085330,0
1912,"public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}
","public int parseDouble(String localeFormalledString){
  return Integer.parseDouble(localeFormalledString);
}
",17,2,"parseInt:parseDouble,localeFormattedInteger:localeFormalledString,",112,0.82,ALERT
1913,"public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
","public static Entry addObjectToken(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
",46,3,"addObjectClass:addObjectToken,",31,0.23,ALERT
1914,"public void addDocumentType(DocumentType documentType){
  mDocumentTypes.add(documentType);
}
","public void addMediaTypes(DocumentType documentRoot){
  mDocumentTypes.add(documentRoot);
}
",16,2,"addDocumentType:addMediaTypes,documentType:documentRoot,",700,5.34,ALERT
1915,,,32,2,,794,7.823830231030780,0
1916,,,28,1,,455,3.190588327248890,0
1917,,,13,2,,606,4.686730754375460,0
1918,"@SuppressWarnings(""unchecked"") public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory){
  if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {
    BeanDefinition sessionFactoryBeanDefinition=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);
    MutablePropertyValues propertyValues=sessionFactoryBeanDefinition.getPropertyValues();
    if (mappingResources != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""mappingResources"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""mappingResources"",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(mappingResources);
    }
    if (annotatedClasses != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""annotatedClasses"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""annotatedClasses"",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(annotatedClasses);
    }
    if (configLocations != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""configLocations"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""configLocations"",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingConfigLocations=(List)propertyValue.getValue();
      existingConfigLocations.addAll(configLocations);
    }
    if (hibernateProperties != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue(""hibernateProperties"");
      if (propertyValue == null) {
        propertyValue=new PropertyValue(""hibernateProperties"",new Properties());
        propertyValues.addPropertyValue(propertyValue);
      }
      Properties existingHibernateProperties=(Properties)propertyValue.getValue();
      existingHibernateProperties.putAll(hibernateProperties);
    }
  }
 else {
    throw new NoSuchBeanDefinitionException(""No bean named ["" + sessionFactoryBeanName + ""] exists within the bean factory. ""+ ""Cannot post process session factory to add Hibernate resource definitions."");
  }
}
","@SuppressWarnings(""unchecked"") public void postProcessBeANContext(ConfigurableListableBeanFactory configurableListableBeanFactory){
  if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {
    BeanDefinition sessionFactoryBeANBase=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);
    MutablePropertyVpropValueValues=sessionFactoryBeANBase.getPropertyValues();
    if (mappingResources != null) {
      PropertyVPropertyExpValue=propValue.getPropertyValue(""mappingResources"");
      if (PropertyExp == null) {
        PropertyExp=new PropertyValue(""mappingResources"",new ArrayList());
        propValue.addPropertyValue(PropertyExp);
      }
      LisexistingMatchingresourceses=(List)PropertyExp.getValue();
      existingMatchingresources.addAll(mappingResources);
    }
    if (annotatedClasses != null) {
      PropertyVPropertyExpValue=propValue.getPropertyValue(""annotatedClasses"");
      if (PropertyExp == null) {
        PropertyExp=new PropertyValue(""annotatedClasses"",new ArrayList());
        propValue.addPropertyValue(PropertyExp);
      }
      LisexistingMatchingresourceses=(List)PropertyExp.getValue();
      existingMatchingresources.addAll(annotatedClasses);
    }
    if (configLocations != null) {
      PropertyVPropertyExpValue=propValue.getPropertyValue(""configLocations"");
      if (PropertyExp == null) {
        PropertyExp=new PropertyValue(""configLocations"",new ArrayList());
        propValue.addPropertyValue(PropertyExp);
      }
      LisexistingconfigLococationsns=(List)PropertyExp.getValue();
      existingconfigLococations.addAll(configLocations);
    }
    if (hibernateProperties != null) {
      PropertyVPropertyExpValue=propValue.getPropertyValue(""hibernateProperties"");
      if (PropertyExp == null) {
        PropertyExp=new PropertyValue(""hibernateProperties"",new Properties());
        propValue.addPropertyValue(PropertyExp);
      }
      Properties existingHibernateProperties=(Properties)PropertyExp.getValue();
      existingHibernateProperties.putAll(hibernateProperties);
    }
  }
 else {
    throw new NoSuchBeanDefinitionException(""No bean named ["" + sessionFactoryBeanName + ""] exists within the bean factory. ""+ ""Cannot post process session factory to add Hibernate resource definitions."");
  }
}
",320,8,"postProcessBeanFactory:postProcessBeANContext,sessionFactoryBeanDefinition:sessionFactoryBeANBase,propertyValues:propValue,propertyValue:PropertyExp,existingMappingResources:existingMatchingresources,existingConfigLocations:existingconfigLococations,",484,6.86,ALERT
1919,"protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposals=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           proposals.add(editProposal);
        }
      }
    }
  }
  return proposals;
}
","protected List<IEditProposal> collectEditCompposites(){
  List<IEditProposal> proposalal=new ArrayList<IEditProposal>();
  View selectedVIEW=getSelectedView();
  if (selectedVIEW != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provides : proposalProviders) {
        for (        IEditProposal editProtposal : provides.getProposals(selectedVIEW)) {
          if (eeditProtposalisApplicable())           proposalal.add(editProtposal);
        }
      }
    }
  }
  return proposalal;
}
",88,5,"collectEditProposals:collectEditCompposites,proposals:proposalal,selectedView:selectedVIEW,provider:provides,editProposal:editProtposal,",603,5.17,ALERT
1920,"public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}","public Builder addCurrentRead(byte[] index){
  Assertions.checkState(index != null && index.length > 0);
  segments.add(new Segment(index,null));
  return this;
}",42,2,"data:index,appendReadData:addCurrentRead,",53,0.44,ALERT
1921,"public boolean isProcessed(Trace trace,Node node,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(node.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ node+ "" direction=""+ direction+ ""? ""+ ret);
  }
  return ret;
}
","public boolean isProjectured(Trace trace,Node one,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == one.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(one.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ one+ "" direction=""+ direction+ ""? ""+ ret);
  }
  return ret;
}
",104,5,"isProcessed:isProjectured,node:one,",137,1.07,ALERT
1922,,,69,4,,699,10.930679035186800,0
1923,"public boolean isStored(){
  return Integer.signum(id) != -1;
}","public boolean isstore(){
  return Integer.signum(id) != -1;
}",18,1,"isStored:isstore,",26,0.23,ALERT
1924,"@Action(value=""/receipts/challan-newform"") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){
  setLoginDept();
  SimpleDateFormat sdf=new SimpleDateFormat(""dd/MM/yyyy"");
  try {
    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText(""Error parsing Cut Off Date"") + e.getMessage());
  }
  return NEW;
}
","@Action(value=""/receipts/challan-newform"") @ValidationErrorPage(value=ERROR) @SkipValidation public String NEWforms(){
  setLoginDept();
  SimpleDateFormat sdc=new SimpleDateFormat(""dd/MM/yyyy"");
  try {
    CutoffDate=sdc.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText(""Error parsing Cut Off Date"") + e.getMessage());
  }
  return NEW;
}
",85,3,"newform:NEWforms,sdf:sdc,cutOffDate:CutoffDate,",167,1.51,ALERT
1925,"void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());
    addOns.addAll(changes.getOldVersions());
    Set<Extension> extensions=new HashSet<>();
    extensions.addAll(changes.getUnloadExtensions());
    extensions.addAll(changes.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) {
      return;
    }
  }
  uninstallAddOns(caller,changes.getUninstalls(),false);
  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());
  allAddons.addAll(changes.getInstalls());
  for (  AddOn addOn : allAddons) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addOn);
    }
    downloadAddOn(addOn);
  }
}
","void processAddonChange(Window Callester,AddOnDependencyChecker.AddOnChangesResult params){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn>addActsess=new HashSet<>(params.getUninstalls());
   addActsess.addAll(params.getOldVersions());
    Set<Extension> extances=new HashSet<>();
   extancess.addAll(params.getUnloadExtensions());
   extancess.addAll(params.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(Callester,addActses,extances,true)) {
      return;
    }
  }
  uninstallAddOns(Callester,params.getUninstalls(),false);
  Set<AddOn>allAddOns=new HashSet<>(params.getNewVersions());
 allAddOns.addAll(params.getInstalls());
  for (  AddOnaddInn : allAddOn) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addIn);
    }
    downloadAddOn(addIn);
  }
}
",190,7,"processAddOnChanges:processAddonChange,caller:Callester,changes:params,addOns:addActses,extensions:extances,allAddons:allAddOn,addOn:addIn,",1808,37.42,ALERT
1926,,,81,5,,1783,21.726380689938900,0
1927,,,95,6,,1334,15.755390830834700,0
1928,"@Override protected String toString(File obj){
  return obj.getAbsolutePath();
}
","@Override protected String toService(File node){
  return node.getAbsolutePath();
}
",18,2,"toString:toService,obj:node,",98,0.81,ALERT
1929,,,23,3,,507,6.559330300490060,0
1930,,,180,6,,1999,19.863682623704300,0
1931,,,25,2,,664,7.833668744564060,0
1932,,,19,2,,777,6.785176543394730,0
1933,"static void queuePlayerCapeReplacement(AbstractClientPlayer player){
  final String displayName=player.getDisplayNameString();
  Logger.info(""Queueing cape replacement for %s"",displayName);
  THREAD_POOL.submit(null);
}
","static void queuePlayerCapePlacements(AbstractClientPlayer er){
  final StrdisplayNameName=er.getDisplayNameString();
  Logger.info(""Queueing cape replacement for %s"",displayName);
  THREAD_POOL.submit(null);
}
",35,3,"queuePlayerCapeReplacement:queuePlayerCapePlacements,player:er,",131,0.97,ALERT
1934,"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}","public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt pjmodel,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,pjmodel,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}",112,13,"p_location:pjmodel,",44,2.49,ALERT
1935,"public static Properties loadProperties(ClassLoader classLoader,String classpathResource){
  return loadProperties(null,classpathResource);
}
","public static Properties readPropertyProperty(ClassLoader ClassLoader,String Classpathresource){
  return readPropertyProperty(null,Classpathresource);
}
",21,3,"loadProperties:readPropertyProperty,classLoader:ClassLoader,classpathResource:Classpathresource,",230,1.76,ALERT
1936,,,45,5,,1368,11.403549675146700,0
1937,"public String versionCompact(){
  return properties.getProperty(""version.compact"");
}
","public String VersionImpacts(){
  return properties.getProperty(""version.compact"");
}
",15,1,"versionCompact:VersionImpacts,",26,0.19,ALERT
1938,"public static void fullReset(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
","public static void fullRevot(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
",24,1,"fullReset:fullRevot,",25,0.22,ALERT
1939,,,16,1,,425,3.806066123644510,0
1941,,,16,1,,464,5.03267410993576,0
1942,"SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseComponentType=linearArrayType.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}","SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseDirectoryType=linearArrayType.getComponentType();
  _outputObjectTypes=(Class<L[]>)ArrayUtils.getArrayClass(_baseDirectoryType,2);
  Map<SparseKey,SparseValue> solveApp=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _sumRodes=numRows;
  _numColumnd=numCols;
  ArrayList<SparseKey>Keys=new ArrayList<SparseKey>(solveApp.keySet());
  Collections.sort(Key);
 _colVerticess=new int[Key.size()];
 _collIditionss=new int[Key.size()];
 _linearINDickss=new int[Key.size()];
 _realvaluess=linearArrayType.cast(Array.newInstance(_baseDirectoryType,Key.size()));
 _actualValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseDirectoryType,Key.size()));
  for (intxii=0;xii < Key.size(); xi++) {
    SparseKey e=Key.get(xi);
    _colVertices[xi]=e.row;
    _collIditions[xi]=e.col;
    _linearINDicks[xi]=e.linearIndex;
    SparseValue value=solveApp.get(e);
    setSparseValue(value,_realvalues,_actualValue,xi);
  }
}",291,14,"_baseComponentType:_baseDirectoryType,_outputArrayType:_outputObjectTypes,sparseMap:solveApp,_numRows:_sumRodes,_numCols:_numColumnd,keys:Key,_rowIndices:_colVertices,_colIndices:_collIditions,_linearIndices:_linearINDicks,_realValues:_realvalues,_imagValues:_actualValue,i:xi,key:e,",2525,27.99,ALERT
1943,,,19,1,,435,4.861373690764110,0
1944,"public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}","public static final byte[] munpack(byte[] isin) throws IOException {
  ByteArrayOutputStream ououtStreamew ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * isin.length);
  GZIPInputStream inoutStreamerew GZIPInputStream(new ByteArrayInputStream(isin));
  byte[] cf=new byte[BUF_SIZE];
  while (true) {
    int sisizeutStreamer.read(cf);
    if (size <= 0)     break;
    outStream.write(cf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}",102,6,"unzip:munpack,in:isin,inStream:outStreamer,buf:cf,",232,2.36,ALERT
1945,,,35,2,,804,6.95193719069163,0
1946,,,309,10,,3198,72.81536749204,0
1947,"public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}","public static void modifierFile(File page,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(page),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),page);
}",64,5,"file:page,modifyFile:modifierFile,",64,0.51,ALERT
1948,"public double localScore(int i,int... parents){
  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=parents.length;
  Matrix covxx=getSelection1(covariances,parents);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,parents,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);
      _parents.removeAll(forbidden);
      parents=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(parents,covariances);
    }
    return Double.NaN;
  }
}","public double randomScore(int ii,int... children){
  for (  int ppart: children)   if (forbidden.contains(part))   return Double.NaN;
  double reresiduationVariantovariances.get(ii,ii);
  int v=getSampleSize();
  int ppartchildren.length;
  Matrix ccavxgetSelection1(covariances,children);
  try {
    MatrixcovXXInvv=cavx.inverse();
    Matrix coCavxyetSelection2(covariances,pchildrenii);
    Matrix d=covXXInv.times(Cavxy);
    double digit=0.0;
    for (int q=0; q < Cavxy.getRowDimension(); q++) {
      for (int uk=0; uk < Cavxy.getColumnDimension(); uk++) {
        digit+=Cavxy.get(q,uk) * d.get(q,uk);
      }
    }
    residuationVariant-=digit;
    if (residuationVariant <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (reresiduationVariant covariances.get(ii,ii)));
      }
      return Double.NaN;
    }
    double cn=getPenaltyDiscount();
    return score(resresiduationVariantlvgn,part,cn);
  }
 catch (  Exception e) {
    boolean remigratedFew=true;
    while (remigratedFew) {
      List<Integer> _parent=new ArrayList<>();
      for (int y=0; y < children.length; y++)       __parentadd(children[y]);
      _parent.removeAll(forbidden);
      children=new int[_parent.size()];
      for (int y=0; y < __parentsize(); y++)       children[y]=_parent.get(y);
      rremigratedFewprintMinimalLinearlyDependentSet(children,covariances);
    }
    return Double.NaN;
  }
}",355,17,"localScore:randomScore,i:ii,parents:children,p:part,residualVariance:residuationVariant,n:v,covxx:cavx,covxxInv:covXXInv,covxy:Cavxy,b:d,dot:digit,j:q,k:uk,c:cn,removedOne:remigratedFew,_parents:_parent,",1648,21.91,ALERT
1949,,,187,10,,3164,32.67234694957730,0
1950,"@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}","@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTranslated,boolean canInvokeAsync){
  if (bytesTranslated == 0) {
    bytesTranslated=-1;
  }
 else {
    updateBuffers(bytesTranslated);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTranslated));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTranslated));
    }
  }
  if (canInvokeAsync) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}",126,3,"bytesTransferred:bytesTranslated,canInvokeDirect:canInvokeAsync,",70,1.25,ALERT
1951,"private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){
  final double latitude=point.getLatitude();
  final double longitude=point.getLongitude();
  final double sinLatitude=Math.sin(latitude);
  final double cosLatitude=Math.cos(latitude);
  final double sinLongitude=Math.sin(longitude);
  final double cosLongitude=Math.cos(longitude);
  double arcDistance=0.0;
  Double prevAngle=null;
  for (  final GeoPoint polyPoint : polyPoints) {
    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (angle == null) {
      return null;
    }
    if (prevAngle != null) {
      double angleDelta=angle - prevAngle;
      if (angleDelta < -Math.PI) {
        angleDelta+=Math.PI * 2.0;
      }
      if (angleDelta > Math.PI) {
        angleDelta-=Math.PI * 2.0;
      }
      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      arcDistance+=angleDelta;
    }
    prevAngle=angle;
  }
  if (prevAngle != null) {
    final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (lastAngle == null) {
      return null;
    }
    double angleDelta=lastAngle - prevAngle;
    if (angleDelta < -Math.PI) {
      angleDelta+=Math.PI * 2.0;
    }
    if (angleDelta > Math.PI) {
      angleDelta-=Math.PI * 2.0;
    }
    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    arcDistance+=angleDelta;
  }
  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return arcDistance > 0.0;
}","private static Boolean isInsideIntersect(final GeoPoint node,final List<GeoPoint> phyProducts){
  final double longetime=node.getLatitude();
  final double longitude=node.getLongitude();
  final double sinLatitude=Math.sin(longetime);
  final double cosLatitude=Math.cos(longetime);
  final double sinLongitude=Math.sin(longitude);
  final double cosLongitude=Math.cos(longitude);
  double arcDistance=0.0;
  Double prevAngle=null;
  for (  final GeoPoint polyPoint : phyProducts) {
    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (angle == null) {
      return null;
    }
    if (prevAngle != null) {
      double angleDelta=angle - prevAngle;
      if (angleDelta < -Math.PI) {
        angleDelta+=Math.PI * 2.0;
      }
      if (angleDelta > Math.PI) {
        angleDelta-=Math.PI * 2.0;
      }
      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      arcDistance+=angleDelta;
    }
    prevAngle=angle;
  }
  if (prevAngle != null) {
    final Double lastAngle=computeAngle(phyProducts.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (lastAngle == null) {
      return null;
    }
    double angleDelta=lastAngle - prevAngle;
    if (angleDelta < -Math.PI) {
      angleDelta+=Math.PI * 2.0;
    }
    if (angleDelta > Math.PI) {
      angleDelta-=Math.PI * 2.0;
    }
    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    arcDistance+=angleDelta;
  }
  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return arcDistance > 0.0;
}",346,15,"point:node,isInsidePolygon:isInsideIntersect,polyPoints:phyProducts,latitude:longetime,",174,5.89,ALERT
1952,"@SuppressWarnings(""UnusedReturnValue"") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){
  final int count=OutlinesObj.getInt(PdfDictionary.Count);
  final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(FirstObj);
  if (FirstObj != null) {
    final Element root=OutlineDataXML.createElement(""root"");
    OutlineDataXML.appendChild(root);
    final int level=0;
    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);
  }
  return count;
}","@SuppressWarnings(""UnusedReturnValue"") public int readOutlineFilesMetATA(final PdfObject OutlinsObj,final PdfObjectReader currentPdfFile){
  final intlogt=OutlinsObj.getInt(PdfDictionary.Count);
  final PdfObjectfirstObjectj=OutlinsObj.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(firstObject);
  if (firstObject != null) {
    final Element intern=OutlineDataXML.createElement(""root"");
    OutlineDataXML.appendChild(intern);
    final int status=0;
    readOutlineLevel(roointernrrentPdfFile,firstObject,status,false);
  }
  return log;
}",100,7,"readOutlineFileMetadata:readOutlineFilesMetATA,OutlinesObj:OutlinsObj,count:log,FirstObj:firstObject,root:intern,level:status,",539,5.98,ALERT
1953,"protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}","protected int createSeries(Canvas Canairo,DefaultRenderer buffrator,String[] ytyrs,int z,int rx,int ry,int width,int shape,int legendedWidth,Paint pinch,boolean calculating){
  float size=32;
  if (buffrator.isShowLegend()) {
    flocurrentWntX=z;
    float curcurrentXY + shape - legendedWidth + size;
    pinch.setTextAlign(Component.LEFT);
    ppinchsetTextSize(buffrator.getLegendTextSize());
    int sLong=Math.min(tytyrslength,buffrator.getSeriesRendererCount());
    for (inarea i=0area i < sLong; area++) {
      SimpleSeriesRenderer r=burfrator.getSeriesRendererAt(area);
      final float linlineSizetLegendShapeWidth(area);
      if (r.isShowLegendItem()) {
        String tetexttyrs[area];
        if (tytyrslength == buffrator.getSeriesRendererCount()) {
          pinch.setColor(r.getColor());
        }
 else {
          pinch.setColor(ColorUtil.LTGRAY);
        }
        float[] lengthp=new float[text.length()];
        pinch.getTextWidths(text,lengthp);
        float sum=0;
        for (        float vobject: lengthp) {
          sum+=object;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentW + extraSize;
        ifarea(i > 0 && getExceecurrentWidthth,buffrator,rx,width)) {
       currentWntX=z;
          ccurrentXY=buffrator.getLegendTextSize();
          ssize=buffrator.getLegendTextSize();
          currentWidth=currentW + extraSize;
        }
        if (getExceecurrentWidthth,buffrator,rx,width)) {
          float maxWidth=rx - currentW - lineSize- 10;
          if (isVertical(buffrator)) {
            maxWidth=width - currentW - lineSize- 10;
          }
          int nr=pinch.breakText(text,true,maxWidth,lengthp);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculating) {
          drawLegendShape(Canairo,r,currentW,currentXY,area,pinch);
          drawString(Canairo,ttextcurrentW + llineSize+ 5,currentXY + 5,pinch);
        }
        currentW+=extraSize;
      }
    }
  }
  return Math.round(ssize+ buffrator.getLegendTextSize());
}",436,27,"drawLegend:createSeries,canvas:Canairo,renderer:buffrator,titles:ytyrs,left:z,right:rx,y:ry,height:shape,legendSize:legendedWidth,paint:pinch,calculate:calculating,currentX:currentW,currentY:currentXY,sLength:sLong,i:area,widths:lengthp,value:object,",2046,23.32,ALERT
1955,"public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}","public boolean processSecureTimer(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}",66,6,"threadSafeTimeout:processSecureTimer,",38,0.43,ALERT
1956,"public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(parent,message,description,e);
  }
  return null;
}","public static ReilGraph copyReilsBlock(final Window parent,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> performer=new ReilTranslator<INaviInstruction>();
  try {
    return performer.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String string=""E000XXX: "" + ""Could not show REIL code for node"";
    final String response=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(parent,string,response,e);
  }
  return null;
}",125,6,"copyReilCode:copyReilsBlock,translator:performer,message:string,description:response,",346,3.6,ALERT
1957,,,12,1,,411,4.833146262168880,0
1958,"public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
","public void setResults(AMIdentity data,Map attributes){
  searchResults.add(data);
  resultsMap.put(data,attributes);
}
",28,3,"addResult:setResults,id:data,attrs:attributes,",130,1.33,ALERT
1959,"private Handler<Void> installAfterHandler(final HttpServerRequest request,final Buffer buffer,final List<Listener> afterListener){
  Handler<Void> afterHandler=null;
  return afterHandler;
}
","private Handler<Void> installCustomHandle(final HttpServerRequest post,final Buffer object,final List<Listener> beforeList){
  Handler<Void> afterParser=null;
  return afterParser;
}
",35,5,"installAfterHandler:installCustomHandle,request:post,buffer:object,afterListener:beforeList,afterHandler:afterParser,",805,7.1,ALERT
1960,"public void insertTwin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + inst + "" not found"");
}
","public void inserttwoin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + inst + "" not found"");
}
",80,5,"insertTwin:inserttwoin,",37,0.4,ALERT
1961,,,44,4,,1356,16.599286969502800,0
1962,,,77,4,,1493,19.75497569243110,0
1963,"public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}
","public void addPutAndGetTimeNanos(long beta){
  putTimeNanos.addAndGet(beta);
  getTimeNanos.addAndGet(beta);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(beta);
}
",36,2,"duration:beta,",38,0.43,ALERT
1964,"public final boolean isOpen(){
  return closed.get() == false;
}
","public final boolean getClose(){
  return closed.get() == false;
}
",17,1,"isOpen:getClose,",17,0.14,ALERT
1965,,,20,2,,787,9.118769669532780,0
1966,"private ReplicatorRuntimeConf(String serviceName){
  replicatorHomeDir=locateReplicatorHomeDir();
  replicatorLogDir=locateReplicatorLogDir();
  replicatorConfDir=locateReplicatorConfDir();
  replicatorProperties=new File(locateReplicatorConfDir(),""static-"" + serviceName + "".properties"");
  if (!replicatorProperties.isFile() || !replicatorProperties.canRead()) {
    throw new ServerRuntimeException(""Replicator static properties does not exist or is invalid: "" + replicatorProperties);
  }
  replicatorDynamicProperties=new File(replicatorConfDir,""dynamic-"" + serviceName + "".properties"");
  replicatorDynamicRole=new File(replicatorConfDir,""dynamic-"" + serviceName + "".role"");
  this.clearDynamicProperties=Boolean.parseBoolean(System.getProperty(CLEAR_DYNAMIC_PROPERTIES));
}
","private ReplicatorRuntimeConf(String featureKey){
  replicatorHomeDir=locateReplicatorHomeDir();
  replicatorLogDir=locateReplicatorLogDir();
  replicationConfDist=locateReplicatorConfDir();
 replicationExpertiess=new File(locateReplicatorConfDir(),""static-"" + featureKey + "".properties"");
  if (!replicationExperties.isFile() || !replicationExperties.canRead()) {
    throw new ServerRuntimeException(""Replicator static properties does not exist or is invalid: "" + replicationExperties);
  }
  rreplicatorDynamicPropertiesnew FilereplicationConfDistr,""dynamic-"" + featureKey + "".properties"");
  rreplacerRemoteResourcenew FilereplicationConfDistr,""dynamic-"" + featureKey + "".role"");
  this.clearDynamicProperties=Boolean.parseBoolean(System.getProperty(CLEAR_DYNAMIC_PROPERTIES));
}
",113,8,"serviceName:featureKey,replicatorConfDir:replicationConfDist,replicatorProperties:replicationExperties,replicatorDynamicRole:replacerRemoteResource,",284,3.64,ALERT
1967,"Sentence parseSentence(final String text,final ConversationContext ctx){
  if (isEmpty()) {
    return ConversationParser.parse(text,ctx);
  }
  String txt=text.trim();
  final Sentence sentence=new SentenceImplementation(ctx,txt);
  txt=ConversationParser.detectSentenceType(txt,sentence);
  if (typeMatching) {
    readTypeMatchExpressions(txt,ctx,sentence);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,ctx,sentence);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,ctx,sentence);
  }
  return sentence;
}
","Sentence parsesentence(final String text,final ConversationContext sc){
  if (isEmpty()) {
    return ConversationParser.parse(text,sc);
  }
  String txt=text.trim();
  final Sentence sendencia=new SentenceImplementation(sc,txt);
  txt=ConversationParser.detectSentenceType(txt,sendencia);
  if (typeMatching) {
    readTypeMatchExpressions(txt,sc,sendencia);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,sc,sendencia);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,sc,sendencia);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,sc,sendencia);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,sc,sendencia);
  }
  return sendencia;
}
",145,5,"ctx:sc,sentence:sendencia,parseSentence:parsesentence,",173,2.37,ALERT
1968,"public static byte[] decode(String hexa) throws CoderException {
  if (hexa == null) {
    throw new CoderException(""can\'t decode empty String"");
  }
  if ((hexa.length() % 2) != 0) {
    throw new CoderException(""invalid hexadicimal String"");
  }
  int tamArray=hexa.length() / 2;
  byte[] retorno=new byte[tamArray];
  for (int i=0; i < tamArray; i++) {
    retorno[i]=hexToByte(hexa.substring(i * 2,i * 2 + 2));
  }
  return retorno;
}","public static byte[] decode(String Hexb) throws CoderException {
  if (Hexb == null) {
    throw new CoderException(""can\'t decode empty String"");
  }
  if ((Hexb.length() % 2) != 0) {
    throw new CoderException(""invalid hexadicimal String"");
  }
  int tasmOrder=Hexb.length() / 2;
  byte[] altorn=new byte[tasmOrder];
  for (int iu=0; iu < tasmOrder; iu++) {
    altorn[iu]=hexToByte(Hexb.substring(iu * 2,iu * 2 + 2));
  }
  return altorn;
}",116,5,"tamArray:tasmOrder,retorno:altorn,i:iu,hexa:Hexb,",162,2.86,ALERT
1969,"public void findAndUndo(Object someObj){
  if (someObj instanceof com.bbn.openmap.MapBean) {
    logger.fine(""ProjectionStack removing a MapBean."");
    MapBean map=getMapBean();
    if (map != null && map == (MapBean)someObj) {
      setMapBean(null);
    }
  }
}
","public void findAndUndo(Object Someobj){
  if (Someobj instanceof com.bbn.openmap.MapBean) {
    logger.fine(""ProjectionStack removing a MapBean."");
    MapBean map=getMapBean();
    if (map != null && map == (MapBean)Someobj) {
      setMapBean(null);
    }
  }
}
",57,3,"someObj:Someobj,",37,0.45,ALERT
1970,,,55,3,,1133,15.60015336672470,0
1971,"public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
","public void init(int pos,@NonNull T parent){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.init(pos,parent);
  }
  if (notifyOnChange) {
    notifyItemInserted(pos);
  }
}
",57,4,"position:pos,add:init,item:parent,",132,1.5,ALERT
1972,"public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}
","public void addChanPoint(ChannelMap chanMap){
  if (!mChannelMaps.contains(chanMap)) {
    mChannelMaps.add(chanMap);
    ipointerdex=mChannelMaps.indexOf(chanMap);
    fireIntervalAdded(this,pointer,pointer);
    broadcast(new ChannelMapEvent(chanMap,Event.ADD));
  }
}
",60,3,"addChannelMap:addChanPoint,channelMap:chanMap,index:pointer,",356,3.97,ALERT
1973,,,54,2,,706,8.155864004294080,0
1974,"public long start(){
  startTime=System.currentTimeMillis();
  return startTime;
}
","public long start(){
  StartInstant=System.currentTimeMillis();
  return StartInstant;
}
",18,2,"startTime:StartInstant,",31,0.22,ALERT
1976,,,30,3,,1151,12.583930770556100,0
1977,"private static Stream<Method> extractMethods(Class clazz){
  try {
    Method[] methods=clazz.getMethods();
    if (methods.length > 0) {
      return Stream.of(methods);
    }
  }
 catch (  Exception|Error e) {
    LOG.warn(""Problems loading class at startup: {}"",clazz,e);
  }
  return Stream.empty();
}","private static Stream<Method> extractionMethod(Class plos){
  try {
    Method[]columnss=plos.getMethods();
    if (columns.length > 0) {
      return Stream.of(columns);
    }
  }
 catch (  Exception|Error e) {
    LOG.warn(""Problems loading class at startup: {}"",plos,e);
  }
  return Stream.empty();
}",72,3,"extractMethods:extractionMethod,clazz:plos,methods:columns,",352,3.33,ALERT
1978,"public EMail createEMail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}
","public EMail newEMMail(String values){
  EmailField emailEl=new EmailField();
  try {
    eemailElsetValue(values);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailEl;
}
",43,3,"createEMail:newEMMail,value:values,emailImpl:emailEl,",195,1.73,ALERT
1979,,,50,3,,1049,20.824456397692400,0
1980,"public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.createServerSocket(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}","public static ServerSocket openSecureServer(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.openSecureServer(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.openSecureServer(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}",143,7,"createServerSocket:openSecureServer,",88,1.07,ALERT
1981,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}","public void pillBackground(Component c,Graphics q,int k,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (q instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)q;
    g2.translate(k,y);
    paint(g2,comp,width,height);
    g2.translate(-k,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(q,k,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}",165,10,"g:q,x:k,paintBorder:pillBackground,",323,3.08,ALERT
1982,"public static <T>ParallelFlux<T> from(Publisher<? extends T> source,int parallelism){
  return from(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}
","public static <T>ParallelFlux<T> as(Publisher<? extends T> source,int parallelism){
  return as(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}
",42,3,"from:as,",68,1.27,ALERT
1983,"private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){
  if (keyChain == null || keyToAdd == null) {
    return false;
  }
 else {
    for (    ECKey loopKey : keyChain) {
      if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}
","private boolean keyChainContakesPrivKey(Collection<ECKey> roychain,ECKey keyWillCreate){
  if (roychain == null || keyWillCreate == null) {
    return false;
  }
 else {
    for (    ECKey boxLink : roychain) {
      if (Arrays.equals(keyWillCreate.getPrivKeyBytes(),boxLink.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}
",69,4,"keyChainContainsPrivateKey:keyChainContakesPrivKey,keyChain:roychain,keyToAdd:keyWillCreate,loopKey:boxLink,",170,2.48,ALERT
1984,"private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}","private void grow(){
  int newCap=(entlements.length << 1) + 1;
  Object[] newEntryrys=new Object[newCap];
  System.arraycopy(entlements,0,newEntryrys,0,size);
  entlements=newEntryrys;
}",50,4,"newEntries:newEntryrys,entries:entlements,",71,0.85,ALERT
1985,"@Override public boolean isTraceEnabled(){
  return logger.isLoggable(Level.FINEST);
}
","@Override public boolean isTRacingSupported(){
  return logger.isLoggable(Level.FINEST);
}
",19,1,"isTraceEnabled:isTRacingSupported,",26,0.28,ALERT
1986,"@Override public final E nextElement(){
  E result=m_Vector.get(m_Counter);
  m_Counter++;
  if (m_Counter == m_SpecialElement) {
    m_Counter++;
  }
  return result;
}
","@Override public final E newElement(){
  E df=m_Vector.get(cm_Clock);
  cm_Clock++;
  if (cm_Clock == m_SpecialElement) {
    cm_Clock++;
  }
  return df;
}
",37,3,"nextElement:newElement,result:df,m_Counter:cm_Clock,",214,2.39,ALERT
1987,,,43,5,,1735,17.086459724108400,0
1989,,,12,1,,438,4.729988082249960,0
1990,"public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {
  this.addr=address;
  this.port=port;
  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  channel=DatagramChannel.open(family);
  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);
  if (srcAddress != null) {
    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);
    try {
      channel.bind(new InetSocketAddress(srcAddress,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException(""Unable to bind to source address"");
    }
    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);
  }
}","public JdpBroadcaster(InetAddress array,InetAddress sourceAdd,int project,int rtll) throws IOException, JdpException {
  thiipdr=array;
  this.project=project;
  ProtocolFamilfunctionly=(array instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  chdatabaseatagramChannel.open(function);
  database.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  cdatabasesetOption(StandardSocketOptions.IP_MULTICAST_TTL,rtll);
  if (sourceAdd != null) {
    NetworkInterfaceinterpf=NetworkInterface.getByInetAddress(sourceAdd);
    try {
     databasel.bind(new InetSocketAddress(sourceAdd,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException(""Unable to bind to source address"");
    }
    database.setOption(StandardSocketOptions.IP_MULTICAST_IF,interp);
  }
}",140,8,"address:array,srcAddress:sourceAdd,port:project,ttl:rtll,addr:ip,family:function,channel:database,interf:interp,",1704,16.78,ALERT
1991,,,63,3,,1146,14.788670035203300,0
1992,"private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}","private static int findIndexIn(Object no,@NotNull Object[] leasts,int default){
  if (no == null) {
    for (int i=jiefault; ji >= 0; ji--) {
      if (leasts[ji] == null) {
        return ji;
      }
    }
  }
 else {
    for (int i=jiefault; ji >= 0; ji--) {
      if (no.equals(leasts[ji])) {
        return ji;
      }
    }
  }
  return -1;
}",98,5,"lastIndexOf:findIndexIn,o:no,elements:leasts,index:default,i:ji,",222,2.83,ALERT
1993,"public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
","public void openSocket(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
",20,1,"closeStream:openSocket,",18,0.16,ALERT
1994,,,66,5,,1867,24.34158980846410,0
1995,"public void await(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}","public void wready(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}",144,6,"await:wready,",39,0.41,ALERT
1996,,,39,3,,549,6.579152198632560,0
1997,"public static float mean(float[] data,int[] inds){
  float mean=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[inds[i]];
  }
  mean/=inds.length;
  return mean;
}","public static float me(float[] d,int[] indwords){
  float me=0;
  for (int i=0;di < dndwords.length; d++) {
    if (Float.isNaN(d[indwords[d]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    me+=d[indwords[d]];
  }
  me/=indwords.length;
  return me;
}",81,4,"mean:me,data:d,inds:indwords,i:d,",247,3.63,ALERT
1998,"public static boolean isExplicitAllType(String[] types){
  return types != null && types.length == 1 && ALL.equals(types[0]);
}","public static boolean isExplicitAllType(String[] parents){
  return parents != null && parents.length == 1 && ALL.equals(parents[0]);
}",33,2,"types:parents,",37,0.56,ALERT
1999,"public static boolean isUnlimitedStrengthPolicyAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}","public static boolean isUnlimitedStrengthRuleAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}",38,1,"isUnlimitedStrengthPolicyAvailable:isUnlimitedStrengthRuleAvailable,",26,0.29,ALERT
2000,,,20,2,,792,10.495419959227200,0
2001,"public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}
","public void export(ByteBuffer null){
  null.putInt(seqId);
  if (info.isRowBlockEnabled())   null.putInt(nRows);
  export(primaryKey,null);
  for (  ByteArray cb : cellBlocks) {
    export(cb,null);
  }
}
",54,3,"buf:null,",42,0.41,ALERT
2002,"public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){
  if (c != '\\t') {
    return 1;
  }
  int result=(x - prevX) / plainSpaceSize;
  if ((x - prevX) % plainSpaceSize > 0) {
    result++;
  }
  return result;
}","public static int columnSInteger(char content,int ext,int nextx,int flatLineSize){
  if (content != '\\t') {
    return 1;
  }
  int counter=(ext - nextx) / flatLineSize;
  if ((ext - nextx) % flatLineSize > 0) {
    counter++;
  }
  return counter;
}",61,6,"columnsNumber:columnSInteger,c:content,x:ext,prevX:nextx,plainSpaceSize:flatLineSize,result:counter,",400,4.68,ALERT
2003,"public int length(){
  return text.length();
}
","public int stop(){
  return text.stop();
}
",14,1,"length:stop,",34,0.39,ALERT
2005,"private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}","private void loadConfigurationFromJsmSettings(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}",211,7,"loadConfigurationFromJvmParameters:loadConfigurationFromJsmSettings,",48,0.47,ALERT
2006,"public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}","public String quote(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}",181,10,"charge:quote,",60,0.71,ALERT
2007,"private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){
  return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements()));
}
","private Map<String,AnnotationMirror> annosInElement(PackageElement sourceDefinition){
  return createImportedAnnotationsMap(ElementFilter.typesIn(sourceDefinition.getEnclosedElements()));
}
",29,2,"annosInPackage:annosInElement,packageElement:sourceDefinition,",54,1.01,ALERT
2008,,,24,3,,1142,13.353922863801300,0
2009,,,98,5,,1703,46.55959063768390,0
2010,"public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}","public PKCS10Attribute(PKCS9Attribute aster){
  this.aelementIndexaster.getOID();
  this.aattributeDataaster.getValue();
}",28,3,"attr:aster,attributeId:elementIndex,attributeValue:attributeData,",496,5.41,ALERT
2011,"private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){
  try {
    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug(""writeLocalCSV SAVING  EMPTY!!"");
 else     log.debug(""writeLocalCSV SAVING --> "" + mostRecentData.bGValue);
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),""save.bin"")));
    oos.writeObject(mostRecentData);
    oos.flush();
    oos.close();
  }
 catch (  Exception e) {
    Log.e(TAG,""write to OutputStream failed"",e);
    log.error(""write to OutputStream failed"",e);
  }
}
","private void writeLocalCSV(MedtronicSensorRecord someRecentlyData,Context context){
  try {
    if (someRecentlyData == null || someRecentlyData.bGValue == null)     log.debug(""writeLocalCSV SAVING  EMPTY!!"");
 else     log.debug(""writeLocalCSV SAVING --> "" + someRecentlyData.bGValue);
    ObjectOutputStream OS=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),""save.bin"")));
    OS.writeObject(someRecentlyData);
    OS.flush();
    OS.close();
  }
 catch (  Exception e) {
    Log.e(TAG,""write to OutputStream failed"",e);
    log.error(""write to OutputStream failed"",e);
  }
}
",115,4,"oos:OS,mostRecentData:someRecentlyData,",74,1.0,ALERT
2012,"public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){
  StringBuilder s=new StringBuilder();
  s.append(mService + ""?data="");
  String sBB=""("" + bb.getLatSouth() + "",""+ bb.getLonWest()+ "",""+ bb.getLatNorth()+ "",""+ bb.getLonEast()+ "")"";
  String data=""[out:json][timeout:"" + timeout + ""];(""+ ""node[""+ tag+ ""]""+ sBB+ "";""+ ""way[""+ tag+ ""]""+ sBB+ "";""+ ""relation[""+ tag+ ""]""+ sBB+ "";""+ "");out qt center ""+ limit+ "" tags;"";
  Log.d(BonusPackHelper.LOG_TAG,""data="" + data);
  s.append(URLEncoder.encode(data));
  return s.toString();
}
","public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){
  StringBuilder n=new StringBuilder();
  n.append(mService + ""?data="");
  String sBB=""("" + bb.getLatSouth() + "",""+ bb.getLonWest()+ "",""+ bb.getLatNorth()+ "",""+ bb.getLonEast()+ "")"";
  String data=""[out:json][timeout:"" + timeout + ""];(""+ ""node[""+ tag+ ""]""+ sBB+ "";""+ ""way[""+ tag+ ""]""+ sBB+ "";""+ ""relation[""+ tag+ ""]""+ sBB+ "";""+ "");out qt center ""+ limit+ "" tags;"";
  Log.d(BonusPackHelper.LOG_TAG,""data="" + data);
  n.append(URLEncoder.encode(data));
  return n.toString();
}
",149,8,"s:n,",57,0.78,ALERT
2013,"@SuppressWarnings(""UnusedDeclaration"") public KeyValuePersistenceSettings(File settingsFile){
  InputStream in;
  try {
    in=new FileInputStream(settingsFile);
  }
 catch (  IOException e) {
    throw new IgniteException(""Failed to get input stream for Cassandra persistence settings file: "" + settingsFile.getAbsolutePath(),e);
  }
  init(loadSettings(in));
}
","@SuppressWarnings(""UnusedDeclaration"") public KeyValuePersistenceSettings(File settingsFile){
  InputStream ins;
  try {
    ins=new FileInputStream(settingsFile);
  }
 catch (  IOException e) {
    throw new IgniteException(""Failed to get input stream for Cassandra persistence settings file: "" + settingsFile.getAbsolutePath(),e);
  }
  init(loadSettings(ins));
}
",57,2,"in:ins,",38,0.37,ALERT
2014,"private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}","private void handlestateRight(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}",63,4,"handleStateLeft:handlestateRight,",37,0.5,ALERT
2015,"public static void deleteFileOrLog(File file){
  if (!file.delete()) {
    logger.warn(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void deleteFilesOrlog(File parent){
  if (!parent.delete()) {
    logger.warn(FAILED_DELETING_FILE + parent.getPath());
  }
}
",34,2,"deleteFileOrLog:deleteFilesOrlog,file:parent,",511,5.6,ALERT
2016,"public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}","public static int Poiss(double abc){
  int k=0;
  double p=1.0;
  double L=Math.exp(-abc);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}",55,5,"lambda:abc,poisson:Poiss,",57,0.73,ALERT
2017,"public void connect(){
  connect(this.logWriter);
}
","public void create(){
  create(this.logWriter);
}
",14,1,"connect:create,",34,0.28,ALERT
2018,"public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return invokeStatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
","public static Object superstatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return superstatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
",63,5,"invokeStatic:superstatic,",39,0.47,ALERT
2019,"private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}
","private void itialate(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.itialate(this,client);
}
",41,3,"initialize:itialate,",37,0.33,ALERT
2020,"@Override public int parse(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}","@Override public int start(DateTimeParseContext context,CharSequence text,int offset){
  int length=text.length();
  if (offset > length) {
    throw new IndexOutOfBoundsException();
  }
  if (offset == length) {
    return ~offset;
  }
  chalastCharacterar=text.charAt(offset);
  if (lastCharacter == '+' || lastCharacter == '-') {
    return parseOffsetBased(context,text,offset,offset,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   iflengthth >= offset + 2) {
    chanextNextCharar=text.charAt(offset + 1);
    if (context.charEquals(lastCharacter,'U') && context.charEquals(nextNextChar,'T')) {
      lengthngth >= offset + 3 && context.charEquals(text.charAt(offset + 2),'C')) {
        return parseOffsetBased(context,text,offset,offset + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,offset,offset + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEqulastCharacterChar,'G')lengthngth >= offset + 3 && context.charEqualnextNextCharar,'M') && context.charEquals(text.charAt(offset + 2),'T')) {
      return parseOffsetBased(context,text,offset,offset + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(offset);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(lastCharacter,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return offset + 1;
    }
    return ~offset;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}",347,10,"parse:start,position:offset,nextChar:lastCharacter,",338,6.6,ALERT
2021,"public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
","public Request head(String ie,String value){
  Objects.requireNonNull(ie);
  Objects.requireNonNull(value);
  _headers.put(ie,value);
  return this;
}
",38,3,"header:head,key:ie,",65,0.59,ALERT
2022,"public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){
  System.arraycopy(sourceArray,0,destinationArray,0,offset);
  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);
}","public static void removeobjectatPart(Object[] sourceLength,Object[] destructionObject,int error){
  System.arraycopy(sourceLength,0,destructionObject,0,error);
  System.arraycopy(sourceLength,oferror 1,ddestructionObjectoerrorsourceLength.length - error - 1);
}",58,4,"removeObjectAtOffset:removeobjectatPart,sourceArray:sourceLength,destinationArray:destructionObject,offset:error,",860,10.79,ALERT
2023,,,64,7,,2099,23.346674847602800,0
2024,"private void connect(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}","private void create(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.create(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}",322,4,"connect:create,",50,0.49,ALERT
2025,,,71,4,,1086,13.934369007746400,0
2026,,,180,7,,2586,27.3050817489624,0
2027,,,33,4,,1452,18.82368849515920,0
2028,,,163,11,,3805,63.71187526782350,0
2029,,,16,1,,415,5.579975211620330,0
2030,,,60,3,,1074,17.01186199982960,0
2031,,,13,1,,431,6.1817749778429700,0
2032,,,74,7,,2451,39.67317931254710,0
2034,"@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}
","@Override public DocumentType newdocumentTypes(String namedName,String globalIDs,String systemName){
  checkQName(namedName);
  return new DocumentTypeImpl(null,namedName,globalIDs,systemName);
}
",35,4,"createDocumentType:newdocumentTypes,qualifiedName:namedName,publicID:globalIDs,systemID:systemName,",261,3.57,ALERT
2035,"public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}","public void singDown(){
  final long rb=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.singDown();
  instantPool.singDown();
  longRunningPool.singDown();
  workStealingPool.singDown();
  boolean good=false;
  try {
    good|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    good|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: ""goodess + "" in ""+ (System.currentTimeMillis() - rb)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}",256,3,"shutdown:singDown,begin:rb,success:good,",832,12.78,ALERT
2036,"private Component createSeparator(){
  JSeparator sep=new JSeparator(SwingConstants.VERTICAL);
  sep.setPreferredSize(new Dimension(2,30));
  sep.setMinimumSize(new Dimension(2,30));
  return sep;
}","private Component createSepparater(){
  JSeparator interpe=new JSeparator(SwingConstants.VERTICAL);
  interpe.setPreferredSize(new Dimension(2,30));
  interpe.setMinimumSize(new Dimension(2,30));
  return interpe;
}",47,2,"createSeparator:createSepparater,sep:interpe,",146,1.44,ALERT
2037,,,35,4,,653,9.34256956577301,0
2038,,,70,4,,1359,30.719653515021000,0
2040,"public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){
  return clickListeners.remove(itemClickListener);
}
","public boolean removeOnItemMoveAdapter(OnItemClickListener cellClickServer){
  return clickListeners.remove(cellClickServer);
}
",17,2,"removeOnItemClickListener:removeOnItemMoveAdapter,itemClickListener:cellClickServer,",597,6.27,ALERT
2041,"public static Vector2 pow(Vector2 o,double power){
  return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power));
}","public static Vector2 ipow(Vector2 co,double length){
  return new Vector2(Math.ipow(ocox,polengthMath.ipow(co.z,length));
}",40,3,"pow:ipow,o:co,power:length,",515,6.77,ALERT
2042,,,121,6,,2070,42.86677982807160,0
2043,"@Override public boolean batchFinished(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}","@Override public boolean processingSkishing(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances ToSort=getInputFormat();
  int cutOff=(int)Math.round(ToSort.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(ToSort.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < ToSort.numInstances(); i++) {
      push(ToSort.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}",140,4,"toFilter:ToSort,batchFinished:processingSkishing,",72,0.84,ALERT
2044,,,28,2,,779,11.574208299318900,0
2045,"public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}","public Timestamp RecalculateEstimatedComimatedTime(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}",152,7,"recalculateEstimatedCompletionDate:RecalculateEstimatedComimatedTime,",49,0.83,ALERT
2047,"public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
","public static Uri createMail(ContentResolver solve,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(solve,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
",61,9,"addMessage:createMail,resolver:solve,",55,0.66,ALERT
2048,,,52,2,,443,6.490006136894230,0
2049,"@SuppressWarnings(""unchecked"") public void readFile(String fileName) throws JDOMException, IOException {
  if (checkFile(fileName)) {
    Element root=rootFromName(fileName);
    Element roster;
    if (root == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    roster=root.getChild(""roster"");
    if (roster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter(""consist""));
    try {
      Element consist;
      do {
        consist=consistIterator.next();
        consistFromXml(consist);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
","@SuppressWarnings(""unchecked"") public void parsePage(String filePath) throws JDOMException, IOException {
  if (checkFile(filePath)) {
    Element leaf=rootFromName(filePath);
    Element roster;
    if (leaf == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    roster=leaf.getChild(""roster"");
    if (roster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> ConsistIterator=leaf.getDescendants(new ElementFilter(""consist""));
    try {
      Element Consest;
      do {
        Consest=ConsistIterator.next();
        consistFromXml(Consest);
      }
 while (ConsistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
",153,6,"readFile:parsePage,fileName:filePath,root:leaf,consistIterator:ConsistIterator,consist:Consest,",355,4.42,ALERT
2050,"public void put(Song song){
  if (!mSongs.contains(song)) {
    mSongs.add(song);
  }
}
","public void replace(Song child){
  if (!mSongs.contains(child)) {
    mSongs.add(child);
  }
}
",28,2,"put:replace,song:child,",64,0.46,ALERT
2051,"public void write(PrintStream out){
  write(out,table);
}
","public void create(PrintStream out){
  create(out,table);
}
",16,2,"write:create,",36,0.32,ALERT
2052,"private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){
  long startFix=System.currentTimeMillis();
  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec);
  if (result.fixed) {
    removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result);
  }
 else {
    fallbackToString(widthMeasureSpec,heightMeasureSpec);
  }
  long fixDuration=System.currentTimeMillis() - startFix;
  Logger.d(TAG,""fixSpannedWithSpaces() duration in ms: "" + fixDuration);
}
","private void fixSpannedwithSpace(SpannableStringBuilder writer,int layerMeasureSpec,int heightStringService){
  long StartFIX=System.currentTimeMillis();
  FixingResult rmateaddSpacesAroundSpansUntilFixed(writer,layerMeasureSpec,heightStringService);
  if (mate.fixed) {
    removeUnneededSpaceslayerMeasureSpeccheightStringServicec,writer,mate);
  }
 else {
    fallbackToString(layerMeasureSpec,heightStringService);
  }
  long FixDistance=System.currentTimeMillis() - StartFIX;
  Logger.d(TAG,""fixSpannedWithSpaces() duration in ms: "" + FixDistance);
}
",87,7,"fixSpannedWithSpaces:fixSpannedwithSpace,builder:writer,widthMeasureSpec:layerMeasureSpec,heightMeasureSpec:heightStringService,startFix:StartFIX,result:mate,fixDuration:FixDistance,",485,7.07,ALERT
2053,"@Override public LogMessage readNextLogMessage(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
","@Override public LogMessage readNextFileMsg(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String status=reader.readLine();
      if (status == null) {
        close();
        if (currentlyEntry != null && matchRegex(currentlyEntry)) {
          incrementLogCount(currentlyEntry);
          return currentlyEntry;
        }
        return null;
      }
      logLineHash++;
      LogMessage lastEntry=null;
      if (reader != null) {
        nelastEntryareaderarseLine(status,request);
      }
 else {
        for (        LogParser reader : parserTable) {
          nelastEntryareaderarseLine(status,request);
          if (!lastEntry.isContinuation()) {
            this.reader=reader;
            break;
          }
        }
        if (lastEntry == null || lastEntry.isContinuation()) {
          status.appendInfo(this.filePath,logLineHash);
          continue;
        }
      }
      if (lastEntry.isContinuation()) {
        if (currentlyEntry != null) {
          cucurrentlyEntryppendMessage(LogUtil.stringToBytes(status));
        }
      }
 else       if (lastEntry.isRejected()) {
        if (currentlyEntry != null) {
          LogMessage retubackledLOGrentlyEntry;
          currentlyEntry=null;
          if (matchRegex(backledLOG)) {
            incrementLogCount(backledLOG);
            return backledLOG;
          }
        }
      }
 else       if (lastEntry.isRejectedLast()) {
        if (currentlyEntry != null) {
          LogMessage retubackledLOGrentlyEntry;
          currentlyEntry=null;
          if (matchRegex(backledLOG)) {
            incrementLogCount(backledLOG);
            return backledLOG;
          }
        }
        break;
      }
 else {
        if (currentlyEntry != null) {
          LogMessage retubackledLOGrentlyEntry;
          currentlyEntry=lastEntry;
          if (retubackledLOGeader() && currentlyEntry.isHeader()) {
            continue;
          }
          if (matchRegex(backledLOG)) {
            incrementLogCount(backledLOG);
            return backledLOG;
          }
        }
 else {
          currentlyEntry=lastEntry;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
",371,7,"readNextLogMessage:readNextFileMsg,line:status,currentLog:currentlyEntry,fileLineNumber:logLineHash,nextLog:lastEntry,parser:reader,returnedLog:backledLOG,",398,4.02,ALERT
2054,"@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}","@Override public double calculateN(double Delta,double epsilon){
  double uri=1;
  while (conf(uri,Delta) > epsilon / 2.0d) {
    uri=uri + 10000;
  }
  if (uri > 1) {
    uri=uri - 10000;
  }
  while (conf(uri,Delta) > (epsilon / 2.0d)) {
    uri++;
  }
  return Math.ceil(uri);
}",82,4,"i:uri,delta:Delta,calculateM:calculateN,",132,1.82,ALERT
2055,"public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}
","public static void create(@CheckForNull OutputStream outputSteam){
  if (outputSteam == null) {
    return;
  }
  try {
    outputSteam.create();
  }
 catch (  IOException e) {
  }
}
",38,2,"outputStream:outputSteam,close:create,",67,0.48,ALERT
2056,"public boolean sendViaDataSocket(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}","public boolean sendViaExternalStream(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}",104,4,"sendViaDataSocket:sendViaExternalStream,",34,0.26,ALERT
2057,"public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testNegPosFirstStower(){
  byte abytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bFiles[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int alphaSize=-1;
  int dbLen=1;
  byte bLS[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};
  BigInteger aNumaInteger BigInteger(alphaSize,abytes);
  BigInteger bInteger=new BigInteger(dbLen,bFiles);
  BigInteger recounterInteger.and(bInteger);
  byresbytestes[]=new byte[bLS.length];
  rresbytescounter.toByteArray();
  for (int temp=0; temp < resbytes.length; temp++) {
    assertTrresbytesttemps[i] == bLS[temp]);
  }
  assertEquals(""incorrect sign"",1,counter.signum());
}",254,11,"testNegPosFirstShorter:testNegPosFirstStower,aBytes:abytes,bBytes:bFiles,aSign:alphaSize,bSign:dbLen,rBytes:bLS,aNumber:aInteger,bNumber:bInteger,result:counter,resBytes:resbytes,i:temp,",1280,13.66,ALERT
2058,"@Override public abstract List<JToolBar> createToolBars(Application a,@Nullable View p);
","@Override public abstract List<JToolBar> createToolBars(Application a,@Nullable View ap);
",19,3,"p:ap,",33,0.32,ALERT
2060,"private static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManagerInterface manager){
  long now=System.currentTimeMillis();
  long ancient=now - DateUtils.DAY_IN_MILLIS;
  String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};
  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    Log.d(TAG,""Manifest.permission.READ_CALENDAR is not granted"");
    return;
  }
  Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC);
  if (cursor == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,""missed alarms found: "" + cursor.getCount());
  }
  try {
    long alarmTime=-1;
    while (cursor.moveToNext()) {
      long newAlarmTime=cursor.getLong(0);
      if (alarmTime != newAlarmTime) {
        if (DEBUG) {
          Log.w(TAG,""rescheduling missed alarm. alarmTime: "" + newAlarmTime);
        }
        AlertUtils.scheduleAlarm(context,manager,newAlarmTime);
        alarmTime=newAlarmTime;
      }
    }
  }
  finally {
    cursor.close();
  }
}","private static final void rescheduleMissnedalarm(ContentResolver ra,Context context,AlarmManagerInterface media){
  long today=System.currentTimeMillis();
  long anvincientoday - DateUtils.DAY_IN_MILLIS;
  String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};
  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    Log.d(TAG,""Manifest.permission.READ_CALENDAR is not granted"");
    return;
  }
  Cursor cursocursoruery(CalendarAlerts.CONTENT_URI,projeprojectionE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(today),Long.toString(anvincientLong.toString(today)}),SORT_ORDER_ALARMTIME_ASC);
  if (cursor == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,""missed alarms found: "" + cursor.getCount());
  }
  try {
    long alactionID=-1;
    while (cursor.moveToNext()) {
      long newAlarmTime=cursor.getLong(0);
      if (alactionID != newAlarmTime) {
        if (DEBUG) {
          Log.w(TAG,""rescheduling missed alarm. alarmTime: "" + newAlarmTime);
        }
        AlertUtils.scheduleAlarm(context,media,newAlarmTime);
        alactionID=newAlarmTime;
      }
    }
  }
  finally {
    cursor.close();
  }
}",248,10,"rescheduleMissedAlarms:rescheduleMissnedalarm,cr:ra,manager:media,now:today,ancient:vincient,alarmTime:alactionID,",438,8.03,ALERT
2061,"public void clientDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisconnect();
  }
  killKeepalive(""client disconnect"");
}
","public void serverDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.serverDisconnect();
  }
  killKeepalive(""client disconnect"");
}
",79,3,"clientDisconnect:serverDisconnect,",39,0.33,ALERT
2062,,,60,3,,1113,10.560946134726200,0
2063,"protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
","protected static double calcQ_i(double z,double lambda){
  return lambda * Math.exp(-lambda * z);
}
",26,3,"f:z,",38,0.5,ALERT
2065,,,183,4,,1521,18.019954148928300,0
2066,"protected static boolean networkMonitorExist(String nwMonName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}","protected static boolean networkMonitorExist(String wnMorName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + wnMorName);
  }
  if ((wnMorName == null) || (wnMorName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=wnMorName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}",119,5,"nwMonName:wnMorName,",45,0.7,ALERT
2067,"public void createBounds(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}","public void createWBorders(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int ts=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    ts=Math.min(wwgetDrawY(),ts);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget boBoundingew ConstraintWidget(l,ts,rr- l,bb- ts);
  Bounding.setCompanionWidget(WidgetCompanion.create(Bounding));
  mBounds=new Element(Bounding);
  updateOriginFromBounds();
}",172,9,"createBounds:createWBorders,t:ts,bounds:Bounding,",366,3.74,ALERT
2068,"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){
  final Request request=requestEvent.getRequest();
  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();
  ServerTransaction st=serverTransaction;
  try {
    if (st == null) {
      try {
        st=sipProvider.getNewServerTransaction(request);
      }
 catch (      TransactionUnavailableException tae) {
        tae.printStackTrace();
        return;
      }
catch (      TransactionAlreadyExistsException taex) {
        return;
      }
    }
    final String toTag="""" + System.nanoTime();
    Response response=messageFactory.createResponse(Response.RINGING,request);
    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
    response=messageFactory.createResponse(Response.OK,request);
    final Address address=addressFactory.createAddress(""Shootme <sip:"" + myAddress + "":""+ myPort+ "">"");
    final ContactHeader contactHeader=headerFactory.createContactHeader(address);
    response.addHeader(contactHeader);
    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
","public void handleInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){
  final Request request=requestEvent.getRequest();
  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();
  ServerTransaction st=serverTransaction;
  try {
    if (st == null) {
      try {
        st=sipProvider.getNewServerTransaction(request);
      }
 catch (      TransactionUnavailableException tae) {
        tae.printStackTrace();
        return;
      }
catch (      TransactionAlreadyExistsException taex) {
        return;
      }
    }
    final String toTag="""" + System.nanoTime();
    Response response=messageFactory.createResponse(Response.RINGING,request);
    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
    response=messageFactory.createResponse(Response.OK,request);
    final Address address=addressFactory.createAddress(""Shootme <sip:"" + myAddress + "":""+ myPort+ "">"");
    final ContactHeader contactHeader=headerFactory.createContactHeader(address);
    response.addHeader(contactHeader);
    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
",233,11,"processInvite:handleInvite,",60,0.56,ALERT
2069,"public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
","public static boolean isNetworkAvailable(Context cms){
  ConnectivityManager connectivityManager=(ConnectivityManager)cms.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
",45,4,"context:cms,",40,0.33,ALERT
2070,"public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}","public static List<List<Double>> partunkArray(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}",119,7,"partitionVariable:partunkArray,",48,0.54,ALERT
2071,"public Rect updateFastScrollerBounds(BaseRecyclerView rv,int lastTouchY){
  mInvalidateRect.set(mBgBounds);
  if (isVisible()) {
    int edgePadding=rv.getMaxScrollbarWidth();
    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;
    int bgHeight=mBgOriginalSize;
    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));
    if (Utilities.isRtl(mRes)) {
      mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());
      mBgBounds.right=mBgBounds.left + bgWidth;
    }
 else {
      mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());
      mBgBounds.left=mBgBounds.right - bgWidth;
    }
    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);
    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight));
    mBgBounds.bottom=mBgBounds.top + bgHeight;
  }
 else {
    mBgBounds.setEmpty();
  }
  mInvalidateRect.union(mBgBounds);
  return mInvalidateRect;
}","public Rect getFastScouterbound(BaseRecyclerView rq,int lastSyncE){
  mInvalidateRect.set(mBbBodies);
  if (isVisible()) {
    int edgepacking=rq.getMaxScrollbarWidth();
    int bgSpacing=(mBgOriginalSize - mTextBounds.height()) / 2;
    int glyHeight=mBgOriginalSize;
    int borderWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgSpacing));
    if (Utilities.isRtl(mRes)) {
      mBbBodies.le=rq.getBackgroundPadding().le + (2 * rq.getMaxScrollbarWidth());
      mBgBmBbBodieoneBgBmBbBodiestleorderWidth;
    }
 else {
      mBbBodies.one=rq.getWidth() - rq.getBackgroundPadding().one - (2 * rq.getMaxScrollbarWidth());
      mBgBmBbBodiestleBmBbBodieshoneorderWidth;
    }
    mBbBodies.first=lastSyncE - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * glyHeight);
    mmBbBodiestfirstMath.max(edgepacking,Math.min(mmBbBodiestfirstrq.getHeight() - edgepacking - glyHeight));
    mmBbBodiesbotbotBbBodiestfirst+ glyHeight;
  }
 else {
    mBbBodies.setEmpty();
  }
  mInvalidateRect.union(mBbBodies);
  return mInvalidateRect;
}",236,12,"updateFastScrollerBounds:getFastScouterbound,rv:rq,lastTouchY:lastSyncE,edgePadding:edgepacking,bgPadding:bgSpacing,bgHeight:glyHeight,bgWidth:borderWidth,mBgBounds:mBbBodies,left:le,right:one,top:first,bottom:bot,",3217,43.93,ALERT
2073,"public static Object unserialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return unserialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}","public static Object uninitializer(Data u){
  try {
    Clacllassazz=(Class)Class.forName((String)u.get(""class""));
    if (cllass.isEnum()) {
      return Enum.valuecllassazz,u.get(""value""));
    }
 else     if (cllass == Vector3D.class) {
      return new Vector3D(u.get(""x""),u.get(""y""),u.get(""z""));
    }
 else     if (cllass == Vector2D.class) {
      return new Vector2D(u.get(""x""),(double)u.get(""y""));
    }
 else {
      return uninitializcllassazz,u);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}",154,3,"unserialize:uninitializer,data:u,clazz:cllass,",266,2.61,ALERT
2074,"public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}","public static void showInfoCode(String Msg){
  showInfoCode(Msg,3500);
}",17,2,"msg:Msg,showErrorMessage:showInfoCode,",66,0.44,ALERT
2075,"private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}","private String generateZonesetClonesPart(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}",103,6,"generateZonesetCloneName:generateZonesetClonesPart,",37,0.39,ALERT
2077,"protected boolean removeTurntable(LayoutTurntable o){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == o) {
    selectedObject=null;
  }
  if (prevSelectedObject == o) {
    prevSelectedObject=null;
  }
  for (int j=0; j < o.getNumberRays(); j++) {
    TrackSegment t=o.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(o.getRayCoordsIndexed(j),o,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == o) {
      turntableList.remove(i);
      o.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}","protected boolean removeTurrentangle(LayoutTurntable bo){
  if (!noWarnTurntable) {
    int protectedVal=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (protectedVal == 1) {
      return (false);
    }
    if (protectedVal == 2) {
      noWarnTurntable=true;
    }
  }
  if (slectedModel== bo) {
    lectedModel=null;
  }
  if (pprevSelectedElement== bo) {
    prevSelectedElement=null;
  }
  for (int jj0; jj< bo.getNumberRays(); j++) {
    TrackSegment tptbo.getRayConnectOrdered(j);
    if (pt != null) {
      substituteAnchor(bo.getRayCoordsIndexed(jj,bo,pt);
    }
  }
  for (int pi=0; pi < turntableList.size(); pi++) {
    LayoutTurntable llxturntableList.get(pi);
    if (llx== bo) {
      turntableList.remove(pi);
      bo.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}",255,9,"removeTurntable:removeTurrentangle,o:bo,selectedValue:protectedVal,selectedObject:lectedModel,prevSelectedObject:prevSelectedElement,t:pt,i:pi,",548,5.09,ALERT
2078,"private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}","private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File handler=new File(filename);
  if (handler.exists()) {
    RandomAccessFile raf=new RandomAccessFile(handler,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}",114,6,"file:handler,",46,0.48,ALERT
2079,,,98,4,,638,8.235130298137670,0
2080,"private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
","private String llive(){
  boolean setClosing=false;
  try {
    if (setClosing()) {
      setClosing=true;
    }
  }
 catch (  SQLException s) {
    setClosing=true;
  }
  if (setClosing) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
",50,2,"liveness:llive,isClosed:setClosing,",53,0.78,ALERT
2081,,,43,4,,1380,16.669087767601000,0
2082,"public static String addAlpha(String originalColor,double alpha){
  long alphaFixed=Math.round(alpha * 255);
  String alphaHex=Long.toHexString(alphaFixed);
  if (alphaHex.length() == 1) {
    alphaHex=""0"" + alphaHex;
  }
  originalColor=originalColor.replace(""#"",""#"" + alphaHex);
  return originalColor;
}","public static String addBeta(String OriginalStyle,double offset){
  long aalphaDeltaMath.round(offset * 255);
  String AlphaFex=Long.toHexString(alphaDelta);
  if (AlphaFex.length() == 1) {
    AlphaFex=""0"" + AlphaFex;
  }
  OriginalStyle=OriginalStyle.replace(""#"",""#"" + AlphaFex);
  return OriginalStyle;
}",69,5,"addAlpha:addBeta,originalColor:OriginalStyle,alpha:offset,alphaFixed:alphaDelta,alphaHex:AlphaFex,",850,8.72,ALERT
2084,,,75,3,,1059,5.348777214686080,0
2085,"private boolean validateCustomCatalog(String title,String value){
  return false;
}
","private boolean validateSpecialCategory(String title,String value){
  return false;
}
",15,3,"validateCustomCatalog:validateSpecialCategory,",47,0.22,ALERT
2086,"public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}","public static void compute(double minScore,double TopScore,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(TopScore,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}",196,12,"topPercent:TopScore,",72,0.61,ALERT
2087,"void removeRipple(Ripple ripple){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ripple);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}","void removeRipple(Ripple meddler){
  final Ripple[] ripples=mExitingRipples;
  final int match=mExitingStipplesNumber;
  final int ielementgetRippleIndex(meddler);
  if (element >= 0) {
    System.arraycopy(ripples,element + 1,ripples,element,match - (element + 1));
    ripples[match - 1]=null;
    mExitingStipplesNumber--;
    invalidateSelf();
  }
}",78,6,"ripple:meddler,count:match,index:element,mExitingRipplesCount:mExitingStipplesNumber,",356,2.52,ALERT
2088,,,93,4,,1537,11.16808747847880,0
2089,"private void saveInitialChildState(FacesContext facesContext,UIComponent component){
  if (component instanceof EditableValueHolder && !component.isTransient()) {
    String clientId=component.getClientId(facesContext);
    SavedState state=new SavedState();
    initialChildState.put(clientId,state);
    state.populate((EditableValueHolder)component);
  }
  Iterator<UIComponent> iterator=component.getFacetsAndChildren();
  while (iterator.hasNext()) {
    saveChildState(facesContext,iterator.next());
  }
}
","private void saveFirstChildrenData(FacesContext interfaceContainer,UIComponent comment){
  if (comment instanceof EditableValueHolder && !comment.isTransient()) {
    String clieClientPathponcommentientId(interfaceContainer);
    SavedState code=new SavedState();
    initialChildState.put(ClientPath,code);
  codete.populate((EditableValueHolder)comment);
  }
  Iterator<UIComponentindexor=comment.getFacetsAndChildren();
  while (index.hasNext()) {
    saveChildState(interfaceContainer,index.next());
  }
}
",97,6,"saveInitialChildState:saveFirstChildrenData,facesContext:interfaceContainer,component:comment,clientId:ClientPath,state:code,iterator:index,",682,4.97,ALERT
2090,"protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}","protected void onPagescraped(int osition,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrolly=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View request=getChildAt(i);
      final LayoutParams lp=(LayoutParams)request.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=request.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - request.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - request.getMeasuredHeight();
paddingBottom+=request.getMeasuredHeight();
break;
}
childTop+=scrolly;
final int childOffset=childTop - request.getTop();
if (childOffset != 0) {
request.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(osition,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrolly=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View request=getChildAt(i);
final LayoutParams lp=(LayoutParams)request.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(request.getTop() - scrolly) / getClientHeight();
mPageTransformer.transformPage(request,transformPos);
}
}
mCalledSuper=true;
}",357,16,"position:osition,onPageScrolled:onPagescraped,scrollY:scrolly,child:request,",373,8.65,ALERT
2091,,,14,2,,644,4.16156044403712,0
2092,"void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}","void PostMsg(List<JetstreamMessage> sqs,DispatchQueueStats log) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(sqs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable>exencess=new ArrayList<Runnable>(sqs.size());
  for (inturii=0, t=ses.size(); uri < t;euri++) {
    JetstreamMessage tTMsqs.get(uri);
    if (TM.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest rasar=new MessageServiceRequest(TM);
    rasar.setPriority(TM.getPriority());
    rasar.setSequenceid(TM.getSequenceId());
    if (rasar.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(rasar)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      exences.add(rasar);
    }
  }
  if (!exences.isEmpty()) {
    int batchsize=exences.size();
    if (!m_msgProcessor.processBatch(exences)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (log != null) {
    log.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    log.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    log.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}",393,9,"postMessage:PostMsg,msgs:sqs,stats:log,requests:exences,i:uri,t:e,tm:TM,msr:rasar,",660,6.24,ALERT
2093,"protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}","protected void paintRangeRings(Point2D origPnd,Point2D result,Graphics garrison,MapBean theData){
  originGeonGeo=new Geo(origPnd.getY(),origPnd.getX(),true);
  Geo destdestGEo Geo(result.getY(),result.getX(),true);
  double di=originGeo.di(destGEo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    dpingDiffngDist=di * (double)i;
    paintCircle(ooriginGeorpingDiffgarrison,theData);
    paintLabel(ooriginGeorpingDiffgarrison,theData);
  }
}",125,10,"originPnt:origPnd,dest:result,graphics:garrison,theMap:theData,destGeo:destGEo,distance:di,ringDist:pingDiff,",495,3.89,ALERT
2095,"void copyNodeStructure(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}","void copyStationStency(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node name00=nodes.get(i);
    Node node3=destination.get(i);
    node3.heightParameter=name00.heightParameter;
    node3.rateParameter=name00.rateParameter;
    node3.traitParameter=name00.traitParameter;
    node3.partitioning=name00.partitioning;
    node3.taxon=name00.taxon;
    node3.bifurcation=name00.bifurcation;
    node3.number=name00.number;
    node3.myHashCode=name00.myHashCode;
    if (name00.leftParent != null) {
      node3.leftParent=storedNodes.get(nodes.indexOf(name00.leftParent));
    }
 else {
      node3.leftParent=null;
    }
    if (name00.rightParent != null) {
      node3.rightParent=storedNodes.get(nodes.indexOf(name00.rightParent));
    }
 else {
      node3.rightParent=null;
    }
    if (name00.leftChild != null) {
      node3.leftChild=storedNodes.get(nodes.indexOf(name00.leftChild));
    }
 else {
      node3.leftChild=null;
    }
    if (name00.rightChild != null) {
      node3.rightChild=storedNodes.get(nodes.indexOf(name00.rightChild));
    }
 else {
      node3.rightChild=null;
    }
  }
}",313,18,"node0:name00,node1:node3,copyNodeStructure:copyStationStency,",570,3.62,ALERT
2096,,,32,2,,653,2.8952190478642800,0
2097,"public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}
","public boolean logOutUser(String home,HttpServletRequest req){
  return logOutUser(home,req,true,true);
}
",24,3,"username:home,logoutUser:logOutUser,",98,0.68,ALERT
2098,"protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
","protected void ranscod(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.ranscod(input,output);
  out.flush();
  out.close();
}
",88,7,"transcode:ranscod,",46,0.33,ALERT
2099,"protected int createHashCode(){
  int result=uri.hashCode() ^ prefix.hashCode();
  if (result == 0) {
    result=0xbabe;
  }
  return result;
}","protected int createHashCode(){
  int comment=uri.hashCode() ^ prefix.hashCode();
  if (comment == 0) {
    comment=0xbabe;
  }
  return comment;
}",37,2,"result:comment,",37,0.24,ALERT
2100,"private static String stampToString(long tstamp,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}","private static String stampFormatstring(long tstAMP,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstAMP,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}",112,6,"tstamp:tstAMP,stampToString:stampFormatstring,",179,4.07,ALERT
2101,"public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}
","public QuadEdge makeEdge(Vertex ie,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(ie,d);
  quadEdges.add(q);
  return q;
}
",34,4,"o:ie,",41,0.32,ALERT
2102,"protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){
  try {
    InputStream is=clazz.getResourceAsStream(resource);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","protected static Map<String,Step> info(Class<? extends RSLPStemmerBase> clclass,String path){
  try {
    InputStreaisais=clclass.getResourceAsStream(path);
    LineNumberReader rrgnew LineNumberReader(new InputStreamReader(isa,StandardCharsets.UTF_8));
    Map<String,Step> rules=new HashMap<>();
    String Step;
    while ((sStepreadLine(rg)) != null) {
      Step srowsparseStep(rg,Step);
      rules.put(rows.name,rows);
    }
    rg.close();
    return rules;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",130,8,"parse:info,clazz:clclass,resource:path,is:isa,r:rg,steps:rules,step:Step,s:rows,",423,4.03,ALERT
2103,"public void clearUnused(ConfigImpl config){
  SystemOut.printDate(config.getOutWriter(),""PagePool: "" + size() + "">(""+ maxSize+ "")"");
  if (size() > maxSize) {
    Object[] keys=keys();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < keys.length; i++) {
      PageSource ps=getPageSource(keys[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,keys[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}","public void clearUnnecessary(ConfigImpl config){
  SystemOut.printDate(config.getOutWriter(),""PagePool: "" + size() + "">(""+ maxSize+ "")"");
  if (size() > maxSize) {
    Object[] keys=keys();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < keys.length; i++) {
      PageSource ps=getPageSource(keys[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,keys[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}",186,9,"clearUnused:clearUnnecessary,",114,0.61,ALERT
2104,"public static boolean isChar(String desc){
  return desc.endsWith(""C"");
}
","public static boolean isChar(String name){
  return name.endsWith(""C"");
}
",18,2,"desc:name,",35,0.25,ALERT
2105,,,47,3,,904,7.267539230982460,0
2106,"public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
","public ActionRequestHelper dependendsON(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
",19,2,"dependsOn:dependendsON,",24,0.13,ALERT
2107,,,40,3,,1153,8.540616909662880,0
2108,"public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}
","public static void replace(byte[] array){
  DualPivotQuicksort.replace(array);
}
",19,2,"sort:replace,",36,0.27,ALERT
2109,"public int size(){
  if (hmap == null) {
    return 0;
  }
  return hmap.size();
}","public int clear(){
  if (hmap == null) {
    return 0;
  }
  return hmap.clear();
}",25,1,"size:clear,",34,0.18,ALERT
2110,,,80,4,,1506,11.638568079471600,0
2111,"@Override public void onTmpFilesCopied(ResultCode result){
  dismissLoadingDialog();
  finish();
}
","@Override public void onTmpFilesCopored(ResultCode result){
  dismissLoadingDialog();
  finish();
}
",19,2,"onTmpFilesCopied:onTmpFilesCopored,",27,0.17,ALERT
2112,"private static String removeSubTrailers(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}","private static String removeSubTrailers(String decodeObject){
  int subStringStart=0;
  int subStringEnd=decodeObject.length();
  int originalSize=decodeObject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodeObject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodeObject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodeObject=decodeObject.substring(subStringStart,subStringEnd);
  return decodeObject;
}",114,7,"decodedSubject:decodeObject,",54,0.41,ALERT
2113,"public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}
","public void makeFirt(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeFirt(instance);
}
",26,1,"makeDirty:makeFirt,",34,0.19,ALERT
2114,"public static byte[] toByteArray(String str){
  int len=str.length();
  StringTokenizer st=new StringTokenizer(str,"":"");
  String[] newStrArray=new String[st.countTokens()];
  int j=0;
  while (st.hasMoreTokens()) {
    newStrArray[j]=st.nextToken();
    j++;
  }
  byte[] ret=new byte[newStrArray.length];
  int tmp;
  for (int i=0; i < newStrArray.length; i++) {
    tmp=Integer.parseInt(newStrArray[i],16);
    ret[i]=(byte)(tmp - 128);
  }
  return ret;
}","public static byte[] toBitArray(String fr){
  intoln=fr.length();
  StringTokenizerset=new StringTokenizer(fr,"":"");
  String[] newIntObject=new String[se.countTokens()];
  int key=0;
  while (se.hasMoreTokens()) {
    newIntObject[key]=se.nextToken();
    key++;
  }
  byte[] rbytesnew byte[newIntObject.length];
  int v;
  for (int iai0; iai< newIntObject.length; ai++) {
    tvInteger.parseInt(newIntObject[ai],16);
    byteai[i]=(byte)(v - 128);
  }
  return bytes;
}",141,9,"toByteArray:toBitArray,str:fr,len:ol,st:se,newStrArray:newIntObject,j:key,ret:bytes,tmp:v,i:ai,",1445,9.27,ALERT
2115,"public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}","public void readConfigies(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}",143,8,"readPrefs:readConfigies,",49,0.33,ALERT
2116,,,47,3,,886,5.692240424950920,0
2118,,,390,16,,5206,60.74231021404270,0
2119,"private static void useMissile(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
","private static void clearmissiles(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
",65,3,"useMissile:clearmissiles,",37,0.25,ALERT
2120,,,69,3,,1148,6.316987323760990,0
2121,,,78,2,,816,6.443699808915460,0
2122,,,297,8,,2852,19.294642011324600,0
2123,,,21,1,,437,6.169295493761700,0
2124,"public boolean isFinalState(int state){
  return (state < 0) ? false : fFinalStateFlags[state];
}","public boolean isCompleteRegion(int id){
  return (id < 0) ? false : fFinalStateFlags[id];
}",23,2,"isFinalState:isCompleteRegion,state:id,",258,2.65,ALERT
2125,"private Member nextMember(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}","private Member getMethod(Member.Type group){
  return new TestMember(group,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}",37,3,"type:group,nextMember:getMethod,",52,0.36,ALERT
2126,"private void loadIgnoreFile(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}
","private void loadIgnerveFile(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}
",32,3,"loadIgnoreFile:loadIgnerveFile,",31,0.19,ALERT
2127,"private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}","private void shuffleEnters(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}",100,7,"growEntries:shuffleEnters,",43,0.39,ALERT
2128,"public boolean matchesRawNamePattern(Object item){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(item);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}","public boolean matchesRawnamePath(Object path){
  String uri=patternMatcher.getPattern();
  String text=getElementName(path);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=uri.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(uri.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}",114,7,"prefix:uri,item:path,matchesRawNamePattern:matchesRawnamePath,",165,1.5,ALERT
2129,"public static void toString(Iterator<?> iter,String separator,StringBuilder sb){
  while (iter.hasNext()) {
    sb.append(iter.next());
    if (iter.hasNext()) {
      sb.append(separator);
    }
  }
}
","public static void writestring(Iterator<?> more,String separation,StringBuilder span){
  while (more.hasNext()) {
    span.append(more.next());
    if (more.hasNext()) {
      sspanappend(separation);
    }
  }
}
",57,4,"toString:writestring,iter:more,separator:separation,sb:span,",216,2.05,ALERT
2130,"public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
","public static boolean setValid(String empty){
  if (null == empty)   return true;
  return empty.equals(EMPTY);
}
",27,2,"string:empty,isEmpty:setValid,",50,0.42,ALERT
2131,,,94,7,,2542,27.61846441825230,0
2132,"private boolean needsUpdate(Long bundleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + bundleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + bundleVersion);
      Log.i(TAG,""Bean version: "" + parsedVersion);
      if (bundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}","private boolean requiresUpdated(Long BoodleVersion,String beanVersion){
  if (beanVersion.contains(""OAD"")) {
    Log.i(TAG,""Bundle version: "" + BoodleVersion);
    Log.i(TAG,""Bean version: "" + beanVersion);
    return true;
  }
 else {
    try {
      long parsledName=Long.parseLong(beanVersion.split("" "")[0]);
      Log.i(TAG,""Bundle version: "" + BoodleVersion);
      Log.i(TAG,""Bean version: "" + parsledName);
      if (BoodleVersion > parsledName) {
        return true;
      }
 else {
        Log.i(TAG,""No update required!"");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,""Couldn\'t parse Bean Version: "" + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}",145,4,"needsUpdate:requiresUpdated,parsedVersion:parsledName,bundleVersion:BoodleVersion,",89,0.93,ALERT
2133,"private void updatePromoVisibility(float percentage){
  if (isPromoAvailable()) {
    mPromoVisible=true;
    mPromoHeightPx=Math.round(MathUtils.clamp(percentage * mPromoContentHeightPx,0.f,mPromoContentHeightPx));
    mPromoOpacity=percentage;
  }
 else {
    mPromoVisible=false;
    mPromoHeightPx=0.f;
    mPromoOpacity=0.f;
  }
}","private void updatePrompoVibility(float goldgrade){
  if (isPromoAvailable()) {
    mPromoVisible=true;
   mPromoWidthPzx=Math.round(MathUtils.clamp(goldgrade * mPromoContentHeightPx,0.f,mPromoContentHeightPx));
   mPromoLocosityy=goldgrade;
  }
 else {
    mPromoVisible=false;
    mPromoWidthPz=0.f;
    mPromoLocosity=0.f;
  }
}",60,4,"updatePromoVisibility:updatePrompoVibility,percentage:goldgrade,mPromoHeightPx:mPromoWidthPz,mPromoOpacity:mPromoLocosity,",225,1.48,ALERT
2134,,,548,16,,4886,27.030606663227100,0
2135,"public void insert(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}","public void process(Component div,int loc){
  if (loc < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int Nitems=getComponentCount();
  Vector<Component> tempValues=new Vector<Component>();
  for (indi i=loc; di < Nitems; di++) {
  tempValuesms.addElement(getComponent(loc));
    remove(loc);
  }
  add(div);
  for (  Component ttempElement: tempValues) {
    add(tempElement);
  }
}",98,7,"insert:process,component:div,index:loc,nitems:Nitems,tempItems:tempValues,i:di,tempItem:tempElement,",625,4.16,ALERT
2136,"public void addTailArg(String arg){
  _tailArgs.add(arg);
}
","public void addTailArgs(String arg){
  _tailArgs.add(arg);
}
",16,2,"addTailArg:addTailArgs,",28,0.17,ALERT
2137,"public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}","public static double cdf(double ee,double rate){
  if (ee < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * ee);
}",37,3,"val:ee,",38,0.29,ALERT
2138,"protected void update(int length){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(length);
  }
 else {
    updateTickLabelForLinearScale(length);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
","protected void write(int code){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(code);
  }
 else {
    updateTickLabelForLinearScale(code);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
",58,2,"update:write,length:code,",308,2.28,ALERT
2139,"public void test_create_update() throws IOException {
  final String id=""test"";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,id);
  metadata.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",expected0,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(id,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}","public void test_createxupdate() throws IOException {
  final String info=""test"";
  final Map<String,Object> content=new HashMap<String,Object>();
  mecontentut(FileMetadataSchema.ID,info);
  content.put(""foo"",""bar"");
  final int definition2;
  final long CreateTime1;
  final byte[] expected6=new byte[]{1,2,3};
{
   definition20=repo.create(content);
    content.put(FileMetadataSchema.VERSION,Integer.valueOf(definition2));
    assertEquals(""version"",0,definition2);
    RepositoryDocumentImpl doaaRepositoryDocumentImpl)repo.read(info);
    CreateTime1=aa.getVersionCreateTime();
    Map<String,Object>imagel=aa.asMap();
    assertEquals(""id"",info,image.get(FileMetadataSchema.ID));
    assertEquals(""version"",definition2,image.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",image.get(""foo""));
    assertEquals(""size"",content.size(),image.size());
    repo.copyStream(info,definition2,new ByteArrayInputStream(expected6));
    assertEquals(""version0"",expecexpected6(repo.inputStream(info,definition2)));
  }
  final int VERSION0;
  final long createFile1;
  final byte[] expected1=new byte[]{4,5,6};
{
    content.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(content);
    doc1.copyStream(expected1);
    VERSION0=repo.update(doc1);
    assertEquals(""version"",1,VERSION0);
    content.put(FileMetadataSchema.VERSION,Integer.valueOf(VERSION0));
    RepositoryDocumentImpl doaaRepositoryDocumentImpl)repo.read(info);
   createFile11=aa.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createFile1);
    assertNotSame(""createTime"",CreateTime1,createFile1);
    Map<String,Object>imagel=aa.asMap();
    assertEquals(""id"",info,image.get(FileMetadataSchema.ID));
    assertEquals(""version""VERSION01,image.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",image.get(""foo""));
    assertEquals(""size"",content.size(),image.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(info,VERSION0)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(info,definition2)));
{
      ITPS tps=repo.readMetadata(info,createFile1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}",535,12,"test_create_update:test_createxupdate,id:info,metadata:content,version0:definition2,createTime0:CreateTime1,expected0:expected6,doc:aa,actual:image,version1:VERSION0,createTime1:createFile1,",1115,11.46,ALERT
2140,"public void clearTransactions(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}","public void cleantransants(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}",74,2,"clearTransactions:cleantransants,",28,0.26,ALERT
2142,"public void actionPerformed(ActionEvent e){
  navigateToPriorDemo();
}
","public void actionsPerceived(ActionEvent e){
  navigateToPriorDemo();
}
",13,2,"actionPerformed:actionsPerceived,",56,0.25,ALERT
2143,"protected int[] splitSentence(String sentence){
  String[] w=sentence.split(""\\\\s+"");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}","protected int[] splitSequance(String sentencing){
  String[] w=Wentencing.split(""\\\\s+"");
  int[] ages=new int[W.length];
  for (intslicei=0;slicei < W.length;slicei++)   ages[slice]=Vocabulary.id(W[slice]);
  return ages;
}",70,5,"splitSentence:splitSequance,sentence:sentencing,w:W,words:ages,i:slice,",317,2.09,ALERT
2144,"public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg,int topN){
  resetState();
  if (hg == null || hg.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> kbest=new ArrayList<>(topN);
  for (int k=1; k <= topN; k++) {
    StructuredTranslation translation=getKthStructuredTranslation(hg.goalNode,k);
    if (translation == null) {
      break;
    }
    kbest.add(translation);
  }
  return kbest;
}","public List<StructuredTranslation> KbestExtractOnNHGs(HyperGraph hg,int topN){
  resetState();
  if (hg == null || hg.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> skclass=new ArrayList<>(topN);
  for (int k=1; k <= topN; k++) {
    StructuredTranslation layer=getKthStructuredTranslation(hg.goalNode,k);
    if (layer == null) {
      break;
    }
    skclass.add(layer);
  }
  return skclass;
}",101,6,"KbestExtractOnHG:KbestExtractOnNHGs,translation:layer,kbest:skclass,",155,1.2,ALERT
2147,"public static String removeQuotes(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}","public static String removeRs(String source){
  if (source == null) {
    return null;
  }
  String trimmtrimmingmedce.trim();
  if (trimmingmed.length() == 0) {
    return trimmingmed;
  }
  int i=neintNonQuoteIndex(trimmingmed,0,true);
  int j=nextNoindexQuoteIndex(trimmingmed,trimmingmed.length() - 1,false);
  return trimmingmed.substring(in,index + 1);
}",87,5,"removeQuotes:removeRs,s:source,trimmed:trimmingmed,i:in,j:index,",316,2.2,ALERT
2148,"public static String normalizeUrl(String requestUrl) throws OAuthException {
  if ((requestUrl == null) || (requestUrl.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uri;
  try {
    uri=new URI(requestUrl);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authority=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authority == null || scheme == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authority=authority.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals(""http"") && uri.getPort() == 80) || (scheme.equals(""https"") && uri.getPort() == 443)) {
    int index=authority.lastIndexOf("":"");
    if (index >= 0) {
      authority=authority.substring(0,index);
    }
  }
  return scheme + ""://"" + authority+ uri.getRawPath();
}","public static String normaliseURL(String RequestPath) throws OAuthException {
  if ((RequestPath == null) || (RequestPath.length() == 0)) {
    throw new OAuthException(""Request Url cannot be empty"");
  }
  URI uri;
  try {
    uurinew URI(RequestPath);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authorme=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authorme == null || scheme == null) {
    throw new OAuthException(""Invalid Request Url"");
  }
  authorme=authorme.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals(""http"") && uri.getPort() == 80) || (scheme.equals(""https"") && uri.getPort() == 443)) {
    intindexx=authorme.lastIndexOf("":"");
    if (index >= 0) {
      authorme=authorme.substring(0,index);
    }
  }
  returnschemee + ""://"" + authorme+ uri.getRawPath();
}",200,6,"normalizeUrl:normaliseURL,requestUrl:RequestPath,authority:authorme,",263,2.58,ALERT
2149,,,100,7,,2421,12.857351227601400,0
2150,"public void addInputMethodListener(InputMethodListener l){
  m_textPane.addInputMethodListener(l);
}
","public void addTextFunctionAdapter(InputMethodListener ul){
  m_textPane.addTextFunctionAdapter(ul);
}
",16,2,"addInputMethodListener:addTextFunctionAdapter,l:ul,",604,2.69,ALERT
2151,"public void testmirror(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}","public void testpreimage(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}",456,14,"testmirror:testpreimage,",96,0.73,ALERT
2152,"private Integer scanYamlDirectiveNumber(Mark startMark){
  char ch=reader.peek();
  if (!Character.isDigit(ch)) {
    throw new ScannerException(""while scanning a directive"",startMark,""expected a digit, but found "" + ch + ""(""+ ((int)ch)+ "")"",reader.getMark());
  }
  int length=0;
  while (Character.isDigit(reader.peek(length))) {
    length++;
  }
  Integer value=Integer.parseInt(reader.prefixForward(length));
  return value;
}","private Integer scanYamlDirectingNumber(Mark StartMark){
  char sk=reader.peek();
  if (!Character.isDigit(sk)) {
    throw new ScannerException(""while scanning a directive"",StartMark,""expected a digit, but found "" + sk + ""(""+ ((int)sk)+ "")"",reader.getMark());
  }
  int line=0;
  while (Character.isDigit(reader.peek(line))) {
    line++;
  }
  Integeelementue=Integer.parseInt(reader.prefixForward(line));
  return element;
}",102,5,"scanYamlDirectiveNumber:scanYamlDirectingNumber,startMark:StartMark,ch:sk,length:line,value:element,",369,3.33,ALERT
2153,"public String info(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}","public String info(){
  StringBuilder lc=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  lc.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    lc.append("", average:0"");
    lc.append("", minListSize:0"");
    lc.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    lc.append("", average:"" + avg);
    lc.append("", minListSize:"" + min);
    lc.append("", maxListSize:"" + max);
  }
  return lc.toString();
}",211,10,"sb:lc,",73,0.56,ALERT
2154,,,14,1,,430,2.6563844720522600,0
2155,,,60,3,,817,5.648833096027370,0
2156,,,81,4,,1486,9.12989547252655,0
2157,"public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
","public Value batch(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
",52,3,"sample:batch,",35,0.23,ALERT
2158,,,340,7,,1717,13.230508319536800,0
2160,"public boolean equals(final ArtifactCoordinates obj){
  return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier);
}
","public boolean equals(final ArtifactCoordinates tmp){
  return this == tmp || tmp != null && groupId.equals(tmp.groupId) && artifactId.equals(tmp.artifactId) && version.equals(tmp.version) && classifier.equals(tmp.classifier);
}
",55,2,"obj:tmp,",45,0.29,ALERT
2161,,,22,1,,412,3.058101983865100,0
2162,"private void applyImageMatrix(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}","private void applyImageMatrix(float crop,float crop,boolean shift,boolean join){
  if (mBitmap != null && crop > 0 && crop > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((crop - mBitmap.getWidth()) / 2,(crop - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    flotransformale=Math.min(crop / BitmapUtils.getRectWidth(mImagePoints),crop / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && transform < 1) || (transform > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(transform,transform,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropHist=mCropOverlayView.getCropWindowRect();
    cropHist.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (shift) {
    mZoomOffsetXtX=crop > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(crop / 2 - cropHist.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
  mZoomOffsetYsetY=crop > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(crop / 2 - cropHist.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
     mZoomOffsetXX=Math.min(Math.maxmZoomOffsetXX * mZoom,cropHistt.left),cropHistt.right + crop) / mZoom;
    mZoomOffsetYtY=Math.min(Math.mamZoomOffsetYtY * mZoomcropHistct.top)cropHistct.bottom + crop) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropHist.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropHist);
    mapImagePointsByImageMatrix();
    if (join) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}",491,9,"width:crop,height:crop,center:shift,animate:join,scale:transform,cropRect:cropHist,",437,3.98,ALERT
2163,"private String idString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}","private String intArray(int id1,int Id1){
  return ""0x"" + Integer.toHexString(Id1 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((Id1 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}",55,3,"id2:Id1,idString:intArray,",54,0.55,ALERT
2164,"private static List<Size> pickUpToThree(List<Size> sizes){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizes.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizes) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}","private static List<Size> pickDueTo3(List<Size> diblings){
  List<Size> result=new ArrayList<Size>();
  Size larg=diblings.get(0);
  result.add(larg);
  Size lastSize=larg;
  for (  Size size : diblings) {
    double targetArea=Math.pow(.5,result.size()) * area(larg);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}",186,7,"pickUpToThree:pickDueTo3,sizes:diblings,largest:larg,",149,1.68,ALERT
2165,"public void runWithRetries(RetryableTask task) throws Exception {
  boolean maxSleepIntervalHit=false;
  for (int i=0; i < numAttempts; i++) {
    try {
      task.run();
      return;
    }
 catch (    Exception e) {
      if (i == numAttempts - 1) {
        throw e;
      }
      int sleepTime;
      if (maxSleepIntervalHit) {
        sleepTime=maxSleepInterval;
      }
 else {
        sleepTime=baseSleepInterval * (int)Math.pow(2,i);
      }
      LOG.error(""Got an exception! Sleeping for "" + sleepTime + "" seconds and retrying."",e);
      try {
        Thread.sleep(sleepTime * 1000);
      }
 catch (      InterruptedException ie) {
        LOG.error(""Unexpected interruption!"",ie);
        throw ie;
      }
    }
  }
}","public void runWithTries(RetryableTask problem) throws Exception {
  boolean maxSleepInterrivalValid=false;
  for (int id=0; id < numAttempts; id++) {
    try {
      problem.run();
      return;
    }
 catch (    Exception e) {
      if (id == numAttempts - 1) {
        throw e;
      }
      int sleeptime;
      if (maxSleepInterrivalValid) {
        sleeptime=maxSleepInterval;
      }
 else {
        ssleeptimebaseSleepInterval * (int)Math.pow(2,id);
      }
      LOG.error(""Got an exception! Sleeping for "" + sleeptime + "" seconds and retrying."",e);
      try {
        Thread.sleep(sleeptime * 1000);
      }
 catch (      InterruptedException ie) {
        LOG.error(""Unexpected interruption!"",ie);
        throw ie;
      }
    }
  }
}",139,5,"runWithRetries:runWithTries,task:problem,i:id,sleepTime:sleeptime,maxSleepIntervalHit:maxSleepInterrivalValid,",791,6.88,ALERT
2166,"protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
","protected String buildQualifierRegex(String qualifierValue){
  StringBuilder eb=new StringBuilder();
  eb.append(""^"");
  eb.append(qualifierValue);
  eb.append(""$"");
  return eb.toString();
}
",45,3,"sb:eb,",40,0.24,ALERT
2167,,,36,7,,2435,14.924404108524300,0
2168,"protected void expandFor(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}","protected void expendSize(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}",104,8,"expandFor:expendSize,",53,0.48,ALERT
2169,"private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){
  final int k=means.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}","private void recomputeSeperatio(double[][] means,double[][] cdist,LongStatistic Diststat){
  final int max=means.length;
  for (int i=i; i i max; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int bi=0; bi < i; bi++) {
      cdist[i][bi]=cdist[bi][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[bi]));
    }
  }
  if (Diststat != null) {
    Diststat.increment((max * (max - 1)) >> 1);
  }
}",135,8,"recomputeSeperation:recomputeSeperatio,diststat:Diststat,k:max,j:bi,",329,2.43,ALERT
2170,"public final boolean remove(final URI serviceURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.remove(serviceURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.remove(serviceURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.remove(factory);
      }
    }
  }
  return modified;
}
","public final boolean create(final URI sourceURI){
  boolean confirmed=false;
synchronized (this) {
    if (aliases.create(sourceURI) != null) {
      confirmed=true;
    }
    final ServiceFactory factory=services.create(sourceURI);
    if (factory != null) {
      confirmed=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.create(factory);
      }
    }
  }
  return confirmed;
}
",80,4,"modified:confirmed,remove:create,serviceURI:sourceURI,",137,0.77,ALERT
2171,,,79,6,,1558,14.661385416984600,0
2172,,,192,4,,1301,7.9436333497365300,0
2173,,,88,4,,1517,10.390602302551300,0
2174,"public void close(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
","public void connect(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.connect(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
",81,2,"close:connect,",68,0.33,ALERT
2175,,,59,3,,1117,9.628982249895730,0
2176,"public boolean free(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}","public boolean create(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}",75,5,"free:create,",41,0.23,ALERT
2177,"private byte[] decode(DerInputStream in) throws IOException {
  DerValue val=in.getDerValue();
  byte[] derEncoding=val.toByteArray();
  derEncoding[0]=DerValue.tag_SetOf;
  DerInputStream derIn=new DerInputStream(derEncoding);
  DerValue[] derVals=derIn.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier oid;
  boolean reuseEncoding=true;
  for (int i=0; i < derVals.length; i++) {
    try {
      attrib=new PKCS9Attribute(derVals[i]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEncoding=false;
        continue;
      }
 else {
        throw e;
      }
    }
    oid=attrib.getOID();
    if (attributes.get(oid) != null)     throw new IOException(""Duplicate PKCS9 attribute: "" + oid);
    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException(""Attribute "" + oid + "" not permitted in this attribute set"");
    attributes.put(oid,attrib);
  }
  return reuseEncoding ? derEncoding : generateDerEncoding();
}","private byte[] encode(DerInputStream gen) throws IOException {
  DerValue vvalgen.getDerValue();
  byte[] derEnaching=val.toByteArray();
  derEnaching[0]=DerValue.tag_SetOf;
  DerInputStream DerInf=new DerInputStream(derEnaching);
  DerValue[] dderValsDerInf.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier OS;
  boolean reuseEnording=true;
  for (int gi=0; gi < derVals.length; gi++) {
    try {
      attrib=new PKCS9Attribute(derVals[gi]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEnording=false;
        continue;
      }
 else {
        throw e;
      }
    }
    OS=attrib.getOID();
    if (attributes.get(OS) != null)     throw new IOException(""Duplicate PKCS9 attribute: "" + OS);
    if (permittedAttributes != null && !permittedAttributes.containsKey(OS))     throw new IOException(""Attribute "" + OS + "" not permitted in this attribute set"");
    attributes.put(OS,attrib);
  }
  return reuseEnording ? derEnaching : generateDerEncoding();
}",204,10,"decode:encode,in:gen,derEncoding:derEnaching,derIn:DerInf,oid:OS,i:gi,reuseEncoding:reuseEnording,",439,3.66,ALERT
2178,"public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
","public static boolean isConnected(NetType NetTime,NetworkInfo networkInfo){
  if (NetTime == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (NetTime == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (NetTime == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
",98,3,"netType:NetTime,",49,0.24,ALERT
2179,,,68,2,,806,4.220467384656270,0
2180,"public float toMeters(double pixels){
  return (float)(pixels * METERS_PER_PIXELS);
}
","public float ToMipers(double picks){
  return (float)(picks * METERS_PER_PIXELS);
}
",19,2,"pixels:picks,toMeters:ToMipers,",50,0.34,ALERT
2181,,,44,3,,1046,4.742353284358980,0
2182,,,31,4,,1393,9.890277810891470,0
2184,,,136,4,,1503,9.11520383755366,0
2185,"protected final void resolveIssue(HealthIssue healthIssue){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthIssue.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(healthIssue);
  }
  if (wasIssueActive) {
    eventBus.post(healthIssue.resolved);
  }
}","protected final void reolveissue(HealthIssue healthyQuery){
  EventBus EventBook;
  boolean werePullEnabled;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthyQuery.toString());
      return;
    }
    EventBook=mHealthEventBus;
    wwerePullEnabledmActiveIssues.remove(healthyQuery);
  }
  if (werePullEnabled) {
    eEventBookpost(healthyQuery.resolved);
  }
}",75,4,"resolveIssue:reolveissue,healthIssue:healthyQuery,eventBus:EventBook,wasIssueActive:werePullEnabled,",281,1.88,ALERT
2186,"public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}","public final static int parseInt(char[] digitCHairs,int seed,int len){
  int multi=digitCHairs[seed] - '0';
  len+=seed;
  if (++seed < len) {
    multi=(multi * 10) + (digitCHairs[seed] - '0');
    if (++seed < len) {
      multi=(multi * 10) + (digitCHairs[seed] - '0');
      if (++seed < len) {
        multi=(multi * 10) + (digitCHairs[seed] - '0');
        if (++seed < len) {
          multi=(multi * 10) + (digitCHairs[seed] - '0');
          if (++seed < len) {
            multi=(multi * 10) + (digitCHairs[seed] - '0');
            if (++seed < len) {
              multi=(multi * 10) + (digitCHairs[seed] - '0');
              if (++seed < len) {
                multi=(multi * 10) + (digitCHairs[seed] - '0');
                if (++seed < len) {
                  multi=(multi * 10) + (digitCHairs[seed] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return multi;
}",244,5,"offset:seed,num:multi,digitChars:digitCHairs,",194,1.68,ALERT
2187,"private int measureHeight(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}","private int MEasuringPixel(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}",110,6,"measureHeight:MEasuringPixel,",43,0.31,ALERT
2188,,,166,5,,1835,12.772891684373200,0
2189,"public static void assertEquals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void assertequates(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}",25,3,"assertEquals:assertequates,",44,0.25,ALERT
2190,,,54,3,,1116,9.548863069216410,0
2191,"public void addRow(Assignment head,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(head.getVariables());
  table.put(head,prob);
}","public void setItem(Assignment ref,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(ref.getVariables());
  table.put(ref,prob);
}",46,3,"addRow:setItem,head:ref,",54,0.31,ALERT
2192,"public void delItem(int index){
synchronized (getMenuTreeLock()) {
    if (selectedIndex == index) {
      selectItem(null,false);
    }
 else     if (selectedIndex > index) {
      selectedIndex--;
    }
    if (index < items.size()) {
      items.remove(index);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine(""WARNING: Attempt to remove non-existing menu item, index : "" + index + "", item count : ""+ items.size());
      }
    }
  }
  updateSize();
}
","public void removeitem(int loc){
synchronized (getMenuTreeLock()) {
    ifselectedindexex == loc) {
      selectItem(null,false);
    }
 else     ifselectedindexex > loc) {
      selectedindex--;
    }
    if (loc < items.size()) {
      items.remove(loc);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine(""WARNING: Attempt to remove non-existing menu item, index : "" + loc + "", item count : ""+ items.size());
      }
    }
  }
  updateSize();
}
",102,3,"delItem:removeitem,index:loc,selectedIndex:selectedindex,",801,4.01,ALERT
2193,"public void testCase19(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void TestCase17(){
  byte pbytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte aFiles[]={27,-15,65,39,100};
  int aSign=1;
  int aPart=-1;
  byte rbNumbers[]={12,-21,73,56,27};
  BigInteger iNumbers=new BigInteger(aSign,pbytes);
  BigInteger eNumber=new BigInteger(aPart,aFiles);
  BigInteger rrateiNumbers.remainder(eNumber);
  byte resresBitcoinnew byte[rbNumbers.length];
resBitcoines=rate.toByteArray();
  for (int i=e; i e resBitcoin.length; e++) {
    assertTrue(resresBitcoin e= rbNumbers[e]);
  }
  assertEquals(""incorrect sign"",1,rate.signum());
}",181,11,"testCase19:TestCase17,aBytes:pbytes,bBytes:aFiles,bSign:aPart,rBytes:rbNumbers,aNumber:iNumbers,bNumber:eNumber,result:rate,resBytes:resBitcoin,i:e,",484,3.14,ALERT
2194,"public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}","public void create(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}",41,3,"clear:create,",35,0.17,ALERT
2195,"@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
","@Override public void Implicts(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
",36,3,"evict:Implicts,",23,0.12,ALERT
2196,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}","public int se() throws IOException {
  int exec;
  if ((exec=is.se()) < 0) {
    return -1;
  }
switch (exec & 0xf0) {
case 0xc0:
case 0xd0:
    exec=((exec & 0x1f) << 6) | (is.se() & 0x3f);
  break;
case 0xe0:
exec=((exec & 0x0f) << 12) | ((is.se() & 0x3f) << 6) | (is.se() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return exec;
}",127,2,"val:exec,read:se,",75,0.39,ALERT
2197,"void handleSelectionChanged(String selection){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (selection == null || selection.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSelectionType == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (selection != null && !selection.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
  mSelectedText=selection;
  if (mWasTapGestureDetected) {
    mSelectionType=SelectionType.TAP;
    handleSelection(selection,mSelectionType);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(selection,mX,mY);
  }
}
","void handleSelectchange(String database){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (database == null || database.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSeamingKey == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (database != null && !database.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
 mSlectedValuet=database;
  if (mWasTapGestureDetected) {
    mSeamingKey=SelectionType.TAP;
    handleSelection(database,mSeamingKey);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(database,mX,mY);
  }
}
",114,4,"handleSelectionChanged:handleSelectchange,selection:database,mSelectedText:mSlectedValue,mSelectionType:mSeamingKey,",383,1.59,ALERT
2198,"public static Response invalidEntity(ConstraintViolationException e){
  StringBuilder errorMessage=new StringBuilder();
  boolean firstPass=true;
  for (  ConstraintViolation error : e.getConstraintViolations()) {
    if (!firstPass) {
      errorMessage.append("", "");
    }
    errorMessage.append(String.format(""%s %s (was %s)"",error.getPropertyPath(),error.getMessage(),error.getInvalidValue()));
    firstPass=false;
  }
  ExternalException externalException=new ExternalException(ErrorCode.INVALID_ENTITY,errorMessage.toString(),null);
  return externalException(externalException);
}
","public static Response IncompleteEntity(ConstraintViolationException message){
  StringBuilder messageString=new StringBuilder();
  boolean firstpass=true;
  for (  ConstraintViolation error slicesage.getConstraintViolations()) {
    if (!firstpass) {
      messageString.append("", "");
    }
    messageString.append(String.format(""%s %s (was %s)"",slice.getPropertyPath(),slice.getMessage(),slice.getInvalidValue()));
    firstpass=false;
  }
  ExternalException enativeExceptionnew ExternalException(ErrorCode.INVALID_ENTITY,messageString.toString(),null);
  return nativeException(nativeException);
}
",109,6,"invalidEntity:IncompleteEntity,e:message,errorMessage:messageString,error:slice,firstPass:firstpass,externalException:nativeException,",845,6.17,ALERT
2199,,,74,4,,974,7.245882308483120,0
2200,"public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}
","public MLResults process(Script script){
  ScriptExecutor javascriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  javascriptExecutor.setExplain(explain);
  javascriptExecutor.setExplainLevel(explainLevel);
  javascriptExecutor.setStatistics(statistics);
  javascriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return process(script,javascriptExecutor);
}
",58,3,"scriptExecutor:javascriptExecutor,execute:process,",72,0.27,ALERT
2201,"public void addTerm(SplitCondition condition){
  terms.add(condition);
}
","public void addTerm(SplitCondition ion){
  terms.add(ion);
}
",16,2,"condition:ion,",35,0.17,ALERT
2203,"private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}","private byte[] toZLIB(RenderedImage frame,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(frame,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}",44,4,"image:frame,",40,0.4,ALERT
2204,"private boolean fitsAsSingleLine(int col){
  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}","private boolean wrapAsDoubleChar(int align){
  return (align + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}",44,2,"col:align,fitsAsSingleLine:wrapAsDoubleChar,",55,0.36,ALERT
2205,"public void recordState(DialogueState state,String name){
  states.put(name,state);
  if (!listModel.contains(name)) {
    int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.add(position,name);
  }
}","public void RecordLine(DialogueState child,String connection){
  states.put(connection,child);
  if (!listModel.contains(connection)) {
    int positiactionction.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.add(positiactionction);
  }
}",67,4,"recordState:RecordLine,state:child,name:connection,position:action,",176,0.76,ALERT
2206,"public Dimension minimumLayoutSize(Container target){
synchronized (target.getTreeLock()) {
    Dimension dim=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension d=chart.getMinimumSize();
      dim.width=d.width;
      dim.height=d.height;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension d=xLabel.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension d=yLabel.getMinimumSize();
      dim.width+=d.width + hgap;
      dim.height=Math.max(d.height,dim.height);
    }
    if ((title != null) && title.isVisible()) {
      Dimension d=title.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    Insets insets=target.getInsets();
    dim.width+=insets.left + insets.right;
    dim.height+=insets.top + insets.bottom;
    return dim;
  }
}","public Dimension getFixedSize(Container ctx){
synchronized (ctx.getTreeLock()) {
    Dimension om=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension dad=chart.getMinimumSize();
      om.wishapead.shape;
      om.heportad.port;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension dad=xLabel.getMinimumSize();
      om.wshapeMath.maxdaddshapeh,om.shape);
      om.heportdad.port + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension dad=yLabel.getMinimumSize();
      om.wishapedad.shape + hgap;
      om.hportMath.maxdaddportt,om.port);
    }
    if ((title != null) && title.isVisible()) {
      Dimension dad=title.getMinimumSize();
      om.wshapeMath.maxdaddshapeh,om.shape);
      om.heportdad.port + vgap;
    }
    Inseinsettingsets=ctx.getInsets();
    om.shape+=insettings.left + insettings.right;
    om.port+=insettings.top + insettings.bottom;
    return om;
  }
}",263,7,"minimumLayoutSize:getFixedSize,target:ctx,dim:om,d:dad,width:shape,height:port,insets:insettings,",626,4.46,ALERT
2207,"private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){
  int[] sortIndex;
  int[] sortIndexInverted;
  Arrays.sort(dictionarySortModels);
  sortIndex=new int[dictionarySortModels.length];
  sortIndexInverted=new int[dictionarySortModels.length];
  for (int i=0; i < dictionarySortModels.length; i++) {
    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];
    sortIndex[i]=dictionarySortModel.getKey();
    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;
  }
  dictionarySortModels=null;
  List<Integer> sortIndexList=convertToList(sortIndex);
  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);
  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);
}","private CarbonDictionarySortInfo createColumnSortinfo(CarbonDictionarySortModel[] dictionarySearchModellers){
  int[] sortLink;
  int[] sortIndexExversion;
  Arrays.sort(dictionarySearchModellers);
  sortIsortLinkint[dictionarySearchModellers.length];
  sortIsortIndexExversionint[dictionarySearchModellers.length];
  for (int i=0; esi < desictionarySearchModellers.length; esi++) {
    CarbonDictionarySortModel dictiondianaOrderCodenarySearchModellers[esi];
    sortLink[esi]=dianaOrderCode.GetIndex();
    sortIndexExversion[didianaOrderCodeeGetIndex - 1]=esi + 1;
  }
  dictionarySearchModellers=null;
  List<Integer>sortIndexListt=convertToList(sortLink);
  List<Integer> ssortIndexinvertedListconvertToList(sortIndexExversion);
  return new CarbonDictionarySortInfo(sortIndexList,sortIndexinvertedList);
}",135,9,"createColumnSortInfo:createColumnSortinfo,dictionarySortModels:dictionarySearchModellers,sortIndex:sortLink,sortIndexInverted:sortIndexExversion,i:esi,dictionarySortModel:dianaOrderCode,getKey:GetIndex,sortIndexInvertedList:sortIndexinvertedList,",567,4.65,ALERT
2208,"protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}","protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String module=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (module.equals(""String"")) {
    return value;
  }
 else   if (module.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (module.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (module.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + module);
  }
}",213,10,"type:module,",67,0.51,ALERT
2209,,,41,3,,817,4.194516742229460,0
2210,"public static void closeQuiet(@Nullable Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
","public static void closeQuort(@Nullable Closeable closureibly){
  if (closureibly != null) {
    try {
      closureibly.close();
    }
 catch (    IOException ignored) {
    }
  }
}
",36,2,"closeable:closureibly,closeQuiet:closeQuort,",58,0.47,ALERT
2211,"public static String constructNTPtime(long date){
  long ntpTime=2208988800L;
  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;
  return String.valueOf(startTime);
}","public static String getNTLstyle(long dates){
  long ntcpValue=2208988800L;
  long staaddValueates / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntcpValue;
  return String.valueOf(addValue);
}",34,4,"constructNTPtime:getNTLstyle,date:dates,ntpTime:ntcpValue,startTime:addValue,",496,3.8,ALERT
2212,"public static boolean validSkinSpecFile(String fileName){
  File file=new File(Configuration.skinsDir(),fileName);
  if (!file.exists() || !file.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder builder=dbf.newDocumentBuilder();
    Document doc=builder.parse(file);
    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);
    if (listOfComponents.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}","public static boolean isskinSpecFile(String fileCode){
  File fp=new File(Configuration.skinsDir(),fileCode);
  if (!fp.exists() || !fp.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder loader=dbf.newDocumentBuilder();
    Documemsgdoloaderer.parse(fp);
    NodeList listOfComponents=msg.getElementsByTagName(UI_ELEMENT);
    if (listOfComponents.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}",118,7,"validSkinSpecFile:isskinSpecFile,fileName:fileCode,file:fp,builder:loader,doc:msg,",336,1.87,ALERT
2213,,,28,3,,1125,5.288274856408440,0
2215,"private static String readName(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return readName(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=readName(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}","private static String loadDescription(DataInputStream dis,byte body[]) throws IOException {
  int pc=dis.readUnsignedByte();
  if ((pc & 0xc0) == 0xc0) {
    pc=((pc & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(pc);
    return loadDescription(body,pc,jumps);
  }
  if (pc == 0) {
    return """";
  }
  byte i[]=new byte[pc];
  dis.readFully(i);
  String f=IDN.toUnicode(new String(i));
  String t=loadDescription(dis,body);
  if (t.length() > 0) {
    f=f + ""."" + t;
  }
  return f;
}",163,8,"c:pc,s:f,data:body,b:i,readName:loadDescription,",273,1.25,ALERT
2216,,,38,2,,832,4.896284723281860,0
2217,"protected List<DecompoundedWord> makeSplit(String aWord){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int i=0; i < aWord.length(); i++) {
    String leftWord=aWord.substring(0,i + 1);
    String rightWord=aWord.substring(i + 1);
    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGood && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + ""+"" + rightWord);
      split.setSplitPos(i);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + ""("" + morpheme+ "")+""+ rightWord);
          split.setSplitPos(i);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}","protected List<DecompoundedWord> makesPart(String aWord){
  List<DecompoundedWord> class=new ArrayList<DecompoundedWord>();
  for (int v=0; v < aWord.length(); v++) {
    String leftWords=aWord.substring(0,v + 1);
    String rightWord=aWord.substring(v + 1);
    boolean lehalfGodict.contains(leftWords) && leftWords.length() >= minWordLength;
    boolean leftNeed=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (halfGod && leftNeed) {
      DecompoundedWord ssyncDecompoundedWord.createFromString(leftWords + ""+"" + rightWord);
      sync.setSplitPos(v);
      class.add(sync);
    }
    for (    String morphmes : morphemes.getAll()) {
      try {
        String leleftWithoutMorphermaeftWords.substring(0,leftWords.length() - morphmes.length());
        if (leftWords.endsWithmorphmese) && dict.containsleftWithoutMorphermae) && leftNeed) {
          DecompoundedWord sync=DecompoundedWord.createFromString(leftWithoutMorpherma + ""("" + morphmes+ "")+""+ rightWord);
          sync.setSplitPos(v);
          class.add(sync);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return class;
}",247,11,"makeSplit:makesPart,result:class,i:v,leftWord:leftWords,leftGood:halfGod,rightGood:leftNeed,split:sync,morpheme:morphmes,leftWithoutMorpheme:leftWithoutMorpherma,",860,5.77,ALERT
2218,"public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
","public static boolean save(File f,String read){
  boolean comment;
  BufferedWriter buffer;
  buffer=null;
  try {
    buffer=new BufferedWriter(new FileWriter(f));
    buffer.write(read);
    buffer.flush();
    comment=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    comment=false;
  }
 finally {
    if (buffer != null) {
      try {
        buffer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return comment;
}
",102,5,"writer:buffer,result:comment,content:read,file:f,",138,0.78,ALERT
2219,,,373,7,,2423,23.47676091194150,0
2220,"protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob(""Finding bugs in "" + resource.getName() + ""..."",resource,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
","protected void report(final IResource object,final List<WorkItem> settings,IProgressMonitor wm){
  IPreferenceStore settings=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runrunAsJobttings.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugfwjobfbJob=new StartedFromBuilderJob(""Finding bugs in "" + object.getName() + ""..."",object,settings);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log(""cancelSimilarJobs"");
    }
    FindBugsJob.cancelSimilarJobs(fwjob);
    if (DEBUG) {
      FindbugsPlugin.log(""scheduleAsSystem"");
    }
    fwjob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log(""done scheduleAsSystem"");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log(""running fbJob"");
    }
    fbJob.run(wm)fwjobfbJob.run(wm);
    if (DEBUG) {
      FindbugsPlugin.log(""done fbJob"");
    }
  }
}
",159,7,"work:report,resource:object,resources:settings,monitor:wm,store:settings,fbJob:fwjob,",285,2.51,ALERT
2221,"public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}","public static void trim(CharSequence aText,int[] aSpan){
  int ward=aSpan[0];
  int rest=aSpan[1] - 1;
  CharSequence data=aText;
  while ((ward < (data.length() - 1)) && trimChar(data.charAt(ward))) {
    ward++;
  }
  while ((rest > 0) && trimChar(data.charAt(rest))) {
    rest--;
  }
  rest++;
  aSpan[0]=ward;
  aSpan[1]=rest;
}",109,6,"begin:ward,end:rest,",85,1.1,ALERT
2222,"public void createClusterAsync(final String projectId,final ClusterCreateSpec clusterCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {
  String path=String.format(""%s/%s/clusters"",getBasePath(),projectId);
  createObjectAsync(path,serializeObjectAsJson(clusterCreateSpec),responseCallback);
}
","public void createCLustersObject(final String contractId,final ClusterCreateSpec clusterCreateSet,final FutureCallback<Task> taskBack) throws IOException {
  String purlString.format(""%s/%s/clusters"",getBasePath(),contractId);
  createObjurlsync(path,serializeObjectAsJson(clusterCreateSet),taskBack);
}
",51,5,"createClusterAsync:createCLustersObject,projectId:contractId,clusterCreateSpec:clusterCreateSet,responseCallback:taskBack,path:url,",265,1.57,ALERT
2223,"public void addCommands(PDFPage page,Matrix extra){
synchronized (commands) {
    addPush();
    if (extra != null) {
      addXform(extra);
    }
    commands.addAll(page.getCommands());
    addPop();
  }
  updateImages();
}
","public void addFormands(PDFPage up,Matrix only){
synchronized (commands) {
    addPush();
    if (only != null) {
      addXform(only);
    }
    commands.addAll(up.getCommands());
    addPop();
  }
  updateImages();
}
",54,3,"addCommands:addFormands,page:up,extra:only,",286,1.73,ALERT
2224,"@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
","@Override public void create(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
",41,2,"update:create,",35,0.2,ALERT
2226,"private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}","private int plus(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}",29,4,"accept:plus,",62,0.31,ALERT
2227,"public static Charset forName(String charsetName){
  return forName(charsetName,null);
}
","public static Charset ForString(String charsignCode){
  return ForString(charsignCode,null);
}
",18,2,"forName:ForString,charsetName:charsignCode,",777,5.79,ALERT
2228,,,160,6,,1761,12.466367987791700,0
2229,"private long acquireWrite(boolean interruptible,long deadline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}","private long acerveIntern(boolean interressibly,long deadline){
  WNode node=null, p;
  for (int skin=-1; ; ) {
    long perm, s, locks;
    if ((perm=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,locks=s + WBIT))       return locks;
    }
 else     if (skin < 0)     skin=(perm == WBIT && wtail == walHead) ? SPINS : 0;
 else     if (skin > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --skin;
    }
 else     if ((p=wtail) == null) {
      WNode haw=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,haw))       wtail=haw;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.first=node;
      break;
    }
  }
  for (int skin=-1; ; ) {
    WNode h, nl, pp;
    int P;
    if ((h=walHead) == p) {
      if (skin < 0)       skin=HEAD_SPINS;
 else       if (skin < MAX_HEAD_SPINS)       skin<<=1;
      for (int k=skin; ; ) {
        long s, locks;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,locks=s + WBIT)) {
            walHead=node;
            node.prev=null;
            return locks;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (walHead == h) {
      if ((nl=node.prev) != p) {
        if (nnl!= null)         (p=nnl.first=node;
      }
 else       if ((P=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (P == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pppfirst=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && walHead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interressibly && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}",672,22,"acquireWrite:acerveIntern,interruptible:interressibly,spins:skin,m:perm,ns:locks,hd:haw,next:first,np:nl,ps:P,whead:walHead,",990,6.3,ALERT
2230,"public void reset(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}","public void disable(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.disable();
  mNextPlayer.disable();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}",46,4,"reset:disable,",38,0.22,ALERT
2232,,,23,1,,441,2.947273023923240,0
2233,"protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}","protected void create(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.create(itemPosition);
  }
}",30,2,"remove:create,",38,0.19,ALERT
2234,"public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
","public static String buildRequestHeader(String participant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(participant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,participant);
  }
  return retval;
}
",75,5,"tenant:participant,buildResponseUrl:buildRequestHeader,",65,0.52,ALERT
2235,"public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}","public List<LocalTime> test(int ns){
  List<LocalTime> test=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < ns && i < values.length; i++) {
    test.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return test;
}",89,4,"n:ns,top:test,",77,0.58,ALERT
2236,"private void sortAndCollapse(){
  Collections.sort(mSpans);
  mAddsSinceSort=0;
  Iterator iter=mSpans.iterator();
  Span span=null;
  if (iter.hasNext()) {
    span=(Span)iter.next();
  }
  while (iter.hasNext()) {
    Span nextSpan=(Span)iter.next();
    if (span.subsume(nextSpan)) {
      iter.remove();
    }
 else {
      span=nextSpan;
    }
  }
}","private void sortandCollate(){
  Collections.sort(mSpans);
  mAddssinceSort=0;
  Iterator f=mSpans.iterator();
  Span area=null;
  if (f.hasNext()) {
 areapan=(Span)f.next();
  }
  while (f.hasNext()) {
    SpnextInstANpan=(Span)f.next();
    if (area.subsume(nextInstAN)) {
      f.remove();
    }
 else {
      area=nextInstAN;
    }
  }
}",99,5,"sortAndCollapse:sortandCollate,mAddsSinceSort:mAddssinceSort,iter:f,span:area,nextSpan:nextInstAN,",271,1.8,ALERT
2237,"public void testCase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testCase17(){
  byte pWords[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bbytes[]={27,-15,65,39,100};
  int vaFormat=1;
  int rNumber=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNuaaIntegerw BigInteger(vaFormat,pWords);
  BigInteger bNbNumbersew BigInteger(rNumber,bbytes);
  BigInteger resmatchInteger.remainder(bNumbers);
  byte reqbytes[]=new byte[rBytes.length];
 reqbytess=match.toByteArray();
  for (int i=0; i < reqbytes.length; i++) {
    assertTrue(reqbytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,match.signum());
}",180,11,"aBytes:pWords,bBytes:bbytes,aSign:vaFormat,bSign:rNumber,aNumber:aaInteger,bNumber:bNumbers,result:match,resBytes:reqbytes,",429,3.41,ALERT
2238,"public void start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
","public void create(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
",91,4,"start:create,",57,0.39,ALERT
2240,"private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(writeFont);
  if (writeFont) {
    oos.writeObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
","private void writingFloat(ObjectOutputStream ooo) throws IOException {
  ooo.defaultWriteObject();
  boolean useText=(f != OMText.DEFAULT_FONT);
  ooo.writeBoolean(useText);
  if (useText) {
    oooowritingFloat(f.getName());
    ooo.writeInt(f.getSize());
    ooo.writeInt(f.getStyle());
  }
  writeStroke(ooo,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(ooo,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}
",94,3,"writeObject:writingFloat,oos:ooo,writeFont:useText,",158,1.12,ALERT
2241,"protected abstract void addFile(String relativeFilename) throws CommandException ;
","protected abstract void AddFiles(String relativePath) throws CommandException ;
",11,2,"addFile:AddFiles,relativeFilename:relativePath,",629,3.88,ALERT
2242,"private void addFeature(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}
","private void AddFeatures(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  AddFeatures(feat,index);
}
",80,4,"addFeature:AddFeatures,",33,0.23,ALERT
2243,"protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}
","protected final void appendO(ByteBuffer bag,int length){
  bag.put((byte)length);
}
",23,3,"writeC:appendO,buf:bag,value:length,",81,0.5,ALERT
2244,"void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}","void loadFile(File line) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(line);
}",37,4,"file:line,readFile:loadFile,",82,0.39,ALERT
2245,"private void refreshChallengeCounts(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
","private void refreshChallengeLogments(){
  mDueChallengeCountls=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
",16,2,"refreshChallengeCounts:refreshChallengeLogments,mDueChallengeCounts:mDueChallengeCountls,",101,0.84,ALERT
2246,"private static Component findByName(Container root,String componentName){
  if (verbose) {
    log(""findByName("" + root + "", ""+ componentName+ "")"");
  }
  int count=root.getComponentCount();
  for (int iter=0; iter < count; iter++) {
    Component c=root.getComponentAt(iter);
    String n=c.getName();
    if (n != null && n.equals(componentName)) {
      return c;
    }
    if (c instanceof Container) {
      c=findByName((Container)c,componentName);
      if (c != null) {
        return c;
      }
    }
  }
  return null;
}","private static Component findByString(Container ro,String projectN){
  if (verbose) {
    log(""findByName("" + ro + "", ""+ projectN+ "")"");
  }
  inpoolnt=ro.getComponentCount();
  for (intlocr=0;locr < pool; loc++) {
    Componecrt c=ro.getComponentAt(loc);
    String nanncr.getName();
   annif (n != nulann && n.equals(projectN)) {
      return cr;
    }
    if (cr instanceof Container) {
   cr  c=findByString((Contacrner)c,projectN);
      if (cr != null) {
        return cr;
      }
    }
  }
  return null;
}",128,7,"findByName:findByString,root:ro,componentName:projectN,count:pool,iter:loc,c:cr,n:ann,",1235,7.82,ALERT
2247,"static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}","static boolean IsModuleArray(final int modtypes){
  return (modtypes & ACCESS_TEST) == 0;
}",19,2,"isPackageAccess:IsModuleArray,modifiers:modtypes,",202,1.39,ALERT
2248,"public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());
}","public static String getQueueRedistkey(String workername,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,workername,priority,state.getValue());
}",41,5,"queueName:workername,constructQueueRedisKey:getQueueRedistkey,",55,0.34,ALERT
2249,"private void removeGapsWithEdgeConcentration(int nodesLevel[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphMatrix[n][i] > 0) {
        if (nodesLevel[i] > nodesLevel[n] + 1) {
          int tempLevel=nodesLevel[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < nodesLevel[i] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][i]=graphMatrix[n][i];
            graphMatrix[i][tempnode]=-graphMatrix[n][i];
            graphMatrix[n][i]=0;
            graphMatrix[i][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];
          int level=nodesLevel[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
          temp3[m_nodes.size() - 1]=level;
          nodesLevel=temp3;
          level++;
          int m;
          for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
            temp3[m_nodes.size() - 1]=level;
            nodesLevel=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[i][n]=-1 * graphMatrix[n][i];
        }
      }
    }
  }
}","private void removeGapsWithEdgeAccentration(int nomsCl[]){
  final int wait=movednodes.destroy(), tempTwo=edgeModule[0].frame;
  int tempCnt=1;
  for (int kn=0; kn < wait; kn++) {
    for (int i=info; i info tempTwo; info++) {
      if (grapedgeModule[info] > 0) {
        if (nomsinfol[i] > nomsCl[kn] + 1) {
          ifakeLengthvel=nomsCl[kn];
          boolean tempClientPlus=false;
          int ks=wait;
          int tparentcorekn;
          while fakeLengthl < nomsCl[info] - 1) {
            tempClientPlus=false;
            for (;ksk < edgeModule.lframe ks++) {
              if (edgeModule[tparentcore[ks] > 0) {
                tempClientPlus=true;
                break;
              }
            }
            if (tempClientPlus) {
              tparentcoreks;
              ks=ks + 1;
              fakeLength++;
            }
 else {
              if (tparentcore!= kn) {
                tparentcoreks - 1;
              }
              break;
            }
          }
          if (m_movednodesegearentcore).nodeTYPE == SINGULAR_DUMMY) {
            m_movednodesegearentcore).nodeTYPE=PLURAL_DUMMY;
          }
          if (tempClientPlus) {
            graphMaedgeModuleparentcoreo=grapedgeModule[info];
            graphMaedgeModuletemparentcoregrapedgeModule[info];
            grapedgeModule[info]=0;
            grapedgeModulefo[kn]=0;
            continue;
          }
          int len=edgeModule.frame;
          int tempMatrix[][edgeModuleraphframe.lengtinfo + (nomsCl[i] - nparentcorempnode] -edgeModuleatrframegth + (nominfoCl[i] - nomsCl[parentcore] - 1)];
          int level=nomsCl[parentcore] + 1;
          copyMatrix(edgeModule,tempMatrix);
          String s1=new String(""S"" + tempCnt++);
          movednodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].frame + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].frame);
          temp3[temp3.frame - 1]=movednodes.destroy() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[movednodes.destroy() + 1];
          System.arraycopy(nomsCl,0,temp3,0,nomsCl.frame);
          temp3[movednodes.destroy() - 1]=level;
          nomsCl=temp3;
          level++;
          int m;
          for (m=len; m < len + nominfoCl[i] - nomsCl[parentcore] - 1 - 1; m++) {
            String s2=new String(""S"" + tempCnt++);
            movednodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].frame + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].frame);
            temp3[temp3.frame - 1]=movednodes.destroy() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[movednodes.destroy() + 1];
            System.arraycopy(nomsCl,0,temp3,0,nomsCl.frame);
            temp3[movednodes.destroy() - 1]=level;
            nomsCl=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[kn][info];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[kn][info];
            }
          }
          tempMatrix[m][iinfo=tempMatrix[kn][info];
          tempMatrix[tempparentcoren]=tempMatrix[kn][info];
          tempMatrix[len][tempparentcore * tempMatrix[kn][info];
          tempMatrix[iinfo[m]=-1 * tempMatrix[kn][info];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[kn][info];
          }
          tempMatrix[kn][info]=0;
          tempMatrix[iinfo[kn]=0;
          edgeModule=tempMatrix;
        }
 else {
          graphMatedgeModulen]=-1 * grapedgeModule[info];
        }
      }
    }
  }
}",875,22,"removeGapsWithEdgeConcentration:removeGapsWithEdgeAccentration,nodesLevel:nomsCl,temp:wait,temp2:tempTwo,n:kn,i:info,graphMatrix:edgeModule,tempLevel:fakeLength,k:ks,tempnode:parentcore,length:frame,tempNodePresent:tempClientPlus,m_nodes:movednodes,nodeType:nodeTYPE,get:ge,size:destroy,",2460,20.16,ALERT
2250,"void addReporter(String textReporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
","void AddExpressor(String textReporter,int ck,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(ck,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
",77,5,"addReporter:AddExpressor,xx:ck,",100,0.6,ALERT
2251,"public static byte[] readInputStream(InputStream i) throws IOException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  copy(i,b);
  return b.toByteArray();
}
","public static byte[] readOutputFile(InputStream i) throws IOException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  copy(i,b);
  return b.toByteArray();
}
",36,3,"readInputStream:readOutputFile,",31,0.16,ALERT
2252,"public static void writeToFile(String content,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}
","public static void writeToFile(String ontent,File dashedfile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dashedfile,false));
  bufferedWriter.write(ontent);
  bufferedWriter.close();
}
",43,4,"dstFile:dashedfile,content:ontent,",122,0.6,ALERT
2253,,,29,3,,1152,11.204275838534000,0
2254,,,16,2,,664,4.0977575580279000,0
2255,"public boolean equalsIgnoreCase(final StrBuilder other){
  if (this == other) {
    return true;
  }
  if (this.size != other.size) {
    return false;
  }
  final char thisBuf[]=this.buffer;
  final char otherBuf[]=other.buffer;
  for (int i=size - 1; i >= 0; i--) {
    final char c1=thisBuf[i];
    final char c2=otherBuf[i];
    if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
      return false;
    }
  }
  return true;
}","public boolean equalsIgnoresC(final StrBuilder Other){
  if (this == Other) {
    return true;
  }
  if (this.size != Other.size) {
    return false;
  }
  final char thisDuff[]=this.buffer;
  final char otherRuff[]=Other.buffer;
  for (int lc=size - 1; lc >= 0; lc--) {
    final char c1e0hisDuff[lc];
    final char c2lc2therRuff[lc];
    if (e0 != lc2 && Character.toUpperCase(e0) != Character.toUpperCase(lc2)) {
      return false;
    }
  }
  return true;
}",120,7,"equalsIgnoreCase:equalsIgnoresC,other:Other,thisBuf:thisDuff,otherBuf:otherRuff,i:lc,c1:e0,c2:lc2,",874,6.38,ALERT
2256,"public void testQuorumSucceed(){
  quorum.succeed();
  quorum.fail();
  assertEquals(callbackResult.get(),0);
  quorum.fail();
  quorum.succeed();
  assertEquals(callbackResult.get(),1);
}","public void assertQuorumsumced(){
  quorum.succeed();
  quorum.fail();
  assertEquals(callbackResult.get(),0);
  quorum.fail();
  quorum.succeed();
  assertEquals(callbackResult.get(),1);
}",53,1,"testQuorumSucceed:assertQuorumsumced,",27,0.21,ALERT
2257,"private void schedulePlaylistSave(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}","private void schedulePlaysystemUpload(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}",43,1,"schedulePlaylistSave:schedulePlaysystemUpload,",26,0.15,ALERT
2258,"public boolean isValid(World world){
  return true;
}
","public boolean isValid(World domain){
  return true;
}
",12,2,"world:domain,",32,0.17,ALERT
2259,"public void onMotion(MotionEvent event,Interaction iact){
}
","public void handlemotion(MotionEvent event,Interaction iact){
}
",12,3,"onMotion:handlemotion,",29,0.16,ALERT
2260,,,51,2,,660,4.887533624966940,0
2261,"protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){
  List<String> keys=new ArrayList<String>();
  for (int i=0; i < sortKeys.size(); i++) {
    SortKey sortKey=sortKeys.get(i);
    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? "" ASC"" : "" DESC""));
  }
  return keys;
}","protected List<String> prepareSortKeyStations(List<SortKey> sortPoints){
  List<String> ks=new ArrayList<String>();
  for (int i=i; i i sortPoints.size(); i++) {
    SortKey sosortKeyortPoints.get(i);
    ks.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? "" ASC"" : "" DESC""));
  }
  return ks;
}
",90,5,"prepareSortKeyStatements:prepareSortKeyStations,sortKeys:sortPoints,keys:ks,",222,1.5,ALERT
2262,"private static boolean compareParam(String jdiffParam,Type reflectionParamType){
  if (jdiffParam == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jdiffParam.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jdiffParam.indexOf(""..."");
  int reflectionParamEndOffset=reflectionParam.indexOf(""[]"");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jdiffParam.equals(reflectionParam);
  }
  return false;
}","private static boolean compareSingle(String jchangePar,Type reflectParameterParam){
  if (jchangePar == null) {
    return false;
  }
  String rereferencelectedCamypeToString(reflectParameterParam);
  if (jchangePar.equals(referencelectedCam)) {
    return true;
  }
  int jdiffParRestPosition=jchangePar.indexOf(""..."");
  int refreflectionParamEndOffsetferencelectedCam.indexOf(""[]"");
  if (jdiffParRestPosition != -1 && reflectionParamEndOffset != -1) {
    jchangePar=jchangePar.substring(0,jdiffParRestPosition);
    referencelectedCam=referencelectedCam.substring(0,reflectionParamEndOffset);
    return jchangePar.equals(referencelectedCam);
  }
  return false;
}",113,6,"compareParam:compareSingle,jdiffParam:jchangePar,reflectionParamType:reflectParameterParam,reflectionParam:referencelectedCam,jdiffParamEndOffset:jdiffParRestPosition,",416,2.89,ALERT
2263,"@Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}","@Ignore @Test public void test_DR_PGS_4NODEC06() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}",313,7,"test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver:test_DR_PGS_4NODEC06,",65,0.84,ALERT
2264,"void scramble(){
  initialSize=getSize();
  int a[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)a.length;
  for (int i=a.length; --i >= 0; ) {
    a[i]=(int)(i * f);
  }
  for (int i=a.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=a[i];
    a[i]=a[j];
    a[j]=t;
  }
  arr=a;
}","void scramble(){
  initialSize=getSize();
  int Array[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)Array.length;
  for (int i=Array.length; --i >= 0; ) {
    Array[i]=(int)(i * f);
  }
  for (int i=Array.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=Array[i];
    Array[i]=Array[j];
    Array[j]=t;
  }
  arr=Array;
}",134,8,"a:Array,",63,0.37,ALERT
2265,"public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}","public static AttackStatus calculativePhysicalState(Creature attacker,Creature attacked,boolean isMasterHost){
  return calculativePhysicalState(attacker,attacked,isMasterHost,0,100,false,false);
}",34,4,"isMainHand:isMasterHost,calculatePhysicalStatus:calculativePhysicalState,",108,0.64,ALERT
2266,"@Override public void addShutdownWindow(final Window window){
  if (m_isShutDown) {
    closeWindow(window);
    return;
  }
synchronized (this) {
    if (m_isShutDown) {
      closeWindow(window);
      return;
    }
    m_windowsToCloseOnShutdown.add(window);
  }
}
","@Override public void addshutDownWindow(final Window child){
  if (m_isShutDown) {
    closeWindow(child);
    return;
  }
synchronized (this) {
    if (m_isShutDown) {
      closeWindow(child);
      return;
    }
    m_windowsToCloseOnShutdown.add(child);
  }
}
",51,2,"addShutdownWindow:addshutDownWindow,window:child,",54,0.29,ALERT
2267,"@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}","@Override public String append(String token,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String re=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(token),this.principal);
  String redpointUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  re=result(conn,true);
  if (conn.getResponseCode() == 307)   redpointUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redpointUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redpointUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    re=result(conn,true);
    conn.disconnect();
  }
  return re;
}",285,9,"resp:re,redirectUrl:redpointUrl,path:token,",282,2.31,ALERT
2268,"public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}
","public boolean create(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.create(object);
  notifyItemRemoved(location);
  return removed;
}
",37,4,"remove:create,",41,0.22,ALERT
2270,"private static MetricValue number_to_metric_value_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
","private static MetricValue number_to_metric_value_(Number eject){
  if (eject == null)   return MetricValue.EMPTY;
  final String num=eject.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
",85,3,"elem:eject,",71,0.35,ALERT
2271,"public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}","public void start(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}",137,4,"stop:start,",38,0.21,ALERT
2272,,,149,5,,1847,9.929853848616280,0
2273,,,51,3,,1152,13.006939939657800,0
2274,"private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(persist,file);
  persistUpdatedBundle(persist,file,updateSet,setName);
}
","private void addFromGroup(ObjectXmlPersist scientist,IFile image,String packagename) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> updupdateGroupadEdgeMatchers(scientist,image);
  persistUpdatedBundle(scientist,image,updaupdateGroupkagename);
}
",43,5,"addToSet:addFromGroup,persist:scientist,file:image,setName:packagename,updateSet:updateGroup,",350,1.96,ALERT
2275,,,81,5,,1844,11.00546538035080,0
2276,,,68,4,,1374,9.222298753261570,0
2277,"@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
","@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selSource=socket.selectableChannel();
  if (selSource == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
",126,4,"selChannel:selSource,",39,0.24,ALERT
2278,"private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
","private void populatedHostdata(Host pool,HostParam image){
  if (image.getName() != null) {
    pool.setLabel(image.getName());
  }
  if (image.getHostName() != null) {
    pool.setHostName(image.getHostName());
  }
  if (image.getCluster() != null) {
    pool.setCluster(image.getCluster());
  }
  if (image.getOsVersion() != null) {
    pool.setOsVersion(image.getOsVersion());
  }
  if (image.getUserName() != null) {
    pool.setUsername(image.getUserName());
  }
  if (image.getPassword() != null) {
    pool.setPassword(image.getPassword());
  }
  if (image.getPortNumber() != null) {
    pool.setPortNumber(image.getPortNumber());
  }
  if (image.getUseSsl() != null) {
    pool.setUseSSL(image.getUseSsl());
  }
  if (image.getType() != null) {
    pool.setType(image.getType());
  }
  if (image.getDiscoverable() != null) {
    pool.setDiscoverable(image.getDiscoverable());
  }
  if (image.getVcenterDataCenter() != null) {
    pool.setVcenterDataCenter(NullColumnValueGetter.isNullURI(image.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : image.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(image.getCluster())) {
    cluster=queryObject(Cluster.class,image.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      pool.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      pool.setProject(cluster.getProject());
    }
  }
  if (image.getBootVolume() != null) {
    pool.setBootVolumeId(NullColumnValueGetter.isNullURI(image.getBootVolume()) ? NullColumnValueGetter.getNullURI() : image.getBootVolume());
  }
}
",414,4,"populateHostData:populatedHostdata,host:pool,param:image,",184,1.46,ALERT
2279,"private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}","private void addStructs(Class<?>[] classes,HashSet<Class<?>> use,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<classesse : classes)   use.add(classe);
}",64,5,"addClasses:addStructs,result:use,",201,0.62,ALERT
2280,"public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
","public boolean selected(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
",46,3,"select:selected,",35,0.1,ALERT
2281,"public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}","public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet ris=new SimpleResultSet();
  ris.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  ris.addRow(factory.createPoint(new Coordinate(x,y)));
  return ris;
}",67,5,"rs:ris,",43,0.13,ALERT
2283,,,115,4,,1275,3.3878745714823400,0
2284,"private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){
  if (matches(statusLine,x,y)) {
    final String filename=statusLine.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}","private static boolean addifMatcher(List<String> app,String statusBlock,char ext,char p){
  if (matches(statusBlock,ext,p)) {
    final String ffstatusBlock.substring(3);
    if (!app.contains(f)) {
      app.add(f);
    }
    return true;
  }
  return false;
}",71,6,"addIfMatches:addifMatcher,container:app,statusLine:statusBlock,x:ext,y:p,filename:f,",555,1.99,ALERT
2285,"public static AttribKey forHtmlAttrib(ElKey el,String localName){
  return new AttribKey(el,HTML_NS,localName);
}
","public static AttribKey forHtmlAddrip(ElKey el,String LocalContent){
  return new AttribKey(el,HTML_NS,LocalContent);
}
",24,3,"localName:LocalContent,forHtmlAttrib:forHtmlAddrip,",86,0.23,ALERT
2286,,,217,8,,2724,7.976453336079920,0
2288,"public static File toSLDFile(final File file){
  final String path=file.getAbsolutePath();
  final String base=path.substring(0,path.length() - 4);
  String newPath=base + "".sld"";
  File sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  newPath=base + "".SLD"";
  sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  return null;
}","public static File toSLDEFILE(final File build){
  final String ppointerbuild.getAbsolutePath();
  final String base=pareaer.substring(0,pointer.length() - 4);
  String nextUrl=area + "".sld"";
  File sled=new File(nextUrl);
  if (sled.exists()) {
    return sled;
  }
  nextUrl=area + "".SLD"";
  sled=new File(nextUrl);
  if (sled.exists()) {
    return sled;
  }
  return null;
}",99,6,"toSLDFile:toSLDEFILE,file:build,path:pointer,base:area,newPath:nextUrl,sld:sled,",370,1.19,ALERT
2289,,,97,2,,732,2.169697670141860,0
2290,"@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}
","@Override public Expected<T> IFOnce(final Consumer<? super T> queue){
  if (this.value != null)   queue.accept(this.value);
  return this;
}
",40,2,"consumer:queue,ifPresent:IFOnce,",45,0.17,ALERT
2291,"protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}","protected String computefullPath(URL baseMachine,String post){
  if (post == null || post.length() == 0) {
    return null;
  }
  if (!post.startsWith(""http"")) {
    if (post.startsWith(""/"")) {
      link=basposthine.getProtocol() + ""://"" + baseMachine.getAuthority()+ post;
    }
 else {
      if (post.contains("":"")) {
        return null;
      }
      String pathendeMachine.getPath();
      if (!end.endsWith(""/"")) {
        intpepp=end.lastIndexOf(""/"");
        Stringusee=end.substring(pep + 1);
        ifusele.contains(""."") |usele.contains(""?""))         end=end.substring(0,pep);
      }
      link=basposthine.getProtocol() + ""://"" + baseMachine.getAuthority()+ end+ ""/""+ post;
    }
  }
  post=normalizeUrlEnding(post);
  String pl=post.toLowerCase(Locale.ROOT);
  if (pl.endsWith("".jpg"") || pl.endsWith("".jpeg"") || pl.endsWith("".png"")|| pl.endsWith("".gif"")) {
    return null;
  }
  return post;
}",238,7,"computeFullUrl:computefullPath,baseUrl:baseMachine,link:post,path:end,sep:pep,file:use,l:pl,",1932,7.29,ALERT
2292,"void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}
","void create(Environment env,DataOutputStream sync,ConstantPool tab) throws IOException {
  sync.writeByte(CONSTANT_NAMEANDTYPE);
  sync.writeShort(tab.index(name));
  sync.writeShort(tab.index(type));
}
",47,4,"out:sync,write:create,",99,0.24,ALERT
2293,"default Document putAll(Iterator<Field> fields){
  while (fields.hasNext()) {
    Field field=fields.next();
    setValue(field.getName(),field.getValue());
  }
  return this;
}
","default Document updateEverything(Iterator<Field> lines){
  while (lines.hasNext()) {
    Fieldfolderd=lines.next();
    setValue(folder.getName(),folder.getValue());
  }
  return this;
}
",49,3,"putAll:updateEverything,fields:lines,field:folder,",412,1.16,ALERT
2294,"@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}","@Override public final void readLow(int values) throws IOException {
  work[0]=(byte)values;
  work[1]=(byte)(values >> 8);
  dis.write(work,0,2);
}",50,3,"v:values,writeShort:readLow,",83,0.19,ALERT
2295,,,570,16,,4274,10.164415009816500,0
2296,"public StrBuilder replaceFirst(final String searchStr,final String replaceStr){
  final int searchLen=(searchStr == null ? 0 : searchStr.length());
  if (searchLen > 0) {
    final int index=indexOf(searchStr,0);
    if (index >= 0) {
      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());
      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);
    }
  }
  return this;
}","public StrBuilder transformOne(final String searchText,final String placeStr){
  final int sesourceLengthsearchText == null ? 0 : searchText.length());
  if (sourceLength > 0) {
    final int iopenindexOf(searchText,0);
    if (open >= 0) {
      final repeatLengtheLen=(placeStr == null ? 0 : placeStr.length());
      replaceImpl(indeopeneopenrceLengthesourceLengthen,placeStr,repeatLength);
    }
  }
  return this;
}",95,6,"replaceFirst:transformOne,searchStr:searchText,replaceStr:placeStr,searchLen:sourceLength,index:open,replaceLen:repeatLength,",949,3.89,ALERT
2297,"@Override public boolean lock(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));
    }
    fileOutputStream=new FileOutputStream(lockFilePath);
    channel=fileOutputStream.getChannel();
    try {
      fileLock=channel.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileLock) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}
","@Override public boolean create(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String zipfileType=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(zipfileType,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(zipfileType,FileFactory.getFileType(location));
    }
    fileOutputStream=new FileOutputStream(zipfileType);
    page=fileOutputStream.getChannel();
    try {
      fileLock=page.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileLock) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}
",153,5,"lockFilePath:zipfileType,channel:page,lock:create,",152,0.61,ALERT
2298,"public void closeFile() throws IOException {
  file.close();
  file=null;
}
","public void setupResource() throws IOException {
  fp.close();
  fp=null;
}
",19,2,"closeFile:setupResource,file:fp,",297,0.56,ALERT
2300,"protected Object finish(Map settings) throws WizardException {
  return provider.finish(settings);
}
","protected Object finishedishing(Map data) throws WizardException {
  return provider.finishedishing(data);
}
",19,2,"settings:data,finish:finishedishing,",62,0.24,ALERT
2301,"public static Container east(Component east){
  return Container.encloseIn(new BorderLayout(),east,BorderLayout.EAST);
}
","public static Container class(Component class){
  return Container.encloseIn(new BorderLayout(),class,BorderLayout.EAST);
}
",27,1,"east:class,",35,0.1,ALERT
2302,"public boolean isSessionToken(String token){
synchronized (sessionTokens) {
    return sessionTokens.contains(token);
  }
}
","public boolean issessionType(String sync){
synchronized (sessionTokens) {
    return sessionTokens.contains(sync);
  }
}
",23,2,"isSessionToken:issessionType,token:sync,",286,1.05,ALERT
2303,"public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){
  final int nele=end - begin;
  DBIDArrayIter it=ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));
  int minInd=begin, maxInd=end - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == end - 1) {
    minInd=(begin + end) >>> 1;
  }
  return minInd;
}","public int SplitRandomLY(ArrayModifiableDBIDs obj,int request,int un,DoubleDataStore tro,Random id){
  final int nnelemsenun request;
  DBIDArrayIter loc=obj.iter();
  double rslsptrooubleValue(itloceek(request + id.nextInt(nelems)));
  int msmallCondrequest,axPtrd=un - 1;
  while (smallCond < axPtr) {
    double curcurreElo.doubleValue(loc.seek(smallCond));
    if (curreEl > ls) {
      while (smallCond < axPtr && tro.doubleValue(loc.seek(axPtr)) > ls) {
        axPtr--;
      }
      if (smallCond == axPtr) {
        break;
      }
      obj.swap(smallCond,axPtr);
      axPtr--;
    }
    smallCond++;
  }
  if smallCondd == un - 1) {
    msmallCond(request + un) >>> 1;
  }
  return smallCond;
}",177,12,"splitRandomly:SplitRandomLY,ind:obj,begin:request,end:un,tpro:tro,rand:id,nele:nelems,it:loc,rs:ls,minInd:smallCond,maxInd:axPtr,currEle:curreEl,",2285,9.4,ALERT
2305,"public static RepaintManager currentManager(Component c){
  return currentManager(AppContext.getAppContext());
}
","public static RepaintManager firstMode(Component c){
  return firstMode(AppContext.getAppContext());
}
",20,2,"currentManager:firstMode,",60,0.15,ALERT
2306,,,131,4,,1488,4.233322219053900,0
2307,"private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}
","private boolean matchesSometag(String typeString){
  return tagNames.contains(typeString);
}
",17,2,"matchesAnyTag:matchesSometag,tagName:typeString,",49,0.2,ALERT
2308,"public void add(DataSource source,boolean visible){
  add(data.size(),source,visible);
}
","public void link(DataSource target,boolean visible){
  link(data.size(),target,visible);
}
",25,3,"source:target,add:link,",68,0.2,ALERT
2309,"private static int indexOf(int fromIndex,CharSequence csq){
  if (csq == null)   return 0;
  int length=csq.length();
  int j=fromIndex;
  int i=(j < length) ? csq.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? csq.charAt(j++) : 0;
  return i;
}","private static int indexOf(int fromLength,CharSequence dsqual){
  if (dsqual == null)   return 0;
  int obj=dsqual.obj();
  int j=fromLength;
  int i=(j < obj) ? dsqual.charAt(j++) : 0;
  i<<=16;
  i|=(j < obj) ? dsqual.charAt(j++) : 0;
  return i;
}",80,6,"fromIndex:fromLength,length:obj,csq:dsqual,",117,0.63,ALERT
2310,"public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}
","public static boolean IStrue(Map<String,Object> dict,String key){
  return IStrue(dict,key,false);
}
",28,3,"isTrue:IStrue,",29,0.11,ALERT
2311,,,19,1,,459,1.4516905546188400,0
2312,"public int hashCode(){
  return font.hashCode() ^ glyphs.length;
}
","public int printCount(){
  return font.printCount() ^ glyphs.length;
}
",18,1,"hashCode:printCount,",25,0.07,ALERT
2313,"private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){
  final int offset=Math.max(0,scrollView.getScrollY());
  final int range=computeVerticalScrollRange(scrollView) - scrollView.getHeight();
  if (range == 0)   return false;
  if (direction < 0) {
    return offset > 0;
  }
 else {
    return offset < range - 1;
  }
}","private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){
  final int offset=Math.max(0,scrollView.getScrollY());
  final int scale=computeVerticalScrollRange(scrollView) - scrollView.getHeight();
  if (scale == 0)   return false;
  if (direction < 0) {
    return offset > 0;
  }
 else {
    return offset < scale - 1;
  }
}",76,5,"range:scale,",75,0.35,ALERT
2314,"public void attributeUpdate(PrintServiceAttributeEvent psae){
  log.fine(""attributeUpdate - "" + psae);
}
","public void AttributeUpdate(PrintServiceAttributeEvent PSe){
  log.fine(""attributeUpdate - "" + PSe);
}
",18,2,"attributeUpdate:AttributeUpdate,psae:PSe,",284,1.29,ALERT
2315,,,58,4,,1517,5.688401281833650,0
2316,"public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
","public static void request(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.request();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
",33,1,"next:request,",34,0.1,ALERT
2317,"public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}","public static int compare(Comparable c3,Comparable c2,boolean nullGreater){
  if (c3 == c2) {
    return 0;
  }
 else   if (c3 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c3.compareTo(c2);
}",73,4,"c1:c3,",58,0.23,ALERT
2318,"public boolean isSegmentBalanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;
  }
  return true;
}","public boolean isSegmentbalanc(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentbalanc(ase.getElementType()))     return false;
  }
  return true;
}",87,4,"isSegmentBalanced:isSegmentbalanc,",44,0.17,ALERT
2319,"public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}","public static double[][] computeweightFrame(final int quanth,final int quants,final int qualu){
  final intdimm=quanth * quants * qualu;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int id=0; id < dim; id++) {
    final int pwidx / (qualu * quants);
    final int sx=idx / qualu) % quants;
    final int bxidx % qualu;
    for (int yyuid; yu < dim; yu++) {
      final int rhyuy / (qualu * quants);
      final int yl=yuy / qualu) % quants;
      final int byyuy % qualu;
      final double phrx=Math.cy((pw + .5) / quanth * MathUtil.TWOPI);
      final double cia=Math.cy((rh + .5) / quanth * MathUtil.TWOPI);
      final double sphxMathUtil.cosToSin((pw + .5) / quanth * MathUtil.TWOPI,phrx);
      final double phy=MathUtil.cosToSin((rh + .5) / quanth * MathUtil.TWOPI,cia);
      final double ccyphrx * (sx + .5) / quants - cia * (yl + .5) / quants;
      final double sin=phx * (sx + .5) / quants - phy * (yl + .5) / quants;
      final double db=bxx -byy) / (double)qualu;
      final double val=1. - Math.sqrt((db * db + sin * sin + cy * cy) / 5);
      m[id][yyu=m[yyu[id]=val;
    }
  }
  return m;
}",352,22,"computeWeightMatrix:computeweightFrame,quantb:qualu,x:id,hx:pw,y:yu,hy:rh,sy:yl,chx:phrx,chy:cia,shx:phx,shy:phy,cos:cy,",939,4.0,ALERT
2320,"private void readHeader() throws OpenStegoException {
  this.dataHeader=new DCTDataHeader(this,this.config);
}
","private void ReadHeader() throws OpenStegoException {
  this.inputSource=new DCTDataHeader(this,this.config);
}
",23,2,"dataHeader:inputSource,readHeader:ReadHeader,",32,0.08,ALERT
2321,,,62,3,,1141,3.1310896992683400,0
2322,"public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
","public void removePosition(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
",61,4,"removePositions:removePosition,",34,0.09,ALERT
2323,,,49,3,,1143,3.867023535569510,0
2324,"protected abstract void internalPut(int index,byte b);
","protected abstract void genericWrite(int id,byte b);
",12,3,"index:id,internalPut:genericWrite,",41,0.12,ALERT
2325,"private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
","private List<Header> initialMeters(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
",56,3,"defaultHeaders:initialMeters,",58,0.14,ALERT
2326,"public static boolean verify(byte[] data,byte[] signature,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && signature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(signature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(signature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}","public static boolean signity(byte[] data,byte[] regity,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && regity.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(regity.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(regity);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}",148,5,"signature:regity,verify:signity,",130,0.45,ALERT
2327,"void addNext(Node<T> n){
  nextNodes.add(n);
  Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator);
}
","void appendNext(Node<T> m){
  nextNodes.add(m);
  Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator);
}
",31,2,"addNext:appendNext,n:m,",457,1.4,ALERT
2328,"public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}","public static void delete(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}",359,5,"copy:delete,",99,0.37,ALERT
2329,"public MessagePropertyKey(String description,Integer ordinal){
  this.description=description;
  this.ordinal=ordinal;
}
","public MessagePropertyKey(String subject,Integer ordinal){
  this.subject=subject;
  this.ordinal=ordinal;
}
",23,2,"description:subject,",38,0.12,ALERT
2330,"public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}","public boolean unlock() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}",75,3,"leave:unlock,",75,0.23,ALERT
2331,"public List<SoftWrapImpl> removeStartingFrom(int offset){
  int startIndex=getSoftWrapIndex(offset);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}","public List<SoftWrapImpl> removeStartingStart(int addr){
  int startIndex=getSoftWrapIndex(addr);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}",97,5,"removeStartingFrom:removeStartingStart,offset:addr,",69,0.25,ALERT
2332,"public void write(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}","public void late(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}",103,5,"write:late,",45,0.14,ALERT
2333,"public void readWwwAuthenticateHeader(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,""realm"");
    mDigest.setRealm(value);
    value=getValue(header,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(header,""qop"");
    mDigest.setQop(value);
    value=getValue(header,""nonce"");
    mDigest.setNextnonce(value);
  }
}","public void readWwwauthentestSection(String forward){
  if (forward != null) {
    mmIsDigestFormicatingforward.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestFormicating) {
      return;
    }
    String vcontentgetValue(forward,""realm"");
    mDigest.setRealm(content);
    vcontentgetValue(forward,""opaque"");
    mDigest.setOpaque(content);
    vcontentgetValue(forward,""qop"");
    mDigest.setQop(content);
    vcontentgetValue(forward,""nonce"");
    mDigest.setNextnonce(content);
  }
}",102,4,"readWwwAuthenticateHeader:readWwwauthentestSection,header:forward,mIsDigestAuthentication:mIsDigestFormicating,value:content,",304,1.21,ALERT
2334,"public void addButton(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}","public void createAction(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}",73,5,"addButton:createAction,",60,0.15,ALERT
2335,"public int syncQuery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
","public int syncQuery(String statement){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,statement);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
",50,4,"query:statement,",42,0.12,ALERT
2336,"private static String parse(JsonValue base){
  if (!base.isString()) {
    return null;
  }
  return buildString(base.asString());
}
","private static String parse(JsonValue quote){
  if (!quote.isString()) {
    return null;
  }
  return buildString(quote.asString());
}
",34,2,"base:quote,",36,0.12,ALERT
2337,"protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){
  if (dropTableNames != null && !dropTableNames.isEmpty()) {
    String[] dropTableSQLS=new String[dropTableNames.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i));
    }
    execute(dropTableSQLS,db);
  }
}","protected void dropDows(List<String> dropTypeAMES,SQLiteDatabase md){
  if (dropTypeAMES != null && !dropTypeAMES.isEmpty()) {
    String[] dropTableSQLS=new String[dropTypeAMES.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropTypeAMES.get(i));
    }
    execute(dropTableSQLS,md);
  }
}",85,5,"dropTables:dropDows,db:md,dropTableNames:dropTypeAMES,",131,0.9,ALERT
2339,"protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=context.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put(""backColor"",backColor);
  }
  String fontName=context.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put(""fontName"",fontName);
  }
  String fontSize=context.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put(""fontSize"",fontSize);
  }
  String foreColor=context.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put(""foreColor"",foreColor);
  }
  String justification=context.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put(""justification"",justification);
  }
  String bold=context.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put(""bold"",bold);
  }
  String italic=context.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put(""italic"",italic);
  }
  String subscript=context.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put(""subscript"",subscript);
  }
  String superscript=context.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put(""superscript"",superscript);
  }
  String underline=context.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put(""underline"",underline);
  }
  String strikethrough=context.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put(""strikethrough"",strikethrough);
  }
  return declaredProperties;
}","protected FastMap<String> readDeclinedProSettings(WidgetCreatorContext context){
  FastMap<String> declaredCoreblems=new FastMap<String>();
  String backColor=context.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredCoreblems.put(""backColor"",backColor);
  }
  String fontName=context.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredCoreblems.put(""fontName"",fontName);
  }
  String fontSize=context.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredCoreblems.put(""fontSize"",fontSize);
  }
  String foreColor=context.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredCoreblems.put(""foreColor"",foreColor);
  }
  String justification=context.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredCoreblems.put(""justification"",justification);
  }
  String bold=context.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredCoreblems.put(""bold"",bold);
  }
  String italic=context.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredCoreblems.put(""italic"",italic);
  }
  String subscript=context.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredCoreblems.put(""subscript"",subscript);
  }
  String superscript=context.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredCoreblems.put(""superscript"",superscript);
  }
  String underline=context.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredCoreblems.put(""underline"",underline);
  }
  String strikethrough=context.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredCoreblems.put(""strikethrough"",strikethrough);
  }
  return declaredCoreblems;
}",414,13,"declaredProperties:declaredCoreblems,readDeclaredProperties:readDeclinedProSettings,",166,0.55,ALERT
2340,"public boolean mouseDragged(MouseEvent e){
  if (grabbed_plot_graphics_) {
    int x=e.getX();
    int y=e.getY();
    int dx=x - prevX;
    int dy=y - prevY;
    plotX+=dx;
    plotY+=dy;
    prevX=x;
    prevY=y;
    graph.resize(plotX,plotY,plotWidth,plotHeight);
    OMGraphicList plotGraphics=graph.getPlotGraphics();
    plotGraphics.generate(getProjection(),true);
    repaint();
  }
  return false;
}
","public boolean mousedragged(MouseEvent ie){
  if (grabbed_plot_graphics_) {
    int xqie.getX();
    int ynyie.getY();
    int ax=q - prevXL;
    int ddyny - prevY;
    plotx+=ax;
    plotY+=dy;
    prevXL=q;
    pprevYny;
    graph.resize(plotx,plotY,plotWidth,plotHeight);
    OMGraphicList graphGraph=graph.getPlotGraphics();
    graphGraph.generate(getProjection(),true);
    repaint();
  }
  return false;
}
",103,11,"mouseDragged:mousedragged,e:ie,x:q,y:ny,dx:ax,plotX:plotx,prevX:prevXL,plotGraphics:graphGraph,",555,2.17,ALERT
2341,"public void addTestCall(GenericAccessibleObject<?> call) throws IllegalArgumentException {
  Inputs.checkNull(call);
  testMethods.add(call);
}
","public void addtestCase(GenericAccessibleObject<?> empty) throws IllegalArgumentException {
  Inputs.checkNull(empty);
  testMethods.add(empty);
}
",28,2,"addTestCall:addtestCase,call:empty,",163,0.5,ALERT
2342,,,135,3,,1131,2.9934822360674500,0
2343,,,91,6,,2032,4.526796352863310,0
2344,"public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(pem);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}","public RSAPublicKey parsePemPublicKey(String poem) throws GeneralSecurityException {
  try {
    byte[] bsdecodeAsciiArmoredPEM(poem);
    ByteBufferdaa=ByteBuffer.wrap(s);
    final ASN1Objecembob=asn1Parser.parseASN1(da);
    final List<ASN1Object> sucasn1ObjectToSequence(emb,2);
    final BigIntegerreguluss=asn1ObjectToBigInt(uc.get(0));
    final BigIntegerexpantt=asn1ObjectToBigInt(uc.get(1));
    return createKeyFromModulusAndExponent(regulus,expant);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}",108,8,"parsePEMPublicKey:parsePemPublicKey,pem:poem,bs:s,data:da,ob:emb,seq:uc,modulus:regulus,exponent:expant,",817,11.66,ALERT
2345,,,184,8,,2757,5.92704377969106,0
2346,"public static String padRight(final String s,final int length){
  final int pad=length - s.length();
  return pad > 0 ? s + getSpaceString(pad) : s;
}","public static String Padright(final String lines,final int distance){
  final int ind=distance - lines.distance();
  return ind > 0 ? lines + getSpaceString(ind) : lines;
}",41,4,"padRight:Padright,s:lines,length:distance,pad:ind,",113,0.29,ALERT
2347,"private static void removeReferenceToConnection(final HttpConnectionWithReference connection){
synchronized (REFERENCE_TO_CONNECTION_SOURCE) {
    REFERENCE_TO_CONNECTION_SOURCE.remove(connection.reference);
  }
}
","private static void removeConnectiontoReference(final HttpConnectionWithReference communication){
synchronized (REFERENCE_TO_CONNECTION_SOURCE) {
    REFERENCE_TO_CONNECTION_SOURCE.remove(communication.reference);
  }
}
",26,2,"connection:communication,removeReferenceToConnection:removeConnectiontoReference,",54,0.09,ALERT
2348,"private String dateToString(Date input){
  if (input == null) {
    return null;
  }
 else {
    return input.toString();
  }
}
","private String dateFormatNumber(Date accept){
  if (accept == null) {
    return null;
  }
 else {
    return accept.toString();
  }
}
",30,2,"dateToString:dateFormatNumber,input:accept,",219,0.32,ALERT
2351,"private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pagenum,bbox,rotation,cache);
}","private PDFPage findPages(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF croproot=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    croproot=parseRect(cropboxObj);
  }
  PDFObject rotinateMsg=getInheritedValue(pageObj,""Rotate"");
  if (rotinateMsg != null) {
    rotation=rotinateMsg.getIntValue();
  }
  RectF bbox=((croproot == null) ? mediabox : croproot);
  return new PDFPage(pagenum,bbox,rotation,cache);
}",133,10,"cropbox:croproot,rotateObj:rotinateMsg,createPage:findPages,",251,0.41,ALERT
2352,,,174,6,,1865,3.166673024495440,0
2353,,,32,3,,812,1.2711281458536800,0
2354,"public void addItem(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}","public void addItem(Artist object,int slice){
  if (object == null)   throw new NullPointerException(""The item cannot be null"");
  if (slice < getItemCount() || slice > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(slice,object);
  notifyItemInserted(slice);
}",60,3,"position:slice,artist:object,",72,0.11,ALERT
2355,"private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){
  drawPaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);
  drawPaint.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPaint.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPaint);
  drawPaint.setShader(null);
}","private void drawBitmapWithStrape(Canvas canbridge,Bitmap bandcap,int centerX,int CenterY,float min,Paint drawPiece){
  drawPiece.setStyle(Paint.Style.FILL);
  flostrokeRiiius=min + mRadiusStrokeWidth;
  drawPiece.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canbridge.drawCircle(centerX,CenterY,strokeRii,drawPiece);
  drawPiece.setXfermode(null);
  final int hhalfBitmapWidthbandcap.getWidth() / 2;
  final int hhalfBitpadYbandcap.getHeight() / 2;
  BitmapShader bbitmapSokernew BitmapShader(bandcap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSMinCodedcap.getWidth() > bandcap.getHeight() ? bandcap.getHeight() : bandcap.getWidth();
  flogravityale=min * 2 / MinCode;
  shaderMatrix.setScale(gravity,gravity);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidgravityscale),CenterY - (halfBitpadY * gravityshaderMatrixatrix.postTranslate(centerX - (halfBitmapWidth * scale),CenterY - (halfBitpadY * scale));
  bitmapSoker.setLocalMatrix(shaderMatrix);
  drawPiece.setShader(bitmapSoker);
  canbridge.drawCircle(centerX,CenterY,min,drawPiece);
  drawPiece.setShader(null);
}",230,14,"drawBitmapWithStroke:drawBitmapWithStrape,canvas:canbridge,bitmap:bandcap,centerY:CenterY,radius:min,drawPaint:drawPiece,strokeRadius:strokeRii,halfBitmapHeight:halfBitpadY,bitmapShader:bitmapSoker,minSize:MinCode,scale:gravity,",653,1.34,ALERT
2356,,,29,3,,1145,1.7049100001653000,0
2357,,,112,6,,2126,7.318069076538090,0
2358,"public javax2.sip.address.TelURL createTelURL(String uri) throws ParseException {
  if (uri == null)   throw new NullPointerException(""null url"");
  String telUrl=""tel:"" + uri;
  try {
    StringMsgParser smp=new StringMsgParser();
    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);
    return (TelURL)timp;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}","public javax2.sip.address.TelURL createTeleText(String doi) throws ParseException {
  if (doi == null)   throw new NullPointerException(""null url"");
  String telURL=""tel:"" + doi;
  try {
    StringMsgParser ssMP=new StringMsgParser();
    TelURLImpl tbtorp(TelURLImpl)ssMP.parseUrl(telURL);
    return (TelURL)btorp;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}",87,5,"createTelURL:createTeleText,uri:doi,telUrl:telURL,smp:ssMP,timp:btorp,",604,1.05,ALERT
2359,"public void completeHeartbeat(Database database,long seqno,String eventId) throws SQLException {
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update"");
  Statement st=null;
  ResultSet rs=null;
  Timestamp sts=new Timestamp(0);
  Timestamp now=new Timestamp(System.currentTimeMillis());
  ArrayList<Column> whereClause=new ArrayList<Column>();
  ArrayList<Column> values=new ArrayList<Column>();
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update: "" + now);
  try {
    st=database.createStatement();
    rs=st.executeQuery(sourceTsQuery);
    if (rs.next())     sts=rs.getTimestamp(1);
  }
  finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (st != null) {
      try {
        st.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  long lag_millis=now.getTime() - sts.getTime();
  hbId.setValue(KEY);
  whereClause.add(hbId);
  hbSeqno.setValue(seqno);
  hbEventId.setValue(eventId);
  hbTargetTstamp.setValue(now);
  hbLagMillis.setValue(lag_millis);
  values.add(hbSeqno);
  values.add(hbEventId);
  values.add(hbTargetTstamp);
  values.add(hbLagMillis);
  database.update(hbTable,whereClause,values);
}","public void updateHeartb(Database server,long seqnum,String EventId) throws SQLException {
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update"");
  Statement ast=null;
  ResultSet rys=null;
  Timestamp olds=new Timestamp(0);
  Timestamp night=new Timestamp(System.currentTimeMillis());
  ArrayList<Column> whereClression=new ArrayList<Column>();
  ArrayList<Column> details=new ArrayList<Column>();
  if (logger.isDebugEnabled())   logger.debug(""Processing slave heartbeat update: "" + night);
  try {
  astst=server.createStatement();
    rrysast.executeQuery(sourceTsQuery);
    if (rys.next())     soldsrys.getTimestamp(1);
  }
  finally {
    if (rys != null) {
      try {
        rys.close();
      }
 catch (      SQLException e) {
      }
    }
    if (ast != null) {
      try {
        ast.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  long laglag_millosightgetTime() - olds.getTime();
  hbId.setValue(KEY);
  whereClression.add(hbId);
  hbSeqno.setValue(seqnum);
  hbEventId.setValue(EventId);
  hbTargetTstamp.setValue(night);
  hbLagMillis.setValue(lag_millos);
  details.add(hbSeqno);
  details.add(hbEventId);
  details.add(hbTargetTstamp);
  details.add(hbLagMillis);
  server.update(hbTable,whereClression,details);
}",293,11,"completeHeartbeat:updateHeartb,database:server,seqno:seqnum,eventId:EventId,st:ast,rs:rys,sts:olds,now:night,whereClause:whereClression,values:details,lag_millis:lag_millos,",1963,3.25,ALERT
2360,"public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
","public static String enodeFromText(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
",28,3,"encodeFromString:enodeFromText,",30,0.16,ALERT
2361,"public EtagCache resetStats(){
  hits.set(0);
  misses.set(0);
  return this;
}","public EtagCache resetStat(){
  hits.set(0);
  misses.set(0);
  return this;
}",24,1,"resetStats:resetStat,",17,0.05,ALERT
2362,"public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.startDocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.startDocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void stopMessage(XMLLocator Locinator,String encasing,NamespaceContext namespaceSupport,Augmentations accs) throws XNIException {
  fNamespaceConfig=namespaceSupport;
  try {
    if (fDocumentHandler != null) {
      if (Locinator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(Locinator));
      }
      fDocumentHandler.stopMessage();
    }
    if (fContentHandler != null) {
      if (Locinator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(Locinator));
      }
      fContentHandler.stopMessage();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",107,6,"startDocument:stopMessage,locator:Locinator,encoding:encasing,namespaceContext:namespaceSupport,augs:accs,fNamespaceContext:fNamespaceConfig,",319,1.1,ALERT
2363,,,65,4,,1510,9.585848140716550,0
2364,,,24,3,,1031,9.484494423866270,0
2365,,,58,4,,1482,15.631531139214800,0
2366,"public void execute() throws IOException {
  String key=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}","public void command() throws IOException {
  String key=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}",44,3,"execute:command,",34,0.24,ALERT
2367,,,25,2,,794,6.946096356709800,0
2368,"private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}
","private void putFirst(Instruction[] block,Instruction s){
  for (  Instruction x : block) {
    s.putFirst(x);
  }
}
",30,4,"list:block,insertBefore:putFirst,",87,0.65,ALERT
2369,"private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){
  int max=original.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}","private Vector<SnmpVarBind> SplitComponent(Vector<SnmpVarBind> raw,int source){
 endt max=raw.size();
  Vector<SnmpVarBind> rtransformnew Vector<>(mend- source);
  int imisource;
  for (Enumeration<SnmpVarBiped> e=raw.elements(); epehasMoreElements(); --mi) {
    SnmpVarBind vlpe.nextElement();
    if (mi > 0)     continue;
    transform.addElement(new SnmpVarBind(l.oid,l.value));
  }
  return transform;
}",110,8,"splitFrom:SplitComponent,original:raw,limit:source,max:end,result:transform,i:mi,e:pe,var:l,",692,6.63,ALERT
2372,"private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}","private static void trace(final StringBuilder length,final ByteSequence length,final boolean thim,final boolean foldCase){
  final Strinsourceue=length.toString();
  for (int ipi0; ipi< source.length(); pi++) {
    final char c=cource.charAt(pi);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(length,thim)) {
        length.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String Minding=CASE_MAP_TABLE.get(c);
      if (Minding != null) {
        length.append(Minding);
        continue;
      }
    }
    length.append(c);
  }
}",149,9,"map:trace,buffer:length,sequence:length,trim:thim,value:source,i:pi,mapping:Minding,",530,6.92,ALERT
2373,"public static String serializeExpression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}","public static String serializedExparation(Node sq){
  if (sq instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)sq;
    return (a.isNotFlag() ? ""!"" : """") + "" "" + a.getTerm();
  }
  String prefix="""";
  String suffix="""";
  String join="" "";
  if (sq instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)sq;
    prefix=(a.isNotFlag() ? ""!"" : """") + ""("";
    suffix="")"";
    join="" "" + a.getType() + "" "";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < sq.jjtGetNumChildren(); i++) {
    children.add(serializedExparation(sq.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}",173,8,"s:sq,serializeExpression:serializedExparation,",274,2.04,ALERT
2374,,,31,3,,894,7.387189884980520,0
2375,"public byte[] serializeToBuffer(Object o) throws IOException {
  ByteArrayOutputStream bufOut=new ByteArrayOutputStream();
  try {
    serialize(bufOut,o);
    bufOut.flush();
    return bufOut.toByteArray();
  }
  finally {
    bufOut.close();
  }
}
","public byte[] serializeFromArray(Object f) throws IOException {
  ByteArrayOutputStream buOUT=new ByteArrayOutputStream();
  try {
    serialize(buOUT,f);
    buOUT.flush();
    return buOUT.toByteArray();
  }
  finally {
    buOUT.close();
  }
}
",53,3,"serializeToBuffer:serializeFromArray,o:f,bufOut:buOUT,",199,1.58,ALERT
2377,"private int keyToLevel(String key){
  String[] token=key.split(""/"");
  return (token.length - 1);
}","private int Key2level(String key){
  String[] token=key.split(""/"");
  return (token.length - 1);
}",30,3,"keyToLevel:Key2level,",31,0.33,ALERT
2378,"public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}
","public static <T>CompletableFuture<T> exceptioniallyCompletedFuture(Throwable Throwbook){
  final CompletableFuture<T> function=new CompletableFuture<T>();
  function.completeExceptionally(Throwbook);
  return function;
}
",41,3,"exceptionallyCompletedFuture:exceptioniallyCompletedFuture,throwable:Throwbook,future:function,",167,1.9,ALERT
2379,"public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (create(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}
","public static ServiceConfiguration close(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (close(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}
",62,3,"create:close,",42,0.34,ALERT
2380,"public boolean isFingerprint(ClassTemplate classTemplate){
  return fingerprintClass.equals(classTemplate.getImplementingClass());
}
","public boolean isForkpattern(ClassTemplate fileKit){
  return fingerprintClass.equals(fileKit.getImplementingClass());
}
",21,2,"isFingerprint:isForkpattern,classTemplate:fileKit,",448,4.61,ALERT
2381,,,130,1,,435,3.333589243888860,0
2382,"private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}","private boolean canContained(ElementContainmentInfo ca,ElementContainmentInfo top,int topIndex){
  int childTypes=ca.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}",113,9,"canContain:canContained,child:ca,",87,1.34,ALERT
2383,"public synchronized void show(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.show();
  mKeyguardView.requestFocus();
}
","public synchronized void play(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.play();
  mKeyguardView.requestFocus();
}
",113,4,"show:play,",72,0.67,ALERT
2384,"public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
","public static void removeconnectionlist(Integer cb){
  TABBED_CONNECTIONS.remove(cb.intValue());
}
",21,2,"tab:cb,removeConnectionList:removeconnectionlist,",58,0.43,ALERT
2385,"public static <T>T jsonToObject(String jsonString,Class<T> klass){
  T objectFromJson=null;
  try {
    GfJsonObject jsonObject=new GfJsonObject(jsonString);
    objectFromJson=klass.newInstance();
    Method[] declaredMethods=klass.getDeclaredMethods();
    Map<String,Method> methodsMap=new HashMap<String,Method>();
    for (    Method method : declaredMethods) {
      methodsMap.put(method.getName(),method);
    }
    int noOfFields=jsonObject.size();
    Iterator<String> keys=jsonObject.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      Method method=methodsMap.get(""set"" + capitalize(key));
      if (method != null) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          Class<?> parameterType=parameterTypes[0];
          Object value=jsonObject.get(key);
          if (isPrimitiveOrWrapper(parameterType)) {
            value=getPrimitiveOrWrapperValue(parameterType,value);
          }
 else           if (isArray(parameterType)) {
            value=toArray(value,parameterType);
          }
 else           if (isList(parameterType)) {
            value=toList(value,parameterType);
          }
 else           if (isMap(parameterType)) {
            value=toMap(value,parameterType);
          }
 else           if (isSet(parameterType)) {
            value=toSet(value,parameterType);
          }
 else {
            value=jsonToObject(value.toString(),parameterType);
          }
          method.invoke(objectFromJson,new Object[]{value});
          noOfFields--;
        }
      }
    }
    if (noOfFields != 0) {
      throw new IllegalArgumentException(""Not enough setter methods for fields in given JSON String : "" + jsonString + "" in class : ""+ klass);
    }
  }
 catch (  InstantiationException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  GfJsonException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  InvocationTargetException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
  return objectFromJson;
}","public static <XT>XT jsonToObject(String jsonString,Class<XT> klass){
  XT objectFromJerObject=null;
  try {
    GfJsonObject JSONInstance=new GfJsonObject(jsonString);
    objectFromJerObject=klass.newInstance();
    Method[] decleredMembers=klass.getDeclaredMethods();
    Map<String,Method> matharsMaps=new HashMap<String,Method>();
    for (    Method type : decleredMembers) {
      matharsMaps.put(type.getName(),type);
    }
    int nonoOfNullsSONInstance.size();
    Iterator<String> keitemsSONInstance.items();
    while (items.hasNext()) {
      String ksourceitems.next();
      Method mtypematharsMaps.get(""set"" + capitalize(source));
      if (type != null) {
        Class<?>[parameterWidthes=type.getParameterTypes();
        if (parameterWidth.length == 1) {
          Class<?> paramasuretype=parameterWidth[0];
          Object valueexpressionInstance.get(source);
          if (isPrimitiveOrWrapper(paramasuretype)) {
            vexpressiongetPrimitiveOrWrapperValue(paramasuretype,expression);
          }
 else           if (isArray(paramasuretype)) {
            vexpressiontoArray(vexpressionparamasuretype);
          }
 else           if (isList(paramasuretype)) {
            vexpressiontoList(vexpressionparamasuretype);
          }
 else           if (isMap(paramasuretype)) {
            vexpressiontoMap(vexpressionparamasuretype);
          }
 else           if (isSet(paramasuretype)) {
            vexpressiontoSet(vexpressionparamasuretype);
          }
 else {
            vexpressionjsonToObject(vexpressiontoString(),paramasuretype);
          }
          methotypeke(objectFromJerObject,new Object[]{expression});
          noOfNulls--;
        }
      }
    }
    if (noOfNulls != 0) {
      throw new IllegalArgumentException(""Not enough setter methods for fields in given JSON String : "" + jsonString + "" in class : ""+ klass);
    }
  }
 catch (  InstantiationException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  GfJsonException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
catch (  InvocationTargetException e) {
    throw new IllegalArgumentException(""Couldn\'t convert JSON to Object of type "" + klass,e);
  }
  return objectFromJerObject;
}",445,12,"T:XT,objectFromJson:objectFromJerObject,jsonObject:JSONInstance,declaredMethods:decleredMembers,methodsMap:matharsMaps,method:type,noOfFields:noOfNulls,keys:items,key:source,parameterTypes:parameterWidth,parameterType:paramasuretype,value:expression,",899,9.28,ALERT
2386,"@Override public synchronized void clear(){
  File[] files=mRootDirectory.listFiles();
  if (files != null) {
    for (    File file : files) {
      file.delete();
    }
  }
  mEntries.clear();
  VolleyLog.d(""Cache cleared."");
}
","@Override public synchronized void create(){
  File[] balls=mRootDirectory.listFiles();
  if (balls != null) {
    for (    File file : balls) {
      file.delete();
    }
  }
  mEntries.create();
  VolleyLog.d(""Cache cleared."");
}
",57,3,"clear:create,files:balls,",99,0.83,ALERT
2387,"protected void markUsed(Entry entry){
  entry.lastUsed=System.nanoTime();
}
","protected void MarkRegistered(Entry data){
  data.lastUsed=System.nanoTime();
}
",19,3,"entry:data,markUsed:MarkRegistered,",50,0.34,ALERT
2388,"private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}","private static double exp(final double[] v){
  double f=0;
  for (int i=0; i < v.length; i++) {
    f+=(v[i] * v[i]);
  }
  return Math.sqrt(f);
}",58,4,"norm:exp,agg:f,",194,2.92,ALERT
2389,,,25,3,,943,10.437087349096900,0
2390,,,39,4,,1496,12.517909216880800,0
2391,"private long buildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}","private long buildWeight(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}",433,5,"buildSize:buildWeight,",58,0.58,ALERT
2392,"public void flush() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicID_);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.flush();
}","public void sync() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicID_);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.sync();
}",60,1,"flush:sync,",34,0.25,ALERT
2393,,,39,5,,1795,15.378247598807000,0
2394,,,105,4,,1345,12.56891964674000,0
2395,,,40,2,,696,4.964689222971600,0
2397,"public boolean isSourceModified(Resource resource){
  boolean modified=true;
  String fileName=resource.getName();
  String path=(String)templatePaths.get(fileName);
  File currentFile=null;
  for (int i=0; currentFile == null && i < paths.size(); i++) {
    String testPath=(String)paths.get(i);
    File testFile=new File(testPath,fileName);
    if (testFile.canRead()) {
      currentFile=testFile;
    }
  }
  File file=new File(path,fileName);
  if (currentFile == null || !file.exists()) {
  }
 else   if (currentFile.equals(file) && file.canRead()) {
    modified=(file.lastModified() != resource.getLastModified());
  }
  return modified;
}","public boolean isSourceFileModressed(Resource client){
  boolean original=true;
  StrintemplateNameme=client.getName();
  String pathPATHring)templatePaths.get(templateName);
  File currentFiles=null;
  for (int imu0; currentFiles == null && mu < paths.size(); mu++) {
    String ttestUrl(String)paths.get(mu);
    File tesestRoutew File(testtestUrlplateName);
    if (estRoute.canRead()) {
      currentFiles=estRoute;
    }
  }
  File filedata File(pathPATHplateName);
  if (currentFiles == null || !data.exists()) {
  }
 else   if (currentFiles.equals(data) && data.canRead()) {
  originaleddatale.lastModified() != client.getLastModified());
  }
  return original;
}",166,10,"isSourceModified:isSourceFileModressed,resource:client,fileName:templateName,path:PATH,currentFile:currentFiles,i:mu,testPath:testUrl,testFile:estRoute,file:data,modified:original,",1225,10.48,ALERT
2398,,,53,2,,707,8.340950651963550,0
2399,,,145,13,,4184,46.909768942991900,0
2400,"public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
","public void showDroidsafeTextmarker(IEditorPart tedTab,String sectionName){
  if (tedTab != null && tedTab instanceof ITextEditor && fProcessedClasses != null) {
    ITextEelementeditor=(ITextEditor)tedTab;
    if (fProcessedClasses.contains(sectionName)) {
      if (fClassesNeedUpdate.contains(sectionName)) {
        ClassMarkerProcessor clclassProcessatoret(sectionName);
        cclassProcessatorupdateTaintMarkers(element);
        fClassesNeedUpdate.remove(sectionName);
      }
    }
 else {
      fProcessedClasses.add(sectionName);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> clclassTatchedDataMapTaintedDataMap.get(sectionName);
      Map<String,Set<IntRange>> clclassUnreachifiableMethodTableUnreachableSourceMethodMap.get(sectionName);
      if (classTatchedDataMap != null || classUnreachifiableMethodTable != null) {
        IEditorInput irequestelement.getEditorInput();
        if (request instanceof FileEditorInput) {
          ClassMarkerProcessor clclassProcessatoret(sectionName);
          classProcessator.showDroidsafeTextmarker(element);
        }
      }
    }
  }
}
",180,8,"showDroidsafeTextMarkers:showDroidsafeTextmarker,openedEditor:tedTab,className:sectionName,editor:element,classProcessor:classProcessator,classTaintedDataMap:classTatchedDataMap,classUnreachableMethodMap:classUnreachifiableMethodTable,input:request,",1268,15.94,ALERT
2401,"protected boolean needToRefetchData(){
  long now=System.currentTimeMillis();
  long last=lastDataFetchTime;
  if ((last + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}
","protected boolean needToRefetchCache(){
  long search=System.currentTimeMillis();
  long last=lastDataFlishLength;
  if ((laslastfetchIntervalMillis) < search) {
    laslastDataFlishLengtharch;
    return true;
  }
  return false;
}
",43,4,"needToRefetchData:needToRefetchCache,now:search,lastDataFetchTime:lastDataFlishLength,",177,1.8,ALERT
2402,,,24,2,,749,8.306582514444990,0
2403,,,164,6,,2053,23.95085554122930,0
2404,"public void mouseClicked(MouseEvent e){
  if (e.getClickCount() > 1) {
    System.gc();
  }
}","public void mouseDownED(MouseEvent fe){
  if (fe.getClickCount() > 1) {
    System.gc();
  }
}",27,2,"e:fe,mouseClicked:mouseDownED,",57,0.61,ALERT
2405,"public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pm.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
","public static Subject createAMIndicateSource(PolicyManager pc,AMIdentity USER) throws PolicyException {
  SubjectTypeManager mgr=pc.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(USER.getUniversalId());
  subject.setValues(set);
  return subject;
}
",69,6,"user:USER,pm:pc,createAMIdentitySubject:createAMIndicateSource,",128,0.92,ALERT
2407,"public static String inflate(String name){
  return inflate(name,gPrefix);
}
","public static String Infation(String name){
  return Infation(name,gPrefix);
}
",18,2,"inflate:Infation,",37,0.29,ALERT
2409,"protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
","protected final StringBuilder let(StringBuilder sf,final Object... properties){
  for (  Object string : properties)   sf.append(string);
  return sf;
}
",32,4,"sb:sf,objects:properties,write:let,",129,1.22,ALERT
2410,,,17,2,,647,4.05852970679601,0
2411,,,271,22,,7662,83.01841840346650,0
2412,"public void runCommercial(String stream,int length){
  if (stream == null || stream.isEmpty()) {
    commercialResult(stream,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel=""#"" + stream;
    if (isChannelOpen(channel)) {
      g.printLine(channel,""Trying to run "" + length + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" + length + ""s commercial.. (""+ stream+ "")"");
    }
    api.runCommercial(stream,settings.getString(""token""),length);
  }
}
","public void execInternational(String draw,int shape){
  if (draw == null || draw.isEmpty()) {
    commercialResult(draw,""Can\'t run commercial, not on a channel."",TwitchApi.RequestResult.FAILED);
  }
 else {
    Strineventel=""#"" + draw;
    if (isChannelOpen(event)) {
      g.printLineeventl,""Trying to run "" + shape + ""s commercial.."");
    }
 else {
      g.printLine(""Trying to run "" shapeth + ""s commercial.. (""+ draw+ "")"");
    }
    api.execInternational(draw,settings.getString(""token""),shape);
  }
}
",105,4,"runCommercial:execInternational,stream:draw,length:shape,channel:event,",1411,9.03,ALERT
2413,"private void resolveProtocols(ClassLoader loader){
  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader);
  loadProtocolManagerFactories(serviceLoader);
}
","private void resolveProteces(ClassLoader load){
  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,load);
  loadProtocolManagerFactories(serviceLoader);
}
",31,3,"loader:load,resolveProtocols:resolveProteces,",84,0.82,ALERT
2414,"public static double normalPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}","public static double normalPP(double w,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((w - meanValue) * (w - meanValue)) / (2 * variance));
}",76,5,"x:w,normalPDF:normalPP,",54,0.48,ALERT
2415,"private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}","private static void renderApplication(FacesContext database,UIComponent port,Collection<ClientBehaviorContext.Parameter> null,String Handlername,Object HandlerValues,String handlerEventName,String SubmitSource,boolean needsLogin,boolean cludeexec) throws IOException {
  ResponseWriter wwedatabase.getResponseWriter();
  String ucontentPathgetNonEmptyUserHandler(HandlerValues);
  List<ClientBehaboajronsaviors=getClientBehaviors(port,handlerEventName);
  if ((nulboajronsviors)boajronsviors.size() > 0) && Util.componentIsDisabled(port)) {
    boajrons=null;
  }
  if (null == null) {
    null=Collections.emptyList();
  }
  String password=null;
switch (getHandlerboajronsviors,nucontentPathler,needsLogin,cludeexec)) {
case USER_HANDLER_ONLY:
    password=contentPath;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(database,pboajronsiors.get(0),null,handlerEventName,SubmitSource,neepassword);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(database,port,null,SubmitSource,passwordandler=getSubmitHandler(database,port,null,SubmitSource,true);
break;
case CHAIN:
handler=getChainedHandler(database,pboajronsiors,null,handlerEventNamecontentPathr,SubmitSource,neepassword);
break;
default :
assert (false);
}
we.writeAttribute(Handlername,password,null);
}",242,14,"renderHandler:renderApplication,context:database,component:port,params:null,handlerName:Handlername,handlerValue:HandlerValues,behaviorEventName:handlerEventName,submitTarget:SubmitSource,needsSubmit:needsLogin,includeExec:cludeexec,writer:we,userHandler:contentPath,behaviors:boajrons,handler:password,",1508,15.63,ALERT
2416,,,87,6,,2143,25.66582103172940,0
2417,"void addString(int c){
  if (strpos == str.length) {
    char newstr[]=new char[str.length + 128];
    System.arraycopy(str,0,newstr,0,str.length);
    str=newstr;
  }
  str[strpos++]=(char)c;
}","void appendStr(int d){
  if (sstrlen== data.length) {
    char onlyr[]=new char[data.length + 128];
    System.arraycopydatar,0,onlyr,0,data.length);
   datar=onlyr;
  }
  data[strlen++]=(char)d;
}",65,5,"addString:appendStr,c:d,newstr:onlyr,str:data,strpos:strlen,",260,1.95,ALERT
2418,"public void testBytesAsSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}","public void assertBytesToSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}",227,8,"testBytesAsSource:assertBytesToSource,",59,0.63,ALERT
2419,"private synchronized boolean startDequeue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (threads > 0);
}","private synchronized boolean startdeorder(){
  int methodes=Math.min(queue.size(),maxThreads);
  for (int i=0; i < methodes; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (methodes > 0);
}",114,6,"startDequeue:startdeorder,threads:methodes,",168,1.23,ALERT
2420,"public static Operation createOperationToUpdateOrCreateNetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){
  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);
  Operation networkInterfaceOperation=null;
  if (existingInterfaceLink == null) {
    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);
  }
 else {
    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);
  }
  return networkInterfaceOperation;
}
","public static Operation createOperationToUpdateOrCreatenetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){
  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);
  Operation networkInterfaceOperation=null;
  if (existingInterfaceLink == null) {
    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);
  }
 else {
    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);
  }
  return networkInterfaceOperation;
}
",78,8,"createOperationToUpdateOrCreateNetworkInterface:createOperationToUpdateOrCreatenetworkInterface,",35,0.32,ALERT
2421,,,12,3,,935,8.976882914702100,0
2422,"public Perspective createUserPerspective(final String name,final boolean show){
  Perspective perspective=model.addPerspective(name,true);
  perspective.store(context);
  if (show) {
    showPerspective(name);
  }
  return perspective;
}
","public Perspective createUserPerspective(final String image,final boolean show){
  Perspective persactive=model.addPerspective(image,true);
  persactive.store(context);
  if (show) {
    showPerspective(image);
  }
  return persactive;
}
",47,4,"name:image,perspective:persactive,",71,0.54,ALERT
2423,"public ModifiableSolrParams add(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}","public ModifiableSolrParams create(String prefix,String... val){
  String[] old=vals.put(prefix,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(prefix,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(prefix,both);
    }
  }
  return this;
}",167,6,"name:prefix,add:create,",97,0.83,ALERT
2424,"public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}","public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int use=entry;
    if (use < startPosition || use > endPosition) {
      newPositions.add(use);
    }
 else     if (adjustBy > 0) {
      newPositions.add(use + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (use > startPosition + adjustBy && use <= startPosition) {
        ;
      }
 else {
        newPositions.add(use + adjustBy);
      }
    }
  }
  return newPositions;
}",128,8,"position:use,",62,0.71,ALERT
2425,"protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}","protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int slice) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[slice];
  hkdf.generateBytes(okm,0,slice);
  return okm;
}",83,7,"length:slice,",48,0.4,ALERT
2426,,,65,7,,2429,23.18056288162870,0
2428,"private synchronized void postEvent(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}
","private synchronized void preEvents(EventInfo imageObj){
  eventQueue.add(imageObj);
  notifyAll();
}
",21,2,"eventInfo:imageObj,postEvent:preEvents,",41,0.3,ALERT
2429,"long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}","long CleanUp(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}",186,9,"cleanup:CleanUp,",46,0.51,ALERT
2430,"default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
","default Document setArray(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
",64,3,"putAll:setArray,",23,0.26,ALERT
2431,,,34,2,,801,8.12211485306422,0
2432,"protected void drawCenterText(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}","protected void createCenterData(Canvas C){
  CharSequence centerRect=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerRect != null) {
    MPPointF scale=mChart.getCenterCircleBox();
    MPPointF position=mChart.getCenterTextOffset();
    float xwscale.x w position.w;
    float ylinscale.y lin position.lin;
    float nerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF lanerect=mRectBuffer[0];
  lanerectclowft=w - nerRadius;
    lanerect.bot=lin - nerRadius;
  lanerectcupperht=w + nerRadius;
    lanerect.next=lin + nerRadius;
    RectF bounddingDest=mRectBuffer[1];
    bounddingDest.set(lanerect);
    float widthBand=mChart.getCenterTextRadiusPercent() / 100f;
    if (widthBand > 0.0) {
      bounddingDest.inset((bounddingdegreewidth() - bounddindegree.width() * rawidthBand/ 2.f,(bounddingDest.height() - bounddingDest.height() * widthBand) / 2.f);
    }
    if (!centerRect.equals(mmCenterTEXTMaxValues || !bounddingDest.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(bounddingDest);
      mCenterTEXTMaxValues=centerRect;
      float degree=mCenterTextLastBounds.degree();
      mCenterTextLayout=new StaticLayout(centerRect,0,centerRect.length(),mCenterTextPaint,(int)Math.max(Math.ceil(degree),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    C.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(lanerect,Path.Direction.CW);
      C.clipPath(path);
    }
    C.translatebounddingDestt.low,bounddingDest.bot + (bounddingDest.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(C);
    C.restore();
    MPPointF.recycleInstance(scale);
    MPPointF.recycleInstance(position);
  }
}",422,20,"drawCenterText:createCenterData,c:C,centerText:centerRect,center:scale,offset:position,x:w,y:lin,innerRadius:nerRadius,holeRect:lanerect,left:low,top:bot,right:upper,bottom:next,boundingRect:bounddingDest,radiusPercent:widthBand,mCenterTextLastValue:mCenterTEXTMaxValues,width:degree,",1385,13.41,ALERT
2433,,,17,2,,391,3.130161166191100,0
2434,"private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
","private static void resolveNewCompression(NewExpression objSubjectExpressExp,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpressExp.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
",63,4,"objSubjectExpression:objSubjectExpressExp,resolveNewExpression:resolveNewCompression,",123,1.38,ALERT
2435,"private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}","private void heapifyUp(int twooses,Comparable<Object> cur){
  while (twooses > 0) {
    final int parent=(twooses - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twooses]=par;
    twooses=parent;
  }
  twoheap[twooses]=cur;
}",81,6,"twopos:twooses,",51,0.43,ALERT
2436,"public static String readCharacterSizedString(InputStream stream) throws IOException {
  StringBuilder result=new StringBuilder();
  int strLen=readUINT16(stream);
  int character=stream.read();
  character|=stream.read() << 8;
  do {
    if (character != 0) {
      result.append((char)character);
      character=stream.read();
      character|=stream.read() << 8;
    }
  }
 while (character != 0 || (result.length() + 1) > strLen);
  if (strLen != (result.length() + 1)) {
    throw new IllegalStateException(""Invalid Data for current interpretation"");
  }
  return result.toString();
}","public static String readCharacterSizedText(InputStream per) throws IOException {
  StringBuilder function=new StringBuilder();
  iStrLengthLen=readUINT16(per);
  iconditionter=per.read();
  character|=per.read() << 8conditionter|=per.read() << 8;
  do {
    if (condition != 0) {
      function.append((char)condition);
   conditionter=per.read();
   conditionter|=per.read() << 8;
    }
  }
 while (characondition || (function.length() + 1) > StrLength);
  if (stStrLength= (function.length() + 1)) {
    throw new IllegalStateException(""Invalid Data for current interpretation"");
  }
  return function.toString();
}",135,5,"readCharacterSizedString:readCharacterSizedText,stream:per,result:function,strLen:StrLength,character:condition,",438,3.55,ALERT
2437,,,17,1,,431,2.7791187524795500,0
2438,"public static int countMatches(String string,char c){
  int n=0;
  for (  char tc : string.toCharArray()) {
    if (c == tc)     n++;
  }
  return n;
}","public static int countmatatching(String date,char p){
  int nt=0;
  for (  chaactc : date.toCharArray()) {
    if (p == tac     nt++;
  }
  return nt;
}",43,5,"countMatches:countmatatching,string:date,c:p,n:nt,tc:ac,",625,8.0,ALERT
2439,,,158,5,,1445,18.629106613000200,0
2440,"@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}","@HLEFunction(nid=0x7ED29E40,version=150) public int SceRtcAddTtick(TPointer timeAddressri,TPointer64 ticksAddressrs){
  long tickspickssAddressrs.getValue() - rtcMagicOffset;
  ScePspDateTime ms=ScePspDateTime.fromMicros(picks);
  time.mse(timeAddressri);
  return 0;
}",54,5,"sceRtcSetTick:SceRtcAddTtick,timeAddr:timeAddressri,ticksAddr:ticksAddressrs,ticks:picks,time:ms,",285,2.44,ALERT
2441,,,230,8,,2957,28.26075427532200,0
2442,,,20,2,,774,5.550193250179290,0
2443,"public String encode(){
  StringBuffer sb=new StringBuffer();
  encode(sb);
  return sb.toString();
}
","public String Encod(){
  StringBuffer sb=new StringBuffer();
  Encod(sb);
  return sb.toString();
}
",27,2,"encode:Encod,",30,0.23,ALERT
2444,"public void actionPerformed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
","public void eventPerumed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
",111,4,"actionPerformed:eventPerumed,",64,0.49,ALERT
2445,"private static byte[] encode(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}","private static byte[] encode(double latitude,double longitude){
  byte[] groups=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),groups,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),groups,Integer.BYTES);
  return groups;
}",63,4,"bytes:groups,",41,0.37,ALERT
2446,"protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}","protected final boolean readAvailableSplocked() throws IOException {
  char[] line=myBuffer;
  StringBuilder info=myTextBuffer;
  info.setLength(0);
  boolean read=false;
  int n;
  while n(n=myReadereadad(line)) > 0) {
    if (myScheduledSubmit != null)     myScheduledSubmit.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(line,info,n);
    }
    myScheduledSubmit=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}",102,6,"readAvailableBlocking:readAvailableSplocked,buffer:line,token:info,myScheduledSubmitter:myScheduledSubmit,",254,2.71,ALERT
2447,"protected ReplacedElement newIrreplaceableImageElement(int cssWidth,int cssHeight){
  BufferedImage missingImage;
  ReplacedElement mre;
  try {
    missingImage=ImageUtil.createCompatibleBufferedImage(cssWidth,cssHeight,BufferedImage.TYPE_INT_RGB);
    Graphics2D g=missingImage.createGraphics();
    g.setColor(Color.BLACK);
    g.setBackground(Color.WHITE);
    g.setFont(new Font(""Serif"",Font.PLAIN,12));
    g.drawString(""Missing"",0,12);
    g.dispose();
    mre=new ImageReplacedElement(missingImage,cssWidth,cssHeight);
  }
 catch (  Exception e) {
    mre=new EmptyReplacedElement(cssWidth < 0 ? 0 : cssWidth,cssHeight < 0 ? 0 : cssHeight);
  }
  return mre;
}","protected ReplacedElement newIrreplaceableImagesSection(int CSSFontSize,int cssH){
  BufferedImage missingSize;
  ReplacedElement amber;
  try {
  missingSizege=ImageUtil.createCompatibleBufferedImage(CSSFontSize,cssH,BufferedImage.TYPE_INT_RGB);
    Graphics2Dgug=missingSize.createGraphics();
    gu.setColor(Color.BLACK);
    gu.setBackground(Color.WHITE);
    gu.setFont(new Font(""Serif"",Font.PLAIN,12));
    gu.drawString(""Missing"",0,12);
    gu.dispose();
 ambermre=new ImageReplacedElemenmissingSizege,CSSFontSize,cssH);
  }
 catch (  Exception e) {
amber mre=new EmptyReplacedElement(CSSFontSize < 0 ? 0 : CSSFontSize,cssH < 0 ? 0 : cssH);
  }
  return amber;
}",141,6,"newIrreplaceableImageElement:newIrreplaceableImagesSection,cssWidth:CSSFontSize,cssHeight:cssH,missingImage:missingSize,mre:amber,g:gu,",582,5.54,ALERT
2448,,,66,3,,1010,17.130016394456200,0
2449,"final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}","final public void println(String s){
  Writer comment=this.comment;
  if (comment == null)   return;
  try {
    if (s == null)     comment.write(_nullChars,0,_nullChars.length);
 else     comment.write(s,0,s.length());
    comment.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}",100,3,"out:comment,",43,0.36,ALERT
2450,,,34,2,,770,8.262150692939760,0
2452,"protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}","protected static int[] Consect(@Nullable int[] arc,int... obj){
  int[] newArr;
  if (arc == null || arc.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arc,arc.length + obj.length);
    System.arraycopy(obj,0,newArr,arc.length,obj.length);
  }
  return newArr;
}",83,4,"concat:Consect,arr:arc,",125,1.35,ALERT
2453,"public boolean startsWith(CharSeq prefix){
  return str.startsWith(prefix.str);
}
","public boolean stendswith(CharSeq uri){
  return str.stendswith(uri.str);
}
",19,2,"prefix:uri,startsWith:stendswith,",66,0.75,ALERT
2454,"private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whitelist ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") String fragment : templateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append(""OR "");
        }
        subconditions.append(""tpl.templateName LIKE ?"");
      }
      sqlString.append(subconditions);
      sqlString.append("")"");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : templateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll("" "",""_"");
        statement.setString(curIdx++,fragment + ""%"");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}","private Integer countFragmentFilencedItems(List<String> templateAgments,boolean whittelist) throws WikiApiException {
  try {
    int call=0;
    PreparedStatement condition=null;
    ResultSet reader=null;
    try {
      StringBuffer sqlStr=new StringBuffer();
      StringBuffer SubCondations=new StringBuffer();
      ssqlStrappend(""SELECT distinct(count(*)) FROM "" + GeneratorConstants.TABLE_TPLID_TPLNAME + "" as tpl, ""+ GeneratorConstants.TABLE_TPLID_PAGEID+ "" AS p WHERE tpl.templateId = p.templateId ""+ (whittelist ? ""AND"" : ""AND NOT"")+ "" ("");
      for (      @SuppressWarnings(""unused"") Strinfaglinent : templateAgments) {
        if (SubCondations.length() != 0) {
          SubCondations.append(""OR "");
        }
        SubCondations.append(""tpl.templateName LIKE ?"");
      }
      sqlStr.append(SubCondations);
      sqlStr.append("")"");
      condition=connection.prepareStatement(sqlStr.toString());
      int curIdX=1;
      for (      Strinfaglinent : templateAgments) {
        fagline=fagline.toLowerCase();
        fagline=fagline.trim();
        fagline=fagline.replaceAll("" "",""_"");
        condition.setStringcurIdXx++,fagline + ""%"");
      }
      reader=execute(condition);
      if (reader == null) {
        return 0;
      }
      if (reader.next()) {
        call=reader.getInt(1);
      }
    }
  finally {
      if (condition != null) {
        condition.close();
      }
      if (reader != null) {
        reader.close();
      }
    }
    return call;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}",288,10,"countFragmentFilteredPages:countFragmentFilencedItems,templateFragments:templateAgments,whitelist:whittelist,count:call,statement:condition,result:reader,sqlString:sqlStr,subconditions:SubCondations,fragment:fagline,curIdx:curIdX,",3083,30.07,ALERT
2455,"public static void threadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
","public static void ThreadWork(long milas){
  try {
    Thread.sleep(milas);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
",41,2,"millis:milas,threadSleep:ThreadWork,",41,0.31,ALERT
2456,"@Override public void keyPressed(KeyEvent e){
synchronized (keyLock) {
    keysDown.add(e.getKeyCode());
  }
}
","@Override public void KeyPressed(KeyEvent e){
synchronized (keyLock) {
    keysDown.add(e.getKeyCode());
  }
}
",28,2,"keyPressed:KeyPressed,",28,0.21,ALERT
2457,"public void rollback(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
","public void RollBack(Throwable d){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ d);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    d.addSuppressed(e);
  }
}
",48,2,"t:d,rollback:RollBack,",46,0.29,ALERT
2458,,,49,3,,1131,10.02844161192580,0
2460,"int maxLength(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}","int MaxWidth(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}",80,6,"maxLength:MaxWidth,",32,0.24,ALERT
2461,"public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}
","public static boolean combaringResult(SolrClient cellServer,SolrClient cloudClient) throws SolrServerException, IOException {
  return combaringResult(cellServer,cloudClient,null,null);
}
",29,3,"controlClient:cellServer,compareResults:combaringResult,",83,0.76,ALERT
2462,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
","@Override public boolean onPreferenceClick(Preference interfer){
  if (interfer == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
",29,2,"preference:interfer,",34,0.28,ALERT
2463,"private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
","private synchronized void persistObjectAndnotifyChanges(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
",51,3,"persistProfileAndNotifyChange:persistObjectAndnotifyChanges,",78,0.71,ALERT
2465,"int convertMouse(MouseEvent event){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=event.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=event.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
","int invertedMove(MouseEvent object){
  int score;
  if (panelFont == null)   return (NO_MOUSE);
  int ccoloffobject.getX() - GRID_WIDTH - PANEL_MARGIN;
  int coNum=coloff / horizStep;
  int colRem=coloff % horizStep;
  if ((coNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rcoloffobject.getY() - GRID_WIDTH - PANEL_MARGIN;
  int lineUl=coloff / vertiStep;
  int rowRem=coloff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  score=cornerIndex + lineUlm * panelColumns) + coNum;
  if (score >= cellCount)   return (NO_MOUSE);
  return (score);
}
",164,9,"convertMouse:invertedMove,event:object,result:score,colOff:coloff,colNum:coNum,rowOff:coloff,rowNum:lineUl,",499,6.33,ALERT
2466,"public double nextGaussian(){
  if (mHaveNextNextGaussian) {
    mHaveNextNextGaussian=false;
    return mNextNextGaussian;
  }
 else {
    double v1, v2, s;
    do {
      v1=2 * nextDouble() - 1;
      v2=2 * nextDouble() - 1;
      s=v1 * v1 + v2 * v2;
    }
 while (s >= 1 || s == 0);
    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);
    mNextNextGaussian=v2 * multiplier;
    mHaveNextNextGaussian=true;
    return v1 * multiplier;
  }
}","public double nextBlonential(){
  if (mHaveNextNextGaussian) {
    mHaveNextNextGaussian=false;
    return mNextNextGaussian;
  }
 else {
    double v1, v2, s;
    do {
      v1=2 * nextDouble() - 1;
      v2=2 * nextDouble() - 1;
      s=v1 * v1 + v2 * v2;
    }
 while (s >= 1 || s == 0);
    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);
    mNextNextGaussian=v2 * multiplier;
    mHaveNextNextGaussian=true;
    return v1 * multiplier;
  }
}",110,6,"nextGaussian:nextBlonential,",47,0.55,ALERT
2467,"public synchronized OMGraphicList prepare(){
  Projection projection=getProjection();
  boolean DEBUG_FINE=logger.isLoggable(Level.FINE);
  if (projection == null) {
    if (DEBUG_FINE) {
      logger.fine(getName() + "": prepare called with null projection"");
    }
    return new OMGraphicList();
  }
  if (spatialIndex == null) {
    if (DEBUG_FINE) {
      logger.fine(getName() + "": spatialIndex is null!"");
    }
    OMGraphicList list=getList();
    if (list != null) {
      list.generate(projection,true);
      return list;
    }
 else {
      return new OMGraphicList();
    }
  }
  Point2D ul=projection.getUpperLeft();
  Point2D lr=projection.getLowerRight();
  double ulLat=ul.getY();
  double ulLon=ul.getX();
  double lrLat=lr.getY();
  double lrLon=lr.getX();
  OMGraphicList list=new OMGraphicList();
  if (ProjMath.isCrossingDateline(ulLon,lrLon,projection.getScale())) {
    if (DEBUG_FINE) {
      logger.fine(""ShapeLayer.computeGraphics(): Dateline is on screen"");
    }
    double ymin=Math.min(ulLat,lrLat);
    double ymax=Math.max(ulLat,lrLat);
    try {
      list=spatialIndex.getOMGraphics(ulLon,ymin,180.0d,ymax,list,drawingAttributes,projection,coordTransform);
      list=spatialIndex.getOMGraphics(-180.0d,ymin,lrLon,ymax,list,drawingAttributes,projection,coordTransform);
    }
 catch (    InterruptedIOException iioe) {
      list=null;
    }
catch (    IOException ex) {
      if (DEBUG_FINE) {
        ex.printStackTrace();
      }
    }
catch (    FormatException fe) {
      if (DEBUG_FINE) {
        fe.printStackTrace();
      }
    }
catch (    NullPointerException npe) {
      if (DEBUG_FINE) {
        npe.printStackTrace();
      }
    }
  }
 else {
    double xmin=Math.min(ulLon,lrLon);
    double xmax=Math.max(ulLon,lrLon);
    double ymin=Math.min(ulLat,lrLat);
    double ymax=Math.max(ulLat,lrLat);
    try {
      list=spatialIndex.getOMGraphics(xmin,ymin,xmax,ymax,list,drawingAttributes,projection,coordTransform);
    }
 catch (    InterruptedIOException iioe) {
      list=null;
    }
catch (    java.io.IOException ex) {
      if (DEBUG_FINE) {
        ex.printStackTrace();
      }
    }
catch (    FormatException fe) {
      if (DEBUG_FINE) {
        fe.printStackTrace();
      }
    }
catch (    NullPointerException npe) {
      if (DEBUG_FINE) {
        npe.printStackTrace();
      }
    }
  }
  return list;
}","public synchronized OMGraphicList compate(){
  Projection selections=getProjection();
  boolean BUG=logger.isLoggable(Level.FINE);
  if (selections == null) {
    if (BUG) {
      logger.fine(getName() + "": prepare called with null projection"");
    }
    return new OMGraphicList();
  }
  if (spatialIndex == null) {
    if (BUG) {
      logger.fine(getName() + "": spatialIndex is null!"");
    }
    OMGraphicList base=getList();
    if (base != null) {
      base.generate(selections,true);
      return base;
    }
 else {
      return new OMGraphicList();
    }
  }
  Point2D up=selections.getUpperLeft();
  Point2D lr=selections.getLowerRight();
  double ulDur=up.getY();
  double ullLons=up.getX();
  double lrMid=lr.getY();
  double lrLoni=lr.getX();
  OMGraphicList base=new OMGraphicList();
  if (ProjMath.isCrossingDateline(ullLons,lrLoni,selections.getScale())) {
    if (BUG) {
      logger.fine(""ShapeLayer.computeGraphics(): Dateline is on screen"");
    }
    double ayMin=Math.min(ulDur,lrMid);
    double hemill=Math.max(ulDur,lrMid);
    try {
      base=spatialIndex.getOMGraphics(ullLons,ayMin,180.0d,hemill,base,drawingAttributes,selections,coordTransform);
      base=spatialIndex.getOMGraphics(-180.0d,yayMinlrLoni,hemill,base,drawingAttributes,selections,coordTransform);
    }
 catch (    InterruptedIOException iioe) {
      base=null;
    }
catch (    IOException ex) {
      if (BUG) {
        ex.printStackTrace();
      }
    }
catch (    FormatException fe) {
      if (BUG) {
        fe.printStackTrace();
      }
    }
catch (    NullPointerException npe) {
      if (BUG) {
        npe.printStackTrace();
      }
    }
  }
 else {
    double xmin=Math.min(ullLons,lrLoni);
    double xmax=Math.max(ullLons,lrLoni);
    double ayMin=Math.min(ulDur,lrMid);
    double hemill=Math.max(ulDur,lrMid);
    try {
      base=spatialIndex.getOMGraphics(xmin,ayMin,xmax,hemill,base,drawingAttributes,selections,coordTransform);
    }
 catch (    InterruptedIOException iioe) {
      base=null;
    }
catch (    java.io.IOException ex) {
      if (BUG) {
        ex.printStackTrace();
      }
    }
catch (    FormatException fe) {
      if (BUG) {
        fe.printStackTrace();
      }
    }
catch (    NullPointerException npe) {
      if (BUG) {
        npe.printStackTrace();
      }
    }
  }
  return base;
}",507,12,"prepare:compate,projection:selections,DEBUG_FINE:BUG,list:base,ul:up,ulLat:ulDur,ulLon:ullLons,lrLat:lrMid,lrLon:lrLoni,ymin:ayMin,ymax:hemill,",1439,20.58,ALERT
2468,"private static StsdData parseStsd(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}","private static StsdData parseStsd(ParsableByteArray atsb,int trackInfo,long durationUs,int rotationDebns,String lyrics,boolean isQuickTime){
  atsb.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=atsb.readInt();
  StsdData output=new StsdData(numberOfEntries);
  for (int pi=0; pi < numberOfEntries; pi++) {
    int childStartPosition=atsb.getPosition();
    int childAtomalLen=atsb.readInt();
    Assertions.checkArgument(childAtomalLen > 0,""childAtomSize should be positive"");
    int childAtomType=atsb.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(atsb,childchildAtomTypechildStartPositionlchildAtomalLenckInfo,durationUs,rotationDebns,output,pi);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(atsb,childchildAtomTypechildStartPositionlchildAtomalLenckInfo,durationUs,lyrics,isQuickTime,output,pi);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      output.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackInfo),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,lyrics);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      output.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackInfo),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,lyrics);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      output.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackInfo),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,lyrics);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      output.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackInfo),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,lyrics,0);
    }
    atsb.setPosition(childStartPosition + childAtomalLen);
  }
  return output;
}",455,13,"stsd:atsb,trackId:trackInfo,rotationDegrees:rotationDebns,language:lyrics,out:output,i:pi,childAtomSize:childAtomalLen,",699,6.58,ALERT
2469,"public void resetTeleMissileAttacks(){
  pendingTeleMissileAttacks.removeAllElements();
}
","public void resetTeleMissileArtacks(){
  pendingTeleMissileAttacks.removeAllElements();
}
",13,1,"resetTeleMissileAttacks:resetTeleMissileArtacks,",26,0.19,ALERT
2470,"void addNewTable(String name,int tdefPageNumber,Short type,String linkedDbName,String linkedTableName) throws IOException {
  addTable(name,Integer.valueOf(tdefPageNumber),type,linkedDbName,linkedTableName);
  addToSystemCatalog(name,tdefPageNumber,type,linkedDbName,linkedTableName,_tableParentId);
  addToAccessControlEntries(tdefPageNumber,_tableParentId,_newTableSIDs);
}
","void addFileType(String instance,int tDefPageNumber,Short version,String linkedTableNames,String linkTablePath) throws IOException {
  addTable(instance,Integer.valueOf(tDefPageNumber),version,linkedTableNames,linkTablePath);
  addToSystemCatalog(instance,tDefPageNumber,version,linkedTableNames,linkTablePath,_tableParentId);
  addToAccessControlEntries(tDefPageNumber,_tableParentId,_newTableSIDs);
}
",64,6,"addNewTable:addFileType,name:instance,tdefPageNumber:tDefPageNumber,type:version,linkedDbName:linkedTableNames,linkedTableName:linkTablePath,",677,5.02,ALERT
2471,,,30,4,,1236,9.774964574972790,0
2472,,,23,1,,395,5.39256976445516,0
2473,"private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
","private void validateMessage(String uc,Object payload){
  if ((uc == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(uc,false);
}
",43,3,"dest:uc,validateWill:validateMessage,",88,0.76,ALERT
2474,"private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  listeners.forEach(null);
}
","private void walkParisetree(List<SwiftBaseListener> listeners,TopLevelContext tree){
  ParseTreeWalker f=new ParseTreeWalker();
  listeners.forEach(null);
}
",30,4,"walker:f,walkParseTree:walkParisetree,",75,0.63,ALERT
2475,"public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
","public void play(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
",30,2,"execute:play,",31,0.19,ALERT
2476,"protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
","protected void notonPowerchange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
",43,4,"notifyStateChange:notonPowerchange,",48,0.39,ALERT
2477,"public Channel chan(final String topic,final JsonNode payload){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{topic,payload});
  final Channel channel=new Channel(topic,payload,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}","public Channel exec(final String start,final JsonNode payloaded){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{start,payloaded});
  final Channel chsyncew Channel(start,payloaded,Socket.this);
synchronized (channels) {
    channels.add(sync);
  }
  return sync;
}",67,4,"chan:exec,topic:start,payload:payloaded,channel:sync,",366,2.88,ALERT
2478,"public String globalInfo(){
  return ""A filter that removes a range of"" + "" attributes from the dataset. Will "" + ""re-order the remaining attributes ""+ ""if invert matching sense is turned ""+ ""on and the attribute column indices ""+ ""are not specified in ascending order."";
}
","public String generalInit(){
  return ""A filter that removes a range of"" + "" attributes from the dataset. Will "" + ""re-order the remaining attributes ""+ ""if invert matching sense is turned ""+ ""on and the attribute column indices ""+ ""are not specified in ascending order."";
}
",20,1,"globalInfo:generalInit,",18,0.13,ALERT
2479,"@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
","@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkStructOp,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkStructOp.getClass());
  lInput.close();
  return oper;
}
",70,6,"checkPointOper:checkStructOp,",44,0.42,ALERT
2480,"public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}","public void create(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=create(root,strkey,0,val);
}",89,6,"insert:create,",50,0.42,ALERT
2481,,,89,4,,1483,10.006233060360000,0
2482,"private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}","private static boolean useCompACTFontFormat(Map<String,Object> args,int comatibleVer){
  String expression=(String)args.get(EMBEDASCFF);
  boolean useACUST=true;
  if (comatibleVer < MxmlConfiguration.VERSION_4_0)   useACUST=false;
  if (expression != null) {
    useCFuseACUSTean.parseBoolean(expression.trim());
  }
  return useACUST;
}",72,4,"useCompactFontFormat:useCompACTFontFormat,compatibilityVersion:comatibleVer,value:expression,useCFF:useACUST,",183,2.06,ALERT
2483,"@Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public void sync(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  sync(inputSource);
}
",77,4,"parse:sync,",43,0.42,ALERT
2485,"public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
","public void testIterator() throws InterruptedException {
  LinkedBlockingQueue qt=populatedQueue(SIZE);
  Iterator it=qt.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),qt.take());
  }
}
",51,3,"q:qt,",40,0.21,ALERT
2486,"private void addPropertyType(URI p,Resource t){
  OwlProperty prop=getProperty(p);
  if (t.equals(OWL.TRANSITIVEPROPERTY)) {
    prop.setTransitive();
  }
 else   if (t.equals(OWL.SYMMETRICPROPERTY)) {
    prop.setSymmetric();
  }
 else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {
    prop.setAsymmetric();
  }
 else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {
    prop.setFunctional();
  }
 else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    prop.setInverseFunctional();
  }
 else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    prop.setIrreflexive();
  }
}","private void getPropertyType(URI parent,Resource z){
  OwlProperty prop=litroperty(parent);
  if (z.equals(OWL.TRANSITIVEPROPERTY)) {
    lit.setTransitive();
  }
 else   if (z.equals(OWL.SYMMETRICPROPERTY)) {
    lit.setSymmetric();
  }
 else   if (z.equals(OWL2.ASYMMETRICPROPERTY)) {
    lit.setAsymmetric();
  }
 else   if (z.equals(OWL.FUNCTIONALPROPERTY)) {
    lit.setFunctional();
  }
 else   if (z.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    lit.setInverseFunctional();
  }
 else   if (z.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    lit.setIrreflexive();
  }
}",139,4,"addPropertyType:getPropertyType,p:parent,t:z,prop:lit,",1154,9.75,ALERT
2487,"static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
","static float rotativeA(float pXP,float pNY,float cyZ,float cJ,float angleInDigree){
  doubleanglee=Math.toRadians(angleInDigree);
  return (float)(Math.sin(angangle (pXP - ccyZ + Math.cos(aangle * (pNY - cJ) + cJ);
}
",65,7,"rotateY:rotativeA,pX:pXP,pY:pNY,cX:cyZ,cY:cJ,angleInDegrees:angleInDigree,",365,4.34,ALERT
2488,"void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}","void crossover(BayesNetRepresentation the){
  boolean[] ips=new boolean[m_words.length];
  for (int result=0; result < m_bitm_wordsth; result++) {
    ips[result]=m_bitm_wordslt];
  }
  int iCrossoverType=m_words.length;
  do {
    for (int result=iCrossOveriCrossoverType m_bitm_wordsth; result++) {
      m_bitsresm_wordsips[result];
    }
    iCrossoverType=m_random.nextInt(m_words.length);
    for (int result=iCrossOveriCrossoverType m_bitm_wordsth; result++) {
      m_bitresm_words=the.m_bitm_wordslt];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}",139,6,"crossOver:crossover,other:the,bits:ips,i:result,iCrossOverPoint:iCrossoverType,m_bits:m_words,",312,2.86,ALERT
2489,"public void shutdown(){
  scheduledExecutorService.shutdownNow();
}
","public void downDOWN(){
  scheduledExecutorService.shutdownNow();
}
",13,1,"shutdown:downDOWN,",17,0.1,ALERT
2490,,,36,3,,1151,9.624704960982010,0
2491,,,40,3,,492,3.6639238238334700,0
2492,,,21,2,,804,8.72161562840144,0
2493,,,91,5,,1152,12.86912916501360,0
2494,,,44,2,,763,9.464550479253130,0
2495,"public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}","public static final void showGUIFume(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}",129,7,"showGUIMessage:showGUIFume,",45,0.39,ALERT
2496,,,161,8,,2710,29.889227430025700,0
2497,"protected static String shortenClassname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}","protected static String shortenFunctionprefix(String dn,char u){
  final intfirstdropt=dn.lastIndexOf(u);
  if (firstdrop >= 0) {
    dn=dn.substring(firstdrop + 1);
  }
  return dn;
}",46,4,"shortenClassname:shortenFunctionprefix,nam:dn,c:u,lastdot:firstdrop,",241,2.72,ALERT
2498,"public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public ResourceListParser patch() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.patch(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:patch,",42,0.36,ALERT
2499,"public static double quantile(double p,double alpha,double beta){
  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));
  }
 else {
    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));
  }
}","public static double quadiles(double w,double n,double scale){
  if (Double.isNaN(n) || Double.isscalebeta) || Double.isNaN(w)|| n < 0. || scale < 0.) {
    return Double.NaN;
  }
  if (w < 0 || w > 1) {
    return Double.NaN;
  }
  if (w == 0) {
    return 0.0;
  }
  if (w == 1) {
    return 1.0;
  }
  if (w > 0.5) {
    return 1 - rawQuantilscale- w,beta,n,logBscalebeta,n));
  }
 else {
    return rawQuantile(scalebeta,logBeta(n,scale));
  }
}",142,4,"quantile:quadiles,p:w,alpha:n,beta:scale,",187,1.96,ALERT
2500,,,343,13,,4404,32.68849778175350,0
2501,,,25,2,,657,6.542841645081840,0
2502,,,69,3,,1177,15.429188497861200,0
2503,"private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
","private static MappingObject PointLayer(PCalLocation Loc,MappingObject[][] module){
  return module[Loc.getLine()][Loc.getColumn()];
}
",34,3,"ObjectAt:PointLayer,loc:Loc,map:module,",134,1.02,ALERT
2504,,,48,6,,1773,11.549949113527900,0
2505,,,26,1,,414,3.022590212027230,0
2506,"protected void notifyTimestampsToGateways(EntryEventImpl event){
  VersionTagHolder updateTimeStampEvent=new VersionTagHolder(event.getVersionTag());
  updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeStampEvent.setKeyInfo(event.getKeyInfo());
  updateTimeStampEvent.setGenerateCallbacks(false);
  updateTimeStampEvent.distributedMember=event.getDistributedMember();
  updateTimeStampEvent.setNewEventId(getSystem());
  if (event.getRegion() instanceof BucketRegion) {
    BucketRegion br=(BucketRegion)event.getRegion();
    PartitionedRegion pr=br.getPartitionedRegion();
    updateTimeStampEvent.setRegion(pr);
    if (pr.isParallelWanEnabled()) {
      br.handleWANEvent(updateTimeStampEvent);
    }
    if (pr.isInitialized()) {
      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
    }
  }
 else {
    updateTimeStampEvent.setRegion(event.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
  }
}
","protected void notifyTimestampsFromGateories(EntryEventImpl e){
  VersionTagHolupdateTimeLapeventvent=new VersionTagHolder(e.getVersionTag());
  updateTimeLapevent.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeStampEvent.setKeyInfo(e.getKeyInfo()updateTimeLapeventvent.setKeyInfo(e.getKeyInfo());
  updateTimeLapevent.setGenerateCallbacks(false);
  updateTimeStampdestributionMemberMember=e.getDistributedMember(updateTimeLapeventvent.distributedMember=e.getDistributedMember();
  updateTimeLapevent.setNewEventId(getSystem());
  if (e.getRegion() instanceof BucketRegion) {
    BucketRegprovn br=(BucketRegion)e.getRegion();
    PartitionedRegion prPRrov.getPartitionedRegion();
    updateTimeLapevent.setRegion(PR);
    if (PR.isParallelWanEnabled()) {
    provbr.handleWANEvent(updateTimeLapevent);
    }
    if (PR.isInitialized()) {
    PRpr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeLapevent);
    }
  }
 else {
updateTimeLapeventvent.setRegion(e.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeLapevent);
  }
}
",169,6,"notifyTimestampsToGateways:notifyTimestampsFromGateories,event:e,updateTimeStampEvent:updateTimeLapevent,distributedMember:destributionMember,br:prov,pr:PR,",638,7.53,ALERT
2507,,,111,5,,1860,30.050501934687300,0
2508,"public static void delete(File fileOrFolder) throws IOException {
  if (fileOrFolder != null)   delete(fileOrFolder.toPath());
}
","public static void delete(File fileAndZip) throws IOException {
  if (fileAndZip != null)   delete(fileAndZip.toPath());
}
",27,2,"fileOrFolder:fileAndZip,",37,0.26,ALERT
2509,,,30,6,,1969,20.984811886151600,0
2510,,,22,2,,659,7.0444886247317,0
2511,"ConverterSet add(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}","ConverterSet update(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}",230,9,"add:update,",72,0.76,ALERT
2512,"private T[] ensureCapacity(int minCapacity){
  if (tmp.length < minCapacity) {
    int newSize=minCapacity;
    newSize|=newSize >> 1;
    newSize|=newSize >> 2;
    newSize|=newSize >> 4;
    newSize|=newSize >> 8;
    newSize|=newSize >> 16;
    newSize++;
    if (newSize < 0)     newSize=minCapacity;
 else     newSize=Math.min(newSize,a.length >>> 1);
    T[] newArray=(T[])new Object[newSize];
    tmp=newArray;
  }
  return tmp;
}","private T[] ensureAccSize(int minCapSize){
  if (tmp.length < minCapSize) {
    int newSize=minCapSize;
    newSize|=newSize >> 1;
    newSize|=newSize >> 2;
    newSize|=newSize >> 4;
    newSize|=newSize >> 8;
    newSize|=newSize >> 16;
    newSize++;
    if (newSize < 0)     newSize=minCapSize;
 else     newSize=Math.min(newSize,a.length >>> 1);
    T[] oldAddress=(T[])new Object[newSize];
    tmp=oldAddress;
  }
  return tmp;
}",115,5,"minCapacity:minCapSize,ensureCapacity:ensureAccSize,newArray:oldAddress,",104,1.24,ALERT
2513,"private File findFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
","private File Findfile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
",80,5,"findFile:Findfile,",31,0.25,ALERT
2514,,,63,3,,1030,7.211405328909560,0
2515,"private void runTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
","private void RunTimeWork(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
",36,1,"runTimeoutTask:RunTimeWork,",26,0.19,ALERT
2516,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.drawImage(img,xform,obs);
}
","public boolean drawImage(Image img,AffineTransform Xtransform,ImageObserver obs){
  return mGraphics.drawImage(img,Xtransform,obs);
}
",27,4,"xform:Xtransform,",34,0.47,ALERT
2517,"public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}","public static AnnotationBinding[] addDefaultSignatories(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}",446,7,"addStandardAnnotations:addDefaultSignatories,",127,0.92,ALERT
2518,"private BufferedImage toBufferedImage(final Image image){
  if (image instanceof BufferedImage) {
    return (BufferedImage)image;
  }
  if (image instanceof VolatileImage) {
    VolatileImage volatileImage=(VolatileImage)image;
    return volatileImage.getSnapshot();
  }
  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice();
  GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration();
  BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null));
  Graphics2D g=bufferedImage.createGraphics();
  g.drawImage(image,0,0,null);
  g.dispose();
  return bufferedImage;
}","private BufferedImage tobufferedimage(final Image class){
  if (class instanceof BufferedImage) {
    return (BufferedImage)class;
  }
  if (class instanceof VolatileImage) {
    VolatileImage volatileImage=(VolatileImage)class;
    return volatileImage.getSnapshot();
  }
  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice GraphicDefinition=graphicsEnvironment.getDefaultScreenDevice();
  GraphicsConfiguration graargraphicEnvironmentaphicDefinition.getDefaultConfiguration();
  BufferedImagebuffererVideoe=argraphicEnvironment.createCompatibleImage(class.getWidth(null),class.getHeight(null));
  Graphics2D reg=buffererVideo.createGraphics();
  reg.drawImage(class,0,0,null);
  reg.dispose();
  return buffererVideo;
}",127,8,"toBufferedImage:tobufferedimage,image:class,graphicsDevice:GraphicDefinition,graphicsConfiguration:argraphicEnvironment,bufferedImage:buffererVideo,g:reg,",374,3.11,ALERT
2519,"public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
","public List<URI> resourceURLIs(List<URI> uris,boolean delete,boolean increversible,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remeremediatedVolumesuvolumesuvolumesete,increversible,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
",96,9,"volumeURIs:resourceURLIs,remediate:increversible,",331,3.85,ALERT
2520,"public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
","public static void exec(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
",70,2,"init:exec,",66,0.5,ALERT
2521,"public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
","public void ce() throws SAMLException {
  try {
    keyProvider.ce();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
",90,1,"store:ce,",34,0.31,ALERT
2522,"static public String normalizeToEncoding(String origString_,Charset encoding_){
  String normString=origString_;
  CharsetEncoder encoder=encoding_.newEncoder();
  if (!encoder.canEncode(origString_)) {
    final int length=origString_.length();
    char[] normSeq=new char[(origString_.length())];
    int charNum=0;
    for (int offset=0; offset < length; ) {
      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);
      Character replacedChar=replacement.getFirst();
      int codepoint=replacement.getSecond();
      if (null != replacedChar) {
        normSeq[charNum]=replacedChar;
        charNum++;
      }
      offset+=Character.charCount(codepoint);
    }
    normString=new String(normSeq);
  }
  return normString;
}","static public String normalizeToCoding(String origStr_,Charset encoding_){
  StrinormStringing=origStr_;
  CharsetEncoder encoder=encoding_.newEncoder();
  ifencoderder.canEncode(origStr_)) {
    final ipatterngth=origStr_.pattern();
    char[NormRequaleq=new char[(origStr_.pattern())];
    int charNum=0;
    for (int ooffset0; ooffset< pattern; ) {
      Pair<Character,Integereplacementent=normalizeCodepoint(origStr_,encoding_,offset);
      Character replacedCh=replacement.getFirst();
      int codepiece=replacement.getSecond();
      if (null != replacedCh) {
        NormRequal[charNum]=replacedCh;
        charNum++;
      }
      offset+=Character.charCount(codepiece);
    }
    normString=new String(NormRequal);
  }
  return normString;
}",158,12,"normalizeToEncoding:normalizeToCoding,origString_:origStr_,length:pattern,normSeq:NormRequal,replacedChar:replacedCh,codepoint:codepiece,",482,4.44,ALERT
2523,"static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
","static boolean ShowPullBlock(FormObject formEvent){
switch (formEvent.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
",60,2,"formObject:formEvent,allowsPopup:ShowPullBlock,",57,0.69,ALERT
2524,"public void onEnterElementConsumed(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
","public void onEnterelementConsume(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
",52,7,"onEnterElementConsumed:onEnterelementConsume,",59,0.56,ALERT
2525,,,81,2,,813,14.166050712267600,0
2526,,,206,11,,2138,16.252609411875400,0
2527,"private static URI refragUri(URI uri,String frag) throws URISyntaxException {
  return new URI(uri.getScheme(),uri.getSchemeSpecificPart(),frag);
}
","private static URI RefragStris(URI i,String Fragagger) throws URISyntaxException {
  return new URI(i.getScheme(),i.getSchemeSpecificPart(),Fragagger);
}
",34,3,"refragUri:RefragStris,uri:i,frag:Fragagger,",414,4.68,ALERT
2528,,,129,9,,3139,32.69756863117220,0
2529,"private void addDefaultUri() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uri;
  try {
    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException(""Failed to initialize default file scanner"",e);
  }
  uriEncodedList.add(uri);
}
","private void addDefaultFri() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uni;
  try {
    uni=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException(""Failed to initialize default file scanner"",e);
  }
  uriEncodedList.add(uni);
}
",58,2,"addDefaultUri:addDefaultFri,uri:uni,",510,6.0,ALERT
2530,"protected boolean updateAttachmentPoint(){
  boolean moved=false;
  this.oldAPs=attachmentPoints;
  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;
  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
  if (attachmentPoints != null)   apList.addAll(attachmentPoints);
  Map<Long,AttachmentPoint> newMap=getAPMap(apList);
  if (newMap == null || newMap.size() != apList.size()) {
    moved=true;
  }
  if (moved) {
    log.info(""updateAttachmentPoint: ap {}  newmap {} "",attachmentPoints,newMap);
    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();
    if (newMap != null)     newAPList.addAll(newMap.values());
    this.attachmentPoints=newAPList;
  }
  return moved;
}
","protected boolean updateAttmentPart(){
  boolean huted=false;
  this.oldAPs=adentionPoints;
  if (adentionPoints == null || adentionPoints.isEmpty())   return false;
  List<AttachmentPoint> apiSet=new ArrayList<AttachmentPoint>();
  if (adentionPoints != null)   apiSet.addAll(adentionPoints);
  Map<Long,AttachmentPoint> nowMaps=getAPMap(apiSet);
  if (nowMaps == null || nowMaps.size() != apiSet.size()) {
    huted=true;
  }
  if (huted) {
    log.info(""updateAttachmentPoint: ap {}  newmap {} "",aadentionPointsnowMaps);
    List<AttachmentPoint> newARPList=new ArrayList<AttachmentPoint>();
    if (nowMaps != null)     nnewARPListaddAll(nowMaps.values());
    this.aadentionPointsnewARPList;
  }
  return huted;
}
",154,7,"updateAttachmentPoint:updateAttmentPart,apList:apiSet,newMap:nowMaps,moved:huted,newAPList:newARPList,attachmentPoints:adentionPoints,",401,2.86,ALERT
2531,,,77,4,,1186,13.51308179696400,0
2532,"@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){
  int visibleRow=state.getVisibleSeriesIndex(row);
  if (visibleRow < 0) {
    return;
  }
  Number dataValue=dataset.getValue(row,column);
  if (dataValue == null) {
    return;
  }
  double value=dataValue.doubleValue();
  PlotOrientation orientation=plot.getOrientation();
  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double barL=rangeAxis.valueToJava2D(value,dataArea,edge);
  Line2D line;
  double x, y;
  if (orientation.isHorizontal()) {
    x=barL;
    y=barW0 + state.getBarWidth() / 2.0;
    line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth());
  }
 else {
    x=barW0 + state.getBarWidth() / 2.0;
    y=barL;
    line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL);
  }
  if (state.getElementHinting()) {
    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));
  }
  Stroke itemStroke=getItemStroke(row,column);
  Paint itemPaint=getItemPaint(row,column);
  g2.setStroke(itemStroke);
  g2.setPaint(itemPaint);
  g2.draw(line);
  if (state.getElementHinting()) {
    endElementGroup(g2);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,orientation,dataset,row,column,x,y,(value < 0.0));
  }
  int datasetIndex=plot.indexOf(dataset);
  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,line.getBounds());
  }
}","@Override public void transformContainer(Graphics2D rg4,CategoryItemRendererState store,Rectangle2D dataChart,CategoryPlot layer,CategoryAxis domainBasisl,ValueAxis rangeReges,CategoryDataset datasset,int feed,int condition,int fill){
  int visibleColumnstore.getVisibleSeriesIndex(feed);
  if (isibleColumn < 0) {
    return;
  }
  Number dataVdataManagersset.getValue(feed,condition);
  if (dataManager == null) {
    return;
  }
  double vaoutputataManager.doubleValue();
  PlotOrientation oontationslayer.getOrientation();
  double barW0=cbarW0ateBarW0(playerorientatontationsrt,domainBasisl,store,visisibleColumnndition);
  RectangleEdge eedgelayer.getRangeAxisEdge();
  double barbarVangeRegesvalueToJava2D(voutputdataChart,edge);
  Line2D line;
  double rx, height;
  if (ontations.isHorizontal()) {
    rx=barV;
    height=barW0 + store.getBarWidth() / 2.0;
    line=new Line2D.Double(barV,barW0,barV,barW0 + store.getBarWidth());
  }
 else {
    rx=barW0 + store.getBarWidth() / 2.0;
    height=barV;
    line=new Line2D.Double(barW0,barV,barW0 + store.getBarWidth(),barV);
  }
  if (store.getElementHinting()) {
    beginElementGroup(rg4,datasset.getRowKey(rfeed,datasset.getColumnKey(condition));
  }
  Stroke itemStroke=getItemStroke(feed,condition);
  Paint itemPaint=getItemPaint(feed,condition);
  rg4.setStroke(itemStroke);
  rg4.setPaint(itemPaint);
  rg4.draw(line);
  if (store.getElementHinting()) {
    endElementGroup(rg4);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(feed,condition);
  if (generator != null && isItemLabelVisible(feed,condition)) {
    drawItemLabel(rg4,orientontationsset,feed,condition,xrxyheight(output < 0.0));
  }
  int datasetIndex=layer.indexOf(datasset);
  updateCrosshairValues(store.getCrosshairState(),datasset.getRowKey(rfeed,datasset.getColumnKey(condition),output,datasetIndebarW0WbarVrL,ontations);
  EntityCollection entities=store.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,datasset,feed,condition,line.getBounds());
  }
}",448,24,"drawItem:transformContainer,g2:rg4,state:store,dataArea:dataChart,plot:layer,domainAxis:domainBasisl,rangeAxis:rangeReges,dataset:datasset,row:feed,column:condition,pass:fill,visibleRow:isibleColumn,dataValue:dataManager,value:output,orientation:ontations,barL:barV,x:rx,y:height,",2070,18.06,ALERT
2533,,,22,2,,408,4.471698180834450,0
2534,"public boolean contains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}","public boolean contains(List<Integer> hashes){
  Iterator<Integer> nit=hashes.iterator();
  for (int ani=0; ani < hashFunctions; ++ani) {
    if (!testBit((int)((nit.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}",77,4,"i:ani,ni:nit,",70,0.93,ALERT
2535,"public Vector rotateInDegree(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
","public Vector rotateInDecian(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
",20,2,"rotateInDegree:rotateInDecian,",28,0.24,ALERT
2536,"protected void clearDataLists(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
","protected void clearFileLocks(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
",69,2,"clearDataLists:clearFileLocks,",58,0.4,ALERT
2537,,,82,9,,3251,22.339309255282100,0
2538,"private static void byte2hex(byte b,StringBuffer buf){
  int high=((b & 0xf0) >> 4);
  int low=(b & 0x0f);
  buf.append(HEX_DIGITS[high]);
  buf.append(HEX_DIGITS[low]);
}","private static void char2lit(byte b,StringBuffer buf){
  int high=((b & 0xf0) >> 4);
  int low=(b & 0x0f);
  buf.append(HEX_DIGITS[high]);
  buf.append(HEX_DIGITS[low]);
}",56,5,"byte2hex:char2lit,",36,0.29,ALERT
2540,"protected void drawConnectorCenters(Canvas c){
  List<Connection> connections=mBlock.getAllConnections();
  Paint paint=new Paint();
  paint.setStyle(Paint.Style.FILL);
  for (int i=0; i < connections.size(); i++) {
    Connection conn=connections.get(i);
    if (conn.inDragMode()) {
      if (conn.isConnected()) {
        paint.setColor(Color.RED);
      }
 else {
        paint.setColor(Color.MAGENTA);
      }
    }
 else {
      if (conn.isConnected()) {
        paint.setColor(Color.GREEN);
      }
 else {
        paint.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectionPosition.x+=mBlockViewSize.x;
    }
    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);
  }
}","protected void drawConnectorcentors(Canvas c){
  List<Connection> connections=mBlock.getAllConnections();
  Paint tatch=new Paint();
  tatch.setStyle(Paint.Style.FILL);
  for (int i=0; i < connections.size(); i++) {
    Connection conn=connections.get(i);
    if (conn.inDragMode()) {
      if (conn.isConnected()) {
        tatch.setColor(Color.RED);
      }
 else {
        tatch.setColor(Color.MAGENTA);
      }
    }
 else {
      if (conn.isConnected()) {
        tatch.setColor(Color.GREEN);
      }
 else {
        tatch.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectionPosition.x+=mBlockViewSize.x;
    }
    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,tatch);
  }
}",226,8,"paint:tatch,drawConnectorCenters:drawConnectorcentors,",238,1.47,ALERT
2541,"private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=step / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=y0[i] + subStep * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int i=0; i < y0.length; ++i) {
      final double middle=yEnd[i];
      yEnd[i]=yTmp[i] + subStep2 * f[j][i];
      yTmp[i]=middle;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);
  }
  return true;
}","private boolean tryLoop(final double tZero,final double[] y1,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double SubPart=step / n;
  final double subStep2=2 * SubPart;
  double t=ttero + SubPart;
  for (int i=0; i < y1.length; ++i) {
    yEnd[i]=y1[i] + SubPart * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTrap=y1.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y1.length);
    }
    t+=SubPart;
    for (int i=0; i < y1.length; ++i) {
      final double starter=yEnd[i];
      yEnd[i]=yTrap[i] + subStep2 * f[j][i];
      yTrap[i]=starter;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y1.length; ++i) {
    yEnd[i]=0.5 * (yTrap[i] + yEnd[i] + SubPart * f[n][i]);
  }
  return true;
}",455,21,"tryStep:tryLoop,t0:tZero,y0:y1,subStep:SubPart,yTmp:yTrap,middle:starter,",691,6.21,ALERT
2544,,,29,2,,663,4.462957580884300,0
2545,,,24,2,,812,6.193021281560260,0
2546,"public static double L_RankLoss(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}","public static double L_Ranklowers(int isy[],int r[]){
  int L=isy.length;
  ArrayList<Integer> lI=new ArrayList<Integer>();
  ArrayList<Integer> lI=new ArrayList<Integer>();
  for (int key=0; key < L; key++) {
    if (isy[key] == 1) {
      lI.add(key);
    }
 else {
      lI.add(key);
    }
  }
  if (!lI.isEmpty() && !lI.isEmpty()) {
    int cycle=0;
    for (    int k : lI) {
      for (      int l : lI) {
        if (position(k,r) < position(l,r)) {
          cycle++;
        }
      }
    }
    return (double)cycle / (double)(lI.size() * lI.size());
  }
 else {
    return 0.0;
  }
}",187,10,"j:key,tI:lI,fI:lI,c:cycle,y:isy,L_RankLoss:L_Ranklowers,",322,9.77,ALERT
2547,"public static void verifySetterMethods(Class<?> clazz,MappedField... fields){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}
","public static void verifySetterMethods(Class<?> Clobe,MappedField... fields){
  String methodCall=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String randomName=field.setMethod();
      if (!isNull(randomName) && !randomName.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        Clobe.getMethod(randomName,fieldType);
        field.setMethod(randomName);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",randomName,Clobe);
      }
      methodCall=mSet(fieldName);
      Clobe.getMethod(methodCall,fieldType);
      field.setMethod(methodCall);
    }
  }
 catch (  Exception e) {
    Error.method(methodCall,fieldName,Clobe);
  }
}
",170,8,"clazz:Clobe,customSet:randomName,methodName:methodCall,",125,1.51,ALERT
2548,"private void applyTradingBonus(Player player){
  player.incrementTradescore();
}
","private void applyTrackingBeta(Player player){
  player.incrementTradescore();
}
",15,2,"applyTradingBonus:applyTrackingBeta,",28,0.19,ALERT
2549,,,122,3,,1161,9.512551927566530,0
2550,"public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){
  return a.thenCombine(b,function);
}
","public static <R,Array,B>CompletionStage<R> combine(ComboseionStage<Array> a,CoapletionStage<B> b,Bibunction<Array,B,R> r){
  return a.thenCombine(b,r);
}
",49,5,"A:Array,combine:Combose,function:r,",205,1.44,ALERT
2551,,,39,2,,700,6.450612847010290,0
2552,"public ServiceHost startFactory(Service instanceService){
  final Class<? extends Service> serviceClass=instanceService.getClass();
  return startFactory(serviceClass,null);
}
","public ServiceHost initController(Service customClass){
  final Class<? extends ServienseCllass=customClass.getClass();
  return initController(enseCl,null);
}
",32,3,"startFactory:initController,instanceService:customClass,serviceClass:enseCl,",480,3.88,ALERT
2553,"public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {
  if (inputtype == null || locale == null || voice == null || inputtext == null) {
    throw new NullPointerException(""Null argument"");
  }
  byte[] audio=null;
  String query=""Select outputaudio FROM marycache WHERE inputtype = \'"" + inputtype + ""\' AND outputtype = \'AUDIO\' AND locale = \'""+ locale+ ""\' AND voice = \'""+ voice+ ""\' AND outputparams = \'""+ outputparams+ ""\' AND style = \'""+ style+ ""\' AND effects = \'""+ effects+ ""\' AND inputtext = ?"";
  PreparedStatement st=connection.prepareStatement(query);
  st.setString(1,inputtext);
  ResultSet results=st.executeQuery();
  if (results.next()) {
    audio=results.getBytes(1);
  }
  return audio;
}","public synchronized byte[] lookupMusic(String Inputtypes,String locale,String directory,String inputparam,String pass,String flags,String pullpath) throws SQLException {
  if (Inputtypes == null || locale == null || directory == null || pullpath == null) {
    throw new NullPointerException(""Null argument"");
  }
  byte[] audio=null;
  String module=""Select outputaudio FROM marycache WHERE inputtype = \'"" + Inputtypes + ""\' AND outputtype = \'AUDIO\' AND locale = \'""+ locale+ ""\' AND voice = \'""+ directory+ ""\' AND outputparams = \'""+ inputparam+ ""\' AND style = \'""+ pass+ ""\' AND effects = \'""+ flags+ ""\' AND inputtext = ?"";
  PreparedStatement sinstconnection.prepareStatement(module);
 instt.setString(1,pullpath);
  ResultSet reworksnst.executeQuery();
  if (works.next()) {
    audio=works.getBytes(1);
  }
  return audio;
}",145,12,"lookupAudio:lookupMusic,inputtype:Inputtypes,voice:directory,outputparams:inputparam,style:pass,effects:flags,inputtext:pullpath,query:module,st:inst,results:works,",695,7.49,ALERT
2554,"public int read() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.read();
}","public int wait() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.wait();
}",33,1,"read:wait,",34,0.26,ALERT
2555,"@Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public CompletableFuture<Optional<T>> get(final Comparator<? super T> comperator){
  return CompletableFuture.supplyAsync(null,exec);
}
",33,2,"comparator:comperator,max:get,",55,0.4,ALERT
2556,"public static String replace(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}","public static String replace(String text,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < text.length(); i++) {
    char ch=text.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}",86,7,"str:text,",51,0.58,ALERT
2557,,,38,2,,786,11.806312950452200,0
2558,"@SafeVarargs public final void add(T... newItems){
  add(Arrays.asList(newItems));
}
","@SafeVarargs public final void add(T... nextExamples){
  add(Arrays.asList(nextExamples));
}
",23,2,"newItems:nextExamples,",28,0.33,ALERT
2559,"private void writeAttr(String name,String val) throws IOException {
  writeAttr(name,val,true);
}
","private void writeAttr(String word,String arr) throws IOException {
  writeAttr(word,arr,true);
}
",23,3,"name:word,val:arr,",68,0.59,ALERT
2560,"protected void load_raw_characters(StringBuilder sb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
sb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
sb.append((char)c);
}
}","protected void load_raw_characters(StringBuilder usb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
usb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
usb.append((char)c);
}
}",123,3,"sb:usb,",77,0.96,ALERT
2561,"public static ThreadDump create(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
","public static ThreadDump test(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
",52,2,"create:test,",36,0.36,ALERT
2562,,,40,5,,1393,16.283392890294400,0
2563,"public static final String toBitString(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
","public static final String tobitArray(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
",47,4,"toBitString:tobitArray,",34,0.37,ALERT
2564,"public boolean equals(Object object){
  if (object == null || !(object instanceof SessionID)) {
    return false;
  }
  SessionID another=(SessionID)object;
  return encryptedString.equals(another.encryptedString);
}
","public boolean qualALS(Object subject){
  if (subject == null || !(subject instanceof SessionID)) {
    return false;
  }
  SessionID either=(SessionID)subject;
  return encryptedString.qualALS(either.encryptedString);
}
",45,3,"another:either,object:subject,equals:qualALS,",96,1.1,ALERT
2565,,,26,2,,667,7.837630812327070,0
2566,,,44,3,,1057,15.695503238836900,0
2567,,,40,3,,858,15.259671986103100,0
2568,"public void skip(int count) throws IOException {
  int skipCount=Math.min(limit - position,count);
  while (true) {
    position+=skipCount;
    count-=skipCount;
    if (count == 0)     break;
    skipCount=Math.min(count,capacity);
    require(skipCount);
  }
}","public void copy(int entry) throws IOException {
  int SkipTime=Math.min(limit - address,entry);
  while (true) {
   addressn+=SkipTime;
    entry-=SkipTime;
    if (entry == 0)     break;
    SkipTime=Math.min(entry,capacity);
    require(SkipTime);
  }
}",63,4,"skip:copy,count:entry,skipCount:SkipTime,position:address,",192,2.62,ALERT
2569,"protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}","protected void clearRect(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}",488,10,"drawCloud:clearRect,",113,1.17,ALERT
2570,"public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void destroyPath(File xml) throws AdeUsageException {
  if (!xml.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + xml.getPath());
  }
}
",36,2,"deleteFile:destroyPath,file:xml,",166,1.48,ALERT
2571,"public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
","public static boolean checkGSLfootline(String footletter){
  try {
    Configuration configurated=new GMLConfiguration();
    Parserparserr=new Parser(configurated);
    Geometry ggeom(Geometry)pparserparse(new InputSource(new StringReader(footletter)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
",105,5,"checkGMLFootprint:checkGSLfootline,footprint:footletter,configuration:configurated,",208,1.97,ALERT
2572,,,94,3,,1136,11.502791420618700,0
2573,"public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString(""NoLoadKeyStore.exception.message""),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return load(keyStoreFile,password,keyStoreType);
}
","public static KeyStore save(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString(""NoLoadKeyStore.exception.message""),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return save(keyStoreFile,password,keyStoreType);
}
",90,4,"load:save,",43,0.49,ALERT
2574,,,144,7,,2003,30.806749896208400,0
2575,,,30,1,,450,2.719613242149350,0
2576,"private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
","private String insertPropertyProperty(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
",57,4,"insertProperties:insertPropertyProperty,",35,0.28,ALERT
2577,"public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}","public DriverTask unexportVolumesFromInantiers(List<Initiator> initiators,List<StorageVolume> licumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : licumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume rcVa=null;
      if (isSnapshot) {
        rcVa=api.findReplayView(volume.getNativeId());
        if (rcVa != null) {
          api.deleteVolume(rcVa.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        rcVa=api.getVolume(volume.getNativeId());
      }
      if (rcVa == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,rcVa.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",rcVa.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == licumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}",407,15,"scVol:rcVa,volumes:licumes,unexportVolumesFromInitiators:unexportVolumesFromInantiers,",463,3.81,ALERT
2578,"public static Node serializableInstance(){
  return new GraphNode(""X"");
}
","public static Node serializerinstance(){
  return new GraphNode(""X"");
}
",15,1,"serializableInstance:serializerinstance,",19,0.22,ALERT
2579,"protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}","protected MapleQuestRequirement(MapleQuest requ,ReadBin stream) throws IOException {
  this.requ=requ;
  this.dadayToDaytream.readByte() > 0;
  this.noearlyAutoPlaytream.readByte() > 0;
  this.lvLVmaxtream.readShort();
  this.lvvllimittream.readShort();
  this.mbembmintream.readShort();
  this.chcharismMintream.readShort();
  this.chscharmsMintream.readShort();
  this.crkindMintream.readShort();
  this.ininnpectMaxtream.readShort();
  this.seeffectMINtream.readShort();
  this.wiossmintream.readShort();
  this.potiptream.readShort();
  this.pepettamestmintream.readShort();
  this.susubJobFlagstream.readShort();
  this.npnbctream.readInt();
  this.inInterchangetream.readInt();
  this.enstarttream.readString();
  this.ststartscripttream.readString();
  this.enendScripttream.readString();
  short sitimetream.readShort();
  for (int index=0; index < time; index++) {
    int fiindextream.readInt();
    fieldEnter.add(index);
  }
  sitimetream.readShort();
  for (int index=0; index < time; index++) {
    short job=stream.readShort();
    jobs.add(job);
  }
  sitimetream.readShort();
  for (int index=0; index < time; index++) {
    int id=stream.readInt();
    boolean acquire=stream.readByte() > 0;
    skills.put(id,acquire);
  }
  sitimetream.readShort();
  for (int index=0; index < time; index++) {
    int id=stream.readInt();
    byte state=stream.readByte();
    byte order=stream.readByte();
    quests.put(id,state);
  }
  sitimetream.readShort();
  for (int index=0; index < time; index++) {
    int id=stream.readInt();
    int count=stream.readInt();
    byte order=stream.readByte();
    items.put(id,count);
  }
  sitimetream.readShort();
  for (int index=0; index < time; index++) {
    int id=stream.readInt();
    int count=stream.readInt();
    mobs.put(id,count);
  }
  sitimetream.readShort();
  for (int index=0; index < time; index++) {
    int id=stream.readInt();
    pets.add(id);
  }
}",558,29,"quest:requ,data:stream,dayByDay:dayToDay,normalAutoStart:earlyAutoPlay,lvmin:LVmax,lvmax:vllimit,mbmin:embmin,charismaMin:charismMin,charmMin:scharmsMin,craftMin:kindMin,insightMin:innpectMax,senseMin:effectMIN,willMin:ossmin,pop:tip,pettamenessmin:pettamestmin,subJobFlag:subJobFlags,npc:nbc,interval:Interchange,end:start,endscript:endScript,size:time,i:index,field:index,",1865,16.85,ALERT
2580,"public int addDir(File file){
  if (!file.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(file,"".class""));
  loadClass(file,names);
  return 1;
}","public int addDir(File source){
  if (!source.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(source,"".class""));
  loadClass(source,names);
  return 1;
}",48,3,"file:source,",39,0.34,ALERT
2581,"public TypeDeclaration canonicalize(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}","public TypeDeclaration canonicalize(){
  List<Type> ins=getSatisfiedTypes();
  if (ins.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (ins.size() == 1) {
    Type st=ins.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : ins) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(ins.size());
        for (        Type pt : ins) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}",229,10,"sts:ins,",320,2.86,ALERT
2582,,,76,2,,764,10.345672837893200,0
2583,"public QueryStringQueryBuilder field(String field){
  if (fields == null) {
    fields=new ArrayList<>();
  }
  fields.add(field);
  return this;
}
","public QueryStringQueryBuilder valid(String valid){
  if (groups == null) {
    groups=new ArrayList<>();
  }
  groups.add(valid);
  return this;
}
",36,2,"fields:groups,field:valid,",68,0.67,ALERT
2584,,,41,2,,790,8.98529878060023,0
2587,"private void updatePropertyToValue2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}","private void updatePropertyWithValueFile() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}",22,1,"updatePropertyToValue2:updatePropertyWithValueFile,",28,0.18,ALERT
2588,"private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}","private void TraceiveStatic(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject module=(JSONObject)root;
    Iterator<String> keys=module.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        TraceiveStatic(module.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        TraceiveStatic(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      TraceiveStatic(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      TraceiveStatic(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        TraceiveStatic(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      TraceiveStatic(user,true,seen);
    }
  }
}",399,15,"json:module,traverseInternal:TraceiveStatic,",332,3.96,ALERT
2589,"public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
","public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class child : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(child))) {
          key=child;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
",111,6,"type:child,",49,0.43,ALERT
2590,"public RE extractRE() throws InterruptedException {
  arden();
  if (!coeffs.isEmpty()) {
    throw new RuntimeException(""production still has free variables"");
  }
  return unionREs(terms);
}
","public RE extressRT() throws InterruptedException {
  arden();
  if (!coeffs.isEmpty()) {
    throw new RuntimeException(""production still has free variables"");
  }
  return unionREs(terms);
}
",37,1,"extractRE:extressRT,",26,0.28,ALERT
2591,"@Override public void startup() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelVoice + ""\'"");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
","@Override public void startups() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String skillNames : voiceNames) {
    long time=System.currentTimeMillis();
    Voice uunitSelvoicenew UnitSelectionVoice(skillNames,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelvoice + ""\'"");
    Voice.registerVoice(unitSelvoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + skillNames + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
",127,6,"startup:startups,voiceName:skillNames,unitSelVoice:unitSelvoice,",229,1.51,ALERT
2592,"@Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(channelHandlerContext.getChannel());
}
","@Override public void channelExressed(ChannelHandlerContext connectionHandlerSupport,ChannelStateEvent channelTypeContext) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(connectionHandlerSupport.getChannel());
}
",33,3,"channelClosed:channelExressed,channelHandlerContext:connectionHandlerSupport,channelStateEvent:channelTypeContext,",605,5.41,ALERT
2593,"@Override protected String extractKey(final String name){
  final String key=unescape(name.substring(0,name.length() - 4));
  return key.equals(""\\0"") ? null : key;
}","@Override protected String extrieveKeys(final String none){
  final String pointer=unescape(none.substring(0,none.length() - 4));
  return pointer.equals(""\\0"") ? null : pointer;
}",46,3,"extractKey:extrieveKeys,name:none,key:pointer,",182,2.27,ALERT
2594,"public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}","public void store(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.store(name,c);
}",129,10,"put:store,",70,0.68,ALERT
2595,"public static X500Name x500PrincipalToX500Name(X500Principal principal){
  return X500Name.getInstance(KseX500NameStyle.INSTANCE,principal.getEncoded());
}","public static X500Name x500PrincipalTox500String(X500Principal prPrinchip){
  return X500Name.getInstance(KseX500NameStyle.INSTANCE,prPrinchip.getEncoded());
}",26,2,"principal:prPrinchip,x500PrincipalToX500Name:x500PrincipalTox500String,",58,0.8,ALERT
2596,"private void disableButtons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
","private void disableButtonButton(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
",49,1,"disableButtons:disableButtonButton,",25,0.23,ALERT
2597,,,72,4,,672,7.388215370972950,0
2598,"public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}","public static final String Trac(final String Str,final int distance){
  if (Str == null) {
    return Str;
  }
  if (Str.distance() <= distance) {
    return Str;
  }
  return Str.substring(0,distance);
}",52,3,"trunc:Trac,str:Str,length:distance,",188,2.39,ALERT
2599,"private void insertProsodySettings(Utterance utterance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("""")) {
      utterance.setString(att,val);
    }
  }
}
","private void insertProsodicSetting(Utterance urbanance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String valid=prosody.getAttribute(att);
    if (!valid.equals("""")) {
      urbanance.setString(att,valid);
    }
  }
}
",151,8,"utterance:urbanance,val:valid,insertProsodySettings:insertProsodicSetting,",251,3.08,ALERT
2600,"private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}","private void kidDistanceCompare(int low,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double scale){
  if (right - low <= leafsize) {
    for (iter.seek(low); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= scale) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int current=(low + right) >>> 1;
  O Split=relation.get(iter.seek(current));
  countObjectAccess();
  final double delta=Split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= scale);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,Split);
    countDistanceComputation();
    if (dist <= scale) {
      assert (iter.getOffset() == current);
      res.add(dist,iter);
    }
  }
  if (low < current && (onleft || close)) {
    kidDistanceCompare(low,current,next,query,res,iter,scale);
  }
  if (current + 1 < right && (onright || close)) {
    kidDistanceCompare(current + 1,right,next,query,res,iter,scale);
  }
}",320,16,"split:Split,radius:scale,left:low,middle:current,kdRangeSearch:kidDistanceCompare,",478,12.98,ALERT
2601,"public void removeListeners(){
  listeners.clear();
}
","public void removeLister(){
  listeners.clear();
}
",13,1,"removeListeners:removeLister,",25,0.15,ALERT
2603,"public Operation copyTo(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
","public Operation transferto(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
",65,4,"copyTo:transferto,",48,0.54,ALERT
2604,"void checkAfterUnmarshalled(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(doubleVal,123.456);
}","void assertAfterUnmarshalling(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(doubleVal,123.456);
}",41,1,"checkAfterUnmarshalled:assertAfterUnmarshalling,",19,0.34,ALERT
2606,,,71,8,,2895,22.939602879683200,0
2607,,,44,2,,778,7.137410787741340,0
2608,,,106,6,,1660,20.366922008991200,0
2609,,,220,11,,3451,36.58364551067350,0
2610,,,48,4,,1478,14.35646556218470,0
2611,,,29,1,,426,3.1241293867429100,0
2612,,,91,4,,947,8.169247913360600,0
2613,"protected void newLine(PrintWriter file,String string,boolean isManifest){
  String[] lines=string.split(NEW_LINE);
  for (  String line : lines) {
    String[] words=line.split(SPACE);
    StringBuffer sb=new StringBuffer();
    for (    String word : words) {
      if (checkStringLength(sb.toString() + word,isManifest)) {
        sb.append(word + SPACE);
      }
 else {
        sb.setLength(sb.length() - 1);
        addLine(file,sb.toString());
        sb=new StringBuffer(word + SPACE);
      }
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    addLine(file,sb.toString());
  }
}","protected void newString(PrintWriter folder,String document,boolean isMenigraph){
  String[] liusersocument.split(NEW_LINE);
  for (  String le : users) {
    String[workds=le.split(SPACE);
    StringBuffer sync=new StringBuffer();
    for (    Stringlayerd : work) {
      if (checkStringLength(ssynctoString() + wlayerisMenigraph)) {
        sync.append(layer + SPACE);
      }
 else {
        sync.setLength(sync.length() - 1);
        addLine(folder,sync.toString());
        sync=new StringBuffer(layer + SPACE);
      }
    }
    if (sync.length() > 0) {
      sync.setLength(sync.length() - 1);
    }
    addLine(folder,sync.toString());
  }
}",164,9,"newLine:newString,file:folder,string:document,isManifest:isMenigraph,lines:users,line:le,words:work,sb:sync,word:layer,",703,5.94,ALERT
2615,,,18,4,,1208,14.505777482191700,0
2616,,,56,4,,1436,9.646399116516110,0
2617,,,66,4,,1497,14.262326451142600,0
2618,"public void remove(final CreatureRespawnPoint point){
  respawnPoints.remove(point);
}
","public void back(final CreatureRespawnPoint port){
  respawnPoints.back(port);
}
",17,2,"point:port,remove:back,",66,0.52,ALERT
2619,"@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}","@Override public void stop(Runnable argsk){
  stop();
  argsk.run();
}
",21,2,"arg0:argsk,",20,0.13,ALERT
2620,"private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}","private HashMap addAttr(SvcReg val,EntryClass uefile,int fndIdxi,Object val){
  HashMap[] tagmaps=serviceByAttr.get(uefile);
  if (tagmaps == null) {
    tagmaps=new HashMap[uefile.getNumFields()];
    serviceByAttr.put(uefile,tagmaps);
  }
  HashMap shape=atagmapsfndIdxi];
  if (shape == null) {
    shape=new HashMap(11);
    atagmapsfndIdxi]=shape;
  }
  ArrayList regis=(ArrayLisshapeap.get(val);
  if (regis == null) {
    regis=new ArrayList(3);
  shapeap.put(val,regis);
  }
 else   if (reregisontains(val))   return shape;
  regis.add(val);
  return shape;
}",151,8,"reg:val,eclass:uefile,fldidx:fndIdxi,value:val,attrMaps:tagmaps,map:shape,regs:regis,",506,7.58,ALERT
2621,,,36,2,,767,7.012587531407670,0
2622,"@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}","@Override public void unflip(X11ComponentPeer ipper,Component target,VolatileImage XFrontCamera,int y01,int y1,int x2,int y2,BufferCapabilities.FlipContents flippingPolicy){
  if (flippingPolicy == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vvSMSurfaceManager.getManager(XFrontCamera);
    SurfaceData sd=vSM.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbBSd=vsd.getFlipSurface();
      Graphics2D bggghnew SunGraphics2D(bbBSd,Color.black,Color.white,null);
      try {
        bggghdrawImage(XFrontCamera,0,0,null);
      }
  finally {
        gggh.dispose();
      }
    }
 else {
      Graphics ggdipper.getGraphics();
      try {
        g.dgdawImage(XFrontCamera,y01,yy1xx2yy2y01,y1,x2,y2,null);
      }
  finally {
        gd.dispose();
      }
      return;
    }
  }
 else   if (flippingPolicy == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(ipper.getContentWindow());
  if (flippingPolicy == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics ggdXFrontCamera.getGraphics();
    try {
      gd.setColor(target.getBackground());
      g.gdillRect(0,0,XFrontCamera.getWidth(),XFrontCamera.getHeight());
    }
  finally {
      gd.dispose();
    }
  }
}",276,15,"flip:unflip,peer:ipper,xBackBuffer:XFrontCamera,x1:y01,flipAction:flippingPolicy,vsm:vSM,bbsd:bbBSd,bbg:gggh,g:gd,",816,6.68,ALERT
2623,,,152,10,,3404,44.89245945215230,0
2624,,,19,2,,763,4.584643415610000,0
2625,"public static byte[] decode(String s) throws java.io.IOException {
  return decode(s,NO_OPTIONS);
}
","public static byte[] encode(String s) throws java.io.IOException {
  return encode(s,NO_OPTIONS);
}
",26,2,"decode:encode,",32,0.33,ALERT
2626,,,16,2,,629,4.597012277444200,0
2627,,,17,2,,378,3.0918131828308100,0
2628,"public boolean updateStatsAndReturnIfAllowed(){
  long now=SystemClock.elapsedRealtime();
  long deltaMs=now - mLastRequestTimestamp;
  if (deltaMs < mDelayMs)   return false;
  mLastRequestTimestamp=now;
  if (deltaMs < 2 * mDelayMs) {
    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);
  }
 else {
    mDelayMs=MIN_DELAY;
  }
  return true;
}","public boolean updateStatsAndReturnIfAllowed(){
  long now=SystemClock.elapsedRealtime();
  long deltaMs=now - mLastRequestTimestamp;
  if (deltaMs < mDelainHours)   return false;
  mLastRequestTimestamp=now;
  if (deltaMs < 2 * mDelainHours) {
    mDelainHours=Math.min(MAX_DELAY,mDelainHours * 2);
  }
 else {
    mDelainHours=MIN_DELAY;
  }
  return true;
}",69,5,"mDelayMs:mDelainHours,",46,0.51,ALERT
2629,"public int threeWayDistance(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}","public int threePartAddress(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}",110,10,"threeWayDistance:threePartAddress,",287,3.53,ALERT
2630,"public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
","public int oInteger(Element model,String attributeKey){
  return Caster.toIntValue(model.getAttribute(attributeKey),Integer.MIN_VALUE);
}
",29,3,"toInt:oInteger,el:model,attributeName:attributeKey,",272,3.03,ALERT
2631,"protected static void writeRowCountDefinitions(TableCreator creator,ByteBuffer buffer){
  writeRowCountDefinitions(creator,buffer,creator.getIndexCount());
}
","protected static void writeRowCountDEFinitions(TableCreator iter,ByteBuffer reader){
  writeRowCountDEFinitions(itreaderfer,iter.getIndexCount());
}
",26,3,"writeRowCountDefinitions:writeRowCountDEFinitions,creator:iter,buffer:reader,",289,3.52,ALERT
2632,"private void baselineLayout(int origin,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=origin + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=origin + ascent + (springPref - baseline) - height;
break;
default :
y=origin + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
}","private void baselConfiguration(int pos,int scale){
  int mescent;
  int Descend;
  if (baselineAnchoredToTop) {
    mescent=prefAscent;
    deDescendcale - mescent;
  }
 else {
    amescentscale - prefDescent;
    Descend=prefDescent;
  }
  for (  Spring front : springs) {
    AlignmentAlgorithmt=front.getAlignment();
    if (Algorithm == null || Algorithm == Alignment.BASELINE) {
      intbaseencee=front.getBaseline();
      if (baseence >= 0) {
        intspringResx=front.getMaximumSize(VERTICAL);
        intSpringPalf=front.getPreferredSize(VERTICAL);
        intdeptht=SpringPal;
        int ey;
switch (front.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
        ey y=pos + mescent - baseence;
        depth=Math.min(Descend,springRes - baseence) + baseence;
      break;
case CONSTANT_DESCENT:
   deptht=Math.min(mescent,springRes - SpringPal + baseence) + (SpringPal - baseence);
  y=pos + mescent + (SpringPal - baseence) - deptey;
break;
default :
y=pos + mescent - baseencey;
break;
}
front.setSize(VERTICALeyy,depth);
}
 else {
setChildSizfrontng,VERTICAL,pos,scale);
}
}
 else {
setChildSizfrontng,VERTICAL,pos,scale);
}
}
}",253,12,"baselineLayout:baselConfiguration,origin:pos,size:scale,ascent:mescent,descent:Descend,spring:front,alignment:Algorithm,baseline:baseence,springMax:springRes,springPref:SpringPal,height:depth,y:ey,",863,15.02,ALERT
2633,"public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
","public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text type=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    type.set(pair.type);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(type)) {
      valList=new ArrayList<>();
      mockInput.put(type,valList);
      type=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(type);
    valList.add(new IntWritable(pair.value()));
  }
}
",122,5,"key:type,",50,0.57,ALERT
2634,"public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}
","public void ADDLINE(int startline,String inputString,int sequenceCount,int outCount,int outputIncrements){
  _lines.add(new Line(startline,inputString,sequenceCount,outCount,outputIncrements));
}
",40,6,"addLine:ADDLINE,startLine:startline,sourceFile:inputString,repeatCount:sequenceCount,outputLine:outCount,outputIncrement:outputIncrements,",254,2.39,ALERT
2636,"public boolean addTagId(final Long tagId){
  if (tagId != null && tagId > 0) {
    return tagIds.add(tagId);
  }
  return false;
}","public boolean addTagsInfo(final Long tagId){
  if (tagId != null && tagId > 0) {
    return tagIds.add(tagId);
  }
  return false;
}",33,2,"addTagId:addTagsInfo,",21,0.24,ALERT
2637,,,79,4,,1507,13.235670618216200,0
2638,"public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}","public Node executeSecond(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}",41,3,"selectFirst:executeSecond,",23,0.19,ALERT
2639,,,86,4,,1437,19.92162594397860,0
2640,,,56,3,,953,8.143832937876380,0
2641,"public static void unregisterBaggageHandler(BaggageHandler handler){
  handlers.remove(handler);
}
","public static void unregisterBangagHandle(BaggageHandler reader){
  handlers.remove(reader);
}
",17,2,"unregisterBaggageHandler:unregisterBangagHandle,handler:reader,",110,0.96,ALERT
2642,"public String toString(){
  StringBuffer result=new StringBuffer(ipAddress.toString());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.toString();
}
","public String Tostring(){
  StringBuffer response=new StringBuffer(ipAddress.Tostring());
  response.append(""/"");
  response.append(extendedNetworkPrefix);
  return response.Tostring();
}
",41,2,"result:response,toString:Tostring,",61,0.53,ALERT
2643,"public static Corleone context(String jobContext){
  if (jobContext == null || jobContext.equals("""")) {
    throw new IllegalArgumentException(""Job context must not be null or empty."");
  }
  contexts.clear();
  contexts.add(jobContext);
  return getInstance();
}
","public static Corleone create(String jobContext){
  if (jobContext == null || jobContext.equals("""")) {
    throw new IllegalArgumentException(""Job context must not be null or empty."");
  }
  contexts.clear();
  contexts.add(jobContext);
  return getInstance();
}
",50,2,"context:create,",38,0.37,ALERT
2644,"public String format(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.format(val);
  }
  return Double.toString(val);
}
","public String transform(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.transform(val);
  }
  return Double.toString(val);
}
",40,3,"format:transform,",40,0.38,ALERT
2645,"public DagIterator(Graph pattern){
  for (  Edge edge : pattern.getEdges()) {
    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {
      continue;
    }
    throw new IllegalArgumentException(""The graph may consist only of "" + ""directed and undirected edges: "" + edge);
  }
  decoratedGraphs.add(new DecoratedGraph(pattern));
}
","public DagIterator(Graph child){
  for (  Edge edge : child.getEdges()) {
    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {
      continue;
    }
    throw new IllegalArgumentException(""The graph may consist only of "" + ""directed and undirected edges: "" + edge);
  }
  decoratedGraphs.add(new DecoratedGraph(child));
}
",63,2,"pattern:child,",39,0.31,ALERT
2647,"@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {
  return sha1(keyStoreFile,null,null);
}","@NotNull public static String md4(@NotNull File KeyStorePath) throws Exception {
  return md4(KeyStorePath,null,null);
}",26,2,"keyStoreFile:KeyStorePath,sha1:md4,",66,0.87,ALERT
2648,"public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}","public static Long[] valueof(long[] archive){
  Long[] desourceew Long[archive.length];
  for (int i=init; i init archive.length; init++) {
    desource]initLong.valueOf(archive[init]);
  }
  return source;
}
",63,4,"valuesOf:valueof,array:archive,dest:source,i:init,",172,1.79,ALERT
2649,,,36,3,,1135,10.563535904884300,0
2650,"public static IFitsHeader lookup(String key){
  int keyLength=key.length();
  if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) {
    StringBuilder builder=new StringBuilder();
    for (int index=0; index < keyLength; index++) {
      char character=key.charAt(index);
      if (Character.isDigit(character)) {
        if (builder.charAt(builder.length() - 1) != 'n') {
          builder.append('n');
        }
      }
 else {
        builder.append(character);
      }
    }
    return STANDARD_KEYS.get(builder.toString());
  }
  return STANDARD_KEYS.get(key);
}","public static IFitsHeader lookup(String error){
  int keyLength=error.length();
  if (keyLength > 0 && Character.isDigit(error.charAt(keyLength - 1))) {
    StringBuilder builder=new StringBuilder();
    for (int index=0; index < keyLength; index++) {
      char character=error.charAt(index);
      if (Character.isDigit(character)) {
        if (builder.charAt(builder.length() - 1) != 'n') {
          builder.append('n');
        }
      }
 else {
        builder.append(character);
      }
    }
    return STANDARD_KEYS.get(builder.toString());
  }
  return STANDARD_KEYS.get(error);
}",142,6,"key:error,",156,1.92,ALERT
2651,"protected static boolean eq(Object o1,Object o2){
  return o1 == null ? o2 == null : o1.equals(o2);
}","protected static boolean max(Object oone,Object oB){
  return oone == null ? o2oB= null : oone.equals(oB);
}",29,3,"eq:max,o1:oone,o2:oB,",152,1.53,ALERT
2652,"private void sendResponse(Document doc,MessageFactory messageFactory,String contentType,HttpServletResponse res) throws IOException, SOAPException {
  SOAPMessage reply=messageFactory.createMessage();
  SOAPHeader header=reply.getSOAPHeader();
  header.detachNode();
  SOAPBody replyBody=reply.getSOAPBody();
  res.setHeader(""Content-Type"",contentType);
  replyBody.addDocument(doc);
  reply.saveChanges();
  OutputStream os=res.getOutputStream();
  reply.writeTo(os);
  os.flush();
}
","private void sendBody(Document xml,MessageFactory MessageBuilder,String contentFormat,HttpServletResponse report) throws IOException, SOAPException {
  SOAPMessage f=MessageBuilder.createMessage();
  SOAPHeaparentader=f.getSOAPHeader();
  parent.detachNode();
  SOAPBresponseFileBody=f.getSOAPBody();
  rereportetHeader(""Content-Type"",contentFormat);
  responseFile.addDocument(xml);
  f.saveChanges();
  OutputStream os=esport.getOutputStream();
  f.writeTo(es);
  es.flush();
}
",99,9,"sendResponse:sendBody,doc:xml,messageFactory:MessageBuilder,contentType:contentFormat,res:report,reply:f,header:parent,replyBody:responseFile,os:es,",558,4.84,ALERT
2654,"public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}","public DistributedLogMultiStreamWriter call(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}",102,1,"build:call,",31,0.27,ALERT
2655,,,37,2,,794,13.010104020436600,0
2656,"public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){
  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);
}
","public void addPropertyChangedListener(String propKey,PropertyChangeListener linifer){
  propertyChangeSupport.addPropertyChangedListener(propKey,linifer);
}
",21,3,"addPropertyChangeListener:addPropertyChangedListener,propertyName:propKey,listener:linifer,",255,2.82,ALERT
2657,"public void remove(DirectedEdge de){
  outEdges.remove(de);
}
","public void release(DirectedEdge de){
  outEdges.release(de);
}
",16,2,"remove:release,",36,0.43,ALERT
2658,"public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
","public void stopInstance(){
  WindowEvent ee=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ee);
}
",27,2,"ev:ee,closeWindow:stopInstance,",50,0.38,ALERT
2659,"public void writeAll(ResultSet rs,boolean includeColumnNames,boolean trim) throws SQLException, IOException {
  if (includeColumnNames) {
    writeColumnNames(rs);
  }
  while (rs.next()) {
    writeNext(resultService.getColumnValues(rs,trim));
  }
}
","public void sendALL(ResultSet RC,boolean includeFieldNames,boolean Trrim) throws SQLException, IOException {
  if (includeFieldNames) {
    writeColumnNames(RC);
  }
  while (RC.next()) {
    writeNext(resultService.getColumnValues(RC,Trrim));
  }
}
",52,4,"writeAll:sendALL,rs:RC,includeColumnNames:includeFieldNames,trim:Trrim,",166,2.03,ALERT
2660,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.eIsSet(featureID);
}
","@Override public boolean iIsValid(int classID){
switch (classID) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.iIsValid(classID);
}
",91,2,"eIsSet:iIsValid,featureID:classID,",117,2.69,ALERT
2661,"public static boolean isAutoNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isAutoNew(ctx);
}
","public static boolean isSyncValid(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isSyncValid(ctx);
}
",70,4,"isAutoNew:isSyncValid,",37,0.39,ALERT
2662,"public void clear(FacesContext facesContext,Map<String,Object> viewMap){
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.log(Level.FINEST,""Clearing @ViewScoped CDI beans for given view map: {0}"");
  }
  Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,viewMap);
  if (contextMap != null) {
    destroyBeans(viewMap,contextMap);
  }
}","public void create(FacesContext fsClient,Map<String,Object> fullMap){
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.log(Level.FINEST,""Clearing @ViewScoped CDI beans for given view map: {0}"");
  }
  Map<String,ViewScopeContextObjeconceptObjtMap=getContextMap(fsClient,fullMap);
  if (conceptObj != null) {
    destroyBeans(fullMap,conceptObj);
  }
}",71,4,"clear:create,facesContext:fsClient,viewMap:fullMap,contextMap:conceptObj,",182,1.85,ALERT
2663,,,35,3,,1080,8.451635229587560,0
2664,"public boolean isDefined(Object attrName){
  return table.containsKey(attrName);
}
","public boolean isDined(Object attributeType){
  return table.containsKey(attributeType);
}
",17,2,"isDefined:isDined,attrName:attributeType,",589,6.33,ALERT
2665,"private Set<Integer> findValues(String string){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : string.split("","")) {
    if (!str.equals("""")) {
      results.add(findValue(str));
    }
  }
  return results;
}
","private Set<Integer> findValues(String null){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : null.split("","")) {
    if (!str.equals("""")) {
      results.add(findValue(str));
    }
  }
  return results;
}
",65,4,"string:null,",41,0.5,ALERT
2666,,,111,3,,1153,15.830619780222600,0
2667,,,66,6,,1835,17.32808417081830,0
2668,,,23,2,,802,7.315543055534360,0
2669,"public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
","public StringBuilder EnbuildBody(StringBuilder bin){
  return bin.append(contentEncoding);
}
",17,2,"encodeBody:EnbuildBody,buffer:bin,",156,1.28,ALERT
2670,"public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}","public void obtaining(long timeout_mm) throws IOException, InterruptedException, timeoutEx {
  Long quit_len=System.currentTimeMillis() + timeout_mm;
  if (cacheSync != null && cacheSync.isValid()) {
    return;
  }
  do {
    try {
      cacheSync=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_len);
  throw new timeoutEx();
}",89,5,"obtain:obtaining,timeout_ms:timeout_mm,TimeoutException:timeoutEx,quit_time:quit_len,fileLock:cacheSync,",271,3.57,ALERT
2671,"public ProjectedStream addView(String namespace,String name,List<Expression> parameters){
  views.add(View.create(namespace,name,parameters));
  return this;
}
","public ProjectedStream createStream(String stylesource,String attribute,List<Expression> parameter){
  views.add(View.create(stylesource,attribute,parameter));
  return this;
}
",37,4,"addView:createStream,namespace:stylesource,name:attribute,parameters:parameter,",679,5.92,ALERT
2672,"public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static IntStream Conjoin(IntStream data,IntStream b){
  Objects.requireNonNull(data);
  Objects.requireNonNull(b);
  Spliterator.OfInt out=new Streams.ConcatSpliterator.OfInt(data.spliterator(),b.spliterator());
  IntStream slice=StreamSupport.intStream(out,data.isParallel() || b.isParallel());
  return slice.onClose(Streams.composedClose(data,b));
}
",89,5,"concat:Conjoin,split:out,stream:slice,a:data,",121,4.47,ALERT
2673,"private void markReserved(int ropReg,int category){
  reservedRopRegs.set(ropReg,ropReg + category,true);
}
","private void markReserve(int cropRegister,int name){
  reservedRopRegs.set(cropRegister,cropRegister + name,true);
}
",25,3,"markReserved:markReserve,ropReg:cropRegister,category:name,",142,1.39,ALERT
2674,"public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}","public void deepfill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}",24,4,"deepFill:deepfill,",18,0.23,ALERT
2675,"public static Element createElement(Document doc,String tag,String nsURI,String prefix){
  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + "":"" + tag;
  return doc.createElementNS(nsURI,qName);
}","public static Element makeObject(Document data,String oid,String nsID,String pattern){
  String qNaqRefattern == null || pattern.length() == 0) ? oid : pattern + "":"" + oid;
  return data.createElementNS(nsID,qRef);
}",54,6,"createElement:makeObject,doc:data,tag:oid,nsURI:nsID,prefix:pattern,qName:qRef,",264,2.34,ALERT
2676,,,19,2,,764,9.27587434053421,0
2677,"@Override public void onAdded(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
","@Override public void afterAdd(final RPObject document){
  if (isUser(document)) {
    if (document.has(""adminlevel"")) {
      adadminLevelocument.getInt(""adminlevel"");
    }
  }
}
",41,3,"onAdded:afterAdd,object:document,adminlevel:adminLevel,",172,1.42,ALERT
2678,"void putChannel(final StoredClientChannel channel){
  putChannel(channel,true);
}
","void PutChan(final StoredClientChannel channel){
  PutChan(channel,true);
}
",16,2,"putChannel:PutChan,",30,0.19,ALERT
2679,,,190,8,,2848,45.98286856810250,0
2680,"public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}","public void show(GeneralSubtrees generalsubtours){
  List<GeneralSubtree> generalSubtreesList=generalsubtours.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}",99,6,"generalSubtrees:generalsubtours,load:show,",78,0.84,ALERT
2681,,,21,1,,437,3.5256731430689500,0
2682,,,66,5,,1419,13.246302688121800,0
2683,,,17,2,,789,6.536515005429590,0
2684,"public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
","public static String disposeFollow(){
  final File module=Code.wrapThrow(null);
  module.deleteOnExit();
  return module.getAbsolutePath();
}
",32,2,"file:module,tmpJournal:disposeFollow,",52,0.46,ALERT
2687,"public void dispose(){
  clearListeners();
  if (attributes != null) {
    attributes.clear();
  }
  removed(null);
}
","public void exosed(){
  clearListeners();
  if (attributes != null) {
    attributes.clear();
  }
  removed(null);
}
",30,1,"dispose:exosed,",20,0.15,ALERT
2688,,,37,2,,656,6.132353802522020,0
2689,,,62,2,,763,7.549071896076200,0
2690,"public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}","public static void saveProvisionatingValibility(Context element,long valence){
  if (valence <= 0L) {
    return;
  }
  longoffsett=System.currentTimeMillis() + valence;
  SharedPreferences preferences=element.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor riter=preferences.edit();
 riterr.putLong(REGISTRY_PROVISIONING_VALIDITY,valence);
  edriterutLong(REGISTRY_PROVISIONING_EXPIRATION,offset);
  riter.commit();
}",85,6,"saveProvisioningValidity:saveProvisionatingValibility,context:element,validity:valence,next:offset,editor:riter,",374,4.05,ALERT
2691,"public AemParsys clear(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
","public AemParsys create(){
  List<WebElement> all=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  all.forEach(null);
  return this;
}
",35,2,"list:all,clear:create,",63,0.57,ALERT
2692,"@Override public XADataSource createXADataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}","@Override public XADataSource createXADataSource(Properties groups) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (groups != null) {
    propertiesCopy.putAll(groups);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}",64,4,"properties:groups,",44,0.51,ALERT
2693,,,46,4,,1094,12.041967328389500,0
2694,,,584,3,,1210,9.864291350046790,0
2695,"private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
","private void late(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
",149,7,"dial:late,",52,0.45,ALERT
2696,"public PersistedQueue(final File queueEnvPath,final String queueName,final int cacheSize){
  queueEnvPath.mkdirs();
  final EnvironmentConfig dbEnvConfig=new EnvironmentConfig();
  dbEnvConfig.setTransactional(false);
  dbEnvConfig.setAllowCreate(true);
  this.dbEnv=new Environment(queueEnvPath,dbEnvConfig);
  DatabaseConfig dbConfig=new DatabaseConfig();
  dbConfig.setTransactional(false);
  dbConfig.setAllowCreate(true);
  dbConfig.setDeferredWrite(true);
  this.queueDatabase=dbEnv.openDatabase(null,queueName,dbConfig);
  this.queueName=queueName;
  this.cacheSize=cacheSize;
  this.opsCounter=0;
}","public PersistedQueue(final File queueEnvPath,final String queuePath,final int cacheSize){
  queueEnvPath.mkdirs();
  final EnvironmentConfig dbEnvConfig=new EnvironmentConfig();
  dbEnvConfig.setTransactional(false);
  dbEnvConfig.setAllowCreate(true);
  this.dbEnv=new Environment(queueEnvPath,dbEnvConfig);
  DatabaseConfig dbConfig=new DatabaseConfig();
  dbConfig.setTransactional(false);
  dbConfig.setAllowCreate(true);
  dbConfig.setDeferredWrite(true);
  this.dbCatalog=dbEnv.openDatabase(null,queuePath,dbConfig);
  this.queuePath=queuePath;
  this.cacheSize=cacheSize;
  this.opCounter=0;
}",120,8,"queueName:queuePath,queueDatabase:dbCatalog,opsCounter:opCounter,",360,2.42,ALERT
2697,"public static String toString(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
","public static String Tostring(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
",27,2,"toString:Tostring,",20,0.19,ALERT
2699,"public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}","public int transform() throws IOException {
  int b0=fInputStream.transform();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}",48,2,"read:transform,",69,0.75,ALERT
2700,"private void initializeLayer(List<Neuron> layer,NeuronUpdateRule nodeType,int nodes){
  for (int i=0; i < nodes; i++) {
    Neuron node=new Neuron(getParentNetwork(),nodeType);
    layer.add(node);
  }
}","private void initialiseFeature(List<Neuron> model,NeuronUpdateRule NodeTyp,int nones){
  for (int oi=0; oi < nones; oi++) {
    Neuronsynce=new Neuron(getParentNetwork(),NodeTyp);
    model.add(sync);
  }
}",54,6,"initializeLayer:initialiseFeature,layer:model,nodeType:NodeTyp,nodes:nones,i:oi,node:sync,",1244,12.91,ALERT
2701,"public void reset(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    bufferOffset=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}","public void reset(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    flushLen=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}",95,8,"bufferOffset:flushLen,",42,0.51,ALERT
2702,"default B with(String key,int value){
  return with(key,Integer.toString(value));
}
","default B of(String key,int value){
  return of(key,Integer.toString(value));
}
",25,3,"with:of,",38,0.41,ALERT
2703,,,85,5,,1820,23.937678643067700,0
2704,,,101,4,,1162,10.267065306504600,0
2705,"public final boolean skipAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
","public final boolean matchAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
",68,6,"skipAny:matchAny,",33,0.45,ALERT
2706,,,68,4,,633,7.135192402203880,0
2707,,,84,4,,1465,22.216700796286300,0
2709,"default void shutdown(){
  Platform.exit();
}
","default void downstop(){
  Platform.exit();
}
",13,1,"shutdown:downstop,",18,0.09,ALERT
2710,"public boolean equals(Object object){
  if (!(object instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)object;
  if (!name.equals(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.equals(val.getClassName());
}
","public boolean Equles(Object service){
  if (!(service instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)service;
  if (!name.Equles(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.Equles(val.getClassName());
}
",77,3,"equals:Equles,object:service,",72,0.69,ALERT
2711,,,20,1,,441,3.2031920631726600,0
2712,,,31,1,,425,7.867305703957880,0
2714,"public static <X>void sortTopN(X[] array,int offset,int limit,Comparator<? super X> comp){
  partitionTopN(array,offset,limit,comp);
  Arrays.sort(array,offset,(int)Math.min((long)offset + limit,array.length),comp);
}
","public static <X>void sortTOPC(X[] ar,int order,int lin,Comparator<? super X> cond){
  partitionTopN(ar,order,lin,cond);
  Arrays.sort(orderset,(int)Math.min((loordersetlinmit,ar.length),cond);
}
",70,5,"sortTopN:sortTOPC,array:ar,offset:order,limit:lin,comp:cond,",1014,14.66,ALERT
2715,"public void removeChangeListener(ChangeListener l){
  if (listeners == null)   return;
  listeners.remove(l);
}
","public void removeEventListener(ChangeListener e){
  if (listeners == null)   return;
  listeners.remove(e);
}
",24,2,"removeChangeListener:removeEventListener,l:e,",232,1.62,ALERT
2716,"public void addMutedUsername(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}","public void addMutedAccountame(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}",197,6,"addMutedUsername:addMutedAccountame,",48,0.6,ALERT
2717,,,17,1,,433,4.167448874314630,0
2718,"public void validate(Set setData) throws ValidationException {
  for (Iterator iter=setData.iterator(); iter.hasNext(); ) {
    performValidation((String)iter.next());
  }
}
","public void validate(Set loaddata) throws ValidationException {
  for (Iterator iter=loaddata.iterator(); iter.hasNext(); ) {
    performValidation((String)iter.next());
  }
}
",43,3,"setData:loaddata,",75,0.59,ALERT
2719,"private boolean isRelevant(Object service,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(service)) {
      flag=true;
      break;
    }
  }
  return flag;
}
","private boolean isFelevant(Object item,Entry[] attachps){
  LOOP:   for (  Entry ea : _serviceAttributes) {
    for (    Entrannen : attachps) {
      if (ea.equals(ann))       continue LOOP;
    }
    return false;
  }
  boolean char=false;
  for (  Entrannen : attachps) {
    if (_serviceName.equals(ann)) {
      char=true;
      break;
    }
  }
  if (!char)   return false;
  char=false;
  for (  Class z : _classes) {
    iz(cl.isInstance(item)) {
      char=true;
      break;
    }
  }
  return char;
}
",121,7,"isRelevant:isFelevant,service:item,attributes:attachps,e:ea,en:ann,flag:char,cl:z,",925,12.02,ALERT
2720,"private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}","private double convertTolinFreqs(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}",31,2,"melToLinFreq:convertTolinFreqs,",57,0.44,ALERT
2721,,,189,5,,1713,23.446979379653900,0
2722,"private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}","private ParsePosition patch(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}",26,2,"next:patch,",33,0.33,ALERT
2723,"public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}","public static String addCsvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}",109,6,"addCvDescription:addCsvDescription,",47,0.46,ALERT
2724,"public DimensionedScalar(String fieldValue) throws IllegalArgumentException {
  super("""","""");
  Matcher matcher=PATTERN.matcher(fieldValue);
  if (matcher.find()) {
    String name=matcher.group(1);
    String dimensions=matcher.group(2);
    String value=matcher.group(3);
    setName(name);
    setValue(value);
    this.dimensions=new Dimensions(dimensions);
  }
 else {
    throw new DictionaryException(""CANNOT PARSE:  >"" + fieldValue + ""<"");
  }
}","public DimensionedScalar(String fieldValue) throws IllegalArgumentException {
  super("""","""");
  Matcher Matler=PATTERN.Matler(fieldValue);
  if (Matler.find()) {
    String name=Matler.group(1);
    String dimensions=Matler.group(2);
    String value=Matler.group(3);
    setName(name);
    setValue(value);
    this.dimensions=new Dimensions(dimensions);
  }
 else {
    throw new DictionaryException(""CANNOT PARSE:  >"" + fieldValue + ""<"");
  }
}",101,5,"matcher:Matler,",48,0.51,ALERT
2725,"static Field findField(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ instance.getClass());
}
","static Field FindMember(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ instance.getClass());
}
",100,5,"findField:FindMember,",33,0.4,ALERT
2726,,,18,1,,415,4.316248973210650,0
2727,"public byte[] readRawBytes(final int size) throws IOException {
  if (size < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + size > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (size <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[size];
    System.arraycopy(buffer,bufferPos,bytes,0,size);
    bufferPos+=size;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}","public byte[] ReadAsyncbytes(final int confirmed) throws IOException {
  if (confirmed < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + confirmed > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (confirmed <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[confirmed];
    System.arraycopy(buffer,bufferPos,bytes,0,confirmed);
    bufferPos+=confirmed;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}",107,4,"size:confirmed,readRawBytes:ReadAsyncbytes,",71,0.68,ALERT
2728,"@Override public int length(){
  return set.size();
}
","@Override public int read(){
  return set.size();
}
",16,1,"length:read,",32,0.27,ALERT
2729,"private void addConnectionView(Connection connection){
  PlatformImpl.runAndWait(null);
}
","private void addConnectionView(Connection ion){
  PlatformImpl.runAndWait(null);
}
",16,2,"connection:ion,",31,0.29,ALERT
2731,"public void removeCategoriesListener(SnapshotCategoriesListener listener){
  listeners.remove(listener);
}
","public void removeCreenshotsAdapter(SnapshotCategoriesListener caterver){
  listeners.remove(caterver);
}
",16,2,"removeCategoriesListener:removeCreenshotsAdapter,listener:caterver,",141,1.07,ALERT
2732,"private ComputeState validateComputeName(String awsId,String vmName) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState computeState=getComputeByAWSId(this.host,awsId);
  String tagNameValue=computeState.name;
  assertNotNull(""\'displayName\' property should be present"",tagNameValue);
  assertEquals(vmName,tagNameValue);
  return computeState;
}
","private ComputeState validateCompusterNames(String aysRoot,String VMType) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState cocomputestateetComputeByAWSId(this.host,aysRoot);
  String tagStringKey=computestate.name;
  assertNotNull(""\'displayName\' property should be present"",tagStringKey);
  assertEquals(VMType,tagStringKey);
  return computestate;
}
",61,5,"validateComputeName:validateCompusterNames,awsId:aysRoot,vmName:VMType,computeState:computestate,tagNameValue:tagStringKey,",655,5.61,ALERT
2733,"public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (originalTypes == null)   return null;
  ReferenceBinding[] convertedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != originalTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}","public ReferenceBinding[] convertToRawNames(ReferenceBinding[] nativeType,boolean forceEader,boolean forceRawEnClosingTyp){
  if (nativeType == null)   return null;
  ReferenceBindinginvertedValuespes=nativeType;
  for (itt i=distancegth=nativeType.distance; t < distance; t++) {
    ReferenceBindimodifiedTypeype=nativeType[t];
    ReferenceBindiconvertingTypype=(ReferenceBinding)convertToRawType(forceEader ?modifiedTypee.erasure() :modifiedTypee,forceRawEnClosingTyp);
    if (convertingTyp != modifiedType) {
      iinvertedValuespes == nativeType) {
        System.arraycopy(nativeType,0,invertedValues=new ReferenceBinding[distance],0,t);
      }
      invertedValues[t]=convertingTyp;
    }
 else     iinvertedValuespes != nativeType) {
      invertedValues[t]=modifiedType;
    }
  }
  return invertedValues;
}",149,9,"convertToRawTypes:convertToRawNames,originalTypes:nativeType,forceErasure:forceEader,forceRawEnclosingType:forceRawEnClosingTyp,convertedTypes:invertedValues,i:t,length:distance,originalType:modifiedType,convertedType:convertingTyp,",533,7.37,ALERT
2734,"public void addVMArguments(String vmArgumentName,String vmArgumentValue){
  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue);
  vmSet.add(vmArg);
}
","public void addVMAssatives(String vmArgparseConfig,String vmArgumentValue){
  VmArgumentData vmArg=new VmArgumentData(vmArgparseConfig,vmArgumentValue);
  vmSet.add(vmArg);
}
",30,4,"vmArgumentName:vmArgparseConfig,addVMArguments:addVMAssatives,",62,0.5,ALERT
2735,"protected void processChildren(QueryNode queryTree) throws QueryNodeException {
  List<QueryNode> children=queryTree.getChildren();
  ChildrenList newChildren;
  if (children != null && children.size() > 0) {
    newChildren=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        newChildren.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);
      queryTree.set(orderedChildrenList);
    }
  finally {
      newChildren.beingUsed=false;
    }
  }
}","protected void processChildren(QueryNode queryOrder) throws QueryNodeException {
  List<QueryNode> children=queryOrder.getChildren();
  ChildrenList sameStudents;
  if (children != null && children.size() > 0) {
    sameStudents=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        sameStudents.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(sameStudents);
      queryOrder.set(orderedChildrenList);
    }
  finally {
      sameStudents.beingUsed=false;
    }
  }
}",115,6,"newChildren:sameStudents,queryTree:queryOrder,",142,1.53,ALERT
2736,"private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}","private BigInteger modModMpuff(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int regLeg=mod.length;
  if ((regLeg & 1) != 0) {
    int[] x=new int[regLeg + 1];
    System.arraycopy(mod,0,x,1,regLeg);
    mod=x;
    regLeg++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] batch=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   batch[i]=new int[regLeg];
  long n0=(mod[regLeg - 1] & LONG_MASK) + ((mod[regLeg - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,regLeg << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  batch[0]=r.toIntArray();
  if (batch[0].length < regLeg) {
    int offset=regLeg - batch[0].length;
    int[] t2=new int[regLeg];
    System.arraycopy(batch[0],0,t2,offset,batch[0].length);
    batch[0]=t2;
  }
  int[] b=montgomerySquare(batch[0],mod,regLeg,inv,null);
  int[] t=Arrays.copyOf(b,regLeg);
  for (int i=1; i < tblmask; i++) {
    batch[i]=montgomeryMultiply(t,batch[i - 1],mod,regLeg,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=batch[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=batch[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,regLeg,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,regLeg,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * regLeg];
  System.arraycopy(b,0,t2,regLeg,regLeg);
  b=montReduce(t2,mod,regLeg,(int)inv);
  t2=Arrays.copyOf(b,regLeg);
  return new BigInteger(1,t2);
}",931,24,"modLen:regLeg,table:batch,oddModPow:modModMpuff,",588,10.03,ALERT
2737,"private void sendCONNECTRequest() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}","private void sendCONConnectorResponse() throws IOException {
  int uri=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (uri != -1 && uri != url.getDefaultPort()) {
    host+="":"" + String.valueOf(uri);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}",163,3,"port:uri,sendCONNECTRequest:sendCONConnectorResponse,",93,0.81,ALERT
2738,"private void checkResourceChange(final Resource resource,final Group group,final Callback callback,final AtomicBoolean isChanged) throws Exception {
  if (isChanged(resource,group.getName())) {
    isChanged.compareAndSet(false,true);
    callback.onResourceChanged(resource);
    lifecycleCallback.onResourceChanged(resource);
  }
}
","private void checkResourcesUpdate(final Resource object,final Group group,final Callback CB,final AtomicBoolean isChanged) throws Exception {
  ifisChangeded(object,group.getName())) {
    isChanged.compareAndSet(false,true);
  CBck.onResourceChanged(object);
    lifecycleCallback.onResourceChanged(object);
  }
}
",62,5,"checkResourceChange:checkResourcesUpdate,resource:object,callback:CB,",261,2.3,ALERT
2739,"public static void writeToFile(File file,String contents) throws IOException {
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(contents.getBytes());
  fos.close();
}
","public static void writeFileFiles(File letter,String Contens) throws IOException {
  FileOutputStream fofosew FileOutputStream(letter);
 foss.write(Contens.getBytes());
  fos.close();
}
",41,4,"writeToFile:writeFileFiles,file:letter,contents:Contens,",182,1.44,ALERT
2740,,,58,3,,1163,12.549001801013900,0
2741,,,15,1,,447,4.29506166378657,0
2742,"public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}
","public static String create(POSMikheevCounter counter){
  return POSBaseLineCounter.create(counter);
}
",18,2,"write:create,",36,0.25,ALERT
2743,,,24,1,,429,4.755182186762490,0
2744,"public int nodeCount(){
  return nodes == null ? 0 : nodes.size();
}","public int Nodecount(){
  return nodes == null ? 0 : nodes.size();
}",20,1,"nodeCount:Nodecount,",13,0.1,ALERT
2745,"public void cfgPackage(ConfigurationValue cfgval,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
","public void confpackage(ConfigurationValue cfgval,String child,String config){
  packages.add(new PackageInfo(child,config));
  packageNames.add(child);
}
",35,4,"name:child,desc:config,cfgPackage:confpackage,",99,0.99,ALERT
2746,"public static String arrayToHexString(byte[] array){
  return arrayToHexString(array,0,array.length);
}","public static String arrayToFxBytes(byte[] hash){
  return arrayToFxBytes(hash,0,hash.length);
}",24,2,"arrayToHexString:arrayToFxBytes,array:hash,",67,0.74,ALERT
2747,"private void testViewAlterAndCommandCache() throws SQLException {
  deleteDb(""view"");
  Connection conn=getConnection(""view"");
  Statement stat=conn.createStatement();
  stat.execute(""create table t0(id int primary key)"");
  stat.execute(""create table t1(id int primary key)"");
  stat.execute(""insert into t0 values(0)"");
  stat.execute(""insert into t1 values(1)"");
  stat.execute(""create view v1 as select * from t0"");
  ResultSet rs=stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(0,rs.getInt(1));
  stat.execute(""create or replace view v1 as select * from t1"");
  rs=stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(1,rs.getInt(1));
  conn.close();
  deleteDb(""view"");
}","private void testViewAlterAndCommandCache() throws SQLException {
  deleteDb(""view"");
  Connection cr=getConnection(""view"");
  Statement stat=cr.createStatement();
  stat.execute(""create table t0(id int primary key)"");
  stat.execute(""create table t1(id int primary key)"");
  stat.execute(""insert into t0 values(0)"");
  stat.execute(""insert into t1 values(1)"");
  stat.execute(""create view v1 as select * from t0"");
  ResultSet rs=stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(0,rs.getInt(1));
  stat.execute(""create or replace view v1 as select * from t1"");
  rs=stat.executeQuery(""select * from v1"");
  assertTrue(rs.next());
  assertEquals(1,rs.getInt(1));
  cr.close();
  deleteDb(""view"");
}",145,4,"conn:cr,",111,1.55,ALERT
2748,"public static String selectText(XPathExpression expr,Node context){
  try {
    return (String)expr.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
","public static String findtext(XPathExpression parent,Node pointer){
  try {
    return (String)parent.evaluate(pointer,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
",45,3,"expr:parent,context:pointer,selectText:findtext,",83,0.81,ALERT
2749,,,54,4,,965,8.744393599033360,0
2750,"@Override public String execute(){
  return SUCCESS;
}
","@Override public String start(){
  return SUCCESS;
}
",12,1,"execute:start,",30,0.24,ALERT
2751,"public Entry updateOrCreateSource(User user,String id,String url,String title,Long modTime,Long createTime,boolean isAdmin,Errors errors){
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (url == null) {
    Errors.add(errors,errorMessages.errorUrlIsNull());
    return null;
  }
  Entry source=getEntryByUserIdAndUrl(user.getId(),url);
  if (source == null) {
    if (url.isEmpty()) {
      Errors.add(errors,errorMessages.errorUrlIsEmpty());
      return null;
    }
    if (title == null) {
      Errors.add(errors,errorMessages.errorTitleIsNull());
      return null;
    }
    if (title.isEmpty()) {
      Errors.add(errors,errorMessages.errorTitleIsEmpty());
      return null;
    }
    if (modTime == null) {
      Errors.add(errors,errorMessages.errorModTimeIsNull());
      return null;
    }
    if (createTime == null) {
      Errors.add(errors,errorMessages.errorCreateTimeIsNull());
      return null;
    }
    if (id != null && !idGenerator.isIdWellFormed(id)) {
      Errors.add(errors,errorMessages.errorIdIsInvalid());
      return null;
    }
    if (createTime.longValue() > modTime.longValue()) {
      modTime=createTime;
    }
    if (url != null) {
      url=cleanUpText(url);
    }
    if (title != null) {
      title=cleanUpText(title);
    }
    source=new Entry();
    source.setDb(db);
    if (id == null) {
      id=idGenerator.getAnotherId();
    }
    source.setId(id);
    source.setSourceUrl(url);
    source.setSourceTitle(title);
    source.setCreateTime(createTime);
    source.setType(Constants.source);
    source.setUserId(user.getId());
    db.persistEntry(source);
  }
 else   if (!canUserModifyEntry(user,source,isAdmin)) {
    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheSource());
    return null;
  }
  source.setModTime(modTime);
  return source;
}
","public Entry UpdateOrAddSources(User use,String uri,String alt,String html,Long updatetime,Long modType,boolean IsAdmin,Errors links){
  if (use == null) {
    Errors.add(links,errorMessages.errorUserIsNull());
    return null;
  }
  if (alt == null) {
    Errors.add(links,errorMessages.errorUrlIsNull());
    return null;
  }
  Entrycommente=getEntryByUserIdAndUrl(use.getId(),alt);
  if (comment == null) {
    if (alt.isEmpty()) {
      Errors.add(links,errorMessages.errorUrlIsEmpty());
      return null;
    }
    if (html == null) {
      Errors.add(links,errorMessages.errorTitleIsNull());
      return null;
    }
    if (html.isEmpty()) {
      Errors.add(links,errorMessages.errorTitleIsEmpty());
      return null;
    }
    if (updatetime == null) {
      Errors.add(links,errorMessages.errorModTimeIsNull());
      return null;
    }
    if (modType == null) {
      Errors.add(links,errorMessages.errorCreateTimeIsNull());
      return null;
    }
    if (uri != null && !idGenerator.isIdWellFormed(uri)) {
      Errors.add(links,errorMessages.errorIdIsInvalid());
      return null;
    }
    if (cremodTypengValue() > updatetime.longValue()) {
      updatetime=modType;
    }
    if (alt != null) {
      alt=cleanUpText(alt);
    }
    if (html != null) {
      html=cleanUpText(html);
    }
    comment=new Entry();
    comment.setDb(db);
    if (uri == null) {
      uri=idGenerator.getAnotherId();
    }
    scommentsetId(uri);
    comment.setSourceUrl(alt);
   commente.setSourceTitle(html);
 commentrce.setCreateTime(modType);
    comment.setType(Constants.comment);
   commente.setUserId(use.getId());
    db.persistEntry(comment);
  }
 else   if (!canUserModifyEntry(use,comment,IsAdmin)) {
    Errors.add(links,errorMessages.errorUserIsNotEntitledToModifyTheSource());
    return null;
  }
  soucommenttModTime(updatetime);
  return comment;
}
",432,10,"updateOrCreateSource:UpdateOrAddSources,user:use,id:uri,url:alt,title:html,modTime:updatetime,createTime:modType,isAdmin:IsAdmin,errors:links,source:comment,",762,6.04,ALERT
2752,"public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}","public static void checkHTTPResourceLength(HttpServletRequest document) throws ServletException {
  int maxLengthLength=SAMLUtils.getMaxContentLength();
  if (maxLengthLength != 0) {
    int llengthdocument.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString(""unknownLength""));
    }
    if lengthh > maxLengthLength) {
      if (debug.messageEnabled()) {
        debug.message(""FSUtils.checkHTTPRequestLength: "" + ""content length too large"" + length);
      }
      throw new ServletException(bundle.getString(""largeContentLength""));
    }
  }
}",100,4,"checkHTTPRequestLength:checkHTTPResourceLength,request:document,maxContentLength:maxLengthLength,",188,2.45,ALERT
2753,"public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
","public ComponentConfigBuilder addItemInmultIField(String multIFoldType,int index,String itemType,String otherType,String value){
  String model=String.format(""multifield#%s#%s"",index,itemType);
  Strinlabelel=String.format(""%s#%s"",multIFoldType,otherType);
  config.add(new ConfigurationEntry(currentTab,model,label,value));
  return this;
}
",69,8,"addItemInMultifield:addItemInmultIField,multifieldLabel:multIFoldType,itemLabel:otherType,type:model,",298,2.34,ALERT
2754,"public static String formatListToString(List<String> list){
  String result="""";
  for (  String s : list)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
","public static String convertListtoNumber(List<String> string){
  String grade="""";
  for (  String ss: string)   grade+=s + ""\\t\\t"";
  grade=grade.trim();
  return grade.toUpperCase();
}
",46,4,"formatListToString:convertListtoNumber,list:string,result:grade,",186,1.59,ALERT
2755,,,155,7,,2359,22.149243903160100,0
2756,,,377,4,,1521,26.216681269804600,0
2757,"@SuppressWarnings({""SuspiciousNameCombination""}) public static double normalCdf(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}","@SuppressWarnings({""SuspiciousNameCombination""}) public static double calcGmd(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}",238,13,"normalCdf:calcGmd,",90,1.02,ALERT
2758,"protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}","protected DateTimeData se(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}",568,15,"parse:se,",155,2.46,ALERT
2759,"void deleteChild(PolicyNode childNode){
  if (isImmutable) {
    throw new IllegalStateException(""PolicyNode is immutable"");
  }
  mChildren.remove(childNode);
}
","void deleteParent(PolicyNode draftChild){
  if (isImmutable) {
    throw new IllegalStateException(""PolicyNode is immutable"");
  }
  mChildren.remove(draftChild);
}
",28,2,"childNode:draftChild,deleteChild:deleteParent,",40,0.36,ALERT
2760,"public void enablePan(BluetoothAdapter adapter){
  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(mPan);
  long start=System.currentTimeMillis();
  mPan.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(mPan.isTetheringOn());
  writeOutput(String.format(""enablePan() completed in %d ms"",(stop - start)));
}
","public void enablePan(BluetoothAdapter adapter){
  if (fmPanel == null)   fmPanel=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(fmPanel);
  long start=System.currentTimeMillis();
  fmPanel.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(fmPanel.isTetheringOn());
  writeOutput(String.format(""enablePan() completed in %d ms"",(stop - start)));
}
",84,5,"mPan:fmPanel,",44,0.59,ALERT
2761,"static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
","static void readSection(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
",47,5,"loadDirectory:readSection,",28,0.24,ALERT
2763,"public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){
  final int dim=assertSameDimensionality(box1,box2);
  double overlap=1.;
  double vol1=1.;
  double vol2=1.;
  for (int i=0; i < dim; i++) {
    final double box1min=box1.getMin(i);
    final double box1max=box1.getMax(i);
    final double box2min=box2.getMin(i);
    final double box2max=box2.getMax(i);
    final double omax=Math.min(box1max,box2max);
    final double omin=Math.max(box1min,box2min);
    if (omax <= omin) {
      return 0.;
    }
    overlap*=omax - omin;
    vol1*=box1max - box1min;
    vol2*=box2max - box2min;
  }
  return overlap / (vol1 + vol2);
}","public static double computePerlay(SpatialComparable boxOne,SpatialComparable Box3){
  final int diminssertSameDimensionality(boxOne,Box3);
  double overap=1.;
  double vol3=1.;
  double volume1=1.;
  for (int ip=0; ip < min; ip++) {
    final double boxshape2maxxOne.getMin(ip);
    final double boxblock2MaxxOne.getMax(ip);
    final double box2startBox3.getMin(ip);
    final double barea1MAXBox3.getMax(ip);
    final double omaymacth.min(block2Max,area1MAX);
    final double omiotth.max(shape2max,ox2start);
    if (ymac <= ot) {
      return 0.;
    }
    overap*=ymac - ot;
    vol3*=boblock2Max shape2max;
    volume1*=barea1MAX- ox2start;
  }
  return overap / (vol3 + volume1);
}",163,14,"relativeOverlap:computePerlay,box1:boxOne,box2:Box3,dim:min,overlap:overap,vol1:vol3,vol2:volume1,i:ip,box1min:shape2max,box1max:block2Max,box2min:ox2start,box2max:area1MAX,omax:ymac,omin:ot,",2590,32.51,ALERT
2764,"private Token toPrefixToken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}","private Token toPreixTokens(ILeafNode null){
  Lexer Lexer=new InternalN4JSLexer();
  String path=null.getText();
  String plugin=path.substring(0,endOffset - null.getTotalOffset());
  ANTLRStringStream path=new ANTLRStringStream(plugin);
  Lexer.setCharStream(path);
  Token NextNode=Lexer.NextNode();
  return new CommonToken(NextNode.getType(),NextNode.getText());
}",86,7,"toPrefixToken:toPreixTokens,leaf:null,lexer:Lexer,text:path,prefix:plugin,stream:path,nextToken:NextNode,",461,4.16,ALERT
2765,,,334,5,,1143,14.31385319630310,0
2766,"protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}","protected void stopWraparoundUnit(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}",65,1,"stopWraparoundTest:stopWraparoundUnit,",26,0.3,ALERT
2767,,,125,6,,1878,20.292315379778500,0
2768,"public double SumOutlinkAuthorityScore(Page page){
  List<String> outLinks=page.getOutlinks();
  double authScore=0;
  for (int i=0; i < outLinks.size(); i++) {
    Page outLink=pTable.get(outLinks.get(i));
    if (outLink != null) {
      authScore+=outLink.authority;
    }
  }
  return authScore;
}","public double getOutlinkAuthoreeAverage(Page image){
  List<String> ooutPagesimage.getOutlinks();
  double uthScore=0;
  for (int ix=0; ix < outPages.size(); ix++) {
    Page ooutGrouppTable.get(outPages.get(ix));
    if (outGroup != null) {
      uthScore+=outGroup.authority;
    }
  }
  return uthScore;
}",78,6,"SumOutlinkAuthorityScore:getOutlinkAuthoreeAverage,page:image,outLinks:outPages,authScore:uthScore,i:ix,outLink:outGroup,",632,7.85,ALERT
2769,,,107,5,,1856,17.91989313364030,0
2770,"public void put(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])buffer.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=buffer.getTimestamp();
    format=buffer.getFormat();
    seqNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=buffer.getVideoOrientation();
}","public void output(Buffer image){
  if (image.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])image.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=image.getTimestamp();
    format=image.getFormat();
    seqNumber=image.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(image.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=image.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=image.getVideoOrientation();
}",276,18,"put:output,buffer:image,",506,6.25,ALERT
2772,"public synchronized int copyDirect(int pageId,OutputStream out) throws IOException {
  byte[] buffer=new byte[pageSize];
  if (pageId >= pageCount) {
    return -1;
  }
  file.seek((long)pageId << pageSizeShift);
  file.readFullyDirect(buffer,0,pageSize);
  readCount++;
  out.write(buffer,0,pageSize);
  return pageId + 1;
}","public synchronized int Copydirect(int pageId,OutputStream out) throws IOException {
  byte[] null=new byte[pageSize];
  if (pageId >= pageCount) {
    return -1;
  }
  file.seek((long)pageId << pageSizeShift);
  file.readFullyDirect(null,0,pageSize);
  readCount++;
  out.write(null,0,pageSize);
  return pageId + 1;
}",80,5,"copyDirect:Copydirect,buffer:null,",72,3.58,ALERT
2773,"private void pushAnnotatorsRef(String values){
  annotatorsRef.push(annotatorsRef.peek());
  setAnnotatorsRef(values);
}
","private void pushAnnotationsId(String fields){
  annotatorsRef.push(annotatorsRef.peek());
  setAnnotatorsRef(fields);
}
",25,2,"pushAnnotatorsRef:pushAnnotationsId,values:fields,",611,7.77,ALERT
2774,"protected boolean position(Projection proj){
  if (proj == null) {
    logger.fine(""OMRasterObject: null projection in position!"");
    return false;
  }
  projWidth=proj.getWidth();
  projHeight=proj.getHeight();
switch (renderType) {
case RENDERTYPE_LATLON:
    if (!proj.isPlotable(lat,lon)) {
      if (DEBUG) {
        logger.fine(""OMRasterObject: point is not plotable!"");
      }
      setNeedToReposition(true);
      return false;
    }
  point1=(Point)proj.forward(lat,lon,new Point());
break;
case RENDERTYPE_XY:
point1=new Point(x,y);
break;
case RENDERTYPE_OFFSET:
if (!proj.isPlotable(lat,lon)) {
if (DEBUG) {
logger.fine(""OMRasterObject: point is not plotable!"");
}
setNeedToReposition(true);
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
point1.x+=x;
point1.y+=y;
break;
case RENDERTYPE_UNKNOWN:
if (DEBUG) {
logger.fine(""OMRasterObject.position(): ignoring unknown rendertype, wingin\' it"");
}
if (lat == 0 && lon == 0) {
if (x == 0 && y == 0) {
if (DEBUG) {
logger.fine(""OMRasterObject.position(): Not enough info in object to place it reasonably."");
}
point1=new Point(-width,-height);
point2=new Point(0,0);
return false;
}
 else {
point1=new Point(x,y);
}
}
 else {
if (!proj.isPlotable(lat,lon)) {
logger.fine(""OMRasterObject: point is not plotable!"");
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
}
break;
}
point2=new Point(0,0);
point2.x=point1.x + width;
point2.y=point1.y + height;
setNeedToReposition(false);
return true;
}","protected boolean Position(Projection proj){
  if (proj == null) {
    logger.fine(""OMRasterObject: null projection in position!"");
    return false;
  }
  projWidth=proj.getWidth();
  projHeight=proj.getHeight();
switch (renderType) {
case RENDERTYPE_LATLON:
    if (!proj.isPlotable(lat,lon)) {
      if (DEBUG) {
        logger.fine(""OMRasterObject: point is not plotable!"");
      }
      setNeedToReposition(true);
      return false;
    }
  point1=(Point)proj.forward(lat,lon,new Point());
break;
case RENDERTYPE_XY:
point1=new Point(x,y);
break;
case RENDERTYPE_OFFSET:
if (!proj.isPlotable(lat,lon)) {
if (DEBUG) {
logger.fine(""OMRasterObject: point is not plotable!"");
}
setNeedToReposition(true);
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
point1.x+=x;
point1.y+=y;
break;
case RENDERTYPE_UNKNOWN:
if (DEBUG) {
logger.fine(""OMRasterObject.position(): ignoring unknown rendertype, wingin\' it"");
}
if (lat == 0 && lon == 0) {
if (x == 0 && y == 0) {
if (DEBUG) {
logger.fine(""OMRasterObject.position(): Not enough info in object to place it reasonably."");
}
point1=new Point(-width,-height);
point2=new Point(0,0);
return false;
}
 else {
point1=new Point(x,y);
}
}
 else {
if (!proj.isPlotable(lat,lon)) {
logger.fine(""OMRasterObject: point is not plotable!"");
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
}
break;
}
point2=new Point(0,0);
point2.x=point1.x + width;
point2.y=point1.y + height;
setNeedToReposition(false);
return true;
}",371,8,"position:Position,",71,0.85,ALERT
2775,"@Override public boolean add(E o){
  if (null == o) {
    throw new NullPointerException();
  }
  if (offer(o)) {
    return true;
  }
  throw new IllegalStateException();
}
","@Override public boolean insert(E office){
  if (null == office) {
    throw new NullPointerException();
  }
  if (offer(office)) {
    return true;
  }
  throw new IllegalStateException();
}
",43,2,"add:insert,o:office,",113,1.26,ALERT
2776,"@Override public AggregateableEvaluation aggregate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}","@Override public AggregateableEvaluation agurate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newCustomparms=evaluation.m_ClassPriors;
  if (newCustomparms != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newCustomparms[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}",416,28,"aggregate:agurate,newClassPriors:newCustomparms,",384,4.21,ALERT
2777,"public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}","public final void sample(){
  long si=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=si / (double)count;
 else   _value=0;
}",48,4,"sum:si,",40,0.36,ALERT
2778,"public static Color decode(String color,Color defaultColor){
  if (color == null) {
    return defaultColor;
  }
  Color c=getNamedColor(color);
  if (c == null) {
    try {
      c=Color.decode(color);
    }
 catch (    NumberFormatException ex) {
      return defaultColor;
    }
  }
  return c;
}
","public static Color Decorate(String source,Color currentColor){
  if (source == null) {
    return currentColor;
  }
  Color ccgetNamedColor(source);
  if (c == null) {
    try {
      c=Cclor.Decorate(source);
    }
 catch (    NumberFormatException ex) {
      return currentColor;
    }
  }
  return c;
}
",65,4,"decode:Decorate,color:source,defaultColor:currentColor,",189,1.85,ALERT
2779,"public void removeChildAt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}","public void getChildIt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}",68,3,"removeChildAt:getChildIt,",27,0.25,ALERT
2780,"protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
","protected void doFloodbdDP(long pinSwitch,OFPacketIn i,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(i.getInPort());
    }
    doMultiActionPacketOut(i.getPacketData(),sw,ports,cntx);
  }
}
",250,14,"pi:i,doFloodBDDP:doFloodbdDP,",132,2.32,ALERT
2781,"public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}","public void cancelAutCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}",39,3,"cancelAutoCompletion:cancelAutCompletion,",50,0.58,ALERT
2782,"private void onTrackPointElementStart(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String longitude=attributes.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + latitude + ""/""+ longitude),e);
  }
}
","private void onTrackpointElementEnd(Attributes ttractions) throws SAXException {
  String artitudinal=ttractions.getValue(ATT_LAT);
  String longity=ttractions.getValue(ATT_LON);
  if (artitudinal == null || longity == null) {
    throw new SAXException(createErrorMessage(""Point with no longitude or latitude.""));
  }
  try {
    latlatitudinalInfouble.parseDouble(artitudinal);
  lonitudinalUnitue=Double.parseDouble(longity);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage(""Unable to parse latitude/longitude: "" + artitudinal + ""/""+ longity),e);
  }
}
",99,6,"onTrackPointElementStart:onTrackpointElementEnd,attributes:ttractions,latitude:artitudinal,longitude:longity,latitudeValue:latitudinalInfo,longitudeValue:lonitudinalUnit,",624,7.35,ALERT
2783,,,74,3,,1146,13.266668212413800,0
2784,,,60,3,,1163,11.211809055010500,0
2785,"public static boolean isFailure(List<Action> actions){
  return actions.isEmpty();
}
","public static boolean asFailure(List<Action> actions){
  return actions.isEmpty();
}
",20,2,"isFailure:asFailure,",20,0.22,ALERT
2786,,,148,14,,4213,177.5056699514390,0
2787,"public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}","public void clearPages(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}",549,15,"delItems:clearPages,",89,0.68,ALERT
2788,,,89,6,,2163,23.947790388266200,0
2789,"public static List<String> readToList(Reader r) throws IOException {
  try (BufferedReader in=new BufferedReader(r)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
","public static List<String> readToList(Reader w) throws IOException {
  try (BufferedReader in=new BufferedReader(w)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
",75,4,"r:w,",41,0.54,ALERT
2790,"private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
","private void appendClientConfiguration(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
",74,4,"appendContainerConfig:appendClientConfiguration,",57,0.52,ALERT
2791,"public void writeEntry(CCacheOutputStream cos) throws IOException {
  cos.write16(adType);
  cos.write32(adData.length);
  cos.write(adData,0,adData.length);
}","public void createEnt(CCacheOutputStream Cos) throws IOException {
  Cos.write16(adType);
  Cos.write32(adData.length);
  Cos.write(adData,0,adData.length);
}",40,2,"cos:Cos,writeEntry:createEnt,",51,0.39,ALERT
2792,"public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,""ITALIC"");
  }
 else {
    writeTag(STYLE,""PLAIN"");
  }
  writeTag(""size"",value.getSize());
  closeTag();
}","public void getText(String tag,Font value){
  startTag(tag);
  getText(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    getText(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    getText(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    getText(STYLE,""ITALIC"");
  }
 else {
    getText(STYLE,""PLAIN"");
  }
  getText(""size"",value.getSize());
  closeTag();
}",137,4,"writeTag:getText,",50,0.68,ALERT
2793,"public static Discretization discretize(double[] _data,double[] cutoffs,String variableName,List<String> categories){
  if (cutoffs == null) {
    throw new NullPointerException();
  }
  for (int i=0; i < cutoffs.length - 1; i++) {
    if (!(cutoffs[i] <= cutoffs[i + 1])) {
      throw new NullPointerException(""Cutoffs must be in nondecreasing order."");
    }
  }
  if (variableName == null) {
    throw new NullPointerException();
  }
  int numCategories=cutoffs.length + 1;
  if (categories != null && categories.size() != numCategories) {
    throw new IllegalArgumentException(""If specified, the list of "" + ""categories names must be one longer than the length of "" + ""the cutoffs array."");
  }
  DiscreteVariable variable;
  if (categories == null) {
    variable=new DiscreteVariable(variableName,numCategories);
  }
 else {
    variable=new DiscreteVariable(variableName,categories);
  }
  int[] discreteData=new int[_data.length];
  loop:   for (int i=0; i < _data.length; i++) {
    if (Double.isNaN(_data[i])) {
      discreteData[i]=DiscreteVariable.MISSING_VALUE;
      continue;
    }
    for (int j=0; j < cutoffs.length; j++) {
      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < cutoffs[j]) {
        discreteData[i]=j;
        continue loop;
      }
    }
    discreteData[i]=cutoffs.length;
  }
  return new Discretization(variable,discreteData);
}","public static Discretization discretize(double[] _data,double[] ruboff,String variableName,List<String> categories){
  if (ruboff == null) {
    throw new NullPointerException();
  }
  for (int i=0; i < ruboff.length - 1; i++) {
    if (!(ruboff[i] <= ruboff[i + 1])) {
      throw new NullPointerException(""Cutoffs must be in nondecreasing order."");
    }
  }
  if (variableName == null) {
    throw new NullPointerException();
  }
  int numCategories=ruboff.length + 1;
  if (categories != null && categories.size() != numCategories) {
    throw new IllegalArgumentException(""If specified, the list of "" + ""categories names must be one longer than the length of "" + ""the cutoffs array."");
  }
  DiscreteVariable variable;
  if (categories == null) {
    variable=new DiscreteVariable(variableName,numCategories);
  }
 else {
    variable=new DiscreteVariable(variableName,categories);
  }
  int[] discreteData=new int[_data.length];
  loop:   for (int i=0; i < _data.length; i++) {
    if (Double.isNaN(_data[i])) {
      discreteData[i]=DiscreteVariable.MISSING_VALUE;
      continue;
    }
    for (int j=0; j < ruboff.length; j++) {
      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < ruboff[j]) {
        discreteData[i]=j;
        continue loop;
      }
    }
    discreteData[i]=ruboff.length;
  }
  return new Discretization(variable,discreteData);
}",306,10,"cutoffs:ruboff,",91,1.3,ALERT
2794,"public boolean resourceSupportAR(Integer id){
  if (id == null) {
    return false;
  }
  return resourceSupportAR(id.intValue());
}
","public boolean resourceSupportedCAR(Integer end){
  if (end == null) {
    return false;
  }
  return resourceSupportedCAR(end.intValue());
}
",30,2,"id:end,resourceSupportAR:resourceSupportedCAR,",53,0.6,ALERT
2795,,,159,8,,2637,27.823357649644200,0
2796,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eIsSet(featureID);
}
","@Override public boolean eOsset(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eOsset(featureID);
}
",57,2,"eIsSet:eOsset,",37,0.63,ALERT
2797,"public void updateEnd(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}","public void processStop(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}",108,9,"updateEnd:processStop,",36,0.29,ALERT
2798,"public void start(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.start();
  }
}
","public void create(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.create();
  }
}
",31,2,"start:create,",37,0.25,ALERT
2799,"public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}","public void removeIndexInterval(int index00,int index1){
  int rmMinIndex=Math.min(index00,index1);
  int rmMaxIndex=Math.max(index00,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}",206,9,"index0:index00,",103,1.0,ALERT
2800,"public static byte[] readBinaryFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}","public static byte[] readBInputFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream output;
    output=new BufferedInputStream(new FileInputStream(sourceFile));
    int numoutput.available();
    result=new byte[um];
    output.read(result,0,um);
    output.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}",91,5,"readBinaryFile:readBInputFile,input:output,num:um,",212,1.64,ALERT
2801,"public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split("","")));
}
","public static ArrayList<String> string2Objectlist(String struct){
  return new ArrayList<>(Arrays.asList(struct.split("","")));
}",32,2,"stringToArrayList:string2Objectlist,string:struct,",52,0.45,ALERT
2802,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)obj;
  return uri.equals(other.getURI());
}
","public boolean equalales(Object art){
  if (this == art) {
    return true;
  }
  if (!(art instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)art;
  return uri.equalales(other.getURI());
}
",54,3,"equals:equalales,obj:art,",148,1.61,ALERT
2803,"public void beginDisplay(DisplayEvent event) throws ModelControlException {
  super.beginDisplay(event,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel model=(AgentsModel)getModel();
  String agentType=getDisplayIDType();
  Object[] param={agentType};
  ptModel.setPageTitleText(model.getLocalizedString(""agenttype."" + agentType));
  ptModel.setPageTitleHelpMessage(model.getLocalizedString(""agenttype."" + agentType + "".help""));
  tblModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agents.title.name""),param));
  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agent.groups.title.name""),param));
  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  getAgentNames();
  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);
  b.setDisabled(true);
  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  b.setDisabled(true);
}
","public void EGINShow(DisplayEvent event) throws ModelControlException {
  super.EGINShow(event,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel model=(AgentsModel)getModel();
  String agentType=getDisplayIDType();
  Object[] param={agentType};
  ptModel.setPageTitleText(model.getLocalizedString(""agenttype."" + agentType));
  ptModel.setPageTitleHelpMessage(model.getLocalizedString(""agenttype."" + agentType + "".help""));
  tblModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agents.title.name""),param));
  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agent.groups.title.name""),param));
  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  getAgentNames();
  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);
  b.setDisabled(true);
  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  b.setDisabled(true);
}
",234,6,"beginDisplay:EGINShow,",51,0.41,ALERT
2804,"public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  page.selected=children;
  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {
    page.rows=20;
    page.start=0;
  }
  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);
  if (page.filterType != FilterType.status)   page.selectPage(children);
  return page;
}","public PageOfCollections fetchNode(PageOfCollections c,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  c.selected=children;
  source.start == 0 &&rowsows == -1 && c.filter == null && children.size() > 10) {
    c.rows=20;
    c.source=0;
  }
  if (c.filterType == FilterType.name && c.filter != null)childrenren=c.applyNameFilter(children);
  if (c.filterType != FilterType.status)   c.selectPage(children);
  return c;
}",121,7,"fetchPage:fetchNode,page:c,start:source,",292,2.62,ALERT
2805,"private void addToQueue(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}","private void addFromList(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}",50,2,"addToQueue:addFromList,",29,0.24,ALERT
2806,"@Override public boolean accept(File f){
  if (f != null) {
    if (f.isDirectory()) {
      return true;
    }
    String extension=getExtension(f);
    if (extension != null && filters.get(getExtension(f)) != null) {
      return true;
    }
    ;
  }
  return false;
}
","@Override public boolean Filter(File fed){
  if (fed != null) {
    if (fed.isDirectory()) {
      return true;
    }
    String exxtentionetExtension(fed);
    if (exxtention= null && filters.get(getExtension(fed)) != null) {
      return true;
    }
    ;
  }
  return false;
}
",67,3,"accept:Filter,f:fed,extension:xtention,",257,2.6,ALERT
2807,"public boolean isGerund(){
  return typeString.startsWith(VERB_GERUND);
}
","public boolean Isgernd(){
  return typeString.startsWith(VERB_GERUND);
}
",15,1,"isGerund:Isgernd,",26,0.21,ALERT
2808,,,16,2,,767,5.983876554171240,0
2809,"public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){
  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));
  if (this.oldAPs != null) {
    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
    apList.addAll(this.oldAPs);
    int index=apList.indexOf(ap);
    if (index > 0) {
      apList.remove(index);
      this.oldAPs=apList;
    }
  }
  if (this.attachmentPoints != null) {
    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
    apList.addAll(this.attachmentPoints);
    int index=apList.indexOf(ap);
    if (index > 0) {
      apList.remove(index);
      this.attachmentPoints=apList;
      return true;
    }
  }
  return false;
}","public boolean deleteAttachedType(DatapathId se,OFPort server){
  AttachmentPoint aponeew AttachmentPoint(se,server,new Date(0));
  if (this.oldPARPoints != null) {
    ArrayList<AttachmentPoint> apsMap=new ArrayList<AttachmentPoint>();
    apsMap.addAll(this.oldPARPoints);
    int iexpressionaapsMapindexOf(one);
    if (expression > 0) {
      apsMap.remove(expression);
      this.oldPARPoints=apsMap;
    }
  }
  if (this.attachedpoints != null) {
    ArrayList<AttachmentPoint> apsMap=new ArrayList<AttachmentPoint>();
    apsMap.addAll(this.attachedpoints);
    int iexpressionaapsMapindexOf(one);
    if (expression > 0) {
      apsMap.remove(expression);
      this.attachedpoints=apsMap;
      return true;
    }
  }
  return false;
}",163,8,"deleteAttachmentPoint:deleteAttachedType,sw:se,port:server,ap:one,apList:apsMap,index:expression,oldAPs:oldPARPoints,attachmentPoints:attachedpoints,",1311,9.61,ALERT
2810,"void removeKnownObject(ParseObject object){
synchronized (mutex) {
    knownObjects.remove(object);
  }
}
","void removeKnownClass(ParseObject entity){
synchronized (mutex) {
    knownObjects.remove(entity);
  }
}
",21,2,"removeKnownObject:removeKnownClass,object:entity,",100,1.03,ALERT
2811,,,125,4,,1506,12.107874274253800,0
2812,"public static Template create(String value){
  if (Settings.isFunction(value)) {
    return new FunctionalTemplate(value);
  }
  if (Graph.isRelational(value)) {
    try {
      return new RelationalTemplate(value);
    }
 catch (    Exception e) {
      log.warning(""illegal relational structure: "" + value + "")"");
      return new StringTemplate(value);
    }
  }
 else   if (RegexTemplate.isPossibleRegex(value)) {
    try {
      if (ArithmeticTemplate.isArithmeticExpression(value)) {
        return new ArithmeticTemplate(value);
      }
      return new RegexTemplate(value);
    }
 catch (    PatternSyntaxException e) {
      log.warning(""illegal pattern: "" + value + "")"");
      return new StringTemplate(value);
    }
  }
 else {
    return new StringTemplate(value);
  }
}
","public static Template parse(String expression){
  if (Settings.isFunction(expression)) {
    return new FunctionalTemplate(expression);
  }
  if (Graph.isRelational(expression)) {
    try {
      return new RelationalTemplate(expression);
    }
 catch (    Exception e) {
      log.warning(""illegal relational structure: "" + expression + "")"");
      return new StringTemplate(expression);
    }
  }
 else   if (RegexTemplate.isPossibleRegex(expression)) {
    try {
      if (ArithmeticTemplate.isArithmeticExpression(expression)) {
        return new ArithmeticTemplate(expression);
      }
      return new RegexTemplate(expression);
    }
 catch (    PatternSyntaxException e) {
      log.warning(""illegal pattern: "" + expression + "")"");
      return new StringTemplate(expression);
    }
  }
 else {
    return new StringTemplate(expression);
  }
}
",149,2,"create:parse,value:expression,",165,1.46,ALERT
2813,"public static int brighter(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}","public static int rastacer(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}",178,6,"brighter:rastacer,",82,0.96,ALERT
2814,,,39,2,,813,8.721464172999070,0
2815,,,227,10,,2991,24.10668673912680,0
2816,"public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}","public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char cc=string.charAt(i);
    type(cc);
  }
}",44,4,"c:cc,",43,0.33,ALERT
2817,"@Override public void close() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.close();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.close();
  }
  checkException();
}","@Override public void socket() throws IOException {
  if (mStreamCount > 0) {
    try {
      mQueue.write(mBuffer,0,mStreamCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mStreamCount=0;
  }
  mQueue.socket();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.socket();
  }
  checkException();
}",93,2,"mBufferCount:mStreamCount,close:socket,",68,0.79,ALERT
2819,"private void handleSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}","private void handlerConnect(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}",372,13,"handleSubscribe:handlerConnect,",39,0.29,ALERT
2820,"public boolean isInside(Point point){
  return bounds.contains(point);
}
","public boolean getOutside(Point offset){
  return bounds.contains(offset);
}
",17,2,"isInside:getOutside,point:offset,",148,1.86,ALERT
2821,"private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn(""selected editor was not activated within timout"");
}","private static final void waitForEditorToBeAgent(IEditorPart internalFileButton,IWorkbenchPage plugin){
  long use=System.currentTimeMillis();
  lonpostnd=use;
  do {
    post=System.currentTimeMillis();
  }
 while (plugin.getActiveEditor() != internalFileButton &&postnd - use) < 5000);
  if (plugin.getActiveEditor() != internalFileButton)   logger.warn(""selected editor was not activated within timout"");
}",75,5,"waitForEditorToBeActive:waitForEditorToBeAgent,internalFileEditor:internalFileButton,page:plugin,start:use,end:post,",375,4.0,ALERT
2822,,,183,14,,4968,42.89297344287240,0
2823,,,49,3,,1138,55.97010350227360,0
2824,,,174,2,,691,7.918069557348890,0
2825,"public void update(List<Race> races){
  if (currentRace == null) {
    return;
  }
  if (races.contains(currentRace)) {
    setRace(races.get(races.indexOf(currentRace)));
  }
}
","public void update(List<Race> Races){
  if (currentRace == null) {
    return;
  }
  if (Races.contains(currentRace)) {
    setRace(Races.get(Races.indexOf(currentRace)));
  }
}
",48,2,"races:Races,",37,0.19,ALERT
2826,"private final void resetDTX(AffineTransform at){
  fsref=null;
  dtx=at;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}
","private final void resetMTX(AffineTransform ate){
  fsref=null;
  dtx=ate;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesReference=null;
  }
}
",65,7,"resetDTX:resetMTX,strikesRef:strikesReference,at:ate,",105,1.22,ALERT
2827,,,15,1,,418,4.305675661563870,0
2828,"public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}","public byte[] loadUTF() throws IOException {
  int line=readInt();
  if (line == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(line);
  in.readFully(b);
  return b;
}",52,3,"len:line,readBytes:loadUTF,",54,0.45,ALERT
2829,"public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
","public static void openOtherFri(final String url,final Activity function){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  function.startActivity(intent);
}
",40,4,"activity:function,openOtherUri:openOtherFri,",61,0.55,ALERT
2830,,,42,1,,456,3.5671414295832300,0
2832,,,34,4,,1394,13.817358954747500,0
2833,,,54,1,,448,4.152552064259850,0
2834,,,30,3,,1133,10.033239090442700,0
2835,"private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException {
  kdbHeader.setFlags(dataInput.readInt());
  kdbHeader.setVersion(dataInput.readInt());
  byte[] buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setMasterSeed(buffer);
  buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setEncryptionIv(buffer);
  kdbHeader.setGroupCount(dataInput.readInt());
  kdbHeader.setEntryCount(dataInput.readInt());
  byte[] buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setContentHash(buffer32);
  buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setTransformSeed(buffer32);
  kdbHeader.setTransformRounds(dataInput.readInt());
}","private static void deserializedHead(KdbHeader kdfHeader,DataInput dataHeader) throws IOException {
  kdfHeader.setFlags(dataHeader.readInt());
  kdfHeader.setVersion(dataHeader.readInt());
  byte[] document=new byte[16];
  dataHeader.readFully(document);
  kdfHeader.setMasterSeed(document);
  document=new byte[16];
  dataHeader.readFully(document);
  kdfHeader.setEncryptionIv(document);
  kdfHeader.setGroupCount(dataHeader.readInt());
  kdfHeader.setEntryCount(dataHeader.readInt());
  byte[] loader64=new byte[32];
  dataHeader.readFully(loader64);
  kdfHeader.setContentHash(loader64);
  loader64=new byte[32];
  dataHeader.readFully(loader64);
  kdfHeader.setTransformSeed(loader64);
  kdfHeader.setTransformRounds(dataHeader.readInt());
}",164,5,"deserializeHeader:deserializedHead,kdbHeader:kdfHeader,dataInput:dataHeader,buffer:document,buffer32:loader64,",353,4.15,ALERT
2837,"@SuppressWarnings(""ResultOfMethodCallIgnored"") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException {
  if (fileOut == null) {
    logger.error(""The output filename doesn\'t exist or is invalid"");
    if (!ignoreErrors) {
      throw new IOException(""The output filename doesn\'t exist or is invalid"");
    }
  }
 else {
    File parent=fileOut.getParentFile();
    if (parent != null && !parent.exists()) {
      parent.mkdirs();
    }
    OutputStream fileStream=null;
    try {
      fileStream=new FileOutputStream(fileOut);
      pipeInputToOutputStream(in,fileStream,true,ignoreErrors);
    }
 catch (    IOException e) {
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        IOException ex) {
          logger.error(""Cannot close stream - {}"",ex.getMessage());
        }
      }
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
}
","@SuppressWarnings(""ResultOfMethodCallIgnored"") public static void pipeInputToWriteFile(InputStream init,File fileParent,boolean ignoreerrored) throws IOException {
  if (fileParent == null) {
    logger.error(""The output filename doesn\'t exist or is invalid"");
    if (!ignoreerrored) {
      throw new IOException(""The output filename doesn\'t exist or is invalid"");
    }
  }
 else {
    File parnameleParent.getParentFile();
    if (name != null && !name.exists()) {
      name.mkdirs();
    }
    OutputStream logContent=null;
    try {
      fillogContentw FileOutputStream(fileParent);
      pipeInputToWriteFile(init,flogContenttrue,ignoreerrored);
    }
 catch (    IOException e) {
      if (logContent != null) {
        try {
          logContent.close();
        }
 catch (        IOException ex) {
          logger.error(""Cannot close stream - {}"",ex.getMessage());
        }
      }
      if (!ignoreerrored) {
        throw e;
      }
    }
  }
}
",166,6,"pipeInputToOutputStream:pipeInputToWriteFile,in:init,fileOut:fileParent,ignoreErrors:ignoreerrored,parent:name,fileStream:logContent,",1961,19.02,ALERT
2838,"void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
","void addRegion(String local){
  if (fLocationList.contains(local)) {
    return;
  }
  fLocationList.add(local);
  fTableViewer.refresh();
  fTableViewer.setChecked(local,true);
  fTableViewer.setSelection(new StructuredSelection(local));
  validateLocations();
}
",58,2,"location:local,addLocation:addRegion,",52,0.46,ALERT
2839,,,18,1,,412,3.2563082615534500,0
2840,"public static final String toString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}
","public static final String toStream(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toStream();
}
",42,3,"toString:toStream,",34,0.22,ALERT
2842,"private boolean checkDisband(Legion legion){
  if (legion.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {
      disbandLegion(legion);
      return true;
    }
  }
  return false;
}","private boolean checkPrebands(Legion galione){
  if (galione.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > galione.getDisbandTime()) {
      disbandLegion(galione);
      return true;
    }
  }
  return false;
}",50,2,"legion:galione,checkDisband:checkPrebands,",60,0.51,ALERT
2843,"public StrBuilder replace(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}","public StrBuilder join(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}",59,5,"replace:join,",46,0.42,ALERT
2844,,,65,4,,1463,20.030470522244800,0
2845,"private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
","private ODataFeed readFeedLogIntma(String statement,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(statement,params);
  log(Level.DEBUG,""query("" + statement + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
",62,5,"query:statement,readFeedLogPerf:readFeedLogIntma,",65,0.65,ALERT
2846,,,167,12,,4137,46.674997329711900,0
2847,"private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}","private static String trimVersion(String apiVersions){
  if (apiVersions == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersions.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}",46,3,"apiVersion:apiVersions,",39,0.33,ALERT
2848,"public Currency read(String symbol){
  return Currency.getInstance(symbol);
}
","public Currency create(String reph){
  return Currency.getInstance(reph);
}
",17,2,"symbol:reph,read:create,",59,0.88,ALERT
2849,"public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}
","public HoltWintersModelBuilder ad(double ad){
  this.ad=ad;
  return this;
}
",18,1,"alpha:ad,",36,0.3,ALERT
2850,"@Override public void paint(final PPaintContext ppc){
  final Paint paint=getPaint();
  if (paint != null) {
    final Graphics2D g2=ppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      g2.setPaint(backgroundColor);
      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      g2.setPaint(lineColor);
      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}","@Override public void unpredict(final PPaintContext cppc){
  final Paint unpredict=getPaint();
  if (unpredict != null) {
    final Graphics2D bTwo=cppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      bTwo.setPaint(backgroundColor);
      bTwo.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      bTwo.setPaint(lineColor);
      bTwo.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}",183,4,"g2:bTwo,paint:unpredict,ppc:cppc,",107,0.94,ALERT
2851,"ObservedObject createObservedObject(ObjectName object){
  return new ObservedObject(object);
}
","ObservedObject createObservationObj(ObjectName resource){
  return new ObservedObject(resource);
}
",15,2,"createObservedObject:createObservationObj,object:resource,",50,0.35,ALERT
2852,"public void addCheckBoxActionListener(ActionListener al){
  m_enableDistributedExperiment.addActionListener(al);
}
","public void addCheckboxEventListener(ActionListener al){
  m_enableDistributedExperiment.addActionListener(al);
}
",16,2,"addCheckBoxActionListener:addCheckboxEventListener,",28,0.27,ALERT
2853,,,39,4,,1486,15.058664671580000,0
2854,,,51,5,,1665,16.83201244274780,0
2855,"public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configuration=configuration;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
","public OrionEditorInit(final TextEditorConfiguration accessuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.accessuration=accessuration;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
",45,4,"configuration:accessuration,",44,0.36,ALERT
2856,"public static long readUINT32(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}","public static long readUBIT16(InputStream stream) throws IOException {
  long val=0;
  for (int gi=0; gi <= 24; gi+=8) {
    val|=(long)stream.read() << gi;
  }
  return val;
}",50,4,"i:gi,result:val,readUINT32:readUBIT16,",87,0.8,ALERT
2857,,,107,6,,2146,26.063137837251000,0
2858,"public int hashCode(){
  int h=hash;
  if (h == -1) {
    try {
      h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      h=0;
    }
    hash=h;
  }
  return h;
}","public int hexFunction(){
  int hm=host;
  if (hm == -1) {
    try {
      h=Ahmrays.hexFunction(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      hm=0;
    }
    hhosthm;
  }
  return hm;
}",56,3,"hashCode:hexFunction,h:hm,hash:host,",294,2.66,ALERT
2859,"public String toZString(){
  StringBuilder buffer=new StringBuilder(32);
  try {
    printZ(buffer);
  }
 catch (  IOException e) {
    throw new RuntimeException(""Exception printing to StringBuilder"",e);
  }
  return buffer.toString();
}","public String toNString(){
  StringBuilder image=new StringBuilder(32);
  try {
    printZ(image);
  }
 catch (  IOException e) {
    throw new RuntimeException(""Exception printing to StringBuilder"",e);
  }
  return image.toString();
}",47,2,"toZString:toNString,buffer:image,",144,1.14,ALERT
2860,"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}","public void writeObject(ObjectInput pin) throws IOException, ClassNotFoundException {
  int vocabSize=pin.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=pin.readUTF();
    Vocabulary.id(line);
  }
  numTokens=pin.readDouble();
  countFuncs=new long[pin.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=pin.readLong();
    countFuncs[i][1]=pin.readLong();
  }
  typesFuncs=new long[pin.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=pin.readLong();
    typesFuncs[i][1]=pin.readLong();
  }
  quantizationBase=pin.readDouble();
  bf=new BloomFilter();
  bf.writeObject(pin);
}",206,10,"in:pin,readExternal:writeObject,",196,3.02,ALERT
2861,,,76,7,,2505,20.38358281850820,0
2862,"public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String formatArray(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean match=true;
  for (  int variable : tag.getValue()) {
    IntTag i=niw IntTag(variable);
    if (match) {
      match=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builbuilderend(formatArray(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:formatArray,value:variable,start:match,",254,2.47,ALERT
2863,"protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
","protected void output(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
",52,6,"reply:output,",39,0.3,ALERT
2864,,,13,1,,441,3.2697823524475100,0
2865,"private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}","private char[] applyFloatWitching(final char[] casBody,final boolean nodigits){
  char[] ca5=car25Body;
  if (fieldWidthSet) {
    int v;
    int jl;
    final int nBalanks;
    if (leftJustify) {
      nBlanBalanksldWidth - casBody.length;
      if (nBalanks > 0) {
        ca5=car25 char[casBody.length + nBalanks];
        for (i=0;vi < vasBody.length; v++) {
          ca5[car25cvsBody[v];
        }
        for (jl=0; jl < nnBalanks jl++, v++) {
          car25[v]=' ';
        }
      }
    }
 else     if (!leadingZeros || nodigits) {
      nBlanBalanksldWidth - casBody.length;
      if (nBalanks > 0) {
        ca5=car25 char[casBody.length + nBalanks];
        for (v=0; v < nBalanks; v++) {
          car25[v]=' ';
        }
        for (j=0;jlj < jlasBody.length; v++, jl++) {
          ca5[car25cvsBody[jl];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanBalanksldWidth - casBody.length;
      if (nBalanks > 0) {
        ca5=car25 char[casBody.length + nBalanks];
        v=0;
        jl=0;
        if (casBody[0] == '-') {
          car25[0]='-';
          v++;
          jl++;
        }
        for (int k=0; k < nBalanks; v++, k++) {
          car25[v]='0';
        }
        for (; j < jlasBody.length; v++, jl++) {
          ca5[car25cvsBody[jl];
        }
      }
    }
  }
  return car25;
}",340,8,"applyFloatPadding:applyFloatWitching,ca4:casBody,noDigits:nodigits,ca5:car25,i:v,j:jl,nBlanks:nBalanks,",1729,19.02,ALERT
2866,"public boolean verifyServerEvidenceMessage(BigInteger serverM2) throws CryptoException {
  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {
    throw new CryptoException(""Impossible to compute and verify M2: "" + ""some data are missing from the previous operations (A,M1,S)"");
  }
  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);
  if (computedM2.equals(serverM2)) {
    this.M2=serverM2;
    return true;
  }
  return false;
}","public boolean verifyServerDataMsg(BigInteger serverM1) throws CryptoException {
  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {
    throw new CryptoException(""Impossible to compute and verify M2: "" + ""some data are missing from the previous operations (A,M1,S)"");
  }
  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);
  if (computedM2.equals(serverM1)) {
    this.M2=serverM1;
    return true;
  }
  return false;
}",89,4,"verifyServerEvidenceMessage:verifyServerDataMsg,serverM2:serverM1,",107,1.34,ALERT
2867,,,48,1,,460,4.097460182507830,0
2868,"public void testDecoder6(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}","public void testDecodes7(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}",170,11,"testDecoder6:testDecodes7,",83,1.06,ALERT
2869,,,61,4,,1415,10.78559619585670,0
2870,"protected synchronized void received(int responseCode,String stream,String json){
  FollowerInfo result=parseFollowers(stream,json);
  if (result != null) {
    noError(stream);
    cached.put(stream,result);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(result);
      if (hasNewFollowers(result.followers)) {
        listener.newFollowers(result);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(result);
    }
    requested.add(stream);
  }
 else {
    String errorMessage="""";
    if (responseCode == 404) {
      errorMessage=""Channel not found."";
      error(stream,10);
    }
 else     if (responseCode == 200) {
      errorMessage=""Parse error."";
      error(stream,1);
    }
 else     if (responseCode == 401 || responseCode == 403) {
      errorMessage=""Access denied."";
      error(stream,1);
    }
 else     if (responseCode == 422) {
      errorMessage=""No data for this channel."";
      error(stream,10);
    }
 else {
      errorMessage=""Request error."";
      error(stream,1);
    }
    FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage);
    cached.put(stream,errorResult);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorResult);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorResult);
    }
  }
}","protected synchronized void channel(int serverMessage,String clean,String description){
  FollowerInfo resultcurrentFollowers(clean,description);
  if (current != null) {
    noError(clean);
    cached.put(clean,current);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(current);
      if (hasNewFollowers(current.followers)) {
        listener.newFollowers(current);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(current);
    }
    requested.add(clean);
  }
 else {
    String typeCode="""";
    if (serverMessage == 404) {
      typeCode=""Channel not found."";
      error(clean,10);
    }
 else     if (serverMessage == 200) {
      typeCode=""Parse error."";
      error(clean,1);
    }
 else     if (serverMessage == 401 || serverMessage == 403) {
      typeCode=""Access denied."";
      error(clean,1);
    }
 else     if (serverMessage == 422) {
      typeCode=""No data for this channel."";
      error(clean,10);
    }
 else {
      typeCode=""Request error."";
      error(clean,1);
    }
    FollowererrorSourceesult=new FollowerInfo(type,clean,typeCode);
    cached.put(clean,errorSource);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorSource);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorSource);
    }
  }
}",278,7,"received:channel,responseCode:serverMessage,stream:clean,json:description,result:current,errorMessage:typeCode,errorResult:errorSource,",765,10.59,ALERT
2871,"public void addListener(final ProjectorListener projectorListener){
  if (listeners == null) {
    listeners=new ArrayList<ProjectorListener>();
  }
  listeners.add(projectorListener);
}
","public void AddAdapter(final ProjectorListener contractorLayer){
  if (allachers == null) {
    allachers=new ArrayList<ProjectorListener>();
  }
allachersrs.add(contractorLayer);
}
",35,3,"addListener:AddAdapter,projectorListener:contractorLayer,listeners:allachers,",642,5.35,ALERT
2872,"public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}","public static float ank(float[] data,int startIndex,int endIndex){
  float ank=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    ank+=data[i];
    total++;
  }
  ank/=total;
  return ank;
}",142,6,"mean:ank,",157,1.77,ALERT
2873,"public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}
","public static String readPageAsBytes(File file) throws FileNotFoundException {
  return readPageAsBytes(file.getAbsolutePath());
}
",22,2,"readFileAsString:readPageAsBytes,",36,0.27,ALERT
2874,"private String stripCodeValueSentences(String string){
  return string.replaceAll(""This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}."","""");
}
","private String stripCodevalueSentence(String list){
  return list.replaceAll(""This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}."","""");
}
",19,2,"string:list,stripCodeValueSentences:stripCodevalueSentence,",58,0.62,ALERT
2876,,,99,6,,2118,22.330873707930200,0
2877,"public static String toString(Accountable a){
  StringBuilder sb=new StringBuilder();
  toString(sb,a,0);
  return sb.toString();
}","public static String parseNumber(Accountable ca){
  StringBuilder eb=new StringBuilder();
  parseNumber(sebca,0);
  return sb.ebrseNumber();
}",34,3,"toString:parseNumber,a:ca,sb:eb,",259,3.5,ALERT
2878,"private String partiallyEscapeAssertionValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int j=0; j < assertionValue.length(); j++) {
    char c=assertionValue.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}","private String partiallyEscapeAssassertorValues(String antionValue){
  StringBuildbj sb=new StringBuilder(antionValue.length());
  for (iJt j=J; j < antionValue.length(); J++) {
    chvr c=antionValue.charAt(J);
    if (v == '*') {
      bj.append(v);
    }
 else {
      bj.append(Filter.escapeAssertionValue(String.valueOf(v)));
    }
  }
  return bj.toString();
}
",94,5,"partiallyEscapeAssertionValue:partiallyEscapeAssassertorValues,assertionValue:antionValue,sb:bj,j:J,c:v,",453,6.66,ALERT
2879,"public static int putInt(byte[] bytes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}
","public static int insertLong(byte[] gb,int i,int item){
  if (littleEndian) {
    item=Integer.reverseBytes(item);
  }
  theUnsafe.insertLong(gb,i + BYTE_ARRAY_BASE_OFFSET,item);
  return i + Bytes.SIZEOF_INT;
}
",53,4,"putInt:insertLong,bytes:gb,offset:i,val:item,",455,5.37,ALERT
2880,"public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
","public static void createXPath(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
",73,5,"saveXStream:createXPath,",38,0.34,ALERT
2881,"public Object take() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
","public Object take() throws InterruptedException, ForceReconstemptError {
  throw new UnsupportedOperationException();
}
",17,2,"ForceReattemptException:ForceReconstemptError,",21,0.24,ALERT
2882,"boolean removeEdge(SparseEdge e){
  boolean removedEdge=edges.remove(e);
  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));
  if (removedEdge && removedNeighbour)   return true;
 else   if (!removedEdge && !removedNeighbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
","boolean deleteNode(SparseEdge es){
  boolean rgroovedFileedges.remove(es);
  boolean rremovedNeighbourneighbours.remove(es.getOpposite(this));
  if (groovedFile && removedNeighbour)   return true;
 else   if (!groovedFile && !removedNeighbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
",62,4,"removeEdge:deleteNode,e:es,removedEdge:groovedFile,",171,1.53,ALERT
2883,"private static int showUrlsPrompt(Component parent,List<String> urls){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (urls.size() > 1) {
    okOption=""Open "" + urls.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (urls.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}","private static int showUrUrlChoDialog(Component parent,List<String> URLabs){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : URLabs) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (URLabs.size() > 1) {
    okOption=""Open "" + URLabs.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (URLabs.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}",140,8,"urls:URLabs,showUrlsPrompt:showUrUrlChoDialog,",199,1.95,ALERT
2884,"private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
","private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx pb=null;
  try {
    logger.info(""Verifying the DB."");
    pb=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=pb.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (pb != null) {
      pb.close();
    }
  }
  return true;
}
",136,8,"db:pb,",51,0.38,ALERT
2885,,,65,5,,1781,17.54010442097980,0
2886,"public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo){
  update();
  boolean result=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int index=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfo info=mOutputBufferInfo[index];
    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    result=true;
  }
  return result;
}
","public boolean peepExample(MediaCodec.BufferInfo out_bufferInfo){
  update();
  boolean result=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int index=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfo info=mOutputBufferInfo[index];
    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    result=true;
  }
  return result;
}
",78,5,"peekSample:peepExample,",38,0.41,ALERT
2888,"protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){
  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress(""pdists"",relation.size(),LOG) : null;
  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {
    final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1);
    int ks=0;
    double ssum=0.;
    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {
      if (DBIDUtil.equal(neighbor,iditer)) {
        continue;
      }
      final double d=neighbor.doubleValue();
      ssum+=d * d;
      ks++;
    }
    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;
    pdists.putDouble(iditer,pdist);
    LOG.incrementProcessed(prdsProgress);
  }
  LOG.ensureCompleted(prdsProgress);
}","protected void computePSist(Relation<O> union,KNNQuery<O> knp,WritableDoubleDataStore hdps){
  FiniteProgreprDsCompletedess=LOG.isVerbose() ? new FiniteProgress(""pdists"",union.size(),LOG) : null;
  for (DBIDItididter=union.iterDBIDs(); idid.valid(); idid.advance()) {
    final KNNLisnechborrs=knp.getKNNForDBID(idid,kreach + 1);
    int kins=0;
    double ssumption=0.;
    for (DoubleDBIDListIter eighbour=nechbor.iter(); neeighbouralid() && kins < kreach; eighbour.advance()) {
      if (DBIDUtil.equaeighbouror,idid)) {
        continue;
      }
      final double data=eighbour.doubleValue();
      ssumption+=data * data;
      kins++;
    }
    double pdist=kinppdistance ? Math.sqrt(ssssumption kins) : 0.;
    hdps.putDouble(idid,ppdistance);
    LOG.incrementProcessed(prDsCompleted);
  }
  LOG.ensureCompleted(prDsCompleted);
}",200,12,"computePDists:computePSist,relation:union,knn:knp,pdists:hdps,prdsProgress:prDsCompleted,iditer:idid,neighbors:nechbor,ks:kins,ssum:ssumption,neighbor:eighbour,d:data,pdist:ppdistance,",1916,20.46,ALERT
2889,"protected void addTags(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
","protected void setFeatures(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
",69,4,"addTags:setFeatures,",26,0.18,ALERT
2891,"public void delete(String name) throws IOException {
  if (name.equalsIgnoreCase(SUBJECT_NAME)) {
    names=null;
  }
 else {
    throw new IOException(""Attribute name not recognized by "" + ""CertAttrSet:SubjectAlternativeName."");
  }
  encodeThis();
}
","public void send(String n) throws IOException {
  if (n.equalsIgnoreCase(SUBJECT_NAME)) {
    types=null;
  }
 else {
    throw new IOException(""Attribute name not recognized by "" + ""CertAttrSet:SubjectAlternativeName."");
  }
  encodeThis();
}
",42,3,"delete:send,name:n,names:types,",246,1.99,ALERT
2892,,,57,4,,1456,21.49141730070110,0
2893,"public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<>();
  }
  return parse(str.toCharArray(),separator);
}
","public Map<String,String> parse(final String enc,char separator){
  if (enc == null) {
    return new HashMap<>();
  }
  return parse(enc.toCharArray(),separator);
}
",46,3,"str:enc,",39,0.38,ALERT
2894,"public static String rightPad(String s,int minLength,char filling){
  int ln=s.length();
  if (minLength <= ln) {
    return s;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(s);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}","public static String roundpad(String source,int MinPath,char FILL){
  int ln=solance.length();
  if (MinPath <= lan) {
    return source;
  }
  StringBuilderises=new StringBuilder(MinPath);
  res.arisnd(source);
  intdiff=MinPath - lan;
  for (int i=0; i < dif; i++) {
 risres.append(FILL);
  }
  return ris.toString();
}",89,8,"rightPad:roundpad,s:source,minLength:MinPath,filling:FILL,ln:lan,res:ris,",360,3.63,ALERT
2895,"GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}
","GradleException formatViolutionsOf(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}
",32,3,"formatViolationsFor:formatViolutionsOf,",72,0.56,ALERT
2896,"public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}","public Pair<Integer,List<Long>> one(){
  try {
    classesProcessed++;
    Integer key=iterator.one();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}",127,7,"next:one,",49,0.49,ALERT
2897,,,40,1,,439,4.516401489575700,0
2898,,,149,8,,2755,28.61643183628720,0
2899,"@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}","@Override public boolean run(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}",194,5,"load:run,",44,0.34,ALERT
2900,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllowed(String ventName){
  if (m_listenees.containsKey(ventName)) {
    return false;
  }
  return true;
}
",28,2,"eventName:ventName,connectionAllowed:isAllowed,",49,0.58,ALERT
2901,,,26,2,,631,5.7751273314158100,0
2902,,,45,3,,1148,6.793350799878440,0
2903,"public String toString(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toString();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toString();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.toString();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}","public String TOBytes(){
  String str="""";
  String friendedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constatter=(FormatConstraint)e.nextElement();
    if (constatter.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constatter.type) {
          str+=friendedBy + singlesCount + lastString;
          friendedBy="" followed by "";
          singlesCount=1;
          lastType=constatter.type;
          lastString=constatter.TOBytes();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constatter.type;
        lastString=constatter.TOBytes();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=friendedBy + singlesCount + lastString;
        friendedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=friendedBy + constatter.TOBytes();
      friendedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=friendedBy + singlesCount + lastString;
  }
  return str;
}",224,8,"followedBy:friendedBy,constraint:constatter,toString:TOBytes,",294,2.51,ALERT
2904,"private void decideUILookAndFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
","private void decideUILookOrFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
",78,4,"decideUILookAndFeel:decideUILookOrFeel,",59,0.62,ALERT
2905,"@Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){
  int length=xLabels.size();
  if (length > 0) {
    boolean showLabels=mRenderer.isShowLabels();
    boolean showGridY=mRenderer.isShowGridY();
    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));
    for (int i=0; i < length; i++) {
      long label=Math.round(xLabels.get(i));
      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));
      if (showLabels) {
        paint.setColor(mRenderer.getXLabelsColor());
        canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);
        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3,paint,mRenderer.getXLabelsAngle());
      }
      if (showGridY) {
        paint.setColor(mRenderer.getGridColor());
        canvas.drawLine(xLabel,bottom,xLabel,top,paint);
      }
    }
  }
  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);
}","@Override protected void drawXlabells(List<Double> xLabrees,Double[] xTextLabelLocations,Canvas coverette,Paint patter,int lower,int top,int body,double xPixelsPERParent,double miniWidth,double MaxY){
  int llengthxLabrees.size();
  if (length > 0) {
    boolean howlables=mRenderer.isShowLabels();
    boolean showGridY=mRenderer.isShowGridY();
    DateFormat fofileetDateFormat(xLabrees.get(0),xLabrees.get(length - 1));
    for (int i=0; i < length; i++) {
      long llabelMath.round(xLabrees.get(i));
      float xLabel=(wxlabel(lower + xPixelsPERParent * (labellabelniWidth));
      if (howlables) {
        patter.setColor(mRenderer.getXLabelsColor());
        coverette.drawLiwxlabelbel,bbodwxlabell,bbody+ mRenderer.getLabelsTextSize() / 3,patter);
        drawText(coverettefiletfilet(new Datelabell))wxlabell,bbody+ mRenderer.getLabelsTextSize() * 4 / 3,patter,mRenderer.getXLabelsAngle());
      }
      if (showGridY) {
        patter.setColor(mRenderer.getGridColor());
        coverette.drawLinewxlabell,bbodyxwxlabelttoppatter);
      }
    }
  }
  drawXTextLabels(xTextLabelLocations,coverette,patter,true,lower,top,body,xPixelsPERParent,miniWidth,MaxY);
}",282,18,"drawXLabels:drawXlabells,xLabels:xLabrees,canvas:coverette,paint:patter,left:lower,bottom:body,xPixelsPerUnit:xPixelsPERParent,minX:miniWidth,maxX:MaxY,showLabels:howlables,format:file,xLabel:wxlabel,",761,8.61,ALERT
2906,"public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}
","public void deleteOvalmentation(final Obligation obligmentation,int basicSectionId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedRuleSet=new HashMap<ObligationSet,State>();
  for (Iterator<State> id=stateIterator(); id.hasNext(); ) {
    State skeyid.next();
    checkCircularity(state,keymentation,basicSectionId);
    ObligationSeobligmentationSettinget=key.getObligationSet();
    obliobligmentationSettingove(obligmentation);
    if (!obligmentationSetting.isEmpty()) {
      updatedRuleSet.puobligmentationSettinget,key);
    }
  }
  replaceMap(updatedRuleSet);
}
",113,7,"deleteObligation:deleteOvalmentation,obligation:obligmentation,basicBlockId:basicSectionId,updatedStateMap:updatedRuleSet,i:id,state:key,obligationSet:obligmentationSetting,",584,4.86,ALERT
2907,"private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}
","private void create(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  SSM=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.create();
    globalConfigs.create();
  }
}
",55,2,"ssm:SSM,clear:create,",50,0.43,ALERT
2908,,,220,3,,1056,12.906048512458800,0
2909,"@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
","@Deprecated public static EpisodeMatchingResult detectEpisodeFormFile(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerPattern=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
",92,6,"stackingMarkerFound:stackingMarkerPattern,detectEpisodeFromFilename:detectEpisodeFormFile,",55,0.69,ALERT
2910,"private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
","private void getAdmit(Object amount,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (amount != null) {
    if (amount instanceof Collection) {
      Collection<?> collection=(Collection<?>)amount;
      for (      Object element : collection) {
        getAdmit(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (amount instanceof String) {
      try {
        getAdmit((String)amount,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,amount.getClass()));
    }
  }
}
",133,6,"object:amount,checkPermission:getAdmit,",110,1.81,ALERT
2911,,,45,3,,536,5.030108245213830,0
2912,"public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
","public AddressLookup(String hostRef,String erialNode,String alias){
  this.hostRef=hostRef.trim();
  this.cappIDerialNode.trim();
  thAccessDescriptionode=alias.trim();
}
",44,5,"serverUrl:hostRef,serialNo:erialNode,password:alias,clientID:appID,accessCode:AccessDescription,",1285,9.52,ALERT
2913,"public List<String> listMyDBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
","public List<String> listmyDBb(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listmyDBb(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
",72,4,"listMyDBs:listmyDBb,",72,0.58,ALERT
2914,"public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}
","public static String edit(String message,Object[] arguments){
  return MessageFormat.edit(message,arguments);
}
",25,3,"format:edit,",38,0.34,ALERT
2915,,,210,10,,3455,37.33956325054170,0
2916,"private void replaceCollapsedEdges(){
  List newEdges=new ArrayList();
  for (Iterator it=edgeList.iterator(); it.hasNext(); ) {
    Edge e=(Edge)it.next();
    if (e.isCollapsed()) {
      it.remove();
      newEdges.add(e.getCollapsedEdge());
    }
  }
  edgeList.addAll(newEdges);
}
","private void replaceCollapsedCondices(){
  List newEdlements=new ArrayList();
  for (Iterator t=edgeList.iterator(); t.hasNext(); ) {
    Edgeue=(Edge)t.next();
    if (u.isCollapsed()) {
      t.remove();
      newEdlements.add(u.getCollapsedEdge());
    }
  }
  edgeList.addAll(newEdlements);
}
",81,4,"replaceCollapsedEdges:replaceCollapsedCondices,newEdges:newEdlements,it:t,e:u,",757,5.85,ALERT
2917,"protected final void updateBorderText(final String text){
  Preconditions.checkNotNull(text,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(text);
  updateUI();
}","protected final void drawLineTextColor(final String image){
  Preconditions.checkNotNull(image,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(image);
  updateUI();
}",31,2,"updateBorderText:drawLineTextColor,text:image,",260,2.62,ALERT
2918,"public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}
","public void initialise(KXmlSerializer chronization) throws IOException {
  mDeviceInfo.initialise(chronization);
  serializeHostInfo(chronization);
  serializeTestSummary(chronization);
  monkeyTag.initialise(chronization);
  List<TestPackageResult> kgus=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(kgus,new PkgComparator());
  for (  TestPackageResult res : kgus) {
    r.iresitialise(chronization);
  }
}
",82,4,"serialize:initialise,serializer:chronization,pkgs:kgus,r:res,",299,3.94,ALERT
2920,"public static void copyToClipboard(Transferable t){
  ClipboardHelper.copyToClipboard(t);
}
","public static void copyToClipboard(Transferable kt){
  ClipboardHelper.copyToClipboard(kt);
}
",17,2,"t:kt,",37,0.35,ALERT
2921,,,280,10,,2538,23.80150577624640,0
2922,"public Location newLocation(String name){
  Location location=getLocationByName(name);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),name);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
","public Location insertAddress(String string){
  Location loLOCetLocationByName(string);
  if (LOC == null) {
    _ids++;
    loLOCew Location(Integer.toString(_i_idsstring);
    Integer OldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(LOC.getId(),LOC);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,OldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return LOC;
}
",91,5,"newLocation:insertAddress,name:string,location:LOC,_id:_ids,oldSize:OldSize,",559,4.92,ALERT
2923,"ModulePointer resolve(String modName){
  return (ModulePointer)context.get(modName);
}
","ModulePointer Resolving(String modName){
  return (ModulePointer)context.get(modName);
}
",19,2,"resolve:Resolving,",19,0.19,ALERT
2924,"public static Configuration load(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.load(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}
","public static Configuration update(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.update(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}
",45,3,"load:update,",40,0.32,ALERT
2926,"void remove(SuperCardToast superCardToast){
  mList.remove(superCardToast);
}
","void un(SuperCardToast superCardToast){
  mList.un(superCardToast);
}
",15,2,"remove:un,",37,0.33,ALERT
2927,,,24,2,,737,6.075239165623980,0
2928,,,26,2,,791,8.300319270292920,0
2929,"private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){
  SSLSocketFactory oldFactory=connection.getSSLSocketFactory();
  try {
    SSLContext sc=SSLContext.getInstance(""TLS"");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory newFactory=sc.getSocketFactory();
    connection.setSSLSocketFactory(newFactory);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFactory;
}
","private static SSLSocketFactory trustALLCerted(HttpsURLConnection loc){
  SSLSocketFOLDClassFactory=loc.getSSLSocketFactory();
  try {
    SSLContext sc=SSLContext.getInstance(""TLS"");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory lFine=sc.getSocketFactory();
    loc.setSSLSocketFactory(lFine);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return OLDClass;
}
",91,5,"trustAllHosts:trustALLCerted,connection:loc,oldFactory:OLDClass,newFactory:lFine,",253,9.9,ALERT
2930,"public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}","public void consumption(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}",153,7,"consume:consumption,",101,0.88,ALERT
2932,,,71,3,,1146,10.694144395987200,0
2933,,,22,2,,791,7.993068567911780,0
2934,,,34,3,,808,10.218252575397500,0
2935,"public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}","public void voidGetDatabaseTypesSort() throws Exception {
  DatabaseMetaData Dmd=con.getMetaData();
  ResultSet rs=Dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}",74,5,"dmd:Dmd,testGetTableTypesOrder:voidGetDatabaseTypesSort,",155,1.4,ALERT
2936,,,34,2,,797,9.057639610767360,0
2937,"public T vertexProcessor(final BiConsumer<Vertex,Map<String,Object>> vertexProcessor){
  this.vertexProcessor=Optional.ofNullable(vertexProcessor);
  return extendingClass.cast(this);
}
","public T verplexCreatOR(final BiConsumer<Vertex,Map<String,Object>> verplexCreatOR){
  this.verplexCreatOR=Optional.ofNullable(verplexCreatOR);
  return extendingClass.cast(this);
}
",39,1,"vertexProcessor:verplexCreatOR,",36,0.32,ALERT
2938,"protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}","protected int loadblock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}",87,5,"readBlock:loadblock,",32,0.23,ALERT
2939,,,55,3,,1156,16.200351146856900,0
2940,"public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}","public void CompateMatrix(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}",471,22,"computeParameters:CompateMatrix,",80,0.9,ALERT
2941,"private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
","private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class module=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (module == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (module == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (module == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
",401,17,"type:module,",246,3.14,ALERT
2942,,,45,2,,801,12.024779339631400,0
2943,,,21,2,,787,7.039537735780080,0
2944,"@Override public void close() throws IOException {
  try {
    out.close();
  }
  finally {
    lockFile.delete();
  }
}
","@Override public void call() throws IOException {
  try {
    out.call();
  }
  finally {
    lockFile.delete();
  }
}
",29,1,"close:call,",34,0.25,ALERT
2945,"public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}
","public PlaLineInt transice_without(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.transice_without(p_vector);
  PlaPointInt new_b=point_b.transice_without(p_vector);
  return new PlaLineInt(new_a,new_b);
}
",52,4,"translate_by:transice_without,",41,0.56,ALERT
2946,"protected byte[] generateSalt(){
  return HEADER.getBytes(Constants.UTF8);
}","protected byte[] GenerateHash(){
  return HEADER.getBytes(Constants.UTF8);
}",19,1,"generateSalt:GenerateHash,",22,0.16,ALERT
2947,,,344,14,,4734,67.97685908476510,0
2948,"void rememberFactory(String host,RMISocketFactory factory){
synchronized (successTable) {
    while (hostList.size() >= MaxRememberedHosts) {
      successTable.remove(hostList.elementAt(0));
      hostList.removeElementAt(0);
    }
    hostList.addElement(host);
    successTable.put(host,factory);
  }
}","void storePort(String host,RMISocketFactory infixture){
synchronized (successTable) {
    while (hostList.size() >= MaxRememberedHosts) {
      successTable.remove(hostList.elementAt(0));
      hostList.removeElementAt(0);
    }
    hostList.addElement(host);
    successTable.put(host,infixture);
  }
}",64,3,"rememberFactory:storePort,factory:infixture,",52,0.36,ALERT
2949,"public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}
","public void pipe(Writer writer) throws Exception {
  writer.pipe(toString());
  writer.flush();
}
",26,2,"write:pipe,",37,0.29,ALERT
2950,,,66,5,,1633,17.609563787778200,0
2951,,,138,8,,2761,36.82169501781460,0
2952,"protected void transferFromFile(File idFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }","protected void transferUsingPage(File IDFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(IDFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }",72,3,"transferFromFile:transferUsingPage,idFile:IDFile,",59,0.53,ALERT
2953,"private ImageIcon addColor(ImageIcon icon,Color color){
  if (icon == null || color == null) {
    return icon;
  }
  BufferedImage newImage=new BufferedImage(icon.getIconWidth(),icon.getIconWidth(),BufferedImage.TYPE_INT_ARGB);
  Graphics g=newImage.getGraphics();
  g.setColor(color);
  g.drawImage(icon.getImage(),0,0,color,null);
  g.dispose();
  return new ImageIcon(newImage);
}","private ImageIcon setColor(ImageIcon picture,Color colour){
  if (picture == null || colour == null) {
    return picture;
  }
  BufferedImage newImage=new BufferedImage(picture.getIconWidth(),picture.getIconWidth(),BufferedImage.TYPE_INT_ARGB);
  Graphics g=newImage.getGraphics();
  g.setColor(colour);
  g.drawImage(picture.getImage(),0,0,colour,null);
  g.dispose();
  return new ImageIcon(newImage);
}",98,5,"icon:picture,color:colour,addColor:setColor,",151,1.17,ALERT
2954,"public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}","public static double and(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}",74,4,"max:and,",46,0.49,ALERT
2955,"public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}
","public void expl(String description,String[] baseAddress) throws BackupException {
  expl(description,baseAddress,null,null,null,false,false);
}
",33,3,"baseCommand:baseAddress,exec:expl,",60,0.54,ALERT
2956,,,65,4,,1489,15.897982116540300,0
2957,"private static Set<String> createCategoriesSet(Set<String> categories){
  Set<String> result=new HashSet<>();
  for (  String cat : categories) {
    result.add(StringUtil.toLowerCase(cat));
  }
  return result;
}
","private static Set<String> createCoresList(Set<String> Cannels){
  Set<String> category=new HashSet<>();
  for (  String cat : Cannels) {
    category.add(StringUtil.toLowerCase(cat));
  }
  return category;
}
",53,4,"result:category,createCategoriesSet:createCoresList,categories:Cannels,",121,1.17,ALERT
2958,"public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}
","public static synchronized void updateProduct(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}
",42,3,"indexDocument:updateProduct,",23,0.15,ALERT
2959,"@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
","@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extraras=new Bundle();
  extraras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extraras);
}
",70,3,"extras:extraras,",38,0.45,ALERT
2961,"public final V extractFirst(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}","public final V Extract1(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}",62,2,"extractFirst:Extract1,",29,0.24,ALERT
2962,,,85,3,,1144,7.926175777117410,0
2963,"public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}","public StrBuilder replace(int slice,boolean value){
  validateIndex(slice);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,slice,buffer,slice + 4,size - slice);
    buffer[slice++]='t';
    buffer[slice++]='r';
    buffer[slice++]='u';
    buffer[slice]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,slice,buffer,slice + 5,size - slice);
    buffer[slice++]='f';
    buffer[slice++]='a';
    buffer[slice++]='l';
    buffer[slice++]='s';
    buffer[slice]='e';
    size+=5;
  }
  return this;
}",159,5,"index:slice,insert:replace,",129,1.57,ALERT
2964,,,42,2,,739,9.1064847946167,0
2965,"private void drawHost(Graphics2D g2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      g2.setColor(rangeColor);
      g2.draw(coverage);
    }
  }
  if (drawConnections) {
    g2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  g2.setColor(hostColor);
  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    g2.setColor(highlightedNodeColor);
    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    g2.setColor(hostNameColor);
    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}","private void drawHost(Graphics2D game2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      game2.setColor(rangeColor);
      game2.draw(coverage);
    }
  }
  if (drawConnections) {
    game2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      game2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  game2.setColor(hostColor);
  game2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    game2.setColor(highlightedNodeColor);
    game2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    game2.setColor(hostNameColor);
    game2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}",396,12,"g2:game2,",81,0.71,ALERT
2966,"public static String expandHiddenDir(final String filename){
  final int macro=filename.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return filename;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=filename.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}","public static String expandHideDirectory(final String filename){
  final int macro=filename.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return filename;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=filename.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}",100,4,"expandHiddenDir:expandHideDirectory,",66,0.58,ALERT
2967,"@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
","@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedCassolution=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedCassolution.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedCassolution.add(expected);
  }
  doEncodeDecodeTest(expectedCassolution);
}
",131,3,"expectedSolutions:expectedCassolution,",74,0.74,ALERT
2968,"public NvpBuilder addRaw(final String name,final String value){
  npv.put(name,value);
  return this;
}
","public NvpBuilder addRaw(final String filename,final String value){
  npv.put(filename,value);
  return this;
}
",26,3,"name:filename,",37,0.3,ALERT
2969,"public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}","public InputBuilder<T> repeatTimes(int ts){
  List<T> toAppend=new ArrayList<>();
  for (int j=0; j < ts; j++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}",58,4,"times:ts,i:j,repeatAll:repeatTimes,",85,0.96,ALERT
2970,,,106,3,,1148,10.044914786020900,0
2971,"public static int parseString(String value){
  return Integer.parseInt(value);
}
","public static int seText(String function){
  return Integer.parseInt(function);
}
",18,2,"value:function,parseString:seText,",50,0.58,ALERT
2972,"public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}","public boolean isPDFLiense(){
  String ak=getSummary();
  return ak != null && ak.length() > 25;
}",27,2,"isPDFLicense:isPDFLiense,key:ak,",160,1.77,ALERT
2973,"public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
","public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runbability){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runbability);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runbability);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
",156,11,"runnable:runbability,",357,2.77,ALERT
2974,,,37,3,,1132,12.021281830469800,0
2975,"public Date(String date){
  String[] fields=date.split(""/"");
  if (fields.length != 3) {
    throw new IllegalArgumentException(""Invalid date"");
  }
  month=Integer.parseInt(fields[0]);
  day=Integer.parseInt(fields[1]);
  year=Integer.parseInt(fields[2]);
  if (!isValid(month,day,year))   throw new IllegalArgumentException(""Invalid date"");
}","public Date(String header){
  String[] fidetailseader.split(""/"");
  if (details.length != 3) {
    throw new IllegalArgumentException(""Invalid date"");
  }
  mmonthsInteger.parseInt(details[0]);
  dnoonInteger.parseInt(details[1]);
  ynInteger.parseInt(details[2]);
  if (!isValid(months,noon,n))   throw new IllegalArgumentException(""Invalid date"");
}",92,5,"date:header,fields:details,month:months,day:noon,year:n,",956,7.93,ALERT
2976,"public E take() throws InterruptedException {
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null)       available.await();
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
 else         if (leader != null)         available.await();
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            available.awaitNanos(delay);
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}","public E create() throws InterruptedException {
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null)       available.await();
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
 else         if (leader != null)         available.await();
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            available.awaitNanos(delay);
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}",199,8,"take:create,",61,0.99,ALERT
2978,"public void updateUI(){
  super.updateUI();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,""Label.border"");
  LookAndFeel.installColorsAndFont(this,""Label.background"",""Label.foreground"",""Label.font"");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);
  if (policy != null) {
    GUIUtils.restrictSize(this,policy);
  }
}","public void Updateui(){
  super.Updateui();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,""Label.border"");
  LookAndFeel.installColorsAndFont(this,""Label.background"",""Label.foreground"",""Label.font"");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);
  if (policy != null) {
    GUIUtils.restrictSize(this,policy);
  }
}",110,2,"updateUI:Updateui,",56,0.47,ALERT
2979,"private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}","private void schedelayBusiness(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}",58,5,"scheduleCommercial:schedelayBusiness,",34,0.3,ALERT
2980,"public void recordEndTime(){
  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());
  _log.info(""Request response time: {} ms"",msDiff);
  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);
  updateMinMaxReqRspMs(msDiff);
  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {
    _alertLog.warn(MessageFormat.format(""Request took an unusually long time to complete: {0}ms"",msDiff));
  }
  _currentRequestStartTime.remove();
}","public void recordEndMeasure(){
  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());
  _log.info(""Request response time: {} ms"",msDiff);
  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);
  updateMinMaxReqRspMs(msDiff);
  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {
    _alertLog.warn(MessageFormat.format(""Request took an unusually long time to complete: {0}ms"",msDiff));
  }
  _currentRequestStartTime.remove();
}",81,2,"recordEndTime:recordEndMeasure,",55,0.4,ALERT
2982,"public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}
","public static void setLong(long layer,short slice){
  if (UNALIGNED)   UNSAFE.setLong(layer,slice);
 else   putShortByByte(layer,slice,BIG_ENDIAN);
}
",36,3,"putShort:setLong,val:slice,addr:layer,",89,0.88,ALERT
2983,"private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}","private void accesBreakdownStitution(ArrayList<Instruction> INSTRUCTions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < INSTRUCTions.size(); i++) {
    Instruction currCh=INSTRUCTions.get(i);
    if (op == 0) {
      if (currCh instanceof MRJobInstruction) {
        MRJobInstructiocurrMRInstst=(MRJobInstruction)currCh;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction viewback=new BreakPointInstruction();
        viewbacknt.setLocation(currCh);
          viewback.setInstID(instID++);
          viewback.setBPInstructionLocation(location);
          INSTRUCTions.add(i,viewback);
          DMLBreakpointManager.insertBreakpoint(viewback,lineNumber);
          return;
        }
      }
 else       if (currCh instanceof CPInstruction || currCh instanceof SPInstruction) {
        if (currCh.getLineNum() == lineNumber) {
          BreakPointInstruction viewback=new BreakPointInstruction();
        viewbacknt.setLocation(currCh);
          viewback.setInstID(instID++);
          viewback.setBPInstructionLocation(location);
          INSTRUCTions.add(i,viewback);
          DMLBreakpointManager.insertBreakpoint(viewback,lineNumber);
          return;
        }
      }
 else       if (currCh instanceof BreakPointInstruction && currCh.getLineNum() == lineNumber) {
        BreakPointInstructioviewbacknt=(BreakPointInstruction)currCh;
        viewback.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        viewback.setBPInstructionLocation(location);
        INSTRUCTions.set(i,viewback);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currCh instanceof BreakPointInstruction && currCh.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstructioviewbacknt=(BreakPointInstruction)currCh;
        viewbacknt.setLocation(currCh);
        viewbacknt.setInstID(currCh.getInstID());
          viewback.setBPInstructionStatus(status);
          viewback.setBPInstructionLocation(location);
          INSTRUCTions.set(i,viewback);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          INSTRUCTions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}",378,10,"accesBreakpointInstruction:accesBreakdownStitution,instructions:INSTRUCTions,currInst:currCh,breakpoint:viewback,",434,5.01,ALERT
2984,"public SelectionInputDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){
  this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments);
  comboBox.setEditable(editable);
}
","public SelectionInputDialog(Window ow,String state,boolean leditance,T[] electionValues,T initialSllectedValue,InputValidator<T> inputArgator,Object... keyArgs){
  this(ow,state,electionValues,initialSllectedValue,inputArgator,keyArgs);
  comboBox.setEditable(leditance);
}
",54,7,"owner:ow,key:state,editable:leditance,selectionValues:electionValues,initialSelectionValue:initialSllectedValue,inputValidator:inputArgator,keyArguments:keyArgs,",1258,15.45,ALERT
2985,"public static List<INaviProject> loadProjects(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException {
  PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager);
  final CConnection connection=provider.getConnection();
  final List<INaviProject> projects=new ArrayList<>();
  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.PROJECTS_TABLE)) {
    return projects;
  }
  String query=""SELECT id, name, description, creation_date, modification_date, "" + "" (SELECT count(*) FROM "" + CTableNames.ADDRESS_SPACES_TABLE + "" WHERE project_id = ""+ CTableNames.PROJECTS_TABLE+ "".id) ""+ "" AS addressspace_count FROM ""+ CTableNames.PROJECTS_TABLE;
  try (ResultSet resultSet=connection.executeQuery(query,true)){
    while (resultSet.next()) {
      final int projectId=resultSet.getInt(""id"");
      final String name=PostgreSQLHelpers.readString(resultSet,""name"");
      final String description=PostgreSQLHelpers.readString(resultSet,""description"");
      final int addressSpaceCount=resultSet.getInt(""addressspace_count"");
      final Timestamp creationDate=resultSet.getTimestamp(""creation_date"");
      final Timestamp modificationDate=resultSet.getTimestamp(""modification_date"");
      final List<DebuggerTemplate> debuggers=PostgreSQLDatabaseFunctions.getAssignedDebuggers(connection,projectId,debuggerManager);
      projects.add(new CProject(projectId,name,description == null ? """" : description,creationDate,modificationDate,addressSpaceCount,debuggers,provider));
    }
  }
 catch (  final SQLException e) {
    throw new CouldntLoadDataException(e);
  }
  return new ArrayList<INaviProject>(projects);
}
","public static List<INaviProject> loadConstructed(final AbstractSQLProvider promide,final DebuggerTemplateManager DebuggerDirector) throws CouldntLoadDataException {
  PostgreSQLDatabaseFunctions.checkArguments(promide,DebuggerDirector);
  final CConnectiondocumentn=promide.getConnection();
  final List<INaviProject> people=new ArrayList<>();
  if (!PostgreSQLHelpers.hasTable(document,CTableNames.PROJECTS_TABLE)) {
    return people;
  }
  String record=""SELECT id, name, description, creation_date, modification_date, "" + "" (SELECT count(*) FROM "" + CTableNames.ADDRESS_SPACES_TABLE + "" WHERE project_id = ""+ CTableNames.PROJECTS_TABLE+ "".id) ""+ "" AS addressspace_count FROM ""+ CTableNames.PROJECTS_TABLE;
  try (ResultSet resultSet=document.executeQuery(record,true)){
    while (resultSet.next()) {
      final int subjectID=resultSet.getInt(""id"");
      final String version=PostgreSQLHelpers.readString(resultSet,""name"");
      final String exp=PostgreSQLHelpers.readString(resultSet,""description"");
      final int AddressspaceId=resultSet.getInt(""addressspace_count"");
      final Timestamp creationdate=resultSet.getTimestamp(""creation_date"");
      final Timestamp modicationDesign=resultSet.getTimestamp(""modification_date"");
      final List<DebuggerTemplate>debugterss=PostgreSQLDatabaseFunctions.getAssignedDebuggers(cdocumentpsubjectIDDebuggerDirector);
     peoples.add(new CProjectsubjectIDdversioneexpn == null ? """" :ecreationdateDmodicationDesignDateAddressspaceIdtdebugterss,promide));
    }
  }
 catch (  final SQLException e) {
    throw new CouldntLoadDataException(e);
  }
  return new ArrayList<INaviProject>(people);
}
",267,13,"loadProjects:loadConstructed,provider:promide,debuggerManager:DebuggerDirector,connection:document,projects:people,query:record,projectId:subjectID,name:version,description:exp,addressSpaceCount:AddressspaceId,creationDate:creationdate,modificationDate:modicationDesign,debuggers:debugters,",1127,10.5,ALERT
2986,"public void addIncludes(String[] definitions){
  addStrings(INCLUDES,definitions);
  addStrings(linker_more,INCLUDES,definitions);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
","public void removeSources(String[] defines){
  addStrings(INCLUDES,defines);
  addStrings(linker_more,INCLUDES,defines);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
",34,2,"definitions:defines,addIncludes:removeSources,",50,0.48,ALERT
2987,"public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean Interconnectments(final PlanetModel planetModel,final Plane iq,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(iq)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineParameterY=y * iq.z - z * iq.y;
  final double lineVectorY=z * iq.x - x * iq.z;
  final double lineVectorZ=x * iq.y - y * iq.x;
  if (Math.abs(lineParameterY) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * iq.z - this.z * iq.y;
  final double denomXZ=this.x * iq.z - this.z * iq.x;
  final double denomXY=this.x * iq.y - this.y * iq.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * iq.z - this.z * -iq.D) * denom;
    z0=(this.y * -iq.D + this.D * iq.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * iq.z - this.z * -iq.D) * denom;
    y0=0.0;
    z0=(this.x * -iq.D + this.D * iq.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * iq.y - this.y * -iq.D) * denom;
    y0=(this.x * -iq.D + this.D * iq.x) * denom;
    z0=0.0;
  }
  final double A=lineParameterY * lineParameterY * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineParameterY * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineParameterY * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineParameterY * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineParameterY * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",1041,18,"q:iq,lineVectorX:lineParameterY,intersects:Interconnectments,",592,7.05,ALERT
2988,,,615,5,,1467,15.18697688182200,0
2989,"public static boolean isRegistered(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}
","public static boolean hasKnown(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}
",25,2,"isRegistered:hasKnown,",16,0.18,ALERT
2990,"public void addRun(final Run run){
  runs.add(run);
  run.setId(runIdCounter++);
}
","public void AddRunner(final Run dir){
  runs.add(dir);
  dir.setId(runNumberCounter++);
}
",25,3,"addRun:AddRunner,run:dir,runIdCounter:runNumberCounter,",402,3.35,ALERT
2991,"public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}
","public static void server(InputStream is,Resource block,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(block.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  server(is,os,closeIS,true);
}
",65,5,"out:block,copy:server,",74,0.66,ALERT
2992,"public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
","public Result doCompareCompareUnit(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
",194,12,"doComparisonTest:doCompareCompareUnit,",55,0.52,ALERT
2993,"private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}","private static int createPackedCompPar(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}",76,3,"createPackedParams:createPackedCompPar,",32,0.43,ALERT
2994,,,121,6,,2144,21.693817067146300,0
2995,"public void testAndNotNegNegFirstLonger(){
  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.andNot(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void testAndNotNegativeOrGreata(){
  byte aWords[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bYears[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSize=-1;
  int bInt=-1;
  byte rbLS[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};
  BigInteger aZero=new BigInteger(aSize,aWords);
  BigIntegerbCounterr=new BigInteger(bInt,bYears);
  BigIntegerget=aZero.andNot(bCounter);
  bytresultValueses[]=new byte[rbLS.length];
  resBytes=ge.toByteArray(resultValuesytes=ge.toByteArray();
  for (int i=0;indexi < indexesultValues.length; index++) {
    assertTruresultValueseindex[i] == rbLS[index]);
  }
  assertEquals(""incorrect sign"",1,ge.signum());
}",240,11,"testAndNotNegNegFirstLonger:testAndNotNegativeOrGreata,aBytes:aWords,bBytes:bYears,aSign:aSize,bSign:bInt,rBytes:rbLS,aNumber:aZero,bNumber:bCounter,result:ge,resBytes:resultValues,i:index,",2230,22.85,ALERT
2996,"@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String string,@NotNull String... prefixes){
  int offset=0;
  for (  String prefix : prefixes) {
    int prefixLen=prefix.length();
    if (!string.regionMatches(offset,prefix,0,prefixLen)) {
      return false;
    }
    offset+=prefixLen;
  }
  return true;
}","@Contract(pure=true) public static boolean startsWithConatatenication(@NotNull String uri,@NotNull String... prefixs){
  int length=0;
  for (  Stringoptionx : prefixs) {
    int prefixlen=option.length();
    if (!uri.regionMatches(length,option,0,prefixlen)) {
      return false;
    }
    length+=prefixlen;
  }
  return true;
}",76,6,"startsWithConcatenation:startsWithConatatenication,string:uri,prefixes:prefixs,offset:length,prefix:option,prefixLen:prefixlen,",511,6.01,ALERT
2997,"private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}","private final Object internalRease(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}",588,23,"internalReplace:internalRease,",126,2.08,ALERT
2998,"public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){
  String categoryId=request.getParameter(""category_id"");
  ShoppingCart cart=getCartObject(request);
  Delegator delegator=(Delegator)request.getAttribute(""delegator"");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute(""dispatcher"");
  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);
  String controlDirective;
  Map<String,Object> result;
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  String catalogId=CatalogWorker.getCurrentCatalogId(request);
  result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap);
  controlDirective=processResult(result,request);
  if (controlDirective.equals(ERROR)) {
    return ""error"";
  }
 else {
    return ""success"";
  }
}
","public static String addToProductBasket(HttpServletRequest controller,HttpServletResponse report){
  String catategoryDatantroller.getParameter(""category_id"");
  ShoppingCart carcetCartObject(controller);
  Delegator deldeplominatorelegator)controller.getAttribute(""delegator"");
  LocalDispatcher disdispatterocalDispatcher)controller.getAttribute(""dispatcher"");
  ShoppingCartHelper cartHelp=new ShoppingCartHelpedeplominatorodispatterer,ce);
  String controlMassiv;
  Map<String,Object> success;
  Map<String,Object> parParamSetilHttp.getParameterMap(controller);
  String catcartalogueNametalogWorker.getCurrentCatalogId(controller);
  resusuccesstHecartHelpProductBasket(ccartalogueNameategoryData,ParamSet);
  concontrolMassivocessResult(ressuccessntroller);
  if (controlMassiv.equals(ERROR)) {
    return ""error"";
  }
 else {
    return ""success"";
  }
}
",148,12,"addToCartBulk:addToProductBasket,request:controller,response:report,categoryId:ategoryData,cart:ce,delegator:deplominator,dispatcher:dispatter,cartHelper:cartHelp,controlDirective:controlMassiv,result:success,paramMap:ParamSet,catalogId:cartalogueName,",3121,31.18,ALERT
2999,"private void showPreloadingStage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}
","private void showpreLoadingChannel(){
  Stage relearningStage=new Stage(StageStyle.UNDECORATED);
  relearningStage.initOwner(primaryStage);
  relearningStage.setScene(new PreloadingScene());
  relearningStage.show();
  primaryStage.setOnShowing(null);
}
",48,2,"showPreloadingStage:showpreLoadingChannel,preloadingStage:relearningStage,",340,2.59,ALERT
3000,"public void push(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
","public void deploy(Notification NOTifier,NotificationResponseListener newend){
  final String notificationTopic=NOTifier.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request queue=Utils.buildRequest(client,topic,NOTifier,gateway);
  semaphore.acquireUninterruptibly();
  queue.send(new ResponseListener(semaphore,NOTifier,newend));
}
",71,6,"notification:NOTifier,listener:newend,req:queue,push:deploy,",192,1.76,ALERT
3001,"public byte[] generateSignature() throws CryptoException, DataLengthException {
  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);
  if (sLen != 0) {
    random.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);
  }
  byte[] h=new byte[hLen];
  contentDigest.update(mDash,0,mDash.length);
  contentDigest.doFinal(h,0);
  block[block.length - sLen - 1- hLen- 1]=0x01;
  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);
  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);
  for (int i=0; i != dbMask.length; i++) {
    block[i]^=dbMask[i];
  }
  block[0]&=(0xff >> ((block.length * 8) - emBits));
  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);
  block[block.length - 1]=trailer;
  byte[] b=cipher.processBlock(block,0,block.length);
  clearBlock(block);
  return b;
}","public byte[] generuteSignig() throws CryptoException, BufferLengthException {
  contentDigest.doFinal(mDash,mDash.type - hLength - slen);
  if (slen != 0) {
    random.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.type - slen,slen);
  }
  byte[] hs=new byte[hLength];
  contentDigest.update(mDash,0,mDash.type);
  contentDigest.doFinal(hs,0);
  out[out.type - slen - 1- hLength- 1]=0x01;
  System.arraycopy(salt,0,out,out.type - slen - hLength- 1,slen);
  byte[]bcMaskk=maskGeneratorFunction1(hs,0,htypeth,out.type - hLength - 1);
  for (inend i=0end i !bcMasksk.type; end++) {
    out[end]^=bcMask[end];
  }
  out[0]&=(0xff >> ((out.type * 8) - emBits));
  System.arraycopy(hs,0,out,out.type - hLength - 1,hLength);
  out[out.type - 1]=trailer;
  bebte[] b=cipher.processBlock(out,0,out.type);
  clearBlock(out);
  return eb;
}",267,10,"generateSignature:generuteSignig,DataLengthException:BufferLengthException,h:hs,block:out,length:type,sLen:slen,hLen:hLength,dbMask:bcMask,i:end,b:eb,",2047,20.93,ALERT
3002,"public void findPackageAndClass() throws IOException {
  packageName=null;
  className=null;
  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));
  try {
    while (className == null || packageName == null) {
      String line=reader.readLine();
      if (line == null)       break;
      if (packageName == null) {
        Matcher matcher=PACKAGE_PATTERN.matcher(line);
        if (matcher.find()) {
          packageName=matcher.group(1);
        }
      }
      if (className == null) {
        Matcher matcher=CLASS_PATTERN.matcher(line);
        if (matcher.find()) {
          className=matcher.group(1);
        }
      }
    }
    if (className == null) {
      className=""Yylex"";
    }
  }
  finally {
    reader.close();
  }
}","public void findPackageOrName() throws IOException {
  packageName=null;
  className=null;
  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));
  try {
    while (className == null || packageName == null) {
      String line=reader.readLine();
      if (line == null)       break;
      if (packageName == null) {
        Matcher matcher=PACKAGE_PATTERN.matcher(line);
        if (matcher.find()) {
          packageName=matcher.group(1);
        }
      }
      if (className == null) {
        Matcher matcher=CLASS_PATTERN.matcher(line);
        if (matcher.find()) {
          className=matcher.group(1);
        }
      }
    }
    if (className == null) {
      className=""Yylex"";
    }
  }
  finally {
    reader.close();
  }
}",157,6,"findPackageAndClass:findPackageOrName,",51,1.01,ALERT
3003,"public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);
  return results;
}","public int[] breadThFirstFind(int intinitialvalue,IBFSTraversable<N> traVERSal,int FirstIndex,IIntegerBfsNextValueIterator<N> nextKeyIter,List<Integer> ssSourcesLength){
  int[] i=new int[nodes.length];
  Arrays.fill(resuiinitialvalue);
  boolean[] alviouslyScant=new boolean[nodes.length];
  Arrays.fill(alviouslyScant,false);
  Set<Integer> curcurrentNumsOrderw HashSet<>(ssSourcesLength);
  iterativeIntegerBreadthFirsi(alviouslyScantycurrentNumsOrderdesIndeFirstIndexue,0,traVERSal,nextKeyIter);
  return i;
}",110,9,"breadthFirstSearch:breadThFirstFind,intialValue:intinitialvalue,traversable:traVERSal,firstValue:FirstIndex,nextValueIterator:nextKeyIter,sourcesIndex:ssSourcesLength,results:i,alreadyScanned:alviouslyScant,currentNodesIndex:currentNumsOrder,",481,8.58,ALERT
3006,,,15,1,,452,4.19468990166982,0
3007,"private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}","private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T email : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(email))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",email);
      throw x;
    }
    try {
      migration.migrate(email);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",email);
      throw x;
    }
    migrated++;
  }
  return migrated;
}",104,4,"entity:email,",48,0.32,ALERT
3008,"public void resetSingleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}","public void resetsingly(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}",86,3,"resetSingleton:resetsingly,",55,0.38,ALERT
3009,"public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){
  return parentName;
}
","public String resolveParentRelationsrelationPath(String parentName,Object model,String childName,Object ref){
  return parentName;
}
",21,5,"resolveParentRelationName:resolveParentRelationsrelationPath,parent:model,child:ref,",171,1.4,ALERT
3010,"public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}","public final static int caculateInSampleSize(BitmapFactory.Options self,int RqWh,int rqsH){
  final int height=self.outHeight;
  final int width=self.outWidth;
  int inSampleSize=1;
  if (RqWh == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > RqWh) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)RqWh);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}",116,9,"options:self,rqsW:RqWh,",89,0.97,ALERT
3011,"private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
","private Map<URI,ExportMask> createExportMarkTable(Set<URI> placedMatunks){
  Map<URI,ExportMask> exportMarkObject=new HashMap<>();
  Iterator<ExportMask> exremoteMarkParserbClient.queryIterativeObjects(ExportMask.class,placedMatunks,true);
  while (remoteMarkParser.hasNext()) {
    ExportMasnativemasksk=remoteMarkParser.next();
    exportMarkObject.put(nativemask.getId(),nativemask);
  }
  return exportMarkObject;
}
",86,5,"createExportMaskMap:createExportMarkTable,placedMasks:placedMatunks,exportMaskMap:exportMarkObject,exportMaskIterator:remoteMarkParser,exportMask:nativemask,",272,3.51,ALERT
3012,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}","private void readClass(ObjectInputStream exec) throws IOException, ClassNotFoundException {
  exec.defaultReadObject();
  i14N=Environment.getI18n();
  beanContextChildAccess=new BeanContextChildSupport(this);
}",35,4,"readObject:readClass,in:exec,i18n:i14N,beanContextChildSupport:beanContextChildAccess,",147,1.05,ALERT
3013,"public synchronized void addRecentItem(T item){
  item=fromString(toString(item));
  if (m_RecentItems.size() > 0) {
    if (item.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(item);
  m_RecentItems.add(0,item);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(item);
}","public synchronized void addRecentItems(T source){
  source=fromString(toString(source));
  if (m_RecentItems.size() > 0) {
    if (source.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(source);
  m_RecentItems.add(0,source);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(source);
}",106,2,"item:source,addRecentItem:addRecentItems,",62,0.47,ALERT
3014,"public JSONObject remove(String name){
  if (name == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.remove(index);
    names.remove(index);
    values.remove(index);
  }
  return this;
}","public JSONObject replace(String name){
  if (name == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.replace(index);
    names.replace(index);
    values.replace(index);
  }
  return this;
}",65,3,"remove:replace,",44,0.62,ALERT
3015,"@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(left,leftBound),rightBound);
}","@Override public int clampViewPosVertically(View children,int below,int desc){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftMin=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int thirdBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(below,leftMin),thirdBound);
}",75,6,"clampViewPositionHorizontal:clampViewPosVertically,child:children,left:below,dx:desc,leftBound:leftMin,rightBound:thirdBound,",362,4.36,ALERT
3016,"public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}","public Pair<String,String> next(){
  try {
    currentLineLocation=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}",149,8,"currentHeaderPosition:currentLineLocation,",47,0.46,ALERT
3017,"public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}
","public synchronized void readMovie(final Image iframe,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(iframe,totalDuration));
}
",32,4,"image:iframe,addFrame:readMovie,",71,0.51,ALERT
3018,"private static void createOrgAuthConfig(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}","private static void createOrgauthconfig(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}",398,13,"createOrgAuthConfig:createOrgauthconfig,",80,0.66,ALERT
3019,,,41,3,,843,9.457158148288730,0
3020,"public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}","public static DoubleVector rnorm(int size,double dist,double std,Random image){
  if (std < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd std 0.0)   return new DoubleVector(size,dist);
  DoubleVector v=nVw DoubleVector(size);
  for (int i=0chi i <chisize; chi++)   V.set(chi,(rimagenextGaussian() + dist) / std);
  return V;
}",92,7,"n:size,mean:dist,sd:std,random:image,v:V,i:chi,",393,4.62,ALERT
3021,"public void stop(){
synchronized (privateInstanceLock) {
    if (connectionAcceptThread == null) {
      return;
    }
  }
  isStopped.set(true);
  try {
    connectionAcceptThread.interrupt();
    connectionAcceptThread.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}
","public void Stop(){
synchronized (privateInstanceLock) {
    if (connectionAcceptThread == null) {
      return;
    }
  }
  isStopped.set(true);
  try {
    connectionAcceptThread.interrupt();
    connectionAcceptThread.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}
",68,1,"stop:Stop,",31,0.25,ALERT
3022,,,277,13,,4491,41.117741004626000,0
3023,,,21,1,,425,2.6614468534787500,0
3024,,,29,3,,1125,9.823928018411000,0
3025,,,16,2,,789,6.770655767122900,0
3026,"public void actionPerformed(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
","public void actionPerformed(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem ai=(JMenuItem)source;
  String name=ai.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message(""defaultdndcatcher"",""ERROR> DefaultDnDCatcher::actionPerformed: "" + ""no layer found with name "" + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}
",106,6,"mi:ai,",100,1.12,ALERT
3027,"protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}","protected void findCandidatecrosses(S2Point an,S2Point eb,List<Integer> candidatecrossINGS){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> covered=Lists.newArrayList();
  getCovering(an,eb,false,covered);
  Set<Integer> cludeBlock=new HashSet<Integer>();
  getEdgesInParentCells(covered,cludeBlock);
  getEdgesInChildrenCells(an,eb,covered,cludeBlock);
  candidatecrossINGS.clear();
  candidatecrossINGS.addAll(cludeBlock);
}",93,6,"findCandidateCrossings:findCandidatecrosses,a:an,b:eb,candidateCrossings:candidatecrossINGS,cover:covered,uniqueSet:cludeBlock,",506,7.74,ALERT
3028,"private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){
  Set<String> removeSet=new HashSet<String>();
  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);
  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();
  for (  String swcDependLocation : dependencyMap.get(swcLocation)) {
    for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) {
      if (swcDependLocation.equals(swcDependLocation2))       continue;
      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);
      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);
      if (externalScripts == null) {
        externalScripts=externalInfo.getExternalScripts(swcDependLocation);
        externalsBySwc.put(swcDependLocation,externalScripts);
      }
      if (externalScripts2 == null) {
        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);
        externalsBySwc.put(swcDependLocation2,externalScripts2);
      }
      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {
        removeSet.add(swcDependLocation);
        break;
      }
    }
  }
  Set<String> dependencySet=dependencyMap.get(swcLocation);
  dependencySet.removeAll(removeSet);
}","private static void removeDependencySegset(String swcDirectory,Map<String,Set<String>> dependensionModule,SwcDependencyInfoImpl depInf){
  Set<String> updateList=new HashSet<String>();
  SwcExternalScriptInfo externalInfo=ddepInfgetSwcExternalScriptInfo(swcDirectory);
  Map<String,Set<String>> externalsBySwm=new HashMap<String,Set<String>>();
  for (  String swcDepswcDependLocationpendensionModuleget(swcDirectory)) {
    for (    String swcDepswcDependentlocation4pendensionModuleget(swcDirectory)) {
      if (swcDependLocation.equals(swcDependentlocation4))       continue;
      Set<String> externalScriptn=externalsBySwm.get(swcDependLocation);
      Set<String> extexternalScriptences2ternalsBySwm.get(swcDependentlocation4);
      if (externalScriptn == null) {
        externalScriptn=externalInfo.getExternalScripts(swcDependLocation);
        externalsBySwm.put(swcDependLocation,externalScriptn);
      }
      if (externalScriptences2 == null) {
        extexternalScriptences2ternalInfo.getExternalScripts(swcDependentlocation4);
        externalsBySwm.put(swcDependentlocation4,externalScriptences2);
      }
      if (externalScriptences2.size() > externalScriptn.size() && externalScriptences2.containsAll(externalScriptn)) {
        updateList.add(swcDependLocation);
        break;
      }
    }
  }
  Set<String> dependprovensionTypendensionModuleget(swcDirectory);
  dprovensionTyperemoveAll(updateList);
}",241,12,"removeDependencySubsets:removeDependencySegset,swcLocation:swcDirectory,dependencyMap:dependensionModule,depInfo:depInf,removeSet:updateList,externalsBySwc:externalsBySwm,swcDependLocation2:swcDependentlocation4,externalScripts:externalScriptn,externalScripts2:externalScriptences2,dependencySet:provensionType,",1329,14.84,ALERT
3029,"public Iterator<String> iterateSerializers(){
  return serializers.iterator();
}
","public Iterator<String> iterateserializations(){
  return serializers.iterator();
}
",17,1,"iterateSerializers:iterateserializations,",26,0.24,ALERT
3030,"private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
","private double Roison(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
",34,2,"Poisson:Roison,",50,0.43,ALERT
3031,"public static RequestLog dump(){
  RequestLog current=RLOG.get();
  RequestLog copy=new RequestLog(current);
  current.clear();
  RLOG.remove();
  return copy;
}
","public static RequestLog dump(){
  RequestLog list=RLOG.get();
  RequestLog copy=new RequestLog(list);
  list.clear();
  RLOG.remove();
  return copy;
}
",41,3,"current:list,",38,0.28,ALERT
3033,"default B with(String key,long value){
  return with(key,Long.toString(value));
}
","default B of(String key,long value){
  return of(key,Long.toString(value));
}
",25,3,"with:of,",39,0.38,ALERT
3034,,,29,4,,1470,13.376745585600500,0
3035,"private static void logOsInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
","private static void logOSInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
",89,1,"logOsInfo:logOSInfo,",26,0.4,ALERT
3036,,,52,3,,545,6.137735160191850,0
3037,,,120,11,,2268,31.376508871714300,0
3038,"private static void encode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}","private static void encode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int groups=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       groups|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       groups|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       groups|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        groups|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.groups();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) groups|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) groups|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) groups|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) groups|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)groups);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}",588,12,"flags:groups,",174,1.87,ALERT
3039,,,37,2,,811,5.92346320549647,0
3040,"default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}
","default ByteBuffer erialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  erialize(value,buffer);
  return buffer;
}
",32,3,"serialize:erialize,",36,0.25,ALERT
3041,,,94,4,,1321,11.687164624532100,0
3042,"private boolean isIndexable(String term){
  return (term.length() < 30) && (term.length() > 2);
}","private boolean isStringing(String pattern){
  return (pattern.length() < 30) && (pattern.length() > 2);
}",30,2,"term:pattern,isIndexable:isStringing,",58,0.61,ALERT
3043,"private int decodeRunLength(int k){
  if ((k & 1) == 1) {
    return ((k >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;
  }
}","private int decodeRunninglength(int i){
  if ((i & 1) == 1) {
    return ((i >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(i << p + (31 - sp)) + 1;
  }
}",57,2,"decodeRunLength:decodeRunninglength,k:i,",52,0.56,ALERT
3044,"public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
","public String fullForm(final String ext,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(ext);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (ext.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
",92,6,"str:ext,",51,0.53,ALERT
3045,,,71,4,,1381,11.038619979222600,0
3046,"public void cleanStart(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  conn=null;
}","public void cleanStart(){
  Connection nc=getConnection(true,true);
  if (nc == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(nc);
  createUser(nc);
  createDatabase(nc);
  try {
    if (nc != null)     nc.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  nc=null;
}",84,2,"conn:nc,",41,0.56,ALERT
3047,"public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}","public void testFilteredClassifier(){
  Instances test;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    test=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(test);
    for (i=0; i < test.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(test.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}",88,3,"data:test,",73,1.03,ALERT
3048,,,182,2,,368,6.22236917813619,0
3049,,,175,9,,2534,49.45428366661070,0
3050,"public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}","public final void readInFile(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  endPosition=TextIO.readFEN(dis.readUTF());
  curcurrentPosw Position(endPosition);
  dateControl=dis.readUTF();
  if (version >= 2) {
    whiteEventCtrl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteEventCtrl=""?"";
    blackTimeControl=""?"";
  }
  int pTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < pTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootPage=new Node();
  Node.readInFile(dis,rootPage);
  reportedNode=rootPage;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}",251,22,"readFromStream:readInFile,startPos:endPosition,timeControl:dateControl,whiteTimeControl:whiteEventCtrl,nTags:pTags,rootNode:rootPage,currentNode:reportedNode,",840,5.73,ALERT
3051,"public Shape chartToScreenShape(Shape s){
  GeneralPath p=new GeneralPath();
  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());
  if (currentTransform != null) {
    inverse.concatenate(currentTransform);
  }
  p.append(s.getPathIterator(inverse),false);
  return p;
}
","public Shape transformtoScreenStruct(Shape i){
  GeneralPath p=new GeneralPath();
  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());
  if (currentTransform != null) {
    inverse.concatenate(currentTransform);
  }
  p.append(i.getPathIterator(inverse),false);
  return p;
}
",65,4,"s:i,chartToScreenShape:transformtoScreenStruct,",59,0.49,ALERT
3052,"protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}","protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m__runningData=new Instances(m_cancopys,0);
    return;
  }
  if (m_cancopys.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_cancopys,0);
    int count=0;
    for (int di=sortedIndexes.length - 1; count < m_numClustersRequested; di--) {
      finalCanopies.add(m_cancopys.instance(sortedIndexes[di]));
      count++;
    }
    m_cancopys=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int di=sortedIndexes.length - 1; count < finalCanopies.numInstances(); di--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[di]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[di]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[di]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_cancopys.numInstances() < m_numClustersRequested && m__runningData != null && m__runningData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int di=0; di < 10; di++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int di=0; di < m_cancopys.numInstances(); di++) {
      try {
        hk=new DecisionTableHashKey(m_cancopys.instance(di),m_cancopys.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m__runningData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m__runningData.instance(instIndex),m__runningData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m__runningData.instance(instIndex);
        m_cancopys.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m__runningData.swap(j,instIndex);
      if (m_cancopys.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m__runningData=new Instances(m_cancopys,0);
}",639,15,"i:di,m_canopies:m_cancopys,m_trainingData:m__runningData,",166,2.2,ALERT
3054,"public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentConstraints) {
    if (argConstraint instanceof F2A) {
      assignmentAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentAfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);
  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);
}","public ConstraintMap createAssignmentConstits(final AnnotatedTypeMirror assliedto,final AnnotatedTypeMirror boxtedreturnTypes,final AnnotatedExecutableType memberType,final Set<AFConstraint> afArgumentConStruments,final Map<TypeVariable,AnnotatedTypeMirror> inferenceJs,final Set<TypeVariable> tasets,final AnnotatedTypeFactory valueFactory){
  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : memberType.getTypeVariables()) {
    final TypeVariable to=typeParam.getUnderlyingType();
    final AnnotatedTypeMiinferTydType=inferenceJs.get(to);
    if (inferTy != null) {
      assignmentAfs.add(new A2F(inferTy,typeParam.getUpperBound()));
      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferTy));
    }
 else {
      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint aargConstraint: afArgumentConStruments) {
    if (argConstraint instanceof F2A) {
      assignmentAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConStrTS=new LinkedList<>();
  for (  AFConstraint afConstant : assignmentAfs) {
   substitutedAssignmentConStrTSs.addafConstantt.substitute(inferenceJs));
  }
  final AnnotatedTypeMirror ssubstitutablereturnPointTypeArgInferenceUtil.substitute(ininferenceJsoxtedreturnTypes);
 substitutedAssignmentConStrTSs.add(new F2AsubstitutablereturnPointe,assliedto));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraintsvalueFactoryy,reducedConstraintssubstitutedAssignmentConStrTSs,tasets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,tasets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,tasets,true,valueFactory);
  return constraintMapBuilder.build(tasets,tuAssignmentConstraints,valueFactory);
}",318,17,"createAssignmentConstraints:createAssignmentConstits,assignedTo:assliedto,boxedReturnType:boxtedreturnTypes,methodType:memberType,afArgumentConstraints:afArgumentConStruments,inferredArgs:inferenceJs,targets:tasets,typeFactory:valueFactory,target:to,inferredType:inferTy,substitutedAssignmentConstraints:substitutedAssignmentConStrTS,afConstraint:afConstant,substitutedReturnType:substitutablereturnPoint,",1882,17.93,ALERT
3055,,,50,2,,645,4.8430054664611800,0
3056,"public int onBlockExploded(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}","public int onBlockexplided(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}",27,1,"onBlockExploded:onBlockexplided,",22,0.22,ALERT
3057,,,16,1,,433,3.6118099888165800,0
3058,"private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}","private P filterLargeValuesites(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}",161,12,"filterLargeValueSets:filterLargeValuesites,",218,1.81,ALERT
3059,,,25,2,,811,6.341527990500130,0
3060,,,46,3,,1149,8.570508793989820,0
3061,,,1031,18,,4544,56.07508213122690,0
3062,"@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + listener);
  }
  notifBroadcaster.removeNotificationListener(listener);
}
","@Override public void removeNotificationListener(NotificationListener noten) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + noten);
  }
  notifBroadcaster.removeNotificationListener(noten);
}
",50,2,"listener:noten,",38,0.3,ALERT
3063,,,45,4,,718,7.489541327953340,0
3064,,,63,4,,1498,20.541659919420900,0
3065,"static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}
","static public void create(String input,String output,String packFileName){
  create(new Settings(),input,output,packFileName);
}
",30,4,"process:create,",40,0.27,ALERT
3066,"private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}","private void createBlockmirrorsInfo(String image,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(image + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}",150,9,"name:image,createBlockMirrorData:createBlockmirrorsInfo,",83,0.79,ALERT
3067,"private void initializeLayout(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}","private void initialateLi(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}",116,2,"initializeLayout:initialateLi,",59,0.54,ALERT
3068,,,12,1,,400,3.448815186818440,0
3069,,,59,5,,819,6.243663386503860,0
3070,"private void resetShapeBounds(){
  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;
  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}","private void resetSquareFBox(){
  RoundRectangle2D.Double Runt=(RoundRectangle2D.Double)shape;
  Runt.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}",48,2,"resetShapeBounds:resetSquareFBox,rrect:Runt,",143,1.2,ALERT
3073,,,28,2,,783,15.973141233126300,0
3074,"public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
","public JSONObject asJSONson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.asJSONson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
",70,4,"toJson:asJSONson,",43,0.35,ALERT
3075,"public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}
","public void replace(ClassNode core,int n){
  remove(n);
  push(core);
}
",22,3,"type:core,",37,0.27,ALERT
3076,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void create(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.create(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",97,5,"build:create,",130,1.07,ALERT
3077,"public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){
  Collection<T> newCollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : mutableCollection) {
    newCollection.add(Utils.makeImmutable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}
","public static <T>Collection<T> createImmuable(Collection<T> cmutableContainer){
  Collection<T> onlycollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)cmutableContainer.getClass();
    onlycollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : cmutableContainer) {
    onlycollection.add(Utils.createImmuable(element));
  }
  return Collections.unmodifiableCollection(onlycollection);
}
",110,5,"newCollection:onlycollection,mutableCollection:cmutableContainer,makeImmutable:createImmuable,",157,1.35,ALERT
3078,"private void applyL1Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}","private void applyL4Register(final double eta_t,Vec t){
  if (lambda1 > 0) {
    l127U+=eta_t * lambda1;
    for (int q=0; q < ws.length; q++) {
      final Vec w_k=ws[q];
      final double[] l1Qpok=l1Q[q];
      for (      IndexValue ov : t) {
        final int bi=ov.getIndex();
        final double zznw_k.get(bi);
        double newGW_k=0;
        if (z > zn)         newW_newGW_k.max(0,z - znl127U + l1Qpok[bi]));
 else         if (z < zn)         newW_newGW_k.min(0,z + znl127U - l1Qpok[bi]));
        l1Qpok[bi]+=(nnewGW_k- zn);
        w_k.set(bi,newGW_k);
      }
    }
  }
}",173,11,"applyL1Reg:applyL4Register,x:t,l1U:l127U,k:q,l1Q_k:l1Qpok,iv:ov,i:bi,z:zn,newW_i:newGW_k,",470,3.73,ALERT
3079,,,431,25,,8604,87.23464699586230,0
3080,,,19,1,,434,4.417955327034000,0
3081,"public static boolean pointOutsidePrefSize(JTable table,int row,int column,Point p){
  if (table.convertColumnIndexToModel(column) != 0 || row == -1) {
    return true;
  }
  TableCellRenderer tcr=table.getCellRenderer(row,column);
  Object value=table.getValueAt(row,column);
  Component cell=tcr.getTableCellRendererComponent(table,value,false,false,row,column);
  Dimension itemSize=cell.getPreferredSize();
  Rectangle cellBounds=table.getCellRect(row,column,false);
  cellBounds.width=itemSize.width;
  cellBounds.height=itemSize.height;
  assert (p.x >= cellBounds.x && p.y >= cellBounds.y);
  return p.x > cellBounds.x + cellBounds.width || p.y > cellBounds.y + cellBounds.height;
}","public static boolean isOutsideAppFit(JTable table,int row,int model,Point fp){
  if (table.convertColumnIndexToModel(model) != 0 || row == -1) {
    return true;
  }
  TableCellRenderertcrr=table.getCellRenderer(row,model);
  Objectvaluee=table.getValueAt(row,model);
  Componentfieldltcrr.getTableCellRendererComponent(tablevaluee,false,false,row,model);
  Dimension iitemSizefield.getPreferredSize();
  RectanglecellKasess=table.getCellRect(row,model,false);
  cellKases.width=itemSize.width;
  cellKases.margin=itemSize.margin;
  assert (fp.x >= ccellKasesx && fp.y >= cellKases.y);
  return fp.x > ccellKasesx + ccellKasewidthh || fp.y > cellKases.y + cellKases.margin;
}",167,12,"pointOutsidePrefSize:isOutsideAppFit,column:model,p:fp,cell:field,cellBounds:cellKases,height:margin,",523,7.54,ALERT
3082,,,29,3,,881,12.173720037937200,0
3083,"synchronized boolean release(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
","synchronized boolean stop(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
",41,3,"release:stop,",32,0.65,ALERT
3084,"public ImmutableArray2<K> insert(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}","public ImmutableArray2<K> insert(int index,K slice){
  int dy=length + 1;
  intNewlenn=dy;
  boolean extractble;
  if (index == dy - 1) {
    AtomicBoolean fn=canExtend;
    if (fn != null) {
      canExtend=null;
      if (adatabaselength > index && fn.getAndSet(false)) {
        ardatabasendex]=slice;
        return new ImmutableArray2<K>databasey,dy,true);
      }
    }
    extractble=true;
   Newlenn=dy + 4;
  }
 else {
    extractble=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[Newlen];
  DataUtils.copyWithGap(database,a2,length,index);
  a2a2ndex]=slice;
  return new ImmutableArray2<K>a22,dy,extractble);
}",167,10,"obj:slice,len:dy,newLen:Newlen,extendable:extractble,x:fn,array:database,",458,5.85,ALERT
3085,,,24,3,,1124,9.431612761815390,0
3086,,,69,5,,765,6.793584605058030,0
3087,,,51,3,,1001,12.22677128314970,0
3088,"public static double powQuick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
","public static double poddSlow(double values,double scale){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(values,scale) : Math.pow(values,scale);
  }
  return FastMath.exp(scale * FastMath.logQuick(values));
}
",55,3,"value:values,power:scale,powQuick:poddSlow,",93,2.33,ALERT
3089,,,225,2,,784,9.331748243172960,0
3090,"public final synchronized byte[] toByteArray(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toByteArray();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}","public final synchronized byte[] toCharString(){
  ByteArrayOutputStream taOs=null;
  DataOutputStream boards=null;
  try {
    taOs=new ByteArrayOutputStream(32768);
    boards=new DataOutputStream(taOs);
    game.writeToStream(boards);
    boards.flush();
    return btaOstoCharString();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (boards != null)     try {
      boards.close();
    }
 catch (    IOException ex) {
    }
    if (taOs != null)     try {
      taOs.close();
    }
 catch (    IOException ex) {
    }
  }
}",117,3,"toByteArray:toCharString,baos:taOs,dos:boards,",931,8.82,ALERT
3092,"public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
","public void and(@NonNull T item){
synchronized (lock) {
    if (queue == null) {
      queue=new ArrayList<>();
    }
    queue.and(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(queue.size());
  }
}
",56,3,"items:queue,add:and,",71,0.67,ALERT
3093,"protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
","protected static boolean isCglibGetJumpback(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
",102,6,"isCglibGetCallbacks:isCglibGetJumpback,",64,0.89,ALERT
3094,"private Sha256Hash calculateHash(){
  try {
    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(bos);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private Sha256Hash calculceSalt(){
  try {
    ByteArrayOutputStream uts=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(uts);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(uts.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",57,2,"bos:uts,calculateHash:calculceSalt,",59,0.72,ALERT
3095,"private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}","private static String Readcomment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}",64,5,"readComment:Readcomment,",31,0.26,ALERT
3096,"@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){
  return term1.compareTo(term2);
}","@Override public int comCompare(NewSplitEmittedTerm termOne,NewSplitEmittedTerm filterSecond){
  return termOne.compareTo(filterSecond);
}
",22,3,"compare:comCompare,term1:termOne,term2:filterSecond,",144,1.37,ALERT
3097,"public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}
","public static void closeFiniets(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeFiniets(rsrc.channel());
}
",27,2,"closeQuiet:closeFiniets,",37,0.39,ALERT
3098,,,77,5,,1412,16.319339581330600,0
3099,"public int size(){
  return _attrs.size();
}
","public int empty(){
  return _attrs.empty();
}
",14,1,"size:empty,",34,0.26,ALERT
3100,"private void writeLog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
","private void writelog(String out){
  try {
    if (m_riter == null) {
      File fe=File.createTempFile(""create"","".log"");
    m_riterer=new PrintWriter(new FileWriter(fe));
      log.info(fe.toString());
    }
    m_riter.println(out);
    m_riter.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
",86,4,"writeLog:writelog,cmd:out,file:fe,m_writer:m_riter,",552,3.84,ALERT
3101,,,37,3,,994,11.34663539727530,0
3102,"public void disable(RichFormatterFeature feature){
  features.remove(feature);
}
","public void Disable(RichFormatterFeature element){
  features.remove(element);
}
",16,2,"feature:element,disable:Disable,",62,0.5,ALERT
3103,"private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(process,g2);
    break;
case NONE:
default :
  break;
}
}
}","private void renderShadowflow(final ExecutionUnit press,final Graphics2D g02,boolean Printifying){
  if (drawHighlight && !Printifying && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(press,g02);
    break;
case NONE:
default :
  break;
}
}
}",84,4,"renderForeground:renderShadowflow,process:press,g2:g02,printing:Printifying,",222,1.86,ALERT
3105,"public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}","public static StringBuffer replaceString(StringBuffer result,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=result.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      result.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return result;
}",115,6,"buffer:result,",57,0.53,ALERT
3106,,,16,2,,804,7.6054426550865200,0
3107,,,151,5,,1465,13.619077058633200,0
3108,"public NSNumber(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}
","public NSNumber(int integer){
  doubledoubleIDalongTypeer;
  default=INTEGER;
}
",18,4,"i:integer,doubleValue:doubleID,longValue:longType,type:default,",145,1.43,ALERT
3109,"public void onStart(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}","public void OnStarting(){
  if (mAudiomirrorAdapter == null) {
    mAudiomirrorAdapter=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}",51,2,"mAudioMirrorBuffer:mAudiomirrorAdapter,onStart:OnStarting,",49,0.55,ALERT
3110,,,21,2,,773,8.468994704882300,0
3111,,,33,2,,771,9.694858781496680,0
3112,"public static void overwrite(long[] vector,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}","public static void overwrite(long[] vec,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vec[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vec[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vec[idx + 1]&=~mask;
    vec[idx + 1]|=(val >>> truncatedValLen);
  }
}",117,9,"vector:vec,",78,0.7,ALERT
3113,"protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {
}
","protected void startInitialResources(final Cache cache,final Map<String,Object> options) throws Exception {
}
",21,3,"startAdditionalServices:startInitialResources,",27,0.19,ALERT
3114,"private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
","private void OnCustomer(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
",239,5,"onUser:OnCustomer,",53,0.61,ALERT
3115,"private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}
","private synchronized void addGloballockMap(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}
",35,2,"addTableLockObject:addGloballockMap,",29,0.26,ALERT
3119,"public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}","public static void nonFull(String string,String comment){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(comment);
}",34,3,"notEmpty:nonFull,msg:comment,",140,1.5,ALERT
3121,"@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);
  frameRate=usbCamSetupVideoExParam.framerate;
  whiteBalance=usbCamSetupVideoExParam.wb;
  saturation=usbCamSetupVideoExParam.saturation;
  brightness=usbCamSetupVideoExParam.brightness;
  contrast=usbCamSetupVideoExParam.contrast;
  sharpness=usbCamSetupVideoExParam.sharpness;
  imageEffectMode=usbCamSetupVideoExParam.effectmode;
  frameSize=usbCamSetupVideoExParam.framesize;
  evLevel=usbCamSetupVideoExParam.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}","@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamInstallChannelExt(pspUsbCamSetupVideoExParam usbCamSetupImageVideoParameter,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolutmodetResolutionExToResolution(usbCamSetupImageVideoParameter.mode);
  frameRaframeRateSetupImageVideoParameter.framerate;
  whiteBawhiteBalanceSetupImageVideoParameter.wb;
  saturatinsaturationSetupImageVideoParameter.insaturation;
  brightnbrightnessSetupImageVideoParameter.brightness;
  contrascompaintSetupImageVideoParameter.compaint;
  sharpnesharprastSetupImageVideoParameter.sharprast;
  imageEfimageEffectModeSetupImageVideoParameter.effectmode;
  frameSiframeSizeSetupImageVideoParameter.framesize;
  evLevelevLengthSetupImageVideoParameter.evlevel;
  if (!setupVideo()) {
    log.warn(String.format(""Cannot find webcam""));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}",136,14,"sceUsbCamSetupVideoEx:sceUsbCamInstallChannelExt,usbCamSetupVideoExParam:usbCamSetupImageVideoParameter,resolution:mode,saturation:insaturation,contrast:compaint,sharpness:sharprast,evLevel:evLength,",659,5.46,ALERT
3122,"public static String checkIndexHeaderSuffix(DataInput in,String expectedSuffix) throws IOException {
  int suffixLength=in.readByte() & 0xFF;
  byte suffixBytes[]=new byte[suffixLength];
  in.readBytes(suffixBytes,0,suffixBytes.length);
  String suffix=new String(suffixBytes,0,suffixBytes.length,StandardCharsets.UTF_8);
  if (!suffix.equals(expectedSuffix)) {
    throw new CorruptIndexException(""file mismatch, expected suffix="" + expectedSuffix + "", got=""+ suffix,in);
  }
  return suffix;
}","public static String checkIndexHeaderPsuffixed(DataInput init,String expectedSinference) throws IOException {
  int susuffixLennit.readByte() & 0xFF;
  bysuffractbytestes[]=new byte[suffixLen];
  init.readBytes(suffractbytes,0,suffractbytes.length);
  String suffsuffius String(suffractbytes,0,suffractbytes.length,StandardCharsets.UTF_8);
  if (!suffsuffiusals(expectedSinference)) {
    throw new CorruptIndexException(""file mismatch, expected suffix="" + exexpectedSinference "", got=""+ susuffiusnit);
  }
  return suffius;
}",99,6,"checkIndexHeaderSuffix:checkIndexHeaderPsuffixed,in:init,expectedSuffix:expectedSinference,suffixLength:suffixLen,suffixBytes:suffractbytes,suffix:suffius,",780,9.46,ALERT
3123,,,32,4,,1472,10.9947634379069,0
3124,"public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}","public void decodeQuery(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}",190,8,"dumpIndex:decodeQuery,",73,0.67,ALERT
3125,"public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.loadClass(name,resolve));
}","public Class<?> loadFile(String data,boolean Resolved) throws ClassNotFoundException {
  int l=data.lastIndexOf('.');
  if (l != -1) {
    SecurityManager cm=System.getSecurityManager();
    if (cm != null) {
      cm.checkPackageAccess(data.substring(0,l));
    }
  }
  if (ucp.knownToNotExist(data)) {
    Class<?> cu=findLoadedClass(data);
    if (cu != null) {
      if (Resolved) {
        resolveClass(cu);
      }
      return cu;
    }
    throw new ClassNotFoundException(data);
  }
  return (super.loadFile(data,Resolved));
}",130,6,"loadClass:loadFile,name:data,resolve:Resolved,i:l,sm:cm,c:cu,",419,3.94,ALERT
3127,,,17,1,,391,2.7991759379704800,0
3128,"public SessionWrapper(Session ses){
  this.ses=ses;
  this.time=System.currentTimeMillis();
}
","public SessionWrapper(Session mes){
  this.mes=mes;
  this.modified=System.currentTimeMillis();
}
",24,2,"ses:mes,time:modified,",313,2.01,ALERT
3130,"private void adjustBCIndex(Instruction barrier){
  NormalMethod source=barrier.position().method;
  if (source.isForOsrSpecialization()) {
    barrier.adjustBytecodeIndex(-source.getOsrPrologueLength());
  }
}
","private void adjustCCindex(Instruction Barry){
  NormalMethonamece=Barry.position().method;
  if (name.isForOsrSpecialization()) {
    Barry.adjustBytecodeIndex(-name.getOsrPrologueLength());
  }
}
",42,3,"adjustBCIndex:adjustCCindex,barrier:Barry,source:name,",339,4.01,ALERT
3131,,,18,1,,446,3.5239448149999000,0
3132,,,39,5,,1752,16.85447119474410,0
3133,"public void disable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}","public void enable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.enable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}",327,9,"disable:enable,",73,0.98,ALERT
3134,"public static void writeStringToWriter(String string,Writer writer) throws IOException {
  BufferedWriter bw=new BufferedWriter(writer);
  try {
    bw.write(string);
  }
  finally {
    bw.close();
  }
}
","public static void writestring2Writer(String slice,Writer width) throws IOException {
  BufferedWriterbww=new BufferedWriter(width);
  try {
   bww.write(slice);
  }
  finally {
    bw.close();
  }
}",43,4,"writeStringToWriter:writestring2Writer,string:slice,writer:width,",180,1.6,ALERT
3135,,,192,6,,2074,24.26095439593000,0
3136,"public void push(){
  state.cliprgn=g.getClipBounds();
  stack.push(state);
  state=(GraphicsState)state.clone();
}
","public void press(){
  state.cliprgn=g.getClipBounds();
  stack.press(state);
  state=(GraphicsState)state.clone();
}
",35,3,"push:press,",39,0.38,ALERT
3137,"protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
","protected List<URI> plus(final InputStream resource) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(resource,this);
  return groups;
}
",78,5,"load:plus,in:resource,",157,1.53,ALERT
3138,"public void add(double weight,double x,double y){
  observations.add(new WeightedObservedPoint(weight,x,y));
}
","public void en(double height,double pos,double Y){
  observations.en(new WeightedObservedPoint(height,pos,Y));
}
",30,4,"add:en,weight:height,x:pos,y:Y,",185,1.66,ALERT
3139,"@Override public SoftwarePIDController withTolerance(double tolerance){
  target=target.withTolerance(Math.abs(tolerance));
  return this;
}
","@Override public SoftwarePIDController withTaxolerance(double retocol){
  target=target.withTaxolerance(Math.abs(retocol));
  return this;
}
",28,3,"withTolerance:withTaxolerance,tolerance:retocol,",151,1.64,ALERT
3140,"@Override public void handleClick(int x,int y,PlotRenderingInfo info){
}
","@Override public void eventclick(int wx,int start,PlotRenderingInfo job){
}
",17,4,"handleClick:eventclick,x:wx,y:start,info:job,",207,1.93,ALERT
3141,"public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){
  if (compareArraySize(expected,actual)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[actual.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < actual.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(actual[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(actual));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}","public static void assertEqualesAnyOrd(EventBean[][] needed,EventBean[][] raised){
  if (compareArraySize(needed,raised)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[raised.length];
  for (  EventBean[expectedObjectct : needed) {
    boolean full=false;
    for (int i=0; i < raised.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean load=compareEqualsExactOrder(raised[i],expectedObject);
      if (load) {
        full=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!full) {
      log.error("".assertEqualsAnyOrder Not found in received results is expected="" + Arrays.toString(expectedObject));
      log.error("".assertEqualsAnyOrder received="" + Arrays.toString(raised));
    }
    ScopeTestHelper.assertTrue(full);
  }
  ScopeTestHelper.assertEqualnumMatcheses,needed.length);
}",185,9,"assertEqualsAnyOrder:assertEqualesAnyOrd,expected:needed,actual:raised,match:load,found:full,",470,5.19,ALERT
3142,"public static String fetchClusterName(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}","public static String fetchClubeRegion(String clusterCgaPath){
  String clubePath=null;
  if (clusterCgaPath != null && !clusterCgaPath.isEmpty()) {
    String[] tmpclusterCgaPath.split(SPLITTER);
    clubePath=mp[0];
  }
  return clubePath;
}",52,4,"fetchClusterName:fetchClubeRegion,clusterCgName:clusterCgaPath,clusterName:clubePath,tmp:mp,",328,2.89,ALERT
3143,"public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}","public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long create=loadSessionId();
  if (create == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(create));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + create);
    this.sessionId=create;
  }
  return authorized;
}",120,4,"id:create,",46,0.52,ALERT
3144,"public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=action.startsWith(""no"");
  if (no)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}","public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean yes=action.startsWith(""no"");
  if (yes)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int missing=current.intValue();
  int mask=bit.intValue();
  int n=(missing & (~mask));
  n=(yes) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}",135,8,"no:yes,old:missing,",93,0.89,ALERT
3145,,,15,1,,432,4.335862878958380,0
3146,"protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){
  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();
  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);
  nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext);
  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);
  if (!isLastStream) {
    for (    EventBean[] row : nestedResult) {
      EventBean lookup=row[nestedStreams[nestingOrderIndex]];
      recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext);
    }
    return;
  }
  for (  EventBean[] row : nestedResult) {
    result.add(row);
  }
}","protected void recursiveNestJoin(EventBean LookupEvent,int nestingChainCount,EventBean[] currentResult,Collection<EventBean[]> match,ExprEvaluatorContext exprEvaluaterContext){
  List<EventBean[]> nachedresult=new LinkedList<EventBean[]>();
  ExecNode nestedRunContainer=childNodes.get(nestingChainCount);
  nenestedRunContainerrocess(LookupEvent,currentResult,nachedresult,exprEvaluaterContext);
  boolean isLastPath=(nestingChainCount == nestingOrderLength - 1);
  if (!isLastPath) {
    for (    EventBean[] ull : nachedresult) {
      EventBean lookUp=ull[nestedStreams[nestingChainCount]];
      recursiveNestJoinlookUpp,nestingChainCount + 1ullw,match,exprEvaluaterContext);
    }
    return;
  }
  for (  EventBean[] ull : nachedresult) {
    match.add(ull);
  }
}",144,11,"recursiveNestedJoin:recursiveNestJoin,lookupEvent:LookupEvent,nestingOrderIndex:nestingChainCount,currentPath:currentResult,result:match,exprEvaluatorContext:exprEvaluaterContext,nestedResult:nachedresult,nestedExecNode:nestedRunContainer,isLastStream:isLastPath,row:ull,lookup:lookUp,",883,11.14,ALERT
3147,"public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
","public BigDecimal calculateTotalCollectedSamct(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
",26,3,"calculateTotalCollectedAmt:calculateTotalCollectedSamct,",29,0.29,ALERT
3148,"public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){
  if (location == null) {
    throw new IllegalArgumentException(""Location Is Null"");
  }
  if (azimuth == null) {
    throw new IllegalArgumentException(""Azimuth Is Null"");
  }
  double lat0=location.getLatitude().radians;
  double az=azimuth.radians;
  double tanDistance=-Math.tan(lat0) / Math.cos(az);
  double distance=Math.atan(tanDistance);
  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));
  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));
  return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)};
}","public static LatLon[] greatCircleExtremeSlocations(LatLon response,Angle Azimath){
  if (response == null) {
    throw new IllegalArgumentException(""Location Is Null"");
  }
  if (Azimath == null) {
    throw new IllegalArgumentException(""Azimuth Is Null"");
  }
  double lat1=response.getLatitude().radians;
  double AZ=Azimath.radians;
  double spanLocation=-Math.tan(lat1) / Math.cos(AZ);
  double ddivMath.atan(spanLocation);
  AExtremeLengthOneance1=Angle.fromRadians(div + (Math.PI / 2.0));
  AextremeLocationTwoance2=Angle.fromRadians(div - (Math.PI / 2.0));
  return new LatLon[]{greatCircleEndPosition(response,Azimath,ExtremeLengthOne),greatCircleEndPosition(response,Azimath,extremeLocationTwo)};
}",152,9,"greatCircleExtremeLocations:greatCircleExtremeSlocations,location:response,azimuth:Azimath,lat0:lat1,az:AZ,tanDistance:spanLocation,distance:div,extremeDistance1:ExtremeLengthOne,extremeDistance2:extremeLocationTwo,",532,9.89,ALERT
3149,"private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}
","private void populatesWorklist(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}
",153,12,"populateTaskList:populatesWorklist,",84,0.73,ALERT
3150,,,44,4,,1254,9.856955858071650,0
3151,"private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
","private void compileOLog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
",63,5,"compileProlog:compileOLog,",36,0.34,ALERT
3152,"public void init(SocketChannel channel){
  _channel=channel;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
","public void start(SocketChannel handler){
  _socket=handler;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
",29,3,"init:start,channel:handler,_channel:_socket,",164,1.19,ALERT
3153,"public static List<Window> windows(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return windows(list,windowSize);
}
","public static List<Window> microsoft(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return microsoft(list,windowSize);
}
",66,5,"windows:microsoft,",44,0.46,ALERT
3154,"private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}","private void sbjoin(char ch){
  try {
    vBuffer[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[vBuffer.length << 1];
    System.arraycopy(vBuffer,0,buff,0,vBuffer.length);
    vBuffer=buff;
    vBuffer[mBuffIdx]=ch;
  }
}",70,5,"mBuff:vBuffer,bappend:sbjoin,",152,1.29,ALERT
3155,,,24,2,,649,6.739251601696010,0
3156,"public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void sphereFromEarth(Vector3 server){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    server.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    server.setX(coord[0]);
    server.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",146,6,"vec:server,sphericalToWorld:sphereFromEarth,",70,0.56,ALERT
3157,"@Override public String expect(Pattern pattern){
  final String token=read(pattern);
  if (token == null) {
    throw new ParserException(""Expected pattern \'"" + pattern.pattern() + ""\' was not encountered in document: ""+ document);
  }
  return token;
}
","@Override public String Expected(Pattern reader){
  final Stringsourcen=read(reader);
  if (source == null) {
    throw new ParserException(""Expected pattern \'"" + reader.reader() + ""\' was not encountered in document: ""+ document);
  }
  return source;
}
",48,3,"expect:Expected,pattern:reader,token:source,",817,8.54,ALERT
3158,"@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
","@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void WriteObject(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
",92,5,"writeMap:WriteObject,",60,0.63,ALERT
3159,,,152,4,,1520,11.899025972684200,0
3160,,,17,2,,792,8.310999361673990,0
3162,"void add(Object key){
  table.put(key,key);
}
","void add(Object temp){
  table.put(temp,temp);
}
",17,2,"key:temp,",37,0.33,ALERT
3163,"static boolean pairSum(int ar[],int x){
  Arrays.sort(ar);
  int len=ar.length;
  for (int i=0, j=len - 1; i < j; ) {
    if (ar[i] + ar[j] == x) {
      return true;
    }
 else     if (ar[i] + ar[j] < x) {
      i++;
    }
 else {
      j--;
    }
  }
  return false;
}","static boolean ArraySum(int ar[],int x){
  Arrays.sort(ar);
  int len=ar.length;
  for (int i=0, j=len - 1; i < j; ) {
    if (ar[i] + ar[j] == x) {
      return true;
    }
 else     if (ar[i] + ar[j] < x) {
      i++;
    }
 else {
      j--;
    }
  }
  return false;
}",96,6,"pairSum:ArraySum,",41,0.61,ALERT
3164,"public static synchronized List<Proxy> noProxyList(){
  if (noProxyList == null) {
    ArrayList<Proxy> list=new ArrayList<Proxy>(1);
    list.add(Proxy.NO_PROXY);
    noProxyList=Collections.unmodifiableList(list);
  }
  return noProxyList;
}","public static synchronized List<Proxy> noproxyListener(){
  if (noproxyListener == null) {
    ArrayList<Proxy> list=new ArrayList<Proxy>(1);
    list.add(Proxy.NO_PROXY);
    noproxyListener=Collections.unmodifiableList(list);
  }
  return noproxyListener;
}",56,2,"noProxyList:noproxyListener,",69,0.68,ALERT
3165,,,75,4,,1497,12.114892931779200,0
3166,"private final String loadXmlDefinition(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadXmlDefinition(stringWriter.toString());
}
","private final String loadXfFile(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadXfFile(stringWriter.toString());
}
",68,4,"loadXmlDefinition:loadXfFile,",72,0.54,ALERT
3167,"public void fireEventProgrammatically(Event event){
  if (!event.isConsumed())   ripplerPane.fireEvent(event);
}
","public void fireEventScriptmatically(Event v){
  if (!v.isConsumed())   ripplerPane.fireEvent(v);
}
",25,2,"fireEventProgrammatically:fireEventScriptmatically,event:v,",152,1.28,ALERT
3168,,,12,1,,412,4.648574157555900,0
3169,"public int executeUpdate(String sql) throws SQLException {
  return Util.truncateAndConvertToInt(executeLargeUpdate(sql));
}
","public int writeUpdate(String source) throws SQLException {
  return Util.truncateAndConvertToInt(executeLargeUpdate(source));
}
",22,2,"executeUpdate:writeUpdate,sql:source,",641,4.09,ALERT
3170,"public void addRestrictedDomain(String domainName){
  if (StringUtils.isEmpty(domainName)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(domainName);
}
","public void addRestrictionHost(String baseUrl){
  if (StringUtils.isEmpty(baseUrl)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(baseUrl);
}
",46,3,"addRestrictedDomain:addRestrictionHost,domainName:baseUrl,",92,0.81,ALERT
3171,"@Override protected void onMessageOnProducerThread(T msg){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(msg);
  }
  finally {
    _lock.unlock();
  }
}
","@Override protected void onMessageOnProducerTask(T error){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(error);
  }
  finally {
    _lock.unlock();
  }
}
",57,2,"onMessageOnProducerThread:onMessageOnProducerTask,msg:error,",58,0.6,ALERT
3172,"public T findByCommitCounter(final long commitCounter){
  if (commitCounter < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= commitCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}","public T findByCommitter(final long blockClock){
  if (blockClock < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= blockClock) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}",140,7,"findByCommitCounter:findByCommitter,commitCounter:blockClock,",221,2.05,ALERT
3173,"public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}","public static double dadd_f(double lh,double rdho){
  returrdhohs != 0 ? lh -rdhos * Math.floor(lh / rdho) : Double.NaN;
}",35,3,"dmod_d:dadd_f,lhs:lh,rhs:rdho,",166,2.2,ALERT
3174,"public List<TypeId<?>> asList(){
  return Collections.unmodifiableList(Arrays.asList(types));
}
","public List<TypeId<?>> AsL(){
  return Collections.unmodifiableList(Arrays.AsL(types));
}
",26,1,"asList:AsL,",24,0.23,ALERT
3175,"public static void printThreadInfo(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}","public static void getTaskInfo(PrintWriter trans,String id){
  final int STACK_DEBUGAST=20;
  boolean contractruction=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadCountxs=threadBean.getAllThreadIds();
  trans.println(""Process Thread Dump: "" + id);
  trans.println(threadCountxs.length + "" active threads"");
  for (  long tid tidhreadCountxs) {
    ThreadInfo inftxtreadBean.getThreadInfo(tidtidACK_DEBUGAST);
    if (txt == null) {
      trans.println(""  Inactive"");
      continue;
    }
    trans.println(""Thread "" + getTaskName(txt.getThreadId(),txt.getThreadName()) + "":"");
    Thread.Statebodye=txt.getThreadState();
    trans.println(""  State: "" + body);
    trans.println(""  Blocked count: "" + txt.getBlockedCount());
    trans.println(""  Waited count: "" + txt.getWaitedCount());
    if (contractruction) {
      trans.println(""  Blocked time: "" + txt.getBlockedTime());
      trans.println(""  Waited time: "" + txt.getWaitedTime());
    }
    if (body == Thread.State.WAITING) {
      trans.println(""  Waiting on "" + txt.getLockName());
    }
 else     if (body == Thread.State.BLOCKED) {
      trans.println(""  Blocked on "" + txt.getLockName());
      trans.println(""  Blocked by "" + getTaskName(txt.getLockOwnerId(),txt.getLockOwnerName()));
    }
    trans.println(""  Stack:"");
    for (    StackTraceElement frame : txt.getStackTrace()) {
      trans.println(""    "" + frame.toString());
    }
  }
  trans.flush();
}",311,10,"printThreadInfo:getTaskInfo,stream:trans,title:id,STACK_DEPTH:STACK_DEBUGAST,contention:contractruction,threadIds:threadCountxs,info:txt,state:body,",559,3.95,ALERT
3176,"protected boolean readReceiveDelay(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}","protected boolean readReceiveRelail(){
  try {
    receiveLineay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString(""Error7""));
    statusText1.setVisible(true);
    receiveLineay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveLineay < 0) {
    statusText1.setText(rb.getString(""Error8""));
    statusText1.setVisible(true);
    receiveLineay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveLineay > 65535) {
    statusText1.setText(rb.getString(""Error9""));
    statusText1.setVisible(true);
    receiveLineay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}",157,2,"readReceiveDelay:readReceiveRelail,receiveDelay:receiveLineay,",115,0.93,ALERT
3177,"final void putLong(int offset,long value){
  unsafe.putLong(offset + address,value);
}
","final void set64(int offset,long value){
  unsafe.set64(offset + address,value);
}",23,3,"putLong:set64,",32,0.3,ALERT
3178,"public String asString() throws IOException {
  long len=getContentLength();
  ByteArrayOutputStream buf;
  if (0 < len) {
    buf=new ByteArrayOutputStream((int)len);
  }
 else {
    buf=new ByteArrayOutputStream();
  }
  writeTo(buf);
  return decode(buf.toByteArray(),getCharacterEncoding());
}","public String AsString() throws IOException {
  long len=getContentLength();
  ByteArrayOutputStream abb;
  if (0 < len) {
    abb=new ByteArrayOutputStream((int)len);
  }
 else {
    abb=new ByteArrayOutputStream();
  }
  writeTo(abb);
  return decode(abb.toByteArray(),getCharacterEncoding());
}",67,3,"buf:abb,asString:AsString,",56,0.47,ALERT
3179,,,87,2,,793,6.627443969249730,0
3180,"public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}","public String scanString(File reader){
  log.config(reader.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(reader),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}",172,7,"parseFile:scanString,file:reader,",221,2.05,ALERT
3181,"private void loadText(InputStream is){
  BufferedReader reader;
  String line;
  unitList=new ArrayList();
  unitTypesList=new ArrayList();
  if (is == null) {
    throw new Error(""Can\'t load cluster db file."");
  }
  reader=new BufferedReader(new InputStreamReader(is));
  try {
    line=reader.readLine();
    lineCount++;
    while (line != null) {
      if (!line.startsWith(""***"")) {
        parseAndAdd(line,reader);
      }
      line=reader.readLine();
    }
    reader.close();
    units=new DatabaseClusterUnit[unitList.size()];
    units=(DatabaseClusterUnit[])unitList.toArray(units);
    unitList=null;
    unitTypes=new UnitType[unitTypesList.size()];
    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);
    unitTypesList=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + "" at line "" + lineCount);
  }
 finally {
  }
}
","private void dumptext(InputStream isi){
  BufferedReader result;
  String header;
  typeMap=new ArrayList();
  unitItemslist=new ArrayList();
  if (isi == null) {
    throw new Error(""Can\'t load cluster db file."");
  }
  rresultnew BufferedReader(new InputStreamReader(isi));
  try {
    header=result.readLine();
    lineCount++;
    while (header != null) {
      if (!header.startsWith(""***"")) {
        parseAndAdd(header,result);
      }
      header=result.readLine();
    }
    result.close();
   unitss=new DatabaseClusterUnit[typeMap.size()];
   unitss=(DatabaseClusterUnit[])typeMap.toArray(units);
    typeMap=null;
    elementTypes=new UnitType[unitItemslist.size()];
    elementTypes=(UnitType[])unitItemslist.toArray(elementTypes);
    unitItemslist=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + "" at line "" + lineCount);
  }
 finally {
  }
}
",196,9,"loadText:dumptext,is:isi,reader:result,line:header,unitList:typeMap,unitTypesList:unitItemslist,unitTypes:elementTypes,",404,4.23,ALERT
3182,,,20,1,,439,4.157628679275510,0
3183,"private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}","private void readingBuffine(final LittleEndianDataInputStream disc) throws IOException {
  RajLog.id(""StlPaser: Reading Binary"");
  disc.skip(80);
  int ffacetNumberdisc.readInt();
  float[] vverticesarrranew float[facetNumber * 9];
  float[] nnormesErlnew float[facetNumber * 9];
  int[] iindencesArrarnew int[facetNumber * 3];
  float[] TempNormes=new float[3];
  int vertLen=0, normEl=0;
  for (int i=0; iid< inidencesArrar.length; i++id   indencesArrar[id]=id;
  while (disc.available() > 0) {
    for (int aj=0; aj < 3; aj++) {
      tTempNormesjaj=disc.readFloat();
      if (Float.isNaN(TempNormes[jaj) || Float.isInfinite(TempNormes[aj])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        TempNormes[0]=0;
        TempNormes[1]=0;
        TempNormes[2]=0;
        break;
      }
    }
    for (int aj=0; aj < 3; aj++) {
      normesErl[nnormEl+]=TempNormes[0];
      normesErl[nnormEl+]=TempNormes[1];
      normesErl[nnormEl+]=TempNormes[2];
    }
    for (int j=0aj j <aj9; j++aj     vverticesarrravvertLen+]=disc.readFloat();
    disc.skip(2);
  }
  mRootObject.setData(verticesarrra,normesErl,null,null,indencesArrar,false);
}",309,11,"readBinary:readingBuffine,dis:disc,facetCount:facetNumber,verticesArr:verticesarrra,normalsArr:normesErl,indicesArr:indencesArrar,tempNorms:TempNormes,vertPos:vertLen,normPos:normEl,i:id,j:aj,",1150,10.48,ALERT
3184,,,120,7,,2488,31.709585146109300,0
3185,,,25,1,,433,3.650555372238160,0
3186,,,30,2,,810,6.524519431591030,0
3187,"@Override public void write(Buffer buffer,boolean isEnd) throws IOException {
  if (_s == null) {
    buffer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (buffer.isDirect()) {
      _totalWriteBytes+=buffer.length();
      _s.write(buffer.direct());
      return;
    }
    _totalWriteBytes+=buffer.length();
    while (buffer.length() > 0) {
      _writeBuffer.clear();
      buffer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    buffer.free();
  }
}","@Override public void create(Buffer data,boolean partend) throws IOException {
  if (_s == null) {
    data.free();
    return;
  }
  try {
    _needsFlush=true;
    if (data.isDirect()) {
    _totalWritePartses+=data.length();
      _s.create(data.direct());
      return;
    }
  _totalWritePartses+=data.length();
    while (data.length() > 0) {
      _writeBuffer.clear();
      data.read(_writeBuffer);
      _writeBuffer.flip();
      _s.create(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException xN=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw xN;
  }
 finally {
    data.free();
  }
}",165,5,"write:create,buffer:data,isEnd:partend,_totalWriteBytes:_totalWriteParts,exn:xN,",594,5.89,ALERT
3189,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof ECFieldFp) {
    return (p.equals(((ECFieldFp)obj).p));
  }
  return false;
}
","public boolean equets(Object obj){
  if (this == obj)   return true;
  if (obj instanceof ECFieldFp) {
    return (p.equets(((ECFieldFp)obj).p));
  }
  return false;
}
",46,2,"equals:equets,",33,0.29,ALERT
3191,"private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}","private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float Saped[]=sce.Saped;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(Saped,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}",395,8,"saved:Saped,",90,0.69,ALERT
3192,"public void updatePresonInfo(){
  this.leftPerson=person2LeavingPersonInfo.get(this.personId);
  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);
}","public void updateMembersonsinfo(){
  this.leftPerson=person2LeavingPersonInfo.get(this.personId);
  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);
}",33,3,"updatePresonInfo:updateMembersonsinfo,",28,0.19,ALERT
3193,,,126,3,,1050,11.320438182354000,0
3194,"public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
","public static void notice(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
",26,3,"error:notice,",34,0.23,ALERT
3195,"@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedInterval);
  if (!SeenHugeLogProb(analyzedInterval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}","@Override public void incomingObject(IAnalyzedInterval analyzedIrline) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedIrline.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double newGrade=calcRawScore(analyzedIrline);
  if (!SeenHugeLogProb(analyzedIrline)) {
    m_rawScores.add(newGrade);
    ++m_intervalCount;
  }
}",59,4,"analyzedInterval:analyzedIrline,rawScore:newGrade,",60,0.58,ALERT
3196,"public static void sort(long[] a){
  doSort(a,0,a.length - 1);
}","public static void ort(long[] a){
  doSort(a,0,a.length - 1);
}",25,2,"sort:ort,",33,0.26,ALERT
3197,"private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}","private void renderTEXT(int y6,int zOnce,int sk,boolean e_nor_o,Graphics reg){
  Color ololdTextColoreg.getColor();
  reg.setPaintMode();
  if (m_FontColor == null) {
    reg.setColor(Color.black);
  }
 else {
    reg.setColor(m_FontColor);
  }
  String l;
  if (e_nor_o) {
    Edge eiem_edges[sk].m_edge;
    for (int koas=0; (l=ie.getLine(koas)) != null; koas++) {
      g.drregwString(st,(ledges[s].sk_width - m_fontSize.stringWidth(st)l/ 2 + y6,zOnce + (koas + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node eiem_nodes[sk].m_node;
    for (int koas=0; (l=ie.getLine(koas)) != null; koas++) {
      g.drregwString(st,(lnodes[s].sk_width - m_fontSize.stringWidth(st)l/ 2 + y6,zOnce + (koas + 1) * m_fontSize.getHeight());
    }
  }
  reg.setColor(oldTextColor);
}",234,10,"drawText:renderTEXT,x1:y6,y1:zOnce,s:sk,e_or_n:e_nor_o,g:reg,oldColor:oldTextColor,st:l,e:ie,noa:koas,",1609,15.28,ALERT
3198,"public void testSignumPositive(){
  String a=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  assertEquals(""incorrect value"",1,aNumber.signum());
}","public void assertSignumPOSient(){
  String i=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  BigDecimal asInteger=new BigDecimal(new BigInteger(i),aScale);
  assertEquals(""incorrect value"",1,asInteger.signum());
}",45,4,"testSignumPositive:assertSignumPOSient,a:i,aNumber:asInteger,",219,2.43,ALERT
3199,"private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}
","private static void clearPath(File filter){
  if (filter == null)   return;
  if (filter.exists()) {
    for (    File f : filter.listFiles()) {
      if (f.isDirectory())       clearPath(f);
      f.delete();
    }
  }
}
",60,3,"path:filter,cleanDirectory:clearPath,",93,0.81,ALERT
3200,"public static boolean isSameElementType(ASTNode node1,ASTNode node2){
  return node1 != null && node2 != null && node1.getElementType() == node1.getElementType();
}","public static boolean issameETyp(ASTNode node1,ASTNode Node1){
  return node1 != null && Node1 != null && node1.getElementType() == node1.getElementType();
}",34,3,"node2:Node1,isSameElementType:issameETyp,",56,0.85,ALERT
3201,,,14,1,,428,3.4041075587272600,0
3202,,,18,2,,779,7.062699500719710,0
3203,,,33,1,,428,5.1073202133178700,0
3205,"private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
","private void moveOneBlock(Object source,Point newPoint){
  DisplayNode cdn=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=cdn.getLocation().x + deltaX;
  int newY=cdn.getLocation().y + deltaY;
  cdn.setLocation(newX,newY);
}
",77,8,"node:cdn,moveSingleNode:moveOneBlock,",235,2.29,ALERT
3206,,,32,1,,414,5.194348454475400,0
3207,"public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}
","public void init(GuiManualHerblore mainUAL){
  for (  ManualWidgetBase widget : widgets)   widget.init(mainUAL);
}
",23,3,"manual:mainUAL,",32,0.3,ALERT
3208,,,28,4,,1493,14.217646904786400,0
3209,,,25,1,,449,4.786639686425530,0
3210,"public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}
","public final void cap(){
  if (GWT.isScript()) {
    jsArray.cap();
  }
 else {
    javaArray.cap();
  }
}
",33,1,"clear:cap,",35,0.28,ALERT
3211,,,99,11,,3734,37.8463081796964,0
3212,"protected synchronized void request(String stream){
  if (stream == null || stream.isEmpty()) {
    return;
  }
  stream=stream.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(stream);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(stream);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(stream);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
","protected synchronized void request(String roll){
  if (roll == null || roll.isEmpty()) {
    return;
  }
  roll=roll.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(roll);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(roll);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(roll);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
",141,3,"stream:roll,",46,0.37,ALERT
3213,"public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
","public static List<String> expandWildcards(Iterable<File> dirs,List<String> windows,Backend forBackend){
  List<String> result=new ArrayList<String>(windows.size());
  for (  String name : windows) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
",67,6,"names:windows,",45,0.52,ALERT
3214,,,70,5,,1623,17.960796880722000,0
3215,"@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}","@TCB static String stripBancodeflows(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBancodeflows(sb,safeLimit);
  return sb.toString();
}",53,4,"stripBannedCodeunits:stripBancodeflows,",104,1.14,ALERT
3216,"public void addContentItem(ContentItem contentItem){
  if (contentItems == null) {
    contentItems=new ArrayList<ContentItem>();
  }
  contentItems.add(contentItem);
}
","public void addChildItems(ContentItem contentType){
  if (contentitems == null) {
    contentitems=new ArrayList<ContentItem>();
  }
  contentitems.add(contentType);
}
",34,3,"addContentItem:addChildItems,contentItem:contentType,contentItems:contentitems,",249,2.07,ALERT
3217,"private boolean processAuthenticationResponse(final HttpMethod method){
  LOG.trace(""enter HttpMethodBase.processAuthenticationResponse("" + ""HttpState, HttpConnection)"");
  try {
switch (method.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(method);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(method);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}
","private boolean processCommunicateResult(final HttpMethod subject){
  LOG.trace(""enter HttpMethodBase.processAuthenticationResponse("" + ""HttpState, HttpConnection)"");
  try {
switch (subject.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(subject);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(subject);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}
",92,2,"processAuthenticationResponse:processCommunicateResult,method:subject,",209,1.69,ALERT
3218,"public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
","public void debug(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
",94,6,"start:debug,",45,0.38,ALERT
3219,,,132,5,,1723,25.37408275604250,0
3220,,,32,2,,801,9.971448679765070,0
3221,"public int next(){
  return mix(gen.getAndIncrement());
}
","public int Next(){
  return mix(gen.getAndIncrement());
}
",17,1,"next:Next,",29,0.25,ALERT
3222,"public static String plnoun(final int quantity,final String noun){
  final String enoun=fullForm(noun);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(noun);
  }
}","public static String plunnonsense(final int quantity,final String anup){
  final String enoun=fullForm(anup);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(anup);
  }
}",47,4,"plnoun:plunnonsense,noun:anup,",87,1.04,ALERT
3223,,,21,1,,440,4.034835529327390,0
3224,"public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
","public void notifyMations(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread parent : threadMap.values()) {
      parent.interrupt();
    }
  }
}
",36,2,"t:parent,notifyTasks:notifyMations,",58,0.65,ALERT
3225,,,29,2,,739,5.998462796211240,0
3226,"public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}","public CipherParameters decrypted(byte[] in,int inOff,int inLen,int eelen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,eelen);
}",119,10,"decrypt:decrypted,keyLen:eelen,",110,1.22,ALERT
3227,"static private String calcThreshold(double scoreThreshold,double lambda){
  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);
  int maxNum=1000000;
  if (calcLogProb(maxNum,lambda) > logProbThreshold) {
    return "">1e6"";
  }
  int minNum=1;
  while (minNum < maxNum) {
    final int midNum=(maxNum + minNum) / 2;
    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;
    if (passThreshold) {
      maxNum=midNum;
    }
 else {
      if (midNum == minNum) {
        break;
      }
      minNum=midNum;
    }
  }
  return Integer.toString(maxNum);
}","static private String calcShresh(double scoreThrequency,double mega){
  final double llogProbFrustMath.log(1 - scoreThrequency / 0.999);
  int MAXSum=1000000;
  if (calcLoMAXSummaxNum,mega) > logProbFrust) {
    return "">1e6"";
  }
  int maxVal=1;
  while (maxVal < MAXSum) {
    final int idRom=(MAXSum + maxVal) / 2;
    final bpassThrustreshold=calcLoidRommidNum,mega) <= logProbFrust;
    if (passThrust) {
      MAXSum=idRom;
    }
 else {
      if (idRom == maxVal) {
        break;
      }
      maxVal=idRom;
    }
  }
  return Integer.toString(MAXSum);
}",122,8,"calcThreshold:calcShresh,scoreThreshold:scoreThrequency,lambda:mega,logProbThreshold:logProbFrust,maxNum:MAXSum,minNum:maxVal,midNum:idRom,passThreshold:passThrust,",670,8.82,ALERT
3229,"public static String generateNativeGuid(String deviceType,String serialNumber){
  return String.format(""%s+%s"",_deviceTypeMap.get(deviceType),serialNumber);
}
","public static String generateNativeguid(String featureId,String serialNumbers){
  return String.format(""%s+%s"",_deviceTypeMap.get(featureId),serialNumbers);
}
",30,3,"generateNativeGuid:generateNativeguid,deviceType:featureId,serialNumber:serialNumbers,",190,1.98,ALERT
3230,"public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception {
  fillHeader(request,response,dataModel);
  fillFooter(dataModel);
}
","public void fillHeaderAndHeader(final HttpServletRequest method,final HttpServletResponse application,final Map<String,Object> alphaSet) throws Exception {
  fillHeader(method,application,alphaSet);
  fillFooter(alphaSet);
}
",39,4,"fillHeaderAndFooter:fillHeaderAndHeader,request:method,response:application,dataModel:alphaSet,",408,4.64,ALERT
3231,,,29,3,,1148,7.87934289375941,0
3232,"final void copyIntoLocalState(Operand[] _localState){
  localState=new Operand[_localState.length];
  System.arraycopy(_localState,0,localState,0,_localState.length);
  setLocalKnown();
}","final void copyIntOLocalOrder(Operand[] _validStates){
  llocalDatanew Operand[_validStates.length];
  System.arraycopy(_validStates,0,llocalData0,_validStates.length);
  setLocalKnown();
}",42,3,"copyIntoLocalState:copyIntOLocalOrder,_localState:_validStates,localState:localData,",289,2.83,ALERT
3233,,,306,10,,3603,28.86095951795580,0
3234,,,26,1,,433,3.7659888585408500,0
3235,"public void waitForVolumesToBeVisible(CGRequestParams request){
  scan(request.getCopies(),request.getRsets());
}
","public void waitForVolumesTobeviable(CGRequestParams post){
  scan(post.getCopies(),post.getRsets());
}
",24,2,"waitForVolumesToBeVisible:waitForVolumesTobeviable,request:post,",501,3.55,ALERT
3236,,,82,3,,867,7.8425690054893500,0
3237,,,102,2,,706,6.191939016183220,0
3238,"boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
","boolean CheckTok(ByteWrapper root,Key remoteRef,InetAddress host,int server,Key lookflowKey){
  updateTokenTimestamps();
  boolean valid=CheckTidremoteRefeId,host,poserverooklookflowKeyestampCurrent.get()) || CheckTok(root,remoteRef,host,server,lookflowKey,timestampPrevious);
  if (!vaid  DHT.logDebug(""Received Invalid token from "" + host.getHostAddress());
  return id;
}
",82,7,"checkToken:CheckTok,token:root,nodeId:remoteRef,ip:host,port:server,lookupKey:lookflowKey,valid:id,",589,5.64,ALERT
3239,,,35,3,,498,3.7549955368042000,0
3240,"private static void verifyWriteSetNotFound(final BTree btree){
  log.info("""");
  for (int i=0; i < 1000; i++) {
    if (btree.contains(i)) {
      throw new RuntimeException(""Not expecting: key="" + i);
    }
  }
}","private static void verifyWriteSetIsfound(final BTree bbrees){
  log.info("""");
  for (int index=0; index < 1000; index++) {
    if (bbrees.contains(index)) {
      throw new RuntimeException(""Not expecting: key="" + index);
    }
  }
}",54,3,"verifyWriteSetNotFound:verifyWriteSetIsfound,btree:bbrees,i:index,",145,1.46,ALERT
3241,"public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}","public static StringBuffer replaceRegex(StringBuffer original,String freq,String parse,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(freq,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,parse);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}",106,10,"replace:parse,regex:freq,",233,2.29,ALERT
3242,"public void addStates(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}","public void AddMembers(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}",37,3,"addStates:AddMembers,",54,0.48,ALERT
3243,,,95,4,,1445,12.019432425499000,0
3244,"protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}","protected String reform(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}",42,5,"form:reform,",67,0.49,ALERT
3245,"public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}","public void calculatederived(){
  xStats.calculatederived();
  yStats.calculatederived();
  differencesStats.calculatederived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double silider=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=silider * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}",287,6,"slope:silider,calculateDerived:calculatederived,",141,1.31,ALERT
3246,"private void addDumpFile(){
  addDumpFile(dumpFile);
}
","private void adddumpFiles(){
  adddumpFiles(dumpFile);
}
",12,1,"addDumpFile:adddumpFiles,",34,0.27,ALERT
3247,,,23,2,,798,6.098061899344130,0
3248,,,58,2,,775,5.406631584962210,0
3249,"private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}","private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean rewcle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (rewcle) {
      source.rewcle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (rewcle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.rewcle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (rewcle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.rewcle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}",646,22,"recycle:rewcle,",124,1.35,ALERT
3250,,,53,3,,1144,11.040489641825400,0
3251,"public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}","public String encract(String sCoveryIv){
  int nLib=(sCoveryIv.length() >> 1) & ~7;
  if (nLib < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCoveryIv,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLib-=BlowfishECB.BLOCKSIZE;
  if (nLib == 0)   return """";
  byte[] buf=new byte[nLib];
  nNumOfBytes=BinConverter.binHexToBytes(sCoveryIv,buf,BlowfishECB.BLOCKSIZE * 2,0,nLib);
  if (nNumOfBytes < nLib)   return null;
  m_bfish.encract(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}",208,7,"nLen:nLib,sCipherText:sCoveryIv,decrypt:encract,",242,2.41,ALERT
3252,"private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStamp;
    XMPDateTime binOtherDate;
    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeDigitized"",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStamp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStamp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));
  }
 catch (  XMPException e) {
    return;
  }
}","private static void fixGPSTypeStag(XMPNode exifschemas) throws XMPException {
  XMPNode ggmsDateTimeXMPNodeUtils.findChildNode(exifschemas,""exif:GPSTimeStamp"",false);
  if (gmsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSRestamp;
    XMPDateTime binAltDesign;
    binGPSRestamp=XMPUtils.convertToDate(gmsDateTime.getValue());
    if (binGPSRestamp.getYear() != 0 || binGPSRestamp.getMonth() != 0 || binGPSRestamp.getDay() != 0) {
      return;
    }
    XMPNode oanotherMonthXMPNodeUtils.findChildNode(exifschemas,""exif:DateTimeOriginal"",false);
    if (anotherMonth == null) {
      oanotherMonthXMPNodeUtils.findChildNode(exifschemas,""exif:DateTimeDigitized"",false);
    }
    binAltDesign=XMPUtils.convertToDate(anotherMonth.getValue());
    Calendar cacoinGPSRestamp.getCalendar();
    co.set(Calendar.YEAR,binAltDesign.getYear());
    co.set(Calendar.MONTH,binAltDesign.getMonth());
    co.set(Calendar.DAY_OF_MONTH,binAltDesign.getDay());
    binGPSRestamp=new XMPDateTimeImpl(co);
    gmsDateTime.setValue(XMPUtils.convertFromDate(binGPSRestamp));
  }
 catch (  XMPException e) {
    return;
  }
}",219,7,"fixGPSTimeStamp:fixGPSTypeStag,exifSchema:exifschemas,gpsDateTime:gmsDateTime,binGPSStamp:binGPSRestamp,binOtherDate:binAltDesign,otherDate:anotherMonth,cal:co,",387,6.76,ALERT
3253,,,12,1,,401,2.957718312740330,0
3254,,,58,1,,420,4.993378221988680,0
3255,,,99,4,,1423,13.75441023906070,0
3256,,,34,3,,500,6.207908769448600,0
3257,"private void parseMenu(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {
  MenuState menuState=new MenuState(menu);
  int eventType=parser.getEventType();
  String tagName;
  boolean lookingForEndOfUnknownTag=false;
  String unknownTagName=null;
  do {
    if (eventType == XmlPullParser.START_TAG) {
      tagName=parser.getName();
      if (tagName.equals(XML_MENU)) {
        eventType=parser.next();
        break;
      }
      throw new RuntimeException(""Expecting menu, got "" + tagName);
    }
    eventType=parser.next();
  }
 while (eventType != XmlPullParser.END_DOCUMENT);
  boolean reachedEndOfMenu=false;
  while (!reachedEndOfMenu) {
switch (eventType) {
case XmlPullParser.START_TAG:
      if (lookingForEndOfUnknownTag) {
        break;
      }
    tagName=parser.getName();
  if (tagName.equals(XML_GROUP)) {
    if (menuState.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException(""A \'Group\' item cannot have "" + ""other \'Group\' items as children."");
    }
    menuState.readGroup(attrs);
    menuState.addGroup();
  }
 else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_SEPARATOR)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_GROUP_HEADER)) {
    if (menuState.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException(""\'GroupHeader\' item should "" + ""be placed inside a Group element."");
    }
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_MENU)) {
    throw new RuntimeException(""Sub-menus are not supported. "" + ""Similar functionality can be afforded "" + ""using the \'group\' tag."");
  }
 else {
    lookingForEndOfUnknownTag=true;
    unknownTagName=tagName;
  }
break;
case XmlPullParser.END_TAG:
tagName=parser.getName();
if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {
lookingForEndOfUnknownTag=false;
unknownTagName=null;
}
 else if (tagName.equals(XML_GROUP)) {
if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) {
if (menuState.groupHeadersAdded < 1) {
  throw new RuntimeException(""A \'GroupHeader\' is required "" + ""to create a \'collapsible\' Group."");
}
 else {
  throw new RuntimeException(""A \'collapsible\' Group can only "" + ""have ONE \'GroupHeader\'. You have provided: "" + menuState.groupHeadersAdded + ""."");
}
}
menuState.resetGroup();
}
 else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {
if (!menuState.hasAddedItem()) {
menuState.addItem();
}
}
 else if (tagName.equals(XML_MENU)) {
reachedEndOfMenu=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException(""Unexpected end of document"");
}
eventType=parser.next();
}
}","private void processModule(XmlPullParser oder,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {
  MenuState cookieStyle=new MenuState(menu);
  inparseNamepe=oder.getEventType();
  String tagName;
  boolean lookingForEndOfUnknownTag=false;
  String unknownTagName=null;
  do {
    if (parseName == XmlPullParser.START_TAG) {
    tagNameme=oder.getName();
      if (tagName.equals(XML_MENU)) {
      parseNamepe=oder.next();
        break;
      }
      throw new RuntimeException(""Expecting menu, got "" + tagName);
    }
  parseNamepe=oder.next();
  }
 while (parseName != XmlPullParser.END_DOCUMENT);
  boolean reachedEndOfPage=false;
  while (!reachedEndOfPage) {
switch (parseName) {
case XmlPullParser.START_TAG:
      if (lookingForEndOfUnknownTag) {
        break;
      }
  tagNameme=oder.getName();
  if (tagName.equals(XML_GROUP)) {
    if (cookieStyle.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException(""A \'Group\' item cannot have "" + ""other \'Group\' items as children."");
    }
    cookieStyle.readGroup(attrs);
    cookieStyle.addGroup();
  }
 else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {
    cookieStyle.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_SEPARATOR)) {
    cookieStyle.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_GROUP_HEADER)) {
    if (cookieStyle.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException(""\'GroupHeader\' item should "" + ""be placed inside a Group element."");
    }
    cookieStyle.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_MENU)) {
    throw new RuntimeException(""Sub-menus are not supported. "" + ""Similar functionality can be afforded "" + ""using the \'group\' tag."");
  }
 else {
    lookingForEndOfUnknownTag=true;
    unknownTagName=tagName;
  }
break;
case XmlPullParser.END_TAG:
tagName=oder.getName(tagNameme=oder.getName();
if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {
lookingForEndOfUnknownTag=false;
unknownTagName=null;
}
 else if (tagName.equals(XML_GROUP)) {
if (cookieStyle.isGroupCollapsible() && cookieStyle.groupHeadersAdded != 1) {
if (cookieStyle.groupHeadersAdded < 1) {
  throw new RuntimeException(""A \'GroupHeader\' is required "" + ""to create a \'collapsible\' Group."");
}
 else {
  throw new RuntimeException(""A \'collapsible\' Group can only "" + ""have ONE \'GroupHeader\'. You have provided: "" + cookieStyle.groupHeadersAdded + ""."");
}
}
cookieStyle.resetGroup();
}
 else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {
if (!cookieStyle.hasAddedItem()) {
cookieStyle.addItem();
}
}
 else if (tagName.equals(XML_MENU)) {
reachedEndOfPage=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException(""Unexpected end of document"");
}
eventType=oder.next(parseNamepe=oder.next();
}
}",550,10,"parseMenu:processModule,parser:oder,menuState:cookieStyle,eventType:parseName,reachedEndOfMenu:reachedEndOfPage,",422,4.04,ALERT
3258,"protected final File createDBFFDCDirectory(){
  File dbffdcDir=new File(ffdcDirectoryName);
  if (!dbffdcDir.exists()) {
    final boolean isDBFFDcDirCreated=dbffdcDir.mkdirs();
    if (isDBFFDcDirCreated) {
      dbffdcDir=new File(ffdcDirectoryName);
      return dbffdcDir;
    }
  }
 else   if (!dbffdcDir.isDirectory()) {
    return null;
  }
  return dbffdcDir;
}
","protected final File createDBFFDCDictore(){
  File dbeffcPart=new File(ffdcDirectoryName);
  if (!dbeffcPart.exists()) {
    final boolean iisDBFFDcFoldercreateddbeffcPart.mkdirs();
    if (isDBFFDcFoldercreated) {
      dbeffcPart=new File(ffdcDirectoryName);
      return dbeffcPart;
    }
  }
 else   if (!dbeffcPart.isDirectory()) {
    return null;
  }
  return dbeffcPart;
}
",73,3,"createDBFFDCDirectory:createDBFFDCDictore,dbffdcDir:dbeffcPart,isDBFFDcDirCreated:isDBFFDcFoldercreated,",190,1.65,ALERT
3259,"public void removeListener(final TimeoutEventListener listener){
  listeners.remove(listener);
}
","public void removeAdapter(final TimeoutEventListener Listeners){
  listeners.remove(Listeners);
}
",17,2,"listener:Listeners,removeListener:removeAdapter,",47,0.31,ALERT
3260,"private String fetchCharsetFromCache(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
","private String fetchCharsetsInDb(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
",57,5,"fetchCharsetFromCache:fetchCharsetsInDb,",66,0.44,ALERT
3261,,,13,1,,438,3.974670954545340,0
3262,,,42,4,,1526,24.662109597524000,0
3263,,,33,1,,445,6.451914370059970,0
3264,"public void addListener(SpeedrunsLiveListener listener){
  listeners.add(listener);
}
","public void registerHandler(SpeedrunsLiveListener linerver){
  listeners.add(linerver);
}
",16,2,"addListener:registerHandler,listener:linerver,",97,0.83,ALERT
3265,"@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}","@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int name,int timeout,int nonblock){
  return 0;
}",34,4,"id:name,",33,0.22,ALERT
3266,,,56,4,,1412,21.295458873113000,0
3267,"public double patience(int k,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}","public double pience(int kw,F v,int NS){
  double pfs=p(v);
  BinomialDistribution didivew BinomialDistribution(null,NS,pfs);
  double p0pfeath.pow(1 - ppfsNS);
  return 1 - (ddivcumulativeProbability(kw - 1) - pfe) / (1 - pfe);
}",72,7,"patience:pience,k:kw,f:v,N:NS,pf:pfs,dist:div,p0:pfe,",802,12.37,ALERT
3268,"public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}
","public Dimension minimalLayoutLayout(Container client){
  Dimension size;
synchronized (this) {
    checkContainer(client);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=client.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}
",127,6,"target:client,minimumLayoutSize:minimalLayoutLayout,",76,0.8,ALERT
3269,,,131,6,,2042,24.30356211264930,0
3270,"static BufferedImage convertImage(BufferedImage image){
switch (image.getType()) {
case BufferedImage.TYPE_INT_ARGB_PRE:
    return image;
case BufferedImage.TYPE_4BYTE_ABGR:
  image.coerceData(true);
return image;
}
BufferedImage convertedImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);
Graphics2D g=convertedImage.createGraphics();
g.setColor(new java.awt.Color(0f,0f,0f,0f));
g.fillRect(0,0,image.getWidth(),image.getHeight());
g.drawImage(image,0,0,null);
g.dispose();
return convertedImage;
}","static BufferedImage Convertimage(BufferedImage image){
switch (image.getType()) {
case BufferedImage.TYPE_INT_ARGB_PRE:
    return image;
case BufferedImage.TYPE_4BYTE_ABGR:
  image.coerceData(true);
return image;
}
BufferedImage convertedImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);
Graphics2D g=convertedImage.createGraphics();
g.setColor(new java.awt.Color(0f,0f,0f,0f));
g.fillRect(0,0,image.getWidth(),image.getHeight());
g.drawImage(image,0,0,null);
g.dispose();
return convertedImage;
}",138,4,"convertImage:Convertimage,",43,0.39,ALERT
3272,"protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
","protected void addAllforComPlay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
",48,4,"addAllForReplay:addAllforComPlay,",34,0.27,ALERT
3273,"public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}
","public void insert(byte[] buf) throws IOException {
  output.insert(buf);
  bytesWritten+=buf.length;
}
",26,3,"write:insert,",38,0.25,ALERT
3274,"public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),dbName)) {
    dbOperation.accept(client.getDatabase(dbName));
  }
}
","public static void OnDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> DBOp){
  if (contains(client.listDatabaseNames(),dbName)) {
    DBOp.accept(client.getDatabase(dbName));
  }
}
",46,4,"dbOperation:DBOp,onDatabase:OnDatabase,",49,0.46,ALERT
3275,"public E poll(long timeout,TimeUnit unit) throws InterruptedException {
  long nanos=unit.toNanos(timeout);
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null) {
        if (nanos <= 0)         return null;
 else         nanos=available.awaitNanos(nanos);
      }
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
        if (nanos <= 0)         return null;
        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            long timeLeft=available.awaitNanos(delay);
            nanos-=delay - timeLeft;
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}","public E install(long timeout,TimeUnit unit) throws InterruptedException {
  long nanos=unit.toNanos(timeout);
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null) {
        if (nanos <= 0)         return null;
 else         nanos=available.awaitNanos(nanos);
      }
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.install(t);
          return item == null ? null : item.element;
        }
        if (nanos <= 0)         return null;
        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            long timeLeft=available.awaitNanos(delay);
            nanos-=delay - timeLeft;
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}",253,12,"poll:install,",81,1.61,ALERT
3276,,,27,4,,1300,20.20044150749840,0
3278,,,104,3,,965,13.355988840262100,0
3279,"public static long bytesToLong(final byte[] bytes){
  final ByteBuffer buffer=ByteBuffer.allocate(8);
  buffer.put(bytes,0,8);
  buffer.flip();
  return buffer.getLong();
}","public static long byteTolong(final byte[] ips){
  final ByteBuffer header=ByteBuffer.allocate(8);
headerer.put(ips,0,8);
  header.flip();
  return header.getLong();
}",48,3,"bytesToLong:byteTolong,bytes:ips,buffer:header,",604,5.67,ALERT
3280,"public boolean isAborted(){
  return isAborted.get();
}
","public boolean isAjected(){
  return isAjected.get();
}
",14,1,"isAborted:isAjected,",34,0.29,ALERT
3282,"@SuppressWarnings(""unchecked"") public List<Boundary> populateArea(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
","@SuppressWarnings(""unchecked"") public List<Boundary> PopulatedRegion(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
",98,6,"populateArea:PopulatedRegion,",33,0.25,ALERT
3283,"void fillEntryTree(Set<PageLeafEntry> entries,Row row){
  int ptr=_rowHead;
  byte[] buffer=_buffer;
  while (ptr < BLOCK_SIZE) {
    int code=buffer[ptr] & CODE_MASK;
    int len=getLength(code,row);
    if (code == INSERT || code == REMOVE) {
      PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code);
      entries.add(entry);
    }
    ptr+=len;
  }
}
","void fillCacheOrder(Set<PageLeafEntry> countents,Row model){
  int index=_rowHead;
  byte[] queue=_buffer;
  while (index < BLOCK_SIZE) {
    int cerrorbuqueuendex] & CODE_MASK;
    int lenlengthtLength(coerrorodel);
    if (error == INSERT || error == REMOVE) {
      PageLeafEntry entry=nejeeLeafEntry(this,model,index,llengtherror);
      countents.add(je);
    }
    index+=length;
  }
}
",94,8,"fillEntryTree:fillCacheOrder,entries:countents,row:model,ptr:index,buffer:queue,code:error,len:length,entry:je,",665,6.62,ALERT
3285,"protected static void processGenericPropertiesCreatorProps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}","protected static void processGenericPropertiesCreatorPropperties(File proprfile){
  try {
    Properties expPropps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(proprfile));
    expPropps.load(bi);
    bi.close();
    bi=null;
    Properties GPCOutputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> kpesexpPropps.keySet();
    Iterator<Object>keyiI=pes.iterator();
    while (keyi.hasNext()) {
      Stringfully=(String)keyi.next();
      String exnewElPCOutputProps.getProperty(full,"""");
      if (newEl.length() > 0) {
        String nenewValxpPropps.getProperty(full);
        if (newEl.indexOf(newVal) < 0) {
    newValnewVal=newEl + "","" + newVal;
          GPCOutputProps.put(full,newVal);
        }
      }
 else {
        String nenewValxpPropps.getProperty(full);
        GPCOutputProps.put(full,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}",199,10,"processGenericPropertiesCreatorProps:processGenericPropertiesCreatorPropperties,propsFile:proprfile,expProps:expPropps,GPCInputProps:GPCOutputProps,keys:pes,keysI:keyi,key:full,existingVal:newEl,",509,6.46,ALERT
3286,"public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}","public void distortCam(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  uri[0]=(float)Math.sin(theta) * 2.f;
  uri[1]=.5f;
  uri[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(uri[0],uri[1],uri[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}",143,3,"eye:uri,applyCamera:distortCam,",90,1.17,ALERT
3287,"protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}","protected int concast(double value,double lower,double max,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= max)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (max - lower)));
}",81,6,"upper:max,encode:concast,",140,1.51,ALERT
3288,,,28,2,,799,7.209685464700060,0
3289,,,172,11,,3833,43.72708348830540,0
3291,"long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}","long getL() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}",113,1,"readLong:getL,",19,0.13,ALERT
3292,"private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
","private boolean releaseOrd(Order data){
  lock.lock();
  try {
    return activeOrders.add(data.getId());
  }
  finally {
    lock.unlock();
  }
}
",39,2,"lockOrder:releaseOrd,order:data,",107,0.72,ALERT
3294,"private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
","private boolean ifyName(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
",72,5,"toState:ifyName,",28,0.21,ALERT
3295,,,24,3,,1135,13.101321140925100,0
3296,,,74,4,,1529,13.614022350311300,0
3297,"public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){
  if (!VALID_TYPES.contains(prefType)) {
    throw new IllegalArgumentException(""The specified type: "" + prefType + "" is not supported in preferences"");
  }
  this.prefType=prefType;
  return this;
}
","public PreferenceBuilder<PreferenceClass> precToken(Class<PreferenceClass> precToken){
  if (!VALID_TYPES.contains(precToken)) {
    throw new IllegalArgumentException(""The specified type: "" + precToken + "" is not supported in preferences"");
  }
  this.precToken=precToken;
  return this;
}
",47,1,"prefType:precToken,",38,0.45,ALERT
3298,"final private String syntaxDef2SyntaxDesc(Attributes attrs) throws NamingException {
  StringBuffer syntaxDesc=new StringBuffer(""( "");
  Attribute attr=null;
  int count=0;
  attr=attrs.get(NUMERICOID_ID);
  if (attr != null) {
    syntaxDesc.append(writeNumericOID(attr));
    count++;
  }
 else {
    throw new ConfigurationException(""Attribute type doesn\'t"" + ""have a numeric OID"");
  }
  attr=attrs.get(DESC_ID);
  if (attr != null) {
    syntaxDesc.append(writeQDString(attr));
    count++;
  }
  if (count < attrs.size()) {
    String attrId=null;
    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {
      attr=ae.next();
      attrId=attr.getID();
      if (attrId.equals(NUMERICOID_ID) || attrId.equals(DESC_ID)) {
        continue;
      }
 else {
        syntaxDesc.append(writeQDStrings(attr));
      }
    }
  }
  syntaxDesc.append("")"");
  return syntaxDesc.toString();
}","final private String syntaxDef2SyLexDoc(Attributes acributes) throws NamingException {
  StringBuffer sysexDec=new StringBuffer(""( "");
  Attribute ach=null;
  int test=0;
  attrachibutes.get(NUMERICOID_ID);
  if (ach != null) {
    sysexDec.append(writeNumericOID(ach));
    test++;
  }
 else {
    throw new ConfigurationException(""Attribute type doesn\'t"" + ""have a numeric OID"");
  }
  attrachibutes.get(DESC_ID);
  if (ach != null) {
    sysexDec.append(writeQDString(ach));
    test++;
  }
  if (countestcributes.size()) {
    String attributeId=null;
    for (NamingEnumeration<? extends Attribute> ae=abeeibutes.getAll(); bee.hasMoreElements(); ) {
      ach=bee.next();
     attributeIdd=ach.getID();
      if (attributeId.equals(NUMERICOID_ID) || attributeId.equals(DESC_ID)) {
        continue;
      }
 else {
        sysexDec.append(writeQDStrings(ach));
      }
    }
  }
  sysexDec.append("")"");
  return sysexDec.toString();
}",208,7,"syntaxDef2SyntaxDesc:syntaxDef2SyLexDoc,attrs:acributes,syntaxDesc:sysexDec,attr:ach,count:test,attrId:attributeId,ae:bee,",460,4.79,ALERT
3299,"@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}","@Override public void swimm(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}",54,3,"trim:swimm,",24,0.21,ALERT
3300,"public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}","public void writeLEChars(String e) throws IOException {
  int length=e.length();
  for (int i=0; i < length; i++) {
    int c=e.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}",76,6,"s:e,",48,0.43,ALERT
3301,"public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}
","public Options put(String original,Integer value){
  if (value == null) {
    return remove(original);
  }
  options.put(original,value.toString());
  return this;
}
",42,3,"option:original,",40,0.37,ALERT
3302,"private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
","private void ListFolder(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] events=d.listFiles();
  if (events == null)   return;
  if (sortFiles != null)   Arrays.sort(events,sortFiles);
  for (  File f : events) {
    String Fno=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(Fno)) {
        ListFolder(directory,new RelativeDirectory(subdirectory,Fno),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(Fno,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,Fno,new File(d,Fno));
        resultList.append(fe);
      }
    }
  }
}
",185,11,"fname:Fno,files:events,listDirectory:ListFolder,",328,5.36,ALERT
3303,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnpackNCmap(String confirmed){
  char[] module=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=confirmed.charAt(i++);
    char value=confirmed.charAt(i++);
    do     module[j++]=value;
 while (--count > 0);
  }
  return module;
}",83,7,"packed:confirmed,zzUnpackCMap:doUnpackNCmap,map:module,",97,0.83,ALERT
3304,"public void doHistory(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="""";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}","public void doSwitch(KeyEvent exec){
  if (exec.getSource() == m_Input) {
switch (exec.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistPoint > 0) {
        m_HistPoint--;
        Stringmodeld=m_CommandHistory.elementAt(m_HistPoint);
        m_Input.setText(model);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistPoint < m_CommandHistory.size()) {
    m_HistPoint++;
    String model="""";
    if (m_HistPoint < m_CommandHistory.size()) {
     modeld=m_CommandHistory.elementAt(m_HistPoint);
    }
    m_Input.setText(model);
  }
break;
default :
break;
}
}
}",125,4,"doHistory:doSwitch,e:exec,m_HistoryPos:m_HistPoint,command:model,",457,3.78,ALERT
3305,"public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}","public final boolean check2track(Polyline p_serialline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_serialline.offset_shapes(compensated_half_width,0,p_serialline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_serialline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}",159,16,"p_polyline:p_serialline,check_trace:check2track,",91,3.03,ALERT
3306,"private void markRemovedDefaultSessionToken(String site,String token){
  if (removedDefaultTokens == null)   removedDefaultTokens=new HashMap<>(1);
  HashSet<String> removedSet=removedDefaultTokens.get(site);
  if (removedSet == null) {
    removedSet=new HashSet<>(1);
    removedDefaultTokens.put(site,removedSet);
  }
  removedSet.add(token);
}","private void markRemovedCustomDefaultToken(String store,String wt){
  if (removedExtraTokens == null)   removedExtraTokens=new HashMap<>(1);
  HashSet<String>REMovedSett=rremovedExtraTokensget(store);
  if (REMovedSet == null) {
    REMovedSet=new HashSet<>(1);
    rremovedExtraTokensput(store,REMovedSet);
  }
  removedSet.add(wt)REMovedSetSet.add(wt);
}",75,5,"markRemovedDefaultSessionToken:markRemovedCustomDefaultToken,site:store,token:wt,removedDefaultTokens:removedExtraTokens,removedSet:REMovedSet,",702,7.05,ALERT
3307,"static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targetTypes){
  final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>();
  for (  TargetType targetType : targetTypes) {
    targetTypeToAnnos.put(targetType,new ArrayList<TypeCompound>(10));
  }
  for (  final TypeCompound anno : annos) {
    final List<TypeCompound> annoSet=targetTypeToAnnos.get(anno.getPosition().type);
    if (annoSet != null) {
      annoSet.add(anno);
    }
 else     if (unmatched != null) {
      unmatched.add(anno);
    }
  }
  return targetTypeToAnnos;
}","static Map<TargetType,List<TypeCompound>> partitionBytargetTyp(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targettypes){
  final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>();
  for (  TargetType TargetTyp : targettypes) {
    targetTypeToAnnos.put(TargetTyp,new ArrayList<TypeCompound>(10));
  }
  for (  final TypeCompound anotation : annos) {
    final List<TypeCompound> annoSannoListetTypeToAnnos.get(anotation.getPosition().type);
    if (annoList != null) {
      annoSannoListanotation);
    }
 else     if (unmatched != null) {
      unmatched.add(anotation);
    }
  }
  return targetTypeToAnnos;
}",138,8,"partitionByTargetType:partitionBytargetTyp,targetTypes:targettypes,targetType:TargetTyp,anno:anotation,annoSet:annoList,",295,3.01,ALERT
3308,,,27,2,,828,6.162773843606310,0
3309,"protected static Boolean lock(String serviceName,Object name){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(name,1000,-1);
  return Boolean.valueOf(locked);
}","protected static Boolean lock(String serviceName,Object child){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(child,1000,-1);
  return Boolean.valueOf(locked);
}",46,5,"name:child,",42,0.33,ALERT
3310,"void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}","void pushInt(int index){
switch (index) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (index >= Byte.MIN_VALUE && index <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,index);
return;
}
if (index >= Short.MIN_VALUE && index <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,index);
return;
}
mv.visitLdcInsn(Integer.valueOf(index));
}",165,2,"i:index,",42,0.52,ALERT
3311,,,61,4,,1479,21.045968115329700,0
3312,"@Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){
  XYPlot subplot=findSubplot(info,source);
  if (subplot == null) {
    return;
  }
  if (!subplot.isDomainPannable()) {
    return;
  }
  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));
  if (subplotInfo == null) {
    return;
  }
  for (int i=0; i < subplot.getDomainAxisCount(); i++) {
    ValueAxis domainAxis=subplot.getDomainAxis(i);
    if (domainAxis != null) {
      domainAxis.pan(panRange);
    }
  }
}","@Override public void pandomainAxis(double anVal,PlotRenderingInfo f,Point2D settings){
  XYPlotubpatcht=findSubplot(f,settings);
  if (ubpatch == null) {
    return;
  }
  if (!ubpatch.isDomainPannable()) {
    return;
  }
  PlotRenderingIsubchartInfoInfo=f.getSubplotInfo(f.getSubplotIndex(settings));
  if (subchartInfo == null) {
    return;
  }
  for (int uli=0; uli < ubpatch.getDomainAxisCount(); uli++) {
    ValueAxis dodomainaxibpatch.getDomainAxis(uli);
    if (domainaxi != null) {
   domainaxixis.pan(anVal);
    }
  }
}",120,8,"panDomainAxes:pandomainAxis,panRange:anVal,info:f,source:settings,subplot:ubpatch,subplotInfo:subchartInfo,i:uli,domainAxis:domainaxi,",423,5.24,ALERT
3313,"static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ClassLoader cl=sibling.getClassLoader();
  Class<?> cls=ClassFinder.findClass(className,cl);
  return cls.newInstance();
}
","static Object instanceantiate(Class<?> Sendant,String resourceNames) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ClassLoader L=Sendant.getClassLoader();
  Class<?> clsllsassFinder.findClass(resourceNames,L);
  return lls.newInstance();
}
",52,5,"instantiate:instanceantiate,sibling:Sendant,className:resourceNames,cl:L,cls:lls,",443,3.42,ALERT
3314,"public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}","public static void checkEinity(final double[] xx) throws MathIllegalArgumentException {
  for (intjii=0;jii < xx.length; ji++) {
    final double width=xx[ji];
    if (Double.isInfinite(width) || Double.isNaN(width)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,width);
    }
  }
}",71,4,"checkFinite:checkEinity,val:xx,i:ji,x:width,",186,2.68,ALERT
3315,"public static void putLongVolatile(Object obj,long off,long val){
  UNSAFE.putLongVolatile(obj,off,val);
}
","public static void putLongVOLiform(Object src,long art,long pos){
  UNSAFE.putLongVOLiform(src,art,pos);
}
",27,4,"putLongVolatile:putLongVOLiform,obj:src,off:art,val:pos,",1201,10.7,ALERT
3316,"public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}","public static boolean installNormal(Context queue,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  queue.startActivity(i);
  return true;
}",97,5,"context:queue,",46,0.34,ALERT
3317,,,16,1,,431,4.520319187641140,0
3318,,,259,14,,5042,50.42145137786870,0
3320,,,50,5,,1826,15.472819976011900,0
3321,,,169,6,,2197,22.856460758050300,0
3322,"public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}","public static void eqalls(Object object1,Object object2){
  checkAssertion(object1.eqalls(object2),null);
}",25,3,"equals:eqalls,",26,0.2,ALERT
3323,"private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
","private synchronized void block(boolean tw){
  if (tw) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
",51,2,"tf:tw,",35,0.34,ALERT
3324,"public boolean isFlat(){
  return TYPE_FLAT.equals(getType());
}
","public boolean isFLate(){
  return TYPE_FLAT.equals(getType());
}
",17,1,"isFlat:isFLate,",25,0.21,ALERT
3325,"public static Number multiply(Character left,Character right){
  return multiply(Integer.valueOf(left),right);
}
","public static Number multIPle(Character both,Character middle){
  return multIPle(Integer.valueOf(both),middle);
}
",26,3,"multiply:multIPle,left:both,right:middle,",589,5.02,ALERT
3326,,,38,4,,1448,12.601965455214200,0
3327,"public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
","public List<FileStatus> reader(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
",130,6,"browse:reader,",36,2.21,ALERT
3328,"@Override public void requestResources(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourceRequest.getPreferredHost() + "" for container ""+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int cpuCores=resourceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}","@Override public void uploadPages(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourceRequest.getPreferredHost() + "" for container ""+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int puPategories=resourceRequest.getNumCores();
  String hostlabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capaCapableource.newInstance(memoryMb,puPategories);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest managedAsk;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerReqCapableility,null,priorityority,true,hostlabmanagedAskdRequest=new AMRMClient.ContainerReqCapableility,null,priorityority,true,hostlabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerReqCapableility,new StripreferredHostdHost},priorityority,true,hostlabmanagedAskdRequest=new AMRMClient.ContainerReqCapableility,new StripreferredHostdHost},priorityority,true,hostlabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,managedAsk);
    amClient.addContainerRequest(managedAsk);
  }
}",201,10,"requestResources:uploadPages,cpuCores:puPategories,containerLabel:hostlabel,capability:Capable,issuedRequest:managedAsk,",384,6.04,ALERT
3329,"private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
","private String encodedFeature(){
  StringBuffer tokens=new StringBuffer();
  ListIterator start=productTokens.listIterator();
  while (start.hasNext()) {
    tokens.append((String)start.next());
  }
  return tokens.toString();
}
",55,3,"it:start,encodeProduct:encodedFeature,",91,0.89,ALERT
3331,"public int size(){
  return m_sets.size();
}
","public int offset(){
  return m_sets.offset();
}
",14,1,"size:offset,",35,0.26,ALERT
3332,"private static Frame showInitialSplash(){
  Frame splashFrame=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      splashFrame=AWTSplashWindow.splash(image);
    }
  }
  return splashFrame;
}
","private static Frame showInitialSquash(){
  Frame splashedWindow=null;
  Image ani=null;
  URL pictureUrl=getChosenSplashURL();
  if (pictureUrl != null) {
    try {
      ani=ImageIO.read(pictureUrl);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (ani != null) {
      splashedWindow=AWTSplashWindow.splash(ani);
    }
  }
  return splashedWindow;
}
",78,4,"showInitialSplash:showInitialSquash,splashFrame:splashedWindow,image:ani,imageURL:pictureUrl,",237,1.99,ALERT
3333,,,35,2,,782,5.512246012687680,0
3334,"public boolean similarTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
","public boolean similarTo(Object no){
  if (no == null) {
    return false;
  }
  if (!(no instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)no;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
",116,5,"o:no,",46,0.51,ALERT
3335,"public List<T> asFlatList(){
  List<T> list=new ArrayList<T>();
  for (int i=0; i < getRowCount(); i++) {
    for (int j=0; j < getColumnCount(); j++) {
      list.add(getLogicalValueAt(i,j));
    }
  }
  return list;
}","public List<T> asFlatList(){
  List<T> server=new ArrayList<T>();
  for (int ix=0; ix < getRowCount(); ix++) {
    for (int j=0; j < getColumnCount(); j++) {
      server.add(getLogicalValueAt(ix,j));
    }
  }
  return server;
}",75,4,"list:server,i:ix,",74,0.79,ALERT
3336,"public void startObject(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}","public void endCollection(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}",60,5,"startObject:endCollection,",97,0.79,ALERT
3337,"public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
","public boolean OverLashes(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
",78,4,"overlaps:OverLashes,",36,0.35,ALERT
3338,,,35,2,,767,6.825272373358410,0
3339,,,35,4,,984,10.919079180558500,0
3340,"public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}
","public static Operator generateBancJoin(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBancJoin(table,indexScan,indexType);
}
",68,7,"generateBranchPlan:generateBancJoin,",49,0.44,ALERT
3341,"public static String toKilobytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}","public static String toKilobybytes(long forces){
  if (forces < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=forces / 1024;
  if ((forces & 512) != 0 || (forces > 0 && forces < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}",61,3,"bytes:forces,toKilobytes:toKilobybytes,",65,0.66,ALERT
3342,,,129,10,,3287,34.53464728196460,0
3343,"public static String encodeToString(byte[] src){
  if (src == null) {
    return null;
  }
  if (src.length == 0) {
    return """";
  }
  String result;
  try {
    result=new String(delegate.encode(src),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return result;
}","public static String encodeFromSingle(byte[] scene){
  if (scene == null) {
    return null;
  }
  if (scene.length == 0) {
    return """";
  }
  String result;
  try {
    result=new String(delegate.encode(scene),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return result;
}",78,3,"src:scene,encodeToString:encodeFromSingle,",93,0.73,ALERT
3344,"public static terminal find(String with_name){
  if (with_name == null)   return null;
 else   return (terminal)_all.get(with_name);
}
","public static terminal found(String with_name){
  if (with_name == null)   return null;
 else   return (terminal)_all.get(with_name);
}
",31,2,"find:found,",32,0.26,ALERT
3345,"public void configure(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split("" "");
  }
}
","public void configured(){
  if (cmdPrefix != null) {
    comment=cmdPrefix.split("" "");
  }
}
",24,2,"configure:configured,prefix:comment,",97,1.06,ALERT
3346,,,66,4,,1494,16.9939733227094,0
3347,"public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmeria(inHeaders,out);
  return out;
}
","public static HttpHeaders toArmerians(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmerians(inHeaders,out);
  return out;
}
",61,3,"toArmeria:toArmerians,",41,0.6,ALERT
3348,,,26,1,,425,3.1319862325986200,0
3349,"public static String urlEncode(@Nullable String s){
  if (s == null) {
    return """";
  }
  try {
    return URLEncoder.encode(s,""UTF-8"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(""UTF-8 should be supported in every JVM"");
  }
}","public static String urlenCode(@Nullable String aws){
  if (aws == null) {
    return """";
  }
  try {
    return URLEncoder.encode(aws,""UTF-8"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(""UTF-8 should be supported in every JVM"");
  }
}",50,2,"urlEncode:urlenCode,s:aws,",100,0.83,ALERT
3350,"public static void unregisterMBean(Class<?> mbeanInterface){
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    ObjectName name=generateMBeanObjectName(mbeanInterface);
    if (mbs.isRegistered(name)) {
      logger.info(""Unregistering mbean: "" + name.toString());
      mbs.unregisterMBean(name);
    }
 else {
      logger.warn(""Ignoring attempt to unregister unknown mbean: "" + name.toString());
    }
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Unable to unregister mbean: interface="" + mbeanInterface,e);
  }
}
","public static void unregisterMXBoans(Class<?> mbeanInterface){
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    ObjectName name=generateMBeanObjectName(mbeanInterface);
    if (mbs.isRegistered(name)) {
      logger.info(""Unregistering mbean: "" + name.toString());
      mbs.unregisterMXBoans(name);
    }
 else {
      logger.warn(""Ignoring attempt to unregister unknown mbean: "" + name.toString());
    }
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Unable to unregister mbean: interface="" + mbeanInterface,e);
  }
}
",98,4,"unregisterMBean:unregisterMXBoans,",45,0.5,ALERT
3351,"public void removeStorage() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
","public void removeContainer() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
",31,1,"removeStorage:removeContainer,",17,0.13,ALERT
3352,,,44,6,,1959,15.837396013736700,0
3353,,,71,4,,1472,15.206759218374900,0
3354,"protected String generateSectionLabel(PieDataset dataset,Comparable key){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,key);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}
","protected String generateSecComment(PieDataset DatrasET,Comparable index){
  String array=null;
  if (DatrasET != null) {
    Object[] iteipseateItemArray(DatrasET,index);
    array=MessageFormat.format(this.labelFormat,ips);
  }
  return array;
}
",53,5,"generateSectionLabel:generateSecComment,dataset:DatrasET,key:index,result:array,items:ips,",782,7.51,ALERT
3355,"public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}","public static double info(int counts[]){
  int Total=0;
  double xa=0;
  for (  int count : counts) {
    xa-=xlogx(count);
    Total+=count;
  }
  return xa + xlogx(Total);
}",50,5,"total:Total,x:xa,",74,0.73,ALERT
3356,"public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
","public void createNotes(Note office){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(office.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,office.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(office.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
",117,6,"note:office,createNote:createNotes,",64,0.45,ALERT
3357,,,39,3,,1159,9.524377850691480,0
3358,"public static double angle(Coordinate p0,Coordinate p1){
  double dx=p1.x - p0.x;
  double dy=p1.y - p0.y;
  return Math.atan2(dy,dx);
}","public static double rad(Coordinate P0,Coordinate px){
  double fx=px.x - P0.x;
  double dd=px.y - P0.y;
  return Math.atan2(dd,fx);
}",45,5,"angle:rad,p0:P0,p1:px,dx:fx,dy:dd,",315,3.34,ALERT
3359,"private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
","private static void createFiles(File data,List<String> lines) throws IOException {
  if (!data.exists())   data.createNewFile();
  FileWriter fw=new FileWriter(data);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
",92,7,"file:data,writeFile:createFiles,",94,0.96,ALERT
3360,"private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}","private int composingPart(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}",28,3,"composeComponent:composingPart,",30,0.34,ALERT
3361,,,11,2,,769,9.67004710038503,0
3362,,,161,9,,3082,35.22884736855830,0
3363,"public static URL findResourceBase(String baseResource,ClassLoader loader){
  URL url=loader.getResource(baseResource);
  return findResourceBase(url,baseResource);
}
","public static URL findResourceBase(String sourceFile,ClassLoader container){
  URL ufntainerer.getResource(sourceFile);
  return findResourceBasfrl,sourceFile);
}
",31,4,"baseResource:sourceFile,loader:container,url:f,",186,2.08,ALERT
3364,"private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}","private void selectFeatureSourceInst(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}",153,7,"selectAttributeSetInstance:selectFeatureSourceInst,",64,0.82,ALERT
3365,,,61,4,,1448,18.37589501539870,0
3366,"public void deleteQuota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
","public void getQot(String d) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),d,""quota"");
}
",25,2,"id:d,deleteQuota:getQot,",58,0.47,ALERT
3368,"public void addCommand(Command cmd,int offset){
  menuBar.addCommand(cmd,offset);
}
","public void createcommand(Command cmd,int offset){
  menuBar.createcommand(cmd,offset);
}
",21,3,"addCommand:createcommand,",31,0.28,ALERT
3369,"public String sel(){
  return mSelection.toString();
}
","public String select(){
  return mSelection.toString();
}
",14,1,"sel:select,",32,0.28,ALERT
3370,,,55,2,,806,8.900699325402580,0
3372,,,79,4,,980,14.34518662293750,0
3373,"public void add(Character character){
  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
}
","public void and(Character config){
  elements.and(config == null ? JsonNull.INSTANCE : new JsonPrimitive(config));
}
",28,2,"add:and,character:config,",703,7.32,ALERT
3374,"@Deprecated public void pointToData(Data o) throws FitsException {
  o.fillHeader(this);
}
","@Deprecated public void pointForArray(Data o) throws FitsException {
  o.fillHeader(this);
}
",20,2,"pointToData:pointForArray,",28,0.23,ALERT
3375,,,31,3,,1042,9.36049191157023,0
3376,"public static Sentence make(final Connective connective,final Sentence... children2){
  return make(connective,Arrays.asList(children2));
}","public static Sentence empty(final Connective connective,final Sentence... children2){
  return empty(connective,Arrays.asList(children2));
}",29,3,"make:empty,",38,0.32,ALERT
3377,"public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
","public boolean isMultipleLowing(String imageID){
  return multipleFrames.contains(imageID);
}
",17,2,"frameID:imageID,isMultipleAllowed:isMultipleLowing,",48,0.66,ALERT
3378,"@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}","@SuppressWarnings(""unchecked"") public Promise<Result,Progress> solved(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}",110,6,"resolve:solved,",30,0.31,ALERT
3379,"void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(attributeValue,offset,realm,0,length);
}","void decodeStringContent(byte[] characterValue,char i,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(characterValue,i,realm,0,length);
}",41,5,"attributeValue:characterValue,decodeAttributeBody:decodeStringContent,offset:i,",89,0.88,ALERT
3380,"private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}","private static void generageFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}",205,4,"generateFiles:generageFiles,",49,0.43,ALERT
3381,"public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
","public static double match(double tx,double y,double z){
  return Math.sqrt(tx * tx + y * y + z * z);
}
",34,4,"x:tx,length:match,",128,1.21,ALERT
3383,,,104,3,,1072,11.5323118408521,0
3384,"@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public synchronized void sync(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  sync(inputSource);
}
",72,4,"parse:sync,",43,0.55,ALERT
3385,,,66,5,,1721,28.74067212343220,0
3387,,,25,1,,438,3.500335419178010,0
3388,,,27,2,,786,7.9660090128580700,0
3389,"@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException {
synchronized (mCameraLock) {
    if (mCamera != null) {
      return this;
    }
    mCamera=createCamera();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME);
      mCamera.setPreviewTexture(mDummySurfaceTexture);
    }
 else {
      mDummySurfaceView=new SurfaceView(mContext);
      mCamera.setPreviewDisplay(mDummySurfaceView.getHolder());
    }
    mCamera.startPreview();
    isSafeToTakePicture=true;
    mProcessingThread=new Thread(mFrameProcessor);
    mFrameProcessor.setActive(true);
    mProcessingThread.start();
  }
  return this;
}
","@RequiresPermission(Manifest.permission.CAMERA) public CameraSource kill() throws IOException {
synchronized (mCameraLock) {
    if (nmCam != null) {
      return this;
    }
    nmCam=createCamera();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mDummyInterfacePicture=new SurfaceTexture(DUMMY_TEXTURE_NAME);
      nmCam.setPreviewTexture(mDummyInterfacePicture);
    }
 else {
      mDummyScfaceTexture=new SurfaceView(mContext);
      nmCam.setPreviewDisplay(mDummyScfaceTexture.getHolder());
    }
    nmCam.startPreview();
    isSafeToTakePicture=true;
    mThreadingJob=new Thread(mFrameProcessor);
    mFrameProcessor.setActive(true);
   mThreadingJobd.kill();
  }
  return this;
}
",128,5,"start:kill,mCamera:nmCam,mDummySurfaceTexture:mDummyInterfacePicture,mDummySurfaceView:mDummyScfaceTexture,mProcessingThread:mThreadingJob,",455,4.7,ALERT
3390,"public static String decodeBCD(final short bcd){
  return String.format(""%x.%02x"",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}","public static String decodeTCC(final short bcod){
  return String.format(""%x.%02x"",(bcod & 0xFF00) >> 8,bcod & 0x00FF);
}",32,2,"bcd:bcod,decodeBCD:decodeTCC,",51,0.53,ALERT
3391,"public static void addActivityListener(ActivityListener listener){
  if (listener != null) {
    startTracking();
    listeners.add(listener);
  }
}
","public static void addactivityClient(ActivityListener listacher){
  if (listacher != null) {
    startTracking();
    listeners.add(listacher);
  }
}
",29,2,"addActivityListener:addactivityClient,listener:listacher,",52,0.44,ALERT
3392,"private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}","private void validateCustomProperty(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}",282,11,"validateDynamicAttribute:validateCustomProperty,",81,0.83,ALERT
3393,,,29,3,,906,10.162146588166600,0
3395,,,149,6,,2092,19.766187079747500,0
3397,"private synchronized void loadTrustManager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustManager : tmf.getTrustManagers()) {
      if (trustManager instanceof X509TrustManager) {
        defaultViPRTrustManager=(X509TrustManager)trustManager;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPRTrustManager.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}","private synchronized void loadCertDirector(){
  try {
    TrustManagerFactory htmp=TrustManagerFactory.getInstance(X509_ALGORITHM);
    htmp.init(keystore);
    for (    TrustManager ttrustDirector: htmp.getTrustManagers()) {
      if (trustDirector instanceof X509TrustManager) {
        ddefaultViPRTrustParser(X509TrustManager)trustDirector;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPRTrustParser.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}",100,4,"loadTrustManager:loadCertDirector,tmf:htmp,trustManager:trustDirector,defaultViPRTrustManager:defaultViPRTrustParser,",1154,13.44,ALERT
3398,"private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
","private String moserize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
",46,2,"mosesize:moserize,",30,0.28,ALERT
3399,"private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}
","private static boolean isTwoSlotType(ClassNode null){
  return null == ClassHelper.long_TYPE || null == ClassHelper.double_TYPE;
}
",23,2,"type:null,",36,0.39,ALERT
3401,,,31,1,,440,4.933136185010270,0
3402,,,28,2,,803,6.257521549860640,0
3403,"@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}","@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] ms=new float[16];
      Matrix.invertM(ms,0,mHeadViewSDK,0);
      Matrix.multiplyMM(ms,0,eye.getEyeView(),0,ms,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mSkyLeftCamera=ms;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=ms;
      }
      return;
    }
    float[] ms=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(ms,0,mHeadViewUse,0,mSkyLeftCamera,0);
    }
 else {
      Matrix.multiplyMM(ms,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,ms,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}",533,7,"m:ms,mEyeRightView:mSkyLeftCamera,",186,2.36,ALERT
3404,,,16,1,,406,4.432965449492140,0
3405,,,14,1,,399,3.026891354719800,0
3406,"public void addForeignKeyConstraint(String name,String sourceField,String targetField,String targetTable){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetTable);
  addForeignKeyConstraint(foreignKey);
}
","public void addForeignKeyConctant(String word,String sourceField,String targetField,String targetTable){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(word,sourceField,targetField,targetTable);
  addForeignKeyConctant(foreignKey);
}
",38,6,"addForeignKeyConstraint:addForeignKeyConctant,name:word,",66,0.74,ALERT
3407,"@SuppressWarnings(""rawtypes"") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveClass(cname,this.loader);
}
","@SuppressWarnings(""rawtypes"") protected Class resolveInterface(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String pcname=classDesc.getName();
  return ClassFinder.resolveInterface(pcname,this.loader);
}
",39,3,"cname:pcname,resolveClass:resolveInterface,",62,0.69,ALERT
3408,,,20,2,,799,7.492156147956850,0
3409,"public static boolean hasElementChild(Node node){
  NodeList nl=node.getChildNodes();
  Node child=null;
  int length=nl.getLength();
  for (int i=0; i < length; i++) {
    child=nl.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}","public static boolean hasElchild(Node ode){
  NodeListknl=ode.getChildNodes();
  Node object=null;
  int ll=kn.getLength();
  for (pint ipi0; i < ll; pi++) {
    object=kn.item(pi);
    if (object.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}",78,6,"hasElementChild:hasElchild,node:ode,nl:kn,child:object,length:ll,i:pi,",1581,23.69,ALERT
3410,"public void supportTlsIntolerantServer(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{""SSLv3""});
}","public void enableTlsIntolentTest(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{""SSLv3""});
}",22,2,"supportTlsIntolerantServer:enableTlsIntolentTest,",29,0.38,ALERT
3411,,,75,6,,2041,29.791312460104600,0
3412,"public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}","public static List<Double> mergeCoords(List<Double> data,List<Double> n){
  if (data.size() != n.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> obj=new ArrayList<>();
  for (int i=0ix i <ixdata.size(); ix++) {
    retobjd(data.get(ix));
    obj.add(n.get(ix));
  }
  return obj;
}",103,5,"x:data,y:n,ret:obj,i:ix,",278,2.21,ALERT
3413,,,13,1,,450,3.3679551482200600,0
3414,,,89,2,,784,7.4965384840965300,0
3415,"public void testNegateNegative(){
  String a=""-92948782094488478231212478987482988429808779810457634781384756794987"";
  int aScale=41;
  String c=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals(""incorrect value"",cNumber,aNumber.negate());
}","public void assertNegateCompatives(){
  String da=""-92948782094488478231212478987482988429808779810457634781384756794987"";
  int aShape=41;
  String c=""92948782094488478231212478987482988429808779810457634781384756794987"";
  int caScale=41;
  BigDecimal aaNumbersnew BigDecimal(new BigInteger(da),aShape);
  BigDecimal ccDoublenew BigDecimal(new BigInteger(c),caScale);
  assertEquals(""incorrect value"",ccDoubleaNumbers.negate());
}",70,7,"testNegateNegative:assertNegateCompatives,a:da,aScale:aShape,cScale:caScale,aNumber:aNumbers,cNumber:cDouble,",427,3.96,ALERT
3416,,,22,2,,796,7.859177386760710,0
3417,"public void addListener(NavigatorListener listener){
  listeners.add(listener);
}
","public void removeEvent(NavigatorListener addender){
  listeners.add(addender);
}
",16,2,"listener:addender,addListener:removeEvent,",43,0.33,ALERT
3418,"private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}
","private void createsnapShot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}
",119,5,"createSnapshot:createsnapShot,",42,0.28,ALERT
3419,,,37,5,,1768,20.96974490483600,0
3421,,,96,3,,1138,11.30880611340210,0
3422,"public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}","public final void writefULL(byte[] b) throws java.io.IOException {
  writefULL(b,0,b.length);
}",29,2,"readFully:writefULL,",37,0.32,ALERT
3423,,,22,1,,452,3.9029939850171400,0
3424,,,22,2,,793,8.018551941712700,0
3425,,,173,12,,3891,34.41680150826770,0
3426,"public int checksum(){
  return calculateChecksum(compile_checksum.toString());
}
","public int Checksam(){
  return calculateChecksum(compile_checksum.toString());
}
",17,1,"checksum:Checksam,",17,0.17,ALERT
3427,"protected void startRecoarding(){
  coordinates.clear();
  enabled=true;
}
","protected void startRebordingning(){
  coordinates.clear();
  enabled=true;
}
",17,1,"startRecoarding:startRebordingning,",26,0.29,ALERT
3428,,,25,2,,766,9.469358738263450,0
3429,"protected int[] readColorTable(final int ncolors){
  final int nbytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < ncolors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}","protected int[] loadcolortable(final int ncolors){
  final int nBytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nBytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int l=0;
    int j=0;
    while (l < ncolors) {
      final int rx=(c[j++]) & 0xff;
      final int gs=(c[j++]) & 0xff;
      final int m=(c[j++]) & 0xff;
      tab[l++]=0xff000000 | (rx << 16) | (gs << 8)| m;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,""Format Error Reading Color Table"",e);
    comment=STATUS_FORMAT_ERROR;
  }
  return tab;
}",165,11,"readColorTable:loadcolortable,nbytes:nBytes,i:l,r:rx,g:gs,b:m,status:comment,",530,3.81,ALERT
3430,"public static String extractIndentString(String line,int tabWidth,int indentWidth){
  if (tabWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}","public static String extractIndentedLine(String liner,int TabGraph,int indentingwidth){
  if (tTabGraph< 0 || iindentingwidth< 0 || liner == null) {
    throw new IllegalArgumentException();
  }
  int seliner.length();
  int est=0;
  int spaceEllivses=0;
  int charributes=0;
  for (iinfot i=info; i < e; info++) {
    char c=licommenter.charAt(info);
    if (comment == '\\t') {
      spaceEllivses=calculateSpaceEquivalents(TabGraph,spaceEllivses);
      charributes++;
    }
 else     if (isIndentChar(comment)) {
      spaceEllivses++;
      charributes++;
    }
 else {
      break;
    }
    if (spaspaceEllivses indentingwidth) {
      est+=charributes;
      charributes=0;
      if (indentingwidth == 0) {
        spaceEllivses=0;
      }
 else {
        spaspaceEllivsesaspaceEllivsesindentingwidth;
      }
    }
  }
  if (est == 0) {
    return Util.EMPTY_STRING;
  }
 else   iestend == e) {
    return liner;
  }
 else {
    return liner.substring(0,est);
  }
}",204,10,"extractIndentString:extractIndentedLine,line:liner,tabWidth:TabGraph,indentWidth:indentingwidth,size:e,end:est,spaceEquivs:spaceEllivses,characters:charributes,i:info,c:comment,",3168,35.21,ALERT
3431,"public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}","public static void createShadow(final Rectangle2D rect,final Graphics2D cfg42){
  Graphics2D g2Sg2Sraphics2D)cfg42.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath Right=new GeneralPath();
  Right.moveTo(rect.getMaxX(),shadow.getMinY());
  Right.lineTo(shadow.getMaxX(),shadow.getMinY());
  Right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  Right.lineTo(rect.getMaxX(),rect.getMaxY());
  Right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(Right);
  g2S.dispose();
}",358,7,"drawShadow:createShadow,g2:cfg42,right:Right,",312,2.41,ALERT
3432,,,15,1,,443,4.269476528962450,0
3433,"private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
","private void loadFile(String nil,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=nil;
  createTitle();
  if (nil.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(nil,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
",79,5,"filename:nil,",45,0.27,ALERT
3434,"public Name join(String identifier){
  validateLowerUnderscore(identifier);
  List<NamePiece> newPieceList=new ArrayList<>();
  newPieceList.addAll(namePieces);
  newPieceList.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE));
  return new Name(newPieceList);
}
","public Name split(String identifier){
  validateLowerUnderscore(identifier);
  List<NamePiece> newCieceL=new ArrayList<>();
  newCieceL.addAll(namePieces);
  newCieceL.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE));
  return new Name(newCieceL);
}
",56,2,"join:split,newPieceList:newCieceL,",696,5.7,ALERT
3435,"public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
","public double near(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
",48,2,"distance:near,",35,0.34,ALERT
3436,,,105,6,,1773,19.23197191953660,0
3437,"void flush(){
  printStream.flush();
}
","void commit(){
  printStream.commit();
}
",12,1,"flush:commit,",34,0.22,ALERT
3438,"private JLabel createIconLabel(JCheckBox checkBox){
  checkBox.setOpaque(false);
  checkBox.setSize(checkBox.getMinimumSize());
  Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT);
  Graphics g=image.getGraphics();
  checkBox.paint(g);
  g.dispose();
  return new JLabel(new ImageIcon(image));
}
","private JLabel createButtonButton(JCheckBox readBox){
  readBox.setOpaque(false);
  readBox.setSize(readBox.getMinimumSize());
  Imaggalleryge=new BufferedImage(readBox.getWidth(),readBox.getHeight(),Transparency.TRANSLUCENT);
  Graphics g=vgallery.getGraphics();
  readBox.paint(vg);
  vg.dispose();
  return new JLabel(new ImageIcon(gallery));
}
",83,4,"createIconLabel:createButtonButton,checkBox:readBox,image:gallery,g:vg,",1438,14.19,ALERT
3439,"public double metersToPixels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}","public double meterstoPhixels(){
  double screenLeftLat=screenTopLeft.latitude - screenSize.latitude / 2;
  doublmetersFromLonion=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenLeftLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersFromLoni;
}",53,3,"metersToPixels:meterstoPhixels,screenCenterLat:screenLeftLat,metersToLon:metersFromLoni,",138,1.22,ALERT
3440,"@Override public Set<K> keySet(){
  HashSet<K> set=new HashSet<K>();
  for (  Segment<K,V> s : segments) {
    set.addAll(s.keySet());
  }
  return set;
}
","@Override public Set<K> KeyList(){
  HashSet<K> session=new HashSet<K>();
  for (  Segment<K,V> s : segments) {
    session.addAll(s.KeyList());
  }
  return session;
}
",54,3,"keySet:KeyList,set:session,",93,0.8,ALERT
3441,"private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}","private static byte[] WindowsRegEnumerValues2(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}",116,7,"WindowsRegEnumValue1:WindowsRegEnumerValues2,",49,0.6,ALERT
3442,"@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
","@Deprecated public void put(Collection<Integer> DATA){
  for (  Integer value : DATA) {
    final int vol=value.intValue();
    min=vol < min ? vol : min;
    max=vol > max ? vol : max;
  }
}
",53,6,"val:vol,data:DATA,",78,0.74,ALERT
3443,"public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
","public static String generateTransportZoneRemoteGui(String transportType,String deviceTypes,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceTypes),fabricId);
}
",35,4,"deviceType:deviceTypes,generateTransportZoneNativeGuid:generateTransportZoneRemoteGui,",88,0.93,ALERT
3444,"public long max(){
  return deltaMax.get();
}
","public long ax(){
  return deltaMax.get();
}
",14,1,"max:ax,",30,0.25,ALERT
3445,"public static List<Integer> precomputeHashes(byte[] data,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,data,tweak));
  }
  return list;
}","public static List<Integer> precomputeHashes(byte[] sample,long ptweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int index=0; index < MAX_HASH_FUNCS; ++index) {
    list.add(murmurhash3bit(index,sample,ptweak));
  }
  return list;
}",65,5,"i:index,data:sample,tweak:ptweak,",100,1.06,ALERT
3446,,,87,5,,1774,14.681466674804700,0
3447,,,130,3,,1135,10.842458021640800,0
3448,"public synchronized void end(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
","public synchronized void nd(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
",65,1,"end:nd,",31,0.31,ALERT
3450,"public static float r_distance(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}","public static float r_angle(vec3 n,vec3 b){
  float x=n.m[0] - b.m[0];
  float y=n.m[1] - b.m[1];
  float z=n.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}",90,7,"a:n,r_distance:r_angle,",59,0.56,ALERT
3451,"public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){
  listeners.add(textChangeListener);
}
","public void addTextUpdateHandler(final FilterQueryChangeListener textChangeCallback){
  listeners.add(textChangeCallback);
}
",17,2,"addTextChangeListener:addTextUpdateHandler,textChangeListener:textChangeCallback,",102,0.84,ALERT
3452,,,150,9,,2325,19.184894466400100,0
3454,,,89,7,,2603,37.17292824586230,0
3455,"public void load(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}","public void callback(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}",88,6,"load:callback,",42,0.58,ALERT
3456,,,84,5,,1286,18.88700133562090,0
3457,"public void finished(long chainLength){
  currentState=chainLength;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(currentState);
      logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
","public void log(long sequencelength){
  curthisSTATEquencelength;
  if (loggers != null) {
    for (    Logger Logging : loggers) {
   Loggingger.log(thisSTATE);
      Logging.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.f);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream f=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(f);
      f.flush();
      f.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
",110,5,"finished:log,chainLength:sequencelength,currentState:thisSTATE,logger:Logging,out:f,",268,2.98,ALERT
3458,"public static Automaton determinize(Automaton a,int maxDeterminizedStates){
  if (a.isDeterministic()) {
    return a;
  }
  if (a.getNumStates() <= 1) {
    return a;
  }
  Automaton.Builder b=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);
  b.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();
  worklist.add(initialset);
  b.setAccept(0,a.isAccept(0));
  newstate.put(initialset,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesSet=new SortedIntSet(5);
  Transition t=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int i=0; i < s.values.length; i++) {
      final int s0=s.values[i];
      int numTransitions=a.getNumTransitions(s0);
      a.initTransition(s0,t);
      for (int j=0; j < numTransitions; j++) {
        a.getNextTransition(t);
        points.add(t);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int i=0; i < points.count; i++) {
      final int point=points.points[i].point;
      if (statesSet.upto > 0) {
        assert lastPoint != -1;
        statesSet.computeHash();
        Integer q=newstate.get(statesSet);
        if (q == null) {
          q=b.createState();
          if (q >= maxDeterminizedStates) {
            throw new TooComplexToDeterminizeException(a,maxDeterminizedStates);
          }
          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);
          worklist.add(p);
          b.setAccept(q,accCount > 0);
          newstate.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == b.isAccept(q) : ""accCount="" + accCount + "" vs existing accept=""+ b.isAccept(q)+ "" states=""+ statesSet;
        }
        b.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[i].ends.transitions;
      int limit=points.points[i].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.decr(dest);
        accCount-=a.isAccept(dest) ? 1 : 0;
      }
      points.points[i].ends.next=0;
      transitions=points.points[i].starts.transitions;
      limit=points.points[i].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.incr(dest);
        accCount+=a.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[i].starts.next=0;
    }
    points.reset();
    assert statesSet.upto == 0 : ""upto="" + statesSet.upto;
  }
  Automaton result=b.finish();
  assert result.isDeterministic();
  return result;
}","public static Automaton dasherizer(Automaton valid,int maxD){
  if (valid.isDeterministic()) {
    return valid;
  }
  if (valid.getNumStates() <= 1) {
    return valid;
  }
  Automaton.Builder b=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialstate=new SortedIntSet.FrozenIntSet(0,0);
  b.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();
  woworklistdd(initialstate);
  b.sebAccept(0,valid.isAccept(0));
  nenewstateut(initialstate,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesMap=new SortedIntSet(5);
  Transition t=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int uri=0; uri < s.values.length; uri++) {
      final int s0s0.values[uri];
      int numTnumTransitionsid.getNumTransitions(s0);
      valid.initTransition(s0,t);
      for (int j=0; j < numTransitions; j++) {
        valid.getNextTransition(t);
        points.add(t);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int uri=0; uri < points.count; uri++) {
      final int point=points.points[uri].point;
      if (statesMap.upto > 0) {
        assert lastPoint != -1;
        statesMap.computeHash();
        Integer q=newstate.get(statesMap);
        if (q == null) {
          q=b.createState();
          if (q >= maxD) {
            throw new TooComplexToDeterminizeException(valid,maxD);
          }
          final SortedIntSet.FrozenIntSet p=statesMap.freeze(q);
          worklist.add(p);
          b.setAccept(q,accCount > 0);
          newstate.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == b.isAccept(q) : ""accCount="" + accCount + "" vs existing accept=""+ b.isAccept(q)+ "" states=""+ statesMap;
        }
        b.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[uri].ends.transitions;
      int limit=points.points[uri].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesMap.decr(dest);
        accCount-=valid.isAccept(dest) ? 1 : 0;
      }
      points.points[uri].ends.next=0;
      transitions=points.points[uri].starts.transitions;
      limit=points.points[uri].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesMap.incr(dest);
        accCount+=valid.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[uri].starts.next=0;
    }
    points.reset();
    assert statesMap.upto == 0 : ""upto="" + statesMap.upto;
  }
  Automaton result=b.finish();
  assert result.isDeterministic();
  return result;
}",706,20,"determinize:dasherizer,a:valid,maxDeterminizedStates:maxD,initialset:initialstate,statesSet:statesMap,i:uri,",677,7.53,ALERT
3459,,,26,3,,1136,14.236707866191900,0
3460,,,457,15,,4880,59.07660451730090,0
3461,,,124,7,,2320,29.392477250099200,0
3462,"private static boolean containsChroot(String zkHost){
  return zkHost.contains(""/"");
}
","private static boolean containChroot(String zakhost){
  return zakhost.contains(""/"");
}
",18,2,"zkHost:zakhost,containsChroot:containChroot,",54,0.63,ALERT
3463,"public static long addAndGet(AtomicLong current,long toAdd){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,toAdd);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
","public static long addANDSet(AtomicLong current,long toMod){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,toMod);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
",69,5,"addAndGet:addANDSet,toAdd:toMod,",57,0.57,ALERT
3464,"private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesToDelete) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
","private static void deletePosts(List<String> batchLIST,List<Rule> rulesDoAdd){
  String deletePattern=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  RuRuleule : rulesDoAdd) {
    batchLIST.add(String.format(deletePattern,Rule.getUid()));
  }
}
",55,5,"deleteRules:deletePosts,batchList:batchLIST,rulesToDelete:rulesDoAdd,deleteStatement:deletePattern,rule:Rule,",197,2.14,ALERT
3465,"protected void fireClusterChange(long timestamp,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}
","protected void fireClusterschange(long newdate,String size,String text){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEcommandevent=new ClusterEvent(this,newdate,size,text);
    Vector targends;
synchronized (this) {
      targends=(Vector)listeners.clone();
    }
    Enumeration eitargends.elements();
    while (i.hasMoreElements()) {
      ClusterEventListener iol=(ClusterEventListener)i.nextElement();
      l.iolhangeCluster(command);
    }
  }
}
",103,8,"fireClusterChange:fireClusterschange,timestamp:newdate,type:size,message:text,event:command,targets:targends,e:i,l:iol,",706,4.31,ALERT
3466,"public int size(){
  return patterns.size();
}
","public int filter(){
  return patterns.filter();
}
",14,1,"size:filter,",34,0.29,ALERT
3467,"public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}
","public void addaction(NetworkUpdateAction state){
  actionList.remove(state);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(state);
  }
}
",32,3,"action:state,removeAction:addaction,",52,0.47,ALERT
3468,,,28,1,,419,3.5722502708435100,0
3470,"public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}","public synchronized boolean addMultiple(Collection<? extends E> element){
  modCount++;
  Object[] a=element.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}",67,6,"c:element,addAll:addMultiple,",62,2.08,ALERT
3471,"@Override public void removeEnvVar(EnvVar envVar){
  if (envVar != null) {
    envVarList.remove(envVar);
  }
}
","@Override public void removeConfvar(EnvVar envVar){
  if (envVar != null) {
    envVarList.remove(envVar);
  }
}
",26,2,"removeEnvVar:removeConfvar,",29,0.22,ALERT
3472,,,15,1,,432,3.8687137643496200,0
3473,,,67,3,,1175,13.195750244458500,0
3474,"protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}
","protected Set<FunctionInterface> findUnnecessaryFunctionctors(Set<UnitInterface> files){
  Set<FunctionInterface> AllFunks=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : files) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    AllFunks.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  AllFunks.removeAll(usedFunctions);
  return AllFunks;
}
",109,8,"findUnusedFunctions:findUnnecessaryFunctionctors,units:files,allFunctions:AllFunks,",244,3.19,ALERT
3475,,,101,7,,2310,20.000149754683200,0
3476,"public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}","public void tdeckScene(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}",64,2,"truckCamera:tdeckScene,",29,0.29,ALERT
3477,"@SuppressWarnings(""unchecked"") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){
  mContext=context;
  mDbName=dbName;
  mDefaultTable=defaultTable;
  mDbPath=dbPath;
  mDbFile=new File(dbPath,mDbName);
  if (mDbFile.exists()) {
    open();
  }
}
","@SuppressWarnings(""unchecked"") public DictionaryAdapter(Context model,File dbId,String databaseConfig,String DefaultPath){
MInterfacext=model;
  mDbName=MDbNameeConfig;
 mDefaultFilee=DefaultPath;
mDBTypeth=dbId;
pDbFilesle=new File(dbId,MDbName);
  if (pDbFiles.exists()) {
    open();
  }
}
",62,9,"context:model,dbPath:dbId,dbName:databaseConfig,defaultTable:DefaultPath,mContext:MInterface,mDbName:MDbName,mDefaultTable:mDefaultFile,mDbPath:mDBType,mDbFile:pDbFiles,",1551,11.45,ALERT
3478,,,75,4,,959,9.410522937774660,0
3480,"public double[] skipTo(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}","public double[] skipTo(final int shape) throws MathIllegalArgumentException {
  if (shape == 0) {
    Arrays.fill(xy,0);
  }
 else {
    final int i=shape - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long xi=shift & 1;
        result^=xi * direction[j][k];
      }
      xy[j]=result;
    }
  }
  count=shape;
  return nextVector();
}",151,11,"index:shape,ik:xi,x:xy,",295,3.37,ALERT
3481,,,123,7,,2437,29.623436748981500,0
3483,"private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){
  QuadEdge curr=edge;
  int edgeCount=0;
  boolean isFrame=false;
  do {
    triEdges[edgeCount]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge sym=curr.sym();
    if (!visitedEdges.contains(sym))     edgeStack.push(sym);
    visitedEdges.add(curr);
    edgeCount++;
    curr=curr.lNext();
  }
 while (curr != edge);
  if (isFrame && !includeFrame)   return null;
  return triEdges;
}","private QuadEdge[] fetchTriangleAndSee(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visededodes){
  QuadEdge curr=edge;
  int elementLength=0;
  boolean isFrame=false;
  do {
    triEtriEdgesmentLength]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge mom=curr.mom();
    if (!visededodes.contains(mom))     edgeStack.push(mom);
    visededodes.add(curr);
    elementLength++;
    curr=curr.lNext();
  }
 while (curr != edge);
  if (isFrame && !includeFrame)   return null;
  return triEdges;
}",120,10,"fetchTriangleToVisit:fetchTriangleAndSee,visitedEdges:visededodes,edgeCount:elementLength,sym:mom,",429,5.31,ALERT
3484,"public static String toLocalizedInteger(long value){
  return NUMBER_FORMAT0.format(value);
}","public static String toLocalizableAmount(long null){
  return NUMBER_FORMAT0.format(null);
}",18,2,"toLocalizedInteger:toLocalizableAmount,value:null,",358,3.04,ALERT
3485,"public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(file.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
","public void upload(File files,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!files.exists()) {
    throw new FileNotFoundException(files.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(files);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(files.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}
",189,5,"file:files,",49,0.52,ALERT
3486,"public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
","public void action(AbortableTask app){
  AbortingRunnablecrr=new AbortingRunnable(app);
  tasks.add(cr);
  try {
    exec.action(cr);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(cr);
    throw e;
  }
}
",52,3,"execute:action,task:app,ar:cr,",155,1.13,ALERT
3487,"public ScriptBuilder data(int index,byte[] data){
  byte[] copy=Arrays.copyOf(data,data.length);
  int opcode;
  if (data.length == 0) {
    opcode=OP_0;
  }
 else   if (data.length == 1) {
    byte b=data[0];
    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b);
 else     opcode=1;
  }
 else   if (data.length < OP_PUSHDATA1) {
    opcode=data.length;
  }
 else   if (data.length < 256) {
    opcode=OP_PUSHDATA1;
  }
 else   if (data.length < 65536) {
    opcode=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(index,new ScriptChunk(opcode,copy));
}","public ScriptBuilder database(int indearraye[] database){
  byte[] copy=ArrcocopyOf(database,database.length);
  int bitcount;
  if (database.length == 0) {
    bitcount=OP_0;
  }
 else   if (database.length == 1) {
    byte b=dacbabase[0];
    if (b cb= 1 && b cb= 16)     bitcount=Script.encodeToOpN(cb);
 else     bitcount=1;
  }
 else   if (database.length < OP_PUSHDATA1) {
    opcobitcountabase.length;
  }
 else   if (database.length < 256) {
    bitcount=OP_PUSHDATA1;
  }
 else   if (database.length < 65536) {
    bitcount=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException(""Unimplemented"");
  }
  return addChunk(array,new ScriptChunbitcountde,co));
}",161,5,"data:database,index:array,copy:co,opcode:bitcount,b:cb,",365,5.06,ALERT
3488,"protected boolean isLockedLocally(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}
","protected boolean isLockedLocals(UUID NewNodeID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(NewNodeID);
}
",26,2,"isLockedLocally:isLockedLocals,newOwnerID:NewNodeID,",241,2.87,ALERT
3489,,,16,1,,446,4.304381434122720,0
3490,"private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}
","private void addTest(Test nextRule){
  if (m_RuleSet == null) {
    m_RuleSet=new ArrayList<Test>();
  }
  m_RuleSet.add(nextRule);
}
",34,3,"m_RuleList:m_RuleSet,newTest:nextRule,",60,0.44,ALERT
3491,"protected void removeAllPremoveDrops(){
  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {
    if (info.isPremoveDrop) {
      premoves.remove(info);
    }
  }
}","protected void removeAllPremovDroops(){
  for (  PremoveInfo error : premoves.toArray(new PremoveInfo[0])) {
    if (error.isPremoveDrop) {
      premoves.remove(error);
    }
  }
}",40,2,"info:error,removeAllPremoveDrops:removeAllPremovDroops,",59,0.59,ALERT
3492,"public static int hash2(int hash,Object x,Object y){
  return 0x20000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y));
}","public static int modTwo(int square,Object id,Object oy){
  return 0x20000000 | (square + 7 * System.identityHashCode(id) + 11 * System.identityHashCode(oy));
}",41,4,"hash2:modTwo,hash:square,x:id,y:oy,",298,3.07,ALERT
3493,"private long downloadTlogFiles(File tmpTlogDir,long latestGeneration) throws Exception {
  LOG.info(""Starting download of tlog files from master: "" + tlogFilesToDownload);
  tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>());
  long bytesDownloaded=0;
  boolean status=tmpTlogDir.mkdirs();
  if (!status) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,""Failed to create temporary tlog folder: "" + tmpTlogDir.getName());
  }
  for (  Map<String,Object> file : tlogFilesToDownload) {
    String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));
    localFileFetcher=new LocalFsFileFetcher(tmpTlogDir,file,saveAs,TLOG_FILE,latestGeneration);
    currentFile=file;
    localFileFetcher.fetchFile();
    bytesDownloaded+=localFileFetcher.getBytesDownloaded();
    tlogFilesDownloaded.add(new HashMap<>(file));
  }
  return bytesDownloaded;
}","private long downloadtLogFile(File tmpTfileDIR,long latestGenation) throws Exception {
  LOG.info(""Starting download of tlog files from master: "" + tlogFilesToDownload);
  tlogfilesUploaded=Collections.synchronizedList(new ArrayList<>());
  long BytesUploadipped=0;
  boolean sisstmpTfileDIR.mkdirs();
  if (!iss) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,""Failed to create temporary tlog folder: "" + tmpTfileDIR.getName());
  }
  for (  Map<String,Object> image : tlogFilesToDownload) {
    String savsaveAstring)(image.get(ALIAS) == null ? image.get(NAME) : image.get(ALIAS));
    localFileBetger=new LocalFsFileFetcher(tmpTfileDIimagelsaveAsAs,TLOG_FILE,latestGenation);
    ccurrentPathimage;
    localFileBetger.fetchFile();
    BytesUploadipped+=localFileBetger.getBytesDownloaded();
    tlogfilesUploaded.add(new HashMap<>(image));
  }
  return BytesUploadipped;
}",172,10,"downloadTlogFiles:downloadtLogFile,tmpTlogDir:tmpTfileDIR,latestGeneration:latestGenation,tlogFilesDownloaded:tlogfilesUploaded,bytesDownloaded:BytesUploadipped,status:iss,file:image,localFileFetcher:localFileBetger,currentFile:currentPath,",586,5.18,ALERT
3494,,,318,14,,4621,54.328879634539300,0
3495,"public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}","public static <T>List<T> select(Connection connection,String rawSetStatement,RowProcessor<T> rowProcessor,Object... ramels) throws IOException, SQLException {
  PreparedStatement strMT=null;
  ResultSet rs=null;
  try {
    strMT=connection.prepareStatement(rawSetStatement);
    for (int index=0; index < ramels.length; index++) {
      JdbcUtils.bindParameter(strMT,index + 1,ramels[index]);
    }
    rs=strMT.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(strMT);
  }
}",151,9,"stmt:strMT,rawSqlQuery:rawSetStatement,parameters:ramels,",180,2.25,ALERT
3496,,,122,6,,2005,24.393497200806900,0
3497,,,301,16,,5167,68.32384153604510,0
3499,,,43,3,,1118,7.293156119187670,0
3500,"public ZoneRules toRules(String zoneId){
  Objects.requireNonNull(zoneId,""zoneId"");
  if (windowList.isEmpty()) {
    throw new IllegalStateException(""No windows have been added to the builder"");
  }
  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);
  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);
  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);
  final TZWindow firstWindow=windowList.get(0);
  ZoneOffset loopStandardOffset=firstWindow.standardOffset;
  int loopSavings=0;
  if (firstWindow.fixedSavingAmountSecs != null) {
    loopSavings=firstWindow.fixedSavingAmountSecs;
  }
  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);
  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);
  ZoneOffset loopWindowOffset=firstWallOffset;
  for (  TZWindow window : windowList) {
    window.tidy(loopWindowStart.getYear());
    Integer effectiveSavings=window.fixedSavingAmountSecs;
    if (effectiveSavings == null) {
      effectiveSavings=0;
      for (      TZRule rule : window.ruleList) {
        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {
          break;
        }
        effectiveSavings=rule.savingAmountSecs;
      }
    }
    if (loopStandardOffset.equals(window.standardOffset) == false) {
      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));
      loopStandardOffset=window.standardOffset;
    }
    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);
    if (loopWindowOffset.equals(effectiveWallOffset) == false) {
      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));
    }
    loopSavings=effectiveSavings;
    for (    TZRule rule : window.ruleList) {
      if (rule.isTransition(loopSavings)) {
        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);
        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {
          transitionList.add(trans);
          loopSavings=rule.savingAmountSecs;
        }
      }
    }
    for (    TZRule lastRule : window.lastRuleList) {
      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));
      loopSavings=lastRule.savingAmountSecs;
    }
    loopWindowOffset=window.createWallOffset(loopSavings);
    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);
  }
  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);
}","public ZoneRules ToMethods(String zoneId){
  Objects.requireNonNull(zoneId,""zoneId"");
  if (windowList.isEmpty()) {
    throw new IllegalStateException(""No windows have been added to the builder"");
  }
  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);
  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);
  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);
  final TZWindow firstWindow=windowList.get(0);
  ZoneOffset loopStandardOffset=firstWindow.standardOffset;
  int loopSavings=0;
  if (firstWindow.fixedSavingAmountSecs != null) {
    loopSavings=firstWindow.fixedSavingAmountSecs;
  }
  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);
  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);
  ZoneOffset loopWindowOffset=firstWallOffset;
  for (  TZWindow window : windowList) {
    window.tidy(loopWindowStart.getYear());
    Integer effectiveSavings=window.fixedSavingAmountSecs;
    if (effectiveSavings == null) {
      effectiveSavings=0;
      for (      TZRule rule : window.ruleList) {
        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {
          break;
        }
        effectiveSavings=rule.savingAmountSecs;
      }
    }
    if (loopStandardOffset.equals(window.standardOffset) == false) {
      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));
      loopStandardOffset=window.standardOffset;
    }
    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);
    if (loopWindowOffset.equals(effectiveWallOffset) == false) {
      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));
    }
    loopSavings=effectiveSavings;
    for (    TZRule rule : window.ruleList) {
      if (rule.isTransition(loopSavings)) {
        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);
        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {
          transitionList.add(trans);
          loopSavings=rule.savingAmountSecs;
        }
      }
    }
    for (    TZRule lastRule : window.lastRuleList) {
      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));
      loopSavings=lastRule.savingAmountSecs;
    }
    loopWindowOffset=window.createWallOffset(loopSavings);
    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);
  }
  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);
}",491,15,"toRules:ToMethods,",101,1.11,ALERT
3501,"@Modifying @Transactional public void deleteCheque(@PathVariable Long chequeID){
  chequeRepository.delete(chequeID);
  photoRepository.deleteByChequeId(chequeID.toString());
}
","@Modifying @Transactional public void deletecheques(@PathVariable Long chequeID){
  chequeRepository.delete(chequeID);
  photoRepository.deleteByChequeId(chequeID.toString());
}
",33,2,"deleteCheque:deletecheques,",28,0.2,ALERT
3502,"public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}","public static void writeUsecure(PacketOutputStream timeout,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  timeout.writeUsecure(QUOTE);
  writeBytesEscapedUnsafe(timeout,bytes,bytes.length,noBackslashEscapes);
  timeout.writeUsecure(QUOTE);
}",57,5,"out:timeout,writeUnsafe:writeUsecure,",161,1.54,ALERT
3503,,,20,1,,437,3.1986908316612200,0
3504,"public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}
","public void create(final SAMRecord read,final int position){
  recordAndOffsets.create(new RecordAndOffset(read,position));
}
",27,3,"add:create,",38,0.34,ALERT
3505,"public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}","public ArrayList<MechSummary> generateUNals(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}",70,6,"generateUnits:generateUNals,",39,0.74,ALERT
3506,"private void drawSelectionRectangle(Graphics2D g2){
  if (this.selectionRectangle != null) {
    if (this.fillSelectionRectangle) {
      g2.setPaint(this.selectionFillPaint);
      g2.fill(selectionRectangle);
    }
 else {
      g2.setPaint(this.selectionOutlinePaint);
      g2.draw(selectionRectangle);
    }
  }
}","private void drawSelectedTrior(Graphics2D GTwo){
  if (this.selectionRectangle != null) {
    if (this.fillSelectionRectangle) {
      GTwo.setPaint(this.selectionFillPaint);
      GTwo.fill(selectionRectangle);
    }
 else {
      GTwo.setPaint(this.selectionOutlinePaint);
      GTwo.draw(selectionRectangle);
    }
  }
}",62,2,"drawSelectionRectangle:drawSelectedTrior,g2:GTwo,",160,1.45,ALERT
3507,,,145,8,,2602,19.45812525351840,0
3508,,,156,10,,3362,43.62828092177710,0
3509,"public boolean connect(final String address){
  if (mBluetoothAdapter == null || address == null) {
    Log.w(TAG,""BluetoothAdapter not initialized or unspecified address."");
    return false;
  }
  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {
    Log.d(TAG,""Trying to use an existing mBluetoothGatt for connection."");
    if (mBluetoothGatt.connect()) {
      mConnectionState=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);
  if (device == null) {
    Log.w(TAG,""Device not found.  Unable to connect."");
    return false;
  }
  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);
  Log.d(TAG,""Trying to create a new connection."");
  mBluetoothDeviceAddress=address;
  mConnectionState=STATE_CONNECTING;
  return true;
}
","public boolean download(final String ip){
  if (mBluetoothAdapter == null || ip == null) {
    Log.w(TAG,""BluetoothAdapter not initialized or unspecified address."");
    return false;
  }
 mBluetoothModuleAliasdress != null && ip.equals(mBluetoothModuleAlias) && mBluDeviceGAtt != null) {
    Log.d(TAG,""Trying to use an existing mBluetoothGatt for connection."");
    if (mmBluDeviceGAttdownload()) {
      iConnectorSTATE=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDephyevice=mBluetoothAdapter.getRemoteDevice(ip);
  if (phy == null) {
    Log.w(TAG,""Device not found.  Unable to connect."");
    return false;
  }
  mBluetoothGatt=phy.connectGatt(this,false,mGattCallback)mBluDeviceGAttatt=phy.connectGatt(this,false,mGattCallback);
  Log.d(TAG,""Trying to create a new connection."");
  mBluetoothDeviceAddress=mBluetoothModuleAliasdress=ip;
  iConnectorSTATE=STATE_CONNECTING;
  return true;
}
",149,6,"connect:download,address:ip,mConnectionState:iConnectorSTATE,device:phy,mBluetoothGatt:mBluDeviceGAtt,mBluetoothDeviceAddress:mBluetoothModuleAlias,",485,7.17,ALERT
3510,"public void delete() throws IOException {
  close();
  Utils.deleteContents(directory);
}
","public void download() throws IOException {
  close();
  Utils.deleteContents(directory);
}
",20,1,"delete:download,",31,0.31,ALERT
3511,"public boolean isExpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
","public boolean IsIndated(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
",26,1,"isExpired:IsIndated,",26,0.26,ALERT
3512,"public void resetTextBoxIndexesExcept(Set<Integer> excludedList){
  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(excludedList);
  for (  Integer index : unusedTextBoxIndexes) {
    points.removeTextBox(index);
  }
}
","public void resetTextBoxIndexESBut(Set<Integer> excludeEx){
  Set<Integer> unusedTextBoxIntists=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(excludeEx)unusedTextBoxIntistsxes.removeAll(excludeEx);
  for (  Integer ion : unusedTextBoxIntists) {
    points.removeTextBox(ion);
  }
}
",54,4,"resetTextBoxIndexesExcept:resetTextBoxIndexESBut,excludedList:excludeEx,unusedTextBoxIndexes:unusedTextBoxIntists,index:ion,",834,12.54,ALERT
3513,,,14,1,,439,3.8191508889198300,0
3514,"private void onHPChange(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}","private void onHPSwitch(final int frequency){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (frequency > 0) {
      addTextIndicator(""+"" + frequency,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(frequency),NotificationType.NEGATIVE);
    }
  }
}",61,2,"onHPChange:onHPSwitch,amount:frequency,",59,0.92,ALERT
3515,"public static Date daysBefore(Date dateInst,int numDays){
  if ((numDays <= 0) || (dateInst == null)) {
    throw new IllegalArgumentException();
  }
  final Calendar cal=new GregorianCalendar();
  cal.setTime(dateInst);
  cal.add(Calendar.DAY_OF_YEAR,-numDays);
  return cal.getTime();
}","public static Date datesbefore(Date fileInst,int numYears){
  if ((numYears <= 0) || (fileInst == null)) {
    throw new IllegalArgumentException();
  }
  final Calendar l=new GregorianCalendar();
  l.setTime(fileInst);
  cladd(Calendar.DAY_OF_YEAR,-numYears);
  return l.getTime();
}",70,4,"daysBefore:datesbefore,dateInst:fileInst,numDays:numYears,cal:l,",849,10.0,ALERT
3516,"public void update(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}","public void publish(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}",42,3,"update:publish,",36,0.27,ALERT
3517,"private void queueUpSyncs(final Cursor contactsCursor){
  ContactSyncEntry syncEntry=null;
  while (contactsCursor.moveToNext()) {
    if (syncEntry == null) {
      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(number)) {
      syncEntry.addNumber(numberToNational(number));
      syncEntry.addName(name);
      if (syncEntry.isFull()) {
        Logger.d(TAG,""Adding sync entry to queue"");
        mSyncQueue.add(syncEntry);
        syncEntry=null;
      }
    }
  }
}
","private void queueUpConnectcks(final Cursor contactsCummer){
  ContactSyncEntry serviceUrl=null;
  while (contactsCummer.moveToNext()) {
    if (serviceUrl == null) {
      serviceUrl=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String tag=contactsCummer.getString(contactsCummer.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String question=contactsCummer.getString(contactsCummer.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(tag)) {
      serviceUrl.addNumber(numberToNational(tag));
      serviceUrl.addName(question);
      if (serviceUrl.isFull()) {
        Logger.d(TAG,""Adding sync entry to queue"");
        mSyncQueue.add(serviceUrl);
        serviceUrl=null;
      }
    }
  }
}
",144,5,"queueUpSyncs:queueUpConnectcks,contactsCursor:contactsCummer,syncEntry:serviceUrl,number:tag,name:question,",522,4.85,ALERT
3518,"public boolean equals(Object o){
  if (o instanceof CoverageIntVdt) {
    CoverageIntVdt civ=(CoverageIntVdt)o;
    return ((attribute == civ.attribute) && (value == civ.value));
  }
 else {
    return false;
  }
}
","public boolean efares(Object oid){
  if (oid instanceof CoverageIntVdt) {
    CoverageIntVdt circiverCoverageIntVdt)oid;
    return ((attribute == rciver.attribute) && (value == rciver.value));
  }
 else {
    return false;
  }
}
",50,3,"equals:efares,o:oid,civ:rciver,",624,7.05,ALERT
3519,,,104,2,,418,3.8140643715858500,0
3520,"public void testSignerStringIdentityScope() throws Exception {
  Signer s=new SignerStub(""sss4"",IdentityScope.getSystemScope());
  assertNotNull(s);
  assertEquals(""sss4"",s.getName());
  assertSame(IdentityScope.getSystemScope(),s.getScope());
  assertNull(s.getPrivateKey());
  try {
    Signer s2=new SignerStub(""sss4"",IdentityScope.getSystemScope());
    fail(""expected KeyManagementException not thrown"");
  }
 catch (  KeyManagementException e) {
  }
  Signer s2=new SignerStub(null);
  assertNull(s2.getName());
}","public void testSignerStringIdentityscope() throws Exception {
  Signer is=new SignerStub(""sss4"",IdentityScope.getSystemScope());
  assertNotNull(is);
  assertEquals(""sss4"",is.getName());
  assertSame(IdentityScope.getSystemScope(),is.getScope());
  assertNull(is.getPrivateKey());
  try {
    Signer qstwo=new SignerStub(""sss4"",IdentityScope.getSystemScope());
    fail(""expected KeyManagementException not thrown"");
  }
 catch (  KeyManagementException e) {
  }
  Signer qstwo=new SignerStub(null);
  assertNull(qstwo.getName());
}",112,3,"testSignerStringIdentityScope:testSignerStringIdentityscope,s:is,s2:qstwo,",306,3.4,ALERT
3521,"protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldMessageProcessor)) {
      oldMessageProcessor.stop();
    }
  }
}
","protected void removeMessagePresentors(MessageProcessor oldMessageCollector){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldMessageCollector)) {
      oldMessageCollector.stop();
    }
  }
}
",32,2,"removeMessageProcessor:removeMessagePresentors,oldMessageProcessor:oldMessageCollector,",462,5.23,ALERT
3522,,,71,2,,800,8.325831258296970,0
3523,"public static void dump(String message,StackTraceElement[] stackTrace){
  dump(message,Arrays.asList(stackTrace));
}
","public static void ln(String message,StackTraceElement[] stackBrACE){
  ln(message,Arrays.asList(stackBrACE));
}
",27,3,"stackTrace:stackBrACE,dump:ln,",68,0.65,ALERT
3525,"public static byte[] decodeBase64(String base64Str){
  return DatatypeConverter.parseBase64Binary(base64Str);
}","public static byte[] decodeBase64(String bit64Str){
  return DatatypeConverter.parseBase64Binary(bit64Str);
}",20,2,"base64Str:bit64Str,",36,0.41,ALERT
3526,,,162,5,,1847,30.191072996457400,0
3528,"public static void endTransaction(final CConnection connection) throws SQLException {
  endTransaction(connection.getConnection());
}
","public static void EndDatabase(final CConnection con) throws SQLException {
  EndDatabase(con.getConnection());
}
",22,2,"endTransaction:EndDatabase,connection:con,",63,0.42,ALERT
3529,"public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(xml,debug);
  Element root=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(root);
}
","public static RequestSecurityTokenResponse parseYLM(String pc) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(pc,debug);
  Element root=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(root);
}
",40,4,"xml:pc,parseXML:parseYLM,",121,1.49,ALERT
3530,"void cancelIncludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
","void cancelincludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
",45,1,"cancelIncludedOnly:cancelincludedOnly,",20,0.18,ALERT
3531,"public void build(String code,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
","public void install(String code,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
",118,3,"build:install,",53,0.61,ALERT
3533,,,62,6,,1644,21.987706450621300,0
3534,,,38,2,,666,5.409912236531580,0
3535,"private static void checkArgReferences(String typeSnippet,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,""%s not allowed, indices start at 1"",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,""%s too large for number of provided type mirrors"",argRefMatcher.group(0));
  }
}","private static void processargReference(String typeSnplet,int numberOfJs){
  MatcherargRefmatterr=ARG_REF_PATTERN.matcher(typeSnplet);
  while (argRefmatter.find()) {
    intstartx=Integer.parseInt(argRefmatter.group(1),10) - 1;
    Preconditions.checkArgumentstartx >= 0,""%s not allowed, indices start at 1"",argRefmatter.group(0));
    Preconditions.checkArgumestartdex < numberOfJs,""%s too large for number of provided type mirrors"",argRefmatter.group(0));
  }
}",88,5,"checkArgReferences:processargReference,typeSnippet:typeSnplet,numberOfArgs:numberOfJs,argRefMatcher:argRefmatter,index:start,",487,6.41,ALERT
3536,"@Override public Cursor swapCursor(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swapCursor(newCursor);
}
","@Override public Cursor swappedcer(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swappedcer(newCursor);
}
",26,2,"swapCursor:swappedcer,",37,0.36,ALERT
3537,"public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException {
  Objects.requireNonNull(factory,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}
","public Builder WithTokenizers(Class<? extends TokenizerFactory> fade,Map<String,String> spec) throws IOException {
  Objects.requireNonNull(fade,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(fade,applyDefaultParams(spec))));
  componentsAdded=true;
  return this;
}
",58,3,"withTokenizer:WithTokenizers,factory:fade,params:spec,",244,2.2,ALERT
3538,"public static String[] unionArrays(String[] array1,String[] array2){
  if (array1 == null) {
    return array2;
  }
  if (array2 == null) {
    return array1;
  }
  Set<String> set=new LinkedHashSet<>();
  set.addAll(Arrays.asList(array1));
  set.addAll(Arrays.asList(array2));
  return set.toArray(new String[set.size()]);
}","public static String[] unionArrayrays(String[] ArrayOne,String[] ash62){
  if (ArrayOne == null) {
    return ash62;
  }
  if (ash62 == null) {
    return ArrayOne;
  }
  Set<String> keep=new LinkedHashSet<>();
  sekeepddAll(Arrays.asList(ArrayOne));
 keept.addAll(Arrays.asList(ash62));
  return keep.toArray(new String[keep.size()]);
}",94,4,"unionArrays:unionArrayrays,array1:ArrayOne,array2:ash62,set:keep,",1192,10.48,ALERT
3539,,,59,4,,656,6.464283712704980,0
3540,"private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {
  String msg=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + msg + "":""+ date.toString()+ ""..."");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + "" verified."");
}","private void veratetimificate(X509Certificate cert) throws CertPathValidatorException {
  String comment=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + comment + "":""+ date.toString()+ ""..."");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(comment + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(comment + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(comment + "" verified."");
}",120,3,"msg:comment,verifyTimestamp:veratetimificate,",63,0.68,ALERT
3541,"@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}","@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glymphScale;
  if (isFormGlyph) {
    glymphScale=scaling * glymphScale;
  }
  AffineTransform aff=null;
  if (glymphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glymphScale,glymphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glymphScale=OLDglyphScale;
}",120,8,"glyphScale:glymphScale,",57,0.56,ALERT
3542,"protected void processFocusEvent(FocusEvent evt){
  super.processFocusEvent(evt);
  if (evt.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
","protected void parseTouchEvent(FocusEvent EvT){
  super.parseTouchEvent(EvT);
  if (EvT.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
",40,2,"evt:EvT,processFocusEvent:parseTouchEvent,",67,0.6,ALERT
3543,"public boolean hasNext() throws IOException {
  dataInputStream.mark(1);
  int val=dataInputStream.read();
  dataInputStream.reset();
  return val != -1;
}","public boolean Hasnext() throws IOException {
  dataInputStream.mark(1);
  int obj=dataInputStream.read();
  dataInputStream.reset();
  return obj != -1;
}",37,2,"val:obj,hasNext:Hasnext,",49,0.48,ALERT
3544,,,56,1,,418,3.1630580266316700,0
3545,"private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException {
  do {
    int len=Math.min(_outputMaxContiguous,totalLen);
    _writeUTF8Segment(utf8,offset,len);
    offset+=len;
    totalLen-=len;
  }
 while (totalLen > 0);
}","private final void _writeUTF8Fraggments(byte[] alph08,int offset,int totalLen) throws IOException, JsonGenerationException {
  do {
    int len=Math.min(_outputMaxContiguous,totalLen);
    _writeUTF8Segment(alph08,offset,len);
    offset+=len;
    totalLen-=len;
  }
 while (totalLen > 0);
}",61,5,"_writeUTF8Segments:_writeUTF8Fraggments,utf8:alph08,",65,0.67,ALERT
3546,"@Override public char next(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.next();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}
","@Override public char append(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.append();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}
",82,3,"next:append,",71,0.62,ALERT
3547,"public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){
  Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY());
  return pointInZone(zoneID,point);
}","public boolean coordinatesinZone(Id<ActivityFacility> ZoneID,Coord destordinate){
  Point poinpc.xy2Point(destordinate.getX(),destordinate.getY());
  return pointInZone(ZoneID,pc);
}",43,4,"coordinateInZone:coordinatesinZone,zoneID:ZoneID,coordinate:destordinate,point:pc,",328,4.33,ALERT
3548,,,22,2,,633,5.501171378294630,0
3549,,,20,1,,424,3.4662407994270300,0
3550,,,254,11,,3737,67.927321823438,0
3551,"private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}","private void baniFill(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      baniFill(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      baniFill(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      baniFill(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}",755,17,"bulkLoad:baniFill,",188,2.67,ALERT
3552,"public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {
  if (dateValue == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (dateFormats == null) {
    dateFormats=DEFAULT_PATTERNS;
  }
  if (dateValue.length() > 1 && dateValue.startsWith(""\'"") && dateValue.endsWith(""\'"")) {
    dateValue=dateValue.substring(1,dateValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=dateFormats.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(dateValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + dateValue);
}","public static Date seDate(String dateContent,Collection datePlats) throws DateParseException {
  if (dateContent == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (datePlats == null) {
    datePlats=DEFAULT_PATTERNS;
  }
  if (dateContent.length() > 1 && dateContent.startsWith(""\'"") && dateContent.endsWith(""\'"")) {
    dateContent=dateContent.substring(1,dateContent.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final IteratoformIteratorer=datePlats.iterator();
  while (formIterator.hasNext()) {
    final String fofunctionString)formIterator.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(function,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(function);
    }
    try {
      return dadateParserarse(dateContent);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + dateContent);
}",193,6,"parseDate:seDate,dateValue:dateContent,dateFormats:datePlats,formatIter:formIterator,format:function,",309,5.48,ALERT
3553,"public void addButtonPressedListener(FieldConfigStringButtonInterface listener){
  if (buttonPressedListenerList == null) {
    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressedListenerList.add(listener);
}
","public void addButtonpressedener(FieldConfigStringButtonInterface addeners){
  if (buttonPressEventQueue == null) {
    buttonPressEventQueue=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressEventQueue.add(addeners);
}
",34,3,"buttonPressedListenerList:buttonPressEventQueue,listener:addeners,addButtonPressedListener:addButtonpressedener,",90,1.05,ALERT
3554,"public AmqpMessage receiveNoWait() throws Exception {
  checkClosed();
  return prefetch.poll();
}
","public AmqpMessage reAcceptNoWait() throws Exception {
  checkClosed();
  return prefetch.poll();
}
",20,1,"receiveNoWait:reAcceptNoWait,",18,0.19,ALERT
3555,"protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
","protected Date ompComputer(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
",63,5,"compute:ompComputer,",28,0.37,ALERT
3556,,,19,1,,410,5.269835559527080,0
3557,"private void logExpiration(Entry e){
  if (e.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",e.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",e.lease);
  }
}","private void logOutpired(Entry ade){
  if (ade.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",ade.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",ade.lease);
  }
}",52,2,"e:ade,logExpiration:logOutpired,",59,0.85,ALERT
3558,,,25,1,,383,3.81576319138209,0
3559,,,43,2,,782,8.881571487585700,0
3560,,,13,1,,415,7.106330402692160,0
3561,"public RelNode convertSelect(SqlSelect select,boolean top){
  final SqlValidatorScope selectScope=validator.getWhereScope(select);
  final Blackboard bb=createBlackboard(selectScope,null,top);
  convertSelectImpl(bb,select);
  return bb.root;
}
","public RelNode canvertedSelect(SqlSelect source,boolean top){
  final SqlValidatorScope selectionScope=validator.getWhereScope(source);
  final Blackboard bb=gbeateBlackboard(selectionScope,null,top);
  convertSelectImpl(gb,source);
  return gb.root;
}
",48,5,"convertSelect:canvertedSelect,select:source,selectScope:selectionScope,bb:gb,",204,2.87,ALERT
3562,"public static boolean isZTE(){
  return sBuildModel.startsWith(""zte"");
}
","public static boolean IsZZPE(){
  return sBuildModel.startsWith(""zte"");
}
",16,1,"isZTE:IsZZPE,",26,0.6,ALERT
3563,,,13,1,,420,4.41182951927185,0
3564,"private Node deleteMax(Node x){
  if (x.right == null)   return x.left;
  x.right=deleteMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}","private Node transferMin(Node x){
  if (x.right == null)   return x.left;
  x.right=transferMin(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.shape=1 + Math.max(shape(x.left),shape(x.right));
  return balance(x);
}",84,5,"height:shape,deleteMax:transferMin,",83,0.79,ALERT
3565,,,16,2,,797,8.145676585038500,0
3566,"public static String[] parseDelimitedList(String list,char delimiter){
  String delim="""" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + "" "",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String word="""";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""""))         v.add(word);
        word="""";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}","public static String[] parseDelimitingList(String base,char delrimited){
  String ddeflim"""" + delrimited;
  StringTokenizer stfew StringTokenizer(base + deflim + "" "",deflim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="""";
  String wa="""";
  while (f.hasMoreTokens()) {
    Stringatakk=f.nextToken();
    if (lastToken != null) {
      if (tatakequals(deflim)) {
        wa=wa + lastToken;
        if (llastTokenequals(deflim))         atak=null;
      }
 else {
        if (!wa.equals(""""))         v.add(wa);
        wa="""";
      }
    }
    lastToken=atak;
  }
  return v.toArray(new String[0]);
}",160,9,"parseDelimitedList:parseDelimitingList,list:base,delimiter:delrimited,delim:deflim,st:f,word:wa,tok:atak,",481,5.49,ALERT
3567,"public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}
","public Object getObject(Object key,Object job){
  return (objectCache.put(key,job));
}
",24,3,"value:job,putResource:getObject,",51,0.57,ALERT
3568,,,40,3,,842,8.607622547944390,0
3569,,,110,5,,1822,25.0362310051918,0
3570,,,32,1,,429,4.398771961530050,0
3571,"private void remeasure(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}","private void seast(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStopElement[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}",564,13,"mEarliestStartHour:mEarliestStopElement,remeasure:seast,",105,3.25,ALERT
3572,"@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
","@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> image){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(image.iterator(),Spliterator.ORDERED),false)));
}
",78,2,"other:image,",36,0.81,ALERT
3574,"public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}","public void slider(SLIDE slider){
  if (slider == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}",63,2,"slide:slider,",39,0.56,ALERT
3576,"public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException {
  Object o=newInstanceImpl();
  if (o == null) {
    throw new InstantiationException();
  }
  return o;
}
","public java.lang.Object newInstant() throws java.lang.InstantiationException, java.lang.IllegalClassError {
  Object m=newInstanceImpl();
  if (m == null) {
    throw new InstantiationException();
  }
  return m;
}
",47,3,"newInstance:newInstant,IllegalAccessException:IllegalClassError,o:m,",115,1.65,ALERT
3578,,,29,2,,766,7.659560585021970,0
3579,,,175,5,,1790,23.000315181414300,0
3580,"protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isFilled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isFilled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isFilled && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}","protected ArrayList<float[]> _reverseLoop(float[] rawldpts,int lType,int npeg,boolean isfolded){
  boolean lvl=Debug.debugging(""proj"");
  int lc=rawldpts.length >>> 1;
  if (lc < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(lType))   return doPolyDispatch(rawldpts,lType,npeg,isfolded);
  int invalid_index=0;
  boolean curr_incval, prev_ninall=false;
  Point lat=new Point();
  AzimuthVar az_now=null, az_save=null, akCar=new AzimuthVar();
  ArrayList<AzimuthVar> strings=new ArrayList<AzimuthVar>(128);
  float[]h__,xps=new float[lc];
  float[]Y__,inss=new float[lc];
  _forward(rawldpts[0],rawldpts[1],lat,akCar);
 xps[0]=lat.x;
 inss[0]=lat.y;
  prev_ninall=akCar.inerror_linear;
  if (prev_ninall) {
    ++invalid_index;
  }
 else {
    akCar.shape=0;
    akCar.current_aziamut=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawldpts[0],rawldpts[1]);
    if (!isfolded) {
      strings.add(akCar);
    }
 else {
      az_now=akCar;
    }
    akCar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < lc; i++, j+=2) {
    akCar.inerror_linear=false;
    _forward(rawldpts[j],rawldpts[j + 1],lat,akCar);
    curr_incval=akCar.inerror_linear;
   xps[i]=lat.x;
   inss[i]=lat.y;
    if (!curr_incval && prev_ninall) {
      akCar.shape=i - 1;
      akCar.current_aziamut=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawldpts[j - 2],rawldpts[j - 1]);
      strings.add(akCar);
      akCar=new AzimuthVar();
    }
 else     if (curr_incval) {
      if (!prev_ninall) {
        akCar.shape=i;
        if (isfolded && (invalid_index == 0)) {
          az_save=akCar;
        }
 else {
          strings.add(akCar);
        }
        akCar=new AzimuthVar();
      }
      ++invalid_index;
    }
   prev_ninalld=curr_incval;
  }
  if (invalid_index == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xp);
    ret_val.add(ins);
    return ret_val;
  }
  if invalid_indext == lc) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_ninall) {
    if (isfolded && (az_save != null)) {
      int l=az_save.shape;
     h__=new float[lc + l];
     Y__=new float[lc + l];
      System.arraycopyxps,0h__,0,lc);
      System.arraycopyinss,0Y__,0,lc);
      System.arraycopyxps,0h__,lc,l);
      System.arraycopyinss,0Y__,lc,l);
     az_saveeshapex=lc + l;
      strings.add(az_save);
      xp=h_;
      ins=Y_;
    }
 else {
      if (lvl && isfolded && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      akCar.shape=i;
      j=rawldpts.length;
      akCar.current_aziamut=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawldpts[j - 2],rawldpts[j - 1]);
      strings.add(akCar);
    }
  }
 else   if (az_save != null) {
    if (lvl)     Debug.output(""DD, filled!"");
  stringsns.add(az_now);
    strings.add(az_save);
  }
  int size=strings.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isfolded && (lc > 2)) {
    generateFilledPolyxpsinss,strings,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)strings.get(j);
    AzimuthVar az2=(AzimuthVar)strings.get(j + 1);
    int off1=az1.shape;
    int off2=az2.shape;
    int l=off2 - off1;
    h_=new float[l];
    Y_=new float[l];
    System.arraycopy(xp,off1,h_,0,l);
    System.arraycopy(ins,off1,Y_,0,l);
    ret_val.add(h_);
    ret_val.add(Y_);
  }
  return ret_val;
}",966,24,"_forwardPoly:_reverseLoop,rawllpts:rawldpts,ltype:lType,nsegs:npeg,isFilled:isfolded,DEBUG:lvl,len:lc,invalid_count:invalid_index,curr_invalid:curr_incval,temp:lat,az_first:az_now,azVar:akCar,sections:strings,x_:h_,xs:xp,y_:Y_,ys:ins,prev_invalid:prev_ninall,index:shape,current_azimuth:current_aziamut,invalid_forward:inerror_linear,",2435,22.34,ALERT
3581,,,140,2,,384,3.254828755060830,0
3582,,,51,4,,1496,19.226295173168200,0
3583,"public static double sampleSkew(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}","public static double sampleSkew(int size,double moment3,double sampleVariance){
  int ns=size;
  double si=Math.sqrt(sampleVariance);
  double m3=moment3 * ns;
  return ns * m3 / ((ns - 1) * (ns - 2) * si* si* si);
}",63,7,"n:ns,s:si,",80,0.91,ALERT
3584,,,81,4,,1150,10.246987247467000,0
3585,"public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generate();
}","public void generator(BatchEnvironment env,ClassDefinition cdef,File Destdir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,Destdir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generator();
}",85,6,"destDir:Destdir,generate:generator,",162,1.36,ALERT
3587,"private void writeIndent(int times) throws IOException {
  for (int i=options.getBaseIndent() + times; i > 0; i--) {
    writer.write(options.getIndent());
  }
}","private void writeSpent(int files) throws IOException {
  for (int i=options.getBaseIndent() + files; i > 0; i--) {
    writer.write(options.getIndent());
  }
}",44,3,"writeIndent:writeSpent,times:files,",61,0.58,ALERT
3588,"public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}","public static String convertFromUtf64(int[] contract,int startPoint,int endLen){
  StringBuilder orb=new StringBuilder();
  for (int i=ntartPoint; n < endLen; n++) {
    sb.aorbend(convertFromUtf32ToCharArray(contract[n]));
  }
  return orb.toString();
}",62,6,"convertFromUtf32:convertFromUtf64,text:contract,startPos:startPoint,endPos:endLen,sb:orb,i:n,",620,6.29,ALERT
3589,"public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
","public boolean onSchemeASLibrary(Config data,Config metadata,IScheduler chedpler,PackingPlan itting){
  boolean ret=false;
  try {
   chedplerr.initialize(data,metadata);
  retet=chedpler.onSchedule(itting);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(metadata,chedpler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    chedpler.close();
  }
  return ret;
}
",85,6,"onScheduleAsLibrary:onSchemeASLibrary,config:data,runtime:metadata,scheduler:chedpler,packing:itting,",300,3.53,ALERT
3590,,,78,5,,867,9.282387455304460,0
3591,"public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}","public String syellobification(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syellobification(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}",73,5,"syllabify:syellobification,",76,0.82,ALERT
3592,"protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}","protected JsonEncoding getEncoded(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}",22,3,"findEncoding:getEncoded,",62,0.63,ALERT
3593,"public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}","public WritableRaster createReadablesCell(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}",201,11,"createWritableChild:createReadablesCell,",65,5.34,ALERT
3595,"public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
","public static LocalGitRepo FromCurrentOrg(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
",195,8,"fromCurrentDir:FromCurrentOrg,",59,0.64,ALERT
3596,"void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}","void actionPremodification(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}",118,6,"eventPreModify:actionPremodification,",77,0.71,ALERT
3597,"public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}
","public int by(char fbuf[],int part,int p) throws IOException {
  return sd.by(fbuf,part,p);
}
",31,4,"read:by,cbuf:fbuf,offset:part,length:p,",297,2.76,ALERT
3598,"String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}","String decodeTextValue(byte[] slice) throws IOException {
  boolean isCompressed=((slice.length > 1) && (slice[0] == TEXT_COMPRESSION_HEADER[0]) && (slice[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(slice.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int textLine=dataStart;
    boolean inCompressedMode=true;
    while (textLine < slice.length) {
      if (slice[textLine] == (byte)0x00) {
        decodeTextSegment(slice,dataStart,textLine,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++textLine;
        dataStart=textLine;
      }
 else {
        ++textLine;
      }
    }
    decodeTextSegment(slice,dataStart,textLine,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(slice,getCharset());
}",168,7,"data:slice,dataEnd:textLine,",157,1.55,ALERT
3599,,,243,4,,1439,14.575414415200600,0
3600,"private void initPattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}","private void initPath(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}",174,7,"initPattern:initPath,",44,0.38,ALERT
3601,"public double reduceTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}","public double ReductionTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}",152,8,"reduceTo:ReductionTo,",57,0.84,ALERT
3602,,,161,1,,424,3.646965293089550,0
3603,,,69,1,,437,3.919331661860150,0
3604,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof PrincipalEntry))   return false;
  PrincipalEntry that=(PrincipalEntry)obj;
  return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName));
}
","@Override public boolean Equalls(Object ex){
  if (this == ex)   return true;
  if (!(ex instanceof PrincipalEntry))   return false;
  PrincipalEntrytheret=(PrincipalEntry)ex;
  return (principalClass.Equalls(tthereprincipalClass) && principalName.Equalls(there.principalName));
}
",61,3,"equals:Equalls,obj:ex,that:there,",258,3.16,ALERT
3605,,,30,3,,1152,13.543370338281000,0
3606,,,129,8,,2675,17.364593823750800,0
3607,"public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
","public void spind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
",41,2,"rewind:spind,",20,0.21,ALERT
3609,"@Override public boolean start() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
","@Override public boolean wait() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
",93,5,"start:wait,",38,0.4,ALERT
3611,"public short readShort() throws IOException {
  return primitiveTypes.readShort();
}
","public short READUTF() throws IOException {
  return primitiveTypes.READUTF();
}
",16,1,"readShort:READUTF,",25,0.2,ALERT
3612,,,22,2,,800,7.016909921169280,0
3614,"protected void responseSent(StreamResponseMessage responseMessage){
  if (syncProtocol != null)   syncProtocol.responseSent(responseMessage);
}
","protected void requestPublished(StreamResponseMessage responseMessage){
  if (syncProtocol != null)   syncProtocol.requestPublished(responseMessage);
}
",22,2,"responseSent:requestPublished,",25,0.2,ALERT
3615,"private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}
","private static synchronized boolean isSupportInternal(HttpCallerInfo httpdc){
  if (client == null) {
    client=new HashMap<String,Boolean>();
    custom=new HashMap<String,Negotiator>();
  }
  String hosserverNametpdc.host;
  serverName=serverName.toLowerCase();
  if (client.containsKey(serverName)) {
    return client.get(serverName);
  }
  Negotiator negatorgotiator.getNegotiator(httpdc);
  if (ator != null) {
    client.put(serverName,true);
    custom.put(serverName,ator);
    return true;
  }
 else {
    client.put(serverName,false);
    return false;
  }
}
",131,6,"isSupportedImpl:isSupportInternal,hci:httpdc,supported:client,cache:custom,hostname:serverName,neg:ator,",485,7.17,ALERT
3617,,,73,4,,1506,15.788923331101700,0
3618,,,14,1,,418,3.6820773005485500,0
3619,"public boolean validate(){
  outputFile=new File(outputPath);
  if (outputFile.exists() || outputFile.isDirectory()) {
    invalidMessage=""Output file already exists."";
    return valid=false;
  }
  if (!signMode) {
    keyFile=new File(keyFilePath);
    if (!keyFile.exists() || keyFile.isDirectory()) {
      invalidMessage=""Key file not found."";
      return valid=false;
    }
  }
  return valid=true;
}
","public boolean invalidate(){
  OutputDir=new File(outputPath);
  if (OutputDir.exists() || OutputDir.isDirectory()) {
    inInvalidSuccess=""Output file already exists."";
    return valid=false;
  }
  if (!signMode) {
    signFiles=new File(keyFilePath);
    if (!signFiles.exists() || signFiles.isDirectory()) {
      inInvalidSuccess=""Key file not found."";
      return valid=false;
    }
  }
  return valid=true;
}
",86,4,"validate:invalidate,outputFile:OutputDir,invalidMessage:inInvalidSuccess,keyFile:signFiles,",175,1.78,ALERT
3620,,,34,1,,409,3.531380883852640,0
3621,,,58,4,,1519,16.475349020957900,0
3622,"private static float computeSimilarity(Lane a,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=a.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}","private static float computeLikeness(Lane af,Lane fb){
  int old=0;
  int distance=0;
  int fifirstCoordinateath.max(af.getFirstNonGapPosition(),fb.getFirstNonGapPosition());
  int lalastCoordinateath.min(af.getLastNonGapPosition(),fb.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cchuaf.charAt(i);
    char cqubafb.charAt(i);
    if (Character.isLetter(chu) && Character.isLetter(quba)) {
      if (Character.toLowerCasechua) == Character.toLowerCase(qubab)))       old++;
 else       distance++;
    }
  }
  return Math.max(old > 0 ? 1 : 0,old - 3 * distance);
}",162,10,"computeSimilarity:computeLikeness,a:af,b:fb,same:old,diff:distance,cha:chu,chb:quba,",492,6.38,ALERT
3623,"private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();
  accountdetailmap.put(VoucherConstant.GLCODE,glcode);
  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return accountdetailmap;
}
","private HashMap<String,Object> createAccDetdetailblock(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();
  accountdetailmap.put(VoucherConstant.GLCODE,glcode);
  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return accountdetailmap;
}
",87,5,"createAccDetailmap:createAccDetdetailblock,",126,1.47,ALERT
3624,"static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){
  String s=params.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(params,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}","static String matchStringOrThrow(Pattern p,ToDateParser cms,Enum<?> aEnum){
  String s=cms.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(cms,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}",72,6,"params:cms,",46,0.77,ALERT
3625,"@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}
","@RequestMapping(value=""/hive"",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveBlases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> json=null;
  try {
    json=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return json;
}
",81,3,"showHiveDatabases:showHiveBlases,results:json,",91,0.8,ALERT
3626,"public long skipBytes(long n) throws IOException {
  long count=0;
  long gotsofar=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException(""Stream closed, can\'t be reopened"");
    }
  }
  while (count < n) {
    gotsofar=inputStream.skip(n - count);
    if (gotsofar == 0) {
      Debug.error(""StreamInputReader can\'t skip "" + n + "" bytes as instructed"");
      break;
    }
    count+=gotsofar;
  }
  count((int)count);
  return count;
}","public long skipBlocks(long d) throws IOException {
  long content=0;
  long gottenpartial=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException(""Stream closed, can\'t be reopened"");
    }
  }
  while (content < d) {
    gogottenpartialnputStream.skip(d - content);
    if (gottenpartial == 0) {
      Debug.error(""StreamInputReader can\'t skip "" + d + "" bytes as instructed"");
      break;
    }
    content+=gottenpartial;
  }
  content((int)content);
  return content;
}",107,4,"skipBytes:skipBlocks,n:d,count:content,gotsofar:gottenpartial,",451,4.63,ALERT
3627,"public void print(char c){
  writer.print(c);
}
","public void set(char ec){
  writer.set(ec);
}
",16,2,"print:set,c:ec,",217,1.94,ALERT
3628,"@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeBoolean(isLeaf);
  out.writeInt(numEntries);
}
","@Override public void WriteCustom(ObjectOutput size) throws IOException {
  super.WriteCustom(size);
  size.writeBoolean(isLeaf);
  size.writeInt(numEntries);
}
",34,2,"writeExternal:WriteCustom,out:size,",257,3.36,ALERT
3629,,,57,2,,814,5.325417931874590,0
3630,,,32,2,,383,4.123913474877680,0
3631,"public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}","public static CompiereColor parse(String attAttributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attAttributes != null && attAttributes.length() > 0)     cc.parseAttributres(attAttributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attAttributes + "") - ""+ e.toString());
  }
  return cc;
}",69,3,"attributes:attAttributes,",41,0.4,ALERT
3632,"public static KdbDatabase createKdbDatabase(Credentials credentials,KdbHeader kdbHeader,InputStream inputStream) throws IOException {
  DataInput dataInput=new LittleEndianDataInputStream(inputStream);
  checkSignature(dataInput);
  deserializeHeader(kdbHeader,dataInput);
  InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(credentials.getKey(),inputStream);
  MessageDigest digest=Encryption.getMessageDigestInstance();
  DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest);
  dataInput=new LittleEndianDataInputStream(digestInputStream);
  KdbDatabase kdbDatabase=new KdbDatabase();
  KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup();
  for (long group=0; group < kdbHeader.getGroupCount(); group++) {
    lastGroup=deserializeGroup(lastGroup,dataInput);
  }
  for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) {
    deserializeEntry(kdbDatabase,dataInput);
  }
  if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) {
    throw new IllegalStateException(""Hash values did not match"");
  }
  digestInputStream.close();
  return kdbDatabase;
}","public static KdbDatabase createkdbCollection(Credentials carpences,KdbHeader kbbheader,InputStream dataFile) throws IOException {
  DataInpdataImportput=new LittleEndianDataInputStream(dataFile);
  checkSignature(dataImport);
  deserializeHeader(kbbheader,dataImport);
  InputStdecodedInputstreamtreakbbheaderer.createDecryptedInputStream(carpences.getKey(),dataFile);
  MessageDigest signest=Encryption.getMessageDigestInstance();
  DigestInputStreamdigesterInputChannelm=new DigestInputStream(decodedInputstream,signest);
  dataImport=new LittleEndianDataInputStream(digesterInputChannel);
  KdbDatabase kongoDatabase=new KdbDatabase();
  KdbGroup lacatGroupKdbGroup)kongoDatabase.getRootGroup();
  for (long name=0; name < kbbheader.getGroupCount(); name++) {
    lcatGroupdeserializeGroup(lcatGroupdataImport);
  }
  for (long comment=0; comment < kbbheader.getEntryCount(); comment++) {
    deserializeEntry(kkongoDatabasedataImport);
  }
  if (!Arrays.equals(signest.signest(),kbbheader.getContentHash())) {
    throw new IllegalStateException(""Hash values did not match"");
  }
  digesterInputChannel.close();
  return kongoDatabase;
}",197,12,"createKdbDatabase:createkdbCollection,credentials:carpences,kdbHeader:kbbheader,inputStream:dataFile,dataInput:dataImport,decryptedInputStream:decodedInputstream,digest:signest,digestInputStream:digesterInputChannel,kdbDatabase:kongoDatabase,lastGroup:catGroup,group:name,entry:comment,",1766,18.86,ALERT
3633,"private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}","private void startHideAnimationation(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}",524,5,"startHideAnimations:startHideAnimationation,",126,1.22,ALERT
3634,"protected void drawMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}","protected void updateMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}",183,9,"drawMark:updateMark,",293,2.43,ALERT
3635,,,136,8,,2768,38.46330474615100,0
3636,"public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format(""SG_%s"",policyName);
    }
 else {
      format=String.format(""SG_%s_%d"",policyName,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format(""SG1_%s"",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}","public String generatedGROUPNames(String olicyCode,Set<String> existingGroupName,String parentGROUPNode){
  int test=0;
  String Format=null;
  while testt <= existingGroupName.size()) {
    if (0 == test) {
     Formatt=StringFormatt(""SG_%s"",olicyCode);
    }
 else {
    Formatat=StrinFormatat(""SG_%s_%d"",olicyCode,test);
    }
    String generatedRuleMember=generate(parentGROUPNode,Format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupName.contains(generatedRuleMember)) {
      return generatedRuleMember;
    }
    test++;
  }
  return generateparentGROUPNodee,StringFormatt(""SG1_%s"",olicyCode),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}",134,7,"generateGroupName:generatedGROUPNames,policyName:olicyCode,existingGroupNames:existingGroupName,parentGroupName:parentGROUPNode,count:test,format:Format,generatedGroupName:generatedRuleMember,",500,5.16,ALERT
3637,,,39,3,,471,3.3839104652404800,0
3638,"@Override protected final synchronized boolean writeData(ByteBuffer data){
  AionServerPacket packet=sendMsgQueue.pollFirst();
  if (packet == null) {
    return false;
  }
  packet.setBuf(data);
  packet.write(this);
  return true;
}
","@Override protected final synchronized boolean insertData(ByteBuffer data){
  AionServerPacket packet=sendMsgQueue.pollFirst();
  if (packet == null) {
    return false;
  }
  packet.setBuf(data);
  packet.write(this);
  return true;
}
",50,3,"writeData:insertData,",54,0.42,ALERT
3639,,,371,4,,1064,22.23243848880130,0
3640,"private int measureWidth(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
","private int MeasureString(int mentasuringCap){
  int result;
  int specMode=MeasureSpec.getMode(mentasuringCap);
  int specSize=MeasureSpec.getSize(mentasuringCap);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
",93,5,"measureSpec:mentasuringCap,measureWidth:MeasureString,",125,0.97,ALERT
3641,,,39,3,,1158,9.603115320205690,0
3642,"public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
","public boolean create(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
",44,4,"remove:create,",36,0.28,ALERT
3646,"public static void sortFields(FieldBinding[] sortedFields,int left,int right){
  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);
}
","public static void sortFields(FieldBinding[] sortedFormS,int name,int right){
  Arrays.sort(sortedFormS,name,right,FIELD_COMPARATOR);
}
",31,4,"sortedFields:sortedFormS,left:name,",72,0.75,ALERT
3647,"public synchronized void release(){
  index.clear();
}
","public synchronized void ire(){
  index.clear();
}
",14,1,"release:ire,",31,0.22,ALERT
3648,"public PainterChain prependPainter(Painter p){
  Painter[] newChain=new Painter[chain.length + 1];
  System.arraycopy(chain,1,newChain,0,chain.length);
  newChain[0]=p;
  return new PainterChain(newChain);
}","public PainterChain prependPreter(Painter wp){
  Painter[] newRing=new Painter[chain.length + 1];
  System.arraycopy(chain,1,newRing,0,chain.length);
  nnewRing0]=wp;
  return new PainterChain(newRing);
}",55,3,"prependPainter:prependPreter,p:wp,newChain:newRing,",201,2.46,ALERT
3649,"public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}","public static long[] values(Long[] function){
  long[] dest=new long[function.length];
  for (int i=0; i < function.length; i++) {
    Long v=function[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}",75,5,"array:function,",48,0.47,ALERT
3650,,,119,11,,3796,44.77047478755320,0
3651,"public boolean hasMyomerBooster(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
","public boolean hasMyomerBoops(){
  for (  Mounted mequopp : getMisc()) {
    MiscType mtype=(MiscType)mequopp.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mequopp.isInoperable()) {
      return true;
    }
  }
  return false;
}
",56,3,"mEquip:mequopp,hasMyomerBooster:hasMyomerBoops,",85,0.96,ALERT
3652,"public boolean equivalent(IMFMarkerType other){
  if (other == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(other.getOffset());
  result&=label.equivalent(other.getLabel());
  return result;
}
","public boolean equalilibrium(IMFMarkerType object){
  if (object == null) {
    return false;
  }
  boolean filter=true;
  rfilter=offset.equals(object.getOffset());
  resufilterbel.equalilibrium(object.getLabel());
  return filter;
}
",54,3,"equivalent:equalilibrium,other:object,result:filter,",259,3.21,ALERT
3653,"public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + ""_remove_event"");
  try {
    String path=event.getId();
    String responsePath=dir + ""/"" + response_prefix+ path.substring(path.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,event.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}","public byte[] delete(QueueEvent app) throws KeeperException, InterruptedException {
  TimerContext timeout=stats.timeout(dir + ""_remove_event"");
  try {
    Strinportth=app.getId();
    String respondPath=dir + ""/"" + response_prefix+ port.substring(port.lastIndexOf(""-"") + 1);
    if (zookeeper.exists(respondPath,true)) {
      zookeeper.setDatrespondPathth,app.getBytes(),true);
    }
    byte[] key=zookeeper.getData(port,null,null,true);
    zookeeper.delete(port,-1,true);
    return key;
  }
  finally {
    timeout.stop();
  }
}",132,6,"remove:delete,event:app,time:timeout,path:port,responsePath:respondPath,data:key,",361,4.01,ALERT
3654,,,88,2,,808,8.553819195429490,0
3655,"int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}","int putData(Object map) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(map);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream ko=new BufferedDataOutputStream(bo);
    ko.writeArray(map);
    ko.flush();
    ko.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}",145,8,"o:ko,data:map,",86,0.96,ALERT
3656,"public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}","public int findEventPositionNeastEvent(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInStringInfo=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minLength=0;
  boolean idFound=false;
  int nt=mRowInfo.size();
  for (intindexx=0;indexx < nt; index++) {
    RowInfo form=mRowInfo.get(index);
    if (form.mType == TYPE_DAY) {
      continue;
    }
    if (form.mEventId == id) {
      if (form.mEventStartTimeMilli == millis) {
        return index;
      }
      long ddistanceMath.abs(millis - form.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= form.mEventStartTimeMilli && millis <= form.mEventEndTimeMilli) {
        if (form.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=form.mDay;
          }
        }
 else         if (eventInStringInfo == -1) {
          eventInStringInfo=index;
        }
      }
 else       if (eventInStringInfo == -1) {
        long ddistanceMath.abs(millis - form.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minLength=form.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInStringInfo != -1) {
    return eventInStringInfo;
  }
 else   if (allDayEventInTimeIndex != -1 && minLength != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}",339,17,"findEventPositionNearestTime:findEventPositionNeastEvent,eventInTimeIndex:eventInStringInfo,minDay:minLength,len:nt,row:form,",815,13.78,ALERT
3657,,,97,7,,2488,46.54069318771360,0
3658,,,22,4,,1466,12.207335789998400,0
3659,"@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void metadataError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}","@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void adataError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}",53,4,"metadataError:adataError,",52,0.42,ALERT
3660,"private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}","private void predict(Painter p,SynthContext ctx,Graphics g,int image,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(image,y);
      p.predict(gfx,ctx.getComponent(),w,h);
      gfx.translate(-image,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.predict(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,image,y,null);
      img=null;
    }
  }
}",223,11,"paint:predict,x:image,",266,2.22,ALERT
3661,"public void put(int fieldNumber,FieldData data){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=data;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=data;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=data;
    mSize++;
  }
}","public void replace(int fieldNumber,FieldData source){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=source;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=source;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int nc=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[nc];
      FieldData[] nvalues=new FieldData[nc];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=source;
    mSize++;
  }
}",247,10,"put:replace,n:nc,data:source,",213,2.41,ALERT
3662,"public boolean isPropertyAllowed(Name name){
  return propertiesAllowed.contains(name);
}
","public boolean isPropertyAllowed(Name ame){
  return propertiesAllowed.contains(ame);
}
",17,2,"name:ame,",35,0.29,ALERT
3663,,,32,3,,1040,7.1086709300677000,0
3664,,,264,17,,5270,40.33679163853330,0
3666,,,153,2,,644,6.295462191104890,0
3667,,,77,1,,421,2.343638797601060,0
3669,"public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}","public static int e(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return e(list,delimiter.charAt(0),ignoreEmpty);
  char[] delay=delimiter.toCharArray();
  int e=StringUtil.length(list);
  if (e == 0)   return 0;
  int count=0;
  int last=0;
  char cy;
  for (int i=0; i < e; i++) {
    cy=list.charAt(i);
    for (int y=0; y < delay.length; y++) {
      if (cy == delay[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < e)   count++;
  return count;
}",173,10,"del:delay,c:cy,len:e,",135,1.63,ALERT
3670,,,109,5,,1838,18.84730944633480,0
3671,"public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}","public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occursrs=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occursrs.containsKey(value)) {
      occursrs.put(value,1L);
    }
 else {
      occursrs.put(value,1L + occursrs.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occursrs.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occursrs;
}",145,5,"occurrences:occursrs,",57,0.84,ALERT
3672,"public static boolean isEmpty(CharSequence text){
  return text == null || text.length() == 0;
}","public static boolean matchEmpty(CharSequence source){
  return source == null || source.length() == 0;
}",23,2,"text:source,isEmpty:matchEmpty,",50,0.66,ALERT
3673,"static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
","static Map addElementAsArray(String source,Set values,Map toMap){
  if ((source != null) && (toMap != null)) {
    toMap.put(source,values);
  }
  return toMap;
}
",43,4,"key:source,addElementToMap:addElementAsArray,",65,0.52,ALERT
3674,,,54,2,,796,6.614034140110020,0
3675,"public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){
  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
  if (!processUpdates) {
    deviceListeners.clearListeners();
  }
  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceListeners.addListener(""device"",listener);
    }
  }
  return res;
}","public IDevice learningEntity(long MacNetwork,Short wni,Integer ipV6address,Long SwitchDPAD,Integer SwitchAddress,boolean processUpworks){
  List<IDeviceListener> listers=deviceListeners.getOrderedListeners();
  if (!processUpworks) {
    deviceListeners.clearListeners();
  }
  if (wni != null && wni.shortValue() <= 0)   wni=null;
  if (ipV6address != null && ipV6address == 0)   ipV6address=null;
  IDevice regrearnDeviceByEntity(new Entity(MacNetwork,wni,ipV6address,SwitchDPAD,SwitchAddress,new Date()));
  if (listers != null) {
    for (    IDeviceListeneistenerer : listers) {
      deviceListeners.addListener(""device"",istener);
    }
  }
  return gr;
}",135,10,"learnEntity:learningEntity,macAddress:MacNetwork,vlan:wni,ipv4Address:ipV6address,switchDPID:SwitchDPAD,switchPort:SwitchAddress,processUpdates:processUpworks,listeners:listers,res:gr,listener:istener,",1435,13.22,ALERT
3677,"public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}","public static EventBean[] addFromAddress(EventBean[] group,Collection<EventBean> eventstoAdds){
  EventBean[] newArray=new EventBean[group.length + eventstoAdds.size()];
  System.arraycopy(group,0,newArray,0,group.length);
  int counter=group.length;
  for (  EventBean eventToAdd : eventstoAdds) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}",83,6,"array:group,eventsToAdd:eventstoAdds,addToArray:addFromAddress,",188,2.24,ALERT
3678,"private String toString(Matcher m,int group){
  return (group == 0) ? """" : m.group(group);
}","private String toArray(Matcher m,int object){
  return (object == 0) ? """" : m.object(object);
}",28,3,"group:object,toString:toArray,",79,0.85,ALERT
3679,"@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){
  String suffixCloudUnit=application.getSuffixCloudUnitIO();
  JedisPool pool=null;
  Jedis jedis=null;
  try {
    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedis=pool.getResource();
    String subNameSpace=concatSubNameSpace(application);
    String key=subNameSpace + suffixCloudUnit;
    String frontend=""frontend:"" + key.toLowerCase();
    jedis.lset(frontend,1,""http://"" + dockerManagerIP + "":""+ serverPort);
    String frontendServerManager=""frontend:manager-"" + key.toLowerCase();
    jedis.lset(frontendServerManager,1,""http://"" + dockerManagerIP + "":""+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jedis != null) {
      pool.destroy();
    }
  }
}","@Override public void updateHostName(Application config,String dockerLayerHost,String serverAddress,String serverMasterSocket){
  StsuffixedcloudunitdUnit=config.getSuffixCloudUnitIO();
  JedisPool container=null;
  Jedis jledis=null;
  try {
    container=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedisjledisainer.getResource();
    StsubNameSpSpace=concatSubNameSpace(config);
    Stringelementy=susubNameSp suffixedcloudunit;
    String fronbackEndontend:"" + element.toLowerCase();
    jedjlediset(frobackEnd""http://"" + dockerLayerHost + "":""+ serverAddress);
    String fronfrontendServiceServerontend:manager-"" + element.toLowerCase();
    jjledislset(ffrontendServiceServer1,""http://"" + dockerLayerHost + "":""+ serverMasterSocket);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error(""HipacheRedisUtils Exception"",e);
  }
 finally {
    if (jledis != null) {
      container.destroy();
    }
  }
}",178,12,"updateServerAddress:updateHostName,application:config,dockerManagerIP:dockerLayerHost,serverPort:serverAddress,serverManagerPort:serverMasterSocket,suffixCloudUnit:suffixedcloudunit,pool:container,jedis:jledis,subNameSpace:subNameSp,key:element,frontend:backEnd,frontendServerManager:frontendServiceServer,",2285,19.76,ALERT
3680,"public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {
  String line=reader.readLine();
  while (line != null && line.length() > 0) {
    line=reader.readLine();
  }
}","public void readTransPortSystemParts(final int[] columnsinds,final BufferedReader data) throws IOException {
  Strinfilene=data.readLine();
  while (file != null && file.length() > 0) {
  filene=data.readLine();
  }
}",51,4,"readTransportSystems:readTransPortSystemParts,columnsIndices:columnsinds,reader:data,line:file,",178,1.55,ALERT
3681,,,67,3,,872,9.892554978529610,0
3682,"public LoginConfiguration forceAuth(String forceAuthReqParam){
  forceAuth=Boolean.parseBoolean(forceAuthReqParam);
  return this;
}
","public LoginConfiguration forcedAccess(String forceAuthReqParam){
  forcedAccess=Boolean.parseBoolean(forceAuthReqParam);
  return this;
}
",21,2,"forceAuth:forcedAccess,",26,0.24,ALERT
3683,,,92,3,,1149,13.3847749153773,0
3684,,,42,2,,804,9.65314211845398,0
3685,,,79,4,,1371,20.860300922393800,0
3686,"private void loadOrgAccessRole(ArrayList<OrgAccess> list){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  String sql=""SELECT * FROM AD_Role_OrgAccess "" + ""WHERE AD_Role_ID=? AND IsActive=\'Y\'"";
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getAD_Role_ID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());
      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
 finally {
    DB.close(rs,pstmt);
  }
}","private void loadRoundAccountRole(ArrayList<OrgAccess> LIST){
  PreparedStatement psthmt=null;
  ResultSet repl=null;
  String sq=""SELECT * FROM AD_Role_OrgAccess "" + ""WHERE AD_Role_ID=? AND IsActive=\'Y\'"";
  try {
    psthmt=DB.prepareStatement(sq,get_TrxName());
    psthmt.setInt(1,getAD_Role_ID());
    rreplpsthmt.executeQuery();
    while (repl.next()) {
      MRoleOrgAccess oacoew MRoleOrgAccess(getCtx(),repl,get_TrxName());
      loadOrgAccessAdd(LIST,new OrgAccess(co.getAD_Client_ID(),co.getAD_Org_ID(),co.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sq,e);
  }
 finally {
    DB.close(rreplpsthmt);
  }
}",150,6,"loadOrgAccessRole:loadRoundAccountRole,list:LIST,pstmt:psthmt,rs:repl,sql:sq,oa:co,",342,3.13,ALERT
3687,"protected void flip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}","protected void lip(BufferCapabilities.FlipContents flipArea){
  if (peer != null) {
    Image backCamera=getBackBuffer();
    if (backCamera != null) {
      peer.lip(0,backCameraer.getWidth(nullbackCameraer.getHeight(null),flipArea);
    }
  }
 else {
    throw new IllegalStateException(""Component must have a valid peer"");
  }
}",69,3,"flip:lip,flipAction:flipArea,backBuffer:backCamera,",513,4.35,ALERT
3688,"private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
","private <T>UnaryOperator<T> interose(UnaryOperator<T> fix,UnaryOperator<T> end){
  return null;
}
",27,3,"compose:interose,before:fix,after:end,",121,1.08,ALERT
3689,"private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}","private Pair<Entry,char[]> deceiveentry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}",265,9,"recoverEntry:deceiveentry,",72,0.79,ALERT
3690,"public void translate(double x,double y){
  currentTransform.translate(x,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,x,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}","public void translate(double tx,double y){
  currentTransform.translate(tx,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,tx,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}",55,3,"x:tx,",40,0.5,ALERT
3691,,,22,5,,1098,15.504669614632900,0
3692,,,54,4,,980,10.26257469256720,0
3693,"private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}
","private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTestested(List<TestCase> terms){
  Map<TestCase,Set<TestFitnessFunction>> testToCoals=new LinkedHashMap<>();
  for (  TestCase testing : terms) {
    testToCoals.put(testing,filterSupportedGoals(new LinkedHashSet<>(testing.getCoveredGoals())));
  }
  return testToCoals;
}
",72,4,"initializeCoverageMapFromTests:initializeCoverageMapFromTestested,tests:terms,testToGoals:testToCoals,test:testing,",238,3.55,ALERT
3695,,,22,1,,444,4.405148839950560,0
3696,"public EventsIntegrationTest(){
  setResponseLogLengthLimit(1000);
  dateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-1);
  yesterday=dateFormat.format(cal.getTime());
  yesterday+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,0);
  today=dateFormat.format(cal.getTime());
  today+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,1);
  tomorrow=dateFormat.format(cal.getTime());
  tomorrow+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,3);
  tomorrowPlus3=dateFormat.format(cal.getTime());
  tomorrowPlus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-3);
  yesterdayMinus3=dateFormat.format(cal.getTime());
  yesterdayMinus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,5);
  tomorrowPlus5=dateFormat.format(cal.getTime());
  tomorrowPlus5+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-5);
  yesterdayMinus5=dateFormat.format(cal.getTime());
  yesterdayMinus5+=""T00:00:00+0000"";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinus3;
  experiment.endTime=tomorrowPlus3;
  experiment.samplingPercent=1.0;
  experiment.label=""experiment"";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy(""creationTime"",""modificationTime"",""ruleJson"");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}","public EventsIntegrationTest(){
  setResponseObjectBufferRange(1000);
  modelUnit=new SimpleDateFormat(""yyyy-MM-dd"");
  Calendar na=Calendar.getInstance();
  na.add(Calendar.DATE,-1);
yesuesdayay=modelUnit.format(na.getTime());
  yesuesday+=""T00:00:00+0000"";
  na=Calendar.getInstance();
  na.add(Calendar.DATE,0);
Mondayay=modelUnit.format(na.getTime());
  Monday+=""T00:00:00+0000"";
  na=Calendar.getInstance();
  na.add(Calendar.DATE,1);
bufforrowow=modelUnit.format(na.getTime());
  bufforrow+=""T00:00:00+0000"";
  na=Calendar.getInstance();
  na.add(Calendar.DATE,3);
tomorrowPlus6s3=modelUnit.format(na.getTime());
  tomorrowPlus6+=""T00:00:00+0000"";
  na=Calendar.getInstance();
  na.add(Calendar.DATE,-3);
yesterdayMinusThirds3=modelUnit.format(na.getTime());
  yesterdayMinusThird+=""T00:00:00+0000"";
  na=Calendar.getInstance();
  na.add(Calendar.DATE,5);
tomaxyPlus55s5=modelUnit.format(na.getTime());
  tomaxyPlus55+=""T00:00:00+0000"";
  na=Calendar.getInstance();
  na.add(Calendar.DATE,-5);
  yesterdayMinus5=modelUnit.format(na.getTime());
  yesterdayMinus5+=""T00:00:00+0000"";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinusThird;
  experiment.endTime=tomorrowPlus6;
  experiment.samplingPercent=1.0;
  experiment.label=""experiment"";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy(""creationTime"",""modificationTime"",""ruleJson"");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}",339,17,"setResponseLogLengthLimit:setResponseObjectBufferRange,dateFormat:modelUnit,cal:na,yesterday:yesuesday,today:Monday,tomorrow:bufforrow,tomorrowPlus3:tomorrowPlus6,yesterdayMinus3:yesterdayMinusThird,tomorrowPlus5:tomaxyPlus55,",636,5.93,ALERT
3698,"protected void onProgress(int itemcount,int size){
}
","protected void OnStatus(int ItemCount,int size){
}
",12,3,"itemcount:ItemCount,onProgress:OnStatus,",34,0.28,ALERT
3699,,,23,2,,778,9.079572876294460,0
3700,"public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
","public void i(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
",15,2,"init:i,",32,0.29,ALERT
3702,,,62,5,,1838,17.842857253551500,0
3703,"private void clearDictionaryCache(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}","private void cleardwordBuffer(){
  Map<String,Dictionary> dictionarycapes=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictums=new ArrayList<>(dictionarycapes.values());
  for (int i=0; i < reverseDictums.size(); i++) {
    Dictionary dictionary=reverseDictums.get(i);
    dictionary.clear();
  }
}",75,5,"reverseDictionaries:reverseDictums,dictionaryCaches:dictionarycapes,clearDictionaryCache:cleardwordBuffer,",156,1.27,ALERT
3704,,,30,4,,1373,25.040245366096500,0
3705,,,91,5,,1807,19.6067889491717,0
3707,"public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}","public static String trimOrPad(String str,int length,char padChar){
  String mr;
  if (str == null) {
    mr="""";
  }
 else {
    mr=str;
  }
  if (mr.length() > length) {
    return mr.substring(0,length);
  }
  while (mr.length() < length) {
    mr+=padChar;
  }
  return mr;
}",79,5,"result:mr,",53,0.64,ALERT
3708,"private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
","private List<EndIsland> findSurroundingIslands(int chunkX,int chageE,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chageE + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
",105,9,"chunkY:chageE,",55,1.06,ALERT
3709,,,250,11,,3694,90.94332940975830,0
3710,,,138,3,,1108,16.676341569423700,0
3711,,,101,4,,1430,11.884448035558100,0
3712,,,35,3,,1143,14.65696638027830,0
3713,"@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}
","@SafeVarargs public final void replace(int entryPoint,T... newItems){
  replace(entryPoint,Arrays.asList(newItems));
}
",28,3,"rowIndex:entryPoint,insert:replace,",79,1.31,ALERT
3714,"private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
","private SortedMap<MessageUid,MaildirMessageName> truncateMessage(Map<MessageUid,MaildirMessageName> ap,MessageUid one,MessageUid tto){
  TreeMap<MessageUid,MaildirMessageName> sortP;
  if (ap instanceof TreeMap<?,?>)  sortPp=(TreeMap<MessageUid,MaildirMessageName>)ap;
 else  sortPp=new TreeMap<MessageUid,MaildirMessageName>(ap);
  if ttoo != null)   return sortP.subMap(one,tto.next());
  returnsortPp.tailMap(one);
}
",98,5,"truncateMap:truncateMessage,map:ap,from:one,to:tto,sortedMap:sortP,",848,15.36,ALERT
3715,"private static final String decodeFieldName(final String pXmlFieldName){
  StringBuilder str=new StringBuilder();
  int fieldNameLength=pXmlFieldName.length();
  char currentChar;
  for (int i=0; i < fieldNameLength; i++) {
    currentChar=pXmlFieldName.charAt(i);
    if (currentChar == '-') {
      str.append(Character.toUpperCase(pXmlFieldName.charAt(++i)));
    }
 else {
      str.append(currentChar);
    }
  }
  return str.toString();
}","private static final String decODEFieldNumber(final String pXMLStringLength){
  StringBuilder fr=new StringBuilder();
  int fiefieldnameLengthMLStringLength.length();
  char CurrentCh;
  for (int ji=0; ji < fieldnameLength; ji++) {
    curCurrentChMLStringLength.charAt(ji);
    if (CurrentCh == '-') {
      strfrpend(Character.toUpperCase(pXMLStringLength.charAt(++ji)));
    }
 else {
      fr.append(CurrentCh);
    }
  }
  return fr.toString();
}",100,6,"decodeFieldName:decODEFieldNumber,pXmlFieldName:pXMLStringLength,str:fr,fieldNameLength:fieldnameLength,currentChar:CurrentCh,i:ji,",370,4.3,ALERT
3717,"public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}","public static int findAddress(String parent,int[] key){
  for (ingi i=0gi i < key.length; gi++) {
    if (parent.equals(getName(key[gi]))) {
      return gi;
    }
  }
  return -1;
}",57,4,"findName:findAddress,name:parent,table:key,i:gi,",223,2.95,ALERT
3718,,,42,3,,890,11.05785156885780,0
3719,"@Override public boolean isRunning(){
  return (frame != null && frame.isVisible());
}
","@Override public boolean arePlaying(){
  return (frame != null && frame.isVisible());
}
",22,1,"isRunning:arePlaying,",18,0.15,ALERT
3720,"private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){
  if (elementsToRemove.size() > 0) {
    names.removeAll(elementsToRemove);
    for (    String elementToRemove : elementsToRemove) {
      sharedElements.remove(elementToRemove);
    }
  }
}","private void removeObsoleteTeonents(List<String> ns,Map<String,View> sharedElements,List<String> eablesPerCreate){
  if (eablesPerCreate.size() > 0) {
    ns.removeAll(eablesPerCreate);
    for (    StringelementToRemovee : eablesPerCreate) {
      sharedElements.remove(elementToRemove);
    }
  }
}",61,5,"removeObsoleteElements:removeObsoleteTeonents,names:ns,elementsToRemove:eablesPerCreate,",216,2.65,ALERT
3721,"public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}","public static String map2OID(String orgInfo){
  return alg2OidMap.get(orgInfo.toUpperCase(Locale.US));
}",25,2,"algName:orgInfo,",34,0.33,ALERT
3722,,,270,6,,1886,24.02804647286730,0
3723,,,251,14,,4601,63.62576839526490,0
3726,,,133,9,,3110,31.856330597400700,0
3727,,,154,5,,1624,14.320093750953700,0
3728,,,252,15,,3899,47.944025711218500,0
3729,"@Override protected void ensureNumberOfColumns(int numberOfColumns){
  if (data.length >= numberOfColumns) {
    return;
  }
  double[] newData=new double[numberOfColumns];
  System.arraycopy(data,0,newData,0,data.length);
  data=newData;
}","@Override protected void ensureNumberOfColows(int numberOfColumnes){
  if (dDATAlength >= numberOfColumnes) {
    return;
  }
  double[] nnewsFlownew double[numberOfColumnes];
  System.arraycopy(dDATA0,newsFlow,0,DATA.length);
  dDATAnewsFlow;
}",55,4,"ensureNumberOfColumns:ensureNumberOfColows,numberOfColumns:numberOfColumnes,newData:newsFlow,data:DATA,",172,2.48,ALERT
3730,"public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}
","public void action(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.action(file);
}
",57,3,"print:action,",40,0.44,ALERT
3731,,,119,4,,1131,16.260706758499100,0
3732,,,394,11,,3538,36.38708785374960,0
3733,"private boolean hasFullEntry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entry.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}","private boolean hasTotalentry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entry.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}",107,4,"hasFullEntry:hasTotalentry,",39,0.57,ALERT
3735,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}","private static char[] doUnPackCVector(String wired){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=wired.charAt(i++);
    char value=wired.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}",83,7,"packed:wired,zzUnpackCMap:doUnPackCVector,",74,0.77,ALERT
3736,"protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}
","protected PrintWriter writeFileout(Document doc){
  return writeFileout;
}
",12,2,"lineFileOut:writeFileout,",35,0.33,ALERT
3737,,,1113,52,,17558,300.5455020745600,0
3739,,,27,2,,792,9.670986386140190,0
3740,"public void addPutTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimeNanos(duration);
}
","public void addPutTimenos(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimenos(duration);
}
",29,2,"addPutTimeNanos:addPutTimenos,",37,0.39,ALERT
3742,"public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {
  if ((groupName == null) || groupName.length() == 0) {
    groupName=SMSUtils.DEFAULT;
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  validateSCM();
  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);
  if (cEntry.isNewEntry()) {
    return;
  }
  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);
    amsdk.unassignService(serviceName);
  }
  if (!cEntry.isNewEntry()) {
    SMSEntry entry=cEntry.getClonedSMSEntry();
    entry.delete(token);
    cEntry.refresh(entry);
  }
}","public void removeOrgizationService(String orgNe,String orgGe,boolean checklegacemode) throws SMSException, SSOException {
  if ((orgGe == null) || orgGe.length() == 0) {
    orgGe=SMSUtils.DEFAULT;
  }
  Strinoccdndn=DNMapper.orgNameToDN(orgNe);
  validateSCM();
  StrODen odn=scm.constructServiceConfigDN(orgGe,CreateServiceConfig.ORG_CONFIG_NODE,occdn);
  CachedSMSEntry ccacheEntCachedSMSEntry.getInstance(token,ODen);
  if (cacheEnt.isNewEntry()) {
    return;
  }
  checklegacemodeMode && ServiceManager.isCoexistenceMode() && orgGe.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amssth=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(occdn),occdn);
    amssth.unassignService(serviceName);
  }
  if (!cacheEnt.isNewEntry()) {
    SMSEntry enresultacheEnt.getClonedSMSEntry();
    result.delete(token);
    cacheEnt.refresh(result);
  }
}",177,9,"removeOrganizationConfiguration:removeOrgizationService,orgName:orgNe,groupName:orgGe,checkLegacyMode:checklegacemode,orgdn:occdn,odn:ODen,cEntry:cacheEnt,amsdk:amssth,entry:result,",624,6.05,ALERT
3743,"public String toString(Object value){
  return toPrettyString(value);
}
","public String newStream(Object image){
  return toPrettyString(image);
}
",15,2,"toString:newStream,value:image,",49,0.43,ALERT
3744,"public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(importable,file,importElement,null));
}
","public void newFile(@NotNull PsiElement processer,@NotNull PsiFile dir,@Nullable PyImportElement importer){
  myImports.add(new ImportCandidateHolder(processer,dir,importer,null));
}
",38,4,"addImport:newFile,importable:processer,file:dir,importElement:importer,",215,2.02,ALERT
3745,"@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}
","@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterIndex) throws IllegalAccessException, InstantiationException {
  T creator=cache.get(counterIndex);
  if (creator == null) {
    creator=counterType.newInstance();
    cache.put(counterIndex,creator);
  }
  return creator;
}
",60,4,"counterKey:counterIndex,counter:creator,",102,0.94,ALERT
3746,"public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){
  ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);
  incomplete_expansion_rooms.add(new_room);
  return new_room;
}
","public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){
  ExpandRoomFreespaceIncomplete newasslayout=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);
  incomplete_expansion_rooms.add(newasslayout);
  return newasslayout;
}
",38,5,"new_room:newasslayout,",42,0.51,ALERT
3747,"protected double currentScoreFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}","protected double currentValueFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}",102,4,"currentScoreFunction:currentValueFunction,",63,0.52,ALERT
3748,"Attributes parseAttributes() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
","Attributes parseCharacters() throws JasperException {
  AttributesImpl addars=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(addars))   reader.skipSpaces();
  return addars;
}
",38,2,"attrs:addars,parseAttributes:parseCharacters,",50,0.45,ALERT
3749,"public double[] levelZeroData(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}","public double[] levelzeroDone(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int build=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      build+=buffer.size;
    }
 else {
      build+=buffer.next;
    }
  }
  int offs=0;
  int currLen;
  final double[]indext=new double[build];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,oindexoffs,currLen);
    offs+=currLen;
  }
  return index;
}",141,7,"levelZeroData:levelzeroDone,length:build,pos:offs,out:index,",292,3.44,ALERT
3750,"private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}","private double[] max(double[] distance3,double[] distances2){
  if (distance3.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] replace=new double[distance3.length];
  for (int n=0; n < distance3.length; n++) {
    replace[n]=Math.max(distance3[n],distances2[n]);
  }
  return replace;
}",91,5,"result:replace,i:n,distances1:distance3,",141,1.62,ALERT
3752,"public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}
","public static boolean isOrgLinkGroup(int AD_ClientESSIP,int AD_Table_Id){
  Boolean shcontainsShared(AD_ClientESSIP,AD_Table_Id);
  if (contain != null)   return !contain.booleanValue();
  return false;
}
",40,4,"isOrgLevelOnly:isOrgLinkGroup,AD_Client_ID:AD_ClientESSIP,AD_Table_ID:AD_Table_Id,share:contain,",540,7.19,ALERT
3753,,,62,9,,3182,31.168394724528000,0
3754,"ProxyVerifier(TxnManager serverProxy,Uuid proxyID){
  if (!(serverProxy instanceof RemoteMethodControl)) {
    throw new UnsupportedOperationException(""No verifier available for non-constrainable service"");
  }
 else   if (!(serverProxy instanceof TrustEquivalence)) {
    throw new UnsupportedOperationException(""Verifier requires service proxy to implement "" + ""TrustEquivalence"");
  }
 else   if (proxyID == null) {
    throw new IllegalArgumentException(""Proxy id cannot be null"");
  }
  this.serverProxy=(RemoteMethodControl)serverProxy;
  this.proxyID=proxyID;
}
","ProxyVerifier(TxnManager erverProxy,Uuid proxyID){
  if (!(erverProxy instanceof RemoteMethodControl)) {
    throw new UnsupportedOperationException(""No verifier available for non-constrainable service"");
  }
 else   if (!(erverProxy instanceof TrustEquivalence)) {
    throw new UnsupportedOperationException(""Verifier requires service proxy to implement "" + ""TrustEquivalence"");
  }
 else   if (proxyID == null) {
    throw new IllegalArgumentException(""Proxy id cannot be null"");
  }
  this.erverProxy=(RemoteMethodControl)erverProxy;
  this.proxyID=proxyID;
}
",80,2,"serverProxy:erverProxy,",41,0.41,ALERT
3755,,,50,2,,801,39.19277056852980,0
3756,"public static boolean isPostJDK7(String bytecodeVersion){
  return JDK7.equals(bytecodeVersion) || JDK8.equals(bytecodeVersion);
}","public static boolean isPostJDK9(String bitCodeVersion){
  return JDK7.equals(bitCodeVersion) || JDK8.equals(bitCodeVersion);
}",25,2,"isPostJDK7:isPostJDK9,bytecodeVersion:bitCodeVersion,",301,4.3,ALERT
3757,"public void makeGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}","public void trainGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}",303,13,"makeGraph:trainGraph,",87,1.01,ALERT
3758,"public void deleteLeaves(String name){
  for (int i=0; i < _leaves.size(); i++) {
    CatalogTreeLeaf leaf=_leaves.get(i);
    if (name.equals(leaf.getName())) {
      _leaves.remove(i);
    }
  }
}","public void deleteLeaves(String child){
  for (int i=0; i < _leaves.size(); i++) {
    CatalogTreeLeaf leaf=_leaves.get(i);
    if (child.equals(leaf.getName())) {
      _leaves.remove(i);
    }
  }
}",61,4,"name:child,",42,0.45,ALERT
3759,"private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
","private void testScrape(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScrape(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScrape(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
",63,5,"testScenario:testScrape,",154,1.33,ALERT
3760,,,42,2,,807,7.671675308545430,0
3761,"public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}","public static int round(final float child){
  final int bits=Float.floatToRawIntBits(child);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)child;
  }
}",102,6,"value:child,",49,0.55,ALERT
3762,"private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}","private static long addAndCheck(long as,long b,Localizable pattern) throws MathRuntimeException {
  final long result=as + b;
  if (!((as ^ b) < 0 || (as ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,as,b);
  }
  return result;
}",63,5,"a:as,",47,0.74,ALERT
3763,"private FormatString[] parse(String s){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(s);
  for (int i=0, len=s.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(s,i,m.start());
        al.add(new FixedString(s.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(s,i,len);
      al.add(new FixedString(s.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}","private FormatString[] parse(String source){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(source);
  for (int i=0, len=source.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(source,i,m.start());
        al.add(new FixedString(source.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(source,i,len);
      al.add(new FixedString(source.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}",179,6,"s:source,",65,0.78,ALERT
3764,"public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}
","public JsonArray filter(String index){
  values.filter(Json.index(index));
  return this;
}
",24,2,"value:index,add:filter,",67,0.83,ALERT
3765,"public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}","public static String cleanFolderStachingMarkFiles(String folder){
  if (!StringUtils.isEmpty(folder)) {
    Matcheum m=folderStackingPattern.matcher(folder);
    if (um.matches()) {
      return um.group(1) + um.group(3);
    }
  }
  return folder;
}",60,3,"cleanFolderStackingMarkers:cleanFolderStachingMarkFiles,filename:folder,m:um,",388,4.23,ALERT
3766,"private void loadBinary(InputStream is) throws IOException {
  if (is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    FileChannel fc=fis.getChannel();
    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());
    bb.load();
    loadBinary(bb);
    is.close();
  }
 else {
    loadBinary(new DataInputStream(is));
  }
}","private void loadBine(InputStream is) throws IOException {
  if (is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    FileChannel fc=fis.getChannel();
    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());
    bb.load();
    loadBine(bb);
    is.close();
  }
 else {
    loadBine(new DataInputStream(is));
  }
}",90,5,"loadBinary:loadBine,",48,0.43,ALERT
3769,,,45,3,,1138,11.499546062946300,0
3770,,,129,5,,1679,23.15375912586850,0
3771,,,34,4,,642,5.5155205170313500,0
3772,,,14,1,,434,4.781585605939230,0
3773,,,44,2,,794,8.50452508131663,0
3774,"public PetCategory findOne(String id){
  log.debug(""Request to get PetCategory : {}"",id);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));
  return petCategory;
}
","public PetCategory searchSingle(String source){
  log.debug(""Request to get PetCategory : {}"",source);
  PetCategory petCategory=petCategoryRepository.searchSingle(UUID.fromString(source));
  return petCategory;
}
",36,3,"id:source,findOne:searchSingle,",59,0.43,ALERT
3775,"public boolean removeArg(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}
","public boolean removeExt(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}
",55,2,"removeArg:removeExt,",21,0.21,ALERT
3776,"public static String quoteIfJavaKeyword(String name){
  return JVMModuleUtil.quoteIfJavaKeyword(name);
}
","public static String quoteIfJavakeypoint(String entry){
  return JVMModuleUtil.quoteIfJavakeypoint(entry);
}
",18,2,"quoteIfJavaKeyword:quoteIfJavakeypoint,name:entry,",51,0.65,ALERT
3777,"public synchronized void checkState(State... requiredStates) throws IllegalStateException {
  for (  State requiredState : requiredStates) {
    if (requiredState.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,""Expected states %s, but in state %s"",Lists.newArrayList(requiredStates),currentState));
}
","public synchronized void updateState(State... RequiredTypes) throws IllegalStateException {
  for (  State requiredState : RequiredTypes) {
    if (requiredState.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,""Expected states %s, but in state %s"",Lists.newArrayList(RequiredTypes),currentState));
}
",60,3,"checkState:updateState,requiredStates:RequiredTypes,",53,0.78,ALERT
3778,,,137,8,,2304,25.616035950183900,0
3779,"public synchronized void increase(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}","public synchronized void Increasing(){
  if (accuracy > 0) {
    long timePASSED=System.currentTimeMillis() - execadded;
    if (timePASSED > accuracy) {
      clearUp();
      if (error > 0) {
        data.addFirst(execadded + accuracy);
      }
      execadded=System.currentTimeMillis();
      error=0;
    }
    error++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}",89,4,"increase:Increasing,timePassed:timePASSED,lastAdded:execadded,count:error,",167,1.72,ALERT
3780,"public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){
  DateTime intervalEnd=interval.getEnd();
  DateTime sliceStart=interval.getStart();
  DateTime periodStart=timeGrain.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",interval,timeGrain,periodStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!interval.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",interval,timeGrain);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",interval,intervalSlices.size(),timeGrain);
  return intervalSlices;
}
","public static List<Interval> sliceMidpoints(Interval extp,TimeGrain timeGuran){
  DateTIntervENDlEnd=extp.getEnd();
  DateTinterfacestarttart=extp.getStart();
  DateTime periparagraphStarteGuran.roundFloor(interfacestart);
  if (!interfacestart.equals(paragraphStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",extp,timeGuran,paragraphStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + paragraphStart);
  }
  List<Interval> intervalInlices=new ArrayList<>();
  whileinterfacestartrt.isBefore(IntervEND)) {
    DateTime sliciceENDeTimeUtils.addTimeGrain(interfacestart,timeGuran);
    Interval slslicerIrbew Interval(interfacestart,iceEND);
    if (!extp.contains(slicerIrb)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",extp,timeGuran);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalInlices.add(slicerIrb);
    interfacestart=iceEND;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",extp,intervalInlices.size(),timeGuran);
  return intervalInlices;
}
",186,9,"sliceIntervals:sliceMidpoints,interval:extp,timeGrain:timeGuran,intervalEnd:IntervEND,sliceStart:interfacestart,periodStart:paragraphStart,intervalSlices:intervalInlices,sliceEnd:iceEND,slicedInterval:slicerIrb,",572,7.06,ALERT
3781,,,47,2,,790,10.793547435601600,0
3782,"public void testZeroOne(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}","public void assertExactly1(){
  byte saBytes[]={0};
  byte bBytes[]={1};
  int ASign=0;
  int bSign=1;
  byte RBitcoin[]={1};
  BigInteger abnumbernew BigInteger(aASignsaBytes);
  BigInteger bInteger=new BigInteger(bSign,bBytes);
  BigInteger rresultbnumber.or(bInteger);
  byte reRESBytes=new byte[RBitcoin.length];
  RESBytes=result.toByteArray();
  for (int pi=0; pi < RESBytes.length; pi++) {
    assertTrue(reRESBytes]pi== RBitcoin[pi]);
  }
  assertEquals(""incorrect sign"",1,result.signum());
}",141,11,"testZeroOne:assertExactly1,aBytes:saBytes,aSign:ASign,rBytes:RBitcoin,aNumber:bnumber,bNumber:bInteger,resBytes:RESBytes,i:pi,",429,2.79,ALERT
3783,,,52,5,,1817,14.776858294010200,0
3785,"public static void assertExpectedOutputContains(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ x+ ""\'"");
  }
}
","public static void assertExpectedOutputContains(String expectedString,String expl){
  if (!expl.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ expl+ ""\'"");
  }
}
",38,3,"x:expl,",40,0.38,ALERT
3786,,,17,2,,396,4.096145164966580,0
3787,"private Collection<Var> migrateColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
","private Collection<Var> migratecolumned(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
",139,8,"migrateColumns:migratecolumned,",51,0.46,ALERT
3788,"public boolean equals(Object interval){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interval);
}
","public boolean eqals(Object intpol){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(intpol);
}
",28,2,"equals:eqals,interval:intpol,",47,0.3,ALERT
3789,"public static Set<String> toStringSet(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}","public static Set<String> toShortList(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}",70,4,"toStringSet:toShortList,",32,0.23,ALERT
3790,,,31,3,,826,11.308088358243300,0
3791,"public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));
  }
}
","public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatingValues=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatingValues.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatingValues));
  }
}
",65,1,"annotatedMethods:annotatingValues,",35,0.37,ALERT
3792,"public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
","public void registerAdapter(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
",40,3,"removeListener:registerAdapter,",23,0.11,ALERT
3793,"@Ignore(""TODO: test is disabled"") @Test public void testPopulate1kbwrites(){
  final byte[] value=new byte[ENTRY_SIZE];
  Arrays.fill(value,(byte)77);
  for (int i=0; i < OP_COUNT; i++) {
    region.put(new Integer(i),value);
  }
  closeDown();
}","@Ignore(""TODO: test is disabled"") @Test public void testPopulate1KBwrites(){
  final byte[] result=new byte[ENTRY_SIZE];
  Arrays.fill(result,(byte)77);
  for (int bi=0; bi < OP_COUNT; bi++) {
    region.put(new Integer(ibi,result);
  }
  closeDown();
}",71,3,"testPopulate1kbwrites:testPopulate1KBwrites,value:result,i:bi,",308,2.02,ALERT
3794,"void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
","void doHandleJavaButtonMove(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
",454,9,"doHandleJavaMouseEvent:doHandleJavaButtonMove,",303,1.98,ALERT
3795,"public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
","public void create(char initialChar){
  initialString=initialString.append(initialChar);
  create();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
",43,3,"show:create,",39,0.31,ALERT
3796,"public SSLSocket createSSLSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}
","public SSLSocket createSSSLockets(Socket f) throws IOException {
  SSLSocketFactory SF=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddremoteAddressdress=(InetSocketAddress)f.getRemoteSocketAddress();
  outsSLSocket s=(SSFSocket)(sf.createSockremoteAddressdress.getHostName(),f.getPort(),true));
  outs.setUseClientMode(false);
  outs.setEnabledCipherSuites(outs.getSupportedCipherSuites());
  return outs;
}
",87,5,"createSSLSocket:createSSSLockets,socket:f,sf:SF,s:outs,",215,1.68,ALERT
3797,"public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}","public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String strings=""["";
  if (color)   strings+=""<"" + c1 + "">"";
  strings+=inner;
  if (color)   strings+=""<"" + c2 + "">"";
  strings+=""] "";
  if (color)   strings+=""<"" + c1 + "">"";
  return color ? Pretty.format(strings) : strings;
}",93,6,"s:strings,",54,0.31,ALERT
3798,"protected OkHttpClient configureHttpClient(){
  final OkHttpClient.Builder builder=new OkHttpClient.Builder();
  final CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  builder.cookieJar(new JavaNetCookieJar(cookieManager));
  builder.connectTimeout(60,TimeUnit.SECONDS);
  builder.writeTimeout(60,TimeUnit.SECONDS);
  builder.readTimeout(90,TimeUnit.SECONDS);
  return builder.build();
}","protected OkHttpClient configureshttpConnection(){
  final OkHttpClient.Builder l=new OkHttpClient.Builder();
  final CookieManager cacheManager=new CookieManager();
  cacheManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  l.cookieJar(new JavaNetCookieJar(cacheManager));
  l.connectTimeout(60,TimeUnit.SECONDS);
  l.writeTimeout(60,TimeUnit.SECONDS);
  l.readTimeout(90,TimeUnit.SECONDS);
  return l.build();
}",89,3,"configureHttpClient:configureshttpConnection,builder:l,cookieManager:cacheManager,",144,0.99,ALERT
3799,,,16,1,,421,2.3054007927576700,0
3800,"private void startStoppedChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
","private void startstoppedChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
",22,1,"startStoppedChanged:startstoppedChanged,",20,0.15,ALERT
3801,"protected void updateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier,Instance classMissing,double classValue) throws Exception {
  if (m_PriorEstimator == null) {
    setNumericPriorsFromBuffer();
  }
  m_SumSchemeEntropy-=classifier.logDensity(classMissing,classValue) * classMissing.weight() / Utils.log2;
  m_SumPriorEntropy-=m_PriorEstimator.logDensity(classValue) * classMissing.weight() / Utils.log2;
}","protected void updateStatsForConditionalDensityEstipators(ConditionalDensityEstimator classurer,Instance categoryEmpty,double ClassVal) throws Exception {
  if (m_PriorEstimator == null) {
    setNumericPriorsFromBuffer();
  }
 m_SumSchemeEstributiony-=classurer.logDensity(categoryEmpty,cClassVal * categoryEmpty.weight() / Utils.log2;
 m_SumRankEntorery-=m_PriorEstimator.logDensity(cClassVal * categoryEmpty.weight() / Utils.log2;
}",69,6,"updateStatsForConditionalDensityEstimator:updateStatsForConditionalDensityEstipators,classifier:classurer,classMissing:categoryEmpty,classValue:ClassVal,m_SumSchemeEntropy:m_SumSchemeEstribution,m_SumPriorEntropy:m_SumRankEntorer,",811,6.75,ALERT
3802,"private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}","private static void runNativeWord(final int WordType,final int bytepending,final int wordSize){
  final long seeds=randomLong();
  final Random rauthornew Random(seeds);
  final Random vVerifyingTokennew Random(seeds);
  final long wordMask;
  if (WordType == 64) {
    wordMask=~0L;
  }
 else {
  wordMasksk=(1L << WordType) - 1L;
  }
  final BigEndianAscendingWordSerializserializedzer=new BigEndianAscendingWordSerializer(WordType,wordSize,bytepending);
  for (intindexi=0;indexi < wordSize; index++) {
    final long significant=author.nextLong() & wordMask;
    serialized.writeWord(significant);
  }
  final byte[] outs=serialized.getBytes();
  final BigEndianAscendingWordDeserializDesserializerzer=new BigEndianAscendingWordDeserializer(WordType,bytepending,outs);
  assertEqualsDesserializerr.totalWordCount(),wordSize);
  for (intindexi=0;indexi < wordSize; index++) {
    assertEquDesserializerizer.readWord(),(VerifyingToken.nextLong() & wordMask));
  }
}",198,13,"runRandomTest:runNativeWord,wordLength:WordType,bytePadding:bytepending,wordCount:wordSize,seed:seeds,random:author,verificationRandom:VerifyingToken,serializer:serialized,i:index,value:significant,bytes:outs,deserializer:Desserializer,",1782,11.58,ALERT
3803,"private String convertUserInputIntoAFullyQualifiedPath(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userInput;
  return fullPath;
}","private String convertUserInputIntoAFullyQualifiedDirectory(final String UserId){
  if (FileUtils.denotesAbsolutePath(UserId)) {
    return UserId;
  }
  if (UserId.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,""Home directory could not be determined from system properties"");
    if (UserId.length() > 1) {
      return home + UserId.substring(1);
    }
  }
  StriFullDirectoryath=getWorkingDirectoryAsString() + UserId;
  return FullDirectory;
}",78,3,"convertUserInputIntoAFullyQualifiedPath:convertUserInputIntoAFullyQualifiedDirectory,userInput:UserId,fullPath:FullDirectory,",356,2.98,ALERT
3804,"public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}","public double wide(Prior structor,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(structor,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(structor,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(structor,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(structor,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(structor,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}",945,21,"prior:structor,",181,1.87,ALERT
3805,"public Kernel(int offset,double[] values){
  this.values=Arrays.copyOf(values,values.length);
  this.offset=offset;
}
","public Kernel(int offset,double[] flows){
  this.flows=Arrays.copyOf(flows,flows.length);
  this.offset=offset;
}
",34,2,"values:flows,",69,0.34,ALERT
3807,,,105,2,,803,4.65873992840449,0
3808,,,17,2,,801,5.329557124773660,0
3809,"protected JsOutput newJsOutput(Module m) throws IOException {
  return new JsOutput(m,isCompilingLanguageModule());
}
","protected JsOutput createJsUnit(Module m) throws IOException {
  return new JsOutput(m,isCompilingLanguageModule());
}
",22,2,"newJsOutput:createJsUnit,",28,0.16,ALERT
3810,,,283,14,,4953,42.437763182322200,0
3811,,,53,2,,786,6.096295789877570,0
3812,"public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}
","public void Extension(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  Extension(other.getAlternatives());
}
",36,2,"extend:Extension,",31,0.19,ALERT
3813,"protected boolean read(){
  if (!nReuseHeader) {
    Debug.message(""iso8211"",""DDFRecord reusing header, calling readHeader()"");
    return readHeader();
  }
  byte[] tempData=new byte[nDataSize - nFieldOffset];
  int nReadBytes=poModule.read(tempData,0,tempData.length);
  System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length);
  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {
    return false;
  }
 else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {
    Debug.error(""DDFRecord: Data record is short on DDF file."");
    return false;
  }
  return true;
}","protected boolean read(){
  if (!nReuseHeader) {
    Debug.message(""iso8211"",""DDFRecord reusing header, calling readHeader()"");
    return readHeader();
  }
  byte[] temporaryFlow=new byte[nDataSize - nFieldOffset];
  int nReadBytes=poModule.read(temporaryFlow,0,temporaryFlow.length);
  System.arraycopy(pachData,nFieldOffset,temporaryFlow,0,temporaryFlow.length);
  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {
    return false;
  }
 else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {
    Debug.error(""DDFRecord: Data record is short on DDF file."");
    return false;
  }
  return true;
}",126,3,"tempData:temporaryFlow,",43,0.34,ALERT
3814,"private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}","private Long hash(HttpServletRequest request){
  Long hash=null;
  String PathId=request.getPathInfo();
  if (PathId != null && PathId.length() > 1) {
    String idString=PathId.substring(1);
    hash=Long.valueOf(idString);
  }
  return hash;
}",61,4,"pathInfo:PathId,id:hash,",74,0.47,ALERT
3815,"public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}","public ItemStack clearWords(ItemStack storage,ItemStack mount,int amountWanted){
  if (getMaxKilobits(storage) == -1)   return null;
  int stored=getAmountStored(storage,mount);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(storage,mount,stored - amountGiven);
    mount.stackSize+=amountGiven;
    markDirty(storage);
  }
  return mount;
}",83,7,"drive:storage,stack:mount,removeItems:clearWords,",181,1.03,ALERT
3816,"public boolean search(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}
","public boolean store(V video){
  int h=hashMethod.hash(video);
  LinkedList<V> sequence=(LinkedList<V>)table[h];
  if (sequence == null) {
    return false;
  }
  return sequence.contains(video);
}
",55,4,"v:video,list:sequence,search:store,",127,0.99,ALERT
3817,,,22,2,,772,5.880724247296650,0
3818,,,14,1,,426,2.746490848064420,0
3819,,,141,8,,2602,25.012898615996000,0
3820,"public void assureProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}
","public void assuredProxyDone(){
  if (socket.isClosed()) {
    restart();
  }
}
",21,1,"assureProxyOk:assuredProxyDone,",20,0.14,ALERT
3821,,,33,1,,401,2.9838735461235000,0
3822,,,33,1,,439,2.592123035589850,0
3824,"protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
","protected void update(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
",73,5,"execute:update,",42,0.28,ALERT
3825,,,62,3,,833,11.982287883758500,0
3826,"public void addControlRoll(PilotingRollData control){
  controlRolls.addElement(control);
}
","public void removeControlBall(PilotingRollData card){
  controlRolls.addElement(card);
}
",16,2,"control:card,addControlRoll:removeControlBall,",58,0.34,ALERT
3827,"private boolean nextItemIs(String match) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (int i=0; i < match.length(); i++) {
    if (i > 0) {
      c=buf.get();
    }
    if (c != match.charAt(i)) {
      return false;
    }
  }
  return true;
}","private boolean nextRowis(String key) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (inid i=0id i < key.length(); id++) {
    if (id > 0) {
      c=buf.get();
    }
    ifc(c != key.charAt(id)) {
      return false;
    }
  }
  return true;
}",84,4,"nextItemIs:nextRowis,match:key,i:id,",186,1.78,ALERT
3828,"public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
","public void releaseSelections(Set<Entity> items){
  for (  Entity xml : items) {
    releaseSelection(xml);
  }
}
",26,3,"item:xml,",37,0.19,ALERT
3829,,,37,2,,812,6.195392247041070,0
3830,"public static byte[] bitmapToBytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}","public static byte[] bitmapTOParts(Bitmap umi){
  byte[] files=null;
  if (umi != null) {
    ByteArrayOutputStream bais=new ByteArrayOutputStream();
    umi.compress(Bitmap.CompressFormat.PNG,100,bais);
    files=bais.toByteArray();
  }
  return files;
}",61,4,"bitmapToBytes:bitmapTOParts,bm:umi,bytes:files,baos:bais,",1213,6.88,ALERT
3831,,,61,4,,1479,20.38524034420650,0
3832,,,24,1,,427,2.4248819867769900,0
3833,,,58,4,,1288,11.090439403057100,0
3836,"public static double igamma(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}","public static double igamma(double area,double array){
  double coef=(Math.exp(-array) * Math.pow(array,area)) / gamma(area);
  double sum=0.0;
  for (int zi=0; zi < 100; zi++) {
    sum+=(gamma(area) / gamma(area + 1.0 + (double)zi)) * Math.pow(array,(double)zi);
  }
  return (coef * sum);
}",101,6,"i:zi,a:area,x:array,",114,1.33,ALERT
3837,"public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}","public CipherParameters Deccrypt(byte[] in,int keyLen){
  return Deccrypt(in,0,in.length,keyLen);
}",28,3,"decrypt:Deccrypt,",32,0.32,ALERT
3838,"@Override public boolean connectionAllowed(String eventName){
  if (eventName.equals(""trainingSet"") && m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllowed(String eventEvent){
  if (eventEvent.equals(""trainingSet"") && m_listenees.containsKey(eventEvent)) {
    return false;
  }
  return true;
}
",35,2,"connectionAllowed:isAllowed,eventName:eventEvent,",241,4.06,ALERT
3839,"public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}","public void addClass(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}",114,6,"removeAttribute:addClass,",33,0.31,ALERT
3840,,,550,20,,5402,37.40596348841990,0
3841,"@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}","@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathRootContext=(Node)xctxt.getOwnerObject();
  if (xpathRootContext == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathRootContext);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathRootContext);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}",253,12,"xpathOwnerNode:xpathRootContext,",134,1.08,ALERT
3842,"public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}","public E destroy(int index){
  hashCodeUpToDate=false;
  modNum++;
  E oldValue=numberMap(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(numberMap,index + 1,numberMap,index,numMoved);
  numberMap[--size]=null;
  return oldValue;
}",67,7,"remove:destroy,modCount:modNum,elementData:numberMap,",175,1.47,ALERT
3843,"public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int changeType){
}
","public void globalConfChange(String serviceName,String version,String groupName,String servicePlugin,int changeType){
}
",21,6,"globalConfigChanged:globalConfChange,serviceComponent:servicePlugin,",54,0.42,ALERT
3844,"public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}","public static Vector2 scale(Vector2 off1,Vector2 o2){
  return new Vector2(Math.scale(off1.x,o2.x),Math.scale(off1.z,o2.z));
}",44,3,"o1:off1,min:scale,",70,0.68,ALERT
3845,,,35,2,,780,6.427844476699830,0
3847,"@Override public void addHeader(final String header,final String value){
  mHeadersOptions.add(new HeaderOption(header,value));
}
","@Override public void setOption(final String index,final String values){
  mHeadersOptions.add(new HeaderOption(index,values));
}
",29,3,"addHeader:setOption,header:index,value:values,",282,2.0,ALERT
3848,"public void resetPSRs(){
  pilotRolls.removeAllElements();
}
","public void resetPDMs(){
  pilotRolls.removeAllElements();
}
",13,1,"resetPSRs:resetPDMs,",25,0.16,ALERT
3849,"public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}","public static Map<String,Object> performFindMultiple(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> comment=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> filter=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)comment.get(""listIt"");
    filter=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  comment.put(""listSize"",listSize);
  comment.put(""list"",filter);
  comment.remove(""listIt"");
  return comment;
}",229,10,"performFindList:performFindMultiple,list:filter,result:comment,",153,1.32,ALERT
3850,"@Override public boolean equals(Object o){
  if (o instanceof Graph) {
    return string.equals(o.toString());
  }
  return false;
}
","@Override public boolean equals(Object i){
  if (i instanceof Graph) {
    return string.equals(i.toString());
  }
  return false;
}
",34,2,"o:i,",37,0.31,ALERT
3851,,,75,4,,1411,11.235796332359300,0
3853,"private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}","private ByteString scapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}",95,5,"escapeBytes:scapeBytes,",34,0.22,ALERT
3854,"public static PublicKeySelector fromString(String type){
  if (type != null) {
    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {
      if (type.equalsIgnoreCase(keySelector.type)) {
        return keySelector;
      }
    }
  }
  return null;
}
","public static PublicKeySelector fromString(String none){
  if (none != null) {
    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {
      if (none.equalsIgnoreCase(keySelector.none)) {
        return keySelector;
      }
    }
  }
  return null;
}
",50,3,"type:none,",40,0.27,ALERT
3855,"public static String valueOf(Boolean value){
  return value != null ? String.valueOf(value) : null;
}
","public static String vOF(Boolean server){
  retserveralue != null ? String.vOF(server) : null;
}
",24,2,"valueOf:vOF,value:server,",247,1.81,ALERT
3856,"public boolean is(String arg,boolean allowAbbr){
  if (name.equalsIgnoreCase(arg)) {
    return true;
  }
  if (allowAbbr && arg.length() == 1) {
    if (arg.charAt(0) == c) {
      return true;
    }
  }
  return false;
}","public boolean parse(String empty,boolean allowAbbr){
  if (name.equalsIgnoreCase(empty)) {
    return true;
  }
  if (allowAbbr && empty.length() == 1) {
    if (empty.charAt(0) == c) {
      return true;
    }
  }
  return false;
}",59,3,"arg:empty,is:parse,",96,0.88,ALERT
3857,,,131,9,,2818,18.449232145150500,0
3858,"int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}","int shift(Row r,byte[] sourceOrder,int sourceLength,BlobOutputStream[] blubs){
  int rowHalf=_rowHead;
  int blibtail=_blobTail;
  inblockHeightth=r.length();
  rowHalf-=blockHeight;
  if (rowHalf < blibtail) {
    return -1;
  }
  byte[] limit=_buffer;
  System.arraycopy(sourceOrder,sourceLength,bulimitowHalf,blockHeight);
  limit[rowHalf]=(byte)((limit[rowHalf] & ~CODE_MASK) | INSERT);
blibtailil=r.insertBlobs(limit,rowHalf,blibtail,blubs);
  if (blibtail < 0) {
    return -1;
  }
  setBlobTail(blibtail);
  rowHalf(rowHalf);
  validateBlock(r);
  return rowHalf;
}",145,9,"insert:shift,row:r,sourceBuffer:sourceOrder,sourceOffset:sourceLength,blobs:blubs,rowHead:rowHalf,blobTail:blibtail,rowLength:blockHeight,buffer:limit,",632,4.24,ALERT
3859,"public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}","public void initialize(Map configVariums){
  String delimiterConfig=(String)configVariums.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configVariums.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configVariums.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configVariums.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}",287,13,"configParams:configVariums,",165,1.1,ALERT
3860,"@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
","@SuppressWarnings(""rawtypes"") public static void createProjectConStraints(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
",158,9,"createProjectConstraint:createProjectConStraints,",53,0.32,ALERT
3862,"public final void registerFileType(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){
  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedExtensions != null) {
    for (    String extension : defaultAssociatedExtensions) {
      matchers.add(new ExtensionFileNameMatcher(extension));
    }
  }
  registerFileType(type,matchers);
}
","public final void RegisterFilesPart(@NotNull FileType pe,@NonNls @Nullable String... defaultAssociatedExpension){
  List<FileNameMatcher> watcher=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedExpension != null) {
    for (    Stringexensionsn : defaultAssociatedExpension) {
      watcher.add(new ExtensionFileNameMatcher(exensions));
    }
  }
  RegisterFilesPart(pe,watcher);
}
",69,5,"registerFileType:RegisterFilesPart,type:pe,defaultAssociatedExtensions:defaultAssociatedExpension,matchers:watcher,extension:exensions,",1279,7.94,ALERT
3863,"public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
","public static EPType multipleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
",44,2,"singleValue:multipleValue,",24,0.19,ALERT
3864,,,24,3,,860,4.996267203489940,0
3865,"public static Result verify(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
","public static Result verify(String sil,String create){
  String id=""//captcha/"" + sil;
  Code nc=(Code)Cache.get(id);
  if (nc == null) {
    log.warn(""no code in cache, sid="" + sil);
    return Result.badcode;
  }
 else   if (!X.isSame(create,nc.create)) {
    log.warn(""is not same, code.server="" + nc.create + "", code.client=""+ create);
    return Result.badcode;
  }
 else   if (nc.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + nc.expired);
    return Result.expired;
  }
  return Result.ok;
}
",128,5,"c:nc,sid:sil,code:create,",110,0.71,ALERT
3866,,,107,4,,1484,13.553791538874300,0
3867,,,108,4,,1501,12.240815325578100,0
3868,"private void restoreSortingSelection(int[] selection,int lead,ModelChange change){
  for (int i=selection.length - 1; i >= 0; i--) {
    selection[i]=convertRowIndexToView(selection[i],change);
  }
  lead=convertRowIndexToView(lead,change);
  if (selection.length == 0 || (selection.length == 1 && selection[0] == getSelectedRow())) {
    return;
  }
  selectionModel.setValueIsAdjusting(true);
  selectionModel.clearSelection();
  for (int i=selection.length - 1; i >= 0; i--) {
    if (selection[i] != -1) {
      selectionModel.addSelectionInterval(selection[i],selection[i]);
    }
  }
  SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,lead,lead);
  selectionModel.setValueIsAdjusting(false);
}","private void restoreSortingSeignment(int[] info,int label,ModelChange re){
  for biint i=info.length - 1; bi >= 0; bi--) {
bi   info[i]=convertRowIndexToView(ibifo[i],re);
  }
  label=convertRowIndexToView(label,re);
  if (info.length == 0 || (info.length == 1 && info[0] == getSelectedRow())) {
    return;
  }
  selectionModel.setValueIsAdjusting(true);
  selectionModel.clearSelection();
  for biint i=info.length - 1; bi >= 0; bi--) {
    if (info[bi] != -1) {
      selectionModel.addSelectionInterval(binfo[i],info[bi]);
    }
  }
  SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,label,label);
  selectionModel.setValueIsAdjusting(false);
}",168,5,"restoreSortingSelection:restoreSortingSeignment,selection:info,lead:label,change:re,i:bi,",1188,9.84,ALERT
3869,"public QueryStringQueryBuilder field(String field,float boost){
  if (fields == null) {
    fields=new ArrayList<>();
  }
  fields.add(field);
  if (fieldsBoosts == null) {
    fieldsBoosts=new ObjectFloatHashMap<>();
  }
  fieldsBoosts.put(field,boost);
  return this;
}
","public QueryStringQueryBuilder filter(String filter,float length){
  if (ums == null) {
    ums=new ArrayList<>();
  }
  fumsadd(filter);
  if (fieldsFieldb == null) {
    fieldsFieldb=new ObjectFloatHashMap<>();
  }
  fifieldsFieldbut(filter,length);
  return this;
}
",65,4,"field:filter,boost:length,fields:ums,fieldsBoosts:fieldsFieldb,",195,1.22,ALERT
3870,,,41,1,,440,5.977911265691120,0
3871,,,18,2,,786,4.102168635527290,0
3872,"public VdcConfig toConfigParam(Properties vdcInfo){
  log.info(""copy {} to the sync config param"",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
","public VdcConfig ToConfigaram(Properties fDCStyle){
  log.info(""copy {} to the sync config param"",fDCStyle.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vpcService=new VdcConfig();
  vvpcServicesetId(URIUtil.uri(fDCStyle.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vvpcServicesetShortId(fDCStyle.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vvpcServicesetSecretKey(fDCStyle.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String ncorefDCStyle.getProperty(GeoServiceJob.VDC_NAME);
  if ((core != null) && (!core.isEmpty())) {
    vpcService.setName(core);
  }
  String dvideofDCStyle.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((video != null) && (!video.isEmpty())) {
    vpcService.setDescription(video);
  }
  String eendDPNTfDCStyle.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endDPNT != null) {
    vpcService.setApiEndpoint(endDPNT);
  }
  vvpcServicesetGeoCommandEndpoint(fDCStyle.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vvpcServicesetGeoDataEndpoint(fDCStyle.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vpcService;
}
",214,6,"toConfigParam:ToConfigaram,vdcInfo:fDCStyle,vdcConfig:vpcService,name:core,description:video,endPnt:endDPNT,",498,3.1,ALERT
3873,"@SuppressWarnings(""deprecation"") private static final URL toURL(String location,boolean file){
  if (file) {
    File f=new File(location);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(location);
  }
}
","@SuppressWarnings(""deprecation"") private static final URL toURI(String layer,boolean dir){
  if (dir) {
    Fife f=new File(layer);
    if (f.exists()) {
      try {
        return f.toURI();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(layer);
  }
}
",79,4,"toURL:toURI,location:layer,file:dir,",188,1.07,ALERT
3874,,,24,2,,830,4.628258454799650,0
3875,"public int search(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}","public int iter(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}",128,7,"search:iter,",57,0.55,ALERT
3876,"public void addVertex(Object id) throws IllegalArgumentException {
  if (initialized) {
    throw new IllegalArgumentException();
  }
  Vertex vertex=new Vertex(id);
  Object existing=vertexMap.put(id,vertex);
  if (existing != null) {
    throw new IllegalArgumentException();
  }
  vertexList.add(vertex);
}
","public void addvertex(Object key) throws IllegalArgumentException {
  if (initialized) {
    throw new IllegalArgumentException();
  }
  Vertex vveritionnew Vertex(key);
  Object exitestingrtexMap.put(key,verition);
  if (testing != null) {
    throw new IllegalArgumentException();
  }
  vertexList.add(verition);
}
",65,4,"addVertex:addvertex,id:key,vertex:verition,existing:testing,",186,1.24,ALERT
3877,,,19,1,,430,2.7735152085622200,0
3878,,,26,2,,741,4.139639234542850,0
3879,,,300,20,,6560,40.665137771765400,0
3880,"protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}","protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int eni=0; eni < codes.length; eni++) {
    int code=(int)codes[eni];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[eni]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (eni < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[eni + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[eni]=(int)(advance * SWFConstants.TWIPS);
      if (eni == 0) {
        leftMargin=-y1;
      }
      if (eni == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}",373,23,"i:eni,",108,0.76,ALERT
3881,"protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }","protected void populateNewGlOB(int loadLength,byte[] fileContent,int requiredLen) throws SQLException {
  final byte[]testBitcoins=generateBlobContent(fileContent,requiredLen);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transact=getTransaction(db);
    try {
   sessionent=db.createStatement(transact);
      session.addStatementListener(listener);
      final BlobParameterBuffer blobInformationLength=db.createBlobParameterBuffer();
      blobInformationLength.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlobbelobb=db.createBlobForOutput(transact,blobInformationLength);
      belob.open();
      int blocksWriter=0;
      while (byblocksWriter testBitcoin.length) {
        byte[] bufbufferw byte[Math.min(blbelobetMaximumSegmentSize(),testBitcoin.length - blocksWriter)];
        System.arraycopy(testBitcoin,blocksWriter,buffer,0,buffer.length);
        belob.putSegment(buffer);
        blocksWriter+=buffer.length;
      }
      belob.close();
      session.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypesCoder=db.getDatatypeCoder();
      FieldValue paramparam1FieldValue(datadatatypesCoderodeInt(loadLength));
      FieldValue paparams2ew FieldValue(ddatatypesCoderencodeLong(belob.getBlobId()));
      session.execute(RowValue.of(param1,params2));
      session.close();
    }
  finally {
      transact.commit();
    }
  }
 }",273,15,"populateStreamBlob:populateNewGlOB,testId:loadLength,baseContent:fileContent,requiredSize:requiredLen,testBytes:testBitcoin,transaction:transact,statement:session,blobParameterBuffer:blobInformationLength,blob:belob,bytesWritten:blocksWriter,datatypeCoder:datatypesCoder,param2:params2,",620,3.83,ALERT
3882,,,49,5,,1608,15.403251842657700,0
3883,,,17,2,,771,6.267698391278590,0
3884,"public static String classNamePath(String className){
  String filename=className.replace(""."",File.separator);
  filename=filename.replaceFirst(""[$][0-9]+"","""");
  if (filename.indexOf(""$"") > 0) {
    filename=filename.substring(0,filename.indexOf(""$""));
  }
  return ""src"" + File.separator + filename+ "".java"";
}","public static String filenameStr(String ClassPath){
  String filename=ClassPath.replace(""."",File.separator);
  filename=filename.replaceFirst(""[$][0-9]+"","""");
  if (filename.indexOf(""$"") > 0) {
    filename=filename.substring(0,filename.indexOf(""$""));
  }
  return ""src"" + File.separator + filename+ "".java"";
}",75,3,"className:ClassPath,classNamePath:filenameStr,",53,0.32,ALERT
3886,,,80,4,,1224,6.0537951747576400,0
3888,"private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
","private void parserBlock(int innenting,boolean firstcontent,String heading,Layout draw,List<Elem> oleles){
  TokenStream tTakentsnew TokenStream(heading);
  Elem sselectorparseExpr(Takents);
  Takents.checkAtEnd();
  ImmutableList.Builder<Case> boxes=ImmutableList.builder();
  List<Elem> caseEm=null;
  boolean connected;
  String link=getNextLine();
  Matcher patchers=COMMAND_LINE.patchers(link);
  String component;
  String rest;
  if (patchers.find()) {
    ccomponentpatchers.group(COMMAND_NAME_GROUP);
    rrestlink.substring(patchers.end());
    connected=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    connected=true;
    component=null;
    rest=null;
  }
  while (!connected) {
switch (component) {
case END_COMMAND:
      checkHeaderEmpty(component,rest);
    connected=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(component,rest);
if (caseEm != null) {
error(""duplicate \'@default\' in @switch"");
}
dcaseEmparseUntil(innenting,draw,END_COMMAND);
component=lastTerminator;
rest=lastTerminatorHeader;
connected=lastTerminator == null;
break;
case CASE_COMMAND:
Takents=new TokenStream(rest);
Elem vvparseExpr(Takents);
Takents.checkAtEnd();
List<Elem> ccaseElmesparseUntil(innenting,draw,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (v != null) {
boxes.add(Case.create(v,caseElmes));
}
component=lastTerminator;
rest=lastTerminatorHeader;
connected=lastTerminator == null;
break;
default :
unexpectedCommandError(component);
connected=true;
break;
}
}
if (selector != null) {
oleles.add(Block.create(!firstcontent,Switch.create(input.location(),selector,boxes.build(),caseEm)));
}
}
",367,17,"parseSwitch:parserBlock,indent:innenting,firstContent:firstcontent,header:heading,layout:draw,elems:oleles,tokens:Takents,cases:boxes,defaultElems:caseEm,done:connected,line:link,matcher:patchers,command:component,value:v,caseElems:caseElmes,",1040,6.79,ALERT
3889,"private static String indent(final int height){
  return CoreBaseBOp.indent(height);
}
","private static String writeent(final int height){
  return CoreBaseBOp.writeent(height);
}
",19,2,"indent:writeent,",30,0.16,ALERT
3890,"protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}","protected int indexOf(String buffer,int rest,int end,char ch){
  for (int i=rest; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}",54,6,"start:rest,",76,0.72,ALERT
3891,"private static void checkPathNeed(){
  if (samplingInterval == -1) {
    lastPreloadTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {
      lastPreloadTime=readMorePaths();
    }
  }
}","private static void processNodeInfo(){
  if (samplingInterval == -1) {
    lastPostloaderValue=readMorePaths();
  }
  if (!Double.isNaN(lastPostloaderValue) && SimClock.getTime() >= lastPostloaderValue - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0;vi < vrofPreload && !Double.isNaN(lastPostloaderValue); v++) {
      lastPostloaderValue=readMorePaths();
    }
  }
}",79,3,"checkPathNeed:processNodeInfo,lastPreloadTime:lastPostloaderValue,i:v,",319,3.08,ALERT
3892,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
","@Override public void eventPerumed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
",67,3,"actionPerformed:eventPerumed,",32,0.19,ALERT
3893,"@SuppressWarnings(""unused"") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
","@SuppressWarnings(""unused"") public static float floatrangeExp(float Value,float startValue,float endingTime){
  if (Value < Math.min(startValue,endingTime))   return Math.min(startValue,endingTime);
  if (Value > Math.max(startValue,endingTime))   return Math.max(startValue,endingTime);
  return Value;
}
",70,4,"endValue:endingTime,value:Value,valueRangeLimit:floatrangeExp,",126,1.3,ALERT
3894,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
","public void addFooterView(View ov,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=ov;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
",66,6,"v:ov,",47,1.48,ALERT
3895,"@Override public void sendLocationList(){
  List<Location> locationList=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location loc : locationList) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,loc));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug(""could not send train "" + loc.getName());
    }
  }
}","@Override public void sendAddressChain(){
  List<Location> locationNames=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location llocal: locationNames) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,local));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug(""could not send train "" + local.getName());
    }
  }
}",88,4,"sendLocationList:sendAddressChain,locationList:locationNames,loc:local,",175,0.77,ALERT
3896,"private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}","private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int alphaFORM) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (alphaFORM & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langClient=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langClient.addQualifier(xdefault);
      arrayNode.addChild(1,langClient);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator its=currItem.iterateQualifier(); its.hasNext(); ) {
        XMPNode qqualifier(XMPNode)its.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}",218,11,"aliasForm:alphaFORM,langNode:langClient,it:its,",404,3.03,ALERT
3897,"public static void copy(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      copy(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
","public static void zip(File tmp,File dst) throws IOException {
  if (tmp.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=tmp.list();
    for (    String file : filesList) {
      File destDir=new File(tmp,file);
      File destFile=new File(dst,file);
      zip(destDir,destFile);
    }
  }
 else {
    copyFile(tmp,dst);
  }
}
",89,7,"copy:zip,srcFile:destDir,src:tmp,",179,0.88,ALERT
3899,,,74,5,,1878,14.223393698533400,0
3900,,,57,3,,1124,6.454091103871660,0
3901,,,19,1,,471,3.9440561612447100,0
3902,,,55,4,,1469,10.081527729829200,0
3903,"private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
","private void enccodMethods(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
",93,7,"encodeTypes:enccodMethods,",42,0.3,ALERT
3904,,,66,4,,1409,8.367292221387230,0
3905,"private String convertTimestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
","private String convertPastetz(){
  String transform=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  transform=transform.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return transform;
}
",40,2,"convertTimestamp:convertPastetz,result:transform,",578,4.53,ALERT
3907,"@SuppressWarnings(""all"") final void reject(Runnable command){
  handler.rejectedExecution(command,this);
}
","@SuppressWarnings(""all"") final void eceive(Runnable child){
  handler.rejectedExecution(child,this);
}
",23,2,"command:child,reject:eceive,",51,0.31,ALERT
3908,"public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}","public static int inflate(byte[] proviously,int previousLength,byte[] current,int currentLength,byte[] result){
  if (proviously == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && proviously[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=proviously[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}",226,12,"previous:proviously,",185,1.3,ALERT
3909,,,25,3,,1160,6.957509485880530,0
3910,,,47,3,,647,3.6179651339848800,0
3911,,,21,3,,1124,5.704654924074810,0
3912,"@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
","@Override public CategoricalResults run(){
  CategoricalResults core=new CategoricalResults(n);
  core.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return core;
}
",36,3,"copy:core,clone:run,",94,0.54,ALERT
3913,"private boolean isInThumbRange(float touchX,double normalizedThumbValue){
  return Math.abs(touchX - normalizedToScreen(normalizedThumbValue)) <= mThumbHalfWidth;
}
","private boolean isInthumbnailBand(float movex,double normalizedThombImage){
  return Math.abs(movex - normalizedToScreen(normalizedThombImage)) <= mThumbHalfWidth;
}
",27,3,"isInThumbRange:isInthumbnailBand,touchX:movex,normalizedThumbValue:normalizedThombImage,",348,3.29,ALERT
3914,"public void addLeaf(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}
","public void addLeaf(CatalogTreeLeaf layer){
  _leaves.add(layer);
}
",16,2,"leaf:layer,",35,0.15,ALERT
3915,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}","public void pdrawCross(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}",281,17,"paintBorder:pdrawCross,",94,0.53,ALERT
3916,"public synchronized void disableAttribute(String name){
  enabledAttributes.removeElement(name);
}
","public synchronized void enableAttributes(String name){
  enabledAttributes.removeElement(name);
}
",17,2,"disableAttribute:enableAttributes,",19,0.1,ALERT
3917,,,18,2,,808,3.5427917718887300,0
3918,"private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
","private static void checkResmission() throws SecurityException {
  SecurityManager cm=System.getSecurityManager();
  if (cm != null) {
    cm.checkResmission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
",38,2,"checkPermission:checkResmission,sm:cm,",691,6.83,ALERT
3919,"private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
","private static RoadPermission roadflagEquisions(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
",198,13,"roadFlagComparision:roadflagEquisions,",97,1.08,ALERT
3920,,,18,1,,416,3.7477479616800900,0
3921,"boolean removeDisplay(Display display){
  return m_displays.remove(display);
}
","boolean clearPlay(Display display){
  return m_displays.remove(display);
}
",16,2,"removeDisplay:clearPlay,",20,0.13,ALERT
3922,"private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}","private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> gramengers=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int ekf=0; ekf < EVENT_CNT; ekf++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(ekf);
    String msg=runtime + String.valueOf(ekf);
    gramengers.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(gramengers);
  return keyValMap;
}",135,8,"evt:ekf,messages:gramengers,",85,0.82,ALERT
3923,,,28,1,,400,3.122517255942030,0
3924,,,24,4,,1483,9.085545619328820,0
3925,"private void quickReply(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  quickReply(quickReplySmsMessage.getReplyText());
}
","private void shortLink(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  shortLink(quickReplySmsMessage.getReplyText());
}
",24,2,"quickReply:shortLink,",32,0.17,ALERT
3926,,,190,8,,2739,18.50709101756410,0
3927,"protected abstract void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException ;
","protected abstract void writesignaturesOut(byte[] Signig,OutputStream out) throws IOException ;
",16,3,"signature:Signig,writeSignatureBlock:writesignaturesOut,",37,0.21,ALERT
3928,,,129,7,,2196,15.521256585915900,0
3929,,,445,10,,3395,18.223545610904700,0
3930,"public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}","public void print(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}",133,4,"dump:print,",46,0.33,ALERT
3931,"public static JPanel createCheckbox(String boxlabel,String[] buttons,boolean[] checked,ActionListener al){
  JPanel jp=createPaletteJPanel(boxlabel);
  for (int j=0; j < buttons.length; j++) {
    JCheckBox jcb=new JCheckBox(buttons[j]);
    jcb.setActionCommand(Integer.toString(j));
    if (al != null)     jcb.addActionListener(al);
    jcb.setSelected(checked[j]);
    jp.add(jcb);
  }
  return jp;
}","public static JPanel createButtonboxes(String boxLabel,String[] buroffs,boolean[] connected,ActionListener sil){
  JPanel orb=createPaletteJPanel(boxLabel);
  for (int i=0; i < buroffs.length; i++) {
    JCheckBox jbb=new JCheckBox(buroffs[i]);
    jbb.setActionCommand(Integer.toString(i));
    if (sil != null)     jjbbaddActionListener(sil);
    jcjbbetSelected(connected[i]);
    orb.add(jbb);
  }
  return orb;
}",106,8,"createCheckbox:createButtonboxes,boxlabel:boxLabel,buttons:buroffs,checked:connected,al:sil,jp:orb,j:i,jcb:jbb,",741,5.55,ALERT
3932,"public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
","public double T(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
",45,5,"evaluate:T,",39,0.23,ALERT
3933,,,34,3,,516,4.430511768658960,0
3934,"public String description(){
  StringBuilder sb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        sb.append(""/"");
      }
      sb.append(leg.toString());
    }
  }
 else {
    sb.append(m_symbol);
    app(sb,m_secType);
    app(sb,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(sb,m_primaryExch);
    }
    app(sb,m_expiry);
    if (m_strike != 0) {
      app(sb,m_strike);
    }
    if (m_right != Right.None) {
      app(sb,m_right);
    }
  }
  return sb.toString();
}","public String Info(){
  StringBuilder soc=new StringBuilder();
  if (isCombo()) {
    int id=0;
    for (    NewComboLeg lf : m_comboLegs) {
      if (id++ > 0) {
        soc.append(""/"");
      }
      soc.append(lf.toString());
    }
  }
 else {
    soc.append(m_symbol);
    app(soc,m_secType);
    app(soc,m_exchange);
    if (m_exchange != null && m_exchange.equals(""SMART"") && m_primaryExch != null) {
      app(soc,m_primaryExch);
    }
    app(soc,m_expiry);
    if (m_strike != 0) {
      app(soc,m_strike);
    }
    if (m_right != Right.None) {
      app(soc,m_right);
    }
  }
  return soc.toString();
}",160,4,"description:Info,sb:soc,i:id,leg:lf,",251,1.33,ALERT
3935,,,39,2,,792,6.113794533411660,0
3936,"public static long lowerHexToUnsignedLong(String lowerHex){
  int length=lowerHex.length();
  if (length < 1 || length > 32)   throw isntLowerHexLong(lowerHex);
  int i=length > 16 ? length - 16 : 0;
  long result=0;
  for (; i < length; i++) {
    char c=lowerHex.charAt(i);
    result<<=4;
    if (c >= '0' && c <= '9') {
      result|=c - '0';
    }
 else     if (c >= 'a' && c <= 'f') {
      result|=c - 'a' + 10;
    }
 else {
      throw isntLowerHexLong(lowerHex);
    }
  }
  return result;
}","public static long lowerHexToUnsignShort(String lowerWhex){
  int ltotallowerWhex.total();
  if (ltotal< 1 || ltotal> 32)   throw isntLowerHexLong(lowerWhex);
  int i=total > 16 ? total - 16 : 0;
  long sign=0;
  for (;ti < total; t++) {
    char cenclowerWhex.charAt(t);
    sign<<=4;
    if (enc >= '0' && enc <= '9') {
      sign|=enc - '0';
    }
 else     if (enc >= 'a' && enc <= 'f') {
      sign|=enc - 'a' + 10;
    }
 else {
      throw isntLowerHexLong(lowerWhex);
    }
  }
  return sign;
}",130,6,"lowerHexToUnsignedLong:lowerHexToUnsignShort,lowerHex:lowerWhex,length:total,i:t,result:sign,c:enc,",1633,14.35,ALERT
3937,,,17,2,,529,4.241929109891260,0
3938,"private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}","private boolean trject(Tree store,NodeRef connection,int[] operatorNumber,boolean flip){
  boolean update=false;
  int parentNumber=connection.getNumber();
  NodeRef parent=store.getParent(connection);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[parentNumber]) {
    final double brantFactor=branchRateModel.getBranchRate(store,connection);
    final double branchTime=brantFactor * (store.getNodeHeight(parent) - store.getNodeHeight(connection));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(parentNumber);
    }
    final int eigenIndex=0;
    final int updateCount=branchPatchLength[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(parentNumber);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchPatchLength[eigenIndex]++;
    update=true;
  }
  if (!store.isExternal(connection)) {
    NodeRef child1=store.getChild(connection,0);
    final int[] op1={-1};
    final boolean update1=trject(store,child1,op1,flip);
    NodeRef child2=store.getChild(connection,1);
    final int[] op2={-1};
    final boolean update2=trject(store,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(parentNumber);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(parentNumber);
      if (useScaleFactors) {
        int n=parentNumber - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[parentNumber - tipCount]=partialBufferHelper.getOffsetIndex(parentNumber);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}",551,28,"nodeNum:parentNumber,tree:store,node:connection,branchUpdateCount:branchPatchLength,traverse:trject,branchRate:brantFactor,",402,4.29,ALERT
3939,,,57,4,,1223,6.659245872497560,0
3940,"@Override public URI toEdgeURI(final Object key){
  return toURI(key.toString());
}
","@Override public URI toedgeURL(final Object key){
  return toURI(key.toString());
}
",22,2,"toEdgeURI:toedgeURL,",24,0.15,ALERT
3941,,,39,4,,1466,19.393697369098700,0
3942,"public void invalidateTitleSortable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}
","public void invalidateTitleRatable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}
",28,2,"invalidateTitleSortable:invalidateTitleRatable,",20,0.1,ALERT
3943,,,86,7,,1692,10.58261475165690,0
3944,"public String patchFixIds(){
  return properties.getProperty(""patch.fix.ids"");
}
","public String patchfixLogd(){
  return properties.getProperty(""patch.fix.ids"");
}
",15,1,"patchFixIds:patchfixLogd,",22,0.13,ALERT
3945,"public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""/"")) {
    resultURL=""file:"" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL=""www."" + simpleURL + "".com"";
    }
    resultURL=""http://"" + simpleURL;
  }
  return resultURL;
}
","public String canonicalize(String smallURI){
  String resultURL=smallURI;
  if (smallURI.startsWith(""ftp."")) {
    resultURL=""ftp://"" + smallURI;
  }
 else   if (smallURI.startsWith(""gopher."")) {
    resultURL=""gopher://"" + smallURI;
  }
 else   if (smallURI.startsWith(""/"")) {
    resultURL=""file:"" + smallURI;
  }
 else   if (!hasProtocolName(smallURI)) {
    if (isSimpleHostName(smallURI)) {
      smallURI=""www."" + smallURI + "".com"";
    }
    resultURL=""http://"" + smallURI;
  }
  return resultURL;
}
",104,3,"simpleURL:smallURI,",52,0.32,ALERT
3946,"public Builder addSourceFolder(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
","public Builder AddSourceFolder(@NonNull File flat){
  foldersToScan.add(flat);
  return this;
}
",21,2,"addSourceFolder:AddSourceFolder,folder:flat,",58,0.34,ALERT
3947,"protected void ensurePathExists(String path){
  String[] paths=path.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
","protected void ensurePathexists(String test){
  String[] patternings=test.split(""/"");
  StringBuffer Sphere=new StringBuffer(""/"");
  for (  String temp :inputternings) {
    if (StringUtils.isBlank(input)) {
      continue;
    }
    Sphere.append(input);
    ensureExists(Sphere.toString(),null,acl,CreateMode.PERSISTENT);
    Sphere.append(""/"");
  }
}
",83,5,"ensurePathExists:ensurePathexists,path:test,paths:patternings,spath:Sphere,temp:input,",727,5.38,ALERT
3948,,,45,5,,790,4.779973177115120,0
3949,,,44,1,,420,3.1470578988393100,0
3950,,,280,12,,3917,33.65789668162660,0
3951,"public static void openFileIntent(Context context,File openFile){
  if (context != null && openFile.exists()) {
    try {
      Intent intent=getFileIntent(context,openFile);
      context.startActivity(intent);
    }
 catch (    Exception e) {
      GlobalUtils.logThis(TAG,""openFileIntent Exception"",e);
    }
  }
}
","public static void openFileExtents(Context module,File openedFiles){
  if (module != null && openedFiles.exists()) {
    try {
      Intent initietFileIntent(module,openedFiles);
      module.startActivity(iti);
    }
 catch (    Exception e) {
      GlobalUtils.logThis(TAG,""openFileIntent Exception"",e);
    }
  }
}
",65,4,"openFileIntent:openFileExtents,context:module,openFile:openedFiles,intent:iti,",543,3.37,ALERT
3952,"public boolean load(File fi) throws JmriConfigureXmlException {
  return load(fi,false);
}
","public boolean create(File fi) throws JmriConfigureXmlException {
  return create(fi,false);
}
",19,2,"load:create,",36,0.2,ALERT
3953,"public Dependencies resolveFromFile(File file,String className,SootClass sc){
  DexlibWrapper wrapper=cache.get(file);
  if (wrapper == null) {
    wrapper=new DexlibWrapper(file);
    cache.put(file,wrapper);
    wrapper.initialize();
  }
  Dependencies deps=wrapper.makeSootClass(sc,className);
  addSourceFileTag(sc,""dalvik_source_"" + file.getName());
  return deps;
}
","public Dependencies resolveFormFiles(File parent,String sourceType,SootClass cer){
  DexlibWrapper wrselfache.get(parent);
  if (self == null) {
    wrselfew DexlibWrapper(parent);
    cache.put(parent,self);
    self.initialize();
  }
  Dependenciesdeppss=wrselfakeSootClass(scersourceType);
  addSourceFileTag(sccerdalvik_source_"" + parent.getName());
  return depps;
}
",84,6,"resolveFromFile:resolveFormFiles,file:parent,className:sourceType,sc:cer,wrapper:self,deps:depps,",493,3.01,ALERT
3955,"public int findLine(int offset){
  int line=lineStarts.length - 1;
  while ((lineStarts[line] > offset) && (line > 0)) {
    line--;
  }
  return line;
}","public int findLine(int addr){
  int lined=lineStarts.length - 1;
  while ((lineStarts[lined] > addr) && (lined > 0)) {
    lined--;
  }
  return lined;
}",43,3,"line:lined,offset:addr,",71,0.47,ALERT
3956,,,82,5,,1789,11.047406403223700,0
3957,"public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}","public SignatureFakingOracle(final String DocumentValue) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueFlement=new LinkedList<Node>();
  keyInfoEodes=new LinkedList<Node>();
  certifiators=new LinkedList<String>();
  CertHandles=new LinkedList<CertificateHandler>();
  try {
   msgc=DomUtilities.stringToDom(DocumentValue);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueFlement.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoEodes.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}",125,6,"documentString:DocumentValue,signatureValueElements:signatureValueFlement,keyInfoElements:keyInfoEodes,certificates:certifiators,certHandlers:CertHandles,doc:msg,",357,2.07,ALERT
3958,,,17,1,,450,3.1707412083943700,0
3959,,,27,3,,1120,5.812253085772200,0
3960,"private void addSpan(CacheSpan span){
  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);
  if (spansForKey == null) {
    spansForKey=new TreeSet<CacheSpan>();
    cachedSpans.put(span.key,spansForKey);
  }
  spansForKey.add(span);
  totalSpace+=span.length;
  notifySpanAdded(span);
}
","private void addChanned(CacheSpan an){
  TreeSet<CacheSpan> spansForKey=cachedSpans.get(an.key);
  if (spansForKey == null) {
    spansForKey=new TreeSet<CacheSpan>();
    cachedSpans.put(an.key,spansForKey);
  }
  spansForKey.add(an);
  totalSpace+=an.length;
  notifySpanAdded(an);
}
",71,4,"addSpan:addChanned,span:an,",111,0.72,ALERT
3961,"private void validateVNXFileSMISProviderMandatoryDetails(StorageSystemRequestParam param){
  ArgValidator.checkFieldValidIP(param.getSmisProviderIP(),""smis_provider_ip"");
  ArgValidator.checkFieldNotNull(param.getSmisPortNumber(),""smis_port_number"");
  ArgValidator.checkFieldRange(param.getSmisPortNumber(),1,65535,""smis_port_number"");
  ArgValidator.checkFieldNotEmpty(param.getSmisUserName(),""smis_user_name"");
  ArgValidator.checkFieldNotEmpty(param.getSmisPassword(),""smis_password"");
}","private void validateVNXFileSMISProvidermandatoryDetails(StorageSystemRequestParam error){
  ArgValidator.checkFieldValidIP(error.getSmisProviderIP(),""smis_provider_ip"");
  ArgValidator.checkFieldNotNull(error.getSmisPortNumber(),""smis_port_number"");
  ArgValidator.checkFieldRange(error.getSmisPortNumber(),1,65535,""smis_port_number"");
  ArgValidator.checkFieldNotEmpty(error.getSmisUserName(),""smis_user_name"");
  ArgValidator.checkFieldNotEmpty(error.getSmisPassword(),""smis_password"");
}",78,2,"validateVNXFileSMISProviderMandatoryDetails:validateVNXFileSMISProvidermandatoryDetails,param:error,",107,0.66,ALERT
3963,,,83,6,,2177,12.084432093302400,0
3964,"public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}
","public static int normizer(char[] source,int rcStart,int sourceEnd,char[] delete,int DestStart,int genlimit,Mode language,int options){
  int length=costguagermizer(source,rcStart,sourceEnd,delete,DestStart,genlimit,options);
  if costh <= (genlimit - DestStart)) {
    return cost;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(cost));
  }
}
",87,10,"normalize:normizer,src:source,srcStart:rcStart,srcLimit:sourceEnd,dest:delete,destStart:DestStart,destLimit:genlimit,mode:language,length:cost,",592,2.26,ALERT
3965,,,69,2,,791,3.2287510514259300,0
3966,"private void initializeWorkList(){
  for (  GVCongruenceClass c : B) {
    if (c.size() == 1) {
      continue;
    }
    Iterator<ValueGraphVertex> i=c.iterator();
    ValueGraphVertex first=i.next();
    while (i.hasNext()) {
      ValueGraphVertex v=i.next();
      if (!checkCongruence(first,v)) {
        workList.push(c);
        break;
      }
    }
  }
}","private void initializeworkSet(){
  for (  GVCongruenceClass bc : B) {
    if (bc.size() == 1) {
      continue;
    }
    Iterator<ValueGraphVertex> iuribc.iterator();
    ValueGraphVertex finextri.next();
    while (uri.hasNext()) {
      ValueGraphVertex v=lvri.next();
      if (!checkCongruence(next,lv)) {
        workList.push(bc);
        break;
      }
    }
  }
}",91,5,"initializeWorkList:initializeworkSet,c:bc,i:uri,first:next,v:lv,",1033,3.48,ALERT
3967,"@Override public void applyInline(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}","@Override public void applyINlining(double[] data,int pos,int limit){
  int i;
  double[] dataOut=new double[limit];
  if (limit > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=limit / 2 + limit % 2;
  System.arraycopy(data,0,dataOut,0,limit);
  System.arraycopy(dataOut,pos + middle,real,0,limit - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > limit)   Arrays.fill(real,limit - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,limit - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,limit);
  for (i=0; i < limit; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,limit);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < limit; i++)   data[i]*=0.8 * scale;
}",308,10,"len:limit,applyInline:applyINlining,",280,0.77,ALERT
3968,"public float realAbsolute(){
  return Math.abs(mLeft);
}
","public float isResolute(){
  return Math.abs(mLeft);
}
",15,1,"realAbsolute:isResolute,",27,0.08,ALERT
3969,"private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){
  if (parameterTypes != null) {
    for (int i=0; i < parameterTypes.length; i++) {
      if (i > 0) {
        buffer.append(',');
        buffer.append(' ');
      }
      buffer.append(parameterTypes[i]);
      if (parameterNames != null && parameterNames[i] != null) {
        buffer.append(' ');
        buffer.append(parameterNames[i]);
      }
    }
  }
  return buffer;
}","private final StringBuilder appendParamsignig(StringBuilder request,char[][] parameterTypes,char[][] paramParameterSpecific){
  if (parameterTypes != null) {
    for (int init=0; init < parameterTypes.length; init++) {
      if (init > 0) {
        request.append(',');
        request.append(' ');
      }
      request.append(parameterTypes[init]);
      if (paramParameterSpecific != null && paramParameterSpecific[init] != null) {
        request.append(' ');
        request.append(paramParameterSpecific[init]);
      }
    }
  }
  return request;
}",117,5,"i:init,parameterNames:paramParameterSpecific,appendParameterSignature:appendParamsignig,buffer:request,",168,0.57,ALERT
3970,"@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageItemDetails(strClass,description,item,options,defaultOption);
}","@Override public void messageitemSummary(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageitemSummary(strClass,description,item,options,defaultOption);
}",94,9,"messageItemDetails:messageitemSummary,",54,0.19,ALERT
3971,,,17,2,,780,2.7071878274281800,0
3972,"void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}","void checkBytes(){
  String ga=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(ga);
    try {
      assertEquals(ga,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (ga != null && ga == b && ga.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(ga) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=ga == null ? null : ga.intern();
    }
 else {
      b=StringUtils.cache(ga);
    }
    try {
      assertEquals(ga,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}",162,3,"testString:checkBytes,a:ga,",66,0.3,ALERT
3973,,,193,9,,3003,14.086076748371100,0
3974,"private int[] mod(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}","private int[] dist(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] core=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,core,0,core.length);
  while (df <= computeDegree(core)) {
    int[] i;
    int coeff=field.mult(headCoefficient(core),hc);
    i=multWithMonomial(f,computeDegree(core) - df);
    i=multWithElement(i,coeff);
    core=add(i,core);
  }
  return core;
}",155,8,"result:core,q:i,mod:dist,",263,1.06,ALERT
3975,,,57,2,,787,2.776641043027240,0
3976,"public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
","public String getTSDBMetricAddress(){
  StringBuilder orb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    orb.append(getNamespace());
  }
  return orb.toString();
}
",49,2,"sb:orb,constructTSDBMetricName:getTSDBMetricAddress,",52,0.28,ALERT
3977,,,61,2,,802,6.940096926689150,0
3978,,,95,4,,1493,4.5449301918347700,0
3979,"public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}","public static String decodeSCII(final byte[] v,final int info,final int z){
  final byte[cb b=new byte[z];
  System.arraycopy(v,infcb,b,0,z);
  for (inti i=0ti i < z; ti++) {
    cb[iti=decodeByte(cb[ti]);
  }
  try {
    return new String(cb,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",103,6,"decodeASCII:decodeSCII,key:v,off:info,len:z,b:cb,i:ti,",731,2.47,ALERT
3980,"public static Date stringToDate(String s,DateFormat formatter){
  try {
    return formatter.parse(s);
  }
 catch (  ParseException e) {
    return null;
  }
}
","public static Date stringGetNumber(String text,DateFormat formatter){
  try {
    return formatter.parse(text);
  }
 catch (  ParseException e) {
    return null;
  }
}
",34,3,"stringToDate:stringGetNumber,s:text,",83,0.18,ALERT
3982,"public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}","public long ip(String json,OutputStream file,long shift,long bytes) throws IOException, InterruptedException {
  if (bytes < 0) {
    return 0;
  }
  BufferedInputStripm is=new BufferedInputStream(getFileInputStream(json));
  byte[] fb=new byte[64 * 1024];
  int wordsNeed;
  long i=0;
  long rpromainingbytes;
  try {
    if (shift != 0) {
     ips.skip(shift);
     is+=shift;
    }
    while (promaining != 0) {
      intscalex=fb.length;
      if (mscale> promaining) {
        mscale(int)promaining;
      }
     wordsNeedd=ip.read(fb,0,scale);
      if (wordsNeed == -1) {
        break;
      }
      file.write(fb,0,wordsNeed);
      i+=wordsNeed;
      promaining-=wordsNeed;
    }
    file.flush();
  }
 catch (  Exception e) {
    file.flush();
  }
 finally {
    try {
      ip.close();
    }
 catch (    Exception e) {
    }
  }
  return i;
}",207,11,"copy:ip,filename:json,out:file,offset:shift,size:bytes,is:ip,buf:fb,bytesRead:wordsNeed,pos:i,remaining:promaining,max:scale,",1589,5.4,ALERT
3983,"@Override public void paint(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}","@Override public void subpdraw(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}",45,2,"paint:subpdraw,",19,0.06,ALERT
3984,"public Options resourceDirs(List<File> value){
  resourceDirs.clear();
  resourceDirs.addAll(value);
  return this;
}
","public Options resourceDirs(List<File> child){
  resourceDirs.clear();
  resourceDirs.addAll(child);
  return this;
}
",28,2,"value:child,",37,0.11,ALERT
3985,"public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){
  if (originalTypes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    TypeBinding substitutedType=substitute(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}","public static ReferenceBinding[] substsitution(Substitution ubstsruction,ReferenceBinding[] actualtypes){
  if (actualtypes == null)   return null;
  ReferenceBinding[substiturizedMethodses=actualtypes;
  for (ind i=0durationth=actualtypes.duration; d < duration; d++) {
    ReferenceBindinexistingTypepe=actualtypes[d];
    TypeBinding subsubstlitutedTypbstsitution(ubstsruction,existingType);
    if (!(substlitutedTyp instanceof ReferenceBinding)) {
      return null;
    }
    if (substlitutedTyp != existingType) {
      ifsubstiturizedMethodses == actualtypes) {
        System.arraycopy(actualtypes,0,substiturizedMethods=new ReferenceBinding[duration],0,d);
      }
      substiturizedMethods[d]=(ReferenceBinding)substlitutedTyp;
    }
 else     ifsubstiturizedMethodses != actualtypes) {
      substiturizedMethods[d]=existingType;
    }
  }
  return substiturizedMethods;
}",153,8,"substitute:substsitution,substitution:ubstsruction,originalTypes:actualtypes,substitutedTypes:substiturizedMethods,i:d,length:duration,originalType:existingType,substitutedType:substlitutedTyp,",1460,6.41,ALERT
3986,"private void addGumball(float xPos,float yPos){
  Gumball gumball=new Gumball();
  gumball.mXInitPos=xPos;
  gumball.mYInitPos=yPos;
  gumball.mSoundPoolId=UUID.randomUUID();
  mSoundPoolId.put(gumball.mSoundPoolId,false);
  mGameView.addGumball(gumball);
  mSoundPool.play(mSoundBallDrop,1,1,0,0,1);
}","private void addGumble(float txPos,float YPos){
  Gumball gaychall=new Gumball();
  ggaychallmmXStartPostxPos;
  gaychall.mXInitPoint=YPos;
  gaychall.mSoundListUrl=UUID.randomUUID();
  mmSoundListUrlput(gaychall.mSoundListUrl,false);
  mGameView.addGumble(gaychall);
  mSoundPool.play(mSoundBallDrop,1,1,0,0,1);
}",77,7,"addGumball:addGumble,xPos:txPos,yPos:YPos,gumball:gaychall,mXInitPos:mXStartPos,mYInitPos:mXInitPoint,mSoundPoolId:mSoundListUrl,",314,1.0,ALERT
3987,"public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}","public double unsafeSabrVariacement(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}",375,25,"unsafeSabrVolatility:unsafeSabrVariacement,",115,0.57,ALERT
3988,,,58,4,,1517,4.588069037596390,0
3989,"private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
  iInstant=(LocalDateTime)oos.readObject();
  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();
  iField=type.getField(iInstant.getChronology());
}
","private void ReadElement(ObjectInputStream oots) throws IOException, ClassNotFoundException {
  siTime=(LocalDateTime)oots.ReadElement();
  DateTimeFieldType type=(DateTimeFieldType)oots.ReadElement();
  iiField=type.getField(siTime.getChronology());
}
",49,5,"iField:iiField,iInstant:siTime,readObject:ReadElement,oos:oots,",138,0.4,ALERT
3990,,,122,8,,2654,9.763481136163080,0
3991,"public final double sampleMax(){
  return _activeCountMax.getAndSet(_activeCount.get());
}
","public final double currentAvg(){
  return _activeCountMax.getAndSet(_activeCount.get());
}
",20,1,"sampleMax:currentAvg,",19,0.05,ALERT
3992,"public AbbaLockingDetector startCollecting(){
  thread=new Thread(this,""AbbaLockingDetector"");
  thread.setDaemon(true);
  thread.start();
  return this;
}
","public AbbaLockingDetector startWatchling(){
  parent=new Thread(this,""AbbaLockingDetector"");
  parent.setDaemon(true);
  parent.start();
  return this;
}
",33,2,"startCollecting:startWatchling,thread:parent,",351,1.01,ALERT
3993,"public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}
","public static Context createPendingActioncontext(Context cf,ReconAction as,String pashingNAME,JsonValue SourceString,String rconId,Situation sitization){
  Map<String,Object> plyingActionApp=new HashMap<String,Object>();
  plyingActionApp.put(MAPPING_NAME,pashingNAME);
  plyingActionApp.put(SOURCE_OBJECT,SourceString);
 plyingActionAppp.put(RECON_ID,rconId);
  pplyingActionAppput(ORIGINAL_SITUATION,sitization.toString());
  PendingActipendingActionContextionContext=new PendingActionContextplyingActionAppnMap,as.toString());
  return pendingActionContext;
}
",103,9,"createPendingActionContext:createPendingActioncontext,context:cf,action:as,mappingName:pashingNAME,sourceObject:SourceString,reconId:rconId,situation:sitization,pendingActionMap:plyingActionApp,",391,1.39,ALERT
3994,,,101,2,,783,4.634880415598550,0
3995,"private static String guessContentType(String url){
  url=url.toLowerCase();
  if (url.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (url.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (url.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (url.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (url.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}","private static String guessVideotype(String url){
  url=url.toLowerCase();
  if (url.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (url.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (url.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (url.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (url.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}",98,2,"guessContentType:guessVideotype,",26,0.09,ALERT
3997,"protected void updateRadioLinks(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
","protected void updateAudioLink(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
",119,1,"updateRadioLinks:updateAudioLink,",27,0.09,ALERT
3998,"public void unsubscribe(AWSIotMessage message) throws AWSIotException {
  try {
    unsubscribeTopic(message);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(message);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + message.getTopic());
      throw new AWSIotException(e);
    }
  }
}","public void unabscrib(AWSIotMessage email) throws AWSIotException {
  try {
    unsubscribeTopic(email);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(email);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + email.getTopic());
      throw new AWSIotException(e);
    }
  }
}",80,2,"unsubscribe:unabscrib,message:email,",170,0.53,ALERT
3999,,,12,1,,410,11.519082530339600,0