Index,Original Code,Adversarial Code,Program Length,Identifier Num,Replaced Identifiers,Query Times,Time Cost,Type
0,"public void addListener(Listener listener){
  mListeners.add(listener);
  notifyServiceDiscovered(mMatchingDrones);
}
","public void removeListen(Listener addacher){
  mListeners.add(addacher);
  notifyServiceDiscovered(mMatchingDrones);
}
",21,4,"listener:addacher,addListener:removeListen,",42,0.10433142979939779,Beam
1,"private <T extends CWLResource>List<T> lookForResources(CWLResourceType type,Class<T> clazz){
  List<T> resources=getRequirements(type,clazz);
  if (resources == null || resources.size() == 0) {
    resources=getHints(type,clazz);
  }
  return resources;
}
","private <T extends CWLResource>List<T> lookFindResources(CWLResourceType link,Class<T> clazz){
  List<T> resources=getRequirements(link,clazz);
  if (resources == null || resources.size() == 0) {
    resources=getHints(link,clazz);
  }
  return resources;
}
",64,4,"lookForResources:lookFindResources,type:link,",227,0.6614974856376648,Beam
3,,,58,4,,219,0.9498981753985087,0
4,,,135,9,,416,2.39342813094457,0
5,,,33,3,,95,0.473707123597463,0
6,"GF256Poly addOrSubtract(GF256Poly other){
  if (!field.equals(other.field)) {
    throw new IllegalArgumentException(""GF256Polys do not have same GF256 field"");
  }
  if (isZero()) {
    return other;
  }
  if (other.isZero()) {
    return this;
  }
  int[] smallerCoefficients=this.coefficients;
  int[] largerCoefficients=other.coefficients;
  if (smallerCoefficients.length > largerCoefficients.length) {
    int[] temp=smallerCoefficients;
    smallerCoefficients=largerCoefficients;
    largerCoefficients=temp;
  }
  int[] sumDiff=new int[largerCoefficients.length];
  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;
  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);
  for (int i=lengthDiff; i < largerCoefficients.length; i++) {
    sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);
  }
  return new GF256Poly(field,sumDiff);
}
","GF256Poly addOrSubtract(GF256Poly any){
  if (!field.equals(any.field)) {
    throw new IllegalArgumentException(""GF256Polys do not have same GF256 field"");
  }
  if (isZero()) {
    return any;
  }
  if (any.isZero()) {
    return this;
  }
  int[] smallerCoefficients=this.coefficients;
  int[] largerCoefficients=any.coefficients;
  if (smallerCoefficients.length > largerCoefficients.length) {
    int[] temp=smallerCoefficients;
    smallerCoefficients=largerCoefficients;
    largerCoefficients=temp;
  }
  int[] sumDiff=new int[largerCoefficients.length];
  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;
  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);
  for (int i=lengthDiff; i < largerCoefficients.length; i++) {
    sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);
  }
  return new GF256Poly(field,sumDiff);
}
",186,9,"other:any,",17,0.12381108204523722,Beam
7,"public static double lnGamma(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}
","public static double logAmmas(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}
",119,5,"lnGamma:logAmmas,",34,0.20207112232844035,Beam
8,"public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}
","public boolean validate(String value,String element){
  return (value.equalsIgnoreCase(element));
}
",22,3,"rule:element,",11,0.04888308048248291,Beam
9,,,24,2,,239,1.483408308029175,0
10,"public static <T>String toString(Collection<T> collection){
  if (collection == null) {
    return ""null"";
  }
  if (collection.isEmpty()) {
    return """";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="""";
  for (  T t : collection) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter="", "";
  }
  return buf.toString();
}
","public static <T>String getString(Collection<T> collect){
  if (collect == null) {
    return ""null"";
  }
  if (collect.isEmpty()) {
    return """";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="""";
  for (  T t : collect) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter="", "";
  }
  return buf.getString();
}
",97,5,"toString:getString,collection:collect,",61,0.31452632347742715,Beam
12,"private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}
","private void validate(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}
",213,11,"checkHeadingsHierarchy:validate,",58,0.37150079011917114,Beam
14,"public ChainIterable<T> addItem(@NotNull T item){
  return (ChainIterable<T>)super.add(Collections.<T>singleton(item));
}
","public ChainIterable<T> createItems(@NotNull T current){
  return (ChainIterable<T>)super.add(Collections.<T>singleton(current));
}
",36,3,"item:current,addItem:createItems,",116,0.48643060127894083,Beam
15,,,121,6,,328,1.8433580120404562,0
16,,,106,7,,755,5.185124790668487,0
17,"private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}
","private ResponsePacket getCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException(""Failed to execute count: "" + e,""GSP"",-111);
  }
}
",186,10,"executeCount:getCount,",54,0.2446025292078654,Beam
18,,,111,7,,693,4.53002632856369,0
19,"@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}
","@RequestMapping(value=""/container/{containerId}/application/{applicationName}"",method=RequestMethod.POST) @ResponseBody public JsonResponse newFolder(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam(""path"") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug(""containerId:"" + containerId);
    logger.debug(""applicationName:"" + applicationName);
    logger.debug(""path:"" + path);
  }
  fileService.newFolder(applicationName,containerId,path);
  return new HttpOk();
}
",101,6,"createDirectory:newFolder,",41,0.1858828107515971,Beam
20,,,14,2,,235,0.9703291296958924,0
21,"public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}
","public void destroy(double value){
  setValue(Math.max(0,getValue() - value));
}
",25,2,"damage:destroy,",3,0.018293686707814536,Beam
22,"void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}
","void define(MemberDefinition label,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].label == label) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(label,slot,from,to);
}
",195,9,"field:label,",7,0.06190731128056844,Beam
23,,,16,3,,324,1.2778853019078573,0
25,"@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
","@Override public boolean addSecondService(String asectorNumber,int state){
  OutputSensor outputSensor=new OutputSensor(asectorNumber);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}
",48,5,"addOutputSensor:addSecondService,sensorName:asectorNumber,",224,0.8869343757629394,Beam
26,"public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
","public IVariable[] extractRobotGlobalVariables(final int stackTaceContext,final Map<String,Object> newGenerables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTaceContext);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newGenerables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newGenerables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTaceContext,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}
",123,7,"newVariables:newGenerables,stackTraceId:stackTaceContext,extractRobotDebugVariables:extractRobotGlobalVariables,",501,4.149018335342407,Beam
27,"protected void create_y_axis(int i){
  Log.e(""index vlaue"",i + """");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}
","protected void create_y_column(int i){
  Log.e(""index vlaue"",i + """");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format(""%.1f"",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}
",156,14,"create_y_axis:create_y_column,",35,0.17203776836395263,Beam
28,"public void emitRetainedVars(GenerateJsVisitor gen){
  if (!retainedVars.isEmpty()) {
    gen.out(""var "");
    boolean first=true;
    for (    String varName : retainedVars) {
      if (!first) {
        gen.out("","");
      }
      first=false;
      gen.out(varName);
    }
    gen.endLine(true);
    retainedVars.clear();
  }
}
","public void emitRetainedMars(GenerateJsVisitor cat){
  if (!retainedVars.isEmpty()) {
    cat.out(""var "");
    boolean first=true;
    for (    String varName : retainedVars) {
      if (!first) {
        cat.out("","");
      }
      first=false;
      cat.out(varName);
    }
    cat.endLine(true);
    retainedVars.clear();
  }
}
",79,5,"emitRetainedVars:emitRetainedMars,gen:cat,",61,0.42136716842651367,Beam
29,"public void hspan(double start,double end,Paint color,String legend){
  LegendText legendText=new LegendText(color,legend);
  comments.add(legendText);
  plotElements.add(new HSpan(start,end,color,legendText));
}
","public void hspan(double start,double end,Paint color,String Legedge){
  LegendText legendText=new LegendText(color,Legedge);
  comments.add(legendText);
  plotElements.add(new HSpan(start,end,color,legendText));
}
",53,8,"legend:Legedge,",46,0.2978985110918681,Beam
30,,,73,6,,543,2.2833095590273538,0
31,"public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}
","public static String createString(final URI connection,final Charset encoding) throws IOException {
  return IOUtils.createString(connection.toURL(),Charsets.toCharset(encoding));
}
",36,3,"uri:connection,toString:createString,",185,1.0119094808896383,Beam
32,,,21,2,,217,1.2196339090665183,0
33,,,16,3,,115,0.5366107026735941,0
34,"public void update(GL10 gl){
  if (taskQueue.size() > 0) {
    GLResorceTask res;
    while ((res=taskQueue.poll()) != null) {
      res.perform(gl);
    }
  }
}
","public void process(GL10 gl){
  if (taskQueue.size() > 0) {
    GLResorceTask res;
    while ((res=taskQueue.poll()) != null) {
      res.perform(gl);
    }
  }
}
",47,4,"update:process,",34,0.14612162907918294,Beam
35,"public AtomicDoubleArray(int length){
  larray=new AtomicLongArray(length);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int i=0; i < length; i++)   larray.set(i,ZERO);
}
","public AtomaticIntArray(int length){
  larray=new AtomicLongArray(length);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int i=0; i < length; i++)   larray.set(i,ZERO);
}
",49,5,"AtomicDoubleArray:AtomaticIntArray,",49,0.2431173086166382,Beam
37,"private double normalDens(double x,double mean,double stdDev){
  double diff=x - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}
","private double normalDens(double x,double sum,double stdDev){
  double diff=x - sum;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}
",53,6,"mean:sum,",4,0.030400180816650392,Beam
39,,,34,3,,541,3.8749455253283185,0
40,,,73,5,,609,4.219373548030854,0
41,"protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}
","protected void processMouseDown(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseDown(e);
}
",51,4,"processMouseEvent:processMouseDown,",39,0.21633974313735962,Beam
42,"public void postProcess(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
","public void PostConstruct(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefSyncLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefSyncLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}
",37,4,"postProcess:PostConstruct,maxForeignAutoRefreshLevel:maxForeignAutoRefSyncLevel,",27,0.18147096633911133,Beam
43,,,64,5,,966,4.227679208914439,0
44,,,31,4,,713,3.745409591992696,0
45,"private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
","private void ontrackpointEnd(Attributes Attresses){
  latitude=Attresses.getValue(ATTRIBUTE_LAT);
  longitude=Attresses.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}
",35,6,"onTrackPointStart:ontrackpointEnd,attributes:Attresses,",105,0.45624438524246214,Beam
46,"void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
","void shutdown(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}
",24,4,"release:shutdown,",6,0.02589179277420044,Beam
47,"public FST(String fileName,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fileName);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}
","public FST(String fullName,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fullName);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}
",46,5,"fileName:fullName,",5,0.024105807145436604,Beam
48,"@Override public void flush(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}
","@Override public void fill(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}
",45,3,"flush:fill,",6,0.034041996796925864,Beam
49,"private void destinationTypeChanged(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}
","private void select(){
  if (m_Exp == null)   return;
  String str="""";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText(""URL:"");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""User..."");
  }
 else {
    m_ResultsDestinationPathLabel.setText(""Filename:"");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".csv"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf("".arff"");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + "".csv"";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf("".csv"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".arff"";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf("".arff"");
      if (ind > -1) {
        str=str.substring(0,ind) + "".csv"";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText(""Browse..."");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("""")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("""")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("""",null,null);
}
",437,16,"destinationTypeChanged:select,",27,0.23934019804000856,Beam
50,"public Builder addEmail(Email email){
  emails.add(email);
  return this;
}
","public Builder removeMail(Email zip){
  emails.add(zip);
  return this;
}
",19,3,"addEmail:removeMail,email:zip,",104,0.46150365670522053,Beam
51,,,129,10,,1458,12.897874514261881,0
52,"private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + "" "" + key+ ""=""+ from.getAttribute(key)+ "";"";
    }
 else {
      to.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}
","private static void convertTotml20(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="""";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + "" "" + key+ ""=""+ from.getAttribute(key)+ "";"";
    }
 else {
      to.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}
",117,6,"convertToHTML40:convertTotml20,",85,0.6999650279680888,Beam
53,"public void resetCount(){
  msgCnt.set(0);
}
","public void updatecount(){
  msgCnt.set(0);
}
",14,2,"resetCount:updatecount,",11,0.055936022599538164,Beam
55,,,89,4,,270,2.534632956981659,0
56,,,52,4,,718,4.255512885252634,0
57,"public static long firstFieldOffset(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}
","public static long objectObjectName(Class compone){
  long minSize=roundUpTo8(headerSize(compone));
  while (compone != Object.class) {
    for (    Field f : compone.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    compone=compone.getSuperclass();
  }
  return minSize;
}
",95,6,"clazz:compone,firstFieldOffset:objectObjectName,",77,0.5540718317031861,Beam
58,"private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}
","private void sortChildren(final JCriteriumTreeNode parentLine){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentLine.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentLine.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentLine.add(child);
    child.setParent(parentLine);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentLine.add(child);
    child.setParent(parentLine);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentLine.add(child);
    child.setParent(parentLine);
  }
}
",204,8,"parentNode:parentLine,",7,0.0968191425005595,Beam
59,,,17,2,,191,1.0528688867886862,0
63,"public void mousePressed(MouseEvent e){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);
  if (SwingUtilities.isLeftMouseButton(e)) {
    if (e.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(e);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {
        selectWord(e);
      }
    }
  }
}
","public void mousePressed(MouseEvent fe){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),fe);
  if (SwingUtilities.isLeftMouseButton(fe)) {
    if (fe.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(fe);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(fe)) {
        selectWord(fe);
      }
    }
  }
}
",80,4,"e:fe,",6,0.04417476256688436,Beam
64,"public static void checkNotEmpty(String string){
  if (string.isEmpty()) {
    throw new NullPointerException();
  }
}
","public static void checkNotEmpty(String null){
  if (null.isEmpty()) {
    throw new NullPointerException();
  }
}
",26,2,"string:null,",46,0.22702126105626425,Beam
65,"public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
","public static void o(Zdiagmat DM){
  o(DM,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}
",23,2,"D:DM,",23,0.10880194902420044,Beam
66,"public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}
","public void insertAndReflect(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo(""new node "" + newEntry + "" claims same ID or IP as ""+ existing+ "", might be impersonation attack or IP change. ignoring until old entry times out"");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}
",190,6,"insertOrRefresh:insertAndReflect,",16,0.10078299045562744,Beam
67,"public final boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)object;
  return from.equals(pair.from) && to.equals(pair.to);
}
","public final boolean compALS(Object result){
  if (result == null) {
    return false;
  }
  if (!(result instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)result;
  return from.compALS(pair.from) && to.compALS(pair.to);
}
",62,5,"object:result,equals:compALS,",85,0.5700067798296611,Beam
68,"public String requestStatistics(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}
","public String encodeStatus(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}
",26,2,"requestStatistics:encodeStatus,",13,0.06293319861094157,Beam
69,,,14,2,,41,0.2051926056543986,0
70,,,357,18,,2267,16.15960617860158,0
71,"public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}
","public static int create(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}
",151,10,"update:create,",8,0.055414644877115886,Beam
72,,,147,6,,411,2.854501267274221,0
73,,,44,6,,625,2.450691298643748,0
74,"public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
","public File[] selectImportNames(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty(""use.native.choosers"",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}
",258,10,"selectImportFiles:selectImportNames,",4,0.0350532054901123,Beam
75,"public static void initUrbanSimZoneWriter(Config config){
  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);
  try {
    log.info(""Initializing UrbanSimParcelCSVWriter ..."");
    parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);
    log.info(""Writing data into "" + module.getMATSim4OpusTemp() + FILE_NAME+ "" ..."");
    parcelWriter.write(InternalConstants.PARCEL_ID + "","" + ACCESSIBILITY_BY_FREESPEED+ "",""+ ACCESSIBILITY_BY_CAR+ "",""+ ACCESSIBILITY_BY_BIKE+ "",""+ ACCESSIBILITY_BY_WALK+ "",""+ ACCESSIBILITY_BY_PT);
    parcelWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void initUrbanSimZoneWriter(Config context){
  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)context.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);
  try {
    log.info(""Initializing UrbanSimParcelCSVWriter ..."");
    parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);
    log.info(""Writing data into "" + module.getMATSim4OpusTemp() + FILE_NAME+ "" ..."");
    parcelWriter.write(InternalConstants.PARCEL_ID + "","" + ACCESSIBILITY_BY_FREESPEED+ "",""+ ACCESSIBILITY_BY_CAR+ "",""+ ACCESSIBILITY_BY_BIKE+ "",""+ ACCESSIBILITY_BY_WALK+ "",""+ ACCESSIBILITY_BY_PT);
    parcelWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",122,12,"config:context,",30,0.16884730259577432,Beam
76,,,35,3,,88,0.342978290716807,0
77,,,773,16,,2698,20.12344400882721,0
78,"public static void clearAssertionInformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
","public static void clearAssertionList(){
  _AssertInfos.clear();
  _AssertOccured=false;
}
",18,3,"clearAssertionInformation:clearAssertionList,",6,0.023376854260762532,Beam
79,,,113,9,,1390,8.181226702531179,0
80,,,89,5,,278,1.6915056745211283,0
81,"public void classLoaderInit(DynamicClassLoader loader){
  EnvLoaderListener listener=_listenerRef.get();
  if (listener != null)   listener.classLoaderInit(loader);
}
","public void classloaderInfo(DynamicClassLoader loading){
  EnvLoaderListener listener=_listenerRef.get();
  if (listener != null)   listener.classloaderInfo(loading);
}
",31,4,"loader:loading,classLoaderInit:classloaderInfo,",208,0.9876840750376383,Beam
82,"@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}
","@Override public int data(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}
",150,7,"read:data,",34,0.17923895915349325,Beam
83,"private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String label=request.getParameter(""start"");
  String detail=request.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
","private void start(HttpServletRequest page,HttpServletResponse response) throws IOException {
  String label=page.getParameter(""start"");
  String detail=page.getParameter(""detail"");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + "": start successfully called on - "" + label);
}
",71,8,"request:page,",6,0.052684096495310466,Beam
84,,,80,6,,571,4.045373876889546,0
85,,,57,3,,590,3.4718555490175884,0
86,,,111,10,,964,8.156312112013499,0
87,"private void checkInteriorIntersections(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorIntersections(ss0,ss1);
    }
  }
}
","private void checkInteriorSubsection(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorSubsection(ss0,ss1);
    }
  }
}
",78,6,"checkInteriorIntersections:checkInteriorSubsection,",22,0.13740599950154622,Beam
88,"public synchronized boolean add(E e,boolean hasNext){
  while (mInternalQueue.size() >= mMaxSize && !mClosed) {
    notifyAll();
    try {
      wait(TIMEOUT);
    }
 catch (    InterruptedException e1) {
      mClosed=true;
      ProgramState.checkAbort();
      throw new IllegalStateException(""Interrupted but program not aborting?"",e1);
    }
    ProgramState.checkAbort();
  }
  if (mClosed) {
    return true;
  }
  final boolean wasEmpty=mInternalQueue.isEmpty();
  mHasNext=hasNext;
  mInternalQueue.add(e);
  if (wasEmpty) {
    notifyAll();
  }
  return true;
}
","public synchronized boolean remove(E e,boolean hasNext){
  while (mInternalQueue.size() >= mMaxSize && !mClosed) {
    notifyAll();
    try {
      wait(TIMEOUT);
    }
 catch (    InterruptedException e1) {
      mClosed=true;
      ProgramState.checkAbort();
      throw new IllegalStateException(""Interrupted but program not aborting?"",e1);
    }
    ProgramState.checkAbort();
  }
  if (mClosed) {
    return true;
  }
  final boolean wasEmpty=mInternalQueue.isEmpty();
  mHasNext=hasNext;
  mInternalQueue.remove(e);
  if (wasEmpty) {
    notifyAll();
  }
  return true;
}
",115,9,"add:remove,",12,0.08481523195902506,Beam
89,"protected String format(Object o){
  return o.toString();
}
","protected String Format(Object o){
  return o.toString();
}
",16,2,"format:Format,",26,0.11113835573196411,Beam
90,"public void addAll(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addAll(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}
","public void addMultiple(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addMultiple(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}
",74,6,"addAll:addMultiple,",6,0.04063311815261841,Beam
92,"public static <T>List<T> rest(List<T> l){
  return l.subList(1,l.size());
}
","public static <T>List<T> remove(List<T> lb){
  return lb.subList(1,lb.size());
}
",33,2,"l:lb,rest:remove,",111,1.1710114041964212,Beam
93,"private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
","private JsonObject getMessage(Map<String,Object> files,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  files.forEach(null);
  request.put(""headers"",jsonHeaders);
  request.put(""uri"",uri);
  request.put(""method"",method.toString());
  request.put(""payload"",payload);
  return request;
}
",89,7,"createRequest:getMessage,headers:files,",145,0.7508081356684367,Beam
94,,,24,3,,216,1.2157946467399596,0
95,,,186,12,,647,6.610743248462677,0
96,,,21,3,,314,2.9636818210283917,0
97,"public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
","public void addRow(Column column){
  if (column != null) {
    columns.remove(column);
  }
}
",24,3,"removeColumn:addRow,",9,0.05030450423558553,Beam
100,"public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
","public boolean isDeleaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}
",25,3,"isLeaf:isDeleaf,",41,0.3317131439844767,Beam
101,,,14,2,,109,0.6851898789405823,0
102,"public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){
  join(async.getThread(),timeoutMilliseconds);
}
","public static void split(final AsyncInvocation<?> async,final long timeoutMilliseconds){
  split(async.getThread(),timeoutMilliseconds);
}
",29,3,"join:split,",21,0.1456071654955546,Beam
103,"public static void logStackTrace(Level level,Throwable throwable){
  logStackTrace(level,throwable,null);
}
","public static void logConsoleTraces(Level index,Throwable throwable){
  logConsoleTraces(index,throwable,null);
}
",22,3,"logStackTrace:logConsoleTraces,level:index,",279,2.626507798830668,Beam
104,"public void printBytes(byte[] data,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}
","public void printBytes(byte[] data,int page,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[page] & 0xff) << 16) + ((data[page + 1] & 0xff) << 8) + (data[page + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    page+=3;
  }
  if (length == 2) {
    int chunk=((data[page] & 0xff) << 8) + (data[page + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[page] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}
",266,6,"offset:page,",42,0.42089234590530394,Beam
105,"protected void tearDown(){
  try {
    ds.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}
","protected void teardown(){
  try {
    DS.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}
",29,3,"tearDown:teardown,ds:DS,",54,0.2702026844024658,Beam
106,"public InSpacePredicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
","public InSpaceIndicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}
",35,4,"InSpacePredicate:InSpaceIndicate,",37,0.17022461891174318,Beam
107,,,61,4,,557,4.783794748783111,0
108,,,104,10,,274,2.0343979835510253,0
109,"@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}
","@Override public void addRelations(Task target,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(target,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(target,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(target,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(target);
}
",168,11,"task:target,",4,0.0674854556719462,Beam
110,"public void appendSplitElement(Fragment aSplit){
  splits.add(aSplit);
}
","public void appendBreakElement(Fragment aJoin){
  splits.add(aJoin);
}
",16,3,"appendSplitElement:appendBreakElement,aSplit:aJoin,",36,0.224062712987264,Beam
111,"public static double[] HPDInterval(double proportion,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}
","public static double[] HPDINTERRange(double proportion,double[] self,int[] intitions){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)self.length);
  for (int i=0; i <= (self.length - diff); i++) {
    final double minValue=self[intitions[i]];
    final double maxValue=self[intitions[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{self[intitions[hpdIndex]],self[intitions[hpdIndex + diff - 1]]};
}
",161,11,"HPDInterval:HPDINTERRange,x:self,indices:intitions,",757,9.854439163208008,Beam
112,"public Statement between(Object former,Object later){
  statement.append("" BETWEEN "");
  append(former);
  statement.append("" AND "");
  append(later);
  return this;
}
","public Statement B(Object former,Object later){
  statement.append("" BETWEEN "");
  append(former);
  statement.append("" AND "");
  append(later);
  return this;
}
",39,4,"between:B,",45,0.36052473783493044,Beam
113,,,220,11,,338,3.131447370847066,0
114,"public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}
","public static boolean contactip(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}
",77,6,"containIP:contactip,",76,1.0037752469380696,Beam
115,"public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
","public final void defineJob(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}
",19,3,"delayTask:defineJob,",9,0.062318511803944904,Beam
116,,,174,12,,1369,9.215223570664724,0
117,,,103,6,,736,6.133494472503662,0
118,"public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}
","public static String generateNativeGuidForStoragePortFromIndicator(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format(""%s+%s+PORT+%s"",splitedString[0],splitedString[1],portNetworkId);
}
",47,4,"generateNativeGuidForStoragePortFromIndication:generateNativeGuidForStoragePortFromIndicator,",4,0.028048610687255858,Beam
119,"private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}
","private void readFinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error(""Bad magic in db"");
  }
  if (is.readInt() != VERSION) {
    throw new Error(""Bad VERSION in db"");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.readFinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}
",316,23,"loadBinary:readFinary,",10,0.09359895785649618,Beam
120,"public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}
","public void configos(SwtPlatform... platforms){
  configos(Arrays.asList(platforms));
}
",20,2,"configs:configos,",4,0.03375018040339152,Beam
121,"static TemplateModelException newMethodArgInvalidValueException(String methodName,int argIdx,Object... details){
  return new _TemplateModelException(methodName,""(...) argument #"",Integer.valueOf(argIdx + 1),"" had invalid value: "",details);
}
","static TemplateModelException newMethodArgValidValuesException(String MethodCall,int argIdx,Object... details){
  return new _TemplateModelException(MethodCall,""(...) argument #"",Integer.valueOf(argIdx + 1),"" had invalid value: "",details);
}
",38,4,"newMethodArgInvalidValueException:newMethodArgValidValuesException,methodName:MethodCall,",128,1.059669021765391,Beam
122,,,22,2,,321,2.341736074288686,0
123,"@JsonCreator public DataSourceMetadata(@JsonProperty(""name"") String name,@JsonProperty(""properties"") Map<String,String> properties,@JsonProperty(""segments"") List<DataSegment> segments){
  this.name=name;
  this.properties=Collections.unmodifiableMap(properties);
  this.segments=Collections.unmodifiableList(segments);
}
","@JsonCreator public DataSourcesMetas(@JsonProperty(""name"") String name,@JsonProperty(""properties"") Map<String,String> properties,@JsonProperty(""segments"") List<DataSegment> segments){
  this.name=name;
  this.properties=Collections.unmodifiableMap(properties);
  this.segments=Collections.unmodifiableList(segments);
}
",67,4,"DataSourceMetadata:DataSourcesMetas,",8,0.05032815535863241,Beam
124,,,92,8,,677,7.365776109695434,0
125,"public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}
","public static String[] sync(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}
",139,7,"split:sync,",12,0.082306969165802,Beam
126,"private void ensureBufferCapacity(int desiredCapacity){
  int capacity=pixelBuffer.length;
  while (capacity < desiredCapacity) {
    capacity*=2;
  }
  if (capacity > pixelBuffer.length) {
    pixelBuffer=new byte[capacity];
  }
}
","private void ensureBufferDimacity(int desiredCapacity){
  int capacity=pixelBuffer.length;
  while (capacity < desiredCapacity) {
    capacity*=2;
  }
  if (capacity > pixelBuffer.length) {
    pixelBuffer=new byte[capacity];
  }
}
",46,4,"ensureBufferCapacity:ensureBufferDimacity,",4,0.052299094200134275,Beam
127,,,148,8,,316,7.126787749926249,0
128,,,87,4,,130,1.837312932809194,0
129,"public GetBufferedRandomAccessSource(IRandomAccessSource source){
  this.source=source;
  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}
","public getBufferedRandomaccessSources(IRandomAccessSource resource){
  this.resource=resource;
  this.getBuffer=new byte[(int)Math.min(Math.max(resource.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}
",61,2,"GetBufferedRandomAccessSource:getBufferedRandomaccessSources,source:resource,",179,1.3609776020050048,Beam
130,"public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}
","public static byte[] nextBytes(int small){
  byte[] bytes=new byte[small];
  SeedNG.nextBytes(bytes);
  return bytes;
}
",33,4,"randomBytes:nextBytes,size:small,seededRandom:SeedNG,",212,1.6169234991073609,Beam
131,,,108,5,,705,5.9190343459447226,0
132,"public void register(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}
","public void bind(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}
",32,5,"register:bind,",20,0.1353663722674052,Beam
133,,,73,5,,345,3.4045555432637533,0
134,,,40,4,,474,5.38013576666514,0
135,,,202,14,,2091,24.00948964357376,0
136,"private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
","private static void addValuesFromValues(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}
",40,5,"addItemsToList:addValuesFromValues,",45,0.2875226060549418,Beam
137,"public static String toRegex(String glob,String separator){
  checkNotNull(separator,""separator must be non-null"");
  checkArgument(separator.length() == 1,""separator must be a single character: %s"",separator);
  return toRegex(glob,separator.charAt(0));
}
","public static String toReq(String Globe,String iterner){
  checkNotNull(iterner,""separator must be non-null"");
  checkArgument(iterner.length() == 1,""separator must be a single character: %s"",iterner);
  return toReq(Globe,iterner.charAt(0));
}
",48,3,"toRegex:toReq,separator:iterner,glob:Globe,",355,2.957424036661784,Beam
138,"static Object ensureNotNull(Location location,Object value){
  if (value == null) {
    throw new EvalException(location,""Snippet runtime does not support null values."");
  }
  return value;
}
","static Object ensureIsNone(Location location,Object value){
  if (value == null) {
    throw new EvalException(location,""Snippet runtime does not support null values."");
  }
  return value;
}
",32,3,"ensureNotNull:ensureIsNone,",8,0.0497579018274943,Beam
139,,,45,5,,433,2.0790211876233418,0
140,"public void testSetNull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}
","public void testsetDefault() throws Exception {
  PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}
",105,3,"testSetNull:testsetDefault,",17,0.12718599637349445,Beam
141,,,13,2,,97,0.4295801917711894,0
142,,,15,1,,49,0.2515558878580729,0
143,"public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}
","public String fadeMusic(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{""q"",""h"",""t"",""l"",""p""});
  if (!curves.contains(type)) {
    throw new RuntimeException(""fadeAudio: passed invalid type: "" + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + ""_faded.wav"";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add(""fade"");
  cmd.add(type);
  cmd.add(fadeInLength + """");
  if (stopTime != -1)   cmd.add(stopTime + """");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + """");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}
",236,14,"fadeAudio:fadeMusic,",64,0.36675910552342733,Beam
144,,,68,8,,1226,6.665497366587321,0
146,,,112,7,,759,4.885474860668182,0
147,"public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}
","public static boolean compalls(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.compalls(field1,field2);
  }
}
",55,3,"equals:compalls,",45,0.27793463071187335,Beam
148,"final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void exit(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",72,6,"println:exit,",18,0.0868258277575175,Beam
150,,,18,2,,96,0.47730878194173176,0
151,"public String render(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
","public String transform(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}
",25,3,"render:transform,",4,0.024260560671488445,Beam
152,,,121,9,,483,3.003337868054708,0
153,"public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}
","public final ArrayList<Move> removenonOptimize(Position self,ArrayList<Move> gameEx){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : gameEx) {
    self.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - self.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(self);
    self.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=self.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < gameEx.size()) ? optimalMoves : null;
}
",310,13,"removeNonOptimal:removenonOptimize,pos:self,moveList:gameEx,",515,4.281135209401449,Beam
154,,,23,3,,259,1.414060076077779,0
155,"public boolean equals(Object obj){
  if (obj instanceof MSort) {
    MSort ms=(MSort)obj;
    if (data == ms.data)     return true;
  }
  return false;
}
","public boolean equals(Object js){
  if (js instanceof MSort) {
    MSort ms=(MSort)js;
    if (data == ms.data)     return true;
  }
  return false;
}
",39,4,"obj:js,",16,0.12375249862670898,Beam
156,,,48,3,,161,0.7615778724352519,0
157,"public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}
","public static void drawVerticalMarginnerIndifier(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}
",430,16,"drawVerticalMarginIndicator:drawVerticalMarginnerIndifier,",18,0.17502295970916748,Beam
158,,,77,4,,114,0.6965752601623535,0
160,,,79,10,,256,3.635266590118408,0
161,,,20,3,,169,0.8502764344215393,0
162,,,131,9,,786,5.005378683408101,0
163,,,73,8,,914,4.637822230656941,0
164,,,15,1,,49,0.2601221879323324,0
165,"public ContentImpl createCompoundPackageContent(OleBlobImpl blob,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){
  return new CompoundContentImpl(blob,prettyName,className,typeName,blobBb.position(),dataBlockLen);
}
","public ContentImpl createCompoundJavaContents(OleBlobImpl BLib,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){
  return new CompoundContentImpl(BLib,prettyName,className,typeName,blobBb.position(),dataBlockLen);
}
",45,7,"createCompoundPackageContent:createCompoundJavaContents,blob:BLib,",519,2.131265672047933,Beam
166,,,31,2,,145,1.1252103845278423,0
167,,,163,10,,310,1.9947348515192667,0
168,"protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
","protected void readVersion(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}
",36,3,"loadValue:readVersion,",10,0.03774269024531047,Beam
170,"public void add(int index,int element){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=element;
  size++;
}
","public void add(int index,int ace){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=ace;
  size++;
}
",58,6,"element:ace,",84,0.6046321153640747,Beam
171,,,149,9,,271,1.6392266035079956,0
172,,,50,4,,324,2.1302569349606832,0
173,,,161,8,,974,5.723623653252919,0
174,"public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
","public static String fromXwl(final Config toConforce,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="""";
  try (StringWriter writer=new StringWriter()){
    fromXwl(toConforce,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }
",55,5,"toConvert:toConforce,toXml:fromXwl,",142,0.7558128317197164,Beam
175,"@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);
}
","@Override public boolean restigateto(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return restigateto(device.findObject(obj.toUiSelector()),destObj,steps);
}
",40,5,"dragTo:restigateto,",58,0.264450204372406,Beam
176,"QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
","QName Output(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException(""Outputclass ["" + outputClass + ""] is ""+ ""neither annotated with @XmlRootElement nor @XmlType"");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}
",211,6,"toQName:Output,",26,0.1671161373456319,Beam
177,"private static <T extends AbstractBlockBase<T>>void enqueueSuccessors(T block,PriorityQueue<T> worklist,BitSet visitedBlocks){
  for (  T successor : block.getSuccessors()) {
    if (!visitedBlocks.get(successor.getId())) {
      visitedBlocks.set(successor.getId());
      worklist.add(successor);
    }
  }
}
","private static <T extends AbstractBlockBase<T>>void enqueueSuccessors(T obj,PriorityQueue<T> worklist,BitSet visitedBlocks){
  for (  T successor : obj.getSuccessors()) {
    if (!visitedBlocks.get(successor.getId())) {
      visitedBlocks.set(successor.getId());
      worklist.add(successor);
    }
  }
}
",74,5,"block:obj,",65,0.3157830238342285,Beam
178,"private void updateLegends(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}
","private void createLegenders(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}
",412,10,"updateLegends:createLegenders,",14,0.08218384186426798,Beam
179,,,64,4,,127,0.9952458421389262,0
181,"public void add(final CreatureRespawnPoint point){
  respawnPoints.add(point);
}
","public void and(final CreatureRespawnPoint point){
  respawnPoints.and(point);
}
",17,3,"add:and,",30,0.11099945306777954,Beam
182,"public static int unionSize(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}
","public static int BitBig(long[] x,long[] cy){
  final int lx=x.length, ly=cy.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | cy[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(cy[i]);
  }
  return res;
}
",134,8,"y:cy,unionSize:BitBig,",90,0.47406928141911825,Beam
183,,,18,3,,365,1.9618483344713846,0
184,"private Activity checkActivity(){
  Activity activity=mActivity.get();
  if (activity == null) {
    throw new IllegalStateException(""No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity."");
  }
  return activity;
}
","private Activity findAction(){
  Activity element=mActivity.get();
  if (element == null) {
    throw new IllegalStateException(""No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity."");
  }
  return element;
}
",34,3,"checkActivity:findAction,activity:element,",17,0.10238347450892131,Beam
185,"public void testEmptyOrNullBlob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}
","public void insertEmptyOrNullblore() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement(""INSERT INTO test_blob(id, bin_data) VALUES(?, ?)"");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue(""Should insert one row."",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement(""SELECT bin_data FROM test_blob WHERE id = ?"");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue(""Should select at least one row."",rs.next());
      assertTrue(""Result should byte[0]"",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}
",254,6,"testEmptyOrNullBlob:insertEmptyOrNullblore,",19,0.10330865780512492,Beam
186,"protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}
","protected double computeEstDDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}
",154,14,"computeStdDev:computeEstDDev,",10,0.06675269603729247,Beam
188,,,49,4,,285,1.2598933219909667,0
189,"public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}
","public void invoke(InputStream is,OutputStream o,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(o,dbg);
    dOs.startTop2();
    o=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(o);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(o);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(o);
break;
default :
throw new IllegalStateException(header + "" is an unknown Hessian call"");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) o.close();
}
}
",252,17,"os:o,",3,0.07266857624053955,Beam
190,,,145,8,,831,5.081984488169352,0
191,,,26,3,,297,1.2487985849380494,0
192,,,28,3,,294,1.4654898325602213,0
194,,,23,4,,235,1.322910757859548,0
195,,,70,2,,80,0.3561434666315714,0
196,"public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}
","public void show(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,""Time has already been initialized."");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.show(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.show(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format(""%02d"",hours_24[i]) : String.format(""%d"",hours[i]);
    innerHoursTexts[i]=String.format(""%d"",hours[i]);
    minutesTexts[i]=String.format(""%02d"",minutes[i]);
  }
  mHourRadialTextsView.show(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.show(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.show(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.show(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}
",438,27,"initialize:show,",108,0.7575838247934977,Beam
197,"public void startTicker(long delay,boolean rightToLeft){
  if (!tickerEnabled) {
    return;
  }
  if (!isCellRenderer()) {
    Form parent=getComponentForm();
    if (parent != null) {
      parent.registerAnimatedInternal(this);
    }
  }
  tickerStartTime=System.currentTimeMillis();
  tickerDelay=delay;
  tickerRunning=true;
  this.rightToLeft=rightToLeft;
  if (isRTL()) {
    this.rightToLeft=!this.rightToLeft;
  }
}
","public void startTwicker(long delay,boolean rightToLeft){
  if (!tickerEnabled) {
    return;
  }
  if (!isCellRenderer()) {
    Form parent=getComponentForm();
    if (parent != null) {
      parent.registerAnimatedInternal(this);
    }
  }
  tickerStartTime=System.currentTimeMillis();
  tickerDelay=delay;
  tickerRunning=true;
  this.rightToLeft=rightToLeft;
  if (isRTL()) {
    this.rightToLeft=!this.rightToLeft;
  }
}
",91,8,"startTicker:startTwicker,",66,0.3341035803159078,Beam
199,"public static String parseDiskString(String input){
  String delims=""[ ]+"";
  String[] tokens=input.split(delims);
  return tokens[0];
}
","public static String parseDiskString(String output){
  String delims=""[ ]+"";
  String[] tokens=output.split(delims);
  return tokens[0];
}
",33,4,"input:output,",4,0.02664031982421875,Beam
201,,,18,2,,239,1.668606205781301,0
202,"void hideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
","void showRegion(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}
",37,2,"hideBorder:showRegion,",10,0.037658071517944335,Beam
203,"public void recordBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordBeginning(mModuleName,mRunId);
}
","public void replaceBeginning(){
  final String msg=""Usage beginning module="" + mModuleName + "" runId=""+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.replaceBeginning(mModuleName,mRunId);
}
",42,6,"recordBeginning:replaceBeginning,",5,0.02228335936864217,Beam
204,"public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String Fromtag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(Fromtag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:Fromtag,",21,0.22375839153925578,Beam
205,"public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}
","public String seed(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return ""0"";
}
",60,6,"random:seed,",9,0.06890871922175089,Beam
206,"public void add(String methodName,List<Expression> parameters){
  chain.add(new DotExpressionItem(methodName,parameters,false));
}
","public void update(String methodName,List<Expression> parameters){
  chain.update(new DotExpressionItem(methodName,parameters,false));
}
",30,4,"add:update,",12,0.060059996445973714,Beam
207,"public void removeSelectionListener(final SelectionListener listener){
  checkWidget();
  if (listener == null) {
    SWT.error(SWT.ERROR_NULL_ARGUMENT);
  }
  listOfSelectionListeners.remove(listener);
}
","public void removeSelectionAdapter(final SelectionListener Listerver){
  checkWidget();
  if (Listerver == null) {
    SWT.error(SWT.ERROR_NULL_ARGUMENT);
  }
  listOfSelectionListeners.remove(Listerver);
}
",38,3,"removeSelectionListener:removeSelectionAdapter,listener:Listerver,",180,1.0192290902137757,Beam
208,"public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}
","public boolean equalsElse(){
  return (Double.doubleToLongBits(value) == 0);
}
",19,2,"equalsDefault:equalsElse,",3,0.016705401738484702,Beam
209,"@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
","@Override public List<String> allTags(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}
",78,5,"allKeys:allTags,",9,0.04960869948069255,Beam
210,"@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
","@Override public void do_after_propagations(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}
",40,3,"do_after_propagation:do_after_propagations,",6,0.038361807664235435,Beam
211,"public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
","public ResourcesPoet newFloat(String name,String value){
  Element bool=document.createElement(""integer"");
  bool.setAttribute(""name"",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}
",58,6,"addInteger:newFloat,",73,0.38077875375747683,Beam
212,,,97,6,,335,1.5618773460388184,0
214,,,223,9,,1051,8.459030250708262,0
215,"public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
","public static void upgradeClientConfig(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upvertedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upvertedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException(""Unable to upgrade server "" + ""default properties: no properties found!"");
  }
}
",102,8,"upgradeServerInstance:upgradeClientConfig,upgradedValues:upvertedValues,",354,2.437842432657878,Beam
216,"protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
","protected void deleteInstanceVerifier(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteInstanceVerifier(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException(""Type category "" + typeCategory + "" not handled"");
}
}
",68,7,"deleteTypeVertex:deleteInstanceVerifier,",94,0.39391457637151084,Beam
217,,,221,15,,843,6.863109954198202,0
218,,,21,1,,25,0.11663981676101684,0
219,"public void forward(HttpServerRequest request){
  forward(request,null);
}
","public void index(HttpServerRequest request){
  index(request,null);
}
",16,2,"forward:index,",49,0.2070113778114319,Beam
220,"protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}
","protected boolean matchesFilter(final String input,final String[] batch){
  for (  final String match : batch) {
    if (!input.contains(match))     return false;
  }
  return true;
}
",42,4,"filter:batch,",31,0.1472650448481242,Beam
221,,,85,4,,150,0.6819461067517598,0
222,"final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void rint(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",70,6,"println:rint,",21,0.09387940963109334,Beam
223,"private static void updateWindowUI(Window window){
  SwingUtilities.updateComponentTreeUI(window);
  Window ownedWins[]=window.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    updateWindowUI(ownedWin);
  }
}
","private static void updateWinGUI(Window window){
  SwingUtilities.updateComponentTreeUI(window);
  Window ownedWins[]=window.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    updateWinGUI(ownedWin);
  }
}
",42,4,"updateWindowUI:updateWinGUI,",43,0.19539275566736858,Beam
224,,,12,1,,49,0.24482765197753906,0
225,,,16,2,,235,1.0268921534220377,0
227,,,113,4,,109,0.8779953479766845,0
228,"public void addPreferencesButton(){
  JButton prefsButton=new JButton(""Prefs"");
  prefsButton.setHideActionText(true);
  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefsButton);
}
","public void addPreferencesAction(){
  JButton prefsButton=new JButton(""Prefs"");
  prefsButton.setHideActionText(true);
  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonButton.add(prefsButton);
}
",42,3,"addPreferencesButton:addPreferencesAction,buttonPanel:buttonButton,",30,0.12483157316843668,Beam
229,,,291,25,,1566,9.243389693895976,0
230,"private boolean hasNext(Pattern pattern){
  if (!hasNext()) {
    return false;
  }
  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));
  return matcher.find();
}
","private boolean HasNext(Pattern model){
  if (!HasNext()) {
    return false;
  }
  Matcher matcher=model.matcher(gserValue.substring(pos,length));
  return matcher.find();
}
",45,6,"hasNext:HasNext,pattern:model,",64,0.38310879866282144,Beam
231,"private void updateStateView(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
","private void UpdateModelCheck(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}
",31,4,"updateStateView:UpdateModelCheck,",59,0.2644771456718445,Beam
232,,,20,2,,63,0.317399263381958,0
233,,,58,3,,352,1.9540085673332215,0
234,,,81,6,,197,0.8168664574623108,0
235,"public void init(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    init(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + url + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
","public void sync(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    sync(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning(""LayerHandler.init(URL): "" + url + "" is not a valid URL"");
  }
catch (  java.io.IOException e) {
    logger.warning(""LayerHandler.init(URL): Caught an IOException"");
  }
}
",97,6,"init:sync,",9,0.06006121238072713,Beam
236,"private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}
","private void insertSpline(){
  splie=new int[(splie.length << 1) + 1];
  threshold=(int)(splie.length * loadFactor);
  Arrays.fill(splie,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}
",72,7,"growSpine:insertSpline,spine:splie,",108,0.5178069710731507,Beam
237,,,23,4,,198,0.8686391711235046,0
238,"public CallChainInfo(SootMethod m,Stmt s,String type){
  this.type=type;
  this.link=""as_call"";
  this.method=m;
  this.stmt=s;
  calls=1;
  if (type.equals(""syscall""))   syscalls=1;
}
","public CallChainImpl(SootMethod m,Stmt s,String type){
  this.type=type;
  this.link=""as_call"";
  this.method=m;
  this.stmt=s;
  calls=1;
  if (type.equals(""syscall""))   syscalls=1;
}
",55,6,"CallChainInfo:CallChainImpl,",98,0.47189897696177163,Beam
239,,,106,19,,1962,8.356076482931773,0
240,"private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}
","private void stroke(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals(""none"")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style,"" ,"");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}
",213,12,"pathStyleHelper:stroke,",27,0.18929388523101806,Beam
241,"public static Format generateFormat(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
","public static Format GenerceFile(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}
",25,2,"generateFormat:GenerceFile,",43,0.2149439771970113,Beam
242,"public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}
","public double calculateExcitatoryratie(){
  excitatoryPerion=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryPerion)) {
    return 0;
  }
  return excitatoryPerion;
}
",39,3,"calculateExcitatoryRatio:calculateExcitatoryratie,excitatoryRatio:excitatoryPerion,",45,0.3269253492355347,Beam
243,"public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}
","public void tracks(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException(""The file must not be null"");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}
",43,4,"track:tracks,",59,0.2898095488548279,Beam
245,"protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}
","protected void arraycopy(byte[] bag,int pos,int length){
  mMessage.write(bag,pos,length);
  mPosition=mPosition + length;
}
",34,6,"buf:bag,",7,0.04126355250676473,Beam
246,"public void testPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}
","public void runPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue(""The underlying store contains extra keys: "" + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue(""Missing keys in the underlying store: "" + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals(""Invalid value for key "" + key,""val"" + key,map.get(key));
}
",154,7,"testPutGetRemove:runPutGetRemove,",3,0.019419260819753013,Beam
247,"public static synchronized DataSourceViewsManager sharedInstance(){
  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();
  return sharedInstance;
}
","public static synchronized DataSourceViewsManager shareRegion(){
  if (shareRegion == null)   shareRegion=new DataSourceViewsManager();
  return shareRegion;
}
",25,1,"sharedInstance:shareRegion,",22,0.11209096908569335,Beam
248,"public static String[] parseTitle(String title){
  String v[]={"""",""""};
  if (title == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}
","public static String[] splittitle(String doc){
  String v[]={"""",""""};
  if (doc == null)   return v;
  Pattern p=Pattern.compile(""(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(doc);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=doc;
  }
  return v;
}
",103,5,"title:doc,parseTitle:splittitle,",55,0.5326166947682699,Beam
249,,,133,10,,409,2.804183868567149,0
250,"public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
","public Iterable<ServiceDescriptor> registerService(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}
",47,4,"listServices:registerService,",13,0.057123422622680664,Beam
251,"private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}
","private double[][] xxPower(int j){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(j - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}
",93,6,"xPrime:xxPower,t:j,",84,0.5022909482320149,Beam
252,,,85,8,,424,2.2050793488820393,0
253,,,187,11,,271,2.779362614949544,0
254,"private void shutdown(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
","private void shutdownup(){
  if (nbestListWriter != null) {
    logger.info(""Closing n-best writer"");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info(""Closing alignment writer"");
    alignmentWriter.close();
  }
}
",49,4,"shutdown:shutdownup,",6,0.02833824952443441,Beam
255,,,281,14,,667,4.515305324395498,0
257,"public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}
","public String[] buildReport(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (buildReport(document));
}
",33,4,"parseConfiguration:buildReport,",27,0.14738194545110067,Beam
258,,,13,2,,252,1.1261276245117187,0
259,,,181,9,,293,1.8913772543271383,0
260,"public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}
","public int compate(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}
",391,20,"compare:compate,",13,0.08936161597569783,Beam
261,"public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}
","public synchronized Future<V> start(Callable<V> task) throws RejectedExecutionException {
  return pool.start(task);
}
",26,3,"submit:start,",40,0.1912267525990804,Beam
263,"public static HashProvider best(HashParameters params){
  return best(params,EnumSet.of(HashSupport.STATEFUL));
}
","public static HashProvider find(HashParameters params){
  return find(params,EnumSet.of(HashSupport.STATEFUL));
}
",25,2,"best:find,",17,0.09698357184727986,Beam
264,"public Optional<T> last(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
","public Optional<T> current(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}
",49,3,"last:current,",4,0.021408700942993165,Beam
265,"private synchronized IMqttToken removeMqttToken(Bundle data){
  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityToken != null) {
    int tokenNumber=Integer.parseInt(activityToken);
    IMqttToken token=tokenMap.get(tokenNumber);
    tokenMap.delete(tokenNumber);
    return token;
  }
  return null;
}
","private synchronized IMqttToken removeMQtuTask(Bundle data){
  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityToken != null) {
    int tokenNumber=Integer.parseInt(activityToken);
    IMqttToken token=keyCache.get(tokenNumber);
    keyCache.delete(tokenNumber);
    return token;
  }
  return null;
}
",63,6,"removeMqttToken:removeMQtuTask,tokenMap:keyCache,",222,1.140211534500122,Beam
266,,,15,3,,74,0.5862564325332642,0
267,"private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}
","private int calculateMaxStyle(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}
",40,5,"calculateTotalHeight:calculateMaxStyle,",65,0.45521324475606284,Beam
268,"private String formatNode(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append("")"");
  return response.toString();
}
","private String filterN(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder(""("");
  if ((n=node.getLeftSon()) != null) {
    response.append(filterN(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(filterN(n));
  }
  response.append("")"");
  return response.toString();
}
",104,4,"formatNode:filterN,",52,0.384843643506368,Beam
270,"protected void checkRowIndex(final int row) throws MathIllegalArgumentException {
  if (row < 0 || row >= getRowDimension()) {
    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1);
  }
}
","protected void checkColumnNumber(final int row) throws MathIllegalArgumentException {
  if (row < 0 || row >= getRowDimension()) {
    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1);
  }
}
",45,2,"checkRowIndex:checkColumnNumber,",41,0.2651558995246887,Beam
271,"public static boolean createFolder(@SuppressWarnings(""UnusedParameters"") Context mContext,String path,String folderName){
  File SDCardRoot=new File(path,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}
","public static boolean makeRoot(@SuppressWarnings(""UnusedParameters"") Context mContext,String root,String folderName){
  File SDCardRoot=new File(root,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}
",53,5,"createFolder:makeRoot,path:root,",131,0.5835496028264363,Beam
272,"public NavMouseMode(boolean shouldConsumeEvents){
  super(modeID,shouldConsumeEvents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}
","public navMouseModule(boolean shouldConsumeEvents){
  super(modeID,shouldConsumeEvents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}
",52,4,"NavMouseMode:navMouseModule,",5,0.030942102273305256,Beam
273,"@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
","@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueures(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}
",81,6,"processQueues:processQueures,",3,0.022985915342966717,Beam
274,,,47,4,,300,1.6668342669804892,0
275,"public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
","public void contentsUpdated(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}
",54,7,"contentsChanged:contentsUpdated,",32,0.16728164354960123,Beam
276,"protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}
","protected SizeRequirements update(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals(""left"")) {
      r.alignment=0;
    }
 else     if (ta.equals(""center"")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals(""right"")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}
",343,16,"calculateMinorAxisRequirements:update,",76,0.5580102245012919,Beam
277,"private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}
","private void generateUnsignedIntexample(Instances format,int numInstances,SubspaceClusterDefinition cl,String null){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(null);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}
",478,23,"generateUniformIntegerExamples:generateUnsignedIntexample,cName:null,",202,1.2678979873657226,Beam
278,,,95,5,,281,1.9255078951517741,0
279,"private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}
","private Map<URI,Map<URI,Map<String,List<URI>>>> update(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}
",459,10,"createDeviceToCGMapFromDescriptors:update,",58,0.45222862164179484,Beam
280,"@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}
","@NotNull private File resolvedPath(@NotNull String parent) throws IOException {
  File file;
  if (parent.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,parent.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),parent);
  }
 else {
    file=new File(myTemplateRootFolder,parent);
  }
  return file.getCanonicalFile();
}
",91,5,"resolveName:resolvedPath,name:parent,",65,0.39255513350168864,Beam
282,,,49,3,,298,1.4553294459978738,0
283,"public IntArrayList(int[] data){
  array=new int[(int)(data.length * 1.1) + 1];
  size=data.length;
  System.arraycopy(data,0,array,0,size);
}
","public IntIntegerL(int[] data){
  array=new int[(int)(data.length * 1.1) + 1];
  size=data.length;
  System.arraycopy(data,0,array,0,size);
}
",50,4,"IntArrayList:IntIntegerL,",44,0.2245938738187154,Beam
284,"private static boolean createNaviDirectory(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
","private static boolean createNaviDir(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}
",42,2,"createNaviDirectory:createNaviDir,",5,0.0227301557858785,Beam
285,"public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}
","public void buildPlace(File OFolder,boolean newTab){
  buildPlace(OFolder,newTab,false);
}
",21,3,"oFile:OFolder,loadLayout:buildPlace,",177,0.5826461315155029,Beam
286,,,199,9,,373,2.2664624055226645,0
287,"static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}
","static WindowsFileAttributes newAttribute(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}
",139,11,"readAttributes:newAttribute,",10,0.05513530969619751,Beam
288,"public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
","public final void send(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug(""sending packet: "" + closePacket + "" and closing connection after that."");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}
",65,8,"close:send,",36,0.3221015771230062,Beam
289,"private void createGui(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
","private void createGuai(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}
",50,4,"createGui:createGuai,",5,0.0272900382677714,Beam
290,,,90,8,,792,5.189794786771139,0
291,,,65,6,,729,5.457845997810364,0
293,,,19,2,,254,1.2585947195688882,0
294,,,20,3,,201,0.814273190498352,0
295,"private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
","private double redicted(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=redicted(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}
",33,4,"prediction:redicted,",44,0.2077105204264323,Beam
296,"protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}
","protected static SyncToken createAsyncTokens(String timeString,@Nullable String uuid){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(timeString),uuid);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}
",46,4,"createSyncToken:createAsyncTokens,dateString:timeString,",120,0.6393029967943827,Beam
297,"public void init(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}
","public void setup(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}
",47,3,"init:setup,",3,0.021428910891215007,Beam
298,,,200,15,,1408,13.466379145781199,0
300,"public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}
","public static int find(byte[] a,int FromOffset,int toIndex,byte[] id){
  int result=-1;
  int sublen=id.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=FromOffset; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,id[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != id[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}
",180,10,"fromIndex:FromOffset,key:id,",421,3.4223937590916953,Beam
301,,,208,22,,1446,9.727299877007802,0
302,,,85,7,,1114,7.351929640769958,0
303,"public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
","public Edge(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="""";
}
",30,4,"Graph:Edge,",3,0.01581295331319173,Beam
304,"@SuppressWarnings(""unchecked"") public void testProjectionPredicateDifferentClassLoaders() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}
","@SuppressWarnings(""unchecked"") public void start() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty(""p2p.uri.cls""))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException(""Define property p2p.uri.cls"",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.JobStealingTask"");
  Class nodeFilterCls=ldr1.loadClass(""org.apache.ignite.tests.p2p.ExcludeNodeFilter"");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}
",312,11,"testProjectionPredicateDifferentClassLoaders:start,",22,0.17609070936838786,Beam
305,"public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}
","public static byte[] deccode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base48Data=encoded.toCharArray();
  int len=removeWhiteSpace(base48Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte descodedText[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataSync=0;
  descodedText=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base48Data[dataSync++])) || !isData((d2=base48Data[dataSync++])) || !isData((d3=base48Data[dataSync++]))|| !isData((d4=base48Data[dataSync++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    descodedText[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    descodedText[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    descodedText[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base48Data[dataSync++])) || !isData((d2=base48Data[dataSync++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base48Data[dataSync++];
  d4=base48Data[dataSync++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(descodedText,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(descodedText,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    descodedText[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    descodedText[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    descodedText[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return descodedText;
}
",708,20,"decode2:deccode2,base64Data:base48Data,dataIndex:dataSync,decodedData:descodedText,",6802,47.594436740875246,Beam
306,"public static Source fromURL(URL url,Charset cs) throws IOException {
  URI uri;
  try {
    uri=url.toURI();
  }
 catch (  URISyntaxException e) {
    throw new IOException(""Illegal URI"",e);
  }
  try (InputStream is=url.openStream()){
    return fromStream(is,uri,cs);
  }
 }
","public static Source fromURL(URL browser,Charset cs) throws IOException {
  URI uri;
  try {
    uri=browser.toURI();
  }
 catch (  URISyntaxException e) {
    throw new IOException(""Illegal URI"",e);
  }
  try (InputStream is=browser.openStream()){
    return fromStream(is,uri,cs);
  }
 }
",68,6,"url:browser,",65,0.3459468762079875,Beam
307,"public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}
","public void start() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,""1"");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,""2"");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}
",345,15,"testReverseOrder4:start,",27,0.15687504609425862,Beam
308,"static ZoneOffsetTransitionRule readExternal(DataInput in) throws IOException {
  int data=in.readInt();
  Month month=Month.of(data >>> 28);
  int dom=((data & (63 << 22)) >>> 22) - 32;
  int dowByte=(data & (7 << 19)) >>> 19;
  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);
  int timeByte=(data & (31 << 14)) >>> 14;
  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];
  int stdByte=(data & (255 << 4)) >>> 4;
  int beforeByte=(data & (3 << 2)) >>> 2;
  int afterByte=(data & 3);
  LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0));
  ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));
  ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));
  ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));
  return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after);
}
","static ZoneOffsetTransitionRule transform(DataInput in) throws IOException {
  int data=in.readInt();
  Month month=Month.of(data >>> 28);
  int dom=((data & (63 << 22)) >>> 22) - 32;
  int dowByte=(data & (7 << 19)) >>> 19;
  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);
  int timeByte=(data & (31 << 14)) >>> 14;
  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];
  int stdByte=(data & (255 << 4)) >>> 4;
  int beforeByte=(data & (3 << 2)) >>> 2;
  int afterByte=(data & 3);
  LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0));
  ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));
  ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));
  ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));
  return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after);
}
",332,16,"readExternal:transform,",47,0.30481903155644735,Beam
309,,,95,5,,219,1.4142789483070373,0
310,"private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}
","private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String ubRemove) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(ubRemove);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(ubRemove)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,""65280"",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,""-8"",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(ubRemove);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}
",246,12,"subRegister:ubRemove,",84,0.5674931009610494,Beam
311,,,61,3,,269,1.7774012645085653,0
312,"default B withDefault(String key,int value){
  return withDefault(key,Integer.toString(value));
}
","default B getDefault(String key,int value){
  return getDefault(key,Integer.toString(value));
}
",25,3,"withDefault:getDefault,",7,0.033393367131551104,Beam
313,"private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}
","private void initPointManager(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}
",109,6,"initMapLayer:initPointManager,",13,0.08095238208770753,Beam
314,,,66,8,,1185,7.713417450586955,0
315,"@Override public boolean add(IMessage message){
  return add(message,false);
}
","@Override public boolean read(IMessage message){
  return read(message,false);
}
",19,2,"add:read,",12,0.0805055856704712,Beam
316,,,19,2,,37,0.19191893736521404,0
317,"private void removeTvShow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}
","private void removeTbshow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}
",178,12,"removeTvShow:removeTbshow,",20,0.1373519460360209,Beam
318,,,126,8,,292,1.4807600498199462,0
319,,,151,9,,295,1.4614791711171469,0
320,"public void add(T item){
synchronized (lock) {
    items.add(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
","public void added(T item){
synchronized (lock) {
    items.added(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}
",31,5,"add:added,",8,0.0391443928082784,Beam
321,,,80,4,,624,2.774862086772919,0
322,"public boolean importPkcs8(){
  return jrbPkcs8.isSelected();
}
","public boolean isPkc8(){
  return jrbPkcs8.isSelected();
}
",14,2,"importPkcs8:isPkc8,",4,0.030630218982696533,Beam
323,,,41,5,,256,1.349820895989736,0
324,,,65,4,,364,2.2275606274604796,0
325,,,20,3,,343,2.643004028002421,0
326,"public SGenItemProviderAdapterFactory(){
  supportedTypes.add(IEditingDomainItemProvider.class);
  supportedTypes.add(IStructuredItemContentProvider.class);
  supportedTypes.add(ITreeItemContentProvider.class);
  supportedTypes.add(IItemLabelProvider.class);
  supportedTypes.add(IItemPropertySource.class);
}
","public SGenItemProviderAdapterCache(){
  supportedTypes.add(IEditingDomainItemProvider.class);
  supportedTypes.add(IStructuredItemContentProvider.class);
  supportedTypes.add(ITreeItemContentProvider.class);
  supportedTypes.add(IItemLabelProvider.class);
  supportedTypes.add(IItemPropertySource.class);
}
",51,2,"SGenItemProviderAdapterFactory:SGenItemProviderAdapterCache,",14,0.057720947265625,Beam
327,"public List<Interface> showInterface() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}
","public List<Interface> showPort() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showInterface.cmd""),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showInterface.interfacename.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portdescription.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortWWN.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.PortmodeFCID.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portvsan.match""),MDSDialogProperties.getString(""MDSDialog.showInterface.Portmode.match"")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}
",291,10,"showInterface:showPort,",4,0.02361402114232381,Beam
328,"protected OSXAdapter(String proxySignature,Object target,Method handler){
  this.proxySignature=proxySignature;
  this.targetObject=target;
  this.targetMethod=handler;
}
","protected OSXPAdapt(String proxySignature,Object target,Method handler){
  this.proxySignature=proxySignature;
  this.targetObject=target;
  this.targetMethod=handler;
}
",32,4,"OSXAdapter:OSXPAdapt,",74,0.36639404296875,Beam
329,,,36,5,,678,5.024170780181885,0
330,,,48,10,,2207,12.808556214968364,0
331,"public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}
","public CharBuffer ge(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}
",110,7,"delete:ge,",78,0.3810445825258891,Beam
332,,,39,4,,276,1.3573904951413474,0
333,"public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}
","public void write(byte[] bytes){
  write(bytes,0,bytes.length);
}
",22,2,"append:write,",37,0.20512065887451172,Beam
334,"public static DereferenceAliasesPolicy valueOf(final int intValue){
  if (intValue < 0 || intValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[intValue];
}
","public static DereferenceAliasesPolicy valueOf(final int valValue){
  if (valValue < 0 || valValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[valValue];
}
",34,3,"intValue:valValue,",22,0.12667110761006672,Beam
335,,,62,5,,224,1.0719399491945902,0
336,"private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
","private void moveFolder(File temp,File dest) throws IOException {
  for (  File f : temp.listFiles()) {
    File sourceFile=new File(temp,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      moveFolder(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}
",88,6,"copyDirectory:moveFolder,source:temp,",97,0.405246373017629,Beam
337,"public void poll(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}
","public void go(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}
",79,7,"poll:go,",44,0.2448834816614787,Beam
338,"private static String partitionSpecToName(Map<String,String> spec){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : spec.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""/"");
    }
    sb.append(entry.getKey() + ""="" + entry.getValue());
  }
  return sb.toString();
}
","private static String partitionConfigToName(Map<String,String> spec){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : spec.entrySet()) {
    if (sb.length() != 0) {
      sb.append(""/"");
    }
    sb.append(entry.getKey() + ""="" + entry.getValue());
  }
  return sb.toString();
}
",88,4,"partitionSpecToName:partitionConfigToName,",4,0.027401343981424967,Beam
339,,,52,5,,401,1.7653722127278646,0
340,,,136,9,,305,1.8833702762921651,0
341,,,57,5,,1012,6.204562858740489,0
342,"public void reset(){
  engineReset();
  state=INITIAL;
}
","public void clear(){
  engineReset();
  state=INITIAL;
}
",15,3,"reset:clear,",3,0.01802790959676107,Beam
343,,,34,4,,191,0.9280753175417582,0
344,,,33,3,,156,0.8647697369257609,0
345,"public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}
","public String forEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  forEPL(formatter,writer);
  return writer.toString();
}
",31,3,"toEPL:forEPL,",6,0.04064615567525228,Beam
346,,,19,2,,321,1.8784584641456603,0
347,,,106,6,,327,1.836778430143992,0
348,"public static boolean isIntentAvailable(Context context,String action){
  final PackageManager packageManager=context.getPackageManager();
  final Intent intent=new Intent(action);
  Log.d(MP_TAG,""Looking for intent "" + action);
  List<ResolveInfo> list=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  return list.size() > 0;
}
","public static boolean isIntentAvailable(Context context,String event){
  final PackageManager packageManager=context.getPackageManager();
  final Intent intent=new Intent(event);
  Log.d(MP_TAG,""Looking for intent "" + event);
  List<ResolveInfo> list=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  return list.size() > 0;
}
",70,6,"action:event,",60,0.3157853722572327,Beam
349,,,193,7,,213,1.2805270910263062,0
350,,,352,7,,1474,10.171025454998016,0
351,,,87,6,,306,3.461562991142273,0
352,,,31,3,,173,1.0476937174797059,0
353,,,34,4,,227,1.4500128388404847,0
354,,,296,13,,612,4.4205477396647135,0
355,"public synchronized int totalRecoverFiles(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}
","public synchronized int totalrecoverKeys(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}
",44,4,"totalRecoverFiles:totalrecoverKeys,",15,0.07702862024307251,Beam
356,"private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
","private void Select(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}
",283,14,"handleSelection:Select,",91,0.4452420949935913,Beam
357,"public int rgbFor(int pixel){
  return surfaceType.rgbFor(pixel,colorModel);
}
","public int rbbFrom(int pixel){
  return surfaceType.rbbFrom(pixel,colorModel);
}
",19,4,"rgbFor:rbbFrom,",12,0.06407158374786377,Beam
358,"public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}
","public static void downloadAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase(""armeabi"")) {
    libraryName=""armeabi"";
  }
 else   if (abi.equalsIgnoreCase(""x86"")) {
    libraryName=""x86"";
  }
 else   if (abi.contains(""armeabi-v7"")) {
    libraryName=""armeabi-v7a"";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + ""/"" + assetsFilename);
  copyFile(file,is,mode);
}
",118,9,"copyAssets:downloadAssets,",66,0.3477794567743937,Beam
359,,,162,7,,1717,12.156964234511058,0
360,,,64,4,,173,0.875247065226237,0
361,"public void testInvokeAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}
","public void tryInvokeAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}
",123,5,"testInvokeAny4:tryInvokeAny4,",3,0.02577792008717855,Beam
362,"private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}
","private int calculateGraidentChannel(int destPosition,int destChannel,int distance,int angle){
  if (destPosition == destChannel) {
    return destPosition;
  }
  float ratio=((float)angle) / ((float)distance);
  int pos=(int)(Math.abs(destPosition - destChannel) * ratio);
  if (destPosition > destChannel) {
    return destPosition - pos;
  }
 else {
    return destPosition + pos;
  }
}
",86,7,"offset:angle,sourceChannel:destPosition,",192,1.0622931480407716,Beam
363,,,38,3,,193,0.7959683775901795,0
364,,,38,5,,161,1.0227656284968059,0
365,"public void add(IPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException(""Can\'t add point while iterator in progress"");
  }
  points.add(pt);
}
","public void make(IPoint obj){
  if (inProgress) {
    throw new ConcurrentModificationException(""Can\'t add point while iterator in progress"");
  }
  cells.make(obj);
}
",29,4,"add:make,pt:obj,points:cells,",282,1.4650475660959879,Beam
366,"public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){
  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}
","public Joiner join(Class<? extends DataObject> clazz,String query,URI... ids){
  return join(clazz,query,new ArrayList<URI>(Arrays.asList(ids)));
}
",43,4,"alias:query,",27,0.13003909587860107,Beam
367,,,14,2,,73,0.3092853188514709,0
368,"public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}
","public double update() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double Dota=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + Dota;
  if (Dota > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException(""invalid slide"");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException(""Temporarily disabled."");
  }
  return logq;
}
",923,21,"doOperation:update,delta:Dota,",248,2.072160875797272,Beam
369,,,16,3,,252,1.1663903872172037,0
370,,,198,10,,643,3.6918824632962544,0
371,"public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
","public static EnergyNetwork setNet(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}
",74,5,"initNetwork:setNet,",8,0.027499051888783772,Beam
372,"public void addGeoKey(XTIFFField geoKey){
  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);
  hasGeoKeys=true;
}
","public void addgeometryPoint(XTIFFField geoKey){
  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);
  hasGeoKeys=true;
}
",30,4,"addGeoKey:addgeometryPoint,",22,0.09829253753026326,Beam
373,"private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}
","private void stop(HttpServletRequest message,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=message.getParameter(""stop"");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + "": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"");
  }
 else {
    mon.stop();
    out.println(OK + "": stop successfully called on - "" + mon);
  }
}
",82,8,"request:message,",6,0.03645932674407959,Beam
374,,,82,3,,85,0.42965529759724935,0
375,"public void presentLicenses(boolean preAccept){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preAccept) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
","public void presentLicenses(boolean preFeed){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preFeed) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("""");
      user.show(license.getLicenseText());
      String input=user.ask(""prompt"");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}
",116,7,"preAccept:preFeed,",6,0.028410991032918293,Beam
376,,,63,3,,581,3.2951738079388937,0
377,,,111,8,,1041,5.535698362191519,0
378,"public void print(int inum){
  print(String.valueOf(inum));
}
","public void show(int inum){
  show(String.valueOf(inum));
}
",19,2,"print:show,",5,0.036630666255950926,Beam
379,"public boolean makeBackupFile(String directory,File file){
  if (file == null) {
    log.info(""No file to backup"");
  }
 else   if (file.canWrite()) {
    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());
    if (log.isDebugEnabled()) {
      log.debug(""new backup file: "" + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug(""deleted backup file "" + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug(""creating backup directory: "" + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error(""backup directory not created"");
        return false;
      }
    }
    if (file.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug(""created new backup file "" + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""could not create backup file "" + backupFullName);
      }
      return false;
    }
  }
  return true;
}
","public boolean copy(String directory,File page){
  if (page == null) {
    log.info(""No file to backup"");
  }
 else   if (page.canWrite()) {
    String backupFullName=directory + File.separator + createFileNameWithDate(page.getName());
    if (log.isDebugEnabled()) {
      log.debug(""new backup file: "" + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug(""deleted backup file "" + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug(""creating backup directory: "" + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error(""backup directory not created"");
        return false;
      }
    }
    if (page.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug(""created new backup file "" + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug(""could not create backup file "" + backupFullName);
      }
      return false;
    }
  }
  return true;
}
",257,7,"makeBackupFile:copy,file:page,",283,2.0804991364479064,Beam
380,"public void append(int key,E value){
  if (mSize != 0 && key <= mKeys[mSize - 1]) {
    put(key,value);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=key;
  mValues[pos]=value;
  mSize=pos + 1;
}
","public void next(int id,E value){
  if (mSize != 0 && id <= mKeys[mSize - 1]) {
    put(id,value);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=id;
  mValues[pos]=value;
  mSize=pos + 1;
}
",163,11,"key:id,append:next,",136,1.3684812823931376,Beam
382,,,28,3,,255,1.0958777030309041,0
383,"@Override public boolean release(int decrement){
  if (isEmpty) {
    return false;
  }
  if (decrement < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decrement,toVerboseString()));
  }
  final int refCnt=ledger.decrement(decrement);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",decrement,refCnt + decrement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}
","@Override public boolean create(int decrement){
  if (isEmpty) {
    return false;
  }
  if (decrement < 1) {
    throw new IllegalStateException(String.format(""release(%d) argument is not positive. Buffer Info: %s"",decrement,toVerboseString()));
  }
  final int refCnt=ledger.decrement(decrement);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent(""release(%d). original value: %d"",decrement,refCnt + decrement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format(""ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s"",id,toVerboseString()));
  }
  return refCnt == 0;
}
",109,7,"release:create,",23,0.11833153168360393,Beam
384,"public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}
","public void scale(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}
",228,20,"update:scale,",39,0.22454758485158285,Beam
386,"protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}
","protected int update(InputStream inputStream,byte[] order,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.update());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    order[index]=readByte;
    index++;
  }
 while (index < order.length);
  return index;
}
",84,6,"read:update,buffer:order,",175,0.8419520020484924,Beam
387,"public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}
","public static void start(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.start(tag,msg);
}
",76,8,"i:start,",60,0.22099965810775757,Beam
388,"public void initGL(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}
","public void setupGl(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediarecorder.getSurface(),false);
  initGLComponents();
}
",59,6,"initGL:setupGl,mMediaRecorder:mMediarecorder,",113,0.38220155239105225,Beam
389,,,80,5,,197,1.2527949770291646,0
390,"public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split("";"")) {
    activeSlotsList.add(s);
  }
}
","public void initializeActiveSlansL(String splots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : splots.split("";"")) {
    activeSlotsList.add(s);
  }
}
",48,4,"initializeActiveSlotsList:initializeActiveSlansL,slots:splots,",58,0.2387708067893982,Beam
391,"private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}
","private static String[] searchForReferences(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}
",126,5,"scanForSources:searchForReferences,",16,0.09016551574071248,Beam
392,"private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}
","private synchronized void loadMexImages(IHex input){
  hexTileset.assignMatch(input,boardview);
  hexTileset.trackHexImages(input,tracker);
}
",28,5,"hex:input,loadHexImage:loadMexImages,",77,0.29940940539042155,Beam
393,"private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}
","private void parse(String parent) throws Exception {
  if (parent != null) {
    count=parent.length();
    data=new char[count];
    parent.getChars(0,count,data,0);
  }
  parent();
}
",52,4,"path:parent,",27,0.12892116705576578,Beam
394,,,16,1,,25,0.10317791700363159,0
395,"@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}
","@Override public void emit(String obj){
  int start=0;
  while (start < obj.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,obj.length());
    Log.i(TAG,obj.substring(start,end));
    start=end;
  }
}
",66,5,"str:obj,write:emit,",90,0.39484031200408937,Beam
396,,,39,5,,258,1.7856857617696127,0
397,"public static void writeBcdNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}
","public static void writeBcmNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}
",234,6,"writeBcdNumber:writeBcmNumber,",37,0.21997304757436117,Beam
398,"EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}
","EgDemandDetails InsertPrimalty(final BigDecimal chqBounceAnnealty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBounceAnnealty != null && chqBounceAnnealty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException("" Penalty Demand reason Master is null in method  insertPenalty"");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException("" Penalty Demand reason is null in method  insertPenalty "");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBounceAnnealty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}
",118,8,"insertPenalty:InsertPrimalty,chqBouncePenalty:chqBounceAnnealty,",379,2.416646691163381,Beam
399,"public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}
","public void rederiveImage(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}
",230,10,"rederiveColor:rederiveImage,",5,0.05091378291447957,Beam
400,,,126,10,,585,4.886870861053467,0
401,"protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mClass));
  }
}
","protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mType.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mType.add(mFactory.createFieldFromText(""private "" + element.name + "" ""+ element.getFieldName()+ "";"",mType));
  }
}
",157,10,"mClass:mType,",29,0.24937523206075032,Beam
402,,,139,7,,819,5.4633260846138,0
403,"public Debug(String clientID,ClientComms comms){
  this.clientID=clientID;
  this.comms=comms;
  log.setResourceName(clientID);
}
","public Error(String clientID,ClientComms comms){
  this.clientID=clientID;
  this.comms=comms;
  log.setResourceName(clientID);
}
",30,4,"Debug:Error,",65,0.28809457222620644,Beam
404,"private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}
","private boolean validateCooldownPolicy(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug(""True: Last scaling action is not completed but it\'s time expired for application "" + appId + ""."");
      return true;
    }
    logger.debug(""False: Last scaling action is not completed for application "" + appId + ""."");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug(""False: It\'s cooldown time for application "" + appId + "". No scaling in action."");
      return false;
    }
  }
  return true;
}
",193,11,"validateCooldownSetting:validateCooldownPolicy,",28,0.20296366612116495,Beam
405,,,30,2,,161,0.8001089175542195,0
407,,,47,3,,224,1.2744024912516276,0
408,"public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}
","public static String hide(final String base){
  return isHidden(base) ? base : HIDDEN_PREFIX.concat(base);
}
",26,2,"key:base,",45,0.21826286713282267,Beam
409,,,38,3,,139,0.7294450720151265,0
410,"public byte[] toBytes(){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    _field.store(out,null);
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
","public byte[] Tobytes(){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    _field.store(out,null);
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
",50,4,"toBytes:Tobytes,",11,0.043782742818196614,Beam
411,"public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}
","public void skip(){
  if (iterator.hasNext()) {
    View currentView=iterator.skip();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}
",204,10,"next:skip,",7,0.0675095518430074,Beam
413,,,118,7,,734,4.573941600322724,0
414,"@Override public Node item(int index){
  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;
}
","@Override public Node item(int slice){
  return (nodes != null && slice < nodes.size()) ? (Node)(nodes.get(slice)) : null;
}
",40,3,"index:slice,",34,0.1727836847305298,Beam
415,,,83,4,,123,0.7337877750396729,0
416,,,34,3,,254,1.1275572617848715,0
417,"public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
","public static <T>ArrayList<T> replace(InputStream fileReader,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileReader,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}
",93,7,"read:replace,fileStream:fileReader,",296,1.6538804093996684,Beam
419,,,39,3,,107,0.8674160401026408,0
420,"private static double pythonTime(){
  return System.currentTimeMillis() / 1000;
}
","private static double pyInstant(){
  return System.currentTimeMillis() / 1000;
}
",17,1,"pythonTime:pyInstant,",12,0.06071983178456624,Beam
421,,,128,11,,1556,9.418489408493041,0
422,"public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
","public List<CountryRO> viewOrderCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}
",55,6,"viewAddressCountryOptions:viewOrderCountryOptions,",58,0.33880102237065635,Beam
423,,,46,4,,205,1.0556156794230143,0
424,,,67,5,,328,2.1467620690663654,0
425,,,119,11,,517,2.662095042069753,0
426,"public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}
","public static String escapeComscape(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll(""\\\\\\\\$1"");
}
",29,3,"escapeRegex:escapeComscape,",8,0.037819214661916095,Beam
427,"private static boolean isDoubleEqual(double value,double valueToCompare){
  return (Math.abs(value - valueToCompare) < 0.001);
}
","private static boolean isDoubleEqual(double money,double valueToCompare){
  return (Math.abs(money - valueToCompare) < 0.001);
}
",27,3,"value:money,",83,0.539646859963735,Beam
428,"static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=collector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}
","static MethodHandle makeCollectCalluments(MethodHandle target,MethodHandle collector,int collectVolPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=collector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectVolPos,collectVolPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectVolPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectVolPos,1 + collectVolPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectVolPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm(""collect"",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}
",373,20,"makeCollectArguments:makeCollectCalluments,collectArgPos:collectVolPos,",286,1.8452988505363463,Beam
429,"private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}
","private void Denelected(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}
",104,7,"deselect:Denelected,",23,0.1100676695505778,Beam
430,"public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}
","public String toColars(int[] inticks){
  StringBuilder s=new StringBuilder(inticks.length);
  for (int i=0; i < inticks.length; i++)   s.append(toChar(inticks[i]));
  return s.toString();
}
",58,4,"toChars:toColars,indices:inticks,",62,0.33801453908284507,Beam
431,,,75,6,,200,0.9989686965942383,0
432,"public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
","public void connect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error(""Unable to join to the reconnection thread "" + e.getMessage());
  }
  if (!opened) {
    log.error(""Failed to re-establish connectivity"");
  }
 else {
    log.info(""Reconnected to "" + getCurrentPortName());
    resetupConnection();
  }
}
",93,6,"reconnect:connect,",3,0.011392561594645183,Beam
433,,,49,4,,275,1.4350457787513733,0
434,,,54,3,,109,0.5814063946406046,0
435,,,71,4,,320,1.5743065079053242,0
436,"public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}
","public Point2D inverseTransform(Point2D dest,Point2D dst){
  try {
    dest.setLocation(dest.getX() + rotXOffset,dest.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(dest,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}
",74,8,"src:dest,",38,0.21180250644683837,Beam
437,"public void addToQueue(Var var){
  addToQueue(Collections.singleton(var));
}
","public void addInStack(Var var){
  addInStack(Collections.singleton(var));
}
",19,2,"addToQueue:addInStack,",13,0.06427497466405233,Beam
438,"private static String extractClientName(String clientId,String host){
  String hostExcludedId="""";
  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {
    hostExcludedId=clientId.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}
","private static String extractClientName(String serverId,String host){
  String hostExcludedId="""";
  if ((isIPv6(host) || isIPv4(host)) && serverId.startsWith(host)) {
    hostExcludedId=serverId.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(""."");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=serverId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex=""\\\\(\\\\w+:\\\\w+\\\\)"";
  String regex=""(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf(""("");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split("":"");
    name=splitted[splitted.length - 1];
  }
  return name;
}
",183,13,"clientId:serverId,",3,0.034389678637186685,Beam
439,"private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
","private void imitWhile(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}
",100,8,"emitUntil:imitWhile,",11,0.06468212604522705,Beam
440,"public boolean isLoginSet(){
  return (username != null && (password != null && !username.equals("""") && !password.equals(""""))) || oauth;
}
","public boolean isAccountValid(){
  return (username != null && (password != null && !username.equals("""") && !password.equals(""""))) || oauth;
}
",38,4,"isLoginSet:isAccountValid,",11,0.051104239622751874,Beam
441,,,194,15,,2242,14.321450046698253,0
442,"protected void createFile(ZipEntry entry){
  IPath pathname=new Path(entry.getName());
  ZipEntry parent;
  if (pathname.segmentCount() == 1) {
    parent=root;
  }
 else {
    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));
  }
  addToChildren(parent,entry);
}
","protected void writeDir(ZipEntry key){
  IPath pathname=new Path(key.getName());
  ZipEntry parent;
  if (pathname.segmentCount() == 1) {
    parent=root;
  }
 else {
    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));
  }
  addToChildren(parent,key);
}
",68,6,"createFile:writeDir,entry:key,",51,0.23365316788355509,Beam
445,"@PostConstruct public void init(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}
","@PostConstruct public void setup(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}
",30,5,"init:setup,",5,0.016318019231160483,Beam
446,,,95,4,,173,0.8325288891792297,0
447,,,146,7,,731,4.307888416449229,0
448,"Builder addLenient(String line){
  int index=line.indexOf("":"",1);
  if (index != -1) {
    return addLenient(line.substring(0,index),line.substring(index + 1));
  }
 else   if (line.startsWith("":"")) {
    return addLenient("""",line.substring(1));
  }
 else {
    return addLenient("""",line);
  }
}
","Builder addEllients(String comment){
  int index=comment.indexOf("":"",1);
  if (index != -1) {
    return addEllients(comment.substring(0,index),comment.substring(index + 1));
  }
 else   if (comment.startsWith("":"")) {
    return addEllients("""",comment.substring(1));
  }
 else {
    return addEllients("""",comment);
  }
}
",87,3,"addLenient:addEllients,line:comment,",179,1.3094065308570861,Beam
449,,,31,3,,319,1.6287449558575948,0
450,,,38,3,,135,0.5128262718518575,0
451,"public void removeRegion(Region r){
  regions.remove(r);
}
","public void removeArea(Region er){
  regions.remove(er);
}
",16,3,"r:er,removeRegion:removeArea,",47,0.17980064551035563,Beam
452,"public static boolean looksLikeAListStyleType(String val){
  return LIST_TYPES.indexOf(val) >= 0;
}
","public static boolean looksLikeAListStyleType(String obj){
  return LIST_TYPES.indexOf(obj) >= 0;
}
",20,2,"val:obj,",8,0.056065746148427326,Beam
453,"static void pauseThread(long duration){
  try {
    Thread.sleep(duration);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
","static void pauseApplication(long date){
  try {
    Thread.sleep(date);
  }
 catch (  Exception e) {
    s_logger.warn(""Exception while trying to sleep"",e);
  }
}
",35,4,"pauseThread:pauseApplication,duration:date,",64,0.2544673403104146,Beam
455,"public long sigignore(){
  return Long.parseLong(fields[32]);
}
","public long sigsignore(){
  return Long.parseLong(fields[32]);
}
",18,2,"sigignore:sigsignore,",20,0.10799797375996907,Beam
456,"public StopwatchCPU(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}
","public stopmonitorCPU(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}
",22,3,"StopwatchCPU:stopmonitorCPU,",12,0.04740514357884725,Beam
457,,,54,4,,962,6.691559767723083,0
458,,,45,4,,666,2.9342241644859315,0
459,,,15,1,,25,0.09481891393661498,0
460,,,73,4,,470,2.159934624036153,0
461,"public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
","public static <T>void updateMappingToimmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}
",97,5,"updateMappingToImmutableSet:updateMappingToimmutableSet,",8,0.043004544576009114,Beam
462,"public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}
","public void addAll(int index,int[] value){
  int dataLen=value.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(value,0,array,index,dataLen);
  size+=dataLen;
}
",90,7,"data:value,",6,0.08039902448654175,Beam
463,,,35,3,,295,1.3365893125534059,0
464,,,17,3,,300,1.3650447845458984,0
465,"final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void dump(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",70,6,"println:dump,",6,0.029146377245585123,Beam
466,,,87,9,,902,6.161316132545471,0
467,,,135,8,,275,1.5441168308258058,0
468,,,17,3,,328,1.9079491058985392,0
469,,,45,4,,287,1.2991969426472982,0
470,"protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ curPrimaryGen+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.start();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}
","protected synchronized void parse(long i) throws IOException {
  if (state.equals(""init"") == false) {
    throw new IllegalStateException(""already started"");
  }
  message(""top: now start"");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message(""top: init: no segments in index"");
    }
 else {
      message(""top: init: read existing segments commit "" + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message(""top: init: segments: "" + infos.toString() + "" version=""+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message(""top: commitFiles="" + lastCommitFiles);
      message(""top: nrtFiles="" + lastNRTFiles);
    }
    message(""top: delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message(""top: done delete unknown files on init: all files="" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message(""top: myPrimaryGen="" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != i) {
      assert myPrimaryGen < i;
      final long initSyncStartNS=System.nanoTime();
      message(""top: init: primary changed while we were down myPrimaryGen="" + myPrimaryGen + "" vs curPrimaryGen=""+ i+ ""; sync now before mgr init"");
      CopyJob job=null;
      message(""top: now delete starting commit point "" + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException(""replica cannot start: existing segments file="" + segmentsFileName + "" must be removed in order to start, but the file delete failed"");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob(""sync on startup replica="" + name() + "" myVersion=""+ infos.getVersion(),null,null,true,null);
        job.parse();
        message(""top: init: sync sis.version="" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel(""startup failed"",ioe);
          if (ioe.getMessage().contains(""checksum mismatch after file copy"")) {
            message(""top: failed to copy: "" + ioe + ""; retrying"");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput(""SegmentInfos"",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message(""  version="" + infos.getVersion() + "" segments=""+ infos.toString());
      message(""top: init: incRef nrtFiles="" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message(""top: init: decRef lastNRTFiles="" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message(""top: init: set lastNRTFiles="" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,""top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d"",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=i;
      message(""top: same primary as before"");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message(""top: move infos generation from "" + infos.getGeneration() + "" to ""+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term(""marker"",""marker"")));
      message(""top: marker count="" + hitCount + "" version=""+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message(""top: done start"");
    state=""idle"";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith(""replica cannot start"") == false) {
      message(""exc on start:"");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}
",1015,25,"start:parse,curPrimaryGen:i,",122,0.7440969149271647,Beam
471,,,112,7,,336,2.3023021618525186,0
472,"public static final double calcNiceNumber(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}
","public static final double calcNiceInteger(final double RORE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RORE));
  double fraction=RORE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}
",201,6,"calcNiceNumber:calcNiceInteger,RANGE:RORE,",362,2.3280478914578757,Beam
473,"public static CheckIndex.Status checkIndex(Directory dir) throws IOException {
  return checkIndex(dir,true);
}
","public static CheckIndex.Status readindex(Directory dir) throws IOException {
  return readindex(dir,true);
}
",22,2,"checkIndex:readindex,",19,0.0756946603457133,Beam
475,"private void calculateD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}
","private void calculateP(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}
",86,7,"calculateD:calculateP,",36,0.2268623431523641,Beam
477,,,55,4,,480,2.0294491767883303,0
478,"public Set<WordToken> nearestWords(final int distance,final WordToken... start){
  return nearestWords(distance,null,Arrays.asList(start));
}
","public Set<WordToken> neatheringWord(final int distance,final WordToken... start){
  return neatheringWord(distance,null,Arrays.asList(start));
}
",33,3,"nearestWords:neatheringWord,",86,0.4864947279294332,Beam
479,,,39,2,,321,2.058922294775645,0
480,"public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}
","public static int set(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error(""mapping missed in ["" + t + ""] declaretion"");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}
",108,7,"update:set,",66,0.27491981983184816,Beam
481,,,14,2,,290,1.8658653060595194,0
482,"public static long fromInet4Address(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}
","public static long fromInetFourElement(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}
",28,2,"fromInet4Address:fromInetFourElement,",10,0.057806646823883055,Beam
483,,,151,8,,279,1.2050740480422975,0
484,"public boolean isEmpty(){
  return mSelectedWidgets.isEmpty();
}
","public boolean hasEmpty(){
  return mSelectedWidgets.hasEmpty();
}
",14,2,"isEmpty:hasEmpty,",4,0.021749858061472574,Beam
485,,,59,7,,678,3.426574194431305,0
486,"protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
","protected void trigger(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}
",30,4,"handle:trigger,",31,0.15831282536188762,Beam
487,,,84,2,,80,0.7169160525004069,0
488,,,50,4,,305,1.7437601288159688,0
489,"public PlaPointFloat change_size(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}
","public PlaPointFloat Change_scale(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}
",71,7,"change_size:Change_scale,",27,0.26469156742095945,Beam
490,"public synchronized void init(){
  init=true;
  for (  String mapName : store.getMapNames()) {
    if (mapName.startsWith(""temp."")) {
      MVMap<Object,Integer> temp=openTempMap(mapName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openTransactions.set(transactionId);
      }
    }
  }
}
","public synchronized void open(){
  open=true;
  for (  String mapName : store.getMapNames()) {
    if (mapName.startsWith(""temp."")) {
      MVMap<Object,Integer> temp=openTempMap(mapName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openInteractions.set(transactionId);
      }
    }
  }
}
",102,8,"init:open,openTransactions:openInteractions,",34,0.20775108734766642,Beam
491,"public static void closeQuietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
","public static void closeQuatly(final Closeable openabe){
  if (openabe != null) {
    try {
      openabe.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}
",47,3,"closeQuietly:closeQuatly,closeable:openabe,",63,0.4737964669863383,Beam
492,,,71,4,,743,4.765574065844218,0
493,"@Override protected void drawAxisLine(Graphics2D g2,double cursor,Rectangle2D dataArea,RectangleEdge edge){
  Line2D axisLine=null;
  double c=cursor;
  if (edge == RectangleEdge.TOP) {
    axisLine=new Line2D.Double(dataArea.getX(),c,dataArea.getMaxX(),c);
  }
 else   if (edge == RectangleEdge.BOTTOM) {
    axisLine=new Line2D.Double(dataArea.getX(),c,dataArea.getMaxX(),c);
  }
 else   if (edge == RectangleEdge.LEFT) {
    axisLine=new Line2D.Double(c,dataArea.getY(),c,dataArea.getMaxY());
  }
 else   if (edge == RectangleEdge.RIGHT) {
    axisLine=new Line2D.Double(c,dataArea.getY(),c,dataArea.getMaxY());
  }
  g2.setPaint(getAxisLinePaint());
  g2.setStroke(getAxisLineStroke());
  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);
  g2.draw(axisLine);
  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);
  boolean drawUpOrRight=false;
  boolean drawDownOrLeft=false;
  if (this.positiveArrowVisible) {
    if (this.inverted) {
      drawDownOrLeft=true;
    }
 else {
      drawUpOrRight=true;
    }
  }
  if (this.negativeArrowVisible) {
    if (this.inverted) {
      drawUpOrRight=true;
    }
 else {
      drawDownOrLeft=true;
    }
  }
  if (drawUpOrRight) {
    double x=0.0;
    double y=0.0;
    Shape arrow=null;
    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
      x=dataArea.getMaxX();
      y=cursor;
      arrow=this.rightArrow;
    }
 else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
      x=cursor;
      y=dataArea.getMinY();
      arrow=this.upArrow;
    }
    AffineTransform transformer=new AffineTransform();
    transformer.setToTranslation(x,y);
    Shape shape=transformer.createTransformedShape(arrow);
    g2.fill(shape);
    g2.draw(shape);
  }
  if (drawDownOrLeft) {
    double x=0.0;
    double y=0.0;
    Shape arrow=null;
    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
      x=dataArea.getMinX();
      y=cursor;
      arrow=this.leftArrow;
    }
 else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
      x=cursor;
      y=dataArea.getMaxY();
      arrow=this.downArrow;
    }
    AffineTransform transformer=new AffineTransform();
    transformer.setToTranslation(x,y);
    Shape shape=transformer.createTransformedShape(arrow);
    g2.fill(shape);
    g2.draw(shape);
  }
}
","@Override protected void fill(Graphics2D g2,double cursor,Rectangle2D dataPaper,RectangleEdge edge){
  Line2D dataBlock=null;
  double c=cursor;
  if (edge == RectangleEdge.TOP) {
    dataBlock=new Line2D.Double(dataPaper.getX(),c,dataPaper.getMaxX(),c);
  }
 else   if (edge == RectangleEdge.BOTTOM) {
    dataBlock=new Line2D.Double(dataPaper.getX(),c,dataPaper.getMaxX(),c);
  }
 else   if (edge == RectangleEdge.LEFT) {
    dataBlock=new Line2D.Double(c,dataPaper.getY(),c,dataPaper.getMaxY());
  }
 else   if (edge == RectangleEdge.RIGHT) {
    dataBlock=new Line2D.Double(c,dataPaper.getY(),c,dataPaper.getMaxY());
  }
  g2.setPaint(getAxisLinePaint());
  g2.setStroke(getAxisLineStroke());
  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);
  g2.fill(dataBlock);
  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);
  boolean drawUpOrRight=false;
  boolean drawDownOrLeft=false;
  if (this.positiveArrowVisible) {
    if (this.inverted) {
      drawDownOrLeft=true;
    }
 else {
      drawUpOrRight=true;
    }
  }
  if (this.negativeArrowVisible) {
    if (this.inverted) {
      drawUpOrRight=true;
    }
 else {
      drawDownOrLeft=true;
    }
  }
  if (drawUpOrRight) {
    double x=0.0;
    double y=0.0;
    Shape arrow=null;
    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
      x=dataPaper.getMaxX();
      y=cursor;
      arrow=this.rightArrow;
    }
 else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
      x=cursor;
      y=dataPaper.getMinY();
      arrow=this.upArrow;
    }
    AffineTransform transformer=new AffineTransform();
    transformer.setToTranslation(x,y);
    Shape shape=transformer.createTransformedShape(arrow);
    g2.fill(shape);
    g2.fill(shape);
  }
  if (drawDownOrLeft) {
    double x=0.0;
    double y=0.0;
    Shape arrow=null;
    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
      x=dataPaper.getMinX();
      y=cursor;
      arrow=this.leftArrow;
    }
 else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
      x=cursor;
      y=dataPaper.getMaxY();
      arrow=this.downArrow;
    }
    AffineTransform transformer=new AffineTransform();
    transformer.setToTranslation(x,y);
    Shape shape=transformer.createTransformedShape(arrow);
    g2.fill(shape);
    g2.fill(shape);
  }
}
",556,14,"drawAxisLine:fill,dataArea:dataPaper,axisLine:dataBlock,",1763,12.81963233947754,Beam
494,,,172,10,,1189,8.274116603533427,0
495,"@Override public boolean open(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}
","@Override public boolean load(String access){
  if (access.equals(""r"")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.load(access));
}
",101,7,"open:load,",36,0.24270479679107665,Beam
496,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenee != null || !eventName.equals(""instance"")) {
    return false;
  }
  return true;
}
","@Override public boolean isAllowed(String eventName){
  if (m_listenee != null || !eventName.equals(""instance"")) {
    return false;
  }
  return true;
}
",33,3,"connectionAllowed:isAllowed,",4,0.10277682145436605,Beam
497,"public String generateMinimalMATSimConfig(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}
","public String generateMinimalMATRoadconfig(){
  Config connection=new Config();
  ConfigGroup ippcm=connection.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,""tRue"");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(connection,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={""car"",""pt""};
  changeModeConfig.setModes(str);
  return writeConfigFile(connection);
}
",106,5,"generateMinimalMATSimConfig:generateMinimalMATRoadconfig,config:connection,",46,0.3179896354675293,Beam
498,"public boolean isValidTemplate(){
  return isValidTemplate(template);
}
","public boolean IsLegalModule(){
  return IsLegalModule(template);
}
",13,2,"isValidTemplate:IsLegalModule,",31,0.149100665251414,Beam
499,,,65,5,,362,2.305657915274302,0
500,,,58,7,,190,0.7938032190004984,0
501,,,133,8,,780,5.141956305503845,0
502,,,53,3,,173,1.111741022268931,0
503,"@Override protected void tearDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
","@Override protected void tearsDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("""");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}
",62,5,"tearDown:tearsDown,",5,0.021860961119333902,Beam
504,,,34,6,,198,1.1268001476923624,0
505,"protected final void drawArrowHead(Graphics2D g,int x,int y,int sgn){
  g.setStroke(Strokes.getStroke(StrokeType.SOLID,1));
  int size=diagram().arrowSize;
switch (headType) {
case CLOSED:
    Polygon p=new Polygon(new int[]{x,x + sgn * size,x + sgn * size,x},new int[]{y,y - size,y + size,y},4);
  g.fillPolygon(p);
break;
case OPEN:
g.drawLine(x,y,x + sgn * size,y - size);
g.drawLine(x,y,x + sgn * size,y + size);
break;
case ROUNDED:
int left=sgn == -1 ? x - 2 * size : x;
int top=y - size;
g.fillArc(left,top,size * 2,size * 2,90,sgn * 180);
}
}
","protected final void fill(Graphics2D g,int x,int y,int sgn){
  g.setStroke(Strokes.getStroke(StrokeType.SOLID,1));
  int size=diagram().arrowSize;
switch (headType) {
case CLOSED:
    Polygon p=new Polygon(new int[]{x,x + sgn * size,x + sgn * size,x},new int[]{y,y - size,y + size,y},4);
  g.fillPolygon(p);
break;
case OPEN:
g.drawLine(x,y,x + sgn * size,y - size);
g.drawLine(x,y,x + sgn * size,y + size);
break;
case ROUNDED:
int left=sgn == -1 ? x - 2 * size : x;
int top=y - size;
g.fillArc(left,top,size * 2,size * 2,90,sgn * 180);
}
}
",203,13,"drawArrowHead:fill,",150,0.8654302358627319,Beam
506,"public static Calendar reduceCalendar(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}
","public static Calendar reducecalc(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}
",68,2,"reduceCalendar:reducecalc,",46,0.36054418087005613,Beam
507,,,49,2,,38,0.21619881788889567,0
508,"public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains("".mappingTable."")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}
","public load(String singlePath,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (singlePath.contains("".mappingTable."")) {
    readMappingTable(singlePath);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(singlePath);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException(""the number of hubs is wrong"");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error reading the hub link mapping file"");
  }
  linkHubMapping.remove(""-1"");
  handleUnmappedLinksEnd(network);
}
",216,14,"fileName:singlePath,HubLinkMapping:load,",434,2.9175910552342734,Beam
509,,,81,3,,655,4.903944007555643,0
510,"private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}
","private double empiricalHCic(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}
",359,17,"empiricalHSIC:empiricalHCic,",7,0.06126859188079834,Beam
511,,,181,10,,285,1.4053800423940024,0
512,"@Override public StateConnection onCloseRead(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCloseRead();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
","@Override public StateConnection onConnectionReader(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onConnectionReader();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}
",108,6,"onCloseRead:onConnectionReader,",23,0.13438456853230793,Beam
513,,,16,1,,49,0.39600040515263873,0
514,"public void addColumn(int idx,Column column){
  if (column != null) {
    columns.add(idx,column);
  }
}
","public void addColumn(int idct,Column column){
  if (column != null) {
    columns.add(idct,column);
  }
}
",29,4,"idx:idct,",48,0.2191086967786153,Beam
515,"public Builder deleteEntitlements(){
  deleteFields.add(""entitlements"");
  return this;
}
","public Builder deleteEntlementments(){
  deleteFields.add(""entitlements"");
  return this;
}
",17,2,"deleteEntitlements:deleteEntlementments,",5,0.026961604754130047,Beam
516,"protected abstract void bindItem(DataBoundViewHolder<T> holder,int position,List<Object> payloads);
","protected abstract void bindItem(DataBoundViewHolder<T> original,int pose,List<Object> payloads);
",21,4,"holder:original,position:pose,",300,1.2796468138694763,Beam
517,,,26,2,,80,0.40411324898401896,0
518,,,65,6,,983,6.882390383879343,0
519,"protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\\000');
  }
}
","protected final void writeS(ByteBuffer bc,String text){
  if (text == null) {
    bc.putChar('\\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      bc.putChar(text.charAt(i));
    }
    bc.putChar('\\000');
  }
}
",76,3,"buf:bc,",10,0.05874311923980713,Beam
520,"public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException {
  MathUtils.checkNotNull(v1);
  MathUtils.checkNotNull(v2);
  field=v1.getField();
  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();
  data=MathArrays.buildArray(field,v1Data.length + v2.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(v2,0,data,v1Data.length,v2.length);
}
","public ArrayColumnMatrix(FieldVector<T> v4,T[] iv02) throws NullArgumentException {
  MathUtils.checkNotNull(v4);
  MathUtils.checkNotNull(iv02);
  field=v4.getField();
  final T[] v1Data=(v4 instanceof ArrayColumnMatrix) ? ((ArrayColumnMatrix<T>)v4).data : v4.toArray();
  data=MathArrays.buildArray(field,v1Data.length + iv02.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(iv02,0,data,v1Data.length,iv02.length);
}
",123,6,"ArrayFieldVector:ArrayColumnMatrix,v2:iv02,v1:v4,",444,2.2588439146677652,Beam
521,,,30,3,,413,1.5068723917007447,0
522,,,30,2,,223,1.10217791001002,0
523,"@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
","@Override public void info(String domain,String element,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.info(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}
",71,7,"error:info,key:element,",188,1.065376134713491,Beam
524,"public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}
","public void checkThenAcceptBoth_exceptualExecution() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}
",330,18,"testThenAcceptBoth_exceptionalCompletion:checkThenAcceptBoth_exceptualExecution,",18,0.14209012587865194,Beam
525,"private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}
","private int[] createEpochMinths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException(""Invalid month length in year: "" + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException(""Did not fill epochMonths exactly: ndx = "" + epochMonth + "" should be ""+ epochMonths.length);
  }
  return epochMonths;
}
",213,14,"createEpochMonths:createEpochMinths,",73,0.6117764075597127,Beam
526,"public void mouseWheelMoved(MouseWheelEvent e){
  boolean accepted=checkModifiers(e);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}
","public void mouseMousemounced(MouseWheelEvent e){
  boolean accepted=checkModifiers(e);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}
",173,11,"mouseWheelMoved:mouseMousemounced,",52,0.34438979625701904,Beam
527,"private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){
  result.add(new GraphEdge(head,tail,original.getRelation()));
}
","private void addSynthesisArc(Collection<GraphEdge> result,GraphEdge origin,GraphNode head,GraphNode tail){
  result.add(new GraphEdge(head,tail,origin.getRelation()));
}
",40,5,"original:origin,addSyntheticEdge:addSynthesisArc,",586,4.662090440591176,Beam
529,,,125,7,,763,5.193678136666616,0
530,,,470,16,,567,3.4600453972816467,0
531,"public boolean isFull(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}
","public boolean setEmpty(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}
",29,3,"isFull:setEmpty,",10,0.0586856484413147,Beam
534,,,17,2,,67,0.35611112117767335,0
535,"private void stretchViewVertically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}
","private void stretchSquareVerially(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}
",79,5,"stretchViewVertically:stretchSquareVerially,",64,0.5249499479929606,Beam
536,"private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}
","private void putFirstUse(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}
",25,1,"storeLastUsed:putFirstUse,",14,0.06319464047749837,Beam
537,,,316,15,,416,2.595751961072286,0
538,,,58,8,,318,1.6156577547391255,0
539,,,50,4,,383,2.2097331086794534,0
540,"public static String serializeDigestResponse(Map<String,String> paramMap){
  StringBuilder sb=new StringBuilder(""Digest "");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      sb.append("", "");
    }
    sb.append(entry.getKey());
    sb.append(""="");
    sb.append(entry.getValue());
  }
  return sb.toString();
}
","public static String serializeDigesterResponse(Map<String,String> paramMap){
  StringBuilder sb=new StringBuilder(""Digest "");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      sb.append("", "");
    }
    sb.append(entry.getKey());
    sb.append(""="");
    sb.append(entry.getValue());
  }
  return sb.toString();
}
",106,5,"serializeDigestResponse:serializeDigesterResponse,",5,0.033018624782562254,Beam
541,"public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}
","public static String[] decodeString(String encodedArray){
  String[] items=encodedArray.split(""_\\\\."");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub(""__"",""_"",item);
    if (!item.equals("""")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}
",110,6,"decodeArray:decodeString,",3,0.02635138432184855,Beam
543,,,14,2,,205,1.0146867831548054,0
544,,,14,1,,19,0.09639447530110677,0
545,,,50,3,,164,0.9113111813863118,0
546,"public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}
","public static void renderFlattenedConotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}
",666,10,"renderFlattenedAnnotation:renderFlattenedConotation,",127,1.1069724281628928,Beam
547,"void onItemDismissed(final int position){
  final T removed=mData.get(position);
  final boolean wasRemoved=remove(position);
  if (wasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(removed,position);
  }
}
","void onItemDismassed(final int position){
  final T removed=mData.get(position);
  final boolean wasRemoved=remove(position);
  if (wasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(removed,position);
  }
}
",48,6,"onItemDismissed:onItemDismassed,",25,0.12474493980407715,Beam
548,"public void ensureCapacity(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}
","public void enssureCapSpace(int maincap){
  if (maincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < maincap ? maincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}
",73,6,"ensureCapacity:enssureCapSpace,mincap:maincap,",65,0.5190507650375367,Beam
549,,,91,6,,220,1.8971883535385132,0
551,"public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  setMBeanServer(server);
  if (name == null) {
    name=new ObjectName(server.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}
","public ObjectName preRegister(MBeanServer site,ObjectName name) throws Exception {
  setMBeanServer(site);
  if (name == null) {
    name=new ObjectName(site.getDefaultDomain() + "":"" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}
",56,3,"server:site,",5,0.0354927659034729,Beam
552,"protected void preAddInterruptibly(Object o) throws InterruptedException {
}
","protected void preAddInterceptable(Object o) throws InterruptedException {
}
",11,2,"preAddInterruptibly:preAddInterceptable,",24,0.20257792472839356,Beam
553,"public static double max(double[] data){
  double max=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(max) || data[i] > max)     max=data[i];
  }
  return max;
}
","public static double wrap(double[] data){
  double wrap=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(wrap) || data[i] > wrap)     wrap=data[i];
  }
  return wrap;
}
",77,3,"max:wrap,",50,0.34503443241119386,Beam
555,"private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}
","private void myAdd(LinkedList<Integer> l,int si){
  l.add(si);
}
",22,3,"i:si,",4,0.027577805519104003,Beam
556,,,54,5,,1382,9.566108894348144,0
557,"private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
","private String replaceSuffix(String value,String toMerplace,String changeTo){
  String vvalue;
  if ((value == null) || (toMerplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toMerplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}
",74,5,"toReplace:toMerplace,",8,0.055995424588521324,Beam
558,,,122,10,,1990,19.968315235773723,0
559,,,90,5,,637,4.984274216492971,0
560,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void make(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""build()"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.make(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",101,9,"build:make,",53,0.3261788487434387,Beam
561,,,30,4,,354,3.237960469722748,0
563,,,22,2,,162,0.7368026773134867,0
565,"public String rightStr(String str,int length){
  return str.substring(Math.max(0,str.length() - length));
}
","public String RightObj(String spec,int length){
  return spec.substring(Math.max(0,spec.length() - length));
}
",33,3,"rightStr:RightObj,str:spec,",81,0.5333340605099995,Beam
567,,,18,3,,226,1.0245489279429119,0
568,"public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}
","public static TestResult execJaveace(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty(""user.home"") + ""/.m2/repository/de/jflex/jflex/"" + jflexTestVersion+ ""/jflex-""+ jflexTestVersion+ "".jar"");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty(""line.separator"") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}
",220,12,"execJavac:execJaveace,",40,0.26104474465052285,Beam
569,"protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","protected synchronized void process(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",58,4,"write:process,",76,0.3236524939537048,Beam
570,,,57,4,,310,1.682998243967692,0
571,,,18,2,,235,1.0455783406893413,0
573,"protected void writeLocation(String loc) throws IOException {
  hadAnnotations|=(loc != null);
  locOut.writeObject(loc);
}
","protected void sendAddress(String pl) throws IOException {
  hadAnnotations|=(pl != null);
  locOut.writeObject(pl);
}
",26,4,"writeLocation:sendAddress,loc:pl,",91,0.41956745386123656,Beam
574,,,15,2,,49,0.1603192170461019,0
575,,,84,6,,664,4.796967240174611,0
576,"public void clear(){
  m_Model.clear();
  setButtons(null);
}
","public void empty(){
  m_Model.empty();
  setButtons(null);
}
",18,2,"clear:empty,",4,0.03584592739741008,Beam
577,,,44,2,,263,1.1462402065594992,0
578,,,95,7,,607,3.8945486307144166,0
579,"private void populateNavDrawer(){
  mNavDrawerItems.clear();
  mNavDrawerItems.add(NAVDRAWER_ITEM_HOME);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_FOLLOWING);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_SHOTS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_BUCKETS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_PROJECTS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_TEAMS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_LIKES);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SETTINGS);
  createNavDrawerItems();
}
","private void populateNavViewler(){
  mNavDrawiterItems.clear();
  mNavDrawiterItems.add(NAVDRAWER_ITEM_HOME);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_SEPARATOR);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_MY_FOLLOWING);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_MY_SHOTS);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_MY_BUCKETS);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_MY_PROJECTS);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_MY_TEAMS);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_MY_LIKES);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);
  mNavDrawiterItems.add(NAVDRAWER_ITEM_SETTINGS);
  createNavDrawerItems();
}
",87,2,"populateNavDrawer:populateNavViewler,mNavDrawerItems:mNavDrawiterItems,",70,0.42789143323898315,Beam
580,"public void deletePoint(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}
","public void deletePoly(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message(""eomg"",""EditableOMPoly: removing point from lat/lon poly"");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message(""eomg"",""EditableOMPoly: removing point from x/y or offset poly"");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}
",590,15,"deletePoint:deletePoly,",4,0.0298806627591451,Beam
581,"protected void initStreamBufferSize(){
  String streamBufferSizeParam=getInitParameter(""streamBufferSize"");
  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));
  if (isDebug()) {
    log(""streamBufferSize: "" + getStreamBufferSize());
  }
}
","protected void initStreamBufferCount(){
  String streamBufferSizeParam=getInitParameter(""streamBufferSize"");
  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));
  if (isDebug()) {
    log(""streamBufferSize: "" + getStreamBufferSize());
  }
}
",50,3,"initStreamBufferSize:initStreamBufferCount,",4,0.024913036823272706,Beam
582,"@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}
","@Nullable private static Bitmap contractorScreenshot(Bitmap source,int width,int height){
  return contractorScreenshot(source,width,height,OPTIONS_NONE);
}
",30,4,"extractThumbnail:contractorScreenshot,",81,0.3947681466738383,Beam
583,"public PdfPage addAnnotation(PdfAnnotation annotation){
  return addAnnotation(-1,annotation,true);
}
","public PdfPage addAnnotation(PdfAnnotation notation){
  return addAnnotation(-1,notation,true);
}
",20,2,"annotation:notation,",6,0.028922144571940103,Beam
584,"public void write(final int b) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)b;
  m_bytesWritten++;
}
","public void write(final int i) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)i;
  m_bytesWritten++;
}
",112,14,"b:i,",12,0.06619534095128378,Beam
585,"@Deprecated public static String Collection2String(Collection<?> in,String separator){
  if (in == null) {
    return null;
  }
  return Iterator2String(in.iterator(),separator);
}
","@Deprecated public static String Iterator2Str(Collection<?> in,String separator){
  if (in == null) {
    return null;
  }
  return Iterator2String(in.iterator(),separator);
}
",41,3,"Collection2String:Iterator2Str,",68,0.3629442969957987,Beam
586,"public EncoderTestSuiteBuilder valid(int min,int max){
  _valid.set(min,max + 1);
  _invalid.clear(min,max + 1);
  _encoded.clear(min,max + 1);
  return this;
}
","public EncoderTestSuiteBuilder valid(int value,int cache){
  _valid.set(value,cache + 1);
  _invalid.clear(value,cache + 1);
  _encoded.clear(value,cache + 1);
  return this;
}
",48,6,"min:value,max:cache,",145,0.995650855700175,Beam
587,"public static void addStartupListener(StartUpListener s){
  m_StartupListeners.add(s);
}
","public static void addStartupListener(StartUpListener es){
  m_StartupListeners.add(es);
}
",17,3,"s:es,",5,0.027180790901184082,Beam
589,"protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}
","protected Expression findExpruction(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpruction(leftSide);
      Expression rightExpression=findExpruction(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpruction(leftSide);
      Expression rightExpression=findExpruction(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer(""need to break up: "" + source);
    }
    return findMathOp(source);
  }
  return null;
}
",262,8,"findExpression:findExpruction,",10,0.11416868368784587,Beam
590,"public void freeObject(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}
","public void freePool(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}
",33,5,"freeObject:freePool,",6,0.021886428197224934,Beam
591,"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}
","@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value=""FE_FLOATING_POINT_EQUALITY"",justification=""equality is specifically \'Unchanged\' here"") public void changeLocoDistance(DccThrottle t,Block blk,float length){
  if (blk == referenced && length == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug(""Block passed is the same as we are currently processing"");
  }
 else {
    referenced=blk;
  }
  changeLocoDistance(t,blockLength,length);
}
",130,11,"changeLocoSpeed:changeLocoDistance,speed:length,",206,1.3516526103019715,Beam
592,"@AfterMethod public void tearDown() throws Exception {
  Throwable t=threadFailure.getAndSet(null);
  if (t != null) {
    if (t instanceof Error)     throw (Error)t;
 else     if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     if (t instanceof Exception)     throw (Exception)t;
 else {
      AssertionFailedError afe=new AssertionFailedError(t.toString());
      afe.initCause(t);
      throw afe;
    }
  }
  if (Thread.interrupted())   tearDownFail(""interrupt status set in main thread"");
  checkForkJoinPoolThreadLeaks();
}
","@AfterMethod public void teardown() throws Exception {
  Throwable t=threadFailure.getAndSet(null);
  if (t != null) {
    if (t instanceof Error)     throw (Error)t;
 else     if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     if (t instanceof Exception)     throw (Exception)t;
 else {
      AssertionFailedError afe=new AssertionFailedError(t.toString());
      afe.initCause(t);
      throw afe;
    }
  }
  if (Thread.interrupted())   tearDownFail(""interrupt status set in main thread"");
  checkForkJoinPoolThreadLeaks();
}
",110,4,"tearDown:teardown,",13,0.06889496246973674,Beam
593,"private Token toASIToken(ILeafNode leaf){
  if (leaf.isHidden()) {
    return newSemicolonToken(leaf);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenType == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,leaf.getText());
      }
      if (leaf.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenType,leaf.getText());
      }
      next=new CommonToken(semicolonTokenType,leaf.getText());
      return new CommonToken(tokenType,leaf.getText());
    }
 else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      next=new CommonToken(tokenType);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());
    }
 else {
      return newSemicolonToken(leaf);
    }
  }
}
","private Token toATIToken(ILeafNode leaf){
  if (leaf.isHidden()) {
    return newSemicolonToken(leaf);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenType == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,leaf.getText());
      }
      if (leaf.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenType,leaf.getText());
      }
      next=new CommonToken(semicolonTokenType,leaf.getText());
      return new CommonToken(tokenType,leaf.getText());
    }
 else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      next=new CommonToken(tokenType);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());
    }
 else {
      return newSemicolonToken(leaf);
    }
  }
}
",206,11,"toASIToken:toATIToken,",4,0.03851641416549682,Beam
595,"public List<Map<String,String>> list(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
","public List<Map<String,String>> test(Database cache) throws SQLException {
  ResultSet rs=null;
  Statement statement=cache.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}
",156,7,"list:test,conn:cache,",141,0.7594279766082763,Beam
596,,,33,2,,192,0.9936499317487081,0
597,"public static int[][] deep_copy(int M[][]){
  int[][] C=new int[M.length][];
  for (int i=0; i < C.length; i++) {
    C[i]=Arrays.copyOf(M[i],M[i].length);
  }
  return C;
}
","public static int[][] deep_clone(int L[][]){
  int[][] C=new int[L.length][];
  for (int i=0; i < C.length; i++) {
    C[i]=Arrays.copyOf(L[i],L[i].length);
  }
  return C;
}
",78,4,"deep_copy:deep_clone,M:L,",47,0.23918521801630657,Beam
598,"public void enableOverview(boolean b){
  if (overviewItem != null) {
    overviewItem.setEnabled(b);
  }
}
","public void EnableDisplay(boolean p){
  if (overviewItem != null) {
    overviewItem.setEnabled(p);
  }
}
",24,3,"enableOverview:EnableDisplay,b:p,",177,0.8328688939412435,Beam
599,,,141,8,,1413,7.656732575098673,0
600,,,18,3,,170,1.2255346179008484,0
601,,,33,3,,113,2.0329967975616454,0
602,"protected void clearResult(){
  md.clearResult();
  localizationResult.setText(""<HTML>Result: <BR><BR><BR></HTML>"");
}
","protected void ClearContent(){
  cd.ClearContent();
  localizationResult.setText(""<HTML>Result: <BR><BR><BR></HTML>"");
}
",20,3,"clearResult:ClearContent,md:cd,",26,0.10810755093892416,Beam
603,,,42,5,,288,1.2598905444145203,0
604,"public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}
","public void CONT(int essionTimeout) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,essionTimeout);
  testElements.add(new ContinuationElement(essionTimeout));
}
",37,3,"sessionNumber:essionTimeout,",22,0.08230408827463785,Beam
605,"private boolean tryQueueCurrentBuffer(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}
","private boolean onqueueQueueBuffer(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}
",101,9,"tryQueueCurrentBuffer:onqueueQueueBuffer,",10,0.06233654419581095,Beam
606,,,251,12,,591,3.352494513988495,0
607,"public Builder deleteDisplayName(){
  deleteFields.add(""displayName"");
  return this;
}
","public Builder deleteProductNumber(){
  deleteCole.add(""displayName"");
  return this;
}
",17,2,"deleteDisplayName:deleteProductNumber,deleteFields:deleteCole,",38,0.17513913710912068,Beam
608,"@Override public void addValue(double value,double weight){
  m_WeightedSum+=value * weight;
  m_WeightedSumSquared+=value * value * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(value) == null) {
    m_TM.put(value,weight);
  }
 else {
    m_TM.put(value,m_TM.get(value) + weight);
  }
}
","@Override public void addValue(double item,double cost){
  m_WeightedSum+=item * cost;
  m_WeightedSumSquared+=item * item * cost;
  m_SumOfWeights+=cost;
  if (m_TM.get(item) == null) {
    m_TM.put(item,cost);
  }
 else {
    m_TM.put(item,m_TM.get(item) + cost);
  }
}
",73,7,"weight:cost,value:item,",86,0.5482957045237223,Beam
609,"public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}
","public boolean controlRuntrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug(""controlRunTrain= "" + idx + "" runMode= ""+ _runMode+ "" - warrant= ""+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange(""abortLearn"",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange(""controlChange"",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}
",325,17,"controlRunTrain:controlRuntrain,",6,0.056706865628560386,Beam
610,"private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
","private void unlock(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}
",48,5,"release:unlock,",5,0.03248837391535441,Beam
611,,,133,9,,1267,5.803556108474732,0
612,"public static void checkValid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
","public static void checkInvalid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException(""Invalid entry "" + v);
    }
  }
}
",41,3,"checkValid:checkInvalid,",3,0.015091160933176676,Beam
614,,,24,2,,267,1.267496148745219,0
615,,,134,9,,307,1.6366546352704365,0
616,"public static byte[] readData(final URL url) throws IOException {
  try (InputStream input=url.openStream()){
    return readData(input);
  }
 }
","public static byte[] findBytes(final URL address) throws IOException {
  try (InputStream input=address.openStream()){
    return findBytes(input);
  }
 }
",34,3,"url:address,readData:findBytes,",135,0.5120739817619324,Beam
617,"protected void addHeaders(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty(""Authorization"",authorization);
  }
}
","protected void applyHeaderings(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + "":"" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization=""Basic "" + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty(""Authorization"",authorization);
  }
}
",106,9,"addHeaders:applyHeaderings,",21,0.10144677559534708,Beam
618,,,137,10,,434,1.987542696793874,0
619,,,77,5,,476,2.6168333133061727,0
620,,,99,5,,1220,6.724476416905721,0
621,,,60,5,,173,0.990857211748759,0
622,,,116,7,,383,2.9570698221524556,0
624,"public void saveBootProp() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propFile=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(propFile);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
","public void saveConfigProperty() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propFile=jarFolder + ""jar.properties"";
    final OutputStream os=new FileOutputStream(propFile);
    try {
      bootProp.store(os,""Stendhal Boot Configuration"");
    }
  finally {
      os.close();
    }
  }
}
",60,6,"saveBootProp:saveConfigProperty,",9,0.03976975679397583,Beam
625,"public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){
  super(selectionModifiers);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
","public PickingGraphMousePlugin(int electionModifications,int addToSelectionModifiers){
  super(electionModifications);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}
",44,3,"selectionModifiers:electionModifications,",12,0.07167234023412068,Beam
626,"public void addToDictionary(String s){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(s.trim());
}
","public void addTodet(String b){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(b.trim());
}
",49,3,"addToDictionary:addTodet,s:b,",59,0.32704859574635825,Beam
627,"private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}
","private static Key createDESKeys(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,""DES"");
}
",273,5,"createDESKey:createDESKeys,",37,0.26500985622406004,Beam
628,,,48,3,,111,0.6380382815996806,0
629,,,60,5,,711,4.335258014996847,0
631,,,113,8,,272,1.8856081326802572,0
632,"private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
","private Element addEndPoints(String user,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (user == null) {
    throw new IllegalArgumentException(""Null name"");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException(""Null binding"");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException(""Null location"");
  }
  Element endPt=doc.createElement(user);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}
",119,7,"createEndPoint:addEndPoints,name:user,",575,2.742528736591339,Beam
633,"public void addInterface(String interfaceName){
  short interfaceIndex=itsConstantPool.addClass(interfaceName);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}
","public void insertinterface(String routeString){
  short interfaceIndex=itsConstantPool.addClass(routeString);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}
",31,5,"addInterface:insertinterface,interfaceName:routeString,",46,0.24208237727483115,Beam
635,,,37,1,,64,0.3298601428667704,0
636,,,54,4,,535,2.819120176633199,0
639,,,37,3,,155,0.8517817656199137,0
640,,,89,4,,264,1.5123105684916178,0
641,"public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException(""Directory already exists:"" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}
","public File createNextDir(File containedPath) throws IOException {
  if (containedPath == null) {
    throw new IOException(""Containing directory is null:"");
  }
  File oldFolder=createFileObject(containedPath,newFolderString);
  int i=2;
  while (oldFolder.exists() && i < 100) {
    oldFolder=createFileObject(containedPath,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (oldFolder.exists()) {
    throw new IOException(""Directory already exists:"" + oldFolder.getAbsolutePath());
  }
 else {
    oldFolder.mkdirs();
  }
  return oldFolder;
}
",113,6,"createNewFolder:createNextDir,containingDir:containedPath,newFolder:oldFolder,",212,0.9693373282750447,Beam
642,"public boolean addNode(Lop node){
  if (nodes.contains(node))   return false;
  nodes.add(node);
  return true;
}
","public boolean createEdge(Lop node){
  if (nodes.contains(node))   return false;
  nodes.add(node);
  return true;
}
",31,3,"addNode:createEdge,",39,0.16991743644078572,Beam
643,,,63,4,,167,0.8383380691210429,0
644,,,47,5,,197,1.0955750505129496,0
645,,,37,2,,229,1.1666097402572633,0
646,"private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
","private boolean encounces(String[] values){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,values)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),values,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,""exception encoding multicast"" + "" announcement"",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=values;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}
",233,14,"announce:encounces,groups:values,",130,1.1531779368718464,Beam
647,"public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
","public ArrayList<ConstraintWidget> findWidgets(WidgetContainer this,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : this.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}
",154,12,"container:this,",25,0.22470122973124187,Beam
648,"public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}
","public void trigger(IResource[] reports,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(reports);
  Set keySet=table.keySet();
  monitor.beginTask("""",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind(""RepositoryManager.committing""));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}
",178,12,"resources:reports,commit:trigger,",148,0.7847145835558573,Beam
649,"public static PlainText plain(short text){
  return plain(Integer.toString(text));
}
","public static PlainText span(short x){
  return span(Integer.toString(x));
}
",21,2,"plain:span,text:x,",112,0.5447452545166016,Beam
650,,,83,4,,281,3.3449309627215067,0
651,"private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}
","private TransportNetwork create(String networkId){
  try {
    String filename=networkId + ""_"" + R5Version.version+ "".dat"";
    File cacheLocation=new File(cacheDir,networkId + ""_"" + R5Version.version+ "".dat"");
    if (cacheLocation.exists())     LOG.info(""Found locally-cached TransportNetwork at {}"",cacheLocation);
 else {
      LOG.info(""No locally cached transport network at {}."",cacheLocation);
      if (sourceBucket != null) {
        LOG.info(""Checking for cached transport network on S3."");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info(""No cached transport network was found in S3. It will be built from scratch."");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info(""Copying pre-built transport network from S3 to local file {}"",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info(""Transport network was not found"");
        return null;
      }
    }
    LOG.info(""Loading cached transport network at {}"",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error(""Exception occurred retrieving cached transport network"",e);
    return null;
  }
}
",252,12,"checkCached:create,",27,0.18720232645670573,Beam
652,,,22,3,,220,0.9678535262743632,0
653,,,68,5,,1013,7.15556325117747,0
654,"private double calculateEntropy(double... masses){
  double res=0;
  for (  double d : masses) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}
","private double calculateEqurome(double... Mass){
  double res=0;
  for (  double d : Mass) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}
",48,5,"calculateEntropy:calculateEqurome,masses:Mass,",50,0.3468350648880005,Beam
655,"private void createMissingValues(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}
","private void createAddingMaps(){
  String sql=""SELECT ra.A_RegistrationAttribute_ID "" + ""FROM A_RegistrationAttribute ra"" + "" LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)""+ "" LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) ""+ ""WHERE r.A_Registration_ID=?""+ "" AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v ""+ ""WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),""?"");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}
",165,7,"createMissingValues:createAddingMaps,",9,0.039263256390889484,Beam
656,,,16,2,,145,1.5134530623753866,0
658,,,36,2,,158,1.3131582935651143,0
659,"public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}
","public String subsubject(String number,int start,int stop){
  if (stop == -1 || stop >= number.length()) {
    return number.subsubject(start);
  }
  return number.subsubject(start,stop);
}
",50,4,"subject:number,substring:subsubject,",198,1.2906666119893393,Beam
660,"private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}
","private void addLimitedITreGroup(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}
",255,22,"addLimitedMitreJoin:addLimitedITreGroup,",62,0.6254516164461772,Beam
661,"public File makeAcceptable(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
","public File MakeAcceptant(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}
",39,3,"makeAcceptable:MakeAcceptant,",15,0.1097518006960551,Beam
662,"protected int drawNextEventTimeDiff(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}
","protected int getNextEventEventDelta(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}
",45,4,"drawNextEventTimeDiff:getNextEventEventDelta,",9,0.08098738193511963,Beam
663,,,17,3,,365,2.4243781089782717,0
664,"protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}
","protected boolean isCompletitive(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}
",63,5,"isCompatible:isCompletitive,",64,0.4758556524912516,Beam
665,,,110,9,,1047,5.650758941968282,0
666,,,24,3,,169,0.9130143841107686,0
667,"public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public static void performImportas(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",55,6,"performSaveAs:performImportas,",60,0.3713894287745158,Beam
668,,,60,5,,557,3.582558826605479,0
669,"@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}
","@Override public SelectableChannel selectabilityConnection(){
  return socketChannel;
}
",12,2,"selectableChannel:selectabilityConnection,",5,0.027003924051920574,Beam
670,"@Override protected void commitToInput(){
  JmxBeanSensorAssignment assignment=getInput();
  if (null != assignment) {
    assignment.setDomain(domainText.getText());
    assignment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      assignment.setAttributes(Collections.<String>emptySet());
    }
 else {
      assignment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
","@Override protected void addingAtContext(){
  JmxBeanSensorAssignment attign=getInput();
  if (null != attign) {
    attign.setDomain(domainText.getText());
    attign.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      attign.setAttributes(Collections.<String>emptySet());
    }
 else {
      attign.setAttributes(new HashSet<>(attributesSet));
    }
  }
}
",88,6,"commitToInput:addingAtContext,assignment:attign,",88,0.619569989045461,Beam
671,,,170,7,,694,4.906626280148824,0
672,,,160,10,,1133,5.596491491794586,0
674,"private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
","private void saveOrOpen(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,""saveAndClose with SAVE"");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,""saveAndClose WITHOUT save"");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}
",130,8,"saveAndClose:saveOrOpen,",42,0.23010780016581217,Beam
675,"private void warning(String msg,Throwable th){
  warning(msg);
  th.printStackTrace();
}
","private void calling(String msg,Throwable th){
  calling(msg);
  th.printStackTrace();
}
",23,3,"warning:calling,",70,0.29370342890421547,Beam
676,"private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
","private void captureNewString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}
",66,5,"captureDifferentString:captureNewString,",6,0.04881176551183065,Beam
677,,,34,3,,79,0.38400019804636637,0
678,"void wakeOut(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(msg);
  }
 }
","void workout(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> go=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(go);
  }
 }
",138,11,"wakeOut:workout,msg:go,",117,0.5759989857673645,Beam
679,,,72,4,,129,0.49087918996810914,0
680,"private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
","private Object createOutners(SimpleObject comment,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(comment));
    File file=File.createTempFile(""projectbuendia"",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException(""Error storing xform data"",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException(""Error processing xform data"",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(comment);
  if (encounter == null) {
    return comment;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}
",142,9,"createInner:createOutners,post:comment,",164,1.1154674530029296,Beam
681,,,51,4,,262,1.236379293600718,0
682,"public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}
","public OsmElement saveTo(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d(""PasteFrom"",""Restoring state for "" + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}
",213,10,"pasteFrom:saveTo,",8,0.05292255878448486,Beam
683,,,26,3,,352,1.9419214288393656,0
684,"private static native boolean renderFrame(int[] pixels,long gifFileInPtr,int[] metaData);
","private static native boolean transformFrames(int[] pixels,long gifFileInPtr,int[] metaData);
",20,4,"renderFrame:transformFrames,",63,0.3019684394200643,Beam
685,"protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}
","protected HttpURLConnection configureRequest(final HttpURLConnection connection){
  if (credentials != null)   connection.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  connection.setRequestProperty(HEADER_USER_AGENT,userAgent);
  connection.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return connection;
}
",48,4,"request:connection,",27,0.17655685742696126,Beam
686,"public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {
  try {
    T result=action.call(self);
    Closeable temp=self;
    self=null;
    temp.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(self);
  }
}
","public static <T,U extends Closeable>T WithOpener(U parent,@ClosureParams(value=FirstParam.class) Closure<T> init) throws IOException {
  try {
    T result=init.call(parent);
    Closeable temp=parent;
    parent=null;
    temp.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(parent);
  }
}
",75,5,"self:parent,action:init,withCloseable:WithOpener,",534,2.915391973654429,Beam
688,"public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
","public static String encode(Serializable ops){
  ByteArrayOutputStream bott=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bott);
    try {
      oos.writeObject(ops);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bott.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
",81,5,"o:ops,bos:bott,",184,0.9487893501917521,Beam
689,"public PutIndexTemplateRequest aliases(XContentBuilder source){
  return aliases(source.bytes());
}
","public PutIndexTemplateRequest increasing(XContentBuilder source){
  return increasing(source.bytes());
}
",19,2,"aliases:increasing,",5,0.0315328041712443,Beam
690,"public void send(XTraceReport report){
  outgoing.offer(report);
}
","public void send(XTraceReport request){
  outgoing.offer(request);
}
",16,3,"report:request,",7,0.04007004102071126,Beam
691,"public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}
","public default void addedContent(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addedContent(contentProvider,fileName,entryInformation,Optional.empty());
}
",36,4,"addFile:addedContent,",59,0.30803515911102297,Beam
693,,,99,5,,137,0.6799615859985352,0
694,,,46,4,,731,3.24530314207077,0
695,,,30,3,,408,2.400956972440084,0
696,,,159,9,,363,2.9510911742846173,0
697,"public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}
","public void registerImage(PhotoEntity photo){
  photos.remove(photo);
}
",16,3,"removePhoto:registerImage,",7,0.028966283798217772,Beam
698,,,65,4,,280,1.686229693889618,0
699,"public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}
","public static double expp(double x,double mu,double slice){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(slice / (MathUtil.TWOPI * x * x* x)) - slice * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}
",94,5,"logpdf:expp,shape:slice,",109,0.6163509925206502,Beam
700,"@Override public void closingOK(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}
","@Override public void ClosingComplete(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}
",97,7,"closingOK:ClosingComplete,",7,0.03274157444636027,Beam
701,"public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
","public String getAsFixed(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append("" "");
  sb.append(itemName);
  sb.append("" on "");
  sb.append(target);
  return sb.toString();
}
",58,5,"betToString:getAsFixed,",16,0.07735351324081421,Beam
702,,,27,3,,111,0.6014309922854105,0
703,"public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}
","public double[] pya(double x_[]){
  return popY(new double[][]{x_})[0];
}
",30,2,"popy:pya,",17,0.09444141785303752,Beam
704,"private static String normalisePath(String path){
  return path.replace('\\\\','/');
}
","private static String normalisePath(String id){
  return id.replace('\\\\','/');
}
",20,2,"path:id,",7,0.059604366620381675,Beam
705,"private String trimUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}
","private String traceUrl(String uri){
  if (uri == null)   return """";
  if (uri.endsWith(""/""))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}
",47,2,"trimUrl:traceUrl,",5,0.023839672406514485,Beam
706,"private void ensureSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}
","private void ensureChild(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}
",55,5,"ensureSize:ensureChild,",4,0.03176453113555908,Beam
707,,,370,14,,1086,8.696620082855224,0
708,,,118,6,,793,5.341002329190572,0
709,"private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      cache.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}
","private void waitForIterersCleased(IgniteCache<String,Integer> list,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      list.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info(""Iterators not cleared, will wait"");
      Thread.sleep(1000);
    }
  }
}
",106,7,"waitForIteratorsCleared:waitForIterersCleased,cache:list,",188,1.1351712584495544,Beam
710,,,78,6,,680,3.845963390668233,0
711,,,82,4,,134,0.9348327040672302,0
712,"public void showScores(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
","public void showSlanners(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}
",20,3,"showScores:showSlanners,",12,0.04257955551147461,Beam
714,"public void monitor(ScalingStateMonitorTask task){
  taskQueue.add(task);
  startMonitor();
}
","public void execute(ScalingStateMonitorTask action){
  taskQueue.add(action);
  startMonitor();
}
",20,3,"monitor:execute,task:action,",67,0.26664897203445437,Beam
715,"protected Connection openConnection(boolean autocommit) throws SQLException {
  Connection conn=dataSrc.getConnection();
  conn.setAutoCommit(autocommit);
  return conn;
}
","protected Connection closeConnector(boolean autocommit) throws SQLException {
  Connection pc=dataSrc.getConnection();
  pc.setAutoCommit(autocommit);
  return pc;
}
",30,4,"openConnection:closeConnector,conn:pc,",85,0.3884288787841797,Beam
716,"public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}
","public boolean registerUser(String username,String word,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,word,uri);
  return true;
}
",41,4,"password:word,",8,0.05204771359761556,Beam
717,,,69,8,,230,2.1740360180536906,0
719,"public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){
  this.cipher=cipher;
  this.digest=digest;
  this.hLen=digest.getDigestSize();
  this.saltLength=saltLength;
  if (implicit) {
    trailer=TRAILER_IMPLICIT;
  }
 else {
    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());
    if (trailerObj != null) {
      trailer=trailerObj.intValue();
    }
 else {
      throw new IllegalArgumentException(""no valid trailer for digest"");
    }
  }
}
","public ISO9692d2PSSSigneding(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){
  this.cipher=cipher;
  this.digest=digest;
  this.hLen=digest.getDigestSize();
  this.saltLength=saltLength;
  if (implicit) {
    trailer=TRAILER_IMPLICIT;
  }
 else {
    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());
    if (trailerObj != null) {
      trailer=trailerObj.intValue();
    }
 else {
      throw new IllegalArgumentException(""no valid trailer for digest"");
    }
  }
}
",101,9,"ISO9796d2PSSSigner:ISO9692d2PSSSigneding,",104,0.8945261200269063,Beam
720,"public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}
","public String[] ShowProduct() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString(""MDSDialog.showVersion.cmd""),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString(""MDSDialog.showVersion.version.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.MDS.match""),MDSDialogProperties.getString(""MDSDialog.showVersion.Nexus.match"")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}
",188,9,"showVersion:ShowProduct,",10,0.04972552458445231,Beam
721,"public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}
","public void importWithChange(Change SourceShape){
  if (SourceShape.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(SourceShape.revision());
  }
  if (SourceShape.timestamp() != null) {
    Date date=SourceShape.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}
",101,4,"importFromChange:importWithChange,sourceChange:SourceShape,",284,2.1532819588979084,Beam
722,,,28,3,,267,1.583314029375712,0
723,,,76,4,,878,6.164358027776083,0
724,,,219,12,,1461,8.579332820574443,0
725,"public void addComposite(TransformTreeNode node){
  parts.add(node);
}
","public void addComposite(TransformTreeNode one){
  parts.add(one);
}
",16,3,"node:one,",10,0.048667375246683756,Beam
726,,,35,4,,116,0.736286477247874,0
727,,,456,11,,2285,16.86983771721522,0
728,"public static byte[] readDex(File file) throws IOException {
  return readDex(file.toPath());
}
","public static byte[] readBrew(File file) throws IOException {
  return readBrew(file.toPath());
}
",24,2,"readDex:readBrew,",35,0.1690446138381958,Beam
729,"@SuppressWarnings(""deprecation"") public Object readMatrixOld(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}
","@SuppressWarnings(""deprecation"") public Object readTransformOLD(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}
",92,6,"readMatrixOld:readTransformOLD,",42,0.20213815768559773,Beam
730,,,124,7,,759,5.788540796438853,0
731,,,13,2,,73,0.346864644686381,0
732,,,52,6,,624,2.807923611005147,0
733,"public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
","public Object apply(String source,int columnName,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,columnName,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}
",71,9,"lineNo:columnName,",38,0.22016877333323162,Beam
734,"public void addLast(StatementSequence statements){
  if (statements != null) {
    sequence.addAll(statements.sequence);
  }
}
","public void createFirst(StatementSequence Statments){
  if (Statments != null) {
    sequence.addAll(Statments.sequence);
  }
}
",26,3,"statements:Statments,addLast:createFirst,",102,0.5200614213943482,Beam
735,"private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}
","private static List<Vector2D> buildSquetrary(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}
",60,4,"buildQuadrilateral:buildSquetrary,",20,0.11585272153218587,Beam
736,"private static String padRight(String s,int minLength){
  return String.format(""%1$-"" + minLength + ""s"",s);
}
","private static String PadRight(String s,int minLength){
  return String.format(""%1$-"" + minLength + ""s"",s);
}
",27,3,"padRight:PadRight,",6,0.034867143630981444,Beam
737,,,80,7,,1049,5.920231159528097,0
738,,,51,5,,876,5.196269539992015,0
739,,,40,2,,282,1.7162285804748536,0
740,"static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
","static void Updatestyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + "".caretForeground""));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + "".caretAspectRatio"");
  if (ar instanceof Number) {
    c.putClientProperty(""caretAspectRatio"",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + "".margin"");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + "".caretBlinkRate"");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}
",394,16,"updateStyle:Updatestyle,",13,0.09709505637486776,Beam
741,"public void removeRequest(InterruptRequest interruptRequest){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interruptRequest);
  }
}
","public void releaseRequest(InterruptRequest interpretStream){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interpretStream);
  }
}
",22,3,"interruptRequest:interpretStream,removeRequest:releaseRequest,",78,0.34733322461446126,Beam
742,"public static Object convertToParameterValues(Object object){
  Collection<Object> collection;
  if (object instanceof Object[]) {
    collection=Arrays.asList((Object[])object);
  }
 else   if (object instanceof Collection) {
    collection=(Collection<Object>)object;
  }
 else {
    LOGGER.warn(""Unable to convert value, ignoring"");
    return new Object[]{};
  }
  List<Object> s=new LinkedList<Object>();
  for (  Object o : collection) {
    Object converted=convertToParameterValue(o);
    if (converted instanceof Object[]) {
      s.addAll(Arrays.asList((Object[])converted));
    }
 else {
      s.add(converted);
    }
  }
  return s.toArray(new Object[s.size()]);
}
","public static Object convertToParametersParameters(Object event){
  Collection<Object> collection;
  if (event instanceof Object[]) {
    collection=Arrays.asList((Object[])event);
  }
 else   if (event instanceof Collection) {
    collection=(Collection<Object>)event;
  }
 else {
    LOGGER.warn(""Unable to convert value, ignoring"");
    return new Object[]{};
  }
  List<Object> s=new LinkedList<Object>();
  for (  Object o : collection) {
    Object converted=convertToParameterValue(o);
    if (converted instanceof Object[]) {
      s.addAll(Arrays.asList((Object[])converted));
    }
 else {
      s.add(converted);
    }
  }
  return s.toArray(new Object[s.size()]);
}
",161,6,"convertToParameterValues:convertToParametersParameters,object:event,",67,0.3865675091743469,Beam
743,,,90,8,,297,1.5910653869311016,0
744,"public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}
","public void invalidateandUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}
",55,7,"invalidateAndUnmap:invalidateandUnmap,",4,0.02770128647486369,Beam
745,"public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
","public T iedNumbers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}
",34,2,"allowedUsers:iedNumbers,",12,0.05227101643880208,Beam
747,"private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}
","private double dev(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}
",46,4,"mean:dev,",49,0.24058317343393962,Beam
748,"public void updateView(){
  if (fInputElement != null && fParentComposite != null) {
    IndicatorViewState oldState=fStateMap.get(fInputElement);
    boolean reload=fFilesToReoad.contains(fInputElement);
    if (reload || oldState == null) {
      JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);
      if (jsonObject == null)       return;
      fFilesToReoad.remove(fInputElement);
      fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState);
      fStateMap.put(fInputElement,fState);
    }
 else {
      fState=oldState;
    }
    setPartName(fState.indicatorType);
    showPage(PAGE_VIEWER);
    fTreeViewer.setInput(fState.jsonObject);
    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());
  }
 else {
    setPartName(DEFAULT_PART_NAME);
  }
}
","public void fillPreview(){
  if (fInputElement != null && fParentComPOSites != null) {
    IndicatorViewState oldState=fStateMap.get(fInputElement);
    boolean reload=fFilesToReoad.contains(fInputElement);
    if (reload || oldState == null) {
      JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);
      if (jsonObject == null)       return;
      fFilesToReoad.remove(fInputElement);
      fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState);
      fStateMap.put(fInputElement,fState);
    }
 else {
      fState=oldState;
    }
    setPartName(fState.indicatorType);
    showPage(PAGE_VIEWER);
    fTreeViewer.setInput(fState.jsonObject);
    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());
  }
 else {
    setPartName(DEFAULT_PART_NAME);
  }
}
",152,10,"updateView:fillPreview,fParentComposite:fParentComPOSites,",25,0.1567440629005432,Beam
749,,,20,2,,235,1.5471014062563577,0
750,"public void addAll(OVector v){
  expandFor(size + v.size - 1,null);
  System.arraycopy(v.vector,0,vector,size - v.size,v.size);
}
","public void AddArray(OVector tv){
  expandFor(size + tv.size - 1,null);
  System.arraycopy(tv.vector,0,vector,size - tv.size,tv.size);
}
",45,4,"v:tv,addAll:AddArray,",55,0.3084421634674072,Beam
751,,,15,2,,73,0.33469974994659424,0
752,"public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}
","public static UiResult closeImage(URI uri){
  return closeImage(uri.toString());
}
",20,2,"openUrl:closeImage,",13,0.04658940633138021,Beam
753,,,46,2,,159,0.883989151318868,0
754,"public ClassAnnotator(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}
","public ClassAnNOTation(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}
",31,4,"ClassAnnotator:ClassAnNOTation,",9,0.04070215622584025,Beam
755,,,117,4,,189,1.4573948661486307,0
756,"public double norm(){
  double sum=0;
  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];
  return Math.sqrt(sum);
}
","public double scale(){
  double sum=0;
  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];
  return Math.sqrt(sum);
}
",48,4,"norm:scale,",4,0.0172775665918986,Beam
757,"public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){
  final FastFuture<T> f=new FastFuture<>();
  cf.thenAccept(null);
  cf.exceptionally(null);
  return f;
}
","public static <T>FastFuture<T> fromCompletimefuture(final CompletableFuture<T> cf){
  final FastFuture<T> f=new FastFuture<>();
  cf.thenAccept(null);
  cf.exceptionally(null);
  return f;
}
",51,3,"fromCompletableFuture:fromCompletimefuture,",12,0.05003163417180379,Beam
758,,,30,3,,403,2.1218772729237876,0
759,"public ProjectImporter(final File rootFolder){
  assertNotNull(""Root folder cannot be null."",rootFolder);
  assertTrue(""Root folder does not exist: "" + rootFolder,rootFolder.exists());
  assertTrue(""Root folder must be a folder. But was a file: "" + rootFolder,rootFolder.isDirectory());
  assertTrue(""Root folder directory content cannot be read: "" + rootFolder,rootFolder.canRead());
  assertTrue(""No files were found in the directory: "" + rootFolder,null != rootFolder.listFiles());
  this.rootFolder=rootFolder;
}
","public Projectimorer(final File rootFolder){
  assertNotNull(""Root folder cannot be null."",rootFolder);
  assertTrue(""Root folder does not exist: "" + rootFolder,rootFolder.exists());
  assertTrue(""Root folder must be a folder. But was a file: "" + rootFolder,rootFolder.isDirectory());
  assertTrue(""Root folder directory content cannot be read: "" + rootFolder,rootFolder.canRead());
  assertTrue(""No files were found in the directory: "" + rootFolder,null != rootFolder.listFiles());
  this.rootFolder=rootFolder;
}
",76,2,"ProjectImporter:Projectimorer,",47,0.26743706862131755,Beam
761,,,89,5,,485,2.9251877427101136,0
762,"@Deprecated public static NetworkParameters testNet(){
  return TestNet3Params.get();
}
","@Deprecated public static NetworkParameters testNetwork(){
  return TestNet3Params.get();
}
",17,1,"testNet:testNetwork,",4,0.01658618450164795,Beam
763,"public boolean handleFile(File file){
  if (DEBUG) {
    logger.fine(""searching finds: "" + file.getAbsolutePath());
  }
  filenames.add(file);
  return true;
}
","public boolean handleFiles(File page){
  if (DEBUG) {
    logger.fine(""searching finds: "" + page.getAbsolutePath());
  }
  filenames.add(page);
  return true;
}
",38,5,"file:page,handleFile:handleFiles,",53,0.20836958487828572,Beam
764,"public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}
","public boolean isFromWrite(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isFromWrite()) {
      return true;
    }
  }
  return false;
}
",54,4,"isToRead:isFromWrite,",7,0.03169138828913371,Beam
765,"public void record(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
","public void create(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e(""ScreenshotImpl"",""Exception closing viewHierarchyDump"",e);
      }
    }
  }
}
",107,6,"record:create,",5,0.034148887793223066,Beam
766,,,166,7,,197,1.293036150932312,0
767,,,34,3,,600,4.884525386492411,0
768,"public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
","public static String getDatetime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}
",49,6,"formatDateTime:getDatetime,",51,0.29235972960789997,Beam
769,"public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}
","public void moveItems(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}
",42,3,"deleteItem:moveItems,",13,0.06029007832209269,Beam
770,,,59,5,,461,3.4489513794581095,0
771,,,28,2,,64,0.2905582149823507,0
772,,,95,7,,586,3.2064611514409385,0
773,"public static Number asNumber(String value,Supplier<Number> defaultValueProvider){
  if (value != null) {
    try {
      return Short.valueOf(value);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(value);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(value);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(value);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(value);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(value);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(value);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultValueProvider != null ? defaultValueProvider.get() : null;
}
","public static Number asDate(String resource,Supplier<Number> defaultValueProvider){
  if (resource != null) {
    try {
      return Short.valueOf(resource);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(resource);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(resource);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(resource);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(resource);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(resource);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(resource);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultValueProvider != null ? defaultValueProvider.get() : null;
}
",161,3,"value:resource,asNumber:asDate,",186,1.0183074792226157,Beam
774,"private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}
","private static void sliceone(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sliceone(x,off,s);
  if ((s=d - c) > 1)   sliceone(x,n - s,s);
}
",437,15,"sort1:sliceone,",77,0.5917177081108094,Beam
775,"protected void engineUpdate(byte b) throws SignatureException {
  messageDigest.update(b);
  needsReset=true;
}
","protected void engineUpdate(byte text) throws SignatureException {
  messageDigest.update(text);
  needsReset=true;
}
",22,4,"b:text,",16,0.07455447514851889,Beam
776,"public Collection<Node> matchingScenariosAndExamples(final Feature feature){
  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}
","public Collection<Node> matchingScenariosAndExamples(final Feature rule){
  final List<ScenarioDefinition> allScenarios=rule.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(rule.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}
",127,5,"feature:rule,",3,0.04553223848342895,Beam
777,,,17,3,,129,0.8421297947565715,0
778,"public static boolean hasSuppressed(@Nullable Throwable t,@Nullable Class<? extends Throwable> cls){
  if (t == null || cls == null)   return false;
  if (t.getSuppressed() != null) {
    for (    Throwable th : t.getSuppressed()) {
      if (cls.isAssignableFrom(th.getClass()))       return true;
      if (hasSuppressed(th,cls))       return true;
    }
  }
  return false;
}
","public static boolean hasCompressed(@Nullable Throwable o,@Nullable Class<? extends Throwable> cles){
  if (o == null || cles == null)   return false;
  if (o.getSuppressed() != null) {
    for (    Throwable th : o.getSuppressed()) {
      if (cles.isAssignableFrom(th.getClass()))       return true;
      if (hasCompressed(th,cles))       return true;
    }
  }
  return false;
}
",91,4,"hasSuppressed:hasCompressed,cls:cles,t:o,",419,3.2926042079925537,Beam
779,"public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}
","public void readProperty(final String id,final float value) throws java.io.IOException {
  readProperty(id,Float.toString(value));
}
",32,3,"writeField:readProperty,name:id,",86,0.33089706103007,Beam
780,"public ScriptBuilder data(byte[] data){
  if (data.length == 0)   return smallNum(0);
 else   return data(chunks.size(),data);
}
","public ScriptBuilder update(byte[] update){
  if (update.length == 0)   return smallNum(0);
 else   return update(chunks.size(),update);
}
",38,2,"data:update,",14,0.06902748743693034,Beam
781,,,12,2,,229,1.1842051068941752,0
782,"HttpRequestWrapper(HttpServletRequest request){
  super(request);
}
","HttpResponseWrapper(HttpServletRequest event){
  super(event);
}
",12,2,"HttpRequestWrapper:HttpResponseWrapper,request:event,",88,0.394011127948761,Beam
783,"public MultiplexManager(DataStore... dataStores){
  this.dataStores=Arrays.asList(dataStores);
}
","public MultipleuxHandler(DataStore... dataStores){
  this.dataStores=Arrays.asList(dataStores);
}
",20,2,"MultiplexManager:MultipleuxHandler,",43,0.22176058292388917,Beam
784,"public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
","public static LowMemoryWatcher bind(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}
",19,2,"register:bind,",34,0.21788815259933472,Beam
785,"@Override @Timed public void deleteAssignment(Experiment experiment,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){
  deleteUserFromLookUp(experiment.getID(),userID,context);
  boolean countUp=false;
  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount));
  deleteAssignmentOld(experiment.getID(),userID,context,appName,currentAssignment.getBucketLabel());
  removeIndexUserToExperiment(userID,experiment.getID(),context,appName);
  removeIndexUserToBucket(userID,experiment.getID(),context,currentAssignment.getBucketLabel());
  removeIndexExperimentsToUser(userID,experiment.getID(),context,appName);
}
","@Override @Timed public void deleteAttigning(Experiment compliments,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){
  deleteUserFromLookUp(compliments.getID(),userID,context);
  boolean countUp=false;
  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,compliments,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount));
  deleteAssignmentOld(compliments.getID(),userID,context,appName,currentAssignment.getBucketLabel());
  removeIndexUserToExperiment(userID,compliments.getID(),context,appName);
  removeIndexUserToBucket(userID,compliments.getID(),context,currentAssignment.getBucketLabel());
  removeIndexExperimentsToUser(userID,compliments.getID(),context,appName);
}
",146,14,"deleteAssignment:deleteAttigning,experiment:compliments,",181,1.5545620401700337,Beam
786,,,77,3,,373,2.392851769924164,0
787,"public UniformDistribution estimate(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}
","public UniformDistribution estimation(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}
",73,5,"estimate:estimation,",65,0.42498223384221395,Beam
791,,,93,4,,442,2.4974387526512145,0
792,"@Override public void openElement(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
","@Override public void OpenOperation(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}
",44,5,"openElement:OpenOperation,",16,0.06370977958043417,Beam
793,"public static List<String> splitPath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
","public static List<String> parsepath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}
",68,4,"splitPath:parsepath,",40,0.20736555258433023,Beam
794,,,105,7,,233,1.4191529790560404,0
796,,,93,5,,228,1.5221563895543417,0
797,,,29,2,,259,1.6536850253740947,0
798,"public void schedule(TimerTask task,long delay){
  if (delay < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(task,System.currentTimeMillis() + delay,0);
}
","public void taskpatch(TimerTask tx,long repeat){
  if (repeat < 0)   throw new IllegalArgumentException(""Negative delay."");
  sched(tx,System.currentTimeMillis() + repeat,0);
}
",40,3,"schedule:taskpatch,task:tx,delay:repeat,",457,2.979140913486481,Beam
799,,,73,6,,730,5.470101193586985,0
800,,,16,3,,207,1.0910630226135254,0
801,"void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
","void updateAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;
",17,3,"saveAsync:updateAsync,",17,0.060078990459442136,Beam
802,"private void checkWidth(final int[] rect){
  final int x1=rect[0];
  final int y2=rect[1];
  final int y1=y2 + rect[3];
  final int x2=x1 + rect[2];
  if (x1 < pageX1) {
    pageX1=x1;
  }
  if (x2 > pageX2) {
    pageX2=x2;
  }
  if (y1 > pageY1) {
    pageY1=y1;
  }
  if (y2 < pageY2) {
    pageY2=y2;
  }
}
","private void checkWidth(final int[] rot){
  final int x1=rot[0];
  final int y2=rot[1];
  final int y1=y2 + rot[3];
  final int x2=x1 + rot[2];
  if (x1 < pageX1) {
    pageX1=x1;
  }
  if (x2 > pageX2) {
    pageX2=x2;
  }
  if (y1 > pageY1) {
    pageY1=y1;
  }
  if (y2 < pageY2) {
    pageY2=y2;
  }
}
",100,10,"rect:rot,",16,0.11375940243403117,Beam
803,,,27,2,,250,1.2162463744481404,0
804,"private void paintForegroundDisabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(disabledColor);
  g.fill(s);
}
","private void paintForegrounddisground(Graphics2D pg,int width,int height){
  Shape s=decodeArrowPath(width,height);
  pg.setPaint(disabledColor);
  pg.fill(s);
}
",39,6,"g:pg,paintForegroundDisabled:paintForegrounddisground,",165,0.9032352566719055,Beam
805,"public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
","public static void registerTransportVMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + "">"");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + "">"",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + "">"");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}
",220,10,"registerTransportMBean:registerTransportVMBean,",5,0.0493369460105896,Beam
806,,,19,4,,250,1.2302466988563538,0
807,,,29,5,,472,2.7168304522832236,0
808,"protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
","protected final void produce(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}
",71,5,"merge:produce,",58,0.27918757597605387,Beam
809,"@Override public boolean isEnabled(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.isEnabled();
  }
 else {
    if (slider != null) {
      return slider.isEnabled();
    }
  }
  return false;
}
","@Override public boolean beActive(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.beActive();
  }
 else {
    if (slider != null) {
      return slider.beActive();
    }
  }
  return false;
}
",52,3,"isEnabled:beActive,",4,0.029535162448883056,Beam
810,,,18,3,,185,1.009697683652242,0
811,,,30,3,,72,0.389617911974589,0
812,,,17,2,,59,0.30371005535125734,0
813,"@Override public void increment(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}
","@Override public void increrate(double ord,short v){
  int bin=getBinNr(ord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=v;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=v;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=v;
  }
}
",237,9,"increment:increrate,coord:ord,val:v,",490,3.217860194047292,Beam
815,"protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}
","protected void smartInsertAfterBracket(IDocument message,DocumentCommand command){
  if (command.offset == -1 || message.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == message.getLength() ? command.offset - 1 : command.offset);
    int line=message.getLineOfOffset(p);
    int start=message.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(message,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(message,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer moveText=new StringBuffer(getIndentOfLine(message,indLine));
        moveText.append(message.get(whiteend,command.offset - whiteend));
        moveText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=moveText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}
",215,10,"document:message,replaceText:moveText,",405,3.090660353501638,Beam
816,"public void writeLong(long value) throws IOException {
  checkWritePrimitiveTypes();
  primitiveTypes.writeLong(value);
}
","public void WriteInt(long value) throws IOException {
  checkWritePrimitiveTypes();
  primitiveTypes.WriteInt(value);
}
",22,3,"writeLong:WriteInt,",14,0.055396815141042076,Beam
817,"public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}
","public void appendColl(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}
",105,6,"addRoll:appendColl,",10,0.045626044273376465,Beam
818,,,47,5,,639,2.804473841190338,0
819,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.equals(size.prototype);
}
","@Override public boolean Equalls(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.Equalls(size.prototype);
}
",54,4,"equals:Equalls,",16,0.09244515498479207,Beam
820,,,26,2,,221,0.8401264786720276,0
821,,,41,4,,271,1.6727488001187643,0
822,"public static long objectFieldOffset(Field field){
  return UNSAFE.objectFieldOffset(field);
}
","public static long objectShortPosition(Field layer){
  return UNSAFE.objectShortPosition(layer);
}
",18,2,"field:layer,objectFieldOffset:objectShortPosition,",91,0.5553774118423462,Beam
824,"public void removeAddress(AddressEntity address){
  addresses.remove(address);
}
","public void updateContact(AddressEntity address){
  addresses.remove(address);
}
",16,3,"removeAddress:updateContact,",40,0.1513967474301656,Beam
825,"private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}
","private boolean advanceAiDownWith(TreeSet<AreaPanelInfo> sortedAiTree,AreaPanelInfo base,int time){
  AreaPanel ap=base.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == base.currTtId)   return false;
  sortedAiTree.remove(base);
  if (base.setTt(tt,Integer.MAX_VALUE))   sortedAiTree.add(base);
  return true;
}
",95,7,"advanceApiUpTo:advanceAiDownWith,api:base,sortedApiTree:sortedAiTree,",565,3.8640589555104574,Beam
826,"public void readData(DataInput din) throws IOException {
  din.readShort();
  count=din.readUnsignedShort();
  registers=new InputRegister[count];
  for (int i=0; i < count; i++) {
    registers[i]=new SimpleInputRegister(din.readShort());
  }
}
","public void sendData(DataInput kin) throws IOException {
  kin.readShort();
  count=kin.readUnsignedShort();
  registers=new InputRegister[count];
  for (int i=0; i < count; i++) {
    registers[i]=new SimpleInputRegister(kin.readShort());
  }
}
",64,5,"readData:sendData,din:kin,",56,0.2799894690513611,Beam
827,,,48,5,,755,3.648547359307607,0
828,"public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}
","public void w(ByteBuffer input) throws IOException {
  input.position(0);
  if (mFileChannel.size() + input.capacity() < mMaxSize) {
    while (input.hasRemaining()) {
      mFileChannel.w(input);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=input.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.w(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.w(next);
    }
    updateWaveFileSize();
  }
}
",186,9,"write:w,buffer:input,",168,1.0393796722094217,Beam
829,"private boolean rContainsRMInstruction(ProgramBlock pb,String varName){
  if (pb instanceof WhileProgramBlock) {
    WhileProgramBlock tmp=(WhileProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof IfProgramBlock) {
    IfProgramBlock tmp=(IfProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true;
    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof ForProgramBlock) {
    ForProgramBlock tmp=(ForProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : pb.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains(""rmfilevar"" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains(""rmvar"" + Lop.OPERAND_DELIMITOR + varName)) {
        return true;
      }
    }
  }
  return false;
}
","private boolean rContainsRMInterression(ProgramBlock fc,String varName){
  if (fc instanceof WhileProgramBlock) {
    WhileProgramBlock tmp=(WhileProgramBlock)fc;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInterression(c,varName))     return true;
  }
 else   if (fc instanceof IfProgramBlock) {
    IfProgramBlock tmp=(IfProgramBlock)fc;
    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInterression(c,varName))     return true;
    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInterression(c,varName))     return true;
  }
 else   if (fc instanceof ForProgramBlock) {
    ForProgramBlock tmp=(ForProgramBlock)fc;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInterression(c,varName))     return true;
  }
 else   if (fc instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : fc.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains(""rmfilevar"" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains(""rmvar"" + Lop.OPERAND_DELIMITOR + varName)) {
        return true;
      }
    }
  }
  return false;
}
",224,7,"pb:fc,rContainsRMInstruction:rContainsRMInterression,",209,1.9688151478767395,Beam
830,,,69,4,,249,1.4058775862058004,0
831,,,307,14,,1265,9.370219238599141,0
832,"@Override public void close() throws IOException {
  input.close();
}
","@Override public void sync() throws IOException {
  input.sync();
}
",17,2,"close:sync,",21,0.08468346198399862,Beam
833,"public Set<String> find(T object){
  if (!locations.containsKey(object)) {
    locations.put(object,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(object));
}
","public Set<String> replace(T o){
  if (!locations.containsKey(o)) {
    locations.put(o,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(o));
}
",51,3,"object:o,find:replace,",74,0.36905872424443564,Beam
835,,,17,3,,106,0.45124228795369464,0
836,"public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}
","public static TDoubleDoubleHashMap createCumulativeCombory(TDoubleDoubleHashMap hashram){
  double[] keys=hashram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=hashram.get(key);
    sum+=val;
    hashram.put(key,sum);
  }
  return hashram;
}
",68,6,"histogram:hashram,createCumulativeHistogram:createCumulativeCombory,",98,0.6558719356854756,Beam
837,"<T>List<T> concatValues(final T[]... data){
  final List<T> rv=new ArrayList<>();
  for (  T[] values : data) {
    rv.addAll(Arrays.asList(values));
  }
  return rv;
}
","<T>List<T> concatValues(final T[]... times){
  final List<T> rv=new ArrayList<>();
  for (  T[] values : times) {
    rv.addAll(Arrays.asList(values));
  }
  return rv;
}
",58,4,"data:times,",29,0.15270496606826783,Beam
838,"@Override public boolean hasNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}
","@Override public boolean addNext(){
  log.log(Level.FINE,""hasNext()"");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,""hasNext(): {0}"",result);
  return result;
}
",45,4,"hasNext:addNext,",6,0.02779941956202189,Beam
839,,,555,11,,1171,9.395784445603688,0
840,,,33,1,,63,0.3631524682044983,0
841,,,35,4,,281,1.4647448380788168,0
843,"public final double distance(){
  return Math.sqrt(distance_square());
}
","public final double div(){
  return Math.sqrt(distance_square());
}
",18,1,"distance:div,",26,0.1524413824081421,Beam
844,"@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}
","@Deprecated public void append(final String key,final String value){
  List<String> l=map.get(key);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(key,l);
  }
}
",65,5,"name:key,",3,0.028885459899902342,Beam
845,,,68,7,,183,0.9878583629926045,0
846,"public double distance(Point2D pt){
  final double x_distance=(pt.getX() - x) * (pt.getX() - x);
  final double y_distance=(pt.getY() - y) * (pt.getY() - y);
  return Math.sqrt(x_distance + y_distance);
}
","public double draw(Point2D pt){
  final double x_distance=(pt.getX() - x) * (pt.getX() - x);
  final double y_distance=(pt.getY() - y) * (pt.getY() - y);
  return Math.sqrt(x_distance + y_distance);
}
",67,6,"distance:draw,",27,0.13835281531016033,Beam
847,"final void putByte(int offset,byte value){
  unsafe.putByte(offset + address,value);
}
","final void readBit(int number,byte value){
  unsafe.readBit(number + address,value);
}
",23,5,"offset:number,putByte:readBit,",138,0.6152558048566182,Beam
848,"private void paintForegroundEnabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(enabledColor);
  g.fill(s);
}
","private void paintForementComponent(Graphics2D w,int width,int height){
  Shape s=decodeArrowPath(width,height);
  w.setPaint(enabledColor);
  w.fill(s);
}
",39,6,"paintForegroundEnabled:paintForementComponent,g:w,",120,0.6190170804659526,Beam
849,"private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}
","private void paintScreen(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}
",215,10,"paintPreview:paintScreen,",67,0.3350954294204712,Beam
850,,,102,9,,227,0.9215905984242757,0
851,,,50,2,,56,0.2783623019854228,0
852,,,39,3,,149,0.9155704061190287,0
853,,,70,8,,2843,30.505076265335084,0
854,"public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}
","public static String[] splitWithoutEscaped(String tr,char separatorChar,boolean retainEmpty){
  int len=tr.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (tr.charAt(i) == '\\\\') {
      match=true;
      i+=2;
    }
 else     if (tr.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(tr.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(tr.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}
",193,4,"str:tr,",3,0.07063308159510294,Beam
855,"private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
","private void cacheVariable(String attrId,byte[][] values){
  String cacheKey=name + ""|"" + attrId;
  valueCache.put(cacheKey,values);
}
",34,6,"cacheAttribute:cacheVariable,",6,0.037221475442250566,Beam
856,"@Override public void start(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.start();
  }
}
","@Override public void create(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),""MockSystemConsumer-"" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.create();
  }
}
",111,8,"start:create,",18,0.12316133181254069,Beam
857,,,98,3,,157,1.1705121080080667,0
858,,,197,15,,1438,14.673740077018739,0
859,"public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}
","public static byte[] base64decode(String wired){
  if (null == wired)   return null;
  byte[] src=wired.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException(""Invalid character at or around position "" + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException(""No linefeed found at position "" + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException(""Invalid character at or around position "" + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}
",515,16,"coded:wired,",3,0.07357985973358154,Beam
860,,,25,2,,181,1.1568509141604106,0
861,"public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
","public void requestAfterExplanations(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}
",97,6,"requestAfterExplanation:requestAfterExplanations,",4,0.03253829081853231,Beam
862,"@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}
","@Override public int parse(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.parse(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.parse(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}
",151,7,"read:parse,",58,0.4328912258148193,Beam
863,"public void toFront(final WorkflowAnnotation anno){
  if (anno == null) {
    throw new IllegalArgumentException(""anno must not be null!"");
  }
synchronized (lock) {
    if (annotationsDrawOrder.remove(anno)) {
      annotationsDrawOrder.add(anno);
    }
    if (annotationsEventOrder.remove(anno)) {
      annotationsEventOrder.add(0,anno);
    }
  }
}
","public void ToFront(final WorkflowAnnotation anor){
  if (anor == null) {
    throw new IllegalArgumentException(""anno must not be null!"");
  }
synchronized (lock) {
    if (annotationsDrawOrder.remove(anor)) {
      annotationsDrawOrder.add(anor);
    }
    if (annotationsEventOrder.remove(anor)) {
      annotationsEventOrder.add(0,anor);
    }
  }
}
",69,5,"toFront:ToFront,anno:anor,",298,1.9616137703259786,Beam
864,"public void addCondition(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}
","public void insertContent(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}
",25,4,"addCondition:insertContent,",39,0.16012718677520751,Beam
865,,,21,2,,173,1.3108970959981283,0
867,"public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}
","public int CompCompareAll(NamedMediaType parent){
  return _name.CompCompareAll(parent._name);
}
",19,3,"compareTo:CompCompareAll,other:parent,",101,0.5444228728612264,Beam
868,"public Builder untilDate(Date date){
  untilDate=QUERY_DATE.format(date);
  return this;
}
","public Builder untildate(Date date){
  untildate=QUERY_DATE.format(date);
  return this;
}
",21,2,"untilDate:untildate,",49,0.24157975514729818,Beam
869,"public String prepOperand(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(label);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
","public String createOperant(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(label);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}
",88,6,"prepOperand:createOperant,",38,0.33456202745437624,Beam
870,"private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}
","private void ensureFileClose(){
  if (savingDisabled) {
    Log.e(TAG,""Saving disabled but tried to ensureFileOpen"");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken(""Failed to open track save file"",e);
  }
}
",154,10,"ensureFileOpen:ensureFileClose,",4,0.03328638871510824,Beam
871,,,178,9,,304,2.474847384293874,0
873,"public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}
","public boolean createClass(PdxWriter writer,Object inst){
  if (isRelevant(inst.getClass())) {
    createClass(writer,inst,getClassInfo(inst.getClass()));
    return true;
  }
  return false;
}
",47,3,"obj:inst,writeData:createClass,",137,0.898456072807312,Beam
874,,,149,5,,157,1.2826458851496378,0
875,"public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getInt(index);
  }
  return value;
}
","public static int getDec(final JSONArray httpObject,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return httpObject.getInt(index);
  }
  if (notNull && httpObject.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!httpObject.isNull(index)) {
    value=httpObject.getInt(index);
  }
  return value;
}
",99,6,"readInt:getDec,jsonArray:httpObject,",183,1.0769584019978842,Beam
876,,,91,5,,571,7.924901191393534,0
877,"public static String toUpperCase(String src){
  if (src == null) {
    return null;
  }
 else {
    return src.toUpperCase();
  }
}
","public static String toLowerhenC(String inst){
  if (inst == null) {
    return null;
  }
 else {
    return inst.toLowerhenC();
  }
}
",31,2,"toUpperCase:toLowerhenC,src:inst,",109,0.5465277791023254,Beam
878,"public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""""))   return;
  readConfig(new FileReader(filename));
}
","public void addLog(String username) throws FileNotFoundException {
  if (username == null || username.equals(""""))   return;
  addLog(new FileReader(username));
}
",35,2,"readConfig:addLog,filename:username,",111,0.45593568483988445,Beam
879,"public void sort(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.sort(values,0,size);
    sorted=true;
  }
}
","public void filter(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.filter(values,0,size);
    sorted=true;
  }
}
",33,4,"sort:filter,",8,0.041356424490610756,Beam
880,,,103,4,,307,2.2316124200820924,0
881,"public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
","public void appendPath(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}
",62,4,"ascendTree:appendPath,",4,0.02772582769393921,Beam
882,,,46,4,,135,0.8019396583239238,0
885,"@Override public boolean isArmed(){
  return other.isArmed();
}
","@Override public boolean isMerMed(){
  return other.isMerMed();
}
",16,2,"isArmed:isMerMed,",20,0.10444508790969849,Beam
886,"public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
","public static void issumetrue(BooleanSupplier assignmentSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assignmentSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}
",38,3,"assumptionSupplier:assignmentSupplier,assumeTrue:issumetrue,",325,2.201485741138458,Beam
887,"private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + ip);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + ip,nfe);
  }
  return parts.length;
}
","private static int ipAsLong(String image,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=image.split(""\\\\."");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException(""Malformed IP specification "" + image);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException(""Malformed IP specification "" + image);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException(""Malformed IP specification "" + image,nfe);
  }
  return parts.length;
}
",157,8,"ipToBytes:ipAsLong,ip:image,",497,3.5792264501253763,Beam
888,"protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}
","protected int request(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.request(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}
",75,8,"read:request,",26,0.13682122627894083,Beam
889,"protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
","protected void preparing(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,""Unknown Parameter: "" + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}
",76,6,"prepare:preparing,",3,0.018923501173655193,Beam
890,"public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}
","public int next(long fileAddress,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileAddress);
  return _file.next(buffer,offset,length);
}
",41,6,"read:next,fileOffset:fileAddress,",211,1.0926278511683145,Beam
891,"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mBitmapShader == null)   return;
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDurationText=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);
  canvas.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    canvas.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    canvas.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    canvas.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  canvas.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  canvas.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  canvas.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}
","@Override protected void onDraw(Canvas canal){
  super.onDraw(canal);
  if (mBitmapShader == null)   return;
  canal.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  canal.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDurationText=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);
  canal.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    canal.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    canal.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    canal.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  canal.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  canal.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  canal.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}
",372,23,"canvas:canal,",5,0.12686766386032106,Beam
892,,,177,9,,1113,7.5429450949033106,0
893,"public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){
  registerOperators(name,operatorsXML,classLoader,null);
}
","public static void updateGenerands(String name,InputStream operationsXSL,ClassLoader classLoader){
  updateGenerands(name,operationsXSL,classLoader,null);
}
",27,4,"registerOperators:updateGenerands,operatorsXML:operationsXSL,",168,1.1455386439959208,Beam
894,"public void save() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
","public void store() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + "".default""),true);
}
",58,3,"save:store,",3,0.018097384770711263,Beam
895,"public void close() throws IOException {
  if (!closed) {
    try {
      finish();
    }
  finally {
      out.close();
      closed=true;
    }
  }
}
","public void destroy() throws IOException {
  if (!closed) {
    try {
      finish();
    }
  finally {
      out.destroy();
      closed=true;
    }
  }
}
",36,3,"close:destroy,",4,0.025416545073191323,Beam
896,"public StartListener(Object resource){
  _resource=resource;
}
","public ListListener(Object document){
  _resource=document;
}
",12,3,"StartListener:ListListener,resource:document,",72,0.30670172373453775,Beam
897,"private void loadSubmissions(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}
","private void loadSecmits(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}
",99,6,"loadSubmissions:loadSecmits,",9,0.04512127637863159,Beam
899,,,80,5,,150,0.8102494955062867,0
901,,,51,5,,298,1.5376174489657084,0
902,"private void assertDescribedResource(final BigdataValue describedResource,final IDescribeCache describeCache,final TestHelper h){
  final Graph actualGraph=describeCache.lookup(describedResource.getIV());
  assertNotNull(actualGraph);
  final Set<Statement> expectedGraph=getExpectedDescription(describedResource,h);
  h.compareGraphs(new HashSet<Statement>(actualGraph),expectedGraph);
  for (  Statement stmt : actualGraph) {
    assertTrue(stmt instanceof BigdataStatement);
    final BigdataStatement st=(BigdataStatement)stmt;
    assertNotNull(st.s());
    assertNotNull(st.p());
    assertNotNull(st.o());
    if (st.getContext() != null) {
      assertNotNull(st.c());
    }
  }
}
","private void assertDescribedResource(final BigdataValue documentedFile,final IDescribeCache describingBuffer,final TestHelper h){
  final Graph actualGraph=describingBuffer.lookup(documentedFile.getIV());
  assertNotNull(actualGraph);
  final Set<Statement> expectedGraph=getExpectedDescription(documentedFile,h);
  h.compareGraphs(new HashSet<Statement>(actualGraph),expectedGraph);
  for (  Statement stmt : actualGraph) {
    assertTrue(stmt instanceof BigdataStatement);
    final BigdataStatement st=(BigdataStatement)stmt;
    assertNotNull(st.s());
    assertNotNull(st.p());
    assertNotNull(st.o());
    if (st.getContext() != null) {
      assertNotNull(st.c());
    }
  }
}
",141,8,"describeCache:describingBuffer,describedResource:documentedFile,",274,2.3753793915112813,Beam
903,"void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
","void generateWhile(Tree.WhileStatement which){
  Tree.WhileClause whileClause=which.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),""while"",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}
",61,5,"that:which,",6,0.034535972277323405,Beam
904,"public static InputStream tryGzipInput(InputStream in) throws IOException {
  if (!in.markSupported()) {
    PushbackInputStream pb=new PushbackInputStream(in,16);
    in=pb;
    byte[] magic={0,0};
    pb.read(magic);
    pb.unread(magic);
    if (magic[0] == 31 && magic[1] == -117) {
      return new GZIPInputStream(pb);
    }
    return in;
  }
  in.mark(16);
  boolean isgzip=(in.read() == 31 && in.read() == -117);
  in.reset();
  if (isgzip) {
    in=new GZIPInputStream(in);
  }
  return in;
}
","public static InputStream newGzipIn(InputStream in) throws IOException {
  if (!in.markSupported()) {
    PushbackInputStream pb=new PushbackInputStream(in,16);
    in=pb;
    byte[] magic={0,0};
    pb.read(magic);
    pb.unread(magic);
    if (magic[0] == 31 && magic[1] == -117) {
      return new GZIPInputStream(pb);
    }
    return in;
  }
  in.mark(16);
  boolean isgzip=(in.read() == 31 && in.read() == -117);
  in.reset();
  if (isgzip) {
    in=new GZIPInputStream(in);
  }
  return in;
}
",144,5,"tryGzipInput:newGzipIn,",35,0.25253826379776,Beam
905,"public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}
","public static double toDecinates(double z){
  if (Double.isInfinite(z) || z == 0.0) {
    return z;
  }
  final double Facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(z);
  double xb=z - xa;
  return xb * factb + xb * Facta + xa * factb + xa * Facta;
}
",72,6,"x:z,toDegrees:toDecinates,facta:Facta,",284,2.164276425043742,Beam
906,"public void select_all(){
  Arrays.fill(sel_array,true);
}
","public void selectalleverything(){
  Arrays.fill(sel_arr,true);
}
",16,2,"select_all:selectalleverything,sel_array:sel_arr,",11,0.05255572001139323,Beam
908,,,260,16,,773,4.85324786901474,0
909,,,15,2,,58,0.3788145462671916,0
910,"protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}
","protected String scanWith(final String target,String start){
  return scanWith(target,null,start);
}
",23,3,"searchFor:scanWith,",42,0.25288551251093544,Beam
911,,,37,4,,177,0.9029102444648742,0
912,"private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}
","private long conver2MB(int MegaInt){
  long bytes=MegaInt;
  bytes=bytes * 1024 * 1024;
  return bytes;
}
",25,3,"megaBytes:MegaInt,convertToBytes:conver2MB,",66,0.26615042289098106,Beam
913,,,211,9,,292,2.0384810169537864,0
914,,,99,5,,168,0.9879556099573771,0
915,"public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
","public void build(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}
",62,6,"init:build,",5,0.03914041519165039,Beam
916,"public void close() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}
","public void complete() throws IOException {
  try {
    Debug.message(""binaryfile"",""StreamInputReader.close()"");
    if (Debug.debugging(""connection_problems"")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.complete();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}
",68,3,"close:complete,",13,0.0742254376411438,Beam
917,"public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}
","public static String Morpa(String text,boolean tags){
  if (text.isEmpty()) {
    return """";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha Morpa=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append("" "");
      }
      result.append(Morpa.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}
",134,7,"morpha:Morpa,",22,0.1221282680829366,Beam
918,"private void extractWeightValues(List<Synapse> synapses){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}
","private void extractWeightPoints(List<Synapse> synapses){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}
",151,7,"extractWeightValues:extractWeightPoints,",3,0.023867722352345785,Beam
919,,,78,2,,201,1.2420080741246542,0
920,,,26,3,,219,1.2905196746190388,0
921,"@Override public Iterator<Profile> iterator(){
  return profiles.iterator();
}
","@Override public Iterator<Profile> starter(){
  return profiles.starter();
}
",19,2,"iterator:starter,",7,0.037789106369018555,Beam
922,"String parse(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
","String parse(String layoutString,int layoutConstant){
  return layoutString.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}
",24,3,"cellStr:layoutString,",48,0.34973774751027426,Beam
923,"protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}
","protected void doStruct(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}
",88,7,"doFunction:doStruct,",26,0.1523660182952881,Beam
925,"protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}
","protected int __offset(int vstable_off){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vstable_off < bb.getShort(vtable) ? bb.getShort(vtable + vstable_off) : 0;
}
",42,5,"vtable_offset:vstable_off,",29,0.18829885721206666,Beam
926,"public void test_nonEmptyJournal() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult snapshotResult=f.get();
        final File snapshotFile=snapshotResult.getFile();
        try {
          final Journal tmp=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}
","public void test_nonEmptyBuffer() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult SnapactionResponse=f.get();
        final File snapshotFile=SnapactionResponse.getFile();
        try {
          final Journal tmp=openSnapshot(SnapactionResponse);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info(""Ignoring expected exception: "" + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}
",217,10,"test_nonEmptyJournal:test_nonEmptyBuffer,snapshotResult:SnapactionResponse,",203,1.5320342342058817,Beam
927,"public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}
","public IElementType creatureComment(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}
",194,1,"captureString:creatureComment,",14,0.08471647500991822,Beam
928,"private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
","private List<NameValuePair> buildIPTParameters(Ipt op,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (op != null && organisationKey != null) {
    data.add(new BasicNameValuePair(""organisationKey"",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair(""name"",StringUtils.trimToEmpty(op.getName())));
    data.add(new BasicNameValuePair(""description"",StringUtils.trimToEmpty(op.getDescription())));
    data.add(new BasicNameValuePair(""primaryContactType"",StringUtils.trimToEmpty(op.getPrimaryContactType())));
    data.add(new BasicNameValuePair(""primaryContactName"",StringUtils.trimToEmpty(op.getPrimaryContactName())));
    data.add(new BasicNameValuePair(""primaryContactEmail"",StringUtils.trimToEmpty(op.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair(""serviceTypes"",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair(""serviceURLs"",getRssFeedURL()));
  }
 else {
    log.debug(""One or both of IPT and Organisation key were null. Params needed for ws will be empty"");
  }
  return data;
}
",210,6,"ipt:op,",62,0.4560677528381348,Beam
929,,,200,15,,581,5.93136111497879,0
930,,,450,19,,1271,15.032886989911397,0
931,,,114,8,,778,5.550366747379303,0
932,,,54,3,,724,4.029693516095479,0
933,,,41,5,,1669,9.683801519870759,0
934,"private synchronized boolean _restart() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
","private synchronized boolean _reART() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}
",35,2,"_restart:_reART,",10,0.0435375968615214,Beam
935,"public static void runFinalization(){
  RUNTIME.runFinalization();
}
","public static void runFinalification(){
  RUNTIME.runFinalification();
}
",14,1,"runFinalization:runFinalification,",3,0.020432571570078533,Beam
936,"public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}
","public void update(SSOToken token,String objName,ModificationItem[] modules) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (modules == null)|| (modules.length == 0)) {
    throw new IllegalArgumentException(""SMSFlatFileObject.modify: "" + ""One or more arguments is null or empty"");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg=""SMSFlatFileObject.modify: object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg=""SMSFlatFileObject.modify: Attributes file for object "" + objName + "" not found."";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < modules.length; i++) {
      modifyValues(objName,modules[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}
",377,15,"mods:modules,modify:update,",112,0.7010158618291219,Beam
937,,,42,6,,1762,11.885653563340504,0
938,"public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}
","public void transform(PlaEllipse[] p_ellipso_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipso_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipso_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}
",260,16,"fill_ellipse_arr:transform,p_ellipse_arr:p_ellipso_arr,",457,3.589440186818441,Beam
939,,,90,4,,534,2.4477511167526247,0
940,,,22,3,,133,0.5309944351514181,0
941,"private void fillXMLAttribute(Attributes att,int index){
  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));
  String type=att.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));
}
","private void fillXmlElement(Attributes ord,int index){
  fillQName(fAttributeQName,ord.getURI(index),ord.getLocalName(index),ord.getQName(index));
  String type=ord.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,ord.getValue(index));
}
",74,6,"fillXMLAttribute:fillXmlElement,att:ord,",112,0.7088112950325012,Beam
942,"public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
","public boolean replicateDdirtyWrite(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}
",28,3,"indicateDirtyRead:replicateDdirtyWrite,",46,0.30852154493331907,Beam
943,,,18,3,,310,1.9079225579897563,0
945,"public double elasticity(final double spot){
  final double val=value();
  final double del=delta(spot);
  if (val > Constants.QL_EPSILON)   return del / val * spot;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}
","public double lasticency(final double dot){
  final double val=value();
  final double del=delta(dot);
  if (val > Constants.QL_EPSILON)   return del / val * dot;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}
",77,4,"elasticity:lasticency,spot:dot,",62,0.5454398115475972,Beam
946,"private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
","private void updateZonalTable(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info(""Found zone: {} for initiator {} and port {}"",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}
",84,8,"updateZoningMap:updateZonalTable,",20,0.11494948466618855,Beam
947,,,27,3,,264,1.859100302060445,0
949,,,39,2,,75,0.37951552073160805,0
950,,,53,5,,474,2.1159368554751077,0
951,,,71,4,,646,3.1659948746363322,0
952,"public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}
","public double parile(ConstantRange filter){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (filter.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}
",119,8,"range:filter,percentage:parile,",88,0.5108869393666585,Beam
953,,,47,4,,97,0.40938066244125365,0
954,"public void despawn(VisibleObject object){
  despawn(object,true);
}
","public void despound(VisibleObject object){
  despound(object,true);
}
",16,2,"despawn:despound,",6,0.10035823583602906,Beam
955,"private static CharHandler parseUnprintableExtCodes(String[] codeStrings){
  if (codeStrings.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  byte[] bytes=codesToBytes(codeStrings[0],true);
  if (bytes.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  return new UnprintableExtCharHandler(bytes[0]);
}
","private static CharHandler parseUnprintableExtCategories(String[] codeStrings){
  if (codeStrings.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  byte[] bytes=codesToBytes(codeStrings[0],true);
  if (bytes.length != 1) {
    throw new IllegalStateException(""Unexpected code strings "" + Arrays.asList(codeStrings));
  }
  return new UnprintableExtCharHandler(bytes[0]);
}
",85,3,"parseUnprintableExtCodes:parseUnprintableExtCategories,",8,0.09183597962061564,Beam
956,"static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
","static public void endMultiple(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}
",32,4,"addAll:endMultiple,",7,0.028921258449554444,Beam
957,"@Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){
  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());
  if (adapter != null)   adapter.clear();
  UnionMemberScope.clearCachedComposedMembers(model);
}
","@Override protected void beforeObjectClicks(EObject model,IDiagnosticConsumer diagnosticsConsumer){
  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());
  if (adapter != null)   adapter.clear();
  UnionMemberScope.clearCachedComposedMembers(model);
}
",47,4,"beforeModelLinked:beforeObjectClicks,",37,0.2270709753036499,Beam
958,,,182,3,,127,0.8517210245132446,0
960,"protected final void firePropertyChange(String propertyName,long oldValue,long newValue){
  firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}
","protected final void fireLongchange(String propertyName,long oldValue,long newValue){
  fireLongchange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}
",35,4,"firePropertyChange:fireLongchange,",42,0.3386262575785319,Beam
962,"private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}
","private Map<UUID,int[]> Reducer(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> Reducer=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      Reducer.put(node.nodeId,arr);
    }
  }
  return Reducer;
}
",444,13,"reducers:Reducer,",39,0.31860811710357667,Beam
963,,,75,7,,230,1.1791843215624491,0
964,,,83,7,,214,1.3062232295672098,0
965,"public static String formatLong(long number){
  return intFormat.format(number);
}
","public static String FormatInt(long address){
  return intFormat.format(address);
}
",18,3,"formatLong:FormatInt,number:address,",44,0.2241628368695577,Beam
966,,,61,6,,235,1.1405600587526956,0
967,"public boolean removeShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (hook == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(hook);
  }
}
","public boolean removeShutdownWooks(Thread app){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (app == null)   throw new NullPointerException(""null is not allowed here"");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(app);
  }
}
",76,5,"hook:app,removeShutdownHook:removeShutdownWooks,",93,0.45742173194885255,Beam
968,,,58,10,,2360,10.77203491528829,0
969,"public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){
  IgniteLogger log=logRef.get();
  if (log == null) {
    logRef.compareAndSet(null,ctx.log(obj.getClass()));
    log=logRef.get();
  }
  return log;
}
","public static IgniteLogger Logge(GridKernalContext ctx,AtomicReference<IgniteLogger> logDef,Object j){
  IgniteLogger log=logDef.get();
  if (log == null) {
    logDef.compareAndSet(null,ctx.log(j.getClass()));
    log=logDef.get();
  }
  return log;
}
",65,5,"obj:j,logger:Logge,logRef:logDef,",540,2.936110838254293,Beam
970,"SegmentManager commitIndex(long commitIndex){
  this.commitIndex=Math.max(this.commitIndex,commitIndex);
  return this;
}
","SegmentManager releasePosition(long releasePosition){
  this.releasePosition=Math.max(this.releasePosition,releasePosition);
  return this;
}
",26,1,"commitIndex:releasePosition,",18,0.08847549756368002,Beam
971,"private void refreshDoneButton(boolean done){
  butDone.setText(done ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
","private void refreshDoneText(boolean ready){
  butDone.setText(ready ? Messages.getString(""ChatLounge.notDone"") : Messages.getString(""ChatLounge.imDone""));
}
",30,3,"refreshDoneButton:refreshDoneText,done:ready,",129,0.6735825856526693,Beam
972,"public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}
","public synchronized void trackFexFiles(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}
",146,10,"trackHexImages:trackFexFiles,",15,0.07664848168690999,Beam
973,"private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}
","private static String formatAudioSize(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}
",23,2,"formatSampleRate:formatAudioSize,",39,0.19374698797861736,Beam
974,"public void generateClassFile(OutputStream os){
  ClassWriter cw=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES);
  cv=cw;
  generateByteCode();
  try {
    os.write(cw.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(""Could not write class file in the ASM-backend!"",e);
  }
}
","public void generateByteFiles(OutputStream as){
  ClassWriter cw=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES);
  cv=cw;
  generateByteCode();
  try {
    as.write(cw.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(""Could not write class file in the ASM-backend!"",e);
  }
}
",58,5,"generateClassFile:generateByteFiles,os:as,",116,0.6053449074427287,Beam
975,"public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){
  if (argIndex < 0 || argIndex >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,argIndex + 1);
    if (argValue != null) {
      args.remove(argIndex + 1);
    }
  }
  args.remove(argIndex);
  return argIndex;
}
","public static int removeArgsAndReturnInsertedPoint(List<String> args,int ampValue,boolean tryRemovingArgValue){
  if (ampValue < 0 || ampValue >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,ampValue + 1);
    if (argValue != null) {
      args.remove(ampValue + 1);
    }
  }
  args.remove(ampValue);
  return ampValue;
}
",83,5,"argIndex:ampValue,removeArgsAndReturnInsertionIndex:removeArgsAndReturnInsertedPoint,",102,0.793073813120524,Beam
976,,,17,2,,196,1.2155942082405091,0
977,"public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}
","public void writeNoScale(Image cc,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (cc.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(cc,x,y,cc.getWidth(null),cc.getHeight(null),null);
  }
}
",94,15,"c:cc,",3,0.037765681743621826,Beam
978,"public boolean isLessThen(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) < 0);
}
","public boolean isLessthan(Param Param){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Param);
  return (thisValue.compareTo(parameter) < 0);
}
",41,4,"Percent:Param,isLessThen:isLessthan,",49,0.2846597949663798,Beam
979,"public void close() throws IOException {
  rrdFile.close();
}
","public void destroy() throws IOException {
  rrdFile.destroy();
}
",15,2,"close:destroy,",6,0.02747508684794108,Beam
980,,,84,4,,112,0.7850606958071391,0
981,"private void checkShutdown(){
synchronized (mux) {
    if (isBeingShutdown)     throw new RejectedExecutionException(""Failed to execute command during executor shutdown."");
  }
}
","private void checkRundown(){
synchronized (pmock) {
    if (isBeingshutDown)     throw new RejectedExecutionException(""Failed to execute command during executor shutdown."");
  }
}
",24,3,"checkShutdown:checkRundown,isBeingShutdown:isBeingshutDown,mux:pmock,",55,0.3542087515195211,Beam
982,,,17,3,,360,1.9548749844233195,0
984,,,63,6,,950,4.1562774777412415,0
985,"public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void externalDocumentDec(String name,XMLResourceIdentifier authority,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=authority.getPublicId();
      String systemId=fResolveDTDURIs ? authority.getExpandedSystemId() : authority.getLiteralSystemId();
      fDeclHandler.externalDocumentDec(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",79,9,"externalEntityDecl:externalDocumentDec,identifier:authority,",195,0.9312715609868367,Beam
986,,,58,4,,142,0.8802938421567281,0
987,"@Override public DataSource createDataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}
","@Override public DataSource createDataSources(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}
",64,4,"createDataSource:createDataSources,",7,0.028401716550191244,Beam
988,,,141,9,,1777,9.68357177178065,0
989,,,30,2,,219,1.1472195744514466,0
991,,,31,2,,220,1.1776885271072388,0
992,,,213,12,,621,4.890615081787109,0
993,,,54,5,,167,0.7416404366493226,0
994,"@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
","@Override public long createMem(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}
",40,6,"freeMemory:createMem,",8,0.033438523610432945,Beam
995,"private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}
","private static int decodeOctets(int i,ByteBuffer gg,StringBuilder sb){
  if (gg.limit() == 1 && (gg.get(0) & 0xFF) < 0x80) {
    sb.append((char)gg.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(gg);
    sb.append(cb.toString());
    return i + gg.limit() * 3 - 1;
  }
}
",98,5,"bb:gg,",18,0.1306306799252828,Beam
996,"public void labelDistances(Hypergraph<V,E> graph,V root){
  labelDistances(graph,Collections.singleton(root));
}
","public void labelContance(Hypergraph<V,E> graph,V root){
  labelContance(graph,Collections.singleton(root));
}
",29,3,"labelDistances:labelContance,",43,0.195931073029836,Beam
998,,,68,5,,343,1.4745726466178894,0
999,"public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}
","public void calacutemin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}
",44,2,"calculateMin:calacutemin,",10,0.042644778887430825,Beam
1000,"public ObjectMapper nextLevel(ObjectMapper level){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(level);
  return previous;
}
","public ObjectMapper nextDepth(ObjectMapper location){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(location);
  return previous;
}
",28,4,"level:location,nextLevel:nextDepth,",46,0.20561863581339518,Beam
1001,,,335,12,,386,7.414897243181865,0
1002,"public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
","public static Object desynchronize(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException(""FileNotFoundException occurred. "",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(""ClassNotFoundException occurred. "",e);
  }
catch (  IOException e) {
    throw new RuntimeException(""IOException occurred. "",e);
  }
 finally {
    IOUtils.close(in);
  }
}
",106,5,"deserialization:desynchronize,",35,0.1575976530710856,Beam
1003,"public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
","public boolean endsTo(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsTo(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}
",43,3,"endsWith:endsTo,",4,0.027037044366200764,Beam
1004,,,36,2,,70,0.3150165319442749,0
1005,"public static String pad(String string,int n,String padding,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}
","public static String add(String space,int n,String padding,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < space.length()) {
    return space.substring(0,n);
  }
 else   if (n == space.length()) {
    return space;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=space.length();
  if (right) {
    buff.append(space);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(space);
  }
  return buff.toString();
}
",178,8,"string:space,pad:add,",319,2.23529984553655,Beam
1008,"public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  recipients=new HashSet(recipients);
  DistributedMember me=originDm.getDistributionManagerId();
  if (recipients.contains(me)) {
    recipients.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",recipients);
  }
  rp=new ReplyProcessor21(originDm,recipients);
  processorId=rp.getProcessorId();
  setRecipients(recipients);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}
","public void send(Set ripresses,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  ripresses=new HashSet(ripresses);
  DistributedMember me=originDm.getDistributionManagerId();
  if (ripresses.contains(me)) {
    ripresses.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug(""Recipients for SerialAckedMessage are {}"",ripresses);
  }
  rp=new ReplyProcessor21(originDm,ripresses);
  processorId=rp.getProcessorId();
  setRecipients(ripresses);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug(""Unable to send serial acked message to {}"",mbr);
      }
    }
  }
  rp.waitForReplies();
}
",197,12,"recipients:ripresses,",18,0.17276811997095745,Beam
1009,,,175,8,,256,1.2721299846967062,0
1010,,,55,5,,994,5.03557163476944,0
1011,,,98,7,,447,2.3289555430412294,0
1012,,,545,17,,625,5.329020539919536,0
1013,"public void add(final CertificateValidity certificateValidity){
  certificateValidityList.add(certificateValidity);
}
","public void and(final CertificateValidity certificateValida){
  certificateValidityList.and(certificateValida);
}
",17,3,"add:and,certificateValidity:certificateValida,",164,0.869019603729248,Beam
1014,,,46,4,,118,0.7063673734664917,0
1015,,,143,6,,312,2.1024545272191366,0
1016,"public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}
","public void reset(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}
",211,9,"test_getPutByteArray:reset,",24,0.11970984141031901,Beam
1017,"public void updatePoint(float x,float y){
  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(x,-y));
  }
}
","public void setEvent(float z,float y){
  if (Math.sqrt(z * z + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(z,-y));
  }
}
",50,4,"updatePoint:setEvent,x:z,",263,1.1661519010861714,Beam
1018,"public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}
","public static String join(String w,int width,char fillChar){
  if (w.length() >= width) {
    return w;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - w.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(w);
  return sb.toString();
}
",82,6,"right:join,s:w,",284,2.066720195611318,Beam
1019,"@Override public void makeImmutable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeImmutable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}
","@Override public void makeMututation(){
  if (immute) {
    if (atresses != null) {
      Iterator iter=atresses.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeMututation();
      }
      atresses=Collections.unmodifiableList(atresses);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    immute=false;
  }
}
",90,6,"makeImmutable:makeMututation,mutable:immute,attrs:atresses,",226,0.8993110140164693,Beam
1020,,,67,6,,183,0.7502450188000996,0
1021,,,35,5,,307,1.3767920851707458,0
1022,"private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}
","private synchronized boolean startChangesCruker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug(""Setting the destination to "" + getQueueName(queue) + "" at ""+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}
",98,8,"pollStatsBroker:startChangesCruker,",14,0.06962185700734456,Beam
1023,"private static Object add(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}
","private static Object init(final Object section,final int index,final Object child,final Class<?> clss){
  if (section == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: 0"");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,child);
    return joinedArray;
  }
  int length=Array.getLength(section);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException(""Index: "" + index + "", Length: ""+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(section,0,result,0,index);
  Array.set(result,index,child);
  if (index < length) {
    System.arraycopy(section,index,result,index + 1,length - index);
  }
  return result;
}
",184,8,"add:init,array:section,element:child,",920,5.734811929861705,Beam
1024,"private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}
","private String extractChanned(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}
",79,8,"extractSpan:extractChanned,",100,0.5093797365824382,Beam
1025,"public EventBean[] toArray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}
","public EventBean[] toA(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}
",92,6,"toArray:toA,",4,0.021320263544718426,Beam
1026,,,184,5,,803,7.536364324887594,0
1027,"public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}
","public void renabelEditorLabel(Editor area){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == area) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(area.getTitle());
      return;
    }
  }
}
",87,7,"renameEditorPanel:renabelEditorLabel,panel:area,",52,0.29003406763076783,Beam
1028,,,30,4,,386,1.9980412403742471,0
1029,,,77,5,,130,0.9484103322029114,0
1030,"@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readExternal(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}
","@Override public void ReadExternal(ObjectInput ex) throws IOException, ClassNotFoundException {
  super.ReadExternal(ex);
  isLeaf=ex.readBoolean();
  numEntries=ex.readInt();
}
",38,5,"in:ex,readExternal:ReadExternal,",61,0.889717944463094,Beam
1031,"public FromClause add(OuterJoinQualifier outerJoinQualifier){
  outerJoinQualifiers.add(outerJoinQualifier);
  return this;
}
","public FromClause filter(OuterJoinQualifier outerJoinQualifier){
  outerJoinQualifiers.filter(outerJoinQualifier);
  return this;
}
",19,3,"add:filter,",18,0.0995867371559143,Beam
1032,,,25,3,,256,1.4451553146044414,0
1033,,,42,3,,200,1.143859569231669,0
1034,,,83,7,,846,5.2319085717201235,0
1035,,,265,14,,1285,11.227849729855855,0
1036,,,95,3,,132,0.6991880218187968,0
1037,,,111,5,,498,2.86254042784373,0
1038,"public void omitLessFreq(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches(""^[A-Za-z]$"")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches("".*[A-Za-z].*"")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}
","public void sort(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches(""^[A-Za-z]$"")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches("".*[A-Za-z].*"")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}
",231,13,"omitLessFreq:sort,",22,0.11484882831573487,Beam
1039,,,48,3,,128,0.9111876606941223,0
1040,,,85,9,,242,1.2529390613238016,0
1042,,,22,2,,246,2.1035964608192446,0
1043,"public void updateAmount(){
  setAmt(getTotalAmount());
}
","public void updateTotal(){
  setAmt(getTotalAmount());
}
",14,1,"updateAmount:updateTotal,",4,0.02459632158279419,Beam
1045,,,24,3,,130,0.8342454751332601,0
1046,,,17,2,,65,0.4751788179079692,0
1047,,,244,11,,1229,13.874465902646383,0
1048,"public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
","public void runProgram(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runProgram(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(""Error running script.  Cause: "" + e,e);
  }
}
",94,5,"runScript:runProgram,",35,0.16314083735148113,Beam
1049,"public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}
","public static byte[] divin(final List<byte[]> dataCannels){
  int totalSize=0;
  for (  final byte[] dataPart : dataCannels) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataCannels) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}
",96,6,"dataChunks:dataCannels,combine:divin,",88,0.4376420776049296,Beam
1050,,,434,12,,1377,8.854453996817272,0
1051,"public void addColumn(String name,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    addColumn(name,ex);
  }
}
","public void AddCol(String a,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    AddCol(a,ex);
  }
}
",56,5,"addColumn:AddCol,name:a,",237,1.0281100034713746,Beam
1052,"public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
","public String massage(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}
",103,8,"parse:massage,",44,0.2052289366722107,Beam
1053,"public static void discard(){
  current.remove();
}
","public static void discarded(){
  current.remove();
}
",14,2,"discard:discarded,",3,0.010077095031738282,Beam
1054,"public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}
","public GT_MetaGenerated_Item(String aUnlocalised,short aOffset,short aItemAmount){
  super(aUnlocalised);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}
",104,10,"aUnlocalized:aUnlocalised,",3,0.032261109352111815,Beam
1056,,,60,5,,836,10.827665678660075,0
1057,"protected void addToGUI(JPanel gui,JTextField b,String cmd){
  b.setActionCommand(cmd);
  b.addActionListener(this);
  gui.add(b);
}
","protected void addTOWindow(JPanel jc,JTextField b,String cd){
  b.setActionCommand(cd);
  b.addActionListener(this);
  jc.add(b);
}
",36,4,"addToGUI:addTOWindow,gui:jc,cmd:cd,",659,2.992751200993856,Beam
1058,"VPlexDistributedDeviceInfo findDistributedDevice(String deviceName) throws VPlexApiException {
  return findDistributedDevice(deviceName,false);
}
","VPlexDistributedDeviceInfo findDistributedModel(String packagename) throws VPlexApiException {
  return findDistributedModel(packagename,false);
}
",18,2,"deviceName:packagename,findDistributedDevice:findDistributedModel,",62,0.2693757613499959,Beam
1059,"public RSAPublicKeyImpl(byte[] encoded) throws InvalidKeyException {
  decode(encoded);
  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);
}
","public RSAPrivCertFactory(byte[] Encoded) throws InvalidKeyException {
  decode(Encoded);
  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);
}
",30,4,"RSAPublicKeyImpl:RSAPrivCertFactory,encoded:Encoded,",154,0.8197394688924153,Beam
1060,"public void makeClass(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless);
}
","public void createCode(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   createCode(str.charAt(i),caseless);
}
",42,4,"makeClass:createCode,",42,0.19026761054992675,Beam
1061,"public static Function<Value,Value> ofValue(){
  return VALUE;
}
","public static Function<Value,Value> ofType(){
  return VALUE;
}
",16,2,"ofValue:ofType,",3,0.015492471059163411,Beam
1062,"public static String encodeUrl(final String str){
  return encode(str,""%20"");
}
","public static String encodeUrl(final String r){
  return encode(r,""%20"");
}
",19,2,"str:r,",3,0.03111490805943807,Beam
1063,"public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(reader),sw,timeout);
  sw.close();
  return sw.toString();
}
","public static String toString(Reader w,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(w),sw,timeout);
  sw.close();
  return sw.toString();
}
",49,4,"reader:w,",22,0.18131460746129355,Beam
1064,"public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}
","public void parse(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}
",170,7,"load:parse,",7,0.056454102198282875,Beam
1065,,,89,5,,296,1.555113144715627,0
1066,"private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}
","private static void d_ucumm(double[] a,double[] acc,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(acc != null) ? acc : new double[n];
  if (acc == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}
",122,11,"agg:acc,",3,0.04050157864888509,Beam
1067,"public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}
","public static String copy(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}
",119,7,"replace:copy,",105,0.5255709608395894,Beam
1069,"private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ resource+ "", length=""+ length+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}
","private void processResources(final UUID uuid,final Object type,final long sequence,final InputStream is) throws IOException {
  assert uuid != null;
  assert type != null;
  assert sequence >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(sequence);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info(""Sent: uuid="" + uuid + "", resource=""+ type+ "", length=""+ sequence+ "", checksum=""+ checksum+ "", elapsed=""+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ ""ms"");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}
",386,17,"sendResource:processResources,resource:type,length:sequence,",773,4.794795783360799,Beam
1070,,,62,3,,266,1.444620676835378,0
1071,,,88,5,,304,1.6639655351638794,0
1073,,,17,2,,36,0.16189082463582358,0
1074,"public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){
  return convertToSigned16BitSamples(buffer.getSamples());
}
","public static ByteBuffer convertToSigned16bitSipes(Buffer container){
  return convertToSigned16bitSipes(container.getSamples());
}
",20,2,"buffer:container,convertToSigned16BitSamples:convertToSigned16bitSipes,",85,0.6152178645133972,Beam
1075,"public void initToolTip(){
  if (ttmanager == null) {
    ttmanager=ToolTipManager.sharedInstance();
    ttmanager.registerComponent(map);
    ttmanager.setEnabled(true);
    return;
  }
  if (map != null) {
    map.setToolTipText(null);
  }
}
","public void inittooltip(){
  if (ttmanager == null) {
    ttmanager=ToolTipManager.sharedInstance();
    ttmanager.registerComponent(map);
    ttmanager.setEnabled(true);
    return;
  }
  if (map != null) {
    map.setToolTipText(null);
  }
}
",54,3,"initToolTip:inittooltip,",13,0.06477203766504923,Beam
1076,"public boolean offer(E event,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(event)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(event));
    done=true;
    return true;
  }
 else   return false;
}
","public boolean queue(E example,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(example)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(example));
    done=true;
    return true;
  }
 else   return false;
}
",77,8,"offer:queue,event:example,",95,0.45977848370869956,Beam
1079,,,51,4,,114,0.6401873230934143,0
1080,"protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}
","protected void registerMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.registerMarkers();
  repaint();
}
",93,5,"removeMarkers:registerMarkers,",5,0.034491280714670815,Beam
1081,"private int determineMaxLevelRec(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);
  }
  return newLevel;
}
","private int determinemaxPathrec(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determinemaxPathrec(level,e.getTarget()) + 1);
  }
  return newLevel;
}
",68,5,"determineMaxLevelRec:determinemaxPathrec,",25,0.13727025588353475,Beam
1082,"public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
","public Decimal Subfact(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.Subfact(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}
",49,5,"subtract:Subfact,",4,0.027675390243530273,Beam
1083,"public JavaFormatter(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){
  fLineDelimiter=lineDelimiter;
  fUseCodeFormatter=useCodeFormatter;
  fInitialIndentLevel=initialIndentLevel;
  fProject=project;
}
","public javaformizer(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){
  fLineDelimiter=lineDelimiter;
  fUseCodeFormatter=useCodeFormatter;
  fInitialIndentLevel=initialIndentLevel;
  fProject=project;
}
",33,9,"JavaFormatter:javaformizer,",24,0.10666019121805827,Beam
1084,,,16,3,,133,0.6117575724919637,0
1085,,,39,4,,450,3.0233838677406313,0
1086,"public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
","public boolean update(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}
",70,6,"check:update,",45,0.24027932087580364,Beam
1087,"private static long signFromBit_antiCyclic(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}
","private static long bitsFromBit_antiPolyclik(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}
",24,2,"signFromBit_antiCyclic:bitsFromBit_antiPolyclik,",15,0.08815201520919799,Beam
1088,,,17,3,,387,2.195695241292318,0
1089,,,17,3,,305,1.2203255573908487,0
1090,"public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}
","public viewrefTransform(ViewRender<T> method,Class<T> type,int priority){
  Objects.requireNonNull(method);
  _view=method;
  _type=type;
  _priority=priority;
}
",39,7,"ViewRefRender:viewrefTransform,view:method,",221,0.9353409091631572,Beam
1091,,,43,5,,415,2.4422298351923626,0
1092,"private void scheduledEnqueueSend(){
  schedulerQueueSize.decrementAndGet();
  scheduled.set(false);
  enqueueSendWithErrorLogging();
}
","private void scheduledEnqueueMessage(){
  schedulerQueueSize.decrementAndGet();
  scheduled.set(false);
  enqueueSendWithErrorLogging();
}
",24,3,"scheduledEnqueueSend:scheduledEnqueueMessage,",3,0.016598272323608398,Beam
1093,"public Future<?> execute(CameraCommand command){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(command));
  }
}
","public Future<?> install(CameraCommand input){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(input));
  }
}
",65,6,"execute:install,command:input,",99,0.7260170936584472,Beam
1094,,,53,4,,552,4.046662644545237,0
1095,"public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}
","public static void interception(final Thread task){
  if (task != null) {
    task.interception();
  }
}
",25,2,"interrupt:interception,thread:task,",88,0.545547870794932,Beam
1096,"public void tallyVariant(VcfHeader header,VcfRecord rec){
  tallyVariant(rec,header.getSampleNames());
}
","public void tallyVariant(VcfHeader header,VcfRecord reg){
  tallyVariant(reg,header.getSampleNames());
}
",23,3,"rec:reg,",3,0.02684716780980428,Beam
1097,,,287,23,,2905,18.11079615354538,0
1098,"public <T>T time(Callable<T> event) throws Exception {
  final long startTime=clock.tick();
  try {
    return event.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}
","public <T>T exec(Callable<T> handler) throws Exception {
  final long startTime=clock.tick();
  try {
    return handler.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}
",51,4,"time:exec,event:handler,",99,0.45390825271606444,Beam
1100,,,134,7,,540,3.081571014722188,0
1101,"void remove(TcpServerThread t){
  running.remove(t);
}
","void remove(TcpServerThread x){
  running.remove(x);
}
",15,3,"t:x,",11,0.04612652063369751,Beam
1102,"public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}
","public static double plot(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}
",77,6,"pdf:plot,",22,0.11121282577514649,Beam
1103,"public static void sortSeqs(List<String> seqs){
  Collections.sort(seqs,null);
}
","public static void sortSeqs(List<String> sqs){
  Collections.sort(sqs,null);
}
",22,2,"seqs:sqs,",9,0.03955051501592,Beam
1104,,,130,8,,881,4.610977121194204,0
1105,"final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void dump(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",77,6,"print:dump,",5,0.029825401306152344,Beam
1106,,,429,19,,595,5.558797987302144,0
1107,,,42,5,,368,1.7415390769640604,0
1108,"default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}
","default Filterable<T> filterAll(final T... values){
  return filterAll(Stream.of(values));
}
",25,2,"removeAll:filterAll,",7,0.032797149817148846,Beam
1109,"private ArtLocateResult calculate_next_trace(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}
","private ArtLocateResult locate(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}
",287,20,"calculate_next_trace:locate,",16,0.11379473209381104,Beam
1110,,,132,4,,290,2.6488953034083047,0
1111,"protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}
","protected void addSourceCodePromarks(TestSolution testSolution,Element object,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarksFactory.addSourceCodeRemarkOnElement(testSolution,object,messageCode,evidenceElementList);
  }
 else {
    processRemarksFactory.addSourceCodeRemarkOnElement(testSolution,object,messageCode);
  }
}
",73,7,"addSourceCodeRemark:addSourceCodePromarks,element:object,processRemarkService:processRemarksFactory,",1175,8.437958121299744,Beam
1112,,,127,7,,706,3.75231386423111,0
1113,,,161,5,,324,2.1461557348569236,0
1114,,,25,3,,136,0.8864612221717835,0
1115,,,130,8,,282,1.9150505224863688,0
1116,,,78,5,,736,5.23368391195933,0
1117,,,31,4,,366,1.6076133648554485,0
1119,"public void paint(Graphics g){
  try {
    super.paint(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}
","public void plaint(Graphics g){
  try {
    super.plaint(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder(""Table.focusRowHighlightBorder"");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}
",112,6,"paint:plaint,",35,0.15760680834452312,Beam
1121,"void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
","void initDemandAndCollectionCache(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}
",95,6,"initDemandAndCollectionMap:initDemandAndCollectionCache,",5,0.025697878996531167,Beam
1122,,,25,2,,235,1.6509116768836976,0
1123,"public void remove(RequestFilter filter){
  filters.remove(filter);
}
","public void remove(RequestFilter pattern){
  filters.remove(pattern);
}
",16,3,"filter:pattern,",8,0.05539689461390177,Beam
1124,"private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
","private void join(final JLabel label,final JTextField field){
  panel.join(label);
  panel.join(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}
",184,8,"add:join,",15,0.09419023593266805,Beam
1125,"public void doWindowOpen(){
  doConnect();
}
","public void doWindowConnect(){
  doConnect();
}
",11,1,"doWindowOpen:doWindowConnect,",6,0.020109041531880697,Beam
1126,"public Metadata.Property.Builder clear(){
  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();
  type=_defaults.type;
  boxedType=_defaults.boxedType;
  name=_defaults.name;
  capitalizedName=_defaults.capitalizedName;
  allCapsName=_defaults.allCapsName;
  getterName=_defaults.getterName;
  codeGenerator=_defaults.codeGenerator;
  fullyCheckedCast=_defaults.fullyCheckedCast;
  accessorAnnotations.clear();
  _unsetProperties.clear();
  _unsetProperties.addAll(_defaults._unsetProperties);
  return (Metadata.Property.Builder)this;
}
","public Metadata.Property.Builder remove(){
  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();
  type=_defaults.type;
  boxedType=_defaults.boxedType;
  name=_defaults.name;
  capitalizedName=_defaults.capitalizedName;
  allCapsName=_defaults.allCapsName;
  getterName=_defaults.getterName;
  codeGenerator=_defaults.codeGenerator;
  fullyCheckedCast=_defaults.fullyCheckedCast;
  accessorAnnotations.remove();
  _unsetProperties.remove();
  _unsetProperties.addAll(_defaults._unsetProperties);
  return (Metadata.Property.Builder)this;
}
",102,12,"clear:remove,",10,0.07690991560618082,Beam
1127,,,85,5,,225,1.1935409704844158,0
1128,"private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xPos);
  spriteFrame.setTranslateY(yPos);
  this.xPos=xPos;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}
","private Sprition(float xPos,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xPos);
  spriteFrame.setTranslateY(yPos);
  this.xPos=xPos;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}
",88,8,"Sprite:Sprition,",70,0.2535325288772583,Beam
1129,"public static void addFile(String s) throws IOException {
  File f=new File(s);
  addFile(f);
}
","public static void addedFolder(String s) throws IOException {
  File f=new File(s);
  addedFolder(f);
}
",26,3,"addFile:addedFolder,",40,0.19851233959197997,Beam
1131,,,177,5,,1407,9.804219885667164,0
1132,"public Object extractHardRef(Object o){
  SoftReference w=(SoftReference)o;
  if (w != null) {
    return w.get();
  }
  return null;
}
","public Object extractStrongCall(Object o){
  SoftReference w=(SoftReference)o;
  if (w != null) {
    return w.get();
  }
  return null;
}
",35,3,"extractHardRef:extractStrongCall,",17,0.11402273178100586,Beam
1133,,,98,6,,1351,11.582500914732615,0
1134,,,84,7,,758,7.004101165135702,0
1135,,,68,4,,273,1.9314590334892272,0
1136,,,192,7,,235,2.2319313089052835,0
1137,,,200,12,,976,7.118102947870891,0
1138,"public void read(ByteCodeParser in) throws IOException {
  int length=in.readInt();
  _maxStack=in.readShort();
  _maxLocals=in.readShort();
  int codeLength=in.readInt();
  _code=new byte[codeLength];
  in.read(_code,0,codeLength);
  int exnCount=in.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(in.readShort() & 0xffff);
    exn.setEnd(in.readShort() & 0xffff);
    exn.setHandler(in.readShort() & 0xffff);
    exn.setType(in.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=in.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=in.parseAttribute();
    _attributes.add(attr);
  }
}
","public void push(ByteCodeParser reader) throws IOException {
  int length=reader.readInt();
  _maxStack=reader.readShort();
  _maxLocals=reader.readShort();
  int codeLength=reader.readInt();
  _code=new byte[codeLength];
  reader.push(_code,0,codeLength);
  int exnCount=reader.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(reader.readShort() & 0xffff);
    exn.setEnd(reader.readShort() & 0xffff);
    exn.setHandler(reader.readShort() & 0xffff);
    exn.setType(reader.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=reader.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=reader.parseAttribute();
    _attributes.add(attr);
  }
}
",197,13,"read:push,in:reader,",66,0.47419570287068685,Beam
1139,,,25,3,,194,0.7761393308639526,0
1141,,,81,7,,195,0.8705452919006348,0
1142,"@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
","@Override public void down(){
  try {
    if (connection != null) {
      connection.down();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}
",39,3,"close:down,",15,0.06355719963709514,Beam
1143,,,47,3,,112,0.864309561252594,0
1145,"public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
","public Phone newPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}
",43,4,"createPhone:newPhone,",4,0.013353391488393148,Beam
1146,"@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}
","@Override public PacketBuffer write(PacketBuffer func){
  values.forEach(null);
  return func;
}
",21,3,"buf:func,",15,0.05617514848709106,Beam
1147,"public static String randomRegexpishString(Random r){
  return randomRegexpishString(r,20);
}
","public static String randomRegexpishString(Random random){
  return randomRegexpishString(random,20);
}
",18,2,"r:random,",30,0.19774896303812664,Beam
1148,,,71,5,,246,1.3851372957229615,0
1149,,,185,6,,214,1.1084938724835713,0
1150,,,69,4,,205,1.2440885464350382,0
1151,"public void jGoogleAnalyticsTracker(final String eventType,final String version,final String trackerId){
  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(""vdi_calculator"",version,trackerId);
  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());
  tracker.trackAsynchronously(focusPoint);
}
","public void jGoogleAnalyticsModule(final String eventType,final String version,final String trackerId){
  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(""vdi_calculator"",version,trackerId);
  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());
  tracker.trackAsynchronously(focusPoint);
}
",53,6,"jGoogleAnalyticsTracker:jGoogleAnalyticsModule,",37,0.16024539470672608,Beam
1152,,,36,3,,297,1.560011124610901,0
1153,"private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){
  final Set<T> values=new HashSet<T>(collection.size());
  for (  final S instance : collection) {
    values.add(extractor.getValue(instance));
  }
  return values;
}
","private <S,T>Set<T> expend(final Collection<S> collection,final Extractor<S,T> extractor){
  final Set<T> values=new HashSet<T>(collection.size());
  for (  final S instance : collection) {
    values.add(extractor.getValue(instance));
  }
  return values;
}
",75,5,"extract:expend,",9,0.056980013847351074,Beam
1154,,,113,12,,572,3.1875439047813416,0
1155,,,136,8,,1272,9.116583323478698,0
1157,"public int size(){
  return al.size();
}
","public int count(){
  return al.count();
}
",14,2,"size:count,",4,0.0230887770652771,Beam
1158,,,16,3,,166,0.848939049243927,0
1159,,,35,3,,90,0.3581172625223796,0
1160,"public CloseableAnimatedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){
  Preconditions.checkNotNull(bitmaps);
  Preconditions.checkState(bitmaps.size() >= 1,""Need at least 1 frame!"");
  mBitmaps=new ArrayList<>();
  mBitmapReferences=new ArrayList<>();
  for (  Bitmap bitmap : bitmaps) {
    mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser));
    mBitmaps.add(bitmap);
  }
  mDurations=Preconditions.checkNotNull(durations);
  Preconditions.checkState(mDurations.size() == mBitmaps.size(),""Arrays length mismatch!"");
}
","public CloseableAnizedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){
  Preconditions.checkNotNull(bitmaps);
  Preconditions.checkState(bitmaps.size() >= 1,""Need at least 1 frame!"");
  mBitmaps=new ArrayList<>();
  mBitmapReferences=new ArrayList<>();
  for (  Bitmap bitmap : bitmaps) {
    mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser));
    mBitmaps.add(bitmap);
  }
  mDurations=Preconditions.checkNotNull(durations);
  Preconditions.checkState(mDurations.size() == mBitmaps.size(),""Arrays length mismatch!"");
}
",121,8,"CloseableAnimatedBitmap:CloseableAnizedBitmap,",40,0.26690028111139935,Beam
1161,"public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
","public boolean Schegrade(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}
",43,6,"schedule:Schegrade,",6,0.02972456216812134,Beam
1162,"public final void decRef() throws IOException {
  ensureOpen();
  final int rc=refCount.decrementAndGet();
  if (rc == 0) {
    boolean success=false;
    try {
      doClose();
      closed=true;
      success=true;
    }
  finally {
      if (!success) {
        refCount.incrementAndGet();
      }
    }
  }
 else   if (rc < 0) {
    throw new IllegalStateException(""too many decRef calls: refCount is "" + rc + "" after decrement"");
  }
}
","public final void Decref() throws IOException {
  ensureOpen();
  final int rc=RefIndex.decrementAndGet();
  if (rc == 0) {
    boolean success=false;
    try {
      doClose();
      closed=true;
      success=true;
    }
  finally {
      if (!success) {
        RefIndex.incrementAndGet();
      }
    }
  }
 else   if (rc < 0) {
    throw new IllegalStateException(""too many decRef calls: refCount is "" + rc + "" after decrement"");
  }
}
",88,5,"decRef:Decref,refCount:RefIndex,",65,0.34710412422815956,Beam
1163,,,53,5,,136,0.7352182944615682,0
1164,"public void reset(){
  displayCache.clear();
  cachedID.clear();
}
","public void refresh(){
  displayCache.clear();
  cachedID.clear();
}
",19,3,"reset:refresh,",3,0.017161357402801513,Beam
1165,"public double doubleValue(){
  return d.doubleValue();
}
","public double floatValues(){
  return d.floatValues();
}
",14,2,"doubleValue:floatValues,",17,0.08668078581492106,Beam
1166,"public void addRequestProperty(String key,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (key == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(key,value);
}
","public void addResponseProperty(String object,String value){
  if (connected)   throw new IllegalStateException(""Already connected"");
  if (object == null)   throw new NullPointerException(""key is null"");
  if (requests == null)   requests=new MessageHeader();
  requests.add(object,value);
}
",58,5,"addRequestProperty:addResponseProperty,key:object,",128,0.5717943032582601,Beam
1167,,,109,6,,1174,6.3614837527275085,0
1168,"public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(clusterData,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf(""%s\\t"",n);
    for (    int m : c) {
      out.printf(""%d\\t"",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}
","public final void writeClients(PrintWriter out,List<ClusterData> plancerMap,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(plancerMap,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf(""%s\\t"",n);
    for (    int m : c) {
      out.printf(""%d\\t"",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}
",120,9,"clusterData:plancerMap,printClusters:writeClients,",227,1.3617290417353312,Beam
1169,"public static String gensalt(int log_rounds,SecureRandom random){
  StringBuffer rs=new StringBuffer();
  byte rnd[]=new byte[BCRYPT_SALT_LEN];
  random.nextBytes(rnd);
  rs.append(""$2a$"");
  if (log_rounds < 10) {
    rs.append(""0"");
  }
  if (log_rounds > 30) {
    throw new IllegalArgumentException(""log_rounds exceeds maximum (30)"");
  }
  rs.append(Integer.toString(log_rounds));
  rs.append(""$"");
  rs.append(encode_base64(rnd,rnd.length));
  return rs.toString();
}
","public static String gensort(int log_rounds,SecureRandom random){
  StringBuffer rs=new StringBuffer();
  byte rnd[]=new byte[BCRYPT_SALT_LEN];
  random.nextBytes(rnd);
  rs.append(""$2a$"");
  if (log_rounds < 10) {
    rs.append(""0"");
  }
  if (log_rounds > 30) {
    throw new IllegalArgumentException(""log_rounds exceeds maximum (30)"");
  }
  rs.append(Integer.toString(log_rounds));
  rs.append(""$"");
  rs.append(encode_base64(rnd,rnd.length));
  return rs.toString();
}
",116,6,"gensalt:gensort,",37,0.27910251220067345,Beam
1170,"public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}
","public static String replaceChars(String r,String oldchars,char newchar){
  int pos=indexOfChars(r,oldchars);
  if (pos == -1) {
    return r;
  }
  StringBuilder buf=new StringBuilder(r);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(r,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}
",87,6,"str:r,",9,0.08954012393951416,Beam
1171,"public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){
  List<File> dirs=new ArrayList<File>();
  dirs.add(dir);
  return expandSpecWildcards(dirs,modules,forBackend);
}
","public static List<ModuleSpec> expandConfigWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){
  List<File> dirs=new ArrayList<File>();
  dirs.add(dir);
  return expandConfigWildcards(dirs,modules,forBackend);
}
",53,5,"expandSpecWildcards:expandConfigWildcards,",34,0.269393519560496,Beam
1172,"public void serialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.serialize(serializer);
  serializer.endTag(ns,TAG);
}
","public void initialize(KXmlSerializer serialization) throws IOException {
  serialization.startTag(ns,TAG);
  serializeAttribute(serialization,NAME_ATTR,mName);
  serializeAttribute(serialization,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serialization,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serialization.attribute(ns,""signatureCheck"",""true"");
  }
  mSuiteRoot.initialize(serialization);
  serialization.endTag(ns,TAG);
}
",87,6,"serializer:serialization,serialize:initialize,",83,0.41523077885309856,Beam
1173,"public AwsIotConnection(AbstractAwsIotClient client){
  this.client=client;
}
","public AwsIotClient(AbstractAwsIotClient client){
  this.client=client;
}
",14,2,"AwsIotConnection:AwsIotClient,",35,0.17279959122339886,Beam
1174,,,39,5,,266,1.91428431669871,0
1175,,,52,4,,127,0.5981985251108806,0
1176,,,41,8,,214,1.2792917251586915,0
1177,,,23,3,,256,1.389491323630015,0
1178,,,66,5,,333,2.024567433198293,0
1179,"public static int parseStringAsInt(String in) throws IndexParseFieldException {
  try {
    return Integer.parseInt(in);
  }
 catch (  NumberFormatException e) {
    throw new IndexParseFieldException(in,e);
  }
}
","public static int parseIntasInt(String doc) throws IndexParseFieldException {
  try {
    return Integer.parseInt(doc);
  }
 catch (  NumberFormatException e) {
    throw new IndexParseFieldException(doc,e);
  }
}
",39,3,"parseStringAsInt:parseIntasInt,in:doc,",283,1.3502556165059407,Beam
1180,"protected void sendIntensity(double intensity){
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + intensity + "")""+ "" lastOutputStep: ""+ lastOutputStep+ "" maxDimStep: ""+ maxDimStep);
  }
  int newStep=(int)Math.round(intensity * maxDimStep);
  if ((newStep < 0) || (newStep > maxDimStep)) {
    log.error(""newStep wrong: "" + newStep + "" intensity: ""+ intensity);
  }
  if (newStep == 0) {
    if (log.isDebugEnabled()) {
      log.debug(""intensity "" + intensity + "" within current step, return"");
    }
    return;
  }
  X10Sequence out=new X10Sequence();
  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);
  tc.sendX10Sequence(out,null);
  lastOutputStep=newStep;
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + intensity + "") house ""+ X10Sequence.houseValueToText(housecode)+ "" device ""+ devicecode+ "" newStep: ""+ newStep);
  }
}
","protected void sendExtenna(double extreme){
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + extreme + "")""+ "" lastOutputStep: ""+ lastOutputStep+ "" maxDimStep: ""+ maxDimStep);
  }
  int newStep=(int)Math.round(extreme * maxDimStep);
  if ((newStep < 0) || (newStep > maxDimStep)) {
    log.error(""newStep wrong: "" + newStep + "" intensity: ""+ extreme);
  }
  if (newStep == 0) {
    if (log.isDebugEnabled()) {
      log.debug(""intensity "" + extreme + "" within current step, return"");
    }
    return;
  }
  X10Sequence out=new X10Sequence();
  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);
  tc.sendX10Sequence(out,null);
  lastOutputStep=newStep;
  if (log.isDebugEnabled()) {
    log.debug(""sendIntensity("" + extreme + "") house ""+ X10Sequence.houseValueToText(housecode)+ "" device ""+ devicecode+ "" newStep: ""+ newStep);
  }
}
",185,10,"intensity:extreme,sendIntensity:sendExtenna,",166,0.986193585395813,Beam
1181,,,150,10,,462,3.0351059714953106,0
1182,"default Document putAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field field : fields) {
    if (acceptableFieldNames.test(field.getName())) {
      setValue(field.getName(),field.getValue());
    }
  }
  return this;
}
","default Document PutAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field field : fields) {
    if (acceptableFieldNames.test(field.getName())) {
      setValue(field.getName(),field.getValue());
    }
  }
  return this;
}
",60,4,"putAll:PutAll,",8,0.03712293704350789,Beam
1183,,,63,4,,128,0.7139773845672608,0
1184,,,39,4,,201,1.5723305066426596,0
1185,,,85,6,,340,2.353869740168254,0
1186,"public static boolean isUriKey(String key){
  return key.endsWith("".url"") || key.endsWith("".uri"");
}
","public static boolean isUurikey(String key){
  return key.endsWith("".url"") || key.endsWith("".uri"");
}
",25,2,"isUriKey:isUurikey,",25,0.13441484371821086,Beam
1187,"private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}
","private Collection<ExtractedItemsCollection> filterItembyTier(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}
",96,6,"filterItemsByLevel:filterItembyTier,",50,0.257491934299469,Beam
1188,"public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnToUrl,returnToUrl);
}
","public AuthRequest authentigate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return authentigate(discoveries,returnToUrl,returnToUrl);
}
",26,3,"authenticate:authentigate,",4,0.0234485665957133,Beam
1189,"protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}
","protected void set(VisualTable tabELS){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=tabELS.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=tabELS.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=tabELS.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=tabELS.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}
",402,23,"sqrtLayout:set,labels:tabELS,",141,1.2489270289738974,Beam
1190,"public GeoDistanceBuilder addUnboundedFrom(String key,double from){
  ranges.add(new Range(key,from,null));
  return this;
}
","public GeoDistanceBuilder addUnbboundOn(String text,double offset){
  ranges.add(new Range(text,offset,null));
  return this;
}
",30,4,"addUnboundedFrom:addUnbboundOn,key:text,from:offset,",414,2.318546466032664,Beam
1191,"public boolean checkForRp(){
  return NullColumnValueGetter.isNotNullValue(getRpCopyName());
}
","public boolean checkForNvp(){
  return NullColumnValueGetter.isNotNullValue(getRpCopyName());
}
",17,1,"checkForRp:checkForNvp,",12,0.061244316895802814,Beam
1192,"public void close() throws IOException {
  flushBits();
  out.close();
}
","public void destroy() throws IOException {
  flushBits();
  out.destroy();
}
",19,2,"close:destroy,",5,0.027979381879170737,Beam
1194,"private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}
","private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] propys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    propys[k++]=reg.proxy;
  }
  return propys;
}
",73,6,"proxys:propys,",32,0.16763832966486614,Beam
1196,"public SimpleSetupPanel(Experiment exp){
  this();
  setExperiment(exp);
}
","public SimpleSetupArea(Experiment exp){
  this();
  setExperiment(exp);
}
",17,2,"SimpleSetupPanel:SimpleSetupArea,",5,0.018122553825378418,Beam
1197,"public void stop(){
  server.stop(0);
}
","public void close(){
  server.close(0);
}
",14,2,"stop:close,",3,0.019160727659861248,Beam
1199,,,87,7,,1616,9.814542265733083,0
1200,,,95,9,,765,3.3003543496131895,0
1201,"public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
","public static void build(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}
",31,3,"load:build,",6,0.02665863831837972,Beam
1202,,,124,7,,946,5.494283827145894,0
1203,,,108,4,,153,1.6345530907313028,0
1204,"private void stashRequestUser(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions=""{}"";
  }
}
","private void stashrequestAuth(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions=""{}"";
  }
}
",86,4,"stashRequestUser:stashrequestAuth,",46,0.37646094560623167,Beam
1205,"protected void addBottomComponent(Component bottomComponent){
  c.weighty=2;
  layout.setConstraints(bottomComponent,c);
  contentPanel.add(bottomComponent);
}
","protected void addTopButton(Component bottomComponent){
  c.weighty=2;
  layout.setConstraints(bottomComponent,c);
  contentPanel.add(bottomComponent);
}
",31,5,"addBottomComponent:addTopButton,",11,0.03576616843541463,Beam
1206,"protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}
","protected double nnSwitch(int c,char[] s,int endIndexS,char[] t,int endIndexN){
  if (c <= 0) {
    return getReturnValue(c);
  }
  if (Math.min(endIndexS + 1,endIndexN + 1) < c) {
    return getReturnValue(c);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * c + m_multY * endIndexS + m_multZ * endIndexN;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * nnSwitch(c,s,endIndexS - 1,t,endIndexN) + kernelHelper2(c,s,endIndexS,t,endIndexN);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}
",178,16,"kernelHelper:nnSwitch,endIndexT:endIndexN,n:c,",726,7.708433632055918,Beam
1207,"private static String unwrap(String expression){
  if (expression.startsWith(""(("")) {
    expression=expression.substring(expression.indexOf("")"") + 1,expression.length() - 1);
    if (expression.endsWith(""]"")) {
      expression=expression.substring(0,expression.lastIndexOf(""[""));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("".""));
    }
  }
  return expression;
}
","private static String unwrap(String operator){
  if (operator.startsWith(""(("")) {
    operator=operator.substring(operator.indexOf("")"") + 1,operator.length() - 1);
    if (operator.endsWith(""]"")) {
      operator=operator.substring(0,operator.lastIndexOf(""[""));
    }
 else {
      operator=operator.substring(0,operator.lastIndexOf("".""));
    }
  }
  return operator;
}
",94,2,"expression:operator,",7,0.06066341400146484,Beam
1209,,,172,9,,957,5.438393783569336,0
1210,,,60,4,,111,0.48120107253392536,0
1211,,,44,3,,296,1.5237895687421164,0
1212,"private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}
","private boolean isNotInArray(String str,String[] string){
  for (int i=0; i < string.length; i++) {
    if (str.equals(string[i])) {
      return false;
    }
  }
  return true;
}
",52,4,"array:string,",34,0.17707597812016804,Beam
1213,"void addAttributeValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
","void addPropertyValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}
",105,7,"addAttributeValues:addPropertyValues,",35,0.17466795841852825,Beam
1214,"public KafkaCluster usingDirectory(File dataDir){
  if (running)   throw new IllegalStateException(""Unable to add a broker when the cluster is already running"");
  if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) {
    throw new IllegalArgumentException(""The directory must be readable and writable"");
  }
  this.dataDir=dataDir;
  return this;
}
","public KafkaCluster UsingDirectory(File dataDir){
  if (running)   throw new IllegalStateException(""Unable to add a broker when the cluster is already running"");
  if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) {
    throw new IllegalArgumentException(""The directory must be readable and writable"");
  }
  this.dataDir=dataDir;
  return this;
}
",71,3,"usingDirectory:UsingDirectory,",4,0.02082132895787557,Beam
1215,"public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}
","public static Object callGeneric(Class clazz,String functionName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(functionName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(functionName + "" is not accessible"");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}
",87,6,"invokeStatic:callGeneric,methodName:functionName,",49,0.26736589670181277,Beam
1216,,,254,11,,1722,9.762528459231058,0
1217,,,61,4,,340,1.7941686312357585,0
1218,"private void showFilterDialog(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}
","private void showWidgetButton(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}
",55,4,"showFilterDialog:showWidgetButton,",42,0.16387675205866495,Beam
1219,,,179,9,,510,2.5195764978726705,0
1220,"public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  create(rpfFilePaths,outputFile,false);
}
","public void update(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  update(rpfFilePaths,outputFile,false);
}
",25,3,"create:update,",54,0.2225750207901001,Beam
1221,"public static void scaleRectAboutCenter(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}
","public static void scaleRectFitMaster(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}
",127,5,"scaleRectAboutCenter:scaleRectFitMaster,",14,0.10666670004526774,Beam
1222,"private static void processArgs(String[] args){
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.equals(""-o"")) {
      outputDir=args[++i];
    }
 else     if (arg.equals(""-spec"")) {
      unicodeData=args[++i];
    }
 else     if (arg.equals(""-language"")) {
      language=args[++i];
    }
 else     if (arg.equals(""-country"")) {
      country=args[++i];
    }
 else     if (arg.equals(""-valiant"")) {
      valiant=args[++i];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}
","private static void runFlags(String[] args){
  for (int v=0; v < args.length; v++) {
    String arg=args[v];
    if (arg.equals(""-o"")) {
      outputDir=args[++v];
    }
 else     if (arg.equals(""-spec"")) {
      unicodeData=args[++v];
    }
 else     if (arg.equals(""-language"")) {
      language=args[++v];
    }
 else     if (arg.equals(""-country"")) {
      country=args[++v];
    }
 else     if (arg.equals(""-valiant"")) {
      valiant=args[++v];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}
",150,10,"processArgs:runFlags,i:v,",146,1.02271302541097,Beam
1223,,,15,2,,83,0.4620013157526652,0
1224,,,163,16,,877,4.20469038883845,0
1225,"public void continueButtonActionPerformed(java.awt.event.ActionEvent e){
  if (testRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText(""Running Wraparound Test"");
      statusText1.setVisible(true);
    }
  }
}
","public void continueButtonActionPerued(java.awt.event.ActionEvent e){
  if (testRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText(""Running Wraparound Test"");
      statusText1.setVisible(true);
    }
  }
}
",47,6,"continueButtonActionPerformed:continueButtonActionPerued,",39,0.19867141644159952,Beam
1227,,,94,8,,912,4.841635159651438,0
1228,"private void loadMap(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
","private void readTable(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}
",58,6,"loadMap:readTable,",44,0.2437464674313863,Beam
1229,"void copyInto(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}
","void CopyIno(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}
",27,3,"copyInto:CopyIno,",20,0.10241212447484334,Beam
1230,,,172,5,,483,2.6295690973599752,0
1232,,,152,7,,927,4.0255697011947635,0
1233,"public synchronized void commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
","public synchronized void Commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}
",75,6,"commit:Commit,",5,0.03024009068806966,Beam
1236,,,89,11,,2243,12.89676092863083,0
1237,,,13,2,,109,0.42321803569793703,0
1238,"private Segment createDiskSegment(SegmentDescriptor descriptor){
  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());
  Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);
  descriptor.copyTo(buffer);
  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug(""Created segment: {}"",segment);
  return segment;
}
","private Segment createDiskFragments(SegmentDescriptor descryptore){
  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descryptore.id(),descryptore.version());
  Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descryptore.maxSegmentSize()),Integer.MAX_VALUE);
  descryptore.copyTo(buffer);
  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descryptore,createIndex(descryptore),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug(""Created segment: {}"",segment);
  return segment;
}
",122,8,"createDiskSegment:createDiskFragments,descriptor:descryptore,",59,0.34031578302383425,Beam
1239,"public void output(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}
","public void run(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}
",41,3,"output:run,",7,0.03793042103449504,Beam
1240,"private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
","private static void test(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format(""earlyEvents=%s, lateEvents=%s, "" + ""anytimeEvents=%s, actualEvents=%s"",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse(""Test setup error. Early and late overlap"",late.contains(ev));
    assertFalse(""Test setup error. Early and anytime overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse(""Test setup error. Late and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Late and any overlap"",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse(""Test setup error. Anytime and early overlap"",early.contains(ev));
    assertFalse(""Test setup error. Anytime and late overlap"",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + "" is in late list, but haven\'t seen all required "" + ""early events. ""+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + "" was not expected. "" + inputDesc);
  }
  if (!early.isEmpty())   fail(""Elements left in early: "" + early + "". ""+ inputDesc);
  if (!late.isEmpty())   fail(""Elements left in late: "" + late + "". ""+ inputDesc);
  if (!any.isEmpty())   fail(""Elements left in any: "" + any + "". ""+ inputDesc);
}
",337,11,"assertChangeEvents:test,",18,0.1712780237197876,Beam
1241,"@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
","@Override protected synchronized void flow(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException(""Write failed, file "" + getPath() + "" not mapped for I/O"");
  }
}
",60,4,"write:flow,",85,0.405143932501475,Beam
1242,"public String text(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}
","public String format(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}
",42,4,"text:format,",11,0.05102006991704305,Beam
1243,"public void stop(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blinkService) {
    blinkService.shutdownNow();
  }
}
","public void quit(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blinkService) {
    blinkService.shutdownNow();
  }
}
",41,3,"stop:quit,",7,0.05435052712758382,Beam
1244,"boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}
","boolean writeNext() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,""Flow Controlled"");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,""Sent: "" + totalSent + "" remaining: ""+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}
",161,9,"writeData:writeNext,",7,0.053155545393625894,Beam
1245,,,21,3,,288,1.3105294704437256,0
1246,"public int loadSigned16(int addr){
  return loadSigned16(addr,AccessSource.CODE);
}
","public int loadSigning32(int addr){
  return loadSigning32(addr,AccessSource.CODE);
}
",19,2,"loadSigned16:loadSigning32,",19,0.11702008644739786,Beam
1248,"private ImageElement(int AD_PrintFormatItem_ID){
  loadAttachment(AD_PrintFormatItem_ID);
}
","private ImageElement(int AD_PrintFormatElement_ID){
  loadAttachment(AD_PrintFormatElement_ID);
}
",13,2,"AD_PrintFormatItem_ID:AD_PrintFormatElement_ID,",4,0.02268151839574178,Beam
1249,,,34,4,,106,0.44898584683736165,0
1250,"public TimeSeriesMetricDeltaSet(Stream<Entry<Tags,MetricValue>> td){
  values_=Any2.right(td.collect(Collectors.toMap(null,null,null,null)));
}
","public TimeSeriesMetricsDeltaGet(Stream<Entry<Tags,MetricValue>> cd){
  values_=Any2.right(cd.collect(Collectors.toMap(null,null,null,null)));
}
",41,3,"TimeSeriesMetricDeltaSet:TimeSeriesMetricsDeltaGet,td:cd,",57,0.26210997104644773,Beam
1251,"public void proposeTree() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    i=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == i);
  final NodeRef iP=tree.getParent(i);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}
","public void decomposGraph() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    i=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == i);
  final NodeRef iP=tree.getParent(i);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException(""Root changes not allowed!"");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException(""move failed"");
  final NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}
",510,15,"proposeTree:decomposGraph,",29,0.15980631113052368,Beam
1252,"public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}
","public static void F(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}
",76,8,"f:F,",45,0.17784473896026612,Beam
1253,,,84,5,,675,2.9087180972099302,0
1254,"private boolean zzRefill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzPushbackPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzBuffer.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);
    zzBuffer=newBuffer;
  }
  final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}
","private boolean zzyFfill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzyBuilder,zzStartRead,zzyBuilder,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzPushbackPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzyBuilder.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzyBuilder,0,newBuffer,0,zzyBuilder.length);
    zzyBuilder=newBuffer;
  }
  final int numRead=zzReader.read(zzyBuilder,zzEndRead,zzyBuilder.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}
",143,10,"zzRefill:zzyFfill,zzBuffer:zzyBuilder,",178,1.0516322255134583,Beam
1255,"public boolean revisionContainsTemplateName(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}
","public boolean revisionContaintemplateNames(int prevRef,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(prevRef,Arrays.asList(new String[]{templateName}));
}
",33,3,"revisionContainsTemplateName:revisionContaintemplateNames,revId:prevRef,",99,0.5988649765650431,Beam
1256,"private FastConcurrentSkipListMap.Node<K,V> loNode(){
  if (lo == null)   return m.findFirst();
 else   if (loInclusive)   return m.findNear(lo,m.GT | m.EQ);
 else   return m.findNear(lo,m.GT);
}
","private FastConcurrentSkipListMap.Node<K,V> LoRoot(){
  if (lo == null)   return cache.findFirst();
 else   if (loInclusive)   return cache.findNear(lo,cache.GT | cache.EQ);
 else   return cache.findNear(lo,cache.GT);
}
",61,4,"loNode:LoRoot,m:cache,",383,2.347219689687093,Beam
1257,,,133,16,,472,3.210665726661682,0
1258,"public void load(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
","public void add(Element element,Object o){
  log.error(""load(Element, Object) called unexpectedly"");
}
",19,4,"load:add,",3,0.017194652557373048,Beam
1259,,,27,2,,245,1.2363157550493875,0
1260,,,71,5,,414,2.5569257299105326,0
1261,,,121,3,,255,2.154060212771098,0
1262,,,30,3,,421,1.576716136932373,0
1263,"public ControlFlowGraph run(CompilationUnitTree root,ProcessingEnvironment env,MethodTree tree,ClassTree classTree){
  UnderlyingAST underlyingAST=new CFGMethod(tree,classTree);
  return run(root,env,underlyingAST);
}
","public ControlFlowGraph un(CompilationUnitTree ok,ProcessingEnvironment env,MethodTree tree,ClassTree classTree){
  UnderlyingAST underlyingAST=new CFGMethod(tree,classTree);
  return un(ok,env,underlyingAST);
}
",39,6,"root:ok,run:un,",195,0.9034111181894938,Beam
1264,"public void testFloatValueNeg(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}
","public void assertNumberAmountPos(){
  String a=""-1238096483923847.6356789029578E+21"";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue(""incorrect value"",aNumber.floatValue() == result);
}
",40,4,"testFloatValueNeg:assertNumberAmountPos,",21,0.07504121065139771,Beam
1265,,,96,9,,307,1.4650373061498005,0
1266,"private void adjustBackingFileLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}
","private void adjustBackingBufferLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException(""Buffer null or empty!"");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}
",77,9,"adjustBackingFileLength:adjustBackingBufferLength,",4,0.02469756603240967,Beam
1267,"public String jsTypeName(TypeRef typeRef){
switch (typeRef.getKind()) {
case TYPE_MESSAGE:
    return ""Object"";
case TYPE_ENUM:
  return ""number"";
default :
{
  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());
  if (!Strings.isNullOrEmpty(name)) {
    return name;
  }
  throw new IllegalArgumentException(""unknown type kind: "" + typeRef.getKind());
}
}
}
","public String getObjectNames(TypeRef styleDef){
switch (styleDef.getKind()) {
case TYPE_MESEDGE:
    return ""Object"";
case TYPE_ENUM:
  return ""number"";
default :
{
  String name=PRIMITIVE_TYPE_NAMES.get(styleDef.getKind());
  if (!Strings.isNullOrEmpty(name)) {
    return name;
  }
  throw new IllegalArgumentException(""unknown type kind: "" + styleDef.getKind());
}
}
}
",77,5,"jsTypeName:getObjectNames,typeRef:styleDef,TYPE_MESSAGE:TYPE_MESEDGE,",295,2.5698314189910887,Beam
1268,"public void clear(){
  infoQueue.clear();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastAllocationOffset=allocationLength;
}
","public void drop(){
  infoQueue.drop();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastAllocationOffset=allocationLength;
}
",51,9,"clear:drop,",12,0.09836203654607137,Beam
1269,"private static double hackyAdjuster(double f){
  double tmp=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));
}
","private static double hackyAdjuster(double i){
  double tmp=Math.sqrt(1.0 - i);
  return (i <= 0.5) ? tmp : tmp + (0.01 * (i - 0.5));
}
",43,3,"f:i,",18,0.129799751440684,Beam
1270,"private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}
","private void drawHook(Canvas scanner){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=scanner.getSaveCount();
  hookPath.close();
  scanner.rotate(-45,rectF.centerX(),rectF.centerY());
  scanner.drawPath(hookPath,mHookPaint);
  scanner.restoreToCount(restoreCount);
}
",260,9,"canvas:scanner,",3,0.05828512907028198,Beam
1271,,,117,6,,507,2.7998340765635175,0
1272,"public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}
","public List<String> classified(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}
",168,13,"classify:classified,",3,0.016050549348195393,Beam
1273,"public void clear(){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  selection.clear();
  if (!oldSelection.isEmpty()) {
    fireSelectionChanged(oldSelection,selection);
  }
}
","public void remove(){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  selection.remove();
  if (!oldSelection.isEmpty()) {
    fireSelectionChanged(oldSelection,selection);
  }
}
",46,3,"clear:remove,",9,0.048496750990549724,Beam
1274,"public int add(T dl,int row){
  _list.add(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}
","public int push(T dl,int row){
  _list.push(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}
",31,4,"add:push,",4,0.02934884230295817,Beam
1275,"public static long calculateElapsedGC(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}
","public static long calculateElTotalAverage(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}
",33,4,"calculateElapsedGC:calculateElTotalAverage,",12,0.07379734516143799,Beam
1276,"static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}
","static TokenStream pack(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException(""offset gap of the provided analyzer should be 1 (field "" + fieldName + "")"");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}
",109,7,"wrap:pack,",100,0.7245594541231791,Beam
1277,,,261,11,,1387,14.330348523457845,0
1278,,,177,9,,304,2.6952579259872436,0
1279,,,12,1,,25,0.15185517072677612,0
1280,,,62,6,,427,2.57899694442749,0
1282,,,55,4,,432,3.263583795229594,0
1283,,,104,5,,501,3.6987465302149456,0
1284,"@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
","@Override public void docotyleDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}
",77,10,"doctypeDecl:docotyleDecl,",22,0.20247992674509685,Beam
1285,"protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}
","protected void wait(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.wait(sleepMillis,sleepNanos);
}
",23,3,"sleep:wait,",4,0.04284647305806478,Beam
1286,"public int retrieveRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}
","public int retrievingRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery(""SELECT COUNT(*) FROM "" + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}
",71,5,"retrieveRowCount:retrievingRowCount,",4,0.025796258449554445,Beam
1287,"public static void flush(){
  clearBuffer();
  try {
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public static void sync(){
  clearBuffer();
  try {
    out.sync();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",34,3,"flush:sync,",4,0.036043461163838705,Beam
1288,,,71,7,,671,5.41986000140508,0
1290,"public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}
","public static Uri addMessage2Ui(ContentResolver resolver,Uri description,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(description,values);
}
",169,11,"addMessageToUri:addMessage2Ui,uri:description,",1056,8.768814448515574,Beam
1291,"public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
","public VNXeCommandJob modifyLunitSync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}
",49,6,"modifyLunAsync:modifyLunitSync,",61,0.30768856604894,Beam
1292,,,18,2,,239,1.613389046986898,0
1293,"public long next(){
  long result=-1l;
  if (cache < 0L && bufferElements > 0) {
    result=getNextFromBuffer();
    bufferElements--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}
","public long iterator(){
  long grade=-1l;
  if (cache < 0L && bufferSizeodes > 0) {
    grade=getNextFromBuffer();
    bufferSizeodes--;
  }
 else {
    grade=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (grade > first || grade == -1L) {
      cs.remove(first);
      cache=grade;
      grade=first;
    }
  }
  if (grade == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < grade,EC.GENERAL);
  previous=grade;
  readElements++;
  return grade;
}
",132,8,"next:iterator,bufferElements:bufferSizeodes,result:grade,",330,3.377026546001434,Beam
1294,"public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}
","public String convertSWF2HTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret=""<html>"" + (headerstr.isEmpty() ? ""<body>"" : ""<header>"" + headerstr + ""</header><body>"") + out1.toString()+ ""</body></html>"";
  return ret;
}
",98,9,"convertSWFToHTML:convertSWF2HTML,",37,0.24825343290964763,Beam
1295,"private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){
  Graphics2D gPr=(Graphics2D)g2.create();
  Rectangle2D loc=anno.getLocation();
  gPr.translate(loc.getX(),loc.getY());
  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());
  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());
  pane.setSize(size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));
  pane.setCaretPosition(0);
  pane.paint(gPr);
  gPr.dispose();
}
","private void printAnnotationfromEdit(final WorkflowAnnotation Anos,final Graphics2D g2){
  Graphics2D gPr=(Graphics2D)g2.create();
  Rectangle2D loc=Anos.getLocation();
  gPr.translate(loc.getX(),loc.getY());
  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());
  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());
  pane.setSize(size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(Anos));
  pane.setCaretPosition(0);
  pane.paint(gPr);
  gPr.dispose();
}
",143,7,"printAnnotationFromEditor:printAnnotationfromEdit,anno:Anos,",155,1.0351534803708395,Beam
1296,"public ZookeeperEmbedded(int port){
  this.port=port;
  this.logDir=new File(System.getProperty(""java.io.tmpdir""),""zk/logs/zookeeper-test-"" + port);
}
","public ZookeeperBooted(int port){
  this.port=port;
  this.logDir=new File(System.getProperty(""java.io.tmpdir""),""zk/logs/zookeeper-test-"" + port);
}
",33,2,"ZookeeperEmbedded:ZookeeperBooted,",44,0.33420430024464926,Beam
1297,"public Matcher next() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matcher=matches.next();
  if (discard) {
    Pattern pattern=matcher.pattern();
    for (int n=0; n < patterns.length; n++) {
      if (patterns[n] == pattern) {
        patterns[n]=null;
        break;
      }
    }
  }
  return matcher;
}
","public Matcher search() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matcher=matches.search();
  if (discard) {
    Pattern pattern=matcher.pattern();
    for (int n=0; n < patterns.length; n++) {
      if (patterns[n] == pattern) {
        patterns[n]=null;
        break;
      }
    }
  }
  return matcher;
}
",92,7,"next:search,",21,0.1743051846822103,Beam
1298,,,37,3,,300,2.4772101243336997,0
1299,"public Set keySet(){
  return totalKeySet();
}
","public Set KeySet(){
  return totalKeySet();
}
",12,1,"keySet:KeySet,",7,0.05209184090296427,Beam
1300,"private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : document.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=document.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}
","private boolean transferObject(SearchDocument newDocument,SearchDocument subject,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : subject.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=subject.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}
",137,9,"copyDocument:transferObject,document:subject,",119,0.9705589493115743,Beam
1301,,,74,5,,441,3.331181263923645,0
1302,"static int firstIllegalCharacter(String source){
  for (int i=0; i < source.length(); i++) {
    if (isLegal(source.charAt(i)) == false) {
      return i;
    }
  }
  return -1;
}
","static int findIlLegalString(String source){
  for (int i=0; i < source.length(); i++) {
    if (isLegal(source.charAt(i)) == false) {
      return i;
    }
  }
  return -1;
}
",52,3,"firstIllegalCharacter:findIlLegalString,",22,0.12679131825764975,Beam
1303,,,35,4,,795,5.134029817581177,0
1304,,,91,6,,198,1.8772751053174337,0
1305,"public static boolean hasBinding(Injector injector,Key<?> key){
  Binding<?> binding=getBinding(injector,key);
  return binding != null;
}
","public static boolean hasWelling(Injector instructor,Key<?> self){
  Binding<?> binding=getBinding(instructor,self);
  return binding != null;
}
",34,4,"key:self,hasBinding:hasWelling,injector:instructor,",400,3.8137128790219625,Beam
1306,"protected abstract boolean validateNumber(ConversationContext context,Number input);
","protected abstract boolean valateInteger(ConversationContext context,Number input);
",12,3,"validateNumber:valateInteger,",36,0.22996776103973388,Beam
1307,,,32,6,,237,1.8773032983144124,0
1308,,,1226,33,,1977,19.721456344922384,0
1309,"void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}
","void fixCompatibility(View result){
  Queue<View> queue=new LinkedList<View>();
  queue.add(result);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}
",98,6,"root:result,",8,0.07973280350367228,Beam
1310,"private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
","private void doNormalCommandLineList(List<String> commandLineList,List<String> junctionOptions,Path classpath){
  commandLineList.add(""--classpath"");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add(""-j"");
    commandLineList.addAll(junctionOptions);
  }
  if (destDir != null) {
    commandLineList.add(""-d"");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add(""--encoding"");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add(""-e"");
  }
  if (parameters) {
    commandLineList.add(""--parameters"");
  }
  if (useIndy) {
    commandLineList.add(""--indy"");
  }
  if (scriptBaseClass != null) {
    commandLineList.add(""-b"");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add(""--configscript"");
    commandLineList.add(configscript);
  }
}
",190,12,"jointOptions:junctionOptions,",3,0.045076386133829756,Beam
1311,,,285,11,,989,7.778843518098196,0
1312,,,28,4,,110,0.4566949764887492,0
1313,"public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {
  Set<String> members=new HashSet<>();
  String siteId=getSiteId(ssoToken,siteName);
  if (siteId != null) {
    Set<String> allServers=ServerConfiguration.getServers(ssoToken);
    for (    String svr : allServers) {
      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {
        members.add(svr);
      }
    }
  }
  return members;
}
","public static Set<String> listSlUsers(SSOToken sosaToken,String itePath) throws SMSException, SSOException, ConfigurationException {
  Set<String> members=new HashSet<>();
  String siteId=getSiteId(sosaToken,itePath);
  if (siteId != null) {
    Set<String> allSerients=ServerConfiguration.getServers(sosaToken);
    for (    String svr : allSerients) {
      if (ServerConfiguration.belongToSite(sosaToken,svr,itePath)) {
        members.add(svr);
      }
    }
  }
  return members;
}
",100,7,"listServers:listSlUsers,ssoToken:sosaToken,siteName:itePath,allServers:allSerients,",496,2.9049192587534587,Beam
1314,"void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}
","void onRemixed(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}
",176,15,"onMoved:onRemixed,",10,0.07144828637440999,Beam
1315,"public StandardXYItemLabelGenerator(){
  this(DEFAULT_ITEM_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());
}
","public StandardXYItemLabelVariating(){
  this(DEFAULT_ITEM_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());
}
",23,1,"StandardXYItemLabelGenerator:StandardXYItemLabelVariating,",15,0.07194101413091024,Beam
1316,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
","public void addFooterView(View ov,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=ov;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}
",66,8,"v:ov,",60,1.6698261698087056,Beam
1318,,,54,4,,345,2.872760534286499,0
1319,"public QDate(){
  this(_gmtTimeZone);
}
","public CHdate(){
  this(_gmtTimeFormat);
}
",11,2,"QDate:CHdate,_gmtTimeZone:_gmtTimeFormat,",15,0.06552581389745077,Beam
1320,"public void addListener(final IFilterPanelListener<T> listener){
  m_listeners.addListener(listener);
}
","public void setAdapter(final IFilterPanelListener<T> anyter){
  m_listeners.setAdapter(anyter);
}
",20,3,"addListener:setAdapter,listener:anyter,",75,0.3282667597134908,Beam
1321,"public static String padLeft(String str,int totalChars){
  if (str == null)   str=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append("" "");
  }
  sb.append(str);
  return sb.toString();
}
","public static String paddingL(String pr,int totalchans){
  if (pr == null)   pr=""null"";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalchans - pr.length(); i++) {
    sb.append("" "");
  }
  sb.append(pr);
  return sb.toString();
}
",74,5,"totalChars:totalchans,str:pr,padLeft:paddingL,",307,2.333709172407786,Beam
1322,,,75,2,,197,0.9959746638933817,0
1323,,,48,3,,478,2.422819276650747,0
1324,,,42,6,,189,0.8576149384180705,0
1325,,,30,2,,266,1.5396411180496217,0
1326,,,132,5,,1051,7.225006949901581,0
1327,"@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
","@Override public void ignorableWhitespace(XMLString term,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(term.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(term.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(term.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}
",155,15,"text:term,",23,0.16806549628575643,Beam
1328,"public NativeRunner(File eclipsec){
  this.eclipsec=Objects.requireNonNull(eclipsec);
}
","public NativeResult(File eclipsec){
  this.eclipsec=Objects.requireNonNull(eclipsec);
}
",19,2,"NativeRunner:NativeResult,",5,0.019710818926493328,Beam
1329,"private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + read + "" of ""+ n);
    }
  }
}
","private static void send(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int send=0;
  int res=0;
  while (send < n) {
    res=in.send(buf,send + pos,n - send);
    if (res > 0) {
      send+=res;
    }
 else {
      throw new IOException(""Read failed, got "" + send + "" of ""+ n);
    }
  }
}
",86,6,"read:send,",48,0.3156069795290629,Beam
1330,"private void pushContext(BaseContext c){
  contextStack.push(c);
}
","private void stackContext(BaseContext c){
  contextStack.push(c);
}
",16,3,"pushContext:stackContext,",4,0.016112633546193442,Beam
1331,,,17,3,,60,0.3026039441426595,0
1332,"private void storePassword(String password){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),password);
  }
}
","private void StorePassword(String string){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),string);
  }
}
",30,4,"storePassword:StorePassword,password:string,",78,0.3775826970736186,Beam
1333,,,22,3,,461,2.3014925956726073,0
1334,,,120,6,,1481,9.993788210550944,0
1335,"public boolean needPreloadKey(int idx){
  return preloadKeys != null && preloadKeys.get(idx);
}
","public boolean hasPreloadKey(int idx){
  return preloadKeys != null && preloadKeys.get(idx);
}
",21,3,"needPreloadKey:hasPreloadKey,",3,0.017500309149424235,Beam
1337,,,36,3,,124,0.7752084930737814,0
1338,"private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}
","private void divide(int[] idx,double[] p,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=p[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(p,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (p[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,p,ret,start,pos,depth - 1);
  divide(idx,p,ret,pos,end,depth - 1);
}
",274,14,"data:p,",80,0.6648529728253683,Beam
1341,"private void displayEasterEgg(CommandSender sender){
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§6\\u2592§6\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§8\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§6\\u2592§6\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
}
","private void sendEastersEgg(CommandSender sender){
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§c\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§c\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§4\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§4\\u2592§4\\u2592§6\\u2592§6\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§0\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§4\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§8\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§8\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§6\\u2592§6\\u2592§6\\u2592§6\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§6\\u2592§6\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§8\\u2592§8\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§8\\u2592§8\\u2592§f\\u2592§7\\u2592§f\\u2592§7\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§4\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§4\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§f\\u2592§f\\u2592§7\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§4\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§8\\u2592§8\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§0\\u2592§0\\u2592§0\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
  sender.sendMessage(StringEscapeUtils.unescapeJava(""§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§7\\u2592§5\\u2592§5\\u2592§5\\u2592§5\\u2592§7\\u2592§r""));
}
",393,2,"displayEasterEgg:sendEastersEgg,",38,0.31672157446543375,Beam
1342,,,79,4,,376,1.7508140206336975,0
1343,"@Override public void perform(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}
","@Override public void performed(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}
",148,6,"perform:performed,",4,0.030787638823191323,Beam
1344,"public boolean isLandingPage(URL url){
  if (url.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(url) != """";
  }
}
","public boolean islandingpage(URL rule){
  if (rule.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(rule) != """";
  }
}
",35,2,"isLandingPage:islandingpage,url:rule,",62,0.37937893470128375,Beam
1345,,,199,15,,1306,9.370114489396412,0
1347,,,12,2,,60,0.295842178662618,0
1348,"protected void createFromHValues(int[] hValues,int partitions){
  Arrays.sort(hValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / partitions);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}
","protected void createFromHValues(int[] rhValues,int partitions){
  Arrays.sort(rhValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * rhValues.length / partitions);
    this.splits[i]=quantile == rhValues.length ? maxH : rhValues[quantile];
  }
}
",97,6,"hValues:rhValues,",34,0.23583681186040242,Beam
1349,"public static String encode(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    encode(dLat,result);
    encode(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}
","public static String enge(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    enge(dLat,result);
    enge(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}
",113,10,"encode:enge,",7,0.04424504439036051,Beam
1350,,,82,7,,686,4.042630775769552,0
1351,"private static void writeSpaces(Writer out,int amt) throws IOException {
  while (amt > 0) {
    out.write(' ');
    amt--;
  }
}
","private static void WritePlace(Writer out,int ayte) throws IOException {
  while (ayte > 0) {
    out.write(' ');
    ayte--;
  }
}
",33,3,"writeSpaces:WritePlace,amt:ayte,",153,0.7983222444852193,Beam
1352,"private boolean isPageBreak(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}
","private boolean isLineBreak(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}
",74,5,"isPageBreak:isLineBreak,",4,0.014850358168284098,Beam
1353,,,34,3,,193,1.212892758846283,0
1354,"public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}
","public void setShortWord(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}
",43,5,"displayInfoLine:setShortWord,",72,0.3101295987764994,Beam
1355,"public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}
","public void insertElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}
",60,4,"addElement:insertElement,",32,0.15720456441243488,Beam
1356,,,52,5,,338,1.6685615102450053,0
1357,,,96,6,,441,3.019471744696299,0
1358,"public static String array2hex(final byte[] array){
  return byteArray2String(array,""0x"","", "",true,16);
}
","public static String array_oct(final byte[] function){
  return byteArray2String(function,""0x"","", "",true,16);
}
",27,2,"array:function,array2hex:array_oct,",130,0.8795865893363952,Beam
1359,"public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}
","public static Vector tokenizeArray(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeArray(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}
",169,8,"tokenizeString:tokenizeArray,",9,0.05629633665084839,Beam
1360,"protected void removeClassifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}
","protected void removeClassifiers(int[] idges){
  int i;
  if (idges == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=idges.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(idges[i]);
  }
  setModified(true);
}
",63,4,"indices:idges,",6,0.04599833885828654,Beam
1361,"protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {
  String setGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String setUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return setGroup + "" && "" + setUser+ "" && ""+ chownCommand+ "" && ""+ command+ "" && ""+ chownCommand;
}
","protected String wrapMacTask(String project) throws IOException, InterruptedException {
  String endGroup=""export GROUP_NAME=`(getent group "" + getGid() + "" || (groupadd -g ""+ getGid()+ "" user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String scUser=""export USER_NAME=`(getent passwd "" + getUid() + "" || (useradd -u ""+ getUid()+ "" -g ${GROUP_NAME} user && echo user:x:""+ getGid()+ "")) | cut -d: -f1`"";
  String chownCommand=""chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"";
  return endGroup + "" && "" + scUser+ "" && ""+ chownCommand+ "" && ""+ project+ "" && ""+ chownCommand;
}
",83,5,"command:project,wrapLinuxCommand:wrapMacTask,setGroup:endGroup,setUser:scUser,",290,2.032912023862203,Beam
1362,,,121,6,,169,1.4030330538749696,0
1363,,,61,4,,284,1.7816317598025004,0
1364,"boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){
  if (!window.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=window.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isStateChange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
","boolean isPowerChanged(XDecoratedPeer window,XPropertyEvent o){
  if (!window.isShowing()) {
    stateLog.finer(""Window is not showing"");
    return false;
  }
  int wm_state=window.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer(""WithdrawnState"");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer(""Window WM_STATE is "" + wm_state);
    }
  }
  boolean is_state_change=false;
  if (o.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isPowerChanged(o);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + "": is state changed = "" + is_state_change);
    }
  }
  return is_state_change;
}
",165,7,"isStateChange:isPowerChanged,e:o,",346,2.685171898206075,Beam
1365,"public Prototype undump(InputStream stream,String chunkname) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(stream,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}
","public Prototype undump(InputStream upload,String chunkname) throws IOException {
  if (upload.read() != LUA_SIGNATURE[0] || upload.read() != LUA_SIGNATURE[1] || upload.read() != LUA_SIGNATURE[2] || upload.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(upload,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError(""unsupported int size"");
}
return s.loadFunction(LuaString.valueOf(sname));
}
",129,9,"stream:upload,",24,0.1700970729192098,Beam
1366,,,26,3,,603,2.8333093802134197,0
1367,,,140,10,,395,2.333520551522573,0
1368,"public boolean add(symbol sym) throws internal_error {
  Object previous;
  not_null(sym);
  previous=_all.put(sym.name(),sym);
  return previous == null;
}
","public boolean index(symbol sem) throws internal_error {
  Object previous;
  not_null(sem);
  previous=_all.put(sem.name(),sem);
  return previous == null;
}
",39,4,"add:index,sym:sem,",65,0.3625591238339742,Beam
1369,"public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileProjects(Arrays.asList(new File(""."")),projects,Collections.emptyList(),issueAcceptor);
}
","public void compileDevelopFiles(List<File> packs,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileDevelopFiles(Arrays.asList(new File(""."")),packs,Collections.emptyList(),issueAcceptor);
}
",41,3,"compileProjects:compileDevelopFiles,projects:packs,",110,0.4716119607289632,Beam
1370,,,87,5,,686,3.50635693470637,0
1371,,,132,10,,361,2.329016184806824,0
1372,,,151,13,,317,2.837075916926066,0
1373,,,262,13,,1307,9.45260717868805,0
1375,,,123,5,,595,5.086438977718354,0
1376,"public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (entries) {
    entries.remove(alias.toLowerCase(Locale.ENGLISH));
  }
}
","public void dodeleteConnection(String id) throws KeyStoreException {
synchronized (entries) {
    entries.remove(id.toLowerCase(Locale.ENGLISH));
  }
}
",31,3,"engineDeleteEntry:dodeleteConnection,alias:id,",167,1.2975937565167746,Beam
1377,"@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}
","@SuppressWarnings(""unchecked"") private HashMap<String,DBObject> loadDBObjects(Class objectName){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectName);
  String objectToLoad=s_logger.localizeMessage(""object"");
  String objectsToLoad=s_logger.localizeMessage(""objects"");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,""loadDBObjects"",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,""OBJECT_NAME"");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectName,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,""dbObjectsLoaded"",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}
",363,17,"objectClass:objectName,",4,0.05445320208867391,Beam
1378,"protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable {
  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}
","protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForStageCommpletion(String documentSelfLink,Class<T> type) throws Throwable {
  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}
",67,3,"waitForTaskCompletion:waitForStageCommpletion,",31,0.2536703149477641,Beam
1379,,,44,3,,98,0.4163537542025248,0
1380,"private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
","private static AlgorithmParameterSpec algorithmParameterConfig(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}
",45,3,"algorithmParameterSpec:algorithmParameterConfig,",4,0.027237184842427573,Beam
1381,"public StringList plus(String... args){
  StringList newList=new StringList();
  newList.addAll(this);
  newList.addAll(Arrays.asList(args));
  return newList;
}
","public StringList combine(String... args){
  StringList NewList=new StringList();
  NewList.addAll(this);
  NewList.addAll(Arrays.asList(args));
  return NewList;
}
",40,3,"plus:combine,newList:NewList,",51,0.23090691169102986,Beam
1382,,,34,5,,508,2.5320755441983542,0
1383,"public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}
","public static <T>UnaryOperator<List<T>> form(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> Formaster,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,Formaster) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}
",85,6,"from:form,formatter:Formaster,",734,4.066892870267233,Beam
1384,"private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
","private void setup(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}
",46,2,"init:setup,",4,0.02813142935434977,Beam
1385,,,103,7,,351,1.5521869619687398,0
1386,"public List<String> reset(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
","public List<String> update(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}
",65,4,"reset:update,",39,0.20488118330637614,Beam
1387,,,50,4,,245,1.5718093474706014,0
1388,,,71,5,,215,1.2209567070007323,0
1389,,,84,8,,1408,9.134997669855753,0
1390,,,35,3,,409,2.1914375185966493,0
1391,"public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.add(item);
}
","public void set(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException(""incompatible item alignment"");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""item == null"");
  }
  items.set(item);
}
",58,3,"add:set,",4,0.03058194319407145,Beam
1392,"private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}
","private static void drawPattern(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawPattern(gl,c);
break;
default :
throw new Error(""Error while drawing AWT shape. "" + ""Path iterator setment not handled:"" + res);
}
it.next();
}
}
",246,9,"drawShape:drawPattern,",66,0.33137733936309816,Beam
1393,"private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}
","private static boolean overlap(Rectangle api,Rectangle lb,Rectangle gap){
  if (api.intersects(lb)) {
    gap.width=0;
    return false;
  }
  int ax1=api.x;
  int ax2=api.x + api.width;
  int ay1=api.y;
  int ay2=api.y + api.height;
  int bx1=lb.x;
  int bx2=lb.x + lb.width;
  int by1=lb.y;
  int by2=lb.y + lb.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}
",270,14,"calculateGap:overlap,b:lb,a:api,",597,4.494700789451599,Beam
1394,,,122,6,,739,4.147777672608694,0
1395,"public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
","public void destroy() throws IOException {
  if (writer != null)   writer.flushBuffer();
}
",21,2,"close:destroy,",7,0.02778238852818807,Beam
1396,"public void rebuildPanel(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
","public void reloadPlugin(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}
",61,5,"rebuildPanel:reloadPlugin,",12,0.06343162059783936,Beam
1397,,,96,4,,97,0.4111670970916748,0
1398,,,17,2,,279,2.3798983693122864,0
1399,,,29,3,,265,1.3019387364387511,0
1400,,,103,5,,146,0.6520486911137898,0
1401,"public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}
","public JarInfo createJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException(""loadJar caught: "" + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException(""JAR file is corrupt or empty"");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}
",239,14,"loadJar:createJar,",5,0.03916767835617065,Beam
1402,"@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){
  return isInsideSoftWrap(visual,false);
}
","@Override public boolean isInsideSoftwap(@NotNull VisualPosition window){
  return isInsideSoftwap(window,false);
}
",21,2,"isInsideSoftWrap:isInsideSoftwap,visual:window,",211,1.1794868071873983,Beam
1403,"@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}
","@Override protected String dateFormatFormat(DateTimeData product){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,product.month,2);
  append(message,(char)product.utc,0);
  return message.toString();
}
",66,3,"date:product,dateToString:dateFormatFormat,",63,0.3422624389330546,Beam
1404,"public boolean clear(){
  try {
    list.clear();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
","public boolean clean(){
  try {
    list.clean();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}
",33,2,"clear:clean,",3,0.02270866632461548,Beam
1405,"public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}
","public void config(String sample,HiddenAttribute attribute,Object value){
  config(sample,attribute.toString(),value);
}
",28,4,"put:config,",104,0.4436742862065633,Beam
1406,,,180,8,,266,1.7637712478637695,0
1407,,,57,5,,217,0.9809132893880208,0
1408,,,80,4,,383,2.052303496996562,0
1409,"void start(){
  this.running=true;
  Thread thread=new Thread(this,""IceConnector@"" + hashCode());
  thread.setDaemon(true);
  thread.start();
}
","void launch(){
  this.running=true;
  Thread thread=new Thread(this,""IceConnector@"" + hashCode());
  thread.setDaemon(true);
  thread.launch();
}
",40,2,"start:launch,",3,0.022297867139180503,Beam
1410,"private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
","private Object findParcel(@NonNull byte[] propertyArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(propertyArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,""syncEvent error: "" + e.getMessage());
  }
  return null;
}
",88,6,"objectArray:propertyArray,",9,0.05341375668843587,Beam
1411,"@Override public void addAttribute(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}
","@Override public void putMember(String name,float scale){
  String str=Float.toString(scale);
  if (str.endsWith("".0""))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}
",59,5,"addAttribute:putMember,value:scale,",134,0.656995948155721,Beam
1412,"public void adjustIndentation(int delta){
  if (delta < 0) {
    indentationLevel=Math.max(0,indentationLevel + delta);
  }
 else {
    indentationLevel+=delta;
  }
}
","public void adjustIndentsations(int mlux){
  if (mlux < 0) {
    indentationLevel=Math.max(0,indentationLevel + mlux);
  }
 else {
    indentationLevel+=mlux;
  }
}
",37,3,"adjustIndentation:adjustIndentsations,delta:mlux,",113,0.7265706578890483,Beam
1413,,,50,5,,1054,7.0930821895599365,0
1414,"protected void generateRandomPopulation(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}
","protected void generateGenerPool(int population_size){
  logger.debug(""Creating random population"");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug(""Created "" + population.size() + "" individuals"");
}
",92,8,"generateRandomPopulation:generateGenerPool,",17,0.07595544656117757,Beam
1415,"public static int computeStringWidth(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}
","public static int compateTextSize(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}
",25,3,"computeStringWidth:compateTextSize,",47,0.24464173316955568,Beam
1416,,,54,4,,253,1.3048628369967143,0
1417,"private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));
    mat[i]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}
","private double[] CalcVariableLoEF(Variogram Variography,KrigingPoint p,List<KrigingPoint> nnPoints){
  int n=nnPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(nnPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(nnPoints.get(i).y - p.y,2)));
    mat[i]=getTheoreticalSVValue(dist,Variography);
  }
  mat[n]=1;
  return mat;
}
",142,8,"NNPoints:nnPoints,variogram:Variography,CalcVariableCoef:CalcVariableLoEF,",617,4.973059399922689,Beam
1418,"public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}
","public boolean addProperty(OwlProperty definition){
  definition.addRestriction(this);
  return properties.add(definition);
}
",24,3,"property:definition,",17,0.0837269107500712,Beam
1419,,,41,4,,600,9.690087974071503,0
1420,,,59,5,,246,1.3620629827181499,0
1421,"public void write(int c) throws IOException {
  if (_output == null)   throw new IOException(""Writer closed"");
  _output.append((char)c);
}
","public void encode(int p) throws IOException {
  if (_output == null)   throw new IOException(""Writer closed"");
  _output.append((char)p);
}
",34,3,"write:encode,c:p,",88,0.3792745987574259,Beam
1422,"public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,""fail "" + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}
","public boolean ToFail(){
  LifecycleState grade;
synchronized (this) {
    grade=_state;
    if (grade.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (__level != null && __level.isLoggable(_level))   __level.log(_level,""fail "" + _name);
  notifyListeners(grade,FAILED);
  _failCount++;
  return true;
}
",82,9,"toFail:ToFail,_log:__level,state:grade,",180,1.1934543569882712,Beam
1423,"public DiskStoreFactory createDiskStoreFactory(){
  return new DiskStoreFactoryImpl(this);
}
","public DiskStoreFactory createDiskStoreInterface(){
  return new DiskStoreFactoryImpl(this);
}
",14,1,"createDiskStoreFactory:createDiskStoreInterface,",4,0.020114600658416748,Beam
1424,"public IdsQueryBuilder addIds(String... ids){
  values.addAll(Arrays.asList(ids));
  return this;
}
","public IdsQueryBuilder addIds(String... ges){
  values.addAll(Arrays.asList(ges));
  return this;
}
",25,3,"ids:ges,",27,0.1468876560529073,Beam
1425,,,139,14,,1819,9.728397266070049,0
1426,,,55,4,,142,0.7696014046669006,0
1427,"public QuickActionView addAction(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
","public QuickActionView setButton(Action action){
  checkShown();
  mActions.add(action);
  return this;
}
",23,3,"addAction:setButton,",8,0.031178176403045654,Beam
1428,"public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}
","public static void calctLineStorage(Paint faints,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  faints.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}
",71,6,"paint:faints,calcTextSize:calctLineStorage,",126,1.029355239868164,Beam
1429,,,304,11,,925,7.451736319065094,0
1430,,,38,3,,182,1.2572288751602172,0
1431,,,89,5,,947,6.266200753053029,0
1432,"public static void insertIntoCombo(JComboBox combo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  combo.setSelectedIndex(0);
}
","public static void insertIntoCombo(JComboBox combbo,Object q){
  MutableComboBoxModel model=(MutableComboBoxModel)combbo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(q,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(q)) {
    return;
  }
  model.removeElement(q);
  model.insertElementAt(q,0);
  combbo.setSelectedIndex(0);
}
",94,5,"combo:combbo,item:q,",218,1.4955945094426473,Beam
1433,"private void blackmanHarris4sMin(int size){
  int start=(windowFunction.length - size) / 2;
  int stop=(windowFunction.length + size) / 2;
  double scale=1.0 / (double)size / 0.36;
  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));
}
","private void blackmanHarris4sideAverage(int size){
  int start=(windowFunction.length - size) / 2;
  int stop=(windowFunction.length + size) / 2;
  double scale=1.0 / (double)size / 0.36;
  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));
}
",118,8,"blackmanHarris4sMin:blackmanHarris4sideAverage,",50,0.6054577231407166,Beam
1434,,,14,1,,49,0.1669882337252299,0
1435,,,192,8,,1051,8.523472177982331,0
1436,"public List<User> loadAllDeepFromCursor(Cursor cursor){
  int count=cursor.getCount();
  List<User> list=new ArrayList<User>(count);
  if (cursor.moveToFirst()) {
    if (identityScope != null) {
      identityScope.lock();
      identityScope.reserveRoom(count);
    }
    try {
      do {
        list.add(loadCurrentDeep(cursor,false));
      }
 while (cursor.moveToNext());
    }
  finally {
      if (identityScope != null) {
        identityScope.unlock();
      }
    }
  }
  return list;
}
","public List<User> loadAllDeepWithcrawl(Cursor cursor){
  int count=cursor.getCount();
  List<User> left=new ArrayList<User>(count);
  if (cursor.moveToFirst()) {
    if (identityScope != null) {
      identityScope.lock();
      identityScope.reserveRoom(count);
    }
    try {
      do {
        left.add(loadCurrentDeep(cursor,false));
      }
 while (cursor.moveToNext());
    }
  finally {
      if (identityScope != null) {
        identityScope.unlock();
      }
    }
  }
  return left;
}
",114,5,"loadAllDeepFromCursor:loadAllDeepWithcrawl,list:left,",293,1.7808163046836853,Beam
1437,"private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}
","private ArrayList<IconMarker> createIconMarklers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}
",160,3,"createIconMarkers:createIconMarklers,",4,0.02388874292373657,Beam
1438,"public UUID(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}
","public URBI(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}
",27,3,"UUID:URBI,",9,0.04119959274927775,Beam
1439,"@Override public boolean domainMatch(final String host,final String domain){
  return host.endsWith(domain);
}
","@Override public boolean domainMatch(final String host,final String dom){
  return host.endsWith(dom);
}
",24,3,"domain:dom,",12,0.07966886758804322,Beam
1440,,,67,4,,290,1.6400687138239542,0
1441,"public static <T>T decodeFromBase64(Coder<T> coder,String encodedValue) throws CoderException {
  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encodedValue)),Coder.Context.OUTER);
}
","public static <T>T decodeWithBase64(Coder<T> coder,String encdedImage) throws CoderException {
  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encdedImage)),Coder.Context.OUTER);
}
",44,3,"encodedValue:encdedImage,decodeFromBase64:decodeWithBase64,",233,1.534236447016398,Beam
1442,"public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}
","public synchronized void entry(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}
",120,7,"insert:entry,",16,0.08415516217549641,Beam
1443,"@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    output.writeString(s);
  }
}
","@Override public void write(Kryo kryo,Output page){
  int size=index.size();
  page.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException(""Cannot serialize null string at index "" + Integer.toString(i));
    }
    page.writeString(s);
  }
}
",89,7,"output:page,",11,0.07457997798919677,Beam
1444,,,74,2,,300,2.3744024991989137,0
1446,"public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}
","public static String truncate(String service,int length){
  if (service.length() > length) {
    service=service.substring(0,length);
  }
  return service;
}
",39,3,"string:service,",50,0.27360899845759074,Beam
1447,,,140,10,,589,5.003691426912943,0
1448,"public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
","public void train(Set<String> sFileFiles){
  Iterator<String> iFile=sFileFiles.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}
",53,5,"sFileNames:sFileFiles,",4,0.030408982435862222,Beam
1449,,,135,7,,218,1.415961790084839,0
1450,,,117,10,,731,3.4489803393681844,0
1452,"public ExecutorService shutdown(){
  pool.shutdown();
  return pool;
}
","public ExecutorService shutdown(){
  thread.shutdown();
  return thread;
}
",16,2,"pool:thread,",48,0.19416552384694416,Beam
1453,,,381,12,,322,3.1865463058153787,0
1454,,,34,3,,237,1.4332987387975058,0
1455,,,90,6,,401,4.200513911247254,0
1456,,,55,4,,352,2.488585019111633,0
1457,"public void gotoFrame(int frameNumber) throws IOException {
  print(""gotoFrame"",new String[]{Integer.toString(frameNumber)});
}
","public void gotoFrames(int frameNumber) throws IOException {
  print(""gotoFrame"",new String[]{Integer.toString(frameNumber)});
}
",29,2,"gotoFrame:gotoFrames,",22,0.13769803841908773,Beam
1458,"static boolean causedByRDE(DiskAccessException dae){
  boolean result=false;
  if (dae != null) {
    Throwable cause=dae.getCause();
    while (cause != null) {
      if (cause instanceof RegionDestroyedException) {
        result=true;
        break;
      }
      cause=cause.getCause();
    }
  }
  return result;
}
","static boolean CausedBySRCE(DiskAccessException dae){
  boolean result=false;
  if (dae != null) {
    Throwable cause=dae.getCause();
    while (cause != null) {
      if (cause instanceof RegionDestroyedException) {
        result=true;
        break;
      }
      cause=cause.getCause();
    }
  }
  return result;
}
",64,4,"causedByRDE:CausedBySRCE,",10,0.08214799165725709,Beam
1459,,,12,1,,17,0.0901801864306132,0
1460,"public synchronized int add(IAudioProcessor processor){
  processors.add(processor);
  buildFinalProcessor();
  return processors.indexOf(processor);
}
","public synchronized int shift(IAudioProcessor processor){
  processors.shift(processor);
  buildFinalProcessor();
  return processors.indexOf(processor);
}
",29,3,"add:shift,",18,0.12044074535369872,Beam
1461,,,44,5,,117,0.6186575293540955,0
1462,"private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}
","private static final File[] deccod(String dist){
  if (dist == null || dist.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(dist,"";"");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}
",100,5,"src:dist,encode:deccod,",70,0.363326903184255,Beam
1463,,,49,4,,1076,10.487828199068705,0
1464,"public static long runMultiThreaded(Iterable<Callable<?>> calls,GridTestSafeThreadFactory threadFactory) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException(""Failed to start new threads (test is being stopped)."");
  Collection<Thread> threads=new ArrayList<>();
  long time;
  try {
    for (    Callable<?> call : calls)     threads.add(threadFactory.newThread(call));
    time=System.currentTimeMillis();
    for (    Thread t : threads)     t.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Thread t : threads)   t.join();
  time=System.currentTimeMillis() - time;
  threadFactory.checkError();
  return time;
}
","public static long runMultiThreaded(Iterable<Callable<?>> cakes,GridTestSafeThreadFactory threadFactory) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException(""Failed to start new threads (test is being stopped)."");
  Collection<Thread> threads=new ArrayList<>();
  long time;
  try {
    for (    Callable<?> call : cakes)     threads.add(threadFactory.newThread(call));
    time=System.currentTimeMillis();
    for (    Thread t : threads)     t.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Thread t : threads)   t.join();
  time=System.currentTimeMillis() - time;
  threadFactory.checkError();
  return time;
}
",140,8,"calls:cakes,",49,0.3484669764836629,Beam
1465,,,140,8,,813,5.125345555941264,0
1466,,,36,2,,80,0.37461084922154747,0
1467,,,79,5,,322,1.2966666062672934,0
1468,"public SELECT(@NonNull String... columns){
  if (columns == null) {
    throw new NullPointerException(""SELECT: Columns are null"");
  }
  if (columns.length == 0)   throw new IllegalArgumentException(""At least on column is required"");
  StringBuilder builder=new StringBuilder(""SELECT "");
  for (int i=0; i < columns.length; i++) {
    builder.append(columns[i]);
    if (i != (columns.length - 1))     builder.append("", "");
  }
  sql=builder.toString();
}
","public UPDATE(@NonNull String... columns){
  if (columns == null) {
    throw new NullPointerException(""SELECT: Columns are null"");
  }
  if (columns.length == 0)   throw new IllegalArgumentException(""At least on column is required"");
  StringBuilder builder=new StringBuilder(""SELECT "");
  for (int i=0; i < columns.length; i++) {
    builder.append(columns[i]);
    if (i != (columns.length - 1))     builder.append("", "");
  }
  sql=builder.toString();
}
",105,5,"SELECT:UPDATE,",43,0.21105260451634725,Beam
1469,"public void copyReader(String encoding,Reader r) throws IOException {
  super.setContentEncoding(encoding);
  String s=readString(r);
  content=s.getBytes(encoding);
}
","public void CopyResources(String continode,Reader r) throws IOException {
  super.setContentEncoding(continode);
  String s=readString(r);
  content=s.getBytes(continode);
}
",38,6,"copyReader:CopyResources,encoding:continode,",123,0.6669125398000081,Beam
1470,,,192,11,,1818,10.640603931744893,0
1471,"private String resourceId(){
  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();
}
","private String ResourcePath(){
  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();
}
",20,2,"resourceId:ResourcePath,",10,0.0459388534228007,Beam
1472,,,12,1,,49,0.3025616923967997,0
1473,,,30,5,,499,3.0896538575490315,0
1474,"private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
","private List rec(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}
",63,5,"reverse:rec,",13,0.06493726571400961,Beam
1475,,,53,5,,593,2.4724481225013735,0
1476,"@Override public Trie optimize(Trie orig){
  List<CharSequence> cmds=orig.cmds;
  List<Row> rows=new ArrayList<>();
  List<Row> orows=orig.rows;
  int remap[]=new int[orows.size()];
  for (int j=orows.size() - 1; j >= 0; j--) {
    liftUp(orows.get(j),orows);
  }
  Arrays.fill(remap,-1);
  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);
  return new Trie(orig.forward,remap[orig.root],cmds,rows);
}
","@Override public Trie specialze(Trie orig){
  List<CharSequence> cmds=orig.cmds;
  List<Row> rows=new ArrayList<>();
  List<Row> orows=orig.rows;
  int remap[]=new int[orows.size()];
  for (int j=orows.size() - 1; j >= 0; j--) {
    liftUp(orows.get(j),orows);
  }
  Arrays.fill(remap,-1);
  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);
  return new Trie(orig.forward,remap[orig.root],cmds,rows);
}
",144,7,"optimize:specialze,",8,0.0721821665763855,Beam
1477,,,36,2,,297,2.063441522916158,0
1478,"public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}
","public String convert(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}
",53,4,"add:convert,",5,0.039015158017476397,Beam
1479,,,70,6,,1058,6.706451618671418,0
1480,"public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){
  mSinks.put(sourceUrn,sinks);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());
}
","public void onSinksReceived(String sourceArne,List<MediaSink> ssinks){
  mSinks.put(sourceArne,ssinks);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceArne,ssinks.size());
}
",37,5,"sourceUrn:sourceArne,sinks:ssinks,",121,0.9639834483464559,Beam
1481,,,83,5,,126,0.6322938362757365,0
1482,,,23,2,,217,1.4698939243952434,0
1483,,,42,4,,304,1.9607937653859457,0
1485,"private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}
","private final String decode(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError(""Invalid byte "" + Integer.toHexString(i) + "" in short Unicode text block"");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}
",304,13,"_decodeShortUnicodeName:decode,",60,0.4229878703753153,Beam
1486,"public void finish() throws IOException {
  if (!def.finished()) {
    def.finish();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}
","public void generishing() throws IOException {
  if (!def.finished()) {
    def.generishing();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}
",139,7,"finish:generishing,",14,0.09653087457021077,Beam
1487,"public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}
","public String toInt(boolean expand){
  StringBuilder acc=new StringBuilder();
  toInt(acc,0,expand);
  return acc.toInt();
}
",33,3,"toString:toInt,",29,0.17869431575139363,Beam
1488,,,36,3,,223,1.6119819124539694,0
1490,"private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){
  Element parameter=document.createElement(""parameter"");
  parameter.appendChild(parentElement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
","private void writeNewFeatureContext(JavaFieldSpec spec,Document record,Element authorelement){
  Element parameter=record.createElement(""parameter"");
  parameter.appendChild(authorelement);
  parameter.setAttribute(""package"",spec.getPackageName());
  parameter.setAttribute(""class"",spec.getClassName());
  parameter.setAttribute(""field"",spec.getFieldName());
}
",71,5,"writeJavaFieldSpec:writeNewFeatureContext,document:record,parentElement:authorelement,",743,5.441597270965576,Beam
1491,"private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
","private String createModuleChange(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}
",41,4,"createComponentChanges:createModuleChange,",11,0.08475178082784017,Beam
1492,"private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}
","private Cache buildConfiguration() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"""");
  props.setProperty(MCAST_PORT,""0"");
  return CacheFactory.create(DistributedSystem.connect(props));
}
",49,2,"createCache:buildConfiguration,",11,0.06507961750030518,Beam
1493,"public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}
","public static boolean issComplete(String actualText,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (issComplete(actualText,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}
",71,6,"isMatch:issComplete,actualString:actualText,",123,2.0469154755274457,Beam
1494,"private void addToScene(final Node items){
  collection.add(items);
}
","private void addThisCamera(final Node properties){
  collection.add(properties);
}
",17,3,"addToScene:addThisCamera,items:properties,",73,0.4323460141817729,Beam
1495,,,59,7,,1096,6.89313333829244,0
1496,,,94,5,,665,4.868251077334086,0
1497,"public static void free(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}
","public static void release(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}
",54,4,"free:release,",34,0.16976904074350993,Beam
1498,,,138,7,,379,2.9654720942179362,0
1499,,,107,7,,1636,10.447469755013783,0
1500,,,433,20,,756,6.452210315068563,0
1501,"public static void resetIndexBufferTime(){
  SAFE_QUERY_TIME.set(0);
}
","public static void resetIndexQueryTimes(){
  SAFE_QUERY_TIME.set(0);
}
",15,1,"resetIndexBufferTime:resetIndexQueryTimes,",16,0.06684385935465495,Beam
1502,,,58,6,,252,0.8897071202596029,0
1503,,,51,4,,764,3.370941932996114,0
1504,,,91,5,,359,1.946221109231313,0
1505,"public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
","public void put(ByteBuffer byteQueue,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""contentLength is too large"");
  }
  byteQueue.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}
",54,4,"byteBuffer:byteQueue,",38,0.17733122110366822,Beam
1506,,,18,2,,245,1.162383504708608,0
1507,"public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){
  Object numRows;
  Object offset;
  if (ctx.o != null) {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else   if (ctx.c != null) {
    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}
","public static RowLimitSpec parseColumnSourceMod(EsperEPL2GrammarParser.RowLimitContext cmp){
  Object numRows;
  Object offset;
  if (cmp.o != null) {
    numRows=parseNumOrVariableIdent(cmp.n1,cmp.i1);
    offset=parseNumOrVariableIdent(cmp.n2,cmp.i2);
  }
 else   if (cmp.c != null) {
    offset=parseNumOrVariableIdent(cmp.n1,cmp.i1);
    numRows=parseNumOrVariableIdent(cmp.n2,cmp.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(cmp.n1,cmp.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRaysVari=null;
  if (numRows instanceof String) {
    numRaysVari=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRaysVari,offsetVariable);
}
",194,8,"buildRowLimitSpec:parseColumnSourceMod,ctx:cmp,numRowsVariable:numRaysVari,",284,1.8412728349367777,Beam
1508,,,364,12,,230,1.2213266611099243,0
1509,"public static boolean p2pLoader(ClassLoader ldr){
  return ldr instanceof GridDeploymentInfo;
}
","public static boolean p4pLoad(ClassLoader LDsr){
  return LDsr instanceof GridDeploymentInfo;
}
",15,2,"p2pLoader:p4pLoad,ldr:LDsr,",211,1.5177081902821858,Beam
1510,,,31,3,,593,2.7055840214093525,0
1511,"protected void acceptDrop(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropOperation);
  }
}
","protected void AcceptClose(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.AcceptClose(dropOperation);
  }
}
",31,3,"acceptDrop:AcceptClose,",12,0.037529448668162026,Beam
1512,"private int readSourceToLog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}
","private int getStringToLOG(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,""1000"");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}
",57,3,"readSourceToLog:getStringToLOG,",40,0.19277145465215048,Beam
1513,"public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}
","public static Document writeAST(InputStream has) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(has);
}
",141,4,"createDOM:writeAST,is:has,",46,0.24936386744181316,Beam
1514,"protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){
  double sumErr=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=data.size();
  for (int i=0; i < n; i++) {
    double error=model.get(i) - data.get(i).value;
    sumErr+=error;
    sumAbsErr+=Math.abs(error);
    sumAbsPercentErr+=Math.abs(error / data.get(i).value);
    sumErrSquared+=error * error;
    processedPoints++;
  }
  this.bias=sumErr / processedPoints;
  this.mad=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}
","protected void initForecastChrs(ArrayList<Float> source,TimeSeries.DataSequence base){
  double sumErr=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=base.size();
  for (int i=0; i < n; i++) {
    double error=source.get(i) - base.get(i).value;
    sumErr+=error;
    sumAbsErr+=Math.abs(error);
    sumAbsPercentErr+=Math.abs(error / base.get(i).value);
    sumErrSquared+=error * error;
    processedPoints++;
  }
  this.bias=sumErr / processedPoints;
  this.mad=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}
",168,12,"model:source,data:base,initForecastErrors:initForecastChrs,",436,2.3874867518742877,Beam
1515,"public Shape greatCircleLineShape(){
  GeneralPath path=null;
  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {
    double y1=llpts[0];
    double x1=llpts[1];
    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);
    boolean firstCoords=true;
    for (int i=2; i < llpts.length; i+=2) {
      double y2=llpts[i];
      double x2=llpts[i + 1];
      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);
      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);
      if (nsegs == 0) {
        nsegs=1;
      }
      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);
      if (returnDegrees) {
        ProjMath.arrayRadToDeg(coords);
      }
      for (int j=0; j <= coords.length - 1; j+=2) {
        if (firstCoords) {
          path.moveTo(coords[j + 1],coords[j]);
          firstCoords=false;
        }
 else {
          path.lineTo(coords[j + 1],coords[j]);
        }
      }
      x1=x2;
      y1=y2;
    }
    if (returnDegrees) {
      path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));
    }
 else {
      path.lineTo(x1,y1);
    }
  }
  return path;
}
","public Shape draw(){
  GeneralPath path=null;
  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {
    double y1=llpts[0];
    double x1=llpts[1];
    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);
    boolean firstCoords=true;
    for (int i=2; i < llpts.length; i+=2) {
      double y2=llpts[i];
      double x2=llpts[i + 1];
      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);
      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);
      if (nsegs == 0) {
        nsegs=1;
      }
      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);
      if (returnDegrees) {
        ProjMath.arrayRadToDeg(coords);
      }
      for (int j=0; j <= coords.length - 1; j+=2) {
        if (firstCoords) {
          path.moveTo(coords[j + 1],coords[j]);
          firstCoords=false;
        }
 else {
          path.lineTo(coords[j + 1],coords[j]);
        }
      }
      x1=x2;
      y1=y2;
    }
    if (returnDegrees) {
      path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));
    }
 else {
      path.lineTo(x1,y1);
    }
  }
  return path;
}
",304,15,"greatCircleLineShape:draw,",25,0.13271423180898032,Beam
1516,"public void addRam(AttackAction ea){
  pendingRams.addElement(ea);
  processGameEvent(new GameNewActionEvent(this,ea));
}
","public void createRAM(AttackAction element){
  pendingRam.addElement(element);
  processGameEvent(new GameNewActionEvent(this,element));
}
",27,3,"addRam:createRAM,ea:element,pendingRams:pendingRam,",221,0.8565284649531046,Beam
1517,"public boolean canRead(){
  return _is != null;
}
","public boolean CanRead(){
  return _is != null;
}
",12,2,"canRead:CanRead,",9,0.05419531265894572,Beam
1518,"public PrintfFormat(String fmtArg) throws IllegalArgumentException {
  this(Locale.getDefault(),fmtArg);
}
","public PrintfFormat(String fprintfStr) throws IllegalArgumentException {
  this(Locale.getDefault(),fprintfStr);
}
",21,2,"fmtArg:fprintfStr,",24,0.13850393295288085,Beam
1519,,,41,4,,119,0.45357428391774496,0
1520,,,37,4,,423,4.013682651519775,0
1521,"public SpecificationRunnerBuilder sections(String[] paramSections){
  Collections.addAll(this.sections,paramSections);
  return this;
}
","public SpecificationRunnerBuilder scripts(String[] paramSections){
  Collections.addAll(this.scripts,paramSections);
  return this;
}
",25,2,"sections:scripts,",35,0.1941544969876607,Beam
1522,,,58,6,,206,1.141753323872884,0
1523,,,95,6,,616,2.5514193058013914,0
1524,"public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}
","public void added(final T object){
synchronized (mLock) {
    mList.added(object);
  }
  notifyDataSetChanged();
}
",27,4,"add:added,",8,0.04660591681798299,Beam
1525,,,46,3,,269,1.8252687335014344,0
1526,"private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}
","private void fractMetATA(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug(""Table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName()+ "" found in cache."");
  if (table == null) {
    logger.warn(""No metadata found for table "" + tableEvent.getDatabaseName() + "".""+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}
",189,6,"fetchMetadata:fractMetATA,",49,0.313676118850708,Beam
1527,"public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}
","public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> piece) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,piece);
    }
  }
 else {
    return piece.call();
  }
}
",66,3,"task:piece,",37,0.18636154333750407,Beam
1528,,,1225,34,,1979,13.362335975964864,0
1529,"private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}
","private String getUnless(char[] Delivner,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + Delivner.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(Delivner.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < Delivner.length; i++) {
      if (buffer[position + i] != Delivner[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=Delivner.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}
",247,14,"readUntil:getUnless,delimiter:Delivner,",232,1.674989354610443,Beam
1530,"public static void assertLabel(int[] path,String text){
  if (verbose) {
    log(""assertLabel("" + toString(path) + "", ""+ text+ "")"");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,""Null label"" + text);
  assertBool(text == l.getText() || text.equals(l.getText()),("""" + l.getText()) + "" != "" + text);
}
","public static void constructComponent(int[] id,String label){
  if (verbose) {
    log(""assertLabel("" + toString(id) + "", ""+ label+ "")"");
  }
  Label l=(Label)getComponentByPath(id);
  assertBool(l != null,""Null label"" + label);
  assertBool(label == l.getText() || label.equals(l.getText()),("""" + l.getText()) + "" != "" + label);
}
",95,5,"assertLabel:constructComponent,path:id,text:label,",376,2.3329636454582214,Beam
1531,,,114,8,,358,1.911121924718221,0
1532,"@Override public boolean isComplete(){
  return true;
}
","@Override public boolean areComplete(){
  return true;
}
",12,1,"isComplete:areComplete,",6,0.027894763151804607,Beam
1533,,,49,4,,580,2.4233511447906495,0
1534,"public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}
","public static GridField[] getFieldFiles(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}
",252,16,"createFields:getFieldFiles,",125,0.5776508847872416,Beam
1535,"public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}
","public Subscription register(Object mBeo,MBeanDescription description){
  return register(mBeo,description.getMBeanName(getNextId()));
}
",27,3,"mBean:mBeo,",9,0.04699004093805949,Beam
1536,"public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}
","public boolean createCharacterric(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.createCharacterric(characteristic);
  }
  return false;
}
",86,9,"writeCharacteristic:createCharacterric,",15,0.07865967750549316,Beam
1537,"void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
","void WriteElement(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}
",26,3,"writeLine:WriteElement,",44,0.20894943873087565,Beam
1538,,,41,3,,247,1.4061352491378785,0
1539,,,49,3,,259,1.47105499903361,0
1540,"public ListenableFuture<String> push(final String name,final Expression func){
  String let=String.format(""let %s = %s"",name,func.toHaskell());
  return pullRaw(let);
}
","public ListenableFuture<String> callback(final String name,final Expression func){
  String let=String.format(""let %s = %s"",name,func.toHaskell());
  return pullRaw(let);
}
",41,4,"push:callback,",73,0.32684279680252076,Beam
1541,,,177,8,,2186,13.94253973563512,0
1542,,,35,5,,344,2.2800743699073793,0
1543,"@Override public Result doComparisonTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
","@Override public Result doComparenessCompare(final Properties objects) throws Exception {
  final long timeout=Long.parseLong(objects.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(objects.getProperty(TestOptions.NRESOURCES));
  final int minClits=Integer.parseInt(objects.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(objects.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(objects.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(objects.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(objects.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(objects.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(version,timeout,nresources,minClits,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}
",185,12,"properties:objects,doComparisonTest:doComparenessCompare,minLocks:minClits,journal:version,",627,3.2885432203610736,Beam
1544,"private Collection<String> readProcessOutput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
","private Collection<String> readProgramInput(Process mp) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(mp.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}
",71,5,"readProcessOutput:readProgramInput,proc:mp,",116,0.565773602326711,Beam
1545,"private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
","private void coreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}
",53,6,"scoreTrackResults:coreTrackResults,",42,0.1938403328259786,Beam
1546,"public AbstractSurfaceObject(AbstractSurfaceObject source){
  super(source);
  this.visible=source.visible;
  this.uniqueId=nextUniqueId();
  this.lastModifiedTime=System.currentTimeMillis();
  this.enableBatchPicking=source.enableBatchPicking;
}
","public AbstractSuraceInfo(AbstractSuraceInfo element){
  super(element);
  this.visible=element.visible;
  this.uniqueId=nextUniqueId();
  this.lastModifiedTime=System.currentTimeMillis();
  this.enableBatchPicking=element.enableBatchPicking;
}
",47,2,"AbstractSurfaceObject:AbstractSuraceInfo,source:element,",86,0.381417977809906,Beam
1547,"List<Entry> killAll(boolean rootIncluded){
  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}
","List<Entry> getALL(boolean depthInclude){
  List<Entry> registered=new ArrayList<>(depthInclude ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (depthInclude ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      registered.add(entry);
    }
  }
  return registered;
}
",112,6,"killAll:getALL,rootIncluded:depthInclude,killed:registered,",241,1.0889925996462504,Beam
1548,"void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
","void updateButton(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}
",95,14,"drawIcon:updateButton,",196,0.8811862627665202,Beam
1549,"public void addNetworkListener(final NetworkListener listener){
  networkListeners.add(listener);
}
","public void addLinkConnection(final NetworkListener adder){
  networkListeners.add(adder);
}
",17,3,"addNetworkListener:addLinkConnection,listener:adder,",117,0.4933367570241292,Beam
1550,"public boolean remove(Object targetChild){
  return remove(targetChild,true);
}
","public boolean remove(Object TargetClass){
  return remove(TargetClass,true);
}
",17,2,"targetChild:TargetClass,",14,0.04957874218622844,Beam
1555,,,167,8,,940,5.63163822889328,0
1557,"public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}
","public void detach(AppCompatActivity entity){
  attrViewMaps.remove(entity.hashCode());
}
",20,3,"activity:entity,",9,0.03504971663157145,Beam
1558,,,34,2,,247,1.3349389433860779,0
1559,"public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}
","public static String encode(byte[] ops){
  int len=ops.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((ops[i] & 0xff) << 16) | (int)((ops[i + 1] & 0xff) << 8) | (int)(ops[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((ops[i] & 0xff) << 8) | ((ops[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((ops[i] & 0xff)),2));
  }
  return encoded.toString();
}
",200,6,"bytes:ops,",43,0.2732694705327352,Beam
1560,,,26,3,,279,1.6489667693773906,0
1561,"protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){
  if (expected == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (expected.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);
  }
 else   if (expected.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);
  }
 else   if (expected.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",expected,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}
","protected byte[] assertEncodedecoder(final IGangliaMetadataMessage decl,final IGangliaMessage future){
  if (future == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (future.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)future);
  }
 else   if (future.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)future);
  }
 else   if (future.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException(""Declaration required for metric value record"");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)future);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals(""messages not equal()"",future,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}
",222,8,"expected:future,assertEncodeDecode:assertEncodedecoder,",109,0.6917883117993673,Beam
1562,,,101,5,,593,3.2354584972063702,0
1563,,,175,9,,836,6.097520061333975,0
1565,,,14,2,,193,0.9249538739522298,0
1567,"private void fillPicks() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup(""M_Warehouse_ID"",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),""M_Warehouse_ID""));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup(""C_BPartner_ID"",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),""C_BPartner_ID""));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),""C_DocType_ID""));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),""Order"")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),""VendorRMA"")));
  cmbDocType.addActionListener(this);
}
","private void setup() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup(""M_Warehouse_ID"",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),""M_Warehouse_ID""));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup(""C_BPartner_ID"",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),""C_BPartner_ID""));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),""C_DocType_ID""));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),""Order"")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),""VendorRMA"")));
  cmbDocType.addActionListener(this);
}
",224,11,"fillPicks:setup,",18,0.08693004051844279,Beam
1569,"public static Test suite() throws Exception {
  return suite(true);
}
","public static Test suitable() throws Exception {
  return suitable(true);
}
",16,1,"suite:suitable,",5,0.055324212710062666,Beam
1570,,,21,3,,147,0.8247334480285644,0
1571,,,398,15,,3112,18.19037984609604,0
1572,"public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}
","public static double variage(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}
",95,7,"variance:variage,",6,0.02911608616511027,Beam
1573,"public MapObjects(PokemonGo api){
  this.api=api;
}
","public ObjectObjections(PokemonGo all){
  this.all=all;
}
",14,2,"api:all,MapObjects:ObjectObjections,",121,0.5115095774332682,Beam
1574,"@Override public void write(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}
","@Override public void next(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}
",140,7,"write:next,",80,0.37954959869384763,Beam
1575,"private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (entry.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(entry.getSequence(),null);
  }
 else {
    indexQuery(entry,future);
  }
}
","private void sequenceQuery(QueryEntry route,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (route.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(route.getSequence(),null);
  }
 else {
    indexQuery(route,future);
  }
}
",57,4,"entry:route,",4,0.0360848863919576,Beam
1577,,,45,3,,269,1.2042211890220642,0
1578,"public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}
","public static void readFully(InputStream in,byte img[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(img,off,toRead);
    if (ret < 0) {
      throw new IOException(""Premature EOF from inputStream"");
    }
    toRead-=ret;
    off+=ret;
  }
}
",73,7,"buf:img,",15,0.08204431533813476,Beam
1579,,,110,7,,1511,7.843487346172333,0
1580,"public int capacity(){
  return capacity.get();
}
","public int empty(){
  return empty.get();
}
",14,1,"capacity:empty,",28,0.11250618298848471,Beam
1581,,,82,7,,316,1.8115025877952575,0
1582,"public void reset(){
  ns.removeAllElements();
  ks.setLength(0);
  cur=tt.root;
  run();
}
","public void empty(){
  ns.removeAllElements();
  ks.setLength(0);
  cur=tt.root;
  run();
}
",30,4,"reset:empty,",14,0.06346973578135172,Beam
1583,"public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
","public static String striaround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}
",55,4,"surround:striaround,",104,0.620192285378774,Beam
1584,,,63,6,,833,3.8737608273824056,0
1585,"private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
","private void copyAClInfo(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare sheetsshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(sheetsshare.getId());
    shareACLList.add(shareACL);
    _logger.info(""share ACLs details {}"",shareACL.toString());
  }
}
",120,7,"copyACLs:copyAClInfo,fileshare:sheetsshare,",228,1.9453888575236002,Beam
1586,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}
","@Override public void paintComp(Graphics g){
  super.paintComp(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}
",78,6,"paintComponent:paintComp,",34,0.17292047341664632,Beam
1587,,,189,9,,260,1.580434795220693,0
1588,"public void reclaimViews(List<View> views){
  int childCount=getChildCount();
  RecyclerListener listener=mRecycler.mRecyclerListener;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {
      views.add(child);
      if (listener != null) {
        listener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(views);
  removeAllViewsInLayout();
}
","public void recoverLayouts(List<View> forms){
  int childCount=getChildCount();
  RecyclerListener listener=mRecycler.mRecyclerListener;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {
      forms.add(child);
      if (listener != null) {
        listener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(forms);
  removeAllViewsInLayout();
}
",116,8,"reclaimViews:recoverLayouts,views:forms,",190,1.3056031703948974,Beam
1589,"protected String alterCase(String value){
switch (getCase()) {
case UPPERCASE:
    return value.toUpperCase();
case LOWERCASE:
  return value.toLowerCase();
default :
return value;
}
}
","protected String alterCase(String model){
switch (getCase()) {
case UPPERCASE:
    return model.toUpperCase();
case LOWERCASE:
  return model.toLowerCase();
default :
return model;
}
}
",42,4,"value:model,",37,0.18932422399520873,Beam
1590,"public void removeListener(final L listener){
  Validate.notNull(listener,""Listener object cannot be null."");
  listeners.remove(listener);
}
","public void removeAddress(final L lender){
  Validate.notNull(lender,""Listener object cannot be null."");
  listeners.remove(lender);
}
",26,3,"listener:lender,removeListener:removeAddress,",49,0.19049704869588216,Beam
1591,"public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="""";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
","public static String collapse(char[] parent,String separoder){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separoder == null)   separoder="""";
  for (  char next : parent) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separoder);
    }
    buffer.append(next);
  }
  return buffer.toString();
}
",81,6,"self:parent,join:collapse,separator:separoder,",479,2.7345250964164736,Beam
1592,"public synchronized boolean removeAll(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}
","public synchronized boolean RemoveNone(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}
",124,8,"removeAll:RemoveNone,",13,0.10565284490585328,Beam
1593,"@Override public Instances defineDataFormat() throws Exception {
  ArrayList<Attribute> atts;
  ArrayList<String> attValues;
  int i;
  m_Random=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m_lastLabel=Double.NaN;
  setNumExamplesAct(getNumExamples());
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""salary""));
  atts.add(new Attribute(""commission""));
  atts.add(new Attribute(""age""));
  attValues=new ArrayList<String>();
  for (i=0; i < 5; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""elevel"",attValues));
  attValues=new ArrayList<String>();
  for (i=1; i <= 20; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""car"",attValues));
  attValues=new ArrayList<String>();
  for (i=0; i < 9; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""zipcode"",attValues));
  atts.add(new Attribute(""hvalue""));
  atts.add(new Attribute(""hyears""));
  atts.add(new Attribute(""loan""));
  attValues=new ArrayList<String>();
  for (i=0; i < 2; i++) {
    attValues.add("""" + i);
  }
  atts.add(new Attribute(""group"",attValues));
  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);
  return m_DatasetFormat;
}
","@Override public Instances create() throws Exception {
  ArrayList<Attribute> ios;
  ArrayList<String> attValues;
  int i;
  m_Random=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m_lastLabel=Double.NaN;
  setNumExamplesAct(getNumExamples());
  ios=new ArrayList<Attribute>();
  ios.add(new Attribute(""salary""));
  ios.add(new Attribute(""commission""));
  ios.add(new Attribute(""age""));
  attValues=new ArrayList<String>();
  for (i=0; i < 5; i++) {
    attValues.add("""" + i);
  }
  ios.add(new Attribute(""elevel"",attValues));
  attValues=new ArrayList<String>();
  for (i=1; i <= 20; i++) {
    attValues.add("""" + i);
  }
  ios.add(new Attribute(""car"",attValues));
  attValues=new ArrayList<String>();
  for (i=0; i < 9; i++) {
    attValues.add("""" + i);
  }
  ios.add(new Attribute(""zipcode"",attValues));
  ios.add(new Attribute(""hvalue""));
  ios.add(new Attribute(""hyears""));
  ios.add(new Attribute(""loan""));
  attValues=new ArrayList<String>();
  for (i=0; i < 2; i++) {
    attValues.add("""" + i);
  }
  ios.add(new Attribute(""group"",attValues));
  m_DatasetFormat=new Instances(getRelationNameToUse(),ios,0);
  return m_DatasetFormat;
}
",334,8,"defineDataFormat:create,atts:ios,",117,0.7467765609423319,Beam
1594,,,46,3,,321,1.5982971469561258,0
1595,,,27,3,,183,0.8079451362291972,0
1596,"public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}
","public SimpleString subcat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}
",86,4,"concat:subcat,",38,0.21654723485310873,Beam
1597,"public static boolean inTargetDir(File file){
  return inTargetDir(file.toPath());
}
","public static boolean inCurrentFolder(File file){
  return inCurrentFolder(file.toPath());
}
",20,2,"inTargetDir:inCurrentFolder,",55,0.3070493698120117,Beam
1598,"public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
","public <T>List<String> valididateBeans(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}
",92,7,"validateBean:valididateBeans,",23,0.12376375595728556,Beam
1599,,,20,3,,76,0.27541332642237343,0
1600,"private String applyReplacement(final BidiMap replacement,String contents){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}
","private String applyExpacement(final BidiMap constacement,String contents){
  for (  Object key : constacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)constacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}
",71,6,"applyReplacement:applyExpacement,replacement:constacement,",107,0.4564396977424622,Beam
1602,"public StrBuilder insert(final int index,final Object obj){
  if (obj == null) {
    return insert(index,nullText);
  }
  return insert(index,obj.toString());
}
","public StrBuilder create(final int i,final Object obj){
  if (obj == null) {
    return create(i,nullText);
  }
  return create(i,obj.toString());
}
",42,4,"insert:create,index:i,",377,1.500451664129893,Beam
1603,"private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}
","private LocusInfo createNextUncoveredLocusInformation(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}
",163,6,"createNextUncoveredLocusInfo:createNextUncoveredLocusInformation,",3,0.02083522081375122,Beam
1604,"private void connect() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.connect(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
","private void config() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put(""com.sun.jndi.rmi.factory.socket"",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.config(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException(""Invalid ObjectName? Please report this as a bug."",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}
",407,26,"connect:config,",12,0.08441435098648072,Beam
1605,"public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storedAuthTag=atagList.get(chunkIdx);
    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}
","public synchronized boolean verifyChunkAuthtag(int chunkIdb,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdb < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException(""Invalid auth tag parameter given!"");
  }
 else {
    byte[] storedAuthTag=atagList.get(chunkIdb);
    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}
",92,5,"chunkIdx:chunkIdb,verifyChunkAuthTag:verifyChunkAuthtag,",79,0.42806843519210813,Beam
1607,,,67,6,,555,2.6194732983907065,0
1608,,,35,3,,627,2.9351405104001365,0
1609,"protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}
","protected void handleMesoFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format(""Retrying task: %s, attempt: %d"",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe(""Would not restart the job since it is beyond retries: "" + attempt);
  }
}
",102,7,"handleMesosFailure:handleMesoFailure,",3,0.024825990200042725,Beam
1610,"public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}
","public static String makeRelatedClientid(String protectedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(protectedID,prototype.getExtension(),prototype.tail);
}
",37,3,"makeRelatedSessionID:makeRelatedClientid,encryptedID:protectedID,",226,1.103569261233012,Beam
1611,,,297,14,,2028,14.754108464717865,0
1612,,,82,6,,1339,11.498999424775441,0
1613,,,57,4,,252,1.5774803360303242,0
1614,,,71,5,,593,4.9783506155014035,0
1615,,,16,3,,181,0.683254090944926,0
1616,,,19,2,,28,0.11481475432713827,0
1617,,,125,5,,522,3.075250804424286,0
1618,,,66,3,,80,0.38948330481847127,0
1619,,,24,3,,92,0.42592342297236124,0
1620,,,168,13,,2441,11.951531708240509,0
1621,"public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}
","public void release(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.release();
    }
 catch (    IOException e) {
      Log.w(mTag,""Test output file could not be closed"",e);
    }
  }
}
",65,6,"close:release,",15,0.06918111244837442,Beam
1622,,,36,2,,282,1.1964319388071696,0
1623,,,46,3,,266,1.248498014609019,0
1624,,,14,2,,63,0.3002966523170471,0
1625,"static SizeRequirements calculateTiledRequirements(LayoutIterator iter,SizeRequirements r){
  long minimum=0;
  long maximum=0;
  long preferred=0;
  int lastMargin=0;
  int totalSpacing=0;
  int n=iter.getCount();
  for (int i=0; i < n; i++) {
    iter.setIndex(i);
    int margin0=lastMargin;
    int margin1=(int)iter.getLeadingCollapseSpan();
    totalSpacing+=Math.max(margin0,margin1);
    preferred+=(int)iter.getPreferredSpan(0);
    minimum+=iter.getMinimumSpan(0);
    maximum+=iter.getMaximumSpan(0);
    lastMargin=(int)iter.getTrailingCollapseSpan();
  }
  totalSpacing+=lastMargin;
  totalSpacing+=2 * iter.getBorderWidth();
  minimum+=totalSpacing;
  preferred+=totalSpacing;
  maximum+=totalSpacing;
  if (r == null) {
    r=new SizeRequirements();
  }
  r.minimum=(minimum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)minimum;
  r.preferred=(preferred > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)preferred;
  r.maximum=(maximum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)maximum;
  return r;
}
","static SizeRequirements wrap(LayoutIterator reader,SizeRequirements r){
  long minimum=0;
  long maximum=0;
  long preferred=0;
  int lastMargin=0;
  int totalSpacing=0;
  int n=reader.getCount();
  for (int i=0; i < n; i++) {
    reader.setIndex(i);
    int margin0=lastMargin;
    int margin1=(int)reader.getLeadingCollapseSpan();
    totalSpacing+=Math.max(margin0,margin1);
    preferred+=(int)reader.getPreferredSpan(0);
    minimum+=reader.getMinimumSpan(0);
    maximum+=reader.getMaximumSpan(0);
    lastMargin=(int)reader.getTrailingCollapseSpan();
  }
  totalSpacing+=lastMargin;
  totalSpacing+=2 * reader.getBorderWidth();
  minimum+=totalSpacing;
  preferred+=totalSpacing;
  maximum+=totalSpacing;
  if (r == null) {
    r=new SizeRequirements();
  }
  r.minimum=(minimum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)minimum;
  r.preferred=(preferred > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)preferred;
  r.maximum=(maximum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)maximum;
  return r;
}
",245,12,"calculateTiledRequirements:wrap,iter:reader,",178,1.3708637317021688,Beam
1626,,,77,4,,155,0.7537270307540893,0
1627,"public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){
  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));
}
","public static ByteBuffer base64StringToByteArray(String base64EncodedKey){
  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));
}
",21,2,"base64StringToByteBuffer:base64StringToByteArray,",4,0.023290971914927166,Beam
1628,"@Override public <T>Future<T> submit(Callable<T> task){
synchronized (this) {
    active.incrementAndGet();
    long timeout=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (timeout <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          timeout+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException(""Timed out because TPE is too busy..."");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.submit(task);
  }
}
","@Override public <T>Future<T> exec(Callable<T> activity){
synchronized (this) {
    active.incrementAndGet();
    long timeout=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (timeout <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          timeout+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException(""Timed out because TPE is too busy..."");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.exec(activity);
  }
}
",103,9,"submit:exec,task:activity,",161,0.8900330066680908,Beam
1629,"public void removeBiomeType(BiomeDictionary.Type type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
","public void removeBioseClass(BiomeDictionary.Type type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}
",96,6,"removeBiomeType:removeBioseClass,",13,0.08264897664388021,Beam
1631,"public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}
","public int ServerDelivery(Object message,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}
",48,6,"serverDelivery:ServerDelivery,",4,0.015239270528157552,Beam
1632,,,112,8,,820,3.68214213848114,0
1633,"@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}
","@Override public void makeEmuted(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeEmuted();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeEmuted();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeEmuted();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeEmuted();
    }
    if (issuer != null) {
      issuer.makeEmuted();
    }
    if (subject != null) {
      subject.makeEmuted();
    }
    if (advice != null) {
      advice.makeEmuted();
    }
    isMutable=false;
  }
}
",275,15,"makeImmutable:makeEmuted,",28,0.21762895981470745,Beam
1635,"protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}
","protected void produledge() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic=""Sample/Java/v3"";
    int qos=2;
    String message=""Message from async calback MQTTv3 Java client sample"";
    try {
      sampleClientPub.produledge(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}
",83,12,"publish:produledge,",13,0.0592306653658549,Beam
1637,"public void resetReferences(){
  if (_refs != null)   _refs.clear();
}
","public void flushLinks(){
  if (_refs != null)   _refs.clear();
}
",19,2,"resetReferences:flushLinks,",8,0.020515147844950357,Beam
1638,"private void fieldGoalAtt(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}
","private void gameTGTest(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" made the ""+ (110 - gameYardLine)+ "" yard FG."";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + "" K ""+ offense.getK(0).name+ "" missed the ""+ (110 - gameYardLine)+ "" yard FG."";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}
",329,18,"fieldGoalAtt:gameTGTest,",18,0.18246149619420368,Beam
1640,,,53,4,,221,1.4145118514696757,0
1641,"protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}
","protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSingleures(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn(""failed to parse index file name [{}]"",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn(""failed to read index file  [{}]"",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn(""failed to read commit point [{}]"",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}
",295,14,"buildBlobStoreIndexShardSnapshots:buildBlobStoreIndexShardSingleures,",42,0.2913596192995707,Beam
1642,"public void addPolicyListener(PolicyListener policyListener){
  policyCache.addPolicyListener(policyListener);
}
","public void addLicenseAdapter(PolicyListener policyListener){
  policyCache.addLicenseAdapter(policyListener);
}
",16,3,"addPolicyListener:addLicenseAdapter,",13,0.04715054432551066,Beam
1643,,,19,3,,251,1.4764862616856893,0
1644,"public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);
  futureMap.put(Integer.valueOf(xid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(request);
  return future;
}
","public Future<SyncReply> sendResponse(int xid,SyncMessage record) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);
  futureMap.put(Integer.valueOf(xid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException(""Could not send request"",e);
        }
      }
    }
  }
  channel.writeAndFlush(record);
  return future;
}
",111,10,"request:record,sendRequest:sendResponse,",110,0.546576730410258,Beam
1645,,,78,5,,810,5.102023875713348,0
1646,,,124,6,,357,1.8433297594388327,0
1647,"public boolean remove(String word){
  return m_Words.remove(word);
}
","public boolean remove(String feature){
  return m_Words.remove(feature);
}
",17,3,"word:feature,",4,0.02565304438273112,Beam
1649,"public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public TermsAckParser read() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.read(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:read,",4,0.03294398784637451,Beam
1650,,,26,3,,290,1.740328884124756,0
1651,,,37,4,,108,0.42040042877197265,0
1652,,,85,2,,293,2.702880128224691,0
1653,,,120,9,,766,3.639627198378245,0
1654,"private void registerProviders(){
  final DevMachine devMachine=appContext.getDevMachine();
  if (devMachine == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devMachine);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}
","private void removeMaciders(){
  final DevMachine devMachine=appContext.getDevMachine();
  if (devMachine == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devMachine);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}
",63,5,"registerProviders:removeMaciders,",10,0.04781372547149658,Beam
1655,,,408,13,,880,7.800600266456604,0
1658,"@Override public Instance remove(int index){
  return m_Instances.remove(index);
}
","@Override public Instance delete(int index){
  return m_Instances.delete(index);
}
",19,3,"remove:delete,",36,0.1809964378674825,Beam
1659,,,101,7,,245,1.4946439862251282,0
1660,,,66,7,,376,2.819471371173859,0
1661,,,109,8,,1057,5.68460347255071,0
1663,,,149,9,,826,5.063964955012003,0
1664,"public void addFieldBuffered(VEditor editor,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=editor;
  prevField=mField;
}
","public void addFieldCombared(VEditor editor,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=editor;
  prevField=mField;
}
",52,6,"addFieldBuffered:addFieldCombared,",72,0.40239478747049967,Beam
1665,"public BinaryOut(String filename){
  try {
    OutputStream os=new FileOutputStream(filename);
    out=new BufferedOutputStream(os);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
","public BinaryOut(String nil){
  try {
    OutputStream os=new FileOutputStream(nil);
    out=new BufferedOutputStream(os);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
",41,5,"filename:nil,",9,0.04370423158009847,Beam
1666,,,16,2,,68,0.30256571372350055,0
1667,,,42,5,,174,0.9678697148958842,0
1668,,,30,2,,61,0.314038074016571,0
1669,"public void initTKF91(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int i=0; i < iNumNodes; i++) {
    if (i == iNumNodes - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}
","public void initTKF90(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int i=0; i < iNumNodes; i++) {
    if (i == iNumNodes - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}
",246,12,"initTKF91:initTKF90,",5,0.03920515378316244,Beam
1670,"private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (node == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
","private boolean renderOutput(Node instance,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="""";
  if (instance == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  Object value=instance.value(context);
  if (value == null) {
    rsvc.error(""#include() error :  null argument"");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error(""#include(): cannot find resource \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "")"");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error(""#include(): arg = \'"" + arg + ""\', called from template ""+ context.getCurrentTemplateName()+ "" at (""+ getLine()+ "", ""+ getColumn()+ "") : ""+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}
",209,10,"node:instance,",14,0.09512012402216594,Beam
1671,"public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}
","public java.util.Collection<ObjectReference> dumpHostSpoots(int width){
  return Collections.emptyList();
}
",23,2,"dumpThreadRoots:dumpHostSpoots,",28,0.1559410254160563,Beam
1672,,,127,6,,256,1.4635083476702373,0
1673,,,22,2,,342,1.9315456827481587,0
1674,,,71,3,,197,1.3432165304819743,0
1675,"public void crabDownDirBlockForModification(BlockId blk){
  lockTbl.xLock(blk,txNum);
  writenIndexBlks.add(blk);
}
","public void crabDownDirBlockFormodifying(BlockId Blks){
  lockTbl.xLock(Blks,txNum);
  writenIndexBlks.add(Blks);
}
",25,5,"crabDownDirBlockForModification:crabDownDirBlockFormodifying,blk:Blks,",69,0.49420958360036216,Beam
1676,"public static String decodeCharset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}
","public static String decodeChamesET(String t,String chacterset){
  if (t == null) {
    return null;
  }
  try {
    byte buff[]=t.getBytes(ASCII_CHARSET);
    return (new String(buff,0,buff.length,chacterset));
  }
 catch (  UnsupportedEncodingException uee) {
    return t;
  }
}
",66,4,"decodeCharset:decodeChamesET,s:t,charset:chacterset,buf:buff,",554,3.539543342590332,Beam
1678,"public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
","public List<JCAnnotation> transformAnnotation(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}
",303,4,"transformAnnotations:transformAnnotation,",14,0.06861351728439331,Beam
1679,"public boolean validate(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return validate(certBytes,signedDataBytes,signatureBytes);
}
","public boolean publication(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return publication(certBytes,signedDataBytes,signatureBytes);
}
",67,7,"validate:publication,",85,0.41461361646652223,Beam
1680,"public boolean hasNatureAndWeapon(Nature nature,String weapon){
  return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon)));
}
","public boolean hasNatureAndWeapon(Nature enemy,String material){
  return this.enemy == enemy && ((material == null && this.material == null) || (material != null && material.equals(this.material)));
}
",48,3,"nature:enemy,weapon:material,",208,1.2180074453353882,Beam
1681,,,153,17,,1507,8.336256464322409,0
1682,"public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}
","public static double P_AverageIntercision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}
",156,9,"P_AveragePrecision:P_AverageIntercision,",65,0.8745039820671081,Beam
1683,,,234,10,,1202,12.533290592829387,0
1684,"protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}
","protected XSQLDA allocateXPsqlMa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}
",208,7,"allocateXSqlDa:allocateXPsqlMa,",43,0.32908738454182945,Beam
1685,,,77,6,,1065,6.219711236159006,0
1686,,,135,4,,507,3.8852663675944012,0
1687,,,113,12,,1498,8.991694017251332,0
1688,,,41,3,,55,0.22367010911305746,0
1689,"public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}
","public void rotatZero(double theeta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theeta);
  double s=Math.sin(theeta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}
",87,5,"rotateZ:rotatZero,theta:theeta,",53,0.2401044805844625,Beam
1690,"public void replaceSplitElement(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
","public void replacePartSection(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}
",21,4,"replaceSplitElement:replacePartSection,",12,0.04493019183476766,Beam
1692,"public static String formatPercent(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}
","public static String formPercent(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + ""%"");
}
",52,5,"formatPercent:formPercent,",5,0.016924814383188883,Beam
1693,"public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}
","public RoundedIcongenerated(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}
",130,15,"RoundedIconGenerator:RoundedIcongenerated,",128,0.7561906019846598,Beam
1694,,,62,3,,251,1.3317076245943704,0
1695,"public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
","public void writeByteBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}
",61,7,"writeRawBytes:writeByteBytes,",7,0.02874062458674113,Beam
1696,"private Set<ObjectName> objectNamesFromFilteredNamedObjects(Set<NamedObject> list,QueryExp query){
  Set<ObjectName> result=new HashSet<ObjectName>();
  if (query == null) {
    for (    NamedObject no : list) {
      result.add(no.getName());
    }
  }
 else {
    final MBeanServer oldServer=QueryEval.getMBeanServer();
    query.setMBeanServer(server);
    try {
      for (      NamedObject no : list) {
        boolean res;
        try {
          res=query.apply(no.getName());
        }
 catch (        Exception e) {
          res=false;
        }
        if (res) {
          result.add(no.getName());
        }
      }
    }
  finally {
      query.setMBeanServer(oldServer);
    }
  }
  return result;
}
","private Set<ObjectName> objectNamesFromFilteredNamedObjects(Set<NamedObject> list,QueryExp feature){
  Set<ObjectName> result=new HashSet<ObjectName>();
  if (feature == null) {
    for (    NamedObject no : list) {
      result.add(no.getName());
    }
  }
 else {
    final MBeanServer oldServer=QueryEval.getMBeanServer();
    feature.setMBeanServer(server);
    try {
      for (      NamedObject no : list) {
        boolean res;
        try {
          res=feature.apply(no.getName());
        }
 catch (        Exception e) {
          res=false;
        }
        if (res) {
          result.add(no.getName());
        }
      }
    }
  finally {
      feature.setMBeanServer(oldServer);
    }
  }
  return result;
}
",152,8,"query:feature,",16,0.12643842697143554,Beam
1697,,,110,5,,209,1.2168272058169047,0
1698,,,170,21,,363,1.6396272301673889,0
1699,,,332,9,,755,4.945355761051178,0
1700,,,127,3,,266,1.7212663729985556,0
1701,,,67,4,,518,2.177347429593404,0
1703,,,14,2,,100,0.5073060711224874,0
1704,,,86,8,,398,1.8609640638033549,0
1705,"public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}
","public static void oneIndex(Object src,Object dst,int oldSize,int deleteIndex){
  if (deleteIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,deleteIndex);
  }
  if (deleteIndex < oldSize) {
    System.arraycopy(src,deleteIndex + 1,dst,deleteIndex,oldSize - deleteIndex - 1);
  }
}
",75,5,"copyExcept:oneIndex,removeIndex:deleteIndex,",199,1.2919106403986613,Beam
1706,,,124,8,,673,3.924802807966868,0
1707,"@Override public void listVolumes(CommandInput input,CompletionHandler completionHandler){
  createOrUpdateTargetSsl(input);
  URI uri=UriUtils.extendUri(input.getDockerUri(),""/volumes"");
  sendGet(uri,null,completionHandler);
}
","@Override public void ListVolumes(CommandInput input,CompletionHandler completionHandler){
  createOrUpdateTargetSsl(input);
  URI uri=UriUtils.extendUri(input.getDockerUri(),""/volumes"");
  sendGet(uri,null,completionHandler);
}
",44,4,"listVolumes:ListVolumes,",5,0.023003105322519937,Beam
1708,,,249,11,,324,1.7679412921269735,0
1709,"public void onRestoreInstanceState(Bundle savedInstanceState){
  mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
","public void onRestoreInstanceState(Bundle savedInstState){
  mSelectedPositions.addAll(savedInstState.getIntegerArrayList(TAG));
  Log.d(TAG,""Restore selection "" + mSelectedPositions);
}
",32,3,"savedInstanceState:savedInstState,",8,0.05125604867935181,Beam
1710,"public void beginDisplay(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.beginDisplay(event);
  if (!canModify) {
    Map mapValues=getDefaultValues();
    if ((mapValues != null) && !mapValues.isEmpty()) {
      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,"","",false));
    }
  }
 else {
    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
    OptionList entityTypes=createOptionList(supportedEntityTypes);
    entityTypes.add(0,""policy.subject.select.identity.type"","""");
    menu.setOptions(entityTypes);
    menu.setValue("""");
    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    child.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
      OptionList selected=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(selected);
      child.resetStateData();
      addRemoveModel.setAvailableOptionList(possible);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));
    }
  }
}
","public void ganDesign(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.ganDesign(event);
  if (!canModify) {
    Map mapValues=getDefaultValues();
    if ((mapValues != null) && !mapValues.isEmpty()) {
      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,"","",false));
    }
  }
 else {
    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
    OptionList entityTypes=createOptionList(supportedEntityTypes);
    entityTypes.add(0,""policy.subject.select.identity.type"","""");
    menu.setOptions(entityTypes);
    menu.setValue("""");
    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    child.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
      OptionList selected=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(selected);
      child.resetStateData();
      addRemoveModel.setAvailableOptionList(possible);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));
    }
  }
}
",311,21,"beginDisplay:ganDesign,",22,0.11829862991968791,Beam
1711,"public Skype(String username,String password){
  this.username=username;
  this.password=password;
}
","public skypes(String username,String power){
  this.username=username;
  this.power=power;
}
",23,3,"Skype:skypes,password:power,",248,0.9694047649701436,Beam
1712,,,158,10,,1498,8.210704652468364,0
1713,,,159,7,,472,3.2360101540883384,0
1714,"public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}
","public static void pipeIn(InputStream inStr,OutputStream OutStream) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    OutStream.write(bs,0,numRead);
  }
}
",63,6,"pipeAll:pipeIn,outStr:OutStream,",160,1.051009972890218,Beam
1715,"private void buildDescriptionPanel(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}
","private void buildLabelBar(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("""");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}
",54,3,"buildDescriptionPanel:buildLabelBar,",44,0.18216254313786825,Beam
1716,,,151,3,,185,1.2052010933558146,0
1717,"public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
","public void set(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException(""buffer is too large"");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}
",63,5,"put:set,",97,0.5060995817184448,Beam
1719,"@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
","@Override protected void onLoad(){
  super.onLoad();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}
",40,4,"onDestroy:onLoad,",9,0.04499000310897827,Beam
1720,,,31,4,,287,1.2524328390757242,0
1721,"private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}
","private int indexOfElementInLevel(int element,int block[]) throws Exception {
  for (int i=0; i < block.length; i++) {
    if (block[i] == element) {
      return i;
    }
  }
  throw new Exception(""Error. Didn\'t find element "" + m_nodes.get(element).ID + "" in level. Inspect code for ""+ ""weka.gui.graphvisualizer.HierarchicalBCEngine"");
}
",68,5,"level:block,",20,0.1270412047704061,Beam
1722,,,101,7,,334,1.9096033016840617,0
1723,"public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}
","public void add(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}
",165,7,"append:add,",37,0.28472920258839923,Beam
1725,"public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}
","public static boolean getempty(String str){
  return (null == str || 0 == str.length());
}
",25,2,"isEmpty:getempty,",43,0.29183180729548136,Beam
1726,,,25,2,,87,0.531212317943573,0
1727,,,29,3,,151,1.203060253461202,0
1728,"public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}
","public static ClassProperties loadPromperties(Class[] ucs,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : ucs) {
    cp.load(c,inherit);
  }
  return cp;
}
",48,6,"cls:ucs,loadProperties:loadPromperties,",121,0.7199103395144145,Beam
1729,"public UndoableEdit insertString(int where,String str) throws BadLocationException {
  if (where >= count || where < 0) {
    throw new BadLocationException(""Invalid location"",count);
  }
  char[] chars=str.toCharArray();
  replace(where,0,chars,0,chars.length);
  if (marks != null) {
    updateMarksForInsert(where,str.length());
  }
  return new InsertUndo(where,str.length());
}
","public UndoableEdit replacestring(int now,String str) throws BadLocationException {
  if (now >= count || now < 0) {
    throw new BadLocationException(""Invalid location"",count);
  }
  char[] chars=str.toCharArray();
  replace(now,0,chars,0,chars.length);
  if (marks != null) {
    updateMarksForInsert(now,str.length());
  }
  return new InsertUndo(now,str.length());
}
",93,6,"insertString:replacestring,where:now,",181,1.8632124384244284,Beam
1730,"public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}
","public static String toUTF8String(String ss){
  return new String(ss.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}
",30,2,"s:ss,",3,0.0333090861638387,Beam
1731,"public static Pair<String,String> split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}
","public static Pair<String,String> split(String inputName){
  int splitIndex=inputName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=inputName.substring(0,splitIndex);
  String right=inputName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}
",101,5,"varName:inputName,",13,0.10349955161412557,Beam
1732,,,158,9,,455,5.476750957965851,0
1733,,,88,5,,342,3.109667340914408,0
1734,,,144,5,,164,1.2381681124369304,0
1735,,,51,4,,370,1.9069233775138854,0
1736,,,106,5,,318,2.021668581167857,0
1737,,,66,6,,221,1.6088806430498759,0
1738,,,76,4,,631,5.578077073891958,0
1739,"private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}
","private Set<String> uniqueKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}
",87,6,"primaryKeys:uniqueKeys,",37,0.3139155189196269,Beam
1740,"private void export_dependencies(JCas jcas){
  dependencies=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency dependency : select(jcas,Dependency.class)) {
    Token governor=dependency.getGovernor();
    Token dependent=dependency.getDependent();
    List<Dependency> l=dependencies.get(governor);
    if (l == null) {
      dependencies.put(governor,new ArrayList<Dependency>());
      l=dependencies.get(governor);
    }
    l.add(dependency);
    nonGoverned.remove(dependent);
  }
  for (  Token t : nonGoverned) {
    traverseDependents(t,"""",-1);
    writeToFile(""component"",componentId,""p"",""dep"",""dep"");
    componentId++;
  }
}
","private void export_dependency(JCas jcas){
  dependencies=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency dependency : select(jcas,Dependency.class)) {
    Token governor=dependency.getGovernor();
    Token dependent=dependency.getDependent();
    List<Dependency> l=dependencies.get(governor);
    if (l == null) {
      dependencies.put(governor,new ArrayList<Dependency>());
      l=dependencies.get(governor);
    }
    l.add(dependency);
    nonGoverned.remove(dependent);
  }
  for (  Token t : nonGoverned) {
    traverseDependents(t,"""",-1);
    writeToFile(""component"",componentId,""p"",""dep"",""dep"");
    componentId++;
  }
}
",171,11,"export_dependencies:export_dependency,",13,0.11392525434494019,Beam
1741,"public static String traceExcetion(Throwable ex){
  final Writer result=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(result);
  ex.printStackTrace(printWriter);
  String stacktrace=result.toString();
  Log.e(TAG,""ERROR ---> "" + stacktrace);
  return stacktrace;
}
","public static String traceExcetion(Throwable cas){
  final Writer result=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(result);
  cas.printStackTrace(printWriter);
  String stacktrace=result.toString();
  Log.e(TAG,""ERROR ---> "" + stacktrace);
  return stacktrace;
}
",59,5,"ex:cas,",16,0.13811174631118775,Beam
1742,"public static double crossTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){
  final double dlon12=lon2 - lon1;
  final double dlon1Q=lonQ - lon1;
  final double dlat1Q=latQ - lat1;
  final double clat1=Math.cos(lat1), slat1=MathUtil.cosToSin(lat1,clat1);
  final double clatQ=Math.cos(latQ), slatQ=MathUtil.cosToSin(latQ,clatQ);
  final double clat2=Math.cos(lat2), slat2=MathUtil.cosToSin(lat2,clat2);
  final double slat=Math.sin(dlat1Q * .5);
  final double slon=Math.sin(dlon1Q * .5);
  final double a=slat * slat + slon * slon * clat1* clatQ;
  final double angDist1Q=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));
  final double sdlon12=Math.sin(dlon12), cdlon12=MathUtil.sinToCos(dlon12,sdlon12);
  final double sdlon1Q=Math.sin(dlon1Q), cdlon1Q=MathUtil.sinToCos(dlon1Q,sdlon1Q);
  final double yE=sdlon12 * clat2;
  final double yQ=sdlon1Q * clatQ;
  final double xE=clat1 * slat2 - slat1 * clat2 * cdlon12;
  final double xQ=clat1 * slatQ - slat1 * clatQ * cdlon1Q;
  final double crs12=Math.atan2(yE,xE);
  final double crs1Q=Math.atan2(yQ,xQ);
  return Math.asin(Math.sin(angDist1Q) * Math.sin(crs1Q - crs12));
}
","public static double angle(double lat01,double lon1,double lat2,double lon2,double latQ,double lonQ){
  final double dlon12=lon2 - lon1;
  final double dlon1Q=lonQ - lon1;
  final double dlat1Q=latQ - lat01;
  final double clat1=Math.cos(lat01), slat1=MathUtil.cosToSin(lat01,clat1);
  final double clatQ=Math.cos(latQ), slatQ=MathUtil.cosToSin(latQ,clatQ);
  final double clat2=Math.cos(lat2), slat2=MathUtil.cosToSin(lat2,clat2);
  final double slat=Math.sin(dlat1Q * .5);
  final double slon=Math.sin(dlon1Q * .5);
  final double a=slat * slat + slon * slon * clat1* clatQ;
  final double angDist1Q=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));
  final double sdlon12=Math.sin(dlon12), cdlon12=MathUtil.sinToCos(dlon12,sdlon12);
  final double sdlon1Q=Math.sin(dlon1Q), cdlon1Q=MathUtil.sinToCos(dlon1Q,sdlon1Q);
  final double yE=sdlon12 * clat2;
  final double yQ=sdlon1Q * clatQ;
  final double xE=clat1 * slat2 - slat1 * clat2 * cdlon12;
  final double xQ=clat1 * slatQ - slat1 * clatQ * cdlon1Q;
  final double crs12=Math.atan2(yE,xE);
  final double crs1Q=Math.atan2(yQ,xQ);
  return Math.asin(Math.sin(angDist1Q) * Math.sin(crs1Q - crs12));
}
",320,30,"crossTrackDistanceRad:angle,lat1:lat01,",867,8.54661811987559,Beam
1743,"public void putBytes(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}
","public void Putbytes(byte[] rows){
  ensureCapacity(rows.length);
  System.arraycopy(rows,0,this.byteBuffer,this.position,rows.length);
  this.position+=rows.length;
}
",47,2,"bytes:rows,putBytes:Putbytes,",54,0.3899162769317627,Beam
1744,"public boolean remove(JsonElement element){
  return elements.remove(element);
}
","public boolean un(JsonElement parent){
  return elements.un(parent);
}
",17,3,"element:parent,remove:un,",66,0.47949109474817914,Beam
1745,,,83,5,,232,1.5243238806724548,0
1746,"public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {
  final String query=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ moduleId+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}
","public static void insertbasetypes(final CConnection connection,final int rawTableId,final int moduleId) throws SQLException {
  final String query=""INSERT INTO "" + CTableNames.BASE_TYPES_TABLE + "" SELECT ""+ moduleId+ "", id, name, size, pointer, signed ""+ ""FROM ""+ String.format(CTableNames.RAW_BASE_TYPES,rawTableId);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format(""SELECT setval(\'bn_base_types_id_seq\', "" + ""COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s"",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}
",89,6,"importBaseTypes:insertbasetypes,rawModuleId:rawTableId,",424,3.337838959693909,Beam
1747,"@SuppressWarnings(""unchecked"") public void restore(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
","@SuppressWarnings(""unchecked"") public void explORE(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}
",65,5,"restore:explORE,",32,0.22942733764648438,Beam
1748,"public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}
","public static boolean isDateAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date today){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && today.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && today.after(availableTo)) {
    return false;
  }
  return true;
}
",72,5,"isObjectAvailableNow:isDateAvailableNow,now:today,",371,3.333462285995483,Beam
1749,"@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){
  FieldConfigFontPreview copy=null;
  if (fieldConfigBase != null) {
    copy=new FieldConfigFontPreview(fieldConfigBase.getCommonData());
  }
  return copy;
}
","@Override protected FieldConfigBase toCop(FieldConfigBase fieldConfigBase){
  FieldConfigFontPreview copy=null;
  if (fieldConfigBase != null) {
    copy=new FieldConfigFontPreview(fieldConfigBase.getCommonData());
  }
  return copy;
}
",39,3,"createCopy:toCop,",9,0.052741698424021405,Beam
1750,"public void test_reopen01(){
  final IRawStore store=new SimpleMemoryRawStore();
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(3);
    btree=BTree.create(store,md);
  }
  assertTrue(btree.isOpen());
  btree.close();
  assertFalse(btree.isOpen());
  try {
    btree.close();
    fail(""Expecting: "" + IllegalStateException.class);
  }
 catch (  IllegalStateException ex) {
    if (log.isInfoEnabled())     log.info(""Ignoring expected exception: "" + ex);
  }
  assertNotNull(btree.getRoot());
  assertTrue(btree.isOpen());
}
","public void test_reclose00(){
  final IRawStore store=new SimpleMemoryRawStore();
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(3);
    btree=BTree.create(store,md);
  }
  assertTrue(btree.isOpen());
  btree.close();
  assertFalse(btree.isOpen());
  try {
    btree.close();
    fail(""Expecting: "" + IllegalStateException.class);
  }
 catch (  IllegalStateException obj) {
    if (log.isInfoEnabled())     log.info(""Ignoring expected exception: "" + obj);
  }
  assertNotNull(btree.getRoot());
  assertTrue(btree.isOpen());
}
",137,6,"test_reopen01:test_reclose00,ex:obj,",31,1.1654345194498699,Beam
1751,,,29,4,,807,5.725786471366883,0
1752,,,29,3,,61,0.3231914202372233,0
1753,,,34,2,,127,0.832067875067393,0
1754,"@SuppressWarnings({""rawtypes"",""unchecked""}) public static <T extends Annotation>T unproxy(T annotation){
  Function unproxyFunction=getUnproxyFunction(annotation.annotationType());
  return (T)unproxyFunction.apply(annotation);
}
","@SuppressWarnings({""rawtypes"",""unchecked""}) public static <T extends Annotation>T ounpool(T anotation){
  Function unproxyFunction=getUnproxyFunction(anotation.annotationType());
  return (T)unproxyFunction.apply(anotation);
}
",47,3,"unproxy:ounpool,annotation:anotation,",87,0.5457216064135234,Beam
1755,,,32,4,,409,3.521163829167684,0
1756,"public void test_vmstat_header_and_data_parse(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String data=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (log.isInfoEnabled())       log.info(""fields["" + i + ""]=[""+ fields[i]+ ""]"");
    }
    assertField(header,fields,2,""swpd"");
    assertField(header,fields,3,""free"");
    assertField(header,fields,6,""si"");
    assertField(header,fields,7,""so"");
    assertField(header,fields,12,""us"");
    assertField(header,fields,13,""sy"");
    assertField(header,fields,14,""id"");
    assertField(header,fields,15,""wa"");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,""96"");
    assertField(data,fields,3,""178580"");
    assertField(data,fields,6,""56"");
    assertField(data,fields,7,""12"");
    assertField(data,fields,12,""1"");
    assertField(data,fields,13,""0"");
    assertField(data,fields,14,""99"");
    assertField(data,fields,15,""3"");
  }
}
","public void build(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header=""  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st"";
  final String data=""  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0"";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (report.isInfoEnabled())       report.info(""fields["" + i + ""]=[""+ fields[i]+ ""]"");
    }
    assertField(header,fields,2,""swpd"");
    assertField(header,fields,3,""free"");
    assertField(header,fields,6,""si"");
    assertField(header,fields,7,""so"");
    assertField(header,fields,12,""us"");
    assertField(header,fields,13,""sy"");
    assertField(header,fields,14,""id"");
    assertField(header,fields,15,""wa"");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,""96"");
    assertField(data,fields,3,""178580"");
    assertField(data,fields,6,""56"");
    assertField(data,fields,7,""12"");
    assertField(data,fields,12,""1"");
    assertField(data,fields,13,""0"");
    assertField(data,fields,14,""99"");
    assertField(data,fields,15,""3"");
  }
}
",289,7,"test_vmstat_header_and_data_parse:build,log:report,",17,0.20341035922368367,Beam
1757,"public boolean matchesNamingConvension(){
  return packageName.matches(JAVA_PACKAGE_CONVENSION);
}
","public boolean matchesNamingConvension(){
  return moduleVersion.matches(JAVA_PACKAGE_CONVENSION);
}
",15,2,"packageName:moduleVersion,",32,0.24320658445358276,Beam
1758,"@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public <R>CompletableFuture<R> draw(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}
",51,5,"collect:draw,",37,0.2517794092496236,Beam
1759,,,17,2,,77,0.6425575613975525,0
1760,,,154,12,,343,3.009440533320109,0
1761,"private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}
","private static boolean isTrusted(Object pt,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(pt);
    return ctx.isTrustedObject(pt);
  }
  finally {
    state.set(saved);
  }
}
",54,5,"obj:pt,",17,0.14656978050867717,Beam
1762,,,122,7,,745,7.782807020346324,0
1763,,,59,5,,325,2.0883451739947003,0
1764,"long timestamp(long timestamp){
  this.timestamp=Math.max(this.timestamp,timestamp);
  return this.timestamp;
}
","long integency(long integency){
  this.integency=Math.max(this.integency,integency);
  return this.integency;
}
",28,1,"timestamp:integency,",15,0.11584648291269938,Beam
1765,,,25,4,,390,3.2571757316589354,0
1766,,,78,5,,152,1.483792813618978,0
1767,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}
","public int load() throws IOException {
  int val;
  if ((val=is.load()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.load() & 0xff));
  }
 else {
    val=(char)((is.load() << 8) | (val & 0xff));
  }
  return val;
}
",92,4,"read:load,",3,0.04020927349726359,Beam
1768,,,105,8,,253,2.266790552934011,0
1769,"public void handleMaintenance(Operation maintOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maintOp.complete();
}
","public void handleManiversary(Operation maintOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maintOp.complete();
}
",28,2,"handleMaintenance:handleManiversary,",37,0.1731945792833964,Beam
1770,"protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
","protected synchronized void onSentTaskCompleted(RecordBuffer<R> buffer){
  logger.trace(""{}:{} Send Completed"",name(),buffer);
  activeSendTasks.decrementAndGet();
}
",32,4,"onSendTaskCompleted:onSentTaskCompleted,",3,0.024693802992502848,Beam
1771,"private int measureHeight(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
","private int MEasuredBottom(int meureSc){
  float result;
  int specMode=MeasureSpec.getMode(meureSc);
  int specSize=MeasureSpec.getSize(meureSc);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}
",102,6,"measureHeight:MEasuredBottom,measureSpec:meureSc,",84,0.6746890505154928,Beam
1772,,,186,12,,433,3.3070483684539793,0
1773,"public void add(int i,int data){
  if (_length + 1 > _capacity)   ensureCapacity(_length + 1);
  System.arraycopy(_buffer,i,_buffer,i + 1,_length - i);
  _buffer[i]=(byte)data;
  _length+=1;
}
","public void copy(int i,int data){
  if (_length + 1 > _capacity)   ensureCapacity(_length + 1);
  System.arraycopy(_buffer,i,_buffer,i + 1,_length - i);
  _buffer[i]=(byte)data;
  _length+=1;
}
",60,6,"add:copy,",17,0.1201463500658671,Beam
1774,,,23,4,,59,0.4289163072903951,0
1775,"@Override public void update(List<EnvVar> dataList){
  envVarList.clear();
  if (dataList == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataList) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
","@Override public void load(List<EnvVar> dataQueue){
  envVarList.clear();
  if (dataQueue == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataQueue) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}
",108,5,"update:load,dataList:dataQueue,",46,0.3730436126391093,Beam
1776,,,50,5,,635,4.16128366390864,0
1777,"public static float computeContrastBetweenColors(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}
","public static float color(int bg,int ini){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(ini) / 255f;
  float fgG=Color.green(ini) / 255f;
  float fgB=Color.blue(ini) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}
",313,11,"computeContrastBetweenColors:color,fg:ini,",234,2.7327738285064695,Beam
1778,,,159,9,,717,7.374701555569967,0
1779,"public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}
","public boolean printPlatform(Profile profile){
  return printPlatform(profile,false);
}
",17,2,"putProfile:printPlatform,",43,0.23770339488983155,Beam
1780,,,192,9,,830,7.861909854412079,0
1781,"protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
","protected final void print_contact_information(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources(""board.resources.ObjectInfoPanel"");
  p_window.append("", "" + resources.getString(""contacts"") + "" "");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString(""contact_info""),contacts);
}
",92,7,"print_contact_info:print_contact_information,",36,0.289043919245402,Beam
1782,"ExternalProblem(Process process){
  this(process.getInputStream(),process.getOutputStream());
  RedirectStream.redirect(process.getErrorStream(),System.err);
}
","ExternalProcess(Process process){
  this(process.getInputStream(),process.getOutputStream());
  RedirectStream.redirect(process.getErrorStream(),System.err);
}
",37,2,"ExternalProblem:ExternalProcess,",40,0.3519322117169698,Beam
1783,,,76,4,,669,5.503641585508983,0
1784,"public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){
  int month, day, year, hour, minute, second;
  try {
    month=Integer.parseInt(monthStr);
    day=Integer.parseInt(dayStr);
    year=Integer.parseInt(yearStr);
    hour=Integer.parseInt(hourStr);
    minute=Integer.parseInt(minuteStr);
    second=Integer.parseInt(secondStr);
  }
 catch (  Exception e) {
    return null;
  }
  return toDate(month,day,year,hour,minute,second);
}
","public static java.util.Date fromdate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){
  int month, day, year, hour, minute, second;
  try {
    month=Integer.parseInt(monthStr);
    day=Integer.parseInt(dayStr);
    year=Integer.parseInt(yearStr);
    hour=Integer.parseInt(hourStr);
    minute=Integer.parseInt(minuteStr);
    second=Integer.parseInt(secondStr);
  }
 catch (  Exception e) {
    return null;
  }
  return fromdate(month,day,year,hour,minute,second);
}
",125,13,"toDate:fromdate,",60,0.5230476260185242,Beam
1785,"public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}
","public void submit(String queUrl,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queUrl);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queUrl,dispatcherTask);
      currentTasksMap.put(queUrl,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queUrl,dispatcherTask);
    }
  }
}
",72,7,"queueName:queUrl,",25,0.19888315995534261,Beam
1786,,,22,4,,622,4.7090837518374125,0
1787,"public TimeSeriesCollection(){
  this(null,TimeZone.getDefault());
}
","public TimeTimeList(){
  this(null,TimeZone.getDefault());
}
",17,1,"TimeSeriesCollection:TimeTimeList,",14,0.10163045724232991,Beam
1788,"public static Request request(){
  return threadLocal.get();
}
","public static Request start(){
  return threadLocal.get();
}
",15,2,"request:start,",5,0.0327976663907369,Beam
1789,,,111,7,,840,5.857445192337036,0
1790,,,209,11,,1960,123.21782830556234,0
1792,"private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {
    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollOffset > 0) {
      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);
    }
 else     if (mUnconsumedOverScrollOffset < 0) {
      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}
","private void consumeNestScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {
    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollOffset > 0) {
      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);
    }
 else     if (mUnconsumedOverScrollOffset < 0) {
      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}
",96,9,"consumeNestedScroll:consumeNestScroll,",37,0.2198213775952657,Beam
1793,,,74,5,,322,1.5172699054082235,0
1794,"private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}
","private int moveClients(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}
",370,26,"moveComponents:moveClients,",37,0.30228968063990275,Beam
1796,"public void removeTitlePrefix(String prfx){
  titlePrefix.remove(prfx);
  firePropertyChange(TITLE_PREFIX,null,titlePrefix);
}
","public void removeHeaderFixed(String prfx){
  titlePrefix.remove(prfx);
  firePropertyChange(TITLE_PREFIX,null,titlePrefix);
}
",25,3,"removeTitlePrefix:removeHeaderFixed,",38,0.19635214805603027,Beam
1797,,,54,5,,1411,12.008460752169292,0
1798,"private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
","private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> BackupSet=backupStatus.getBackedUpDiskStores();
  assertFalse(BackupSet.isEmpty());
  for (  DistributedMember member : BackupSet.keySet()) {
    for (    PersistentID id : BackupSet.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}
",90,5,"backupMap:BackupSet,",128,0.9232643882433573,Beam
1799,"private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}
","private void interpolateFunctionTree(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}
",220,8,"interpolateResultList:interpolateFunctionTree,",8,0.14899657567342123,Beam
1800,,,23,2,,307,1.8021711389223734,0
1801,"public GradleDistribution deserializeFromString(String distributionString){
  Preconditions.checkNotNull(distributionString);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith(""))"")) {
    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith(""))"")) {
    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith(""))"")) {
    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributionString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributionString);
  throw new RuntimeException(message);
}
","public GradleDistribution deserializeWithString(String distributionString){
  Preconditions.checkNotNull(distributionString);
  String localInstallationPrefix=""GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("";
  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith(""))"")) {
    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix=""GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("";
  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith(""))"")) {
    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix=""GRADLE_DISTRIBUTION(VERSION("";
  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith(""))"")) {
    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString=""GRADLE_DISTRIBUTION(WRAPPER)"";
  if (distributionString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format(""Cannot deserialize Gradle distribution string \'%s.\'"",distributionString);
  throw new RuntimeException(message);
}
",224,10,"deserializeFromString:deserializeWithString,",35,0.46014670133590696,Beam
1802,,,34,3,,148,0.6566507697105408,0
1803,,,38,3,,236,0.7910646875699361,0
1804,,,198,13,,446,2.20714484055837,0
1805,"private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}
","private void updateUifromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}
",216,14,"updateUiFromCommand:updateUifromCommand,",10,0.056317345301310225,Beam
1806,,,90,4,,669,3.241868797938029,0
1807,"public static double P_Harmonic(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmonic(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}
","public static double P_Harmonics(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmonics(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}
",119,8,"P_Harmonic:P_Harmonics,",55,1.3455507238705953,Beam
1808,"public String replace(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException(""target should not be null"");
  }
  if (replacement == null) {
    throw new NullPointerException(""replacement should not be null"");
  }
  String ts=target.toString();
  int index=indexOf(ts,0);
  if (index == -1)   return this;
  String rs=replacement.toString();
  StringBuilder buffer=new StringBuilder(count);
  int tl=target.length();
  int tail=0;
  do {
    buffer.append(value,offset + tail,index - tail);
    buffer.append(rs);
    tail=index + tl;
  }
 while ((index=indexOf(ts,tail)) != -1);
  buffer.append(value,offset + tail,count - tail);
  return buffer.toString();
}
","public String repl(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException(""target should not be null"");
  }
  if (replacement == null) {
    throw new NullPointerException(""replacement should not be null"");
  }
  String ts=target.toString();
  int index=indexOf(ts,0);
  if (index == -1)   return this;
  String rs=replacement.toString();
  StringBuilder buffer=new StringBuilder(count);
  int tl=target.length();
  int tail=0;
  do {
    buffer.append(value,offset + tail,index - tail);
    buffer.append(rs);
    tail=index + tl;
  }
 while ((index=indexOf(ts,tail)) != -1);
  buffer.append(value,offset + tail,count - tail);
  return buffer.toString();
}
",173,12,"replace:repl,",8,0.048617637157440184,Beam
1809,,,34,3,,110,0.4515711267789205,0
1810,"private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + response.size() + "" items to our queue"");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}
","private void updateResponse(AvsResponse example){
  boolean checkAfter=(avsQueue.size() == 0);
  if (example != null) {
    for (int i=example.size() - 1; i >= 0; i--) {
      if (example.get(i) instanceof AvsReplaceAllItem || example.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        example.remove(i);
      }
    }
    Log.i(TAG,""Adding "" + example.size() + "" items to our queue"");
    avsQueue.addAll(example);
  }
  if (checkAfter) {
    checkQueue();
  }
}
",121,5,"response:example,handleResponse:updateResponse,",73,0.329736336072286,Beam
1811,,,32,3,,154,0.6153066317240398,0
1812,,,16,2,,171,0.725503945350647,0
1813,"private static String checksumMD5(String data){
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""MD5"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(""Unable to create MD5 instance"",ex);
  }
  return hexEncode(md5.digest(data.getBytes()));
}
","private static String checksumMD32(String data){
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance(""MD5"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(""Unable to create MD5 instance"",ex);
  }
  return hexEncode(md5.digest(data.getBytes()));
}
",58,4,"checksumMD5:checksumMD32,",37,0.17517218589782715,Beam
1815,"public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}
","public static void print(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.print(x1,y1,image_width,image_height,pixels,properties,dos);
}
",93,10,"write:print,",138,0.9057349125544231,Beam
1816,"private void fireEvent(final IRunningQuery q){
  if (q == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final IRunningQueryListener[] a=listeners.toArray(new IRunningQueryListener[0]);
  for (  IRunningQueryListener l : a) {
    final IRunningQueryListener listener=l;
    try {
      listener.notify(q);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}
","private void FireEvent(final IRunningQuery query){
  if (query == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final IRunningQueryListener[] a=listeners.toArray(new IRunningQueryListener[0]);
  for (  IRunningQueryListener l : a) {
    final IRunningQueryListener listener=l;
    try {
      listener.notify(query);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      bug.error(t,t);
    }
  }
}
",114,8,"q:query,fireEvent:FireEvent,log:bug,",222,1.0155383189519247,Beam
1817,"public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
","public String ImportTRL(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ ""_""+ AD_Language+ "".xml"";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg=""File does not exist: "" + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info(""Updated="" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,""Updated"") + ""="" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,""importTrl"",e);
    return e.toString();
  }
}
",180,14,"importTrl:ImportTRL,",54,0.2224139372507731,Beam
1818,,,86,5,,187,1.018551270167033,0
1819,"void readPRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
","void writePRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith(""EOP""))     return;
  }
}
",42,3,"readPRJ:writePRJ,",7,0.033174216747283936,Beam
1821,,,101,10,,1338,7.747841664155325,0
1822,"protected boolean display(File helpFile) throws HelpException {
  if (helpFile.exists()) {
    loadAndWrite(helpFile);
    return true;
  }
 else {
    File notFound=new File(helpDir,NOT_FOUND);
    if (notFound.exists())     loadAndWrite(notFound);
 else     throw new HelpException(""Topic not found, try \'help\' for more information"");
    return false;
  }
}
","protected boolean empty(File helpFile) throws HelpException {
  if (helpFile.exists()) {
    loadAndWrite(helpFile);
    return true;
  }
 else {
    File notFound=new File(helpDir,NOT_FOUND);
    if (notFound.exists())     loadAndWrite(notFound);
 else     throw new HelpException(""Topic not found, try \'help\' for more information"");
    return false;
  }
}
",67,5,"display:empty,",9,0.04816362460454305,Beam
1823,"public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}
","public static double[] expandMatrixI(int bufferSize,double[] currentCover){
  if (currentCover == null) {
    return new double[bufferSize * 3];
  }
  int length=currentCover.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentCover,0,ret,0,length);
  return ret;
}
",74,5,"expandArrayD:expandMatrixI,currentArray:currentCover,",90,0.5441039760907491,Beam
1824,,,129,2,,49,0.5673996766408285,0
1825,"public void addMessage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
","public void setPage(String document){
  messages.addLast(document);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}
",42,5,"message:document,addMessage:setPage,",54,0.23230069478352863,Beam
1826,"public void addDelete(IResource delete){
  if (fDelete == null)   fDelete=new ArrayList<IResource>(2);
  fDelete.add(delete);
  if (fIgnoreCount == 0) {
    internalAdd(new DeleteDescription(delete));
  }
}
","public void Adddelete(IResource route){
  if (fDelete == null)   fDelete=new ArrayList<IResource>(2);
  fDelete.add(route);
  if (fIgnoreCount == 0) {
    internalAdd(new DeleteDescription(route));
  }
}
",50,4,"addDelete:Adddelete,delete:route,",57,0.3314846118291219,Beam
1827,"public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}
","public final int empty(){
  if (GWT.isScript()) {
    return jsArray.empty();
  }
 else {
    return javaArray.empty();
  }
}
",35,3,"size:empty,",7,0.040710262457529706,Beam
1828,"public void unlockForClear(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
","public void unlockByCreate(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug(""Unlocking for clear, from member {} RVV {}"",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug(""current clear lock owner was {} not unlocking"",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}
",106,5,"unlockForClear:unlockByCreate,",42,0.2092381199200948,Beam
1829,,,26,3,,283,1.6541329145431518,0
1830,"@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}
","@Override public void mousePressed(MouseEvent em){
  m_frameLimiter.setRepeats(true);
  if ((em.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !em.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((em.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((em.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((em.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((em.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=em.getX();
      m_oldMousePos.height=em.getY();
      m_newMousePos.width=em.getX();
      m_newMousePos.height=em.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=em.getX();
      m_oldMousePos.height=em.getY();
      m_newMousePos.width=em.getX();
      m_newMousePos.height=em.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((em.getButton() == MouseEvent.BUTTON1) && em.isAltDown() && em.isShiftDown()&& !em.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}
",374,8,"e:em,",7,0.10554887453715006,Beam
1831,,,104,10,,842,5.07656132777532,0
1832,"public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}
","public final void log(String filename,int lineNumber,String plugin,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (plugin != null)   lm.addString(plugin,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}
",147,9,"method:plugin,",62,0.2885460416475932,Beam
1833,"public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}
","public void show(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.show();
  }
}
",60,5,"print:show,",7,0.04372467597325643,Beam
1834,,,81,3,,266,1.2669442216555278,0
1835,"public void serialize(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}
","public void serializer(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug(""Sending {} message: {}"",name,bytesToHexString(header) + bytesToHexString(message));
}
",179,10,"serialize:serializer,",3,0.014062273502349853,Beam
1836,,,79,4,,299,1.5842053850491842,0
1837,,,38,5,,323,2.5053260405858357,0
1838,"void addRule(String[] selector,AttributeSet declaration,boolean isLinked){
  int n=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(selector[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}
","void resolve(String[] Selectore,AttributeSet declaration,boolean isLinked){
  int n=Selectore.length;
  StringBuilder sb=new StringBuilder();
  sb.append(Selectore[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(Selectore[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(Selectore[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,Selectore,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}
",216,12,"addRule:resolve,selector:Selectore,",161,1.3975092887878418,Beam
1839,"public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {
  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));
}
","public void convertBuiltoutAudio(String soundIdentifier,InputStream data) throws IOException {
  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));
}
",26,4,"installBuiltinSound:convertBuiltoutAudio,",9,0.04498325188954671,Beam
1840,,,98,6,,744,5.561246037483215,0
1841,,,89,5,,622,2.5859739899635317,0
1843,"public static boolean isWindows8(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}
","public static boolean Iswindows8(){
  return osName.indexOf(""Windows"") > -1 && (osVersion.equals(""6.2"") || osVersion.equals(""6.3""));
}
",35,3,"isWindows8:Iswindows8,",20,0.0672206203142802,Beam
1844,,,172,6,,204,1.2542635321617126,0
1845,"private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}
","private double addRecurly(ArrayList<double[]> thiller,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    thiller.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecurly(thiller,hier,iter.get());
  }
  return weight;
}
",175,10,"hull:thiller,addRecursively:addRecurly,",411,2.91796311934789,Beam
1846,"public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
","public void updateViaFile(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}
",201,12,"updateFromResource:updateViaFile,",10,0.12378408114115397,Beam
1847,"private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}
","private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] wounded){
  Type[] result=wounded;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}
",100,6,"bounds:wounded,",60,0.3711330731709798,Beam
1848,"public void collapseBuilding(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    collapseBuilding(coords);
  }
}
","public void colapseConstruction(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    colapseConstruction(coords);
  }
}
",53,5,"collapseBuilding:colapseConstruction,",29,0.12629987398783366,Beam
1849,,,57,5,,338,1.3833895802497864,0
1851,"public static void printLine(Object message){
  if (!isDisabled()) {
    printLine(String.valueOf(message));
  }
}
","public static void formatLine(Object content){
  if (!isDisabled()) {
    formatLine(String.valueOf(content));
  }
}
",29,2,"printLine:formatLine,message:content,",224,1.049965778986613,Beam
1852,"protected void add(CSVRecord record){
  records.add(Objects.requireNonNull(record));
}
","protected void create(CSVRecord record){
  records.create(Objects.requireNonNull(record));
}
",21,3,"add:create,",15,0.06024934450785319,Beam
1853,,,31,3,,265,1.0490330735842386,0
1854,"public Server start() throws SQLException {
  try {
    started=true;
    service.start();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.start();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}
","public Server play() throws SQLException {
  try {
    started=true;
    service.play();
    String name=service.getName() + "" ("" + service.getURL()+ "")"";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.play();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,""timeout; "" + ""please check your network configuration, specially the file /etc/hosts"");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}
",146,7,"start:play,",10,0.06839449405670166,Beam
1855,"public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
","public static void elseCL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}
",32,2,"closeEL:elseCL,",8,0.03352565765380859,Beam
1856,,,73,4,,935,5.860228705406189,0
1857,,,210,12,,2034,14.815808240572611,0
1859,"public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){
  List<Interceptor> allInters=new ArrayList<Interceptor>();
  for (  Interceptor defaultInter : defaultInters) {
    allInters.add(defaultInter);
  }
  for (  Interceptor resourceInter : resourceInters) {
    allInters.add(resourceInter);
  }
  for (  Interceptor methodInter : methodInters) {
    allInters.add(methodInter);
  }
  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);
  Class<? extends Interceptor>[] methodClears=getMethodClears(method);
  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {
    for (int i=0; i < allInters.size(); i++) {
      i=clearInterceptor(allInters,resourceClears,i);
      i=clearInterceptor(allInters,methodClears,i);
    }
  }
  return allInters.toArray(new Interceptor[allInters.size()]);
}
","public Interceptor[] intercept(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInrators,Method method){
  List<Interceptor> allInters=new ArrayList<Interceptor>();
  for (  Interceptor defaultInter : defaultInters) {
    allInters.add(defaultInter);
  }
  for (  Interceptor resourceInter : resourceInters) {
    allInters.add(resourceInter);
  }
  for (  Interceptor methodInter : methodInrators) {
    allInters.add(methodInter);
  }
  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);
  Class<? extends Interceptor>[] methodClears=getMethodClears(method);
  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {
    for (int i=0; i < allInters.size(); i++) {
      i=clearInterceptor(allInters,resourceClears,i);
      i=clearInterceptor(allInters,methodClears,i);
    }
  }
  return allInters.toArray(new Interceptor[allInters.size()]);
}
",212,13,"buildRouteInterceptors:intercept,methodInters:methodInrators,",344,2.927297329902649,Beam
1860,,,17,2,,298,1.6008635361989338,0
1861,,,79,6,,707,3.738383587201436,0
1862,"public void layout(Container container){
  Map<Location,Drawable> comps=getComponentsByLocation(container);
  Drawable north=comps.get(Location.NORTH);
  Drawable northEast=comps.get(Location.NORTH_EAST);
  Drawable east=comps.get(Location.EAST);
  Drawable southEast=comps.get(Location.SOUTH_EAST);
  Drawable south=comps.get(Location.SOUTH);
  Drawable southWest=comps.get(Location.SOUTH_WEST);
  Drawable west=comps.get(Location.WEST);
  Drawable northWest=comps.get(Location.NORTH_WEST);
  Drawable center=comps.get(Location.CENTER);
  double widthWest=getMaxWidth(northWest,west,southWest);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double heightNorth=getMaxHeight(northWest,north,northEast);
  double heightSouth=getMaxHeight(southWest,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;
  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;
  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;
  Rectangle2D bounds=container.getBounds();
  Insets2D insets=container.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;
  double xCenter=bounds.getMinX() + insets.getLeft();
  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;
  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;
  double yCenter=bounds.getMinY() + insets.getTop();
  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;
  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);
  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);
  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);
  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);
  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);
  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);
  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());
  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());
}
","public void place(Container container){
  Map<Location,Drawable> comps=getComponentsByLocation(container);
  Drawable north=comps.get(Location.NORTH);
  Drawable northEast=comps.get(Location.NORTH_EAST);
  Drawable east=comps.get(Location.EAST);
  Drawable southEast=comps.get(Location.SOUTH_EAST);
  Drawable south=comps.get(Location.SOUTH);
  Drawable southWest=comps.get(Location.SOUTH_WEST);
  Drawable west=comps.get(Location.WEST);
  Drawable northWest=comps.get(Location.NORTH_WEST);
  Drawable center=comps.get(Location.CENTER);
  double widthWest=getMaxWidth(northWest,west,southWest);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double heightNorth=getMaxHeight(northWest,north,northEast);
  double heightSouth=getMaxHeight(southWest,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;
  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;
  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;
  Rectangle2D bounds=container.getBounds();
  Insets2D insets=container.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;
  double xCenter=bounds.getMinX() + insets.getLeft();
  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;
  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;
  double yCenter=bounds.getMinY() + insets.getTop();
  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;
  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);
  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);
  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);
  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);
  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);
  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);
  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());
  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());
}
",572,28,"layout:place,",5,0.04028083880742391,Beam
1863,"@SuppressWarnings(""unused"") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}
","@SuppressWarnings(""unused"") public boolean onMoveEnd(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 1 - "" + multiTouchSupported + "" ""+ mMode+ "" ""+ handleSingleTouchEvents+ "" ""+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i(""MultiTouch"",""Got here 2"");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 3"");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i(""MultiTouch"",""Got here 4"");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i(""MultiTouch"",""Got more pointers than MAX_TOUCH_POINTS"");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e(""MultiTouchController"",""onTouchEvent() failed"",e);
    return false;
  }
}
",488,27,"onTouchEvent:onMoveEnd,",7,0.04943641424179077,Beam
1865,,,16,3,,180,0.8210669994354248,0
1866,"public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assetwk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}
","public boolean Caninvolve(MDepreciationWorkfile assasswk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assasswk == null) {
    log.warning(""@NotFound@ @A_Depreciation_Workfile_ID@"");
    return false;
  }
  int offset=0;
  int lifePeriods=assasswk.getUseLifeMonths(assasswk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest(""A_Current_Period="" + A_Current_Period + "", lifePeriods=""+ lifePeriods+ "" (offset=""+ offset+ "") ==> OK=""+ ok);
  return ok;
}
",96,9,"assetwk:assasswk,canInvoke:Caninvolve,",145,0.9835181315739949,Beam
1867,"public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}
","public static int oh(Object ol){
  int h=ol == null ? 0 : ol instanceof byte[] ? Arrays.hashCode((byte[])ol) : ol.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}
",106,3,"hash:oh,o:ol,",74,0.3850873311360677,Beam
1868,"public static <E>List<E> of(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}
","public static <E>List<E> set(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}
",59,5,"of:set,",21,0.10895611842473348,Beam
1869,,,22,3,,90,0.43380905787150065,0
1870,"public boolean isInvalidNode(){
  ASTNode first=fNodes.get(0);
  ASTNode candidate=first.getParent();
  if (candidate == null)   return false;
  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}
","public boolean isMissingTree(){
  ASTNode first=fNodes.get(0);
  ASTNode Candidates=first.getParent();
  if (Candidates == null)   return false;
  if (Candidates.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}
",53,4,"isInvalidNode:isMissingTree,candidate:Candidates,",36,0.19802730083465575,Beam
1871,"public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
","public void refreshInheritedMethods(Set modifiedSuperExandos){
  for (Iterator i=modifiedSuperExandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}
",54,4,"modifiedSuperExpandos:modifiedSuperExandos,",3,0.01927407185236613,Beam
1872,,,105,6,,641,3.9154869516690574,0
1873,,,37,3,,290,1.7164372126261394,0
1874,,,68,7,,2333,15.378058203061421,0
1876,,,34,4,,513,2.484707184632619,0
1877,"public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isReversal) {
      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException(""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",totalCreditedAmount,totalAmount);
  }
}
","public void pay(final Office organ,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isReversal) {
      createDebitJournalEntryForLoan(organ,currencyCode,account,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(organ,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(organ,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(organ,currencyCode,account,loanId,transactionId,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException(""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",""Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction"",totalCreditedAmount,totalAmount);
  }
}
",323,23,"createAccrualBasedJournalEntriesAndReversalsForLoanCharges:pay,office:organ,",693,4.823822200298309,Beam
1878,"private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}
","private static String convertNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text=""0"" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}
",64,2,"forceNumberStringToTwoDigits:convertNumberStringToTwoDigits,",3,0.016930782794952394,Beam
1879,"public IVector(int c){
  vector=new int[Math.max(defaultCapacity,c)];
}
","public IVouter(int c){
  vector=new int[Math.max(defaultCapacity,c)];
}
",23,4,"IVector:IVouter,",38,0.17352486451466878,Beam
1880,,,82,3,,74,0.7586872259775798,0
1881,"private void checkStart(){
  if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) {
    mOutput.start();
  }
}
","private void checkSplit(){
  if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) {
    mOutput.start();
  }
}
",34,4,"checkStart:checkSplit,",8,0.04275238116582235,Beam
1882,,,29,2,,233,2.192963171005249,0
1883,,,56,4,,297,1.5505529721577962,0
1884,,,59,5,,146,0.7142548203468323,0
1885,"private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}
","private static String ToNumber(double Coefficient){
  final String c=Double.ToNumber(Coefficient);
  if (c.endsWith("".0"")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}
",54,3,"toString:ToNumber,coeff:Coefficient,",55,0.21351146697998047,Beam
1886,,,46,4,,203,1.3851144035657248,0
1887,,,99,9,,1217,9.862464209397634,0
1888,,,27,2,,103,0.3473004778226217,0
1889,"public static long[] interpose(long[] vector,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,updated,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    updated[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,updated,offset + len,vectorLen - offset);
  return updated;
}
","public static long[] interpose(long[] vec,int vectorLen,int off,int len){
  long[] updated=create(vectorLen + len);
  int idx=off >> 6;
  System.arraycopy(vec,0,updated,0,idx);
  if (idx < vec.length) {
    int delta=off & 63;
    updated[idx]|=vec[idx] & maskBelow(delta);
  }
  copy(vec,off,updated,off + len,vectorLen - off);
  return updated;
}
",110,8,"offset:off,vector:vec,",290,1.7144161184628806,Beam
1890,"private int countNonNewline(String str,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (str.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (str.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}
","private int countNonNewline(String str,int down,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=down + cnt;
    if (str.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (str.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}
",74,8,"off:down,",68,0.4174116651217143,Beam
1891,"protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}
","protected void drawText(String string1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(string1,0,string1.length());
  int offset=(int)w / 2;
  c.drawText(string1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}
",167,13,"text1:string1,",35,0.1807389736175537,Beam
1893,"private Optional<CuratorFramework> createClient(String zookeeperUrl){
  if (StringUtils.isNotBlank(zookeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
","private Optional<CuratorFramework> getClient(String zookeployUrl){
  if (StringUtils.isNotBlank(zookeployUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeployUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}
",57,3,"createClient:getClient,zookeeperUrl:zookeployUrl,",92,0.4773406704266866,Beam
1894,"static void normalize(StringBuilder number){
  String normalizedNumber=normalize(number.toString());
  number.replace(0,number.length(),normalizedNumber);
}
","static void realise(StringBuilder unit){
  String normalizedNumber=realise(unit.toString());
  unit.replace(0,unit.length(),normalizedNumber);
}
",36,3,"number:unit,normalize:realise,",78,0.46548227469126385,Beam
1895,,,94,4,,140,0.6780348976453145,0
1896,,,44,4,,593,3.3147905985514323,0
1897,,,35,3,,762,3.460193967819214,0
1898,"public static String grabClass(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signature);
  return matcher.group(1);
}
","public static String identifyCode(String signner){
  Matcher matcher=sigRE.matcher(signner);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error(""Bad method signature: {}"",signner);
  return matcher.group(1);
}
",59,6,"signature:signner,grabClass:identifyCode,",77,0.44827375809351605,Beam
1899,,,17,4,,921,4.634523216883341,0
1901,"public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}
","public byte[] extractorInfo(byte[] stigoName,String stegoClassPath,byte[] origSigData) throws OpenStegoException {
  return null;
}
",26,4,"extractData:extractorInfo,stegoData:stigoName,stegoFileName:stegoClassPath,",547,2.6045287450154624,Beam
1902,"private V doGet(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}
","private V goRead(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings(""unchecked"") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}
",200,10,"doGet:goRead,",40,0.25646387338638305,Beam
1904,"private void ensureCapacity(int additionalData){
  if ((this.position + additionalData) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + additionalData)) {
      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + additionalData;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}
","private void enssureCapSpace(int addensedDATA){
  if ((this.position + addensedDATA) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + addensedDATA)) {
      newLength=this.byteBuffer.length + (int)(addensedDATA * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + addensedDATA;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}
",136,4,"ensureCapacity:enssureCapSpace,additionalData:addensedDATA,",145,1.0330328941345215,Beam
1905,,,54,4,,197,1.1320712129275003,0
1906,"public void testCreationUnique(){
  Instances data;
  ArrayList<Attribute> atts;
  String relName;
  relName=""testCreationUnique"";
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""att-numeric_1""));
  atts.add(new Attribute(""att-numeric_2""));
  atts.add(new Attribute(""att-data_1"",""yyyy-MM-dd HH:mm""));
  atts.add(new Attribute(""att-nominal_1"",new ArrayList<String>(Arrays.asList(new String[]{""1"",""2"",""3""}))));
  atts.add(new Attribute(""att-nominal_2"",new ArrayList<String>(Arrays.asList(new String[]{""yes"",""no""}))));
  atts.add(new Attribute(""att-string_1"",(ArrayList<String>)null));
  data=new Instances(relName,atts,0);
  assertEquals(""relation name differs"",relName,data.relationName());
  assertEquals(""# of attributes differ"",atts.size(),data.numAttributes());
}
","public void testPresentationalCustom(){
  Instances data;
  ArrayList<Attribute> atts;
  String relName;
  relName=""testCreationUnique"";
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute(""att-numeric_1""));
  atts.add(new Attribute(""att-numeric_2""));
  atts.add(new Attribute(""att-data_1"",""yyyy-MM-dd HH:mm""));
  atts.add(new Attribute(""att-nominal_1"",new ArrayList<String>(Arrays.asList(new String[]{""1"",""2"",""3""}))));
  atts.add(new Attribute(""att-nominal_2"",new ArrayList<String>(Arrays.asList(new String[]{""yes"",""no""}))));
  atts.add(new Attribute(""att-string_1"",(ArrayList<String>)null));
  data=new Instances(relName,atts,0);
  assertEquals(""relation name differs"",relName,data.relationName());
  assertEquals(""# of attributes differ"",atts.size(),data.numAttributes());
}
",197,4,"testCreationUnique:testPresentationalCustom,",19,0.08959563175837199,Beam
1907,"public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure condition){
  return dropWhile(self.toString(),condition);
}
","public static String dropWhile(GString x,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={""String"",""Character""}) Closure create){
  return dropWhile(x.toString(),create);
}
",48,3,"self:x,condition:create,",197,1.2397221008936563,Beam
1908,"public static String toString(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.toString(l,10);
  }
  return NUMBERS[(int)l];
}
","public static String sizeStr(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.sizeStr(l,10);
  }
  return NUMBERS[(int)l];
}
",41,5,"toString:sizeStr,",12,0.07211207946141561,Beam
1909,,,81,4,,207,1.2534724275271099,0
1910,,,27,4,,209,1.1939975460370382,0
1911,,,23,1,,25,0.10109958251317343,0
1912,"public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}
","public int parseInt(String localeFormattedInstance){
  return Integer.parseInt(localeFormattedInstance);
}
",17,2,"localeFormattedInteger:localeFormattedInstance,",32,0.14041994015375772,Beam
1913,"public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
","public static Entry addObjectToken(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}
",46,3,"addObjectClass:addObjectToken,",40,0.161039400100708,Beam
1914,,,16,3,,243,0.8797368804613749,0
1915,,,32,3,,118,0.5976114908854167,0
1916,,,28,1,,59,0.22281066179275513,0
1917,"HttpStreamWrapper(HttpStream stream) throws IOException {
  _stream=stream;
}
","HttpStreamWrapper(HttpStream resource) throws IOException {
  _stream=resource;
}
",13,3,"stream:resource,",36,0.15270058314005533,Beam
1918,,,320,13,,1003,7.640655728181203,0
1919,"protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposals=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           proposals.add(editProposal);
        }
      }
    }
  }
  return proposals;
}
","protected List<IEditProposal> collectEditProposedales(){
  List<IEditProposal> perpositionitions=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           perpositionitions.add(editProposal);
        }
      }
    }
  }
  return perpositionitions;
}
",88,6,"collectEditProposals:collectEditProposedales,proposals:perpositionitions,",144,0.6937904596328736,Beam
1920,"public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}
","public Builder addCurrentRead(byte[] start){
  Assertions.checkState(start != null && start.length > 0);
  segments.add(new Segment(start,null));
  return this;
}
",42,3,"appendReadData:addCurrentRead,data:start,",52,0.25063695907592776,Beam
1921,"public boolean isProcessed(Trace trace,Node node,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(node.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ node+ "" direction=""+ direction+ ""? ""+ ret);
  }
  return ret;
}
","public boolean isProcessed(Trace trace,Node child,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == child.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(child.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest(""ProcessManager/Processor: isProcessed trace="" + trace + "" node=""+ child+ "" direction=""+ direction+ ""? ""+ ret);
  }
  return ret;
}
",104,8,"node:child,",12,0.07194846471150716,Beam
1922,"public void testOrderedByDatatype() throws Exception {
  int lastType=Integer.MIN_VALUE;
  while (typeInfoRs.next()) {
    String name=typeInfoRs.getString(""TYPE_NAME"");
    int type=typeInfoRs.getInt(""DATA_TYPE"");
    assertTrue(""type "" + type + "" (""+ name+ "") less than last type ""+ lastType,type >= lastType);
    lastType=type;
  }
}
","public void assertOrderedByDatetypes() throws Exception {
  int nextName=Integer.MIN_VALUE;
  while (typeInfReader.next()) {
    String name=typeInfReader.getString(""TYPE_NAME"");
    int type=typeInfReader.getInt(""DATA_TYPE"");
    assertTrue(""type "" + type + "" (""+ name+ "") less than last type ""+ nextName,type >= nextName);
    nextName=type;
  }
}
",69,5,"testOrderedByDatatype:assertOrderedByDatetypes,typeInfoRs:typeInfReader,lastType:nextName,",191,3.289623542626699,Beam
1923,"public boolean isStored(){
  return Integer.signum(id) != -1;
}
","public boolean isStorer(){
  return Integer.signum(id) != -1;
}
",18,2,"isStored:isStorer,",4,0.01968736251195272,Beam
1924,,,85,7,,151,0.8305346647898356,0
1925,,,190,8,,1111,7.343562976519267,0
1926,,,81,7,,455,2.5171735843022662,0
1927,,,95,7,,338,1.872387913862864,0
1928,"@Override protected String toString(File obj){
  return obj.getAbsolutePath();
}
","@Override protected String oService(File obj){
  return obj.getAbsolutePath();
}
",18,2,"toString:oService,",43,0.1689387599627177,Beam
1929,,,23,3,,595,3.769130837917328,0
1930,,,180,12,,353,1.6895955801010132,0
1931,,,25,4,,510,2.8936123609542848,0
1932,,,19,3,,152,0.7281032959620158,0
1933,,,35,3,,122,0.49089264472325644,0
1934,"public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}
","public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt pjmodel,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,pjmodel,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}
",112,15,"p_location:pjmodel,",15,0.5639521996180217,Beam
1935,"public static Properties loadProperties(ClassLoader classLoader,String classpathResource){
  return loadProperties(null,classpathResource);
}
","public static Properties readProProperty(ClassLoader classLoader,String Classpathresource){
  return readProProperty(null,Classpathresource);
}
",21,3,"classpathResource:Classpathresource,loadProperties:readProProperty,",171,0.686214558283488,Beam
1936,,,45,6,,1167,5.179697493712108,0
1937,"public String versionCompact(){
  return properties.getProperty(""version.compact"");
}
","public String VersionImpacts(){
  return properties.getProperty(""version.compact"");
}
",15,2,"versionCompact:VersionImpacts,",23,0.0797032634417216,Beam
1938,"public static void fullReset(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
","public static void fullRevot(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}
",24,2,"fullReset:fullRevot,",9,0.051716355482737224,Beam
1939,,,16,2,,93,0.4233357230822245,0
1941,,,16,2,,38,0.18210815985997517,0
1942,,,291,22,,1674,9.857025853792827,0
1943,"public final void updateCursor(){
  updatePending.set(false);
  updateCursorImpl();
}
","public final void updateCatch(){
  updatePayending.set(false);
  updateCursorImpl();
}
",19,2,"updateCursor:updateCatch,updatePending:updatePayending,",21,0.10043495098749797,Beam
1944,"public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}
","public static final byte[] munpack(byte[] m) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * m.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(m));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}
",102,8,"unzip:munpack,in:m,",81,0.4650907516479492,Beam
1945,,,35,3,,240,1.00358544588089,0
1946,"public void testBug66947() throws Exception {
  Connection con=null;
  try {
    Properties props=new Properties();
    props.setProperty(""useServerPrepStmts"",""true"");
    props.setProperty(""cachePrepStmts"",""true"");
    props.setProperty(""prepStmtCacheSize"",""2"");
    con=getConnectionWithProps(props);
    PreparedStatement ps1_1;
    PreparedStatement ps1_2;
    String query=""Select \'a\' from dual"";
    ps1_1=con.prepareStatement(query);
    ps1_1.execute();
    ps1_1.close();
    ps1_2=con.prepareStatement(query);
    assertSame(""SSPS should be taken from cache but is not the same."",ps1_1,ps1_2);
    ps1_2.execute();
    ps1_2.close();
    ps1_2.close();
    ps1_1=con.prepareStatement(query);
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_2,ps1_1);
    ps1_1.execute();
    ps1_1.close();
    ps1_1.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_1=con.prepareStatement(""Select \'b\' from dual"");
    ps1_1.execute();
    ps1_1.close();
    ps2_1=con.prepareStatement(""Select \'c\' from dual"");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=con.prepareStatement(""Select \'d\' from dual"");
    ps3_1.execute();
    ps3_1.close();
    ps1_2=con.prepareStatement(""Select \'b\' from dual"");
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_1,ps1_2);
    ps2_2=con.prepareStatement(""Select \'c\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps2_1,ps2_2);
    ps3_2=con.prepareStatement(""Select \'d\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps3_1,ps3_2);
  }
  finally {
    if (con != null) {
      con.close();
    }
  }
}
","public void connect() throws Exception {
  Connection con=null;
  try {
    Properties props=new Properties();
    props.setProperty(""useServerPrepStmts"",""true"");
    props.setProperty(""cachePrepStmts"",""true"");
    props.setProperty(""prepStmtCacheSize"",""2"");
    con=getConnectionWithProps(props);
    PreparedStatement ps1_1;
    PreparedStatement ps1_2;
    String query=""Select \'a\' from dual"";
    ps1_1=con.prepareStatement(query);
    ps1_1.execute();
    ps1_1.close();
    ps1_2=con.prepareStatement(query);
    assertSame(""SSPS should be taken from cache but is not the same."",ps1_1,ps1_2);
    ps1_2.execute();
    ps1_2.close();
    ps1_2.close();
    ps1_1=con.prepareStatement(query);
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_2,ps1_1);
    ps1_1.execute();
    ps1_1.close();
    ps1_1.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_1=con.prepareStatement(""Select \'b\' from dual"");
    ps1_1.execute();
    ps1_1.close();
    ps2_1=con.prepareStatement(""Select \'c\' from dual"");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=con.prepareStatement(""Select \'d\' from dual"");
    ps3_1.execute();
    ps3_1.close();
    ps1_2=con.prepareStatement(""Select \'b\' from dual"");
    assertNotSame(""SSPS should not be taken from cache but is the same."",ps1_1,ps1_2);
    ps2_2=con.prepareStatement(""Select \'c\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps2_1,ps2_2);
    ps3_2=con.prepareStatement(""Select \'d\' from dual"");
    assertSame(""SSPS should be taken from cache but is not the same."",ps3_1,ps3_2);
  }
  finally {
    if (con != null) {
      con.close();
    }
  }
}
",309,10,"testBug66947:connect,",28,0.3033925652503967,Beam
1947,"public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}
","public static void modifierfile(File input,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(input),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),input);
}
",64,5,"modifyFile:modifierfile,file:input,",76,0.32263964811960855,Beam
1948,"public double localScore(int i,int... parents){
  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=parents.length;
  Matrix covxx=getSelection1(covariances,parents);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,parents,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);
      _parents.removeAll(forbidden);
      parents=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(parents,covariances);
    }
    return Double.NaN;
  }
}
","public double randomScale(int i,int... users){
  for (  int p : users)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=users.length;
  Matrix covxx=getSelection1(covariances,users);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,users,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println(""Nonpositive residual varianceY: resVar / varianceY = "" + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < users.length; y++)       _parents.add(users[y]);
      _parents.removeAll(forbidden);
      users=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       users[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(users,covariances);
    }
    return Double.NaN;
  }
}
",355,21,"localScore:randomScale,parents:users,",361,2.323128366470337,Beam
1949,"public static <NodeType extends IViewNode<?>>ZyProximityNode<?> createProximityNode(final Graph2D graph,final ZyGraphNode<?> attachedNode,final int degree,final boolean isIncoming){
  Preconditions.checkNotNull(graph,""Graph argument can not be null"");
  Preconditions.checkNotNull(attachedNode,""Target node argument can not be null"");
  final ZyLabelContent labelcontent=new ZyLabelContent(null);
  labelcontent.addLineContent(new ZyLineContent(String.valueOf(degree),new Font(""New Courier"",Font.PLAIN,12),null));
  final ZyProximityNodeRealizer<NodeType> r=new ZyProximityNodeRealizer<NodeType>(labelcontent);
  final Node node=graph.createNode(r);
  @SuppressWarnings(""unchecked"") final ZyProximityNode<NodeType> infoNode=new ZyProximityNode<NodeType>(node,r,(ZyGraphNode<NodeType>)attachedNode,isIncoming);
  final ZyNodeData<ZyProximityNode<NodeType>> data=new ZyNodeData<ZyProximityNode<NodeType>>(infoNode);
  r.setUserData(data);
  return infoNode;
}
","public static <NodeType extends IViewNode<?>>ZyProximityNode<?> connect(final Graph2D image,final ZyGraphNode<?> attachedNode,final int degree,final boolean isIncoming){
  Preconditions.checkNotNull(image,""Graph argument can not be null"");
  Preconditions.checkNotNull(attachedNode,""Target node argument can not be null"");
  final ZyLabelContent labelcontent=new ZyLabelContent(null);
  labelcontent.addLineContent(new ZyLineContent(String.valueOf(degree),new Font(""New Courier"",Font.PLAIN,12),null));
  final ZyProximityNodeRealizer<NodeType> r=new ZyProximityNodeRealizer<NodeType>(labelcontent);
  final Node node=image.createNode(r);
  @SuppressWarnings(""unchecked"") final ZyProximityNode<NodeType> infoNode=new ZyProximityNode<NodeType>(node,r,(ZyGraphNode<NodeType>)attachedNode,isIncoming);
  final ZyNodeData<ZyProximityNode<NodeType>> data=new ZyNodeData<ZyProximityNode<NodeType>>(infoNode);
  r.setUserData(data);
  return infoNode;
}
",187,10,"createProximityNode:connect,graph:image,",228,1.1798095941543578,Beam
1950,"@Override @SuppressWarnings(""unchecked"") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}
","@Override @SuppressWarnings(""unchecked"") public void comended(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}
",126,5,"completed:comended,",40,0.2651711583137512,Beam
1951,"private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){
  final double latitude=point.getLatitude();
  final double longitude=point.getLongitude();
  final double sinLatitude=Math.sin(latitude);
  final double cosLatitude=Math.cos(latitude);
  final double sinLongitude=Math.sin(longitude);
  final double cosLongitude=Math.cos(longitude);
  double arcDistance=0.0;
  Double prevAngle=null;
  for (  final GeoPoint polyPoint : polyPoints) {
    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (angle == null) {
      return null;
    }
    if (prevAngle != null) {
      double angleDelta=angle - prevAngle;
      if (angleDelta < -Math.PI) {
        angleDelta+=Math.PI * 2.0;
      }
      if (angleDelta > Math.PI) {
        angleDelta-=Math.PI * 2.0;
      }
      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      arcDistance+=angleDelta;
    }
    prevAngle=angle;
  }
  if (prevAngle != null) {
    final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (lastAngle == null) {
      return null;
    }
    double angleDelta=lastAngle - prevAngle;
    if (angleDelta < -Math.PI) {
      angleDelta+=Math.PI * 2.0;
    }
    if (angleDelta > Math.PI) {
      angleDelta-=Math.PI * 2.0;
    }
    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    arcDistance+=angleDelta;
  }
  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return arcDistance > 0.0;
}
","private static Boolean rotate(final GeoPoint point,final List<GeoPoint> olyParts){
  final double latitude=point.getLatitude();
  final double longitude=point.getLongitude();
  final double sinLatitude=Math.sin(latitude);
  final double cosLatitude=Math.cos(latitude);
  final double sinLongitude=Math.sin(longitude);
  final double cosLongitude=Math.cos(longitude);
  double arcDistance=0.0;
  Double prevAngle=null;
  for (  final GeoPoint polyPoint : olyParts) {
    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (angle == null) {
      return null;
    }
    if (prevAngle != null) {
      double angleDelta=angle - prevAngle;
      if (angleDelta < -Math.PI) {
        angleDelta+=Math.PI * 2.0;
      }
      if (angleDelta > Math.PI) {
        angleDelta-=Math.PI * 2.0;
      }
      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      arcDistance+=angleDelta;
    }
    prevAngle=angle;
  }
  if (prevAngle != null) {
    final Double lastAngle=computeAngle(olyParts.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (lastAngle == null) {
      return null;
    }
    double angleDelta=lastAngle - prevAngle;
    if (angleDelta < -Math.PI) {
      angleDelta+=Math.PI * 2.0;
    }
    if (angleDelta > Math.PI) {
      angleDelta-=Math.PI * 2.0;
    }
    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    arcDistance+=angleDelta;
  }
  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return arcDistance > 0.0;
}
",346,15,"isInsidePolygon:rotate,polyPoints:olyParts,",178,1.1299810687700906,Beam
1952,,,100,7,,474,2.149712856610616,0
1953,"protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}
","protected int fill(Canvas canvas,DefaultRenderer renderer,String[] nitles,int len,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=len;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(nitles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=nitles[i];
        if (nitles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=len;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + ""..."";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}
",436,27,"drawLegend:fill,left:len,titles:nitles,",2842,17.77599275112152,Beam
1955,"public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}
","public boolean processSecureTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}
",66,9,"threadSafeTimeout:processSecureTimeout,",89,0.5119755546251933,Beam
1956,"public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(parent,message,description,e);
  }
  return null;
}
","public static ReilGraph copyReilscode(final Window part,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message=""E000XXX: "" + ""Could not show REIL code for node"";
    final String description=CUtilityFunctions.createDescription(String.format(""BinNavi could not show the REIL code for basic block at \'%X\'."",node.getAddress()),new String[]{""The instructions could not be converted to REIL code.""},new String[]{""You can not fix this problem yourself. Please contact "" + ""the BinNavi support.""});
    NaviErrorDialog.show(part,message,description,e);
  }
  return null;
}
",125,7,"copyReilCode:copyReilscode,parent:part,",344,1.8582388043403626,Beam
1957,,,12,1,,25,0.11769283612569173,0
1958,"public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}
","public void setResults(AMIdentity name,Map attrs){
  searchResults.add(name);
  resultsMap.put(name,attrs);
}
",28,5,"addResult:setResults,id:name,",260,1.0900474309921264,Beam
1959,,,35,5,,448,1.7012025515238445,0
1960,"public void insertTwin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + inst + "" not found"");
}
","public void inserttwoin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException(""GCIRMap.createTwin: "" + inst + "" not found"");
}
",80,6,"insertTwin:inserttwoin,",5,0.026517307758331297,Beam
1961,"CryptoResult(final T result,final List<K> masterKeys,final CiphertextHeaders headers){
  result_=result;
  masterKeys_=Collections.unmodifiableList(masterKeys);
  headers_=headers;
  encryptionContext_=headers_.getEncryptionContextMap();
}
","CryptodeResults(final T cache,final List<K> masterKeys,final CiphertextHeaders headers){
  result_=cache;
  masterKeys_=Collections.unmodifiableList(masterKeys);
  headers_=headers;
  encryptionContext_=headers_.getEncryptionContextMap();
}
",44,8,"result:cache,CryptoResult:CryptodeResults,",372,2.0706735571225483,Beam
1962,,,77,5,,631,3.5221860369046527,0
1963,"public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}
","public void addPutAndGetTimeNanos(long beta){
  putTimeNanos.addAndGet(beta);
  getTimeNanos.addAndGet(beta);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(beta);
}
",36,5,"duration:beta,",10,0.06125022570292155,Beam
1964,"public final boolean isOpen(){
  return closed.get() == false;
}
","public final boolean getClose(){
  return closed.get() == false;
}
",17,2,"isOpen:getClose,",9,0.03020866314570109,Beam
1965,,,20,3,,199,0.8140840729077657,0
1966,,,113,8,,472,2.2362717151641847,0
1967,"Sentence parseSentence(final String text,final ConversationContext ctx){
  if (isEmpty()) {
    return ConversationParser.parse(text,ctx);
  }
  String txt=text.trim();
  final Sentence sentence=new SentenceImplementation(ctx,txt);
  txt=ConversationParser.detectSentenceType(txt,sentence);
  if (typeMatching) {
    readTypeMatchExpressions(txt,ctx,sentence);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,ctx,sentence);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,ctx,sentence);
  }
  return sentence;
}
","Sentence parseSequencer(final String text,final ConversationContext ctx){
  if (isEmpty()) {
    return ConversationParser.parse(text,ctx);
  }
  String txt=text.trim();
  final Sentence sentence=new SentenceImplementation(ctx,txt);
  txt=ConversationParser.detectSentenceType(txt,sentence);
  if (typeMatching) {
    readTypeMatchExpressions(txt,ctx,sentence);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,ctx,sentence);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,ctx,sentence);
  }
  return sentence;
}
",145,10,"parseSentence:parseSequencer,",8,0.040096863110860186,Beam
1968,,,116,5,,263,1.7592966397603353,0
1969,"public void findAndUndo(Object someObj){
  if (someObj instanceof com.bbn.openmap.MapBean) {
    logger.fine(""ProjectionStack removing a MapBean."");
    MapBean map=getMapBean();
    if (map != null && map == (MapBean)someObj) {
      setMapBean(null);
    }
  }
}
","public void findAndUndo(Object Someobj){
  if (Someobj instanceof com.bbn.openmap.MapBean) {
    logger.fine(""ProjectionStack removing a MapBean."");
    MapBean map=getMapBean();
    if (map != null && map == (MapBean)Someobj) {
      setMapBean(null);
    }
  }
}
",57,4,"someObj:Someobj,",25,0.1258598248163859,Beam
1970,,,55,3,,116,0.6873831351598104,0
1971,"public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
","public void add(int position,@NonNull T instance){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,instance);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}
",57,6,"item:instance,",57,0.2581519643465678,Beam
1972,"public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}
","public void addChanGroup(ChannelMap characterMap){
  if (!mChannelMaps.contains(characterMap)) {
    mChannelMaps.add(characterMap);
    int index=mChannelMaps.indexOf(characterMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(characterMap,Event.ADD));
  }
}
",60,4,"addChannelMap:addChanGroup,channelMap:characterMap,",50,0.24804424842198688,Beam
1973,,,54,5,,354,1.7279409448305765,0
1974,"public long start(){
  startTime=System.currentTimeMillis();
  return startTime;
}
","public long end(){
  startTime=System.currentTimeMillis();
  return startTime;
}
",18,2,"start:end,",6,0.027370536327362062,Beam
1976,,,30,3,,756,4.005955958366394,0
1977,,,72,4,,291,1.3728465994199117,0
1978,,,43,4,,273,1.1241227030754088,0
1979,,,50,4,,127,0.7189737478892009,0
1980,"public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.createServerSocket(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}
","public static ServerSocket openServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.openServerSocket(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.openServerSocket(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}
",143,7,"createServerSocket:openServerSocket,",42,0.23934083779652912,Beam
1981,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}
","public void pillBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}
",165,11,"paintBorder:pillBorder,",5,0.023817702134450277,Beam
1982,"public static <T>ParallelFlux<T> from(Publisher<? extends T> source,int parallelism){
  return from(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}
","public static <T>ParallelFlux<T> as(Publisher<? extends T> source,int parallelism){
  return as(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}
",42,3,"from:as,",35,0.23770409027735392,Beam
1983,,,69,4,,263,1.575307806332906,0
1984,"private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}
","private void adapt(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}
",50,5,"grow:adapt,",6,0.03832731246948242,Beam
1985,"@Override public boolean isTraceEnabled(){
  return logger.isLoggable(Level.FINEST);
}
","@Override public boolean isTRacingSupported(){
  return logger.isLoggable(Level.FINEST);
}
",19,2,"isTraceEnabled:isTRacingSupported,",21,0.08659504254659017,Beam
1986,"@Override public final E nextElement(){
  E result=m_Vector.get(m_Counter);
  m_Counter++;
  if (m_Counter == m_SpecialElement) {
    m_Counter++;
  }
  return result;
}
","@Override public final E newelement(){
  E result=m_Vector.get(m_Counter);
  m_Counter++;
  if (m_Counter == m_SpecialNumber) {
    m_Counter++;
  }
  return result;
}
",37,5,"nextElement:newelement,m_SpecialElement:m_SpecialNumber,",20,0.09075789054234823,Beam
1987,,,43,6,,485,2.101616621017456,0
1989,,,12,2,,66,0.32827378114064537,0
1990,,,140,8,,1306,6.354946561654409,0
1991,,,63,3,,596,3.561306603749593,0
1992,"private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}
","private static int findIndexOf(Object o,@NotNull Object[] oils,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (oils[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(oils[i])) {
        return i;
      }
    }
  }
  return -1;
}
",98,5,"lastIndexOf:findIndexOf,elements:oils,",114,0.6892096718152364,Beam
1993,"public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
","public void openStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}
",20,3,"closeStream:openStream,",4,0.016385769844055174,Beam
1994,,,66,6,,168,1.0044170022010803,0
1995,"public void await(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}
","public void Work(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}
",144,8,"await:Work,",5,0.04050867160161336,Beam
1996,,,39,4,,652,3.508822218577067,0
1997,"public static float mean(float[] data,int[] inds){
  float mean=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[inds[i]];
  }
  mean/=inds.length;
  return mean;
}
","public static float m(float[] data,int[] inds){
  float m=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    m+=data[inds[i]];
  }
  m/=inds.length;
  return m;
}
",81,4,"mean:m,",76,0.5132116675376892,Beam
1998,"public static boolean isExplicitAllType(String[] types){
  return types != null && types.length == 1 && ALL.equals(types[0]);
}
","public static boolean isExplicitAllType(String[] lists){
  return lists != null && lists.length == 1 && ALL.equals(lists[0]);
}
",33,2,"types:lists,",14,0.12907660802205403,Beam
1999,"public static boolean isUnlimitedStrengthPolicyAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}
","public static boolean isUnlimitedStrengthRuleAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength(""AES"") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}
",38,2,"isUnlimitedStrengthPolicyAvailable:isUnlimitedStrengthRuleAvailable,",3,0.018154207865397134,Beam
2000,,,20,2,,237,1.5072505990664165,0
2001,"public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}
","public void export(ByteBuffer bag){
  bag.putInt(seqId);
  if (info.isRowBlockEnabled())   bag.putInt(nRows);
  export(primaryKey,bag);
  for (  ByteArray cb : cellBlocks) {
    export(cb,bag);
  }
}
",54,8,"buf:bag,",5,0.03379999399185181,Beam
2002,,,61,5,,269,1.5893397728602092,0
2003,"public int length(){
  return text.length();
}
","public int position(){
  return text.position();
}
",14,2,"length:position,",18,0.07759278615315755,Beam
2005,"private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}
","private void loadConfigurationFromJmxSettings(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split("":"");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info(""Repository information found in the JVM parameters: IP="" + repositoryIp + "" Port=""+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn(""Repository could not be defined from the data in the JVM parameters"",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info(""Agent name found in the JVM parameters: AgentName="" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn(""Agent name could not be defined from the data in the JVM parameters"",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn(""Agent name could not be defined from default agent name"",e);
    }
  }
}
",211,9,"loadConfigurationFromJvmParameters:loadConfigurationFromJmxSettings,",10,0.08219059308369954,Beam
2006,"public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}
","public String quote(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return """";
  String sql=""SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue(""PriceEntered"",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}
",181,12,"charge:quote,",14,0.07073421478271484,Beam
2007,"private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){
  return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements()));
}
","private Map<String,AnnotationMirror> annosInElement(PackageElement sourceDefinition){
  return createImportedAnnotationsMap(ElementFilter.typesIn(sourceDefinition.getEnclosedElements()));
}
",29,2,"packageElement:sourceDefinition,annosInPackage:annosInElement,",124,1.0562600175539651,Beam
2008,,,24,3,,381,1.7638381044069926,0
2009,,,98,8,,1107,13.175467832883198,0
2010,"public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}
","public PKCS9Attributes(PKCS9Attribute config){
  this.attributeId=config.getOID();
  this.attributeValue=config.getValue();
}
",28,2,"PKCS10Attribute:PKCS9Attributes,attr:config,",76,0.40438766876856486,Beam
2011,,,115,6,,500,2.7567745566368105,0
2012,"public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){
  StringBuilder s=new StringBuilder();
  s.append(mService + ""?data="");
  String sBB=""("" + bb.getLatSouth() + "",""+ bb.getLonWest()+ "",""+ bb.getLatNorth()+ "",""+ bb.getLonEast()+ "")"";
  String data=""[out:json][timeout:"" + timeout + ""];(""+ ""node[""+ tag+ ""]""+ sBB+ "";""+ ""way[""+ tag+ ""]""+ sBB+ "";""+ ""relation[""+ tag+ ""]""+ sBB+ "";""+ "");out qt center ""+ limit+ "" tags;"";
  Log.d(BonusPackHelper.LOG_TAG,""data="" + data);
  s.append(URLEncoder.encode(data));
  return s.toString();
}
","public String urlForPOISeries(String tag,BoundingBox bb,int limit,int timeout){
  StringBuilder s=new StringBuilder();
  s.append(mService + ""?data="");
  String sBB=""("" + bb.getLatSouth() + "",""+ bb.getLonWest()+ "",""+ bb.getLatNorth()+ "",""+ bb.getLonEast()+ "")"";
  String data=""[out:json][timeout:"" + timeout + ""];(""+ ""node[""+ tag+ ""]""+ sBB+ "";""+ ""way[""+ tag+ ""]""+ sBB+ "";""+ ""relation[""+ tag+ ""]""+ sBB+ "";""+ "");out qt center ""+ limit+ "" tags;"";
  Log.d(BonusPackHelper.LOG_TAG,""data="" + data);
  s.append(URLEncoder.encode(data));
  return s.toString();
}
",149,9,"urlForPOISearch:urlForPOISeries,",9,0.04727960427602132,Beam
2013,,,57,4,,279,1.4245994170506795,0
2014,"private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}
","private void handleStateLeft(InetAddress endpoint,String[] steps){
  assert steps.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug(""Node {} state left, tokens {}"",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(steps));
}
",63,5,"pieces:steps,",27,0.12718682289123534,Beam
2015,"public static void deleteFileOrLog(File file){
  if (!file.delete()) {
    logger.warn(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void deleteFileorError(File module){
  if (!module.delete()) {
    logger.warn(FAILED_DELETING_FILE + module.getPath());
  }
}
",34,4,"file:module,deleteFileOrLog:deleteFileorError,",71,0.34855131308237713,Beam
2016,"public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}
","public static int poiss(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}
",55,5,"poisson:poiss,",34,0.17738635540008546,Beam
2017,"public void connect(){
  connect(this.logWriter);
}
","public void sync(){
  sync(this.logWriter);
}
",14,1,"connect:sync,",4,0.021168792247772218,Beam
2018,"public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return invokeStatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
","public static Object superstatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return superstatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException(""class "" + clazz + "" not found"");
  }
}
",63,5,"invokeStatic:superstatic,",96,0.5848678072293599,Beam
2019,"private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}
","private void italizable(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.italizable(this,client);
}
",41,5,"initialize:italizable,",65,0.28233095407485964,Beam
2020,"@Override public int parse(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}
","@Override public int patch(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}
",347,10,"parse:patch,",52,0.614755141735077,Beam
2021,"public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}
","public Request header(String field,String value){
  Objects.requireNonNull(field);
  Objects.requireNonNull(value);
  _headers.put(field,value);
  return this;
}
",38,4,"key:field,",62,0.24952934185663858,Beam
2022,,,58,4,,1148,6.175880753993988,0
2023,,,64,8,,598,3.198466499646505,0
2024,"private void connect(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}
","private void create(){
  if (!connected) {
    updateInfo();
    String connectString=""tcp://"" + connectAddress + "":""+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("""")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.create(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}
",322,19,"connect:create,",10,0.07275430758794149,Beam
2025,,,71,6,,696,4.150141926606496,0
2026,"public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){
  this.aLine=aLine;
  this.attemptFirstWord=attemptFirstWord;
  this.tags=tags;
  tagPos=0;
  nextResult=getNextResult();
  if (attemptFirstWord) {
    int a=0;
    while (a < aLine.length()) {
      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;
 else       break;
    }
    int b=a + 1;
    while (b < aLine.length()) {
      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;
 else       break;
    }
    if (b - a > 4) {
      nextResult=aLine.substring(a,b);
    }
    tagPos=b;
  }
}
","public TaggedValueRunner(final String aLine,final boolean attemptFirstWord,final String... tags){
  this.aLine=aLine;
  this.attemptFirstWord=attemptFirstWord;
  this.tags=tags;
  tagPos=0;
  nextResult=getNextResult();
  if (attemptFirstWord) {
    int a=0;
    while (a < aLine.length()) {
      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;
 else       break;
    }
    int b=a + 1;
    while (b < aLine.length()) {
      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;
 else       break;
    }
    if (b - a > 4) {
      nextResult=aLine.substring(a,b);
    }
    tagPos=b;
  }
}
",180,8,"TaggedValueIterator:TaggedValueRunner,",37,0.16200931866963705,Beam
2027,,,33,5,,1021,5.151946147282918,0
2028,,,163,18,,1170,9.16289434035619,0
2029,,,16,2,,66,0.2865031957626343,0
2030,,,60,8,,473,2.108684798081716,0
2031,,,13,2,,92,0.47068047523498535,0
2032,,,74,7,,1125,6.164396107196808,0
2034,,,35,4,,624,3.4021239399909975,0
2035,"public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}
","public void sonDOWN(){
  final long begin=System.currentTimeMillis();
  log.info(""ThreadPoolManager: Shutting down."");
  log.info(""\\t... executing "" + getTaskCount(scheduledPool) + "" scheduled tasks."");
  log.info(""\\t... executing "" + getTaskCount(instantPool) + "" instant tasks."");
  log.info(""\\t... executing "" + getTaskCount(longRunningPool) + "" long running tasks."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  scheduledPool.sonDOWN();
  instantPool.sonDOWN();
  longRunningPool.sonDOWN();
  workStealingPool.sonDOWN();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info(""\\t... success: "" + success + "" in ""+ (System.currentTimeMillis() - begin)+ "" msec."");
  log.info(""\\t... "" + getTaskCount(scheduledPool) + "" scheduled tasks left."");
  log.info(""\\t... "" + getTaskCount(instantPool) + "" instant tasks left."");
  log.info(""\\t... "" + getTaskCount(longRunningPool) + "" long running tasks left."");
  log.info(""\\t... "" + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + "" forking tasks left."");
  workStealingPool.shutdownNow();
}
",256,9,"shutdown:sonDOWN,",14,0.08843098878860474,Beam
2036,"private Component createSeparator(){
  JSeparator sep=new JSeparator(SwingConstants.VERTICAL);
  sep.setPreferredSize(new Dimension(2,30));
  sep.setMinimumSize(new Dimension(2,30));
  return sep;
}
","private Component createSepparated(){
  JSeparator selp=new JSeparator(SwingConstants.VERTICAL);
  selp.setPreferredSize(new Dimension(2,30));
  selp.setMinimumSize(new Dimension(2,30));
  return selp;
}
",47,2,"createSeparator:createSepparated,sep:selp,",22,0.09816009600957235,Beam
2037,,,35,5,,588,3.4844684481620787,0
2038,,,70,5,,629,6.058610037962596,0
2040,"public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){
  return clickListeners.remove(itemClickListener);
}
","public boolean removeOnItemclickListener(OnItemClickListener cellFocusServer){
  return clickListeners.remove(cellFocusServer);
}
",17,3,"itemClickListener:cellFocusServer,removeOnItemClickListener:removeOnItemclickListener,",114,0.560000483194987,Beam
2041,,,40,3,,608,3.618165691693624,0
2042,,,121,6,,999,7.860160899162293,0
2043,"@Override public boolean batchFinished(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}
","@Override public boolean batchSkilled(){
  if (getInputFormat() == null) {
    throw new IllegalStateException(""No input instance format defined"");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}
",140,8,"batchFinished:batchSkilled,",8,0.04727927049001058,Beam
2044,,,28,2,,266,1.267664579550425,0
2045,"public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}
","public Timestamp RecalculateEstimatedCommentDay(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong(""priority"")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set(""estimatedStartDate"",startDate);
        routingTask.set(""estimatedCompletionDate"",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}
",152,10,"recalculateEstimatedCompletionDate:RecalculateEstimatedCommentDay,",4,0.03035215139389038,Beam
2047,"public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
","public static Uri createMail(ContentResolver solving,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse(""content://sms/outbox"");
  return addMessageToUri(solving,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}
",61,9,"resolver:solving,addMessage:createMail,",709,3.0660923798878987,Beam
2048,,,52,4,,151,0.6842126647631327,0
2049,"@SuppressWarnings(""unchecked"") public void readFile(String fileName) throws JDOMException, IOException {
  if (checkFile(fileName)) {
    Element root=rootFromName(fileName);
    Element roster;
    if (root == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    roster=root.getChild(""roster"");
    if (roster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter(""consist""));
    try {
      Element consist;
      do {
        consist=consistIterator.next();
        consistFromXml(consist);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
","@SuppressWarnings(""unchecked"") public void parsePage(String pageName) throws JDOMException, IOException {
  if (checkFile(pageName)) {
    Element root=rootFromName(pageName);
    Element roster;
    if (root == null) {
      log.warn(""consist file could not be read"");
      return;
    }
    roster=root.getChild(""roster"");
    if (roster == null) {
      log.debug(""consist file does not contain a roster entry"");
      return;
    }
    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter(""consist""));
    try {
      Element consist;
      do {
        consist=consistIterator.next();
        consistFromXml(consist);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug(""end of consist list"");
    }
  }
 else {
    log.info(""Consist file does not exist.  One will be created if necessary."");
  }
}
",153,7,"fileName:pageName,readFile:parsePage,",89,0.43292922576268517,Beam
2050,"public void put(Song song){
  if (!mSongs.contains(song)) {
    mSongs.add(song);
  }
}
","public void put(Song one){
  if (!mSongs.contains(one)) {
    mSongs.add(one);
  }
}
",28,3,"song:one,",28,0.09770479599634806,Beam
2051,"public void write(PrintStream out){
  write(out,table);
}
","public void print(PrintStream out){
  print(out,table);
}
",16,3,"write:print,",4,0.022958890597025553,Beam
2052,,,87,7,,807,4.556373914082845,0
2053,"@Override public LogMessage readNextLogMessage(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
","@Override public LogMessage parse(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}
",371,12,"readNextLogMessage:parse,",29,0.15615926583607992,Beam
2054,"@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}
","@Override public double calcuteN(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}
",82,4,"calculateM:calcuteN,",38,0.25309257904688515,Beam
2055,"public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}
","public static void stop(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.stop();
  }
 catch (  IOException e) {
  }
}
",38,2,"close:stop,",32,0.12372591098149617,Beam
2056,"public boolean sendViaDataSocket(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}
","public boolean sendViaExternalStream(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,""Can\'t send via null dataOutputStream"");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,""Couldn\'t write output stream for data socket"");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}
",104,7,"sendViaDataSocket:sendViaExternalStream,",21,0.08150469859441122,Beam
2057,,,254,11,,1634,8.642273342609405,0
2058,"@Override public abstract List<JToolBar> createToolBars(Application a,@Nullable View p);
","@Override public abstract List<JToolBar> createToolLars(Application a,@Nullable View p);
",19,3,"createToolBars:createToolLars,",6,0.032252792517344156,Beam
2060,,,248,11,,453,4.188270366191864,0
2061,"public void clientDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisconnect();
  }
  killKeepalive(""client disconnect"");
}
","public void serverDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.serverDisconnect();
  }
  killKeepalive(""client disconnect"");
}
",79,6,"clientDisconnect:serverDisconnect,",4,0.02429958979288737,Beam
2062,,,60,3,,340,1.4226491133371988,0
2063,"protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}
","protected static double calcQ_i(double f,double function){
  return function * Math.exp(-function * f);
}
",26,3,"lambda:function,",23,0.12737913131713868,Beam
2065,,,183,6,,388,2.2597684780756633,0
2066,"protected static boolean networkMonitorExist(String nwMonName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}
","protected static boolean networkmonitorExist(String nwMonName){
  String classMethod=""OpenSSOMonitoringUtil.networkMonitorExist: "";
  if (debug.messageEnabled()) {
    debug.message(classMethod + ""checking "" + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + ""isNull"");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}
",119,6,"networkMonitorExist:networkmonitorExist,",3,0.02213133970896403,Beam
2067,"public void createBounds(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}
","public void createWBorders(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}
",172,9,"createBounds:createWBorders,",9,0.06017051537831624,Beam
2068,"public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){
  final Request request=requestEvent.getRequest();
  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();
  ServerTransaction st=serverTransaction;
  try {
    if (st == null) {
      try {
        st=sipProvider.getNewServerTransaction(request);
      }
 catch (      TransactionUnavailableException tae) {
        tae.printStackTrace();
        return;
      }
catch (      TransactionAlreadyExistsException taex) {
        return;
      }
    }
    final String toTag="""" + System.nanoTime();
    Response response=messageFactory.createResponse(Response.RINGING,request);
    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
    response=messageFactory.createResponse(Response.OK,request);
    final Address address=addressFactory.createAddress(""Shootme <sip:"" + myAddress + "":""+ myPort+ "">"");
    final ContactHeader contactHeader=headerFactory.createContactHeader(address);
    response.addHeader(contactHeader);
    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
","public void handleInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){
  final Request request=requestEvent.getRequest();
  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();
  ServerTransaction st=serverTransaction;
  try {
    if (st == null) {
      try {
        st=sipProvider.getNewServerTransaction(request);
      }
 catch (      TransactionUnavailableException tae) {
        tae.printStackTrace();
        return;
      }
catch (      TransactionAlreadyExistsException taex) {
        return;
      }
    }
    final String toTag="""" + System.nanoTime();
    Response response=messageFactory.createResponse(Response.RINGING,request);
    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
    response=messageFactory.createResponse(Response.OK,request);
    final Address address=addressFactory.createAddress(""Shootme <sip:"" + myAddress + "":""+ myPort+ "">"");
    final ContactHeader contactHeader=headerFactory.createContactHeader(address);
    response.addHeader(contactHeader);
    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}
",233,18,"processInvite:handleInvite,",3,0.03010957638422648,Beam
2069,"public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
","public static boolean isConnectionAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}
",45,4,"isNetworkAvailable:isConnectionAvailable,",4,0.017048724492390952,Beam
2070,"public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}
","public static List<List<Double>> partunkArray(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}
",119,7,"partitionVariable:partunkArray,",48,0.2486508846282959,Beam
2071,"public Rect updateFastScrollerBounds(BaseRecyclerView rv,int lastTouchY){
  mInvalidateRect.set(mBgBounds);
  if (isVisible()) {
    int edgePadding=rv.getMaxScrollbarWidth();
    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;
    int bgHeight=mBgOriginalSize;
    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));
    if (Utilities.isRtl(mRes)) {
      mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());
      mBgBounds.right=mBgBounds.left + bgWidth;
    }
 else {
      mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());
      mBgBounds.left=mBgBounds.right - bgWidth;
    }
    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);
    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight));
    mBgBounds.bottom=mBgBounds.top + bgHeight;
  }
 else {
    mBgBounds.setEmpty();
  }
  mInvalidateRect.union(mBgBounds);
  return mInvalidateRect;
}
","public Rect draw(BaseRecyclerView rv,int lastTouchY){
  mInvalidateRect.set(mBgBounds);
  if (isVisible()) {
    int edgePadding=rv.getMaxScrollbarWidth();
    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;
    int bgHeight=mBgOriginalSize;
    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));
    if (Utilities.isRtl(mRes)) {
      mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());
      mBgBounds.right=mBgBounds.left + bgWidth;
    }
 else {
      mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());
      mBgBounds.left=mBgBounds.right - bgWidth;
    }
    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);
    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight));
    mBgBounds.bottom=mBgBounds.top + bgHeight;
  }
 else {
    mBgBounds.setEmpty();
  }
  mInvalidateRect.union(mBgBounds);
  return mInvalidateRect;
}
",236,13,"updateFastScrollerBounds:draw,",23,0.15654932260513305,Beam
2073,"public static Object unserialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return unserialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}
","public static Object uninitialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get(""class""));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get(""value""));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get(""x""),data.get(""y""),data.get(""z""));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get(""x""),(double)data.get(""y""));
    }
 else {
      return uninitialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}
",154,4,"unserialize:uninitialize,",14,0.07756380637486776,Beam
2074,"public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}
","public static void showCodeFile(String msg){
  showCodeFile(msg,3500);
}
",17,2,"showErrorMessage:showCodeFile,",49,0.1859184980392456,Beam
2075,"private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}
","private String generateZonesetClonesPart(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat(""MMddyy-HHmmss"");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString(""MDSDialog.zonesetCloneLongName.cmd"");
  if (!longName.contains(""!MDSDialog.zonesetCloneLongName.cmd!"")) {
    return longName;
  }
  return ""ViPR-"" + zonesetToClone + ""-""+ dateString;
}
",103,8,"generateZonesetCloneName:generateZonesetClonesPart,",53,0.3194079677263896,Beam
2077,"protected boolean removeTurntable(LayoutTurntable o){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == o) {
    selectedObject=null;
  }
  if (prevSelectedObject == o) {
    prevSelectedObject=null;
  }
  for (int j=0; j < o.getNumberRays(); j++) {
    TrackSegment t=o.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(o.getRayCoordsIndexed(j),o,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == o) {
      turntableList.remove(i);
      o.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}
","protected boolean check(LayoutTurntable other){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString(""Question4r""),Bundle.getMessage(""WarningTitle""),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage(""ButtonYes""),Bundle.getMessage(""ButtonNo""),rb.getString(""ButtonYesPlus"")},Bundle.getMessage(""ButtonNo""));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == other) {
    selectedObject=null;
  }
  if (prevSelectedObject == other) {
    prevSelectedObject=null;
  }
  for (int j=0; j < other.getNumberRays(); j++) {
    TrackSegment t=other.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(other.getRayCoordsIndexed(j),other,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == other) {
      turntableList.remove(i);
      other.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}
",255,12,"removeTurntable:check,o:other,",64,0.4086109042167664,Beam
2078,"private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}
","private boolean loadUnpackedUMD(String username) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(username);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,""r"");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load(""disc0:/PSP_GAME/SYSDIR/EBOOT.BIN"",readbuffer);
    raf.close();
    log.info(""Using unpacked UMD EBOOT.BIN image"");
    return true;
  }
  return false;
}
",114,9,"filename:username,",4,0.03772917588551839,Beam
2079,"private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {
    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));
  }
  return blist;
}
","private List<Pair<String,Object>> toPpairMap(final Map<String,Object> cookrings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> pair : cookrings.entrySet()) {
    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));
  }
  return blist;
}
",98,4,"toPairList:toPpairMap,bindings:cookrings,",71,0.38365937074025475,Beam
2080,"private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
","private String Liveness(){
  boolean asClosed=false;
  try {
    if (asClosed()) {
      asClosed=true;
    }
  }
 catch (  SQLException s) {
    asClosed=true;
  }
  if (asClosed) {
    return ""CLOSED"";
  }
  return ""OPEN"";
}
",50,2,"liveness:Liveness,isClosed:asClosed,",24,0.12081361611684163,Beam
2081,,,43,6,,774,4.76233545144399,0
2082,,,69,5,,630,4.34075091679891,0
2084,,,75,4,,237,0.9387273192405701,0
2085,"private boolean validateCustomCatalog(String title,String value){
  return false;
}
","private boolean validateSpecialConfig(String title,String value){
  return false;
}
",15,3,"validateCustomCatalog:validateSpecialConfig,",7,0.022007723649342854,Beam
2086,"public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}
","public static void Computes(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}
",196,12,"compute:Computes,",8,0.06171648502349854,Beam
2087,"void removeRipple(Ripple ripple){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ripple);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}
","void removeRipple(Ripple meddler){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(meddler);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}
",78,7,"ripple:meddler,",18,0.08779618740081788,Beam
2088,,,93,6,,673,3.9069437623023986,0
2089,,,97,7,,459,2.3720046401023867,0
2090,"protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}
","protected void draw(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}
",357,19,"onPageScrolled:draw,",79,1.9482782085736592,Beam
2091,,,14,3,,189,0.6773465077082316,0
2092,"void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}
","void send(List<JetstreamMessage> msps,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msps.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msps.size());
  for (int i=0, t=msps.size(); i < t; i++) {
    JetstreamMessage tm=msps.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug(""Topic is not present in incoming message"");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""Dispatch Queue Full"");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,""High Priority Dispatch Queue Full - "" + "" Requested capacity = "" + batchsize + "" : available capacity = ""+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}
",393,18,"msgs:msps,postMessage:send,",219,1.36434379418691,Beam
2093,,,125,11,,861,4.667931695779164,0
2095,"void copyNodeStructure(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}
","void store(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}
",313,8,"copyNodeStructure:store,",29,0.22722052733103434,Beam
2096,,,32,2,,181,0.7376649498939514,0
2097,"public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}
","public boolean logOutUsers(String username,HttpServletRequest req){
  return logOutUsers(username,req,true,true);
}
",24,3,"logoutUser:logOutUsers,",15,0.08212597767512003,Beam
2098,"protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}
","protected void transcod(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcod(input,output);
  out.flush();
  out.close();
}
",88,7,"transcode:transcod,",37,0.19956264893213907,Beam
2099,"protected int createHashCode(){
  int result=uri.hashCode() ^ prefix.hashCode();
  if (result == 0) {
    result=0xbabe;
  }
  return result;
}
","protected int createhashCreate(){
  int result=uri.hashCode() ^ prefix.hashCode();
  if (result == 0) {
    result=0xbabe;
  }
  return result;
}
",37,4,"createHashCode:createhashCreate,",8,0.031906131903330484,Beam
2100,"private static String stampToString(long tstamp,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}
","private static String stampFormatString(long tstamp,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}
",112,14,"stampToString:stampFormatString,",37,0.7334083835283915,Beam
2101,"public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}
","public QuadEdge makeGraph(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeGraph(o,d);
  quadEdges.add(q);
  return q;
}
",34,5,"makeEdge:makeGraph,",35,0.2534289598464966,Beam
2102,,,130,9,,715,5.478844666481018,0
2103,"public void clearUnused(ConfigImpl config){
  SystemOut.printDate(config.getOutWriter(),""PagePool: "" + size() + "">(""+ maxSize+ "")"");
  if (size() > maxSize) {
    Object[] keys=keys();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < keys.length; i++) {
      PageSource ps=getPageSource(keys[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,keys[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}
","public void clearUnnecessary(ConfigImpl config){
  SystemOut.printDate(config.getOutWriter(),""PagePool: "" + size() + "">(""+ maxSize+ "")"");
  if (size() > maxSize) {
    Object[] keys=keys();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < keys.length; i++) {
      PageSource ps=getPageSource(keys[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,keys[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}
",186,11,"clearUnused:clearUnnecessary,",5,0.03536727031071981,Beam
2104,"public static boolean isChar(String desc){
  return desc.endsWith(""C"");
}
","public static boolean isChar(String rc){
  return rc.endsWith(""C"");
}
",18,2,"desc:rc,",19,0.15560912291208903,Beam
2105,,,47,6,,250,1.8043790141741434,0
2106,"public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
","public ActionRequestHelper dependendsON(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}
",19,3,"dependsOn:dependendsON,",7,0.031213259696960448,Beam
2107,,,40,4,,204,1.2618520458539326,0
2108,"public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}
","public static void sell(byte[] list){
  DualPivotQuicksort.sell(list);
}
",19,2,"sort:sell,array:list,",76,0.49315359989802043,Beam
2109,"public int size(){
  if (hmap == null) {
    return 0;
  }
  return hmap.size();
}
","public int empty(){
  if (hmap == null) {
    return 0;
  }
  return hmap.empty();
}
",25,2,"size:empty,",3,0.02055173714955648,Beam
2110,,,80,4,,638,4.27156597773234,0
2111,"@Override public void onTmpFilesCopied(ResultCode result){
  dismissLoadingDialog();
  finish();
}
","@Override public void onTmpFilesCopored(ResultCode result){
  dismissLoadingDialog();
  finish();
}
",19,2,"onTmpFilesCopied:onTmpFilesCopored,",30,0.15177259842554727,Beam
2112,"private static String removeSubTrailers(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}
","private static String removeSubTrailers(String decryptedObject){
  int subStringStart=0;
  int subStringEnd=decryptedObject.length();
  int originalSize=decryptedObject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decryptedObject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decryptedObject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decryptedObject=decryptedObject.substring(subStringStart,subStringEnd);
  return decryptedObject;
}
",114,8,"decodedSubject:decryptedObject,",51,0.35783084233601886,Beam
2113,"public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}
","public void makeUndirt(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeUndirt(instance);
}
",26,6,"makeDirty:makeUndirt,",11,0.06774808168411255,Beam
2114,,,141,8,,452,2.344719429810842,0
2115,"public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}
","public void readConfers(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString(""button_action_"" + name + ""_0"","""");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString(""button_action_"" + name + ""_""+ (i + 1),"""");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}
",143,12,"readPrefs:readConfers,",76,0.35352105299631753,Beam
2116,,,47,3,,638,2.9019243478775025,0
2118,,,390,16,,1906,14.834037144978842,0
2119,"private static void useMissile(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
","private static void clearmissiles(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}
",65,3,"useMissile:clearmissiles,",22,0.09276461203893026,Beam
2120,,,69,3,,550,2.293057119846344,0
2121,"public OkapiBM25(double k1,double b){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(""coefficient k1 must be a non negative constant, not "" + k1);
  this.k1=k1;
  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException(""coefficient b must be in the range [0,1], not "" + b);
  this.b=b;
}
","public OkurlBD025(double k1,double b){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException(""coefficient k1 must be a non negative constant, not "" + k1);
  this.k1=k1;
  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException(""coefficient b must be in the range [0,1], not "" + b);
  this.b=b;
}
",78,3,"OkapiBM25:OkurlBD025,",6,0.03674389918645223,Beam
2122,,,297,10,,853,4.933193480968475,0
2123,,,21,1,,49,0.3102307995160421,0
2124,"public boolean isFinalState(int state){
  return (state < 0) ? false : fFinalStateFlags[state];
}
","public boolean isCompleteRegion(int id){
  return (id < 0) ? false : fFinalStateFlags[id];
}
",23,3,"state:id,isFinalState:isCompleteRegion,",75,0.3181951642036438,Beam
2125,"private Member nextMember(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}
","private Member getProperty(Member.Type type){
  return new TestMember(type,new Address(""localhost"",++port),new Address(""localhost"",port + 1000));
}
",37,3,"nextMember:getProperty,",9,0.03697072267532349,Beam
2126,"private void loadIgnoreFile(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}
","private void loadIgnerveFiles(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}
",32,3,"loadIgnoreFile:loadIgnerveFiles,",21,0.06771808862686157,Beam
2127,"private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}
","private void shuffleEnters(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}
",100,8,"growEntries:shuffleEnters,",24,0.12929245233535766,Beam
2128,"public boolean matchesRawNamePattern(Object item){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(item);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}
","public boolean matchesRawnamePath(Object source){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(source);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}
",114,8,"matchesRawNamePattern:matchesRawnamePath,item:source,",61,0.31958233515421547,Beam
2129,,,57,4,,277,1.224284287293752,0
2130,"public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}
","public static boolean setString(String space){
  if (null == space)   return true;
  return space.equals(EMPTY);
}
",27,2,"isEmpty:setString,string:space,",93,0.32921292781829836,Beam
2131,,,94,7,,528,3.6450439135233563,0
2132,,,145,4,,493,3.9056529641151427,0
2133,,,60,6,,359,1.4718189001083375,0
2134,"@RequestProcessing(value=""/member/{userName}/points"",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomePoints(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {
  final JSONObject user=(JSONObject)request.getAttribute(User.USER);
  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(""skinDirName""));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName(""/home/points.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(request,response,dataModel);
  String pageNumStr=request.getParameter(""p"");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr=""1"";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt(""userHomePointsCnt"");
  final int windowSize=Symphonys.getInt(""userHomePointsWindowSize"");
  fillHomeUser(dataModel,user);
  avatarQueryService.fillUserAvatarURL(user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  final JSONObject userPointsResult=pointtransferQueryService.getUserPoints(user.optString(Keys.OBJECT_ID),pageNum,pageSize);
  final List<JSONObject> userPoints=CollectionUtils.<JSONObject>jsonArrayToList(userPointsResult.optJSONArray(Keys.RESULTS));
  dataModel.put(Common.USER_HOME_POINTS,userPoints);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,user.optString(Keys.OBJECT_ID));
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int pointsCnt=userPointsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil((double)pointsCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}
","@RequestProcessing(value=""/member/{userName}/points"",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void execute(final HTTPRequestContext context,final HttpServletRequest path,final HttpServletResponse application,final String userName) throws Exception {
  final JSONObject user=(JSONObject)path.getAttribute(User.USER);
  path.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(""skinDirName""));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName(""/home/points.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(path,application,dataModel);
  String pageNumStr=path.getParameter(""p"");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr=""1"";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt(""userHomePointsCnt"");
  final int windowSize=Symphonys.getInt(""userHomePointsWindowSize"");
  fillHomeUser(dataModel,user);
  avatarQueryService.fillUserAvatarURL(user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  final JSONObject userPointsResult=pointtransferQueryService.getUserPoints(user.optString(Keys.OBJECT_ID),pageNum,pageSize);
  final List<JSONObject> userPoints=CollectionUtils.<JSONObject>jsonArrayToList(userPointsResult.optJSONArray(Keys.RESULTS));
  dataModel.put(Common.USER_HOME_POINTS,userPoints);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,user.optString(Keys.OBJECT_ID));
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int pointsCnt=userPointsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil((double)pointsCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}
",548,23,"showHomePoints:execute,request:path,response:application,",880,4.887523384888967,Beam
2135,"public void insert(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}
","public void append(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException(""index less than zero."");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}
",98,7,"insert:append,",37,0.18114203612009686,Beam
2136,"public void addTailArg(String arg){
  _tailArgs.add(arg);
}
","public void addTailArgs(String arg){
  _tailArgs.add(arg);
}
",16,3,"addTailArg:addTailArgs,",4,0.01908975839614868,Beam
2137,"public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}
","public static double cdf(double vol,double rate){
  if (vol < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * vol);
}
",37,3,"val:vol,",16,0.08855749368667602,Beam
2138,"protected void update(int length){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(length);
  }
 else {
    updateTickLabelForLinearScale(length);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
","protected void write(int code){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(code);
  }
 else {
    updateTickLabelForLinearScale(code);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}
",58,6,"update:write,length:code,",298,2.243458370367686,Beam
2139,"public void test_create_update() throws IOException {
  final String id=""test"";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,id);
  metadata.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(expected0));
    assertEquals(""version0"",expected0,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",metadata.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(id,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}
","public void build() throws IOException {
  final String id=""test"";
  final Map<String,Object> mm=new HashMap<String,Object>();
  mm.put(FileMetadataSchema.ID,id);
  mm.put(""foo"",""bar"");
  final int version0;
  final long createTime0;
  final byte[] pectedFalse=new byte[]{1,2,3};
{
    version0=repo.create(mm);
    mm.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals(""version"",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""bar"",actual.get(""foo""));
    assertEquals(""size"",mm.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(pectedFalse));
    assertEquals(""version0"",pectedFalse,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    mm.put(""foo"",""baz"");
    DocumentImpl doc1=new DocumentImpl(mm);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals(""version"",1,version1);
    mm.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame(""createTime"",0L,createTime1);
    assertNotSame(""createTime"",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals(""id"",id,actual.get(FileMetadataSchema.ID));
    assertEquals(""version"",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals(""user property"",""baz"",actual.get(""foo""));
    assertEquals(""size"",mm.size(),actual.size());
    assertEquals(""version1"",expected1,read(repo.inputStream(id,version1)));
    assertEquals(""version0"",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals(""version"",null,tpv.getValue());
    }
  }
}
",535,13,"test_create_update:build,expected0:pectedFalse,metadata:mm,",623,5.354978609085083,Beam
2140,"public void clearTransactions(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}
","public void clearPacts(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}
",74,8,"clearTransactions:clearPacts,",10,0.041789921124776204,Beam
2142,"public void actionPerformed(ActionEvent e){
  navigateToPriorDemo();
}
","public void actionsPerceived(ActionEvent e){
  navigateToPriorDemo();
}
",13,2,"actionPerformed:actionsPerceived,",21,0.07992803653081258,Beam
2143,,,70,5,,274,1.3424564242362975,0
2144,,,101,6,,909,5.4289477348327635,0
2147,"public static String removeQuotes(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}
","public static String RemoveRs(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}
",87,5,"removeQuotes:RemoveRs,",44,0.16843127012252807,Beam
2148,,,200,7,,260,1.9241851568222046,0
2149,,,100,8,,740,3.282827877998352,0
2150,,,16,3,,265,0.9718319614728291,0
2151,"public void testmirror(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}
","public void testpreimage(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,""_mirror"");
  File recov=TestSupport.addSuffixToName(orig,""_recov"");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}
",456,16,"testmirror:testpreimage,",87,0.5298572460810343,Beam
2152,,,102,6,,258,2.4732480088869733,0
2153,"public String info(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}
","public String summary(){
  StringBuilder sb=new StringBuilder(""Report: size: "" + tableSize + "", elements: ""+ elements+ "", loadFactor: ""+ loadFactor+ "", threshold: ""+ threshold);
  sb.append("", empty bins:"" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append("", average:0"");
    sb.append("", minListSize:0"");
    sb.append("", maxListSize:0"");
  }
 else {
    avg/=base;
    sb.append("", average:"" + avg);
    sb.append("", minListSize:"" + min);
    sb.append("", maxListSize:"" + max);
  }
  return sb.toString();
}
",211,16,"info:summary,",8,0.05797905127207438,Beam
2154,"public String toString(){
  return oid.toString();
}
","public String TOInt(){
  return code.TOInt();
}
",14,2,"toString:TOInt,oid:code,",49,0.1700933814048767,Beam
2155,"private static void skipMemberValue(int tag,ByteBuffer buf){
switch (tag) {
case 'e':
    buf.getInt();
  break;
case '@':
skipAnnotation(buf,true);
break;
case '[':
skipArray(buf);
break;
default :
buf.getShort();
}
}
","private static void SkipMethodValues(int tag,ByteBuffer func){
switch (tag) {
case 'e':
    func.getInt();
  break;
case '@':
skipAnnotation(func,true);
break;
case '[':
skipArray(func);
break;
default :
func.getShort();
}
}
",60,3,"buf:func,skipMemberValue:SkipMethodValues,",359,1.727265473206838,Beam
2156,,,81,7,,268,1.225767934322357,0
2157,"public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
","public Value batch(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}
",52,5,"sample:batch,",16,0.06972305774688721,Beam
2158,"private void initializeLocalAndTargetInfo() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}
","private void start() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info(""Step1b: Target site info set to: {}"",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info(""Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split("","");
      if (vdcIds.length > 1) {
        log.info(""More than one Vdc, rebooting"");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info(""Step1b: Target poweroff state set to: {}"",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info(""Step1b: Wait another control node to set target"");
      retrySleep();
      throw e;
    }
  }
}
",340,11,"initializeLocalAndTargetInfo:start,",20,0.11945221026738485,Beam
2160,"public boolean equals(final ArtifactCoordinates obj){
  return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier);
}
","public boolean equals(final ArtifactCoordinates tmp){
  return this == tmp || tmp != null && groupId.equals(tmp.groupId) && artifactId.equals(tmp.artifactId) && version.equals(tmp.version) && classifier.equals(tmp.classifier);
}
",55,6,"obj:tmp,",5,0.037138712406158444,Beam
2161,,,22,2,,61,0.34440446297327676,0
2162,"private void applyImageMatrix(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}
","private void transform(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}
",491,17,"applyImageMatrix:transform,",88,0.465037743250529,Beam
2163,"private String idString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}
","private String hexString(int id1,int id2){
  return ""0x"" + Integer.toHexString(id2 & 0x7F) + "" 0x""+ Integer.toHexString(id1 & 0x7F)+ "" (""+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ "")"";
}
",55,3,"idString:hexString,",69,0.4066916267077128,Beam
2164,"private static List<Size> pickUpToThree(List<Size> sizes){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizes.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizes) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}
","private static List<Size> pickDueToThree(List<Size> sales){
  List<Size> result=new ArrayList<Size>();
  Size largest=sales.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sales) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}
",186,7,"sizes:sales,pickUpToThree:pickDueToThree,",63,0.41758442322413125,Beam
2165,,,139,10,,321,2.189364246527354,0
2166,"protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
","protected String buildQualiferRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append(""^"");
  sb.append(qualifierValue);
  sb.append(""$"");
  return sb.toString();
}
",45,3,"buildQualifierRegex:buildQualiferRegex,",3,0.0170893390973409,Beam
2167,"public StreamThroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}
","public streamThroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}
",36,8,"StreamThroughput:streamThroughput,",9,0.046397411823272706,Beam
2168,"protected void expandFor(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}
","protected void expendSize(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}
",104,8,"expandFor:expendSize,",47,0.25780593156814574,Beam
2169,"private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){
  final int k=means.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}
","private void recomputeSeperation(double[][] mesaned,double[][] cdist,LongStatistic diststat){
  final int k=mesaned.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(mesaned[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(mesaned[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}
",135,9,"means:mesaned,",9,0.060853465398152666,Beam
2170,"public final boolean remove(final URI serviceURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.remove(serviceURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.remove(serviceURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.remove(factory);
      }
    }
  }
  return modified;
}
","public final boolean close(final URI proxyURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.close(proxyURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.close(proxyURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.close(factory);
      }
    }
  }
  return modified;
}
",80,7,"remove:close,serviceURI:proxyURI,",63,0.29520554542541505,Beam
2171,,,79,6,,1025,7.193185234069825,0
2172,,,192,5,,378,1.9705698887507122,0
2173,,,88,5,,302,1.885330319404602,0
2174,"public void close(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
","public void kill(){
  if (!isOpen)   return;
  Log.d(TAG,""Trying to close track"");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.kill(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,""Track closed"");
  }
  finally {
    loadingLock.unlock();
  }
}
",81,5,"close:kill,",7,0.04597837924957275,Beam
2175,,,59,5,,281,1.8967636624972026,0
2176,"public boolean free(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}
","public boolean delete(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}
",75,8,"free:delete,",39,0.21955304940541584,Beam
2177,,,204,14,,454,3.1474430322647096,0
2178,"public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}
","public static boolean isConnected(NetType netType,NetworkInfo networkObj){
  if (netType == NetType.Any && networkObj != null && isConnected(networkObj))   return true;
 else   if (netType == NetType.Wifi && networkObj != null && networkObj.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkObj))   return true;
 else   if (netType == NetType.Mobile && networkObj != null && networkObj.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkObj))   return true;
  return false;
}
",98,3,"networkInfo:networkObj,",7,0.06102111339569092,Beam
2179,,,68,4,,279,1.3714051445325215,0
2180,"public float toMeters(double pixels){
  return (float)(pixels * METERS_PER_PIXELS);
}
","public float ToMels(double picks){
  return (float)(picks * METERS_PER_PIXELS);
}
",19,3,"toMeters:ToMels,pixels:picks,",47,0.27945791085561117,Beam
2181,,,44,4,,126,0.46930843194325766,0
2182,,,31,4,,1161,6.968968538443248,0
2184,,,136,5,,243,1.3235617280006409,0
2185,"protected final void resolveIssue(HealthIssue healthIssue){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthIssue.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(healthIssue);
  }
  if (wasIssueActive) {
    eventBus.post(healthIssue.resolved);
  }
}
","protected final void reolveIss(HealthIssue healthyUnit){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w(""A health issue was resolved even though no event bus was registered to "" + ""handle it: %1$s."",healthyUnit.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(healthyUnit);
  }
  if (wasIssueActive) {
    eventBus.post(healthyUnit.resolved);
  }
}
",75,7,"resolveIssue:reolveIss,healthIssue:healthyUnit,",164,0.87943487962087,Beam
2186,"public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}
","public final static int parseInt(char[] starterChars,int field,int len){
  int num=starterChars[field] - '0';
  len+=field;
  if (++field < len) {
    num=(num * 10) + (starterChars[field] - '0');
    if (++field < len) {
      num=(num * 10) + (starterChars[field] - '0');
      if (++field < len) {
        num=(num * 10) + (starterChars[field] - '0');
        if (++field < len) {
          num=(num * 10) + (starterChars[field] - '0');
          if (++field < len) {
            num=(num * 10) + (starterChars[field] - '0');
            if (++field < len) {
              num=(num * 10) + (starterChars[field] - '0');
              if (++field < len) {
                num=(num * 10) + (starterChars[field] - '0');
                if (++field < len) {
                  num=(num * 10) + (starterChars[field] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}
",244,5,"offset:field,digitChars:starterChars,",175,1.3015146017074586,Beam
2187,"private int measureHeight(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
","private int MEasuringPixel(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
",110,7,"measureHeight:MEasuringPixel,",18,0.07827131748199463,Beam
2188,,,166,6,,362,2.170760814348857,0
2189,"public static void assertEquals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}
","public static void assertequates(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}
",25,3,"assertEquals:assertequates,",47,0.22646721204121908,Beam
2190,,,54,3,,594,3.8650456428527833,0
2191,"public void addRow(Assignment head,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(head.getVariables());
  table.put(head,prob);
}
","public void setItem(Assignment add,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(add.getVariables());
  table.put(add,prob);
}
",46,5,"addRow:setItem,head:add,",86,0.45771490732828773,Beam
2192,,,102,5,,245,1.3216145594914754,0
2193,,,181,11,,1583,8.846941196918488,0
2194,"public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}
","public void empty(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}
",41,5,"clear:empty,",3,0.014810887972513835,Beam
2195,"@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}
","@Override public void evict(String index){
  index=safetyKey(index);
  final File file=new File(cacheDirectory,index);
  file.delete();
}
",36,4,"key:index,",22,0.11542974710464478,Beam
2196,"public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}
","public int load() throws IOException {
  int val;
  if ((val=is.load()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.load() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.load() & 0x3f) << 6) | (is.load() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}
",127,3,"read:load,",4,0.03829718828201294,Beam
2197,"void handleSelectionChanged(String selection){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (selection == null || selection.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSelectionType == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (selection != null && !selection.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
  mSelectedText=selection;
  if (mWasTapGestureDetected) {
    mSelectionType=SelectionType.TAP;
    handleSelection(selection,mSelectionType);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(selection,mX,mY);
  }
}
","void handleSelectChanges(String layout){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (layout == null || layout.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSelectionType == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (layout != null && !layout.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
  mSelectedText=layout;
  if (mWasTapGestureDetected) {
    mSelectionType=SelectionType.TAP;
    handleSelection(layout,mSelectionType);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(layout,mX,mY);
  }
}
",114,9,"handleSelectionChanged:handleSelectChanges,selection:layout,",159,0.6728550910949707,Beam
2198,,,109,6,,346,2.239905035495758,0
2199,,,74,4,,95,0.5793752988179525,0
2200,"public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}
","public MLResults process(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return process(script,scriptExecutor);
}
",58,8,"execute:process,",10,0.04330745935440063,Beam
2201,"public void addTerm(SplitCondition condition){
  terms.add(condition);
}
","public void createterm(SplitCondition join){
  facts.add(join);
}
",16,3,"condition:join,addTerm:createterm,terms:facts,",141,0.8141842365264893,Beam
2203,"private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}
","private byte[] toZLIB(RenderedImage video,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(video,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}
",44,4,"image:video,",12,0.14988412062327067,Beam
2204,"private boolean fitsAsSingleLine(int col){
  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}
","private boolean wrapAsOneCell(int col){
  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}
",44,3,"fitsAsSingleLine:wrapAsOneCell,",45,0.4001975655555725,Beam
2205,,,67,6,,239,1.1761414726575217,0
2206,"public Dimension minimumLayoutSize(Container target){
synchronized (target.getTreeLock()) {
    Dimension dim=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension d=chart.getMinimumSize();
      dim.width=d.width;
      dim.height=d.height;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension d=xLabel.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension d=yLabel.getMinimumSize();
      dim.width+=d.width + hgap;
      dim.height=Math.max(d.height,dim.height);
    }
    if ((title != null) && title.isVisible()) {
      Dimension d=title.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    Insets insets=target.getInsets();
    dim.width+=insets.left + insets.right;
    dim.height+=insets.top + insets.bottom;
    return dim;
  }
}
","public Dimension render(Container target){
synchronized (target.getTreeLock()) {
    Dimension dim=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension d=chart.getMinimumSize();
      dim.width=d.width;
      dim.height=d.height;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension d=xLabel.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension d=yLabel.getMinimumSize();
      dim.width+=d.width + hgap;
      dim.height=Math.max(d.height,dim.height);
    }
    if ((title != null) && title.isVisible()) {
      Dimension d=title.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    Insets insets=target.getInsets();
    dim.width+=insets.left + insets.right;
    dim.height+=insets.top + insets.bottom;
    return dim;
  }
}
",263,11,"minimumLayoutSize:render,",23,0.1941486438115438,Beam
2207,,,135,8,,512,4.279758862654368,0
2208,"protected Object parseValue(String string){
  int openParen=string.indexOf(""("");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}
","protected Object parseValue(String service){
  int openParen=service.indexOf(""("");
  String type=service.substring(0,openParen);
  String value=service.substring(openParen + 1,service.length() - 1);
  if (type.equals(""String"")) {
    return value;
  }
 else   if (type.equals(""Float"")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals(""Integer"")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals(""List"")) {
    StringTokenizer tok=new StringTokenizer(value,"","");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error(""Unknown type: "" + type);
  }
}
",213,10,"string:service,",16,0.18490503629048666,Beam
2209,"public ExtensionQuery(String pluginId,String extensionPointName,String attributeName){
  this.pluginId=extensionPointName.contains(""."") ? null : pluginId;
  this.extensionPointName=extensionPointName;
  this.attributeName=attributeName;
}
","public extencyName(String moduleName,String extensionPartName,String attributeName){
  this.moduleName=extensionPartName.contains(""."") ? null : moduleName;
  this.extensionPartName=extensionPartName;
  this.attributeName=attributeName;
}
",41,4,"ExtensionQuery:extencyName,pluginId:moduleName,extensionPointName:extensionPartName,",558,2.766206693649292,Beam
2210,"public static void closeQuiet(@Nullable Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
","public static void closeComport(@Nullable Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignored) {
    }
  }
}
",36,2,"closeQuiet:closeComport,",44,0.3745014508565267,Beam
2211,,,34,5,,335,2.7144019762674967,0
2212,,,118,7,,269,2.017662239074707,0
2213,,,28,4,,151,0.8439332127571106,0
2215,"private static String readName(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return readName(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=readName(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}
","private static String writeNames(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return writeNames(data,c,jumps);
  }
  if (c == 0) {
    return """";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=writeNames(dis,data);
  if (t.length() > 0) {
    s=s + ""."" + t;
  }
  return s;
}
",163,8,"readName:writeNames,",57,0.3537982980410258,Beam
2216,,,38,2,,126,0.9942166169484457,0
2217,,,247,15,,589,5.224204142888387,0
2218,"public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
","public static boolean Save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}
",102,6,"save:Save,",44,0.20699836413065592,Beam
2219,"public static boolean isSupportedAddRPProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){
  s_logger.info(String.format(""Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]..."",currentVpool.getLabel(),newVpool.getLabel()));
  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {
    return false;
  }
  if (volume.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint Protection since it already exists."");
    return false;
  }
  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first."");
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add MetroPoint Protection directly to VPLEX Local volume. "" + ""Upgrade from VPLEX Local to VPLEX Distributed first."");
    return false;
  }
  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};
  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (!changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are invalid: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  include=new String[]{PROTECTION_VARRAY_SETTINGS};
  changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are required: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {
    VirtualPoolChangeOperationEnum op=vplexCommonChecks(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);
    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {
      return false;
    }
  }
  return true;
}
","public static boolean apply(Volume parent,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){
  s_logger.info(String.format(""Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]..."",currentVpool.getLabel(),newVpool.getLabel()));
  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {
    return false;
  }
  if (parent.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint Protection since it already exists."");
    return false;
  }
  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first."");
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {
    notSuppReasonBuff.append(""Can\'t add MetroPoint Protection directly to VPLEX Local volume. "" + ""Upgrade from VPLEX Local to VPLEX Distributed first."");
    return false;
  }
  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};
  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (!changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are invalid: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  include=new String[]{PROTECTION_VARRAY_SETTINGS};
  changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (changes.isEmpty()) {
    notSuppReasonBuff.append(""These target virtual pool differences are required: "");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {
    VirtualPoolChangeOperationEnum op=vplexCommonChecks(parent,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);
    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {
      return false;
    }
  }
  return true;
}
",373,29,"isSupportedAddRPProtectionVirtualPoolChange:apply,volume:parent,",193,1.467211095492045,Beam
2220,,,159,8,,361,1.991547151406606,0
2221,"public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}
","public static void trim(CharSequence saData,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=saData;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}
",109,6,"aText:saData,",8,0.03929041226704915,Beam
2222,,,51,5,,785,2.7594256083170574,0
2223,"public void addCommands(PDFPage page,Matrix extra){
synchronized (commands) {
    addPush();
    if (extra != null) {
      addXform(extra);
    }
    commands.addAll(page.getCommands());
    addPop();
  }
  updateImages();
}
","public void addComs(PDFPage media,Matrix empty){
synchronized (commands) {
    addPush();
    if (empty != null) {
      addXform(empty);
    }
    commands.addAll(media.getCommands());
    addPop();
  }
  updateImages();
}
",54,4,"extra:empty,page:media,addCommands:addComs,",373,1.8556459029515584,Beam
2224,"@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
","@Override public void create(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}
",41,2,"update:create,",10,0.06951192220052084,Beam
2226,"private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}
","private int plus(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}
",29,4,"accept:plus,",85,0.4019684354464213,Beam
2227,,,18,2,,294,2.054509723186493,0
2228,,,160,7,,505,3.4027066508928936,0
2229,"private long acquireWrite(boolean interruptible,long deadline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}
","private long wait(boolean interruptible,long wakeline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (wakeline == 0L)         time=0L;
 else         if ((time=wakeline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}
",672,29,"acquireWrite:wait,deadline:wakeline,",122,0.7247201482454936,Beam
2230,"public void reset(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}
","public void drop(){
  Timber.i(""resetting QueuedMediaPlayer..."");
  mCurrentPlayer.drop();
  mNextPlayer.drop();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}
",46,7,"reset:drop,",11,0.0631684144337972,Beam
2232,,,23,3,,134,0.7213098645210266,0
2233,"protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}
","protected void drop(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.drop(itemPosition);
  }
}
",30,3,"remove:drop,",30,0.13517059087753297,Beam
2234,"public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
","public static String buildResponseString(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info(""SAML SLO Response is "" + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}
",75,6,"buildResponseUrl:buildResponseString,",39,0.2745153188705444,Beam
2235,"public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}
","public List<LocalTime> test(int n){
  List<LocalTime> test=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    test.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return test;
}
",89,5,"top:test,",27,0.15847841501235962,Beam
2236,,,99,6,,169,0.9499380866686503,0
2237,,,180,11,,596,3.555694949626923,0
2238,"public void start(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
","public void work(){
  if (sLogger.isActivated()) {
    sLogger.info(""Start address book monitoring"");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}
",91,7,"start:work,",7,0.03655139207839966,Beam
2240,,,94,6,,325,1.7821821530659994,0
2241,,,11,2,,133,0.5959334174791971,0
2242,"private void addFeature(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}
","private void addFeature(JsonNode function,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(function);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn(""Empty MultiPolygon, skipping."");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}
",80,5,"feature:function,",11,0.07487141291300456,Beam
2243,"protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}
","protected final void writeC(ByteBuffer br,int property){
  br.put((byte)property);
}
",23,3,"buf:br,value:property,",101,0.3974822560946147,Beam
2244,"void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}
","void loadFiles(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}
",37,3,"readFile:loadFiles,",39,0.15345110495885214,Beam
2245,"private void refreshChallengeCounts(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}
","private void refreshChallengeLogls(){
  mDueChallengeCounts=mDueChallengeLogive.getDueChallengeCounts(mCategories);
}
",16,4,"refreshChallengeCounts:refreshChallengeLogls,mDueChallengeLogic:mDueChallengeLogive,",43,0.2651532848676046,Beam
2246,,,128,8,,285,1.4151095668474833,0
2247,"static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}
","static boolean isModuleArray(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}
",19,3,"isPackageAccess:isModuleArray,",36,0.23376659949620565,Beam
2248,"public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());
}
","public static String getQueueRedisSecret(String Queuename,String shardName,int priority,PinLaterJobState state){
  return String.format(""%s_%s_%s.p%1d_s%1d"",PINLATER_QUEUE_KEY_PREFIX,shardName,Queuename,priority,state.getValue());
}
",41,5,"constructQueueRedisKey:getQueueRedisSecret,queueName:Queuename,",149,0.9005826234817504,Beam
2249,,,875,23,,1449,9.952942979335784,0
2250,"void addReporter(String textReporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
","void addExpressor(String textReporter,int code,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(code,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}
",77,5,"addReporter:addExpressor,xx:code,",125,0.5534912705421448,Beam
2251,"public static byte[] readInputStream(InputStream i) throws IOException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  copy(i,b);
  return b.toByteArray();
}
","public static byte[] readOutputFile(InputStream i) throws IOException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  copy(i,b);
  return b.toByteArray();
}
",36,3,"readInputStream:readOutputFile,",11,0.046750771999359134,Beam
2252,"public static void writeToFile(String content,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}
","public static void write2File(String format,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(format);
  bufferedWriter.close();
}
",43,4,"content:format,writeToFile:write2File,",82,0.3395265579223633,Beam
2253,,,29,4,,206,1.3737528761227926,0
2254,,,16,3,,290,1.1865912874539692,0
2255,,,120,8,,502,3.3107108950614927,0
2256,"public void testQuorumSucceed(){
  quorum.succeed();
  quorum.fail();
  assertEquals(callbackResult.get(),0);
  quorum.fail();
  quorum.succeed();
  assertEquals(callbackResult.get(),1);
}
","public void assertQuorumsucccess(){
  quorum.succeed();
  quorum.fail();
  assertEquals(callbackResult.get(),0);
  quorum.fail();
  quorum.succeed();
  assertEquals(callbackResult.get(),1);
}
",53,3,"testQuorumSucceed:assertQuorumsucccess,",16,0.09581903616587321,Beam
2257,"private void schedulePlaylistSave(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}
","private void schedulePlaysystemUpload(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}
",43,4,"schedulePlaylistSave:schedulePlaysystemUpload,",22,0.1237367868423462,Beam
2258,"public boolean isValid(World world){
  return true;
}
","public boolean isValid(World domain){
  return true;
}
",12,2,"world:domain,",6,0.028975542386372885,Beam
2259,"public void onMotion(MotionEvent event,Interaction iact){
}
","public void handlemotion(MotionEvent event,Interaction iact){
}
",12,3,"onMotion:handlemotion,",10,0.03837290604909261,Beam
2260,,,51,2,,74,0.44138956467310586,0
2261,,,90,6,,212,1.9191173712412517,0
2262,,,113,6,,266,1.873823344707489,0
2263,"@Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}
","@Ignore @Test public void test_DR_PGS_4NODEES06() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs(""ln"",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail(""UnExpected Exception"",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}
",313,16,"test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver:test_DR_PGS_4NODEES06,",3,0.041986672083536784,Beam
2264,"void scramble(){
  initialSize=getSize();
  int a[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)a.length;
  for (int i=a.length; --i >= 0; ) {
    a[i]=(int)(i * f);
  }
  for (int i=a.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=a[i];
    a[i]=a[j];
    a[j]=t;
  }
  arr=a;
}
","void screaming(){
  initialSize=getSize();
  int a[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)a.length;
  for (int i=a.length; --i >= 0; ) {
    a[i]=(int)(i * f);
  }
  for (int i=a.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=a[i];
    a[i]=a[j];
    a[j]=t;
  }
  arr=a;
}
",134,8,"scramble:screaming,",3,0.017194207509358725,Beam
2265,"public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}
","public static AttackStatus calculatePhysicalState(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalState(attacker,attacked,isMainHand,0,100,false,false);
}
",34,4,"calculatePhysicalStatus:calculatePhysicalState,",65,0.3354822278022766,Beam
2266,"@Override public void addShutdownWindow(final Window window){
  if (m_isShutDown) {
    closeWindow(window);
    return;
  }
synchronized (this) {
    if (m_isShutDown) {
      closeWindow(window);
      return;
    }
    m_windowsToCloseOnShutdown.add(window);
  }
}
","@Override public void addShutdownWindow(final Window child){
  if (m_isShutDown) {
    closeWindow(child);
    return;
  }
synchronized (this) {
    if (m_isShutDown) {
      closeWindow(child);
      return;
    }
    m_windowsToCloseOnShutdown.add(child);
  }
}
",51,4,"window:child,",21,0.10323935747146606,Beam
2267,"@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}
","@Override public String insert(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format(""/webhdfs/v1/{0}?op=APPEND&user.name={1}"",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod(""POST"");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info(""Location:"" + conn.getHeaderField(""Location""));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField(""Location"");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod(""POST"");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty(""Content-Type"",""application/octet-stream"");
    final int _SIZE=is.available();
    conn.setRequestProperty(""Content-Length"","""" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}
",285,13,"append:insert,",65,0.6430129726727803,Beam
2268,"public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}
","public boolean remove(ImageInfo model){
  final int location=getLocation(model);
  final boolean removed=data.remove(model);
  notifyItemRemoved(location);
  return removed;
}
",37,5,"object:model,",42,0.28326820135116576,Beam
2270,"private static MetricValue number_to_metric_value_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
","private static MetricValue number_to_metric_type_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}
",85,3,"number_to_metric_value_:number_to_metric_type_,",35,0.2305866320927938,Beam
2271,"public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}
","public void start(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}
",137,7,"stop:start,",3,0.03543386459350586,Beam
2272,,,149,7,,230,1.682914384206136,0
2273,,,51,3,,283,3.4500355680783588,0
2274,"private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(persist,file);
  persistUpdatedBundle(persist,file,updateSet,setName);
}
","private void addFromGroup(ObjectXmlPersist scientist,IFile file,String setName) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(scientist,file);
  persistUpdatedBundle(scientist,file,updateSet,setName);
}
",43,5,"addToSet:addFromGroup,persist:scientist,",376,2.9766785661379496,Beam
2275,,,81,5,,477,3.786206833521525,0
2276,,,68,4,,307,2.579416259129842,0
2277,"@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
","@Override public PollResult checkPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + "" select disabled"");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + "" socket empty for "" + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + "" no channel for "" + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}
",126,9,"startPoll:checkPoll,",4,0.03216123183568319,Beam
2278,"private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
","private void add(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}
",414,4,"populateHostData:add,",90,0.8034055749575297,Beam
2279,"private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}
","private void addStructets(Class<?>[] classes,HashSet<Class<?>> data,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   data.add(classe);
}
",64,6,"result:data,addClasses:addStructets,",177,1.3018346905708313,Beam
2280,"public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
","public boolean edit(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}
",46,5,"select:edit,",8,0.054623015721638996,Beam
2281,"public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}
","public static ResultSet pointTable(double lat,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet pr=new SimpleResultSet();
  pr.addColumn(""THE_GEOM"",Types.JAVA_OBJECT,""GEOMETRY"",0,0);
  pr.addRow(factory.createPoint(new Coordinate(lat,y)));
  return pr;
}
",67,5,"x:lat,rs:pr,",550,4.3175518870353695,Beam
2283,,,115,6,,289,1.9444974501927694,0
2284,"private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){
  if (matches(statusLine,x,y)) {
    final String filename=statusLine.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}
","private static boolean addIfMatches(List<String> config,String statusBlock,char x,char y){
  if (matches(statusBlock,x,y)) {
    final String filename=statusBlock.substring(3);
    if (!config.contains(filename)) {
      config.add(filename);
    }
    return true;
  }
  return false;
}
",71,6,"statusLine:statusBlock,container:config,",252,2.3110514084498086,Beam
2285,"public static AttribKey forHtmlAttrib(ElKey el,String localName){
  return new AttribKey(el,HTML_NS,localName);
}
","public static AttribKey forHtmlAddrip(ElKey el,String LocalContent){
  return new AttribKey(el,HTML_NS,LocalContent);
}
",24,4,"localName:LocalContent,forHtmlAttrib:forHtmlAddrip,",120,0.8590447306632996,Beam
2286,,,217,9,,562,5.00876077413559,0
2288,,,99,6,,267,2.0036386768023173,0
2289,"@Override public int hashCode(){
  int code=0;
  if (fPublicId != null) {
    code+=fPublicId.hashCode();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.hashCode();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.hashCode();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.hashCode();
  }
  if (fNamespace != null) {
    code+=fNamespace.hashCode();
  }
  return code;
}
","@Override public int getValue(){
  int code=0;
  if (fPublicId != null) {
    code+=fPublicId.getValue();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.getValue();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.getValue();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.getValue();
  }
  if (fNamespace != null) {
    code+=fNamespace.getValue();
  }
  return code;
}
",97,7,"hashCode:getValue,",28,0.2044068733851115,Beam
2290,"@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}
","@Override public Expected<T> IFNext(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}
",40,2,"ifPresent:IFNext,",6,0.05484549204508463,Beam
2291,"protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith(""http"")) {
    if (link.startsWith(""/"")) {
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains("":"")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + ""://"" + baseUrl.getAuthority()+ path+ ""/""+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return link;
}
","protected String rewrite(URL absoluteUrl,String key){
  if (key == null || key.length() == 0) {
    return null;
  }
  if (!key.startsWith(""http"")) {
    if (key.startsWith(""/"")) {
      key=absoluteUrl.getProtocol() + ""://"" + absoluteUrl.getAuthority()+ key;
    }
 else {
      if (key.contains("":"")) {
        return null;
      }
      String path=absoluteUrl.getPath();
      if (!path.endsWith(""/"")) {
        int sep=path.lastIndexOf(""/"");
        String file=path.substring(sep + 1);
        if (file.contains(""."") || file.contains(""?""))         path=path.substring(0,sep);
      }
      key=absoluteUrl.getProtocol() + ""://"" + absoluteUrl.getAuthority()+ path+ ""/""+ key;
    }
  }
  key=normalizeUrlEnding(key);
  String l=key.toLowerCase(Locale.ROOT);
  if (l.endsWith("".jpg"") || l.endsWith("".jpeg"") || l.endsWith("".png"")|| l.endsWith("".gif"")) {
    return null;
  }
  return key;
}
",238,7,"computeFullUrl:rewrite,baseUrl:absoluteUrl,link:key,",469,5.090974978605906,Beam
2292,"void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}
","void create(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}
",47,6,"write:create,",66,0.40944785277048745,Beam
2293,,,49,3,,118,0.9081122954686482,0
2294,"@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}
","@Override public final void readLow(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}
",50,4,"writeShort:readLow,",40,0.23570378621419272,Beam
2295,"@RequestProcessing(value=""/member/{userName}/following/tags"",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {
  final JSONObject user=(JSONObject)request.getAttribute(User.USER);
  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(""skinDirName""));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName(""/home/following-tags.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(request,response,dataModel);
  String pageNumStr=request.getParameter(""p"");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr=""1"";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt(""userHomeFollowingTagsCnt"");
  final int windowSize=Symphonys.getInt(""userHomeFollowingTagsWindowSize"");
  fillHomeUser(dataModel,user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  avatarQueryService.fillUserAvatarURL(user);
  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);
  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);
  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
    for (    final JSONObject followingTag : followingTags) {
      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);
      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));
    }
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}
","@RequestProcessing(value=""/member/{userName}/following/tags"",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void execute(final HTTPRequestContext context,final HttpServletRequest query,final HttpServletResponse response,final String userName) throws Exception {
  final JSONObject user=(JSONObject)query.getAttribute(User.USER);
  query.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get(""skinDirName""));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName(""/home/following-tags.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(query,response,dataModel);
  String pageNumStr=query.getParameter(""p"");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr=""1"";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt(""userHomeFollowingTagsCnt"");
  final int windowSize=Symphonys.getInt(""userHomeFollowingTagsWindowSize"");
  fillHomeUser(dataModel,user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  avatarQueryService.fillUserAvatarURL(user);
  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);
  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);
  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
    for (    final JSONObject followingTag : followingTags) {
      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);
      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));
    }
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}
",570,24,"showHomeFollowingTags:execute,request:query,",363,3.0034491380055743,Beam
2296,"public StrBuilder replaceFirst(final String searchStr,final String replaceStr){
  final int searchLen=(searchStr == null ? 0 : searchStr.length());
  if (searchLen > 0) {
    final int index=indexOf(searchStr,0);
    if (index >= 0) {
      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());
      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);
    }
  }
  return this;
}
","public StrBuilder transformOnly(final String savestr,final String replaceStr){
  final int searchLen=(savestr == null ? 0 : savestr.length());
  if (searchLen > 0) {
    final int index=indexOf(savestr,0);
    if (index >= 0) {
      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());
      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);
    }
  }
  return this;
}
",95,6,"replaceFirst:transformOnly,searchStr:savestr,",249,2.043434723218282,Beam
2297,"@Override public boolean lock(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));
    }
    fileOutputStream=new FileOutputStream(lockFilePath);
    channel=fileOutputStream.getChannel();
    try {
      fileLock=channel.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileLock) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}
","@Override public boolean create(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));
    }
    fileOutputStream=new FileOutputStream(lockFilePath);
    channel=fileOutputStream.getChannel();
    try {
      fileLock=channel.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileLock) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}
",153,8,"lock:create,",9,0.0951074242591858,Beam
2298,,,19,2,,142,0.6056948264439901,0
2300,"protected Object finish(Map settings) throws WizardException {
  return provider.finish(settings);
}
","protected Object finishedish(Map settings) throws WizardException {
  return provider.finishedish(settings);
}
",19,3,"finish:finishedish,",43,0.39195226430892943,Beam
2301,"public static Container east(Component east){
  return Container.encloseIn(new BorderLayout(),east,BorderLayout.EAST);
}
","public static Container center(Component center){
  return Container.encloseIn(new BorderLayout(),center,BorderLayout.EAST);
}
",27,1,"east:center,",12,0.10550392071406046,Beam
2302,"public boolean isSessionToken(String token){
synchronized (sessionTokens) {
    return sessionTokens.contains(token);
  }
}
","public boolean issessionToken(String index){
synchronized (sessionTokens) {
    return sessionTokens.contains(index);
  }
}
",23,3,"isSessionToken:issessionToken,token:index,",68,0.5761284391085307,Beam
2303,,,177,12,,2198,26.782722516854605,0
2305,"public static RepaintManager currentManager(Component c){
  return currentManager(AppContext.getAppContext());
}
","public static RepaintManager firstManager(Component c){
  return firstManager(AppContext.getAppContext());
}
",20,2,"currentManager:firstManager,",5,0.024042741457621256,Beam
2306,,,131,8,,281,2.008265169461568,0
2307,"private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}
","private boolean matchesSometag(String typeName){
  return tagNames.contains(typeName);
}
",17,3,"matchesAnyTag:matchesSometag,tagName:typeName,",47,0.4503052075703939,Beam
2308,"public void add(DataSource source,boolean visible){
  add(data.size(),source,visible);
}
","public void append(DataSource source,boolean visible){
  append(data.size(),source,visible);
}
",25,4,"add:append,",7,0.054628988107045494,Beam
2309,"private static int indexOf(int fromIndex,CharSequence csq){
  if (csq == null)   return 0;
  int length=csq.length();
  int j=fromIndex;
  int i=(j < length) ? csq.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? csq.charAt(j++) : 0;
  return i;
}
","private static int fixof(int fromIndex,CharSequence cequ){
  if (cequ == null)   return 0;
  int length=cequ.length();
  int j=fromIndex;
  int i=(j < length) ? cequ.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? cequ.charAt(j++) : 0;
  return i;
}
",80,6,"indexOf:fixof,csq:cequ,",84,1.07490070660909,Beam
2310,"public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}
","public static boolean Istrue(Map<String,Object> dict,String key){
  return Istrue(dict,key,false);
}
",28,3,"isTrue:Istrue,",13,0.11981167793273925,Beam
2311,"public IonException(Throwable cause){
  super(cause.getMessage(),cause);
}
","public IonicError(Throwable cause){
  super(cause.getMessage(),cause);
}
",19,2,"IonException:IonicError,",9,0.08430400689442953,Beam
2312,"public int hashCode(){
  return font.hashCode() ^ glyphs.length;
}
","public int printCount(){
  return font.printCount() ^ glyphs.length;
}
",18,2,"hashCode:printCount,",10,0.05914822022120158,Beam
2313,"private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){
  final int offset=Math.max(0,scrollView.getScrollY());
  final int range=computeVerticalScrollRange(scrollView) - scrollView.getHeight();
  if (range == 0)   return false;
  if (direction < 0) {
    return offset > 0;
  }
 else {
    return offset < range - 1;
  }
}
","private boolean scrollViewCanScrollVertically(ScrollView scrollModel,int direction){
  final int offset=Math.max(0,scrollModel.getScrollY());
  final int range=computeVerticalScrollRange(scrollModel) - scrollModel.getHeight();
  if (range == 0)   return false;
  if (direction < 0) {
    return offset > 0;
  }
 else {
    return offset < range - 1;
  }
}
",76,5,"scrollView:scrollModel,",3,0.03728086551030477,Beam
2314,,,18,3,,124,0.9043427228927612,0
2315,,,58,5,,604,4.784696555137634,0
2316,"public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
","public static void result(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.result();
    }
  }
 catch (  final RemoteException ignored) {
  }
}
",33,2,"next:result,",6,0.04961332082748413,Beam
2317,"public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}
","public static int compare(Comparable c3,Comparable c2,boolean nullGreater){
  if (c3 == c2) {
    return 0;
  }
 else   if (c3 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c3.compareTo(c2);
}
",73,4,"c1:c3,",49,0.47787578105926515,Beam
2318,"public boolean isSegmentBalanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;
  }
  return true;
}
","public boolean isSegmentBalancing(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBalancing(ase.getElementType()))     return false;
  }
  return true;
}
",87,7,"isSegmentBalanced:isSegmentBalancing,",6,0.06496084531148275,Beam
2319,"public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}
","public static double[][] generate(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}
",352,22,"computeWeightMatrix:generate,",57,0.5517850716908773,Beam
2320,,,23,1,,25,0.1336649219195048,0
2321,,,62,5,,166,1.0304690241813659,0
2322,"public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
","public void removePositionition(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}
",61,5,"removePositions:removePositionition,",37,0.30899819533030193,Beam
2323,,,49,4,,192,1.6082718094189963,0
2324,"protected abstract void internalPut(int index,byte b);
","protected abstract void internalPut(int data,byte emb);
",12,3,"b:emb,index:data,",149,1.1083110173543294,Beam
2325,"private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
","private List<Header> initialMetels(){
  DateFormat dateFormat=new SimpleDateFormat(""EEE, dd mmm yyyy HH:mm:ss zzz"");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader(""Date"",dateFormat.format(new Date())));
  return headers;
}
",56,3,"defaultHeaders:initialMetels,",18,0.11996569633483886,Beam
2326,"public static boolean verify(byte[] data,byte[] signature,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && signature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(signature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(signature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}
","public static boolean signify(byte[] input,byte[] signature,byte[] pub){
  Preconditions.checkArgument(input.length == 32 && signature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(input);
  byteBuff.putInt(signature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(signature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}
",148,6,"verify:signify,data:input,",182,1.5407276391983031,Beam
2327,"void addNext(Node<T> n){
  nextNodes.add(n);
  Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator);
}
","void AddNext(Node<T> fn){
  nextKnoms.add(fn);
  Collections.sort(nextKnoms,isVertical ? verticalComparator : horizontalComparator);
}
",31,6,"n:fn,addNext:AddNext,nextNodes:nextKnoms,",238,1.1374455293019612,Beam
2328,"public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}
","public static void dup(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}
",359,5,"copy:dup,",72,0.5138017296791076,Beam
2329,"public MessagePropertyKey(String description,Integer ordinal){
  this.description=description;
  this.ordinal=ordinal;
}
","public MessagePropertyKey(String property,Integer ordinal){
  this.property=property;
  this.ordinal=ordinal;
}
",23,3,"description:property,",14,0.07724569241205852,Beam
2330,"public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}
","public boolean enter() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + ""/"" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}
",75,6,"leave:enter,",3,0.024606112639109293,Beam
2331,"public List<SoftWrapImpl> removeStartingFrom(int offset){
  int startIndex=getSoftWrapIndex(offset);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}
","public List<SoftWrapImpl> removeStartingStart(int number){
  int startIndex=getSoftWrapIndex(number);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}
",97,6,"removeStartingFrom:removeStartingStart,offset:number,",69,0.3856381376584371,Beam
2332,"public void write(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}
","public void write(byte[] f,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(f,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(f,offset,length);
    written+=length;
  }
  crc.update(f,offset,length);
}
",103,9,"b:f,",3,0.027965156237284343,Beam
2333,"public void readWwwAuthenticateHeader(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,""realm"");
    mDigest.setRealm(value);
    value=getValue(header,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(header,""qop"");
    mDigest.setQop(value);
    value=getValue(header,""nonce"");
    mDigest.setNextnonce(value);
  }
}
","public void readWwwAuthentificateMessage(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,""realm"");
    mDigest.setRealm(value);
    value=getValue(header,""opaque"");
    mDigest.setOpaque(value);
    value=getValue(header,""qop"");
    mDigest.setQop(value);
    value=getValue(header,""nonce"");
    mDigest.setNextnonce(value);
  }
}
",102,5,"readWwwAuthenticateHeader:readWwwAuthentificateMessage,",44,0.2854482889175415,Beam
2334,"public void addButton(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}
","public void createAction(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}
",73,5,"addButton:createAction,",8,0.029342051347096762,Beam
2335,"public int syncQuery(String query){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,query);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
","public int syncQuery(String statement){
  long start=System.currentTimeMillis();
  int modified=execute(""update"",UPDATE_COUNT_RESPONSE,statement);
  log.debug(""Update query took {} millis and modified {} statements"",System.currentTimeMillis() - start,modified);
  return modified;
}
",50,5,"query:statement,",5,0.06361672083536783,Beam
2336,"private static String parse(JsonValue base){
  if (!base.isString()) {
    return null;
  }
  return buildString(base.asString());
}
","private static String set(JsonValue api){
  if (!api.isString()) {
    return null;
  }
  return buildString(api.asString());
}
",34,2,"parse:set,base:api,",101,0.5515001853307088,Beam
2337,"protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){
  if (dropTableNames != null && !dropTableNames.isEmpty()) {
    String[] dropTableSQLS=new String[dropTableNames.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i));
    }
    execute(dropTableSQLS,db);
  }
}
","protected void dropDows(List<String> dropKeyKeys,SQLiteDatabase db){
  if (dropKeyKeys != null && !dropKeyKeys.isEmpty()) {
    String[] dropTableSQLS=new String[dropKeyKeys.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropKeyKeys.get(i));
    }
    execute(dropTableSQLS,db);
  }
}
",85,5,"dropTableNames:dropKeyKeys,dropTables:dropDows,",84,0.7475542823473612,Beam
2339,"protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=context.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put(""backColor"",backColor);
  }
  String fontName=context.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put(""fontName"",fontName);
  }
  String fontSize=context.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put(""fontSize"",fontSize);
  }
  String foreColor=context.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put(""foreColor"",foreColor);
  }
  String justification=context.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put(""justification"",justification);
  }
  String bold=context.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put(""bold"",bold);
  }
  String italic=context.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put(""italic"",italic);
  }
  String subscript=context.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put(""subscript"",subscript);
  }
  String superscript=context.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put(""superscript"",superscript);
  }
  String underline=context.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put(""underline"",underline);
  }
  String strikethrough=context.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put(""strikethrough"",strikethrough);
  }
  return declaredProperties;
}
","protected FastMap<String> readDeclinedProProperty(WidgetCreatorContext context){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=context.readWidgetProperty(""backColor"");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put(""backColor"",backColor);
  }
  String fontName=context.readWidgetProperty(""fontName"");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put(""fontName"",fontName);
  }
  String fontSize=context.readWidgetProperty(""fontSize"");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put(""fontSize"",fontSize);
  }
  String foreColor=context.readWidgetProperty(""foreColor"");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put(""foreColor"",foreColor);
  }
  String justification=context.readWidgetProperty(""justification"");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put(""justification"",justification);
  }
  String bold=context.readWidgetProperty(""bold"");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put(""bold"",bold);
  }
  String italic=context.readWidgetProperty(""italic"");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put(""italic"",italic);
  }
  String subscript=context.readWidgetProperty(""subscript"");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put(""subscript"",subscript);
  }
  String superscript=context.readWidgetProperty(""superscript"");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put(""superscript"",superscript);
  }
  String underline=context.readWidgetProperty(""underline"");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put(""underline"",underline);
  }
  String strikethrough=context.readWidgetProperty(""strikethrough"");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put(""strikethrough"",strikethrough);
  }
  return declaredProperties;
}
",414,14,"readDeclaredProperties:readDeclinedProProperty,",13,0.0855187972386678,Beam
2340,,,103,15,,390,2.6958968877792358,0
2341,,,28,3,,262,1.3106779297192892,0
2342,,,135,7,,574,3.168417727947235,0
2343,,,91,6,,930,3.179821797211965,0
2344,"public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(pem);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}
","public RSAPublicKey parsePEMPublicKey(String poem) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(poem);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}
",108,9,"pem:poem,",16,0.2698437849680583,Beam
2345,,,184,11,,898,5.149622408548991,0
2346,,,41,4,,564,3.2974780797958374,0
2347,"private static void removeReferenceToConnection(final HttpConnectionWithReference connection){
synchronized (REFERENCE_TO_CONNECTION_SOURCE) {
    REFERENCE_TO_CONNECTION_SOURCE.remove(connection.reference);
  }
}
","private static void removeConnectiontoReference(final HttpConnectionWithReference communication){
synchronized (REFERENCE_TO_CONNECTION_SOURCE) {
    REFERENCE_TO_CONNECTION_SOURCE.remove(communication.reference);
  }
}
",26,3,"connection:communication,removeReferenceToConnection:removeConnectiontoReference,",64,0.3232871135075887,Beam
2348,"private String dateToString(Date input){
  if (input == null) {
    return null;
  }
 else {
    return input.toString();
  }
}
","private String dateFormatNumber(Date index){
  if (index == null) {
    return null;
  }
 else {
    return index.toString();
  }
}
",30,2,"input:index,dateToString:dateFormatNumber,",62,0.27879210710525515,Beam
2351,"private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pagenum,bbox,rotation,cache);
}
","private PDFPage findPages(int pavenumber,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,""MediaBox"");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,""CropBox"");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,""Rotate"");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pavenumber,bbox,rotation,cache);
}
",133,11,"pagenum:pavenumber,createPage:findPages,",77,0.3627477169036865,Beam
2352,,,174,12,,860,4.99554694890976,0
2353,,,32,5,,125,0.4824681480725606,0
2354,"public void addItem(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}
","public void insertElement(Artist artist,int position){
  if (artist == null)   throw new NullPointerException(""The item cannot be null"");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException(""The position must be between 0 and lastIndex + 1"");
  artists.add(position,artist);
  notifyItemInserted(position);
}
",60,4,"addItem:insertElement,",6,0.02613652547200521,Beam
2355,"private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){
  drawPaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);
  drawPaint.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPaint.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPaint);
  drawPaint.setShader(null);
}
","private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPiece){
  drawPiece.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPiece.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPiece);
  drawPiece.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPiece.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPiece);
  drawPiece.setShader(null);
}
",230,15,"drawPaint:drawPiece,",174,1.1184046030044557,Beam
2356,,,29,4,,648,3.018779734770457,0
2357,,,112,6,,534,4.640371493498484,0
2358,"public javax2.sip.address.TelURL createTelURL(String uri) throws ParseException {
  if (uri == null)   throw new NullPointerException(""null url"");
  String telUrl=""tel:"" + uri;
  try {
    StringMsgParser smp=new StringMsgParser();
    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);
    return (TelURL)timp;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}
","public javax2.sip.address.TelURL createTeleText(String gi) throws ParseException {
  if (gi == null)   throw new NullPointerException(""null url"");
  String telUrl=""tel:"" + gi;
  try {
    StringMsgParser smp=new StringMsgParser();
    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);
    return (TelURL)timp;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}
",87,5,"createTelURL:createTeleText,uri:gi,",286,1.486389935016632,Beam
2359,,,293,19,,958,5.59468932946523,0
2360,"public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}
","public static String encodeFromString(String plain,String charsets) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charsets));
}
",28,3,"charset:charsets,",6,0.05214292605717977,Beam
2361,"public EtagCache resetStats(){
  hits.set(0);
  misses.set(0);
  return this;
}
","public EtagCache resetStatistics(){
  hits.set(0);
  misses.set(0);
  return this;
}
",24,3,"resetStats:resetStatistics,",3,0.011236166954040528,Beam
2362,"public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.startDocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.startDocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
","public void opendocument(XMLLocator locator,String encoding,NamespaceContext namespacePath,Augmentations augs) throws XNIException {
  fNamespaceContext=namespacePath;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.opendocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.opendocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}
",107,9,"startDocument:opendocument,namespaceContext:namespacePath,",224,1.3738664150238038,Beam
2363,,,65,4,,250,1.3286213199297587,0
2364,,,24,3,,429,2.5493547161420187,0
2365,,,58,4,,185,0.9674656232198079,0
2366,"public void execute() throws IOException {
  String key=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}
","public void command() throws IOException {
  String key=""mqtt-"" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}
",44,3,"execute:command,",14,0.06834271748860678,Beam
2367,,,25,2,,254,1.2158397754033408,0
2368,"private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}
","private void addFirst(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.addFirst(x);
  }
}
",30,4,"insertBefore:addFirst,",76,0.31998610893885293,Beam
2369,"private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){
  int max=original.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}
","private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> existing,int source){
  int max=existing.size();
  Vector<SnmpVarBind> result=new Vector<>(max - source);
  int i=source;
  for (Enumeration<SnmpVarBind> e=existing.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}
",110,8,"original:existing,limit:source,",240,1.2858516335487367,Beam
2372,"private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}
","private static void transform(final StringBuilder buffer,final ByteSequence slice,final boolean trim,final boolean foldCase){
  final String value=slice.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}
",149,9,"sequence:slice,map:transform,",214,1.6303581555684408,Beam
2373,,,173,8,,435,2.3526012182235716,0
2374,,,31,3,,286,1.4397808035214743,0
2375,"public byte[] serializeToBuffer(Object o) throws IOException {
  ByteArrayOutputStream bufOut=new ByteArrayOutputStream();
  try {
    serialize(bufOut,o);
    bufOut.flush();
    return bufOut.toByteArray();
  }
  finally {
    bufOut.close();
  }
}
","public byte[] serializeToBuffer(Object y) throws IOException {
  ByteArrayOutputStream bufOut=new ByteArrayOutputStream();
  try {
    serialize(bufOut,y);
    bufOut.flush();
    return bufOut.toByteArray();
  }
  finally {
    bufOut.close();
  }
}
",53,3,"o:y,",44,0.2006378928820292,Beam
2377,"private int keyToLevel(String key){
  String[] token=key.split(""/"");
  return (token.length - 1);
}
","private int Key2level(String key){
  String[] token=key.split(""/"");
  return (token.length - 1);
}
",30,3,"keyToLevel:Key2level,",20,0.08223735491434733,Beam
2378,,,41,3,,213,1.1472317576408386,0
2379,"public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (create(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}
","public static ServiceConfiguration close(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (close(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}
",62,3,"create:close,",58,0.28234604994455975,Beam
2380,,,21,3,,273,1.5305458386739095,0
2381,,,130,11,,204,1.220989433924357,0
2382,"private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}
","private boolean canContain(ElementContainmentInfo start,ElementContainmentInfo top,int topIndex){
  int childTypes=start.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}
",113,10,"child:start,",83,0.7867291927337646,Beam
2383,"public synchronized void show(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.show();
  mKeyguardView.requestFocus();
}
","public synchronized void play(Bundle options){
  if (DEBUG)   Log.d(TAG,""show(); mKeyguardView=="" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,""show:setSystemUiVisibility("" + Integer.toHexString(visFlags) + "")"");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.play();
  mKeyguardView.requestFocus();
}
",113,9,"show:play,",17,0.10828580061594645,Beam
2384,"public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
","public static void addConnectionCollection(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}
",21,2,"removeConnectionList:addConnectionCollection,",10,0.04881801207860311,Beam
2385,,,445,15,,776,5.596787269910177,0
2386,,,57,5,,165,0.8447623213132223,0
2387,"protected void markUsed(Entry entry){
  entry.lastUsed=System.nanoTime();
}
","protected void MarkFound(Entry reader){
  reader.lastUsed=System.nanoTime();
}
",19,2,"markUsed:MarkFound,entry:reader,",46,0.20914019346237184,Beam
2388,"private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}
","private static double nd(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}
",58,4,"norm:nd,",58,0.5090458989143372,Beam
2389,,,25,4,,344,2.3295632441838583,0
2390,"public BusMovement(BusMovement proto){
  super(proto);
  this.controlSystem=proto.controlSystem;
  this.id=nextID++;
  controlSystem.registerBus(this);
  startMode=true;
}
","public busMoveing(busMoveing probe){
  super(probe);
  this.controlSystem=probe.controlSystem;
  this.id=nextID++;
  controlSystem.registerBus(this);
  startMode=true;
}
",39,5,"BusMovement:busMoveing,proto:probe,",80,0.43014930884043373,Beam
2391,"private long buildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}
","private long buildLen(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}
",433,5,"buildSize:buildLen,",4,0.0358643372853597,Beam
2392,"public void flush() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicID_);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.flush();
}
","public void sync() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicID_);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.sync();
}
",60,4,"flush:sync,",4,0.02854551076889038,Beam
2393,,,39,6,,1138,5.258068557580312,0
2394,,,105,4,,255,1.3477092782656352,0
2395,,,40,3,,115,0.4584608793258667,0
2397,,,166,12,,478,2.4403621633847554,0
2398,,,53,2,,111,0.6256847659746806,0
2399,,,145,9,,1413,8.66172225077947,0
2400,"public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
","public void showDroidsafeTextMarkers(IEditorPart openedEditor,String cacheName){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(cacheName)) {
      if (fClassesNeedUpdate.contains(cacheName)) {
        ClassMarkerProcessor classProcessor=get(cacheName);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(cacheName);
      }
    }
 else {
      fProcessedClasses.add(cacheName);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(cacheName);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(cacheName);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(cacheName);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}
",180,12,"className:cacheName,",49,0.3892996788024902,Beam
2401,,,43,5,,646,4.433209757010142,0
2402,,,24,2,,204,1.3043468316396079,0
2403,,,164,6,,297,2.5730913639068604,0
2404,"public void mouseClicked(MouseEvent e){
  if (e.getClickCount() > 1) {
    System.gc();
  }
}
","public void mouseDownED(MouseEvent fe){
  if (fe.getClickCount() > 1) {
    System.gc();
  }
}
",27,2,"e:fe,mouseClicked:mouseDownED,",91,0.559184976418813,Beam
2405,"public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pm.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
","public static Subject createAMIndentitySource(PolicyManager pc,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pc.getSubjectTypeManager();
  Subject subject=mgr.getSubject(""AMIdentitySubject"");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}
",69,6,"createAMIdentitySubject:createAMIndentitySource,pm:pc,",166,0.7313365181287129,Beam
2407,"public static String inflate(String name){
  return inflate(name,gPrefix);
}
","public static String infat(String name){
  return infat(name,gPrefix);
}
",18,3,"inflate:infat,",5,0.02930915355682373,Beam
2409,"protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}
","protected final StringBuilder let(StringBuilder sb,final Object... properties){
  for (  Object string : properties)   sb.append(string);
  return sb;
}
",32,4,"objects:properties,write:let,",114,0.5918026765187582,Beam
2410,,,17,3,,159,0.6416918118794759,0
2411,"public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){
  iMinCharNGram=iMinChar;
  iMaxCharNGram=iMaxChar;
  iMinWordNGram=iMinWord;
  iMaxWordNGram=iMaxWord;
  iWordDist=iWordWindow;
  iCharDist=iCharWindow;
  DistroDocs=new TreeMap<Integer,DistributionDocument>();
  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();
  StringBuffer sb=new StringBuffer();
  Iterator iTexts=FileNames.iterator();
  while (iTexts.hasNext()) {
    String sFile=(String)iTexts.next();
    try {
      BufferedReader bf=new BufferedReader(new FileReader(sFile));
      String sTmp;
      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);
      bf.close();
    }
 catch (    FileNotFoundException ex) {
      ex.printStackTrace(System.err);
    }
catch (    IOException ex) {
      ex.printStackTrace(System.err);
    }
    sb.append((char)0);
  }
  FullTextDataString=sb.toString();
  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {
    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));
  }
  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {
    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));
  }
}
","public grammaticalityestimateating(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int null,int iWordWindow){
  iMinCharNGram=iMinChar;
  iMaxCharNGram=iMaxChar;
  iMinWordNGram=iMinWord;
  iMaxWordNGram=null;
  iWordDist=iWordWindow;
  iCharDist=iCharWindow;
  DistroDocs=new TreeMap<Integer,DistributionDocument>();
  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();
  StringBuffer sb=new StringBuffer();
  Iterator iTexts=FileNames.iterator();
  while (iTexts.hasNext()) {
    String sFile=(String)iTexts.next();
    try {
      BufferedReader bf=new BufferedReader(new FileReader(sFile));
      String sTmp;
      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);
      bf.close();
    }
 catch (    FileNotFoundException ex) {
      ex.printStackTrace(System.err);
    }
catch (    IOException ex) {
      ex.printStackTrace(System.err);
    }
    sb.append((char)0);
  }
  FullTextDataString=sb.toString();
  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {
    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));
  }
  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {
    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));
  }
}
",271,24,"grammaticalityEstimator:grammaticalityestimateating,iMaxWord:null,",1027,6.80408437649409,Beam
2412,,,105,7,,748,3.167007048924764,0
2413,"private void resolveProtocols(ClassLoader loader){
  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader);
  loadProtocolManagerFactories(serviceLoader);
}
","private void resolveProteces(ClassLoader loader){
  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader);
  loadProtocolManagerFactories(serviceLoader);
}
",31,3,"resolveProtocols:resolveProteces,",50,0.25159231821695965,Beam
2414,"public static double normalPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}
","public static double normalPP(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}
",76,5,"normalPDF:normalPP,",3,0.01287073294321696,Beam
2415,,,242,18,,2887,19.09020450512568,0
2416,,,87,6,,279,2.0928801774978636,0
2417,,,65,5,,286,1.390742254257202,0
2418,"public void testBytesAsSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}
","public void assertBytesToSource() throws Exception {
  String JSON=""[ 1, 2, 3, 4 ]"";
  byte[] b=JSON.getBytes(""UTF-8"");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}
",227,8,"testBytesAsSource:assertBytesToSource,",6,0.05266625086466471,Beam
2419,,,114,9,,239,1.2738319436709087,0
2420,"public static Operation createOperationToUpdateOrCreateNetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){
  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);
  Operation networkInterfaceOperation=null;
  if (existingInterfaceLink == null) {
    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);
  }
 else {
    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);
  }
  return networkInterfaceOperation;
}
","public static Operation createOperationToUpdateOrCreateNetworkService(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){
  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);
  Operation networkInterfaceOperation=null;
  if (existingInterfaceLink == null) {
    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);
  }
 else {
    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);
  }
  return networkInterfaceOperation;
}
",78,8,"createOperationToUpdateOrCreateNetworkInterface:createOperationToUpdateOrCreateNetworkService,",133,0.8232722401618957,Beam
2421,,,12,3,,444,2.6219221512476603,0
2422,"public Perspective createUserPerspective(final String name,final boolean show){
  Perspective perspective=model.addPerspective(name,true);
  perspective.store(context);
  if (show) {
    showPerspective(name);
  }
  return perspective;
}
","public Perspective createUserPerpective(final String name,final boolean view){
  Perspective perspective=model.addPerspective(name,true);
  perspective.store(context);
  if (view) {
    showPerspective(name);
  }
  return perspective;
}
",47,6,"createUserPerspective:createUserPerpective,show:view,",123,0.5810796936353048,Beam
2423,"public ModifiableSolrParams add(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}
","public ModifiableSolrParams set(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}
",167,6,"add:set,",3,0.022429720560709635,Beam
2424,"public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}
","public static SortedSet<Integer> fixLocation(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}
",128,8,"adjustPosition:fixLocation,",9,0.055816376209259035,Beam
2425,"protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}
","protected static byte[] hkdfExpland(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}
",83,7,"hkdfExpand:hkdfExpland,",4,0.041925756136576335,Beam
2426,,,65,8,,1026,6.022061077753703,0
2428,"private synchronized void postEvent(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}
","private synchronized void PostHandler(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}
",21,3,"postEvent:PostHandler,",30,0.11922281980514526,Beam
2429,"long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}
","long Cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}
",186,12,"cleanup:Cleanup,",5,0.027820825576782227,Beam
2430,"default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
","default Document setArray(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}
",64,3,"putAll:setArray,",10,0.04019028345743815,Beam
2431,"MutableBigInteger(MutableBigInteger val){
  intLen=val.intLen;
  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);
}
","MutableSmallIterator(MutableSmallIterator val){
  intLen=val.intLen;
  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);
}
",34,4,"MutableBigInteger:MutableSmallIterator,",21,0.09795943895975749,Beam
2432,"protected void drawCenterText(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}
","protected void fill(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}
",422,21,"drawCenterText:fill,",58,0.354327917098999,Beam
2433,,,17,3,,273,1.1162606596946716,0
2434,"private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}
","private static void resolveNewCompression(NewExpression objSubjectExpression,HashSet<String> objMethodsSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objMethodsSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objMethodsSet.add(objClassRef.getFQN());
}
",63,4,"resolveNewExpression:resolveNewCompression,objTypesSet:objMethodsSet,",87,0.5361551165580749,Beam
2435,"private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}
","private void heapifyUp(int twopos,Comparable<Object> req){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (req.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=req;
}
",81,6,"cur:req,",3,0.03398059606552124,Beam
2436,,,135,5,,263,1.2973116874694823,0
2437,,,17,1,,55,0.18168712854385377,0
2438,"public static int countMatches(String string,char c){
  int n=0;
  for (  char tc : string.toCharArray()) {
    if (c == tc)     n++;
  }
  return n;
}
","public static int countmatatching(String name,char c){
  int n=0;
  for (  char tc : name.toCharArray()) {
    if (c == tc)     n++;
  }
  return n;
}
",43,5,"string:name,countMatches:countmatatching,",338,2.095203097661336,Beam
2439,"private boolean checkMatchIp(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}
","private boolean checkmatchIIP(Map<String,Object> rows){
  boolean checkEfficient=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith(""0x"")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     checkEfficient=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (checkEfficient == false))   return false;
  return true;
}
",158,5,"checkMatchIp:checkmatchIIP,matchEther:checkEfficient,",283,2.3722084482510883,Beam
2440,"@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}
","@HLEFunction(nid=0x7ED29E40,version=150) public int SceRtcAddTock(TPointer timeAddr,TPointer64 ticksAttrs){
  long ticks=ticksAttrs.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}
",54,6,"sceRtcSetTick:SceRtcAddTock,ticksAddr:ticksAttrs,",105,0.46217026313145954,Beam
2441,,,230,8,,2101,14.711455766359965,0
2442,,,20,2,,217,1.0323983470598856,0
2443,"public String encode(){
  StringBuffer sb=new StringBuffer();
  encode(sb);
  return sb.toString();
}
","public String Enoder(){
  StringBuffer sb=new StringBuffer();
  Enoder(sb);
  return sb.toString();
}
",27,2,"encode:Enoder,",6,0.02529188394546509,Beam
2444,"public void actionPerformed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
","public void eventPerformed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" displaying palette"");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging(""layer"")) {
      Debug.output(getName() + "" hiding palette"");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}
",111,7,"actionPerformed:eventPerformed,",3,0.02349141041437785,Beam
2445,"private static byte[] encode(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}
","private static byte[] encode(double laton,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(laton),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}
",63,4,"latitude:laton,",35,0.2144353230794271,Beam
2446,"protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}
","protected final boolean readInternalQuocating() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledExecmitter != null)     myScheduledExecmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledExecmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}
",102,11,"readAvailableBlocking:readInternalQuocating,myScheduledSubmitter:myScheduledExecmitter,",28,0.21928608814875286,Beam
2447,,,141,6,,643,4.019012037913004,0
2448,,,66,3,,359,2.6807377139727273,0
2449,"final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
","final public void print(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}
",100,7,"println:print,",3,0.019769954681396484,Beam
2450,,,34,4,,183,1.0345955848693849,0
2452,"protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}
","protected static int[] unsect(@Nullable int[] arr,int... o){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=o;
 else {
    newArr=Arrays.copyOf(arr,arr.length + o.length);
    System.arraycopy(o,0,newArr,arr.length,o.length);
  }
  return newArr;
}
",83,4,"concat:unsect,obj:o,",123,0.719710103670756,Beam
2453,"public boolean startsWith(CharSeq prefix){
  return str.startsWith(prefix.str);
}
","public boolean stendswith(CharSeq prefix){
  return str.stendswith(prefix.str);
}
",19,3,"startsWith:stendswith,",43,0.21691744724909465,Beam
2454,,,288,12,,946,5.821570626894633,0
2455,"public static void threadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
","public static void ThreadWork(long milus){
  try {
    Thread.sleep(milus);
  }
 catch (  InterruptedException ex) {
    Log.e(""Exception"",StringUtils.exceptionStackTraceToString(ex));
  }
}
",41,3,"millis:milus,threadSleep:ThreadWork,",61,0.25554925203323364,Beam
2456,"@Override public void keyPressed(KeyEvent e){
synchronized (keyLock) {
    keysDown.add(e.getKeyCode());
  }
}
","@Override public void KeyPressed(KeyEvent e){
synchronized (keyLock) {
    keysDown.add(e.getKeyCode());
  }
}
",28,4,"keyPressed:KeyPressed,",18,0.08116471767425537,Beam
2457,"public void rollback(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
","public void RollBack(Throwable t){
  log.debug(""  ROLLBACK: deleting "" + tempFile + "" due to ""+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}
",48,7,"rollback:RollBack,",7,0.021261465549468995,Beam
2458,,,49,4,,579,2.9772756059964496,0
2460,"int maxLength(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}
","int MaxWidth(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}
",80,7,"maxLength:MaxWidth,",13,0.047926557064056394,Beam
2461,"public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}
","public static boolean compatResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compatResults(controlClient,cloudClient,null,null);
}
",29,3,"compareResults:compatResults,",46,0.2864209532737732,Beam
2462,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
","@Override public boolean onPremissionFocus(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}
",29,3,"onPreferenceClick:onPremissionFocus,",18,0.08375190893809001,Beam
2463,"private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
","private synchronized void persistObjectAndNotifChanged(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}
",51,4,"persistProfileAndNotifyChange:persistObjectAndNotifChanged,",7,0.04011158148447672,Beam
2465,"int convertMouse(MouseEvent event){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=event.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=event.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
","int invertedmouse(MouseEvent error){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=error.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=error.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}
",164,19,"convertMouse:invertedmouse,event:error,",184,1.382452698548635,Beam
2466,"public double nextGaussian(){
  if (mHaveNextNextGaussian) {
    mHaveNextNextGaussian=false;
    return mNextNextGaussian;
  }
 else {
    double v1, v2, s;
    do {
      v1=2 * nextDouble() - 1;
      v2=2 * nextDouble() - 1;
      s=v1 * v1 + v2 * v2;
    }
 while (s >= 1 || s == 0);
    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);
    mNextNextGaussian=v2 * multiplier;
    mHaveNextNextGaussian=true;
    return v1 * multiplier;
  }
}
","public double nextBluss(){
  if (mHaveNextNextGaussian) {
    mHaveNextNextGaussian=false;
    return mNextNextGaussian;
  }
 else {
    double v1, v2, s;
    do {
      v1=2 * nextDouble() - 1;
      v2=2 * nextDouble() - 1;
      s=v1 * v1 + v2 * v2;
    }
 while (s >= 1 || s == 0);
    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);
    mNextNextGaussian=v2 * multiplier;
    mHaveNextNextGaussian=true;
    return v1 * multiplier;
  }
}
",110,7,"nextGaussian:nextBluss,",12,0.06320634285608927,Beam
2467,,,507,21,,497,4.818438792228699,0
2468,"private static StsdData parseStsd(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}
","private static StsdData extract(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,""childAtomSize should be positive"");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}
",455,13,"parseStsd:extract,",179,1.2352988799413045,Beam
2469,"public void resetTeleMissileAttacks(){
  pendingTeleMissileAttacks.removeAllElements();
}
","public void resetTeleMissileArtacks(){
  pendingTeleMissileAttacks.removeAllElements();
}
",13,2,"resetTeleMissileAttacks:resetTeleMissileArtacks,",3,0.025487625598907472,Beam
2470,,,64,8,,1716,7.85064225991567,0
2471,,,30,5,,221,0.9355313658714295,0
2472,,,23,3,,82,0.505178693930308,0
2473,"private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
","private void validateAny(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}
",43,3,"validateWill:validateAny,",29,0.12958147923151653,Beam
2474,"private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  listeners.forEach(null);
}
","private void walkParseData(List<SwiftBaseListener> listeners,TopLevelContext tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  listeners.forEach(null);
}
",30,3,"walkParseTree:walkParseData,",60,0.26034810145696,Beam
2475,"public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
","public void unit(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,""Movie Player"");
  mThread.start();
}
",30,4,"execute:unit,",12,0.044045790036519365,Beam
2476,"protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
","protected void notonPowerchange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange(""KnownState"",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}
",43,4,"notifyStateChange:notonPowerchange,",42,0.17103771766026815,Beam
2477,"public Channel chan(final String topic,final JsonNode payload){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{topic,payload});
  final Channel channel=new Channel(topic,payload,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}
","public Channel exec(final String topic,final JsonNode apppath){
  LOG.log(Level.FINE,""chan: {0}, {1}"",new Object[]{topic,apppath});
  final Channel channel=new Channel(topic,apppath,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}
",67,5,"payload:apppath,chan:exec,",130,0.5682840545972189,Beam
2478,"public String globalInfo(){
  return ""A filter that removes a range of"" + "" attributes from the dataset. Will "" + ""re-order the remaining attributes ""+ ""if invert matching sense is turned ""+ ""on and the attribute column indices ""+ ""are not specified in ascending order."";
}
","public String generalInit(){
  return ""A filter that removes a range of"" + "" attributes from the dataset. Will "" + ""re-order the remaining attributes ""+ ""if invert matching sense is turned ""+ ""on and the attribute column indices ""+ ""are not specified in ascending order."";
}
",20,1,"globalInfo:generalInit,",9,0.03776620626449585,Beam
2479,"@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
","@SuppressWarnings({""unchecked"",""rawtypes""}) public static LineByLineFileInputOperator restoreCheckPoints(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}
",70,6,"restoreCheckPoint:restoreCheckPoints,",38,0.17822189728418986,Beam
2480,"public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}
","public void join(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=join(root,strkey,0,val);
}
",89,8,"insert:join,",53,0.23459813594818116,Beam
2481,,,89,5,,304,1.3030913591384887,0
2482,"private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}
","private static boolean useCompactCSSSize(Map<String,Object> args,int comatibilityDirectory){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (comatibilityDirectory < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}
",72,5,"useCompactFontFormat:useCompactCSSSize,compatibilityVersion:comatibilityDirectory,",135,0.8113571246465047,Beam
2483,"@Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public void sync(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException(""Input stream cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  sync(inputSource);
}
",77,4,"parse:sync,",79,0.5983483632405598,Beam
2485,"public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
","public void testIter() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}
",51,3,"testIterator:testIter,",4,0.012325497468312581,Beam
2486,,,139,4,,693,4.506969547271728,0
2487,"static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}
","static float rotateY(float Px,float pY,float cX,float cY,float angleInDewree){
  double angle=Math.toRadians(angleInDewree);
  return (float)(Math.sin(angle) * (Px - cX) + Math.cos(angle) * (pY - cY) + cY);
}
",65,7,"pX:Px,angleInDegrees:angleInDewree,",259,1.7189136028289795,Beam
2488,,,139,7,,878,5.457789977391561,0
2489,"public void shutdown(){
  scheduledExecutorService.shutdownNow();
}
","public void downDOWN(){
  scheduledExecutorService.shutdownNow();
}
",13,2,"shutdown:downDOWN,",10,0.03138896226882935,Beam
2490,"protected AbstractRegexNPAnnotator(String pattern,boolean caseSensitive,double confidence){
  this(Pattern.compile(pattern,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE),0,confidence);
}
","protected AbstractRegexPatternAnnotate(String pattern,boolean caseSensitive,double quality){
  this(Pattern.compile(pattern,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE),0,quality);
}
",36,4,"AbstractRegexNPAnnotator:AbstractRegexPatternAnnotate,confidence:quality,",133,0.66307239929835,Beam
2491,,,40,4,,304,1.4152542193730673,0
2492,,,21,3,,215,1.2691303849220277,0
2493,,,91,5,,313,1.8111233393351236,0
2494,,,44,2,,173,0.9644620974858602,0
2495,"public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}
","public static final void showGUICume(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}
",129,8,"showGUIMessage:showGUICume,",76,0.3926368514696757,Beam
2496,,,161,9,,623,4.439953327178955,0
2497,"protected static String shortenClassname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}
","protected static String shortenPortstring(String anc,char c){
  final int lastdot=anc.lastIndexOf(c);
  if (lastdot >= 0) {
    anc=anc.substring(lastdot + 1);
  }
  return anc;
}
",46,4,"shortenClassname:shortenPortstring,nam:anc,",190,1.3815139492352804,Beam
2498,"public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
","public ResourceListParser p() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.p(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException(""Failed to parse input source!"",e);
  }
}
",62,5,"parse:p,",20,0.10294299125671387,Beam
2499,,,142,4,,205,1.1555795232454935,0
2500,"protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(x,y,r,h4);
    g.drawLine(x,y + h2,x,y + h - h2);
    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);
    g.drawArc(x,y + h - h4,r,h4,0,-180);
  }
}
","protected void render(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(x,y,r,h4);
    g.drawLine(x,y + h2,x,y + h - h2);
    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);
    g.drawArc(x,y + h - h4,r,h4,0,-180);
  }
}
",343,14,"drawCylinder:render,",268,1.314369793732961,Beam
2501,,,25,4,,304,1.7801817456881206,0
2502,,,69,4,,235,2.137853240966797,0
2503,"private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
","private static MappingObject PointFrom(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}
",34,3,"ObjectAt:PointFrom,",40,0.21115781466166178,Beam
2504,,,48,7,,862,4.037249354521434,0
2505,,,26,2,,66,0.35938175121943156,0
2506,,,169,5,,204,1.7673150658607484,0
2507,,,111,5,,284,2.3944554527600608,0
2508,"public static void delete(File fileOrFolder) throws IOException {
  if (fileOrFolder != null)   delete(fileOrFolder.toPath());
}
","public static void delete(File fileAndZip) throws IOException {
  if (fileAndZip != null)   delete(fileAndZip.toPath());
}
",27,2,"fileOrFolder:fileAndZip,",18,0.07652917702992758,Beam
2509,,,30,7,,676,3.6055264552434285,0
2510,,,22,2,,264,1.5295111934343975,0
2511,"ConverterSet add(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}
","ConverterSet update(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}
",230,10,"add:update,",7,0.04872398376464844,Beam
2512,,,115,5,,374,2.9099292039871214,0
2513,"private File findFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
","private File FindFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException(""Missing file: "" + file);
}
",80,5,"findFile:FindFile,",7,0.028764498233795167,Beam
2514,,,63,6,,291,1.1911922017733256,0
2515,"private void runTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
","private void RunTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}
",36,2,"runTimeoutTask:RunTimeoutTask,",14,0.05750292936960856,Beam
2516,"public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.drawImage(img,xform,obs);
}
","public boolean drawPicture(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.drawPicture(img,xform,obs);
}
",27,5,"drawImage:drawPicture,",3,0.021016343434651693,Beam
2517,"public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}
","public static AnnotationBinding[] addDefaultSignatories(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}
",446,7,"addStandardAnnotations:addDefaultSignatories,",115,0.7993566950162252,Beam
2518,"private BufferedImage toBufferedImage(final Image image){
  if (image instanceof BufferedImage) {
    return (BufferedImage)image;
  }
  if (image instanceof VolatileImage) {
    VolatileImage volatileImage=(VolatileImage)image;
    return volatileImage.getSnapshot();
  }
  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice();
  GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration();
  BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null));
  Graphics2D g=bufferedImage.createGraphics();
  g.drawImage(image,0,0,null);
  g.dispose();
  return bufferedImage;
}
","private BufferedImage tobufferedPicture(final Image image){
  if (image instanceof BufferedImage) {
    return (BufferedImage)image;
  }
  if (image instanceof VolatileImage) {
    VolatileImage volatileImage=(VolatileImage)image;
    return volatileImage.getSnapshot();
  }
  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice();
  GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration();
  BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null));
  Graphics2D g=bufferedImage.createGraphics();
  g.drawImage(image,0,0,null);
  g.dispose();
  return bufferedImage;
}
",127,8,"toBufferedImage:tobufferedPicture,",50,0.24967330296834309,Beam
2519,"public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
","public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean recversible,ValCk... books){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,recversible,books);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}
",96,10,"remediate:recversible,checks:books,",161,1.103346792856852,Beam
2520,"public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
","public static void exec(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}
",70,5,"init:exec,",22,0.10683310429255168,Beam
2521,"public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
","public void save() throws SAMLException {
  try {
    keyProvider.save();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}
",90,3,"store:save,",3,0.029107487201690672,Beam
2522,"static public String normalizeToEncoding(String origString_,Charset encoding_){
  String normString=origString_;
  CharsetEncoder encoder=encoding_.newEncoder();
  if (!encoder.canEncode(origString_)) {
    final int length=origString_.length();
    char[] normSeq=new char[(origString_.length())];
    int charNum=0;
    for (int offset=0; offset < length; ) {
      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);
      Character replacedChar=replacement.getFirst();
      int codepoint=replacement.getSecond();
      if (null != replacedChar) {
        normSeq[charNum]=replacedChar;
        charNum++;
      }
      offset+=Character.charCount(codepoint);
    }
    normString=new String(normSeq);
  }
  return normString;
}
","static public String normalizeToCoder(String origString_,Charset encoding_){
  String normString=origString_;
  CharsetEncoder encoder=encoding_.newEncoder();
  if (!encoder.canEncode(origString_)) {
    final int length=origString_.length();
    char[] normSeq=new char[(origString_.length())];
    int charNum=0;
    for (int offset=0; offset < length; ) {
      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);
      Character replacedChar=replacement.getFirst();
      int codepoint=replacement.getSecond();
      if (null != replacedChar) {
        normSeq[charNum]=replacedChar;
        charNum++;
      }
      offset+=Character.charCount(codepoint);
    }
    normString=new String(normSeq);
  }
  return normString;
}
",158,12,"normalizeToEncoding:normalizeToCoder,",11,0.07057958046595256,Beam
2523,"static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
","static boolean ShowPullup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}
",60,2,"allowsPopup:ShowPullup,",11,0.052960058053334556,Beam
2524,"public void onEnterElementConsumed(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
","public void onEnterElementConsoved(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}
",52,10,"onEnterElementConsumed:onEnterElementConsoved,",37,0.18118348519007366,Beam
2525,,,81,2,,82,0.7609906911849975,0
2526,,,206,12,,1013,6.02385321855545,0
2527,,,34,3,,165,1.2587184230486552,0
2528,,,129,10,,476,2.438919405142466,0
2529,,,58,4,,142,0.8636183063189189,0
2530,,,154,7,,233,1.189130973815918,0
2531,,,77,9,,690,3.913733410835266,0
2532,,,448,25,,5054,31.191662391026814,0
2533,,,22,2,,157,0.9087460279464722,0
2534,"public boolean contains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}
","public boolean hains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}
",77,5,"contains:hains,",7,0.04242233832677205,Beam
2535,"public Vector rotateInDegree(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
","public Vector rotateInDdegment(double degree){
  return rotateInRadian(Math.toRadians(degree));
}
",20,2,"rotateInDegree:rotateInDdegment,",10,0.03938661813735962,Beam
2536,"protected void clearDataLists(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
","protected void clearFileLets(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}
",69,10,"clearDataLists:clearFileLets,",9,0.04523566166559855,Beam
2537,"public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}
","public iseDraw(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... artistState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.artistState=artistState[0];
  yoloView=new ImageView(artistState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}
",82,10,"SecretBlock:iseDraw,hitState:artistState,",534,3.170927913983663,Beam
2538,"private static void byte2hex(byte b,StringBuffer buf){
  int high=((b & 0xf0) >> 4);
  int low=(b & 0x0f);
  buf.append(HEX_DIGITS[high]);
  buf.append(HEX_DIGITS[low]);
}
","private static void byte2hex(byte a,StringBuffer buf){
  int high=((a & 0xf0) >> 4);
  int low=(a & 0x0f);
  buf.append(HEX_DIGITS[high]);
  buf.append(HEX_DIGITS[low]);
}
",56,6,"b:a,",4,0.03862497011820475,Beam
2540,"protected void drawConnectorCenters(Canvas c){
  List<Connection> connections=mBlock.getAllConnections();
  Paint paint=new Paint();
  paint.setStyle(Paint.Style.FILL);
  for (int i=0; i < connections.size(); i++) {
    Connection conn=connections.get(i);
    if (conn.inDragMode()) {
      if (conn.isConnected()) {
        paint.setColor(Color.RED);
      }
 else {
        paint.setColor(Color.MAGENTA);
      }
    }
 else {
      if (conn.isConnected()) {
        paint.setColor(Color.GREEN);
      }
 else {
        paint.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectionPosition.x+=mBlockViewSize.x;
    }
    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);
  }
}
","protected void drawConnectorCorner(Canvas c){
  List<Connection> connections=mBlock.getAllConnections();
  Paint paint=new Paint();
  paint.setStyle(Paint.Style.FILL);
  for (int i=0; i < connections.size(); i++) {
    Connection conn=connections.get(i);
    if (conn.inDragMode()) {
      if (conn.isConnected()) {
        paint.setColor(Color.RED);
      }
 else {
        paint.setColor(Color.MAGENTA);
      }
    }
 else {
      if (conn.isConnected()) {
        paint.setColor(Color.GREEN);
      }
 else {
        paint.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectionPosition.x+=mBlockViewSize.x;
    }
    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);
  }
}
",226,10,"drawConnectorCenters:drawConnectorCorner,",52,0.4071611364682515,Beam
2541,,,455,25,,1639,14.393495233853658,0
2544,,,29,3,,99,0.48826804558436077,0
2545,,,24,2,,342,2.155399505297343,0
2546,"public static double L_RankLoss(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}
","public static double L_Ranklowers(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}
",187,10,"L_RankLoss:L_Ranklowers,",82,1.325890068213145,Beam
2547,"public static void verifySetterMethods(Class<?> clazz,MappedField... fields){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}
","public static void verifySetFieldMembers(Class<?> clazz,MappedField... locks){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : locks) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod(""set"",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}
",170,8,"verifySetterMethods:verifySetFieldMembers,fields:locks,",231,2.097615818182627,Beam
2548,"private void applyTradingBonus(Player player){
  player.incrementTradescore();
}
","private void applyTradingBeta(Player player){
  player.incrementTradescore();
}
",15,2,"applyTradingBonus:applyTradingBeta,",5,0.024991472562154133,Beam
2549,"public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    log.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    log.info(""Writing data into "" + matsim4opusTempDirectory + FILE_NAME+ "" ..."");
    zoneWriter.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    log.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public UrbanSimZoneCSVWV3(String matsim4opusTempDirectory,String matsimOutputDirectory){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    model.info(""Initializing UrbanSimZoneCSVWriterV2 ..."");
    ZoneWrite=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    model.info(""Writing data into "" + matsim4opusTempDirectory + FILE_NAME+ "" ..."");
    ZoneWrite.write(Labels.ZONE_ID + "","" + Labels.ACCESSIBILITY_BY_FREESPEED+ "",""+ Labels.ACCESSIBILITY_BY_CAR+ "",""+ Labels.ACCESSIBILITY_BY_BIKE+ "",""+ Labels.ACCESSIBILITY_BY_WALK+ "",""+ Labels.ACCESSIBILITY_BY_PT);
    ZoneWrite.newLine();
    model.info(""... done!"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",122,7,"UrbanSimZoneCSVWriterV2:UrbanSimZoneCSVWV3,zoneWriter:ZoneWrite,log:model,",589,4.5115509668986,Beam
2550,,,49,4,,304,1.489546501636505,0
2551,,,39,2,,321,1.8842628439267477,0
2552,,,32,3,,253,1.1276442567507425,0
2553,,,145,13,,2367,12.664531807104746,0
2554,"public int read() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.read();
}
","public int load() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.load();
}
",33,2,"read:load,",3,0.02161442438761393,Beam
2555,"@Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,exec);
}
","@Override public CompletableFuture<Optional<T>> get(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,exec);
}
",33,3,"max:get,",41,0.16210851669311524,Beam
2556,"public static String replace(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}
","public static String replace(String cr,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < cr.length(); i++) {
    char ch=cr.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}
",86,7,"str:cr,",4,0.03365060091018677,Beam
2557,,,38,4,,124,0.7259800990422567,0
2558,"@SafeVarargs public final void add(T... newItems){
  add(Arrays.asList(newItems));
}
","@SafeVarargs public final void add(T... nextExamples){
  add(Arrays.asList(nextExamples));
}
",23,2,"newItems:nextExamples,",43,0.17650516827901205,Beam
2559,"private void writeAttr(String name,String val) throws IOException {
  writeAttr(name,val,true);
}
","private void writeAtr(String name,String data) throws IOException {
  writeAtr(name,data,true);
}
",23,3,"writeAttr:writeAtr,val:data,",92,0.34895103772481284,Beam
2560,"protected void load_raw_characters(StringBuilder sb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
sb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
sb.append((char)c);
}
}
","protected void load_raw_shortcharacter(StringBuilder wb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
wb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
wb.append((char)c);
}
}
",123,3,"load_raw_characters:load_raw_shortcharacter,sb:wb,",52,0.3274975776672363,Beam
2561,"public static ThreadDump create(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
","public static ThreadDump process(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}
",52,3,"create:process,",7,0.03673837582270304,Beam
2562,,,40,5,,1208,6.317556313673655,0
2563,"public static final String toBitString(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
","public static final String tobitArray(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}
",47,4,"toBitString:tobitArray,",12,0.0643459677696228,Beam
2564,,,45,4,,274,1.3573710203170777,0
2565,,,26,3,,266,1.8406097332636515,0
2566,"@Override public Void visitType(TypeElement e,Void p){
  scan(e.getTypeParameters(),p);
  checkCamelCase(e,true);
  super.visitType(e,p);
  return null;
}
","@Override public Void viewitorError(TypeElement e,Void php){
  scan(e.getTypeParameters(),php);
  checkCamelCase(e,true);
  super.viewitorError(e,php);
  return null;
}
",44,4,"visitType:viewitorError,p:php,",306,2.0800405740737915,Beam
2567,,,40,4,,527,5.553327743212382,0
2568,"public void skip(int count) throws IOException {
  int skipCount=Math.min(limit - position,count);
  while (true) {
    position+=skipCount;
    count-=skipCount;
    if (count == 0)     break;
    skipCount=Math.min(count,capacity);
    require(skipCount);
  }
}
","public void fill(int count) throws IOException {
  int skipCount=Math.min(limit - position,count);
  while (true) {
    position+=skipCount;
    count-=skipCount;
    if (count == 0)     break;
    skipCount=Math.min(count,capacity);
    require(skipCount);
  }
}
",63,6,"skip:fill,",49,0.3905341664950053,Beam
2569,"protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}
","protected void clearRect(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}
",488,10,"drawCloud:clearRect,",7,0.052972809473673506,Beam
2570,"public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}
","public static void copyPath(File class) throws AdeUsageException {
  if (!class.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + class.getPath());
  }
}
",36,3,"file:class,deleteFile:copyPath,",138,0.6042038440704346,Beam
2571,"public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
","public static boolean checkGSLfootline(String footpart){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footpart)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error(""Wrong footprint"");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error(""Error in extracted footprint: "" + e.getMessage());
    return false;
  }
  return true;
}
",105,7,"checkGMLFootprint:checkGSLfootline,footprint:footpart,",88,0.4047793745994568,Beam
2572,,,94,3,,87,0.36457345088322957,0
2573,"public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString(""NoLoadKeyStore.exception.message""),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return load(keyStoreFile,password,keyStoreType);
}
","public static KeyStore save(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString(""NoLoadKeyStore.exception.message""),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return save(keyStoreFile,password,keyStoreType);
}
",90,6,"load:save,",43,0.21367429494857787,Beam
2574,,,144,8,,867,5.417034204800924,0
2575,,,30,3,,105,0.36011180877685545,0
2576,"private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}
","private String insertProperties(String data,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    data=data.replace(entry.getKey(),entry.getValue());
  }
  return data;
}
",57,4,"template:data,",15,0.08235913912455241,Beam
2577,"public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}
","public DriverTask unexportVolumesFromInitiers(List<Initiator> initiators,List<StorageVolume> volumes){
  LOG.info(""Unexporting volumes from initiators"");
  DriverTask task=new DellSCDriverTask(""unexportVolumes"");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),""."") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format(""Unable to find volume %s"",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info(""Volume \'{}\' unexported from server \'{}\'"",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format(""Error unmapping volume %s: %s"",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format(""%s%n"",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}
",407,18,"unexportVolumesFromInitiators:unexportVolumesFromInitiers,",24,0.10923155943552652,Beam
2578,"public static Node serializableInstance(){
  return new GraphNode(""X"");
}
","public static Node serializerinstance(){
  return new GraphNode(""X"");
}
",15,1,"serializableInstance:serializerinstance,",11,0.05540881554285685,Beam
2579,"protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}
","protected read(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}
",558,14,"MapleQuestRequirement:read,",52,0.32320606311162314,Beam
2580,"public int addDir(File file){
  if (!file.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(file,"".class""));
  loadClass(file,names);
  return 1;
}
","public int addDir(File image){
  if (!image.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(image,"".class""));
  loadClass(image,names);
  return 1;
}
",48,3,"file:image,",10,0.06376444498697917,Beam
2581,"public TypeDeclaration canonicalize(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}
","public TypeDeclaration declare(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}
",229,11,"canonicalize:declare,",6,0.039650539557139076,Beam
2582,"public List<ValidationErrorMessage> validate(){
  errorMessageIds.clear();
  if (paymentProduct == null) {
    throw new NullPointerException(""Error validating PaymentRequest, please set a paymentProduct first."");
  }
  for (  PaymentProductField field : paymentProduct.getPaymentProductFields()) {
    if (!isFieldInAccountOnFileAndNotAltered(field)) {
      errorMessageIds.addAll(field.validateValue(getValue(field.getId())));
    }
  }
  return errorMessageIds;
}
","public List<ValidationErrorMessage> validate(){
  errorMessageRefx.clear();
  if (paidPoint == null) {
    throw new NullPointerException(""Error validating PaymentRequest, please set a paymentProduct first."");
  }
  for (  PaymentProductField field : paidPoint.getPaymentProductFields()) {
    if (!isFieldInAccountOnFileAndNotAltered(field)) {
      errorMessageRefx.addAll(field.validateValue(getValue(field.getId())));
    }
  }
  return errorMessageRefx;
}
",76,4,"errorMessageIds:errorMessageRefx,paymentProduct:paidPoint,",204,1.3876420458157857,Beam
2583,,,36,2,,125,0.6194424867630005,0
2584,,,41,2,,103,0.5535122076670329,0
2587,"private void updatePropertyToValue2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}
","private void updatePropertyWithVal2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}
",22,2,"updatePropertyToValue2:updatePropertyWithVal2,",12,0.04606716632843018,Beam
2588,"private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}
","private void trajectAsync(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        trajectAsync(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        trajectAsync(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      trajectAsync(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      trajectAsync(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        trajectAsync(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      trajectAsync(user,true,seen);
    }
  }
}
",399,17,"traverseInternal:trajectAsync,",82,0.7047826846440634,Beam
2589,"public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
","public boolean onEvent(ActionResult success){
synchronized (this) {
    String requestId=success.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}
",111,8,"result:success,",11,0.07090983788172404,Beam
2590,"public RE extractRE() throws InterruptedException {
  arden();
  if (!coeffs.isEmpty()) {
    throw new RuntimeException(""production still has free variables"");
  }
  return unionREs(terms);
}
","public RE extressRT() throws InterruptedException {
  arden();
  if (!coeffs.isEmpty()) {
    throw new RuntimeException(""production still has free variables"");
  }
  return unionREs(terms);
}
",37,3,"extractRE:extressRT,",21,0.1209860603014628,Beam
2591,"@Override public void startup() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelVoice + ""\'"");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
","@Override public void startups() throws Exception {
  Log.d(Mary.LOG,""Register UnitSelection voices:"");
  List<String> voiceNames=MaryProperties.getList(""unitselection.voices.list"");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,""Voice \'"" + unitSelVoice + ""\'"");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,""Loading of voice "" + voiceName + "" took ""+ newtime+ "" milliseconds"");
  }
  Log.i(Mary.LOG,""started."");
}
",127,6,"startup:startups,",5,0.019274449348449706,Beam
2592,,,33,5,,155,0.6322271982828777,0
2593,"@Override protected String extractKey(final String name){
  final String key=unescape(name.substring(0,name.length() - 4));
  return key.equals(""\\0"") ? null : key;
}
","@Override protected String extractPoint(final String type){
  final String key=unescape(type.substring(0,type.length() - 4));
  return key.equals(""\\0"") ? null : key;
}
",46,3,"extractKey:extractPoint,name:type,",58,0.3599961002667745,Beam
2594,"public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}
","public void insert(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf(""="");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="""";
    c.key="""";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.insert(name,c);
}
",129,9,"put:insert,",121,0.6594828287760417,Beam
2595,"public static X500Name x500PrincipalToX500Name(X500Principal principal){
  return X500Name.getInstance(KseX500NameStyle.INSTANCE,principal.getEncoded());
}
","public static X500Name x500PrincipalTox500String(X500Principal prical){
  return X500Name.getInstance(KseX500NameStyle.INSTANCE,prical.getEncoded());
}
",26,2,"x500PrincipalToX500Name:x500PrincipalTox500String,principal:prical,",106,0.8417142073313395,Beam
2596,"private void disableButtons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
","private void disableButtonButton(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}
",49,2,"disableButtons:disableButtonButton,",7,0.037881799538930255,Beam
2597,,,72,4,,410,2.1753378907839456,0
2598,"public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}
","public static final String trunk(final String url,final int type){
  if (url == null) {
    return url;
  }
  if (url.type() <= type) {
    return url;
  }
  return url.substring(0,type);
}
",52,3,"str:url,trunc:trunk,length:type,",325,1.9069407025973002,Beam
2599,"private void insertProsodySettings(Utterance utterance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("""")) {
      utterance.setString(att,val);
    }
  }
}
","private void insertProsodyAttributes(Utterance avoidance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("""")) {
      avoidance.setString(att,val);
    }
  }
}
",151,9,"insertProsodySettings:insertProsodyAttributes,utterance:avoidance,",109,0.7032166282335918,Beam
2600,"private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}
","private void kdChainCompare(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdChainCompare(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdChainCompare(middle + 1,right,next,query,res,iter,radius);
  }
}
",320,20,"kdRangeSearch:kdChainCompare,",243,3.28002089659373,Beam
2601,"public void removeListeners(){
  listeners.clear();
}
","public void removeLister(){
  listeners.clear();
}
",13,2,"removeListeners:removeLister,",18,0.06606034437815349,Beam
2603,"public Operation copyTo(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
","public Operation transferTo(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}
",65,7,"copyTo:transferTo,",5,0.02143794298171997,Beam
2604,"void checkAfterUnmarshalled(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(doubleVal,123.456);
}
","void assertAfterUnmarshaled(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(doubleVal,123.456);
}
",41,6,"checkAfterUnmarshalled:assertAfterUnmarshaled,",4,0.033197704950968424,Beam
2606,,,71,10,,1807,8.335022417704264,0
2607,,,44,3,,256,1.0819794853528342,0
2608,,,106,6,,1363,9.148409072558085,0
2609,"public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}
","public Cert(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,""signing certificate chain is not in valid chains."");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}
",220,11,"Config:Cert,",133,0.9407859961191813,Beam
2610,,,48,4,,330,2.017606592178345,0
2611,,,29,2,,239,1.1564515590667725,0
2612,,,91,7,,268,1.4797878940900167,0
2613,,,164,10,,397,2.25118221839269,0
2615,,,18,4,,806,5.211629231770833,0
2616,,,56,5,,157,0.665778370698293,0
2617,,,66,4,,288,1.8238867282867433,0
2618,"public void remove(final CreatureRespawnPoint point){
  respawnPoints.remove(point);
}
","public void next(final CreatureRespawnPoint point){
  respawnPoints.next(point);
}
",17,3,"remove:next,",29,0.14309284687042237,Beam
2619,"@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}
","@Override public void start(Runnable arg0){
  start();
  arg0.run();
}
",21,2,"stop:start,",3,0.023394795258839925,Beam
2620,"private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}
","private HashMap AddAttri(SvcReg val,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(val))   return map;
  regs.add(val);
  return map;
}
",151,9,"reg:val,addAttr:AddAttri,",320,2.178752597173055,Beam
2621,,,36,5,,276,1.3341643889745076,0
2622,"@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}
","@Override public void paint(X11ComponentPeer actor,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=actor.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(actor.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}
",276,15,"flip:paint,peer:actor,",486,3.5956801414489745,Beam
2623,,,152,10,,812,6.271577831109365,0
2624,,,19,3,,269,0.9429181456565857,0
2625,"public static byte[] decode(String s) throws java.io.IOException {
  return decode(s,NO_OPTIONS);
}
","public static byte[] decode(String a) throws java.io.IOException {
  return decode(a,NO_OPTIONS);
}
",26,2,"s:a,",3,0.04019038279851277,Beam
2626,,,16,3,,150,0.6235189596811931,0
2627,,,17,3,,241,0.9210633516311646,0
2628,"public boolean updateStatsAndReturnIfAllowed(){
  long now=SystemClock.elapsedRealtime();
  long deltaMs=now - mLastRequestTimestamp;
  if (deltaMs < mDelayMs)   return false;
  mLastRequestTimestamp=now;
  if (deltaMs < 2 * mDelayMs) {
    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);
  }
 else {
    mDelayMs=MIN_DELAY;
  }
  return true;
}
","public boolean updateStatsAndReturnIsAllowed(){
  long now=SystemClock.elapsedRealtime();
  long deltaMs=now - mLastRequestTimestamp;
  if (deltaMs < mDelayMs)   return false;
  mLastRequestTimestamp=now;
  if (deltaMs < 2 * mDelayMs) {
    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);
  }
 else {
    mDelayMs=MIN_DELAY;
  }
  return true;
}
",69,6,"updateStatsAndReturnIfAllowed:updateStatsAndReturnIsAllowed,",3,0.022395217418670656,Beam
2629,"public int threeWayDistance(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}
","public int threeWordAddress(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}
",110,11,"threeWayDistance:threeWordAddress,",46,0.2727413336435954,Beam
2630,"public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}
","public int getExt(Element EL,String resourceKey){
  return Caster.toIntValue(EL.getAttribute(resourceKey),Integer.MIN_VALUE);
}
",29,3,"toInt:getExt,el:EL,attributeName:resourceKey,",284,1.6725692391395568,Beam
2631,,,26,3,,683,3.848048369089762,0
2632,"private void baselineLayout(int origin,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=origin + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=origin + ascent + (springPref - baseline) - height;
break;
default :
y=origin + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
}
","private void padding(int head,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=head + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=head + ascent + (springPref - baseline) - height;
break;
default :
y=head + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,head,size);
}
}
 else {
setChildSize(spring,VERTICAL,head,size);
}
}
}
",253,18,"origin:head,baselineLayout:padding,",318,2.81527072985967,Beam
2633,"public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}
","public void makeTreeofWritees(Iterable<Pair<String,Integer>> cleanData){
  Text type=new Text();
  for (  Pair<String,Integer> pair : cleanData) {
    type.set(pair.type);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(type)) {
      valList=new ArrayList<>();
      mockInput.put(type,valList);
      type=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(type);
    valList.add(new IntWritable(pair.value()));
  }
}
",122,6,"makeTreeOfWritables:makeTreeofWritees,flatData:cleanData,key:type,",229,1.5033956130345663,Beam
2634,"public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}
","public void ADDLINE(int endName,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(endName,sourceFile,repeatCount,outputLine,outputIncrement));
}
",40,7,"startLine:endName,addLine:ADDLINE,",403,2.2134996255238852,Beam
2636,"public boolean addTagId(final Long tagId){
  if (tagId != null && tagId > 0) {
    return tagIds.add(tagId);
  }
  return false;
}
","public boolean addTagsInfo(final Long tagId){
  if (tagId != null && tagId > 0) {
    return tagIds.add(tagId);
  }
  return false;
}
",33,3,"addTagId:addTagsInfo,",41,0.1857698400815328,Beam
2637,,,79,3,,285,1.5601399540901184,0
2638,"public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}
","public Node executeSecond(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}
",41,3,"selectFirst:executeSecond,",10,0.04385563532511393,Beam
2639,,,86,6,,363,2.731757613023122,0
2640,,,56,4,,142,0.6547906676928202,0
2641,"public static void unregisterBaggageHandler(BaggageHandler handler){
  handlers.remove(handler);
}
","public static void unregisterBangagCallback(BaggageHandler route){
  handlers.remove(route);
}
",17,3,"unregisterBaggageHandler:unregisterBangagCallback,handler:route,",71,0.33803916374842324,Beam
2642,"public String toString(){
  StringBuffer result=new StringBuffer(ipAddress.toString());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.toString();
}
","public String Tostring(){
  StringBuffer result=new StringBuffer(ipAddress.Tostring());
  result.append(""/"");
  result.append(extendedNetworkPrefix);
  return result.Tostring();
}
",41,4,"toString:Tostring,",19,0.09228878021240235,Beam
2643,"public static Corleone context(String jobContext){
  if (jobContext == null || jobContext.equals("""")) {
    throw new IllegalArgumentException(""Job context must not be null or empty."");
  }
  contexts.clear();
  contexts.add(jobContext);
  return getInstance();
}
","public static Corleone job(String jobContext){
  if (jobContext == null || jobContext.equals("""")) {
    throw new IllegalArgumentException(""Job context must not be null or empty."");
  }
  contexts.clear();
  contexts.add(jobContext);
  return getInstance();
}
",50,3,"context:job,",37,0.22125048240025838,Beam
2644,"public String format(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.format(val);
  }
  return Double.toString(val);
}
","public String transform(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.transform(val);
  }
  return Double.toString(val);
}
",40,3,"format:transform,",47,0.25115254322687786,Beam
2645,"public DagIterator(Graph pattern){
  for (  Edge edge : pattern.getEdges()) {
    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {
      continue;
    }
    throw new IllegalArgumentException(""The graph may consist only of "" + ""directed and undirected edges: "" + edge);
  }
  decoratedGraphs.add(new DecoratedGraph(pattern));
}
","public DagIterator(Graph text){
  for (  Edge edge : text.getEdges()) {
    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {
      continue;
    }
    throw new IllegalArgumentException(""The graph may consist only of "" + ""directed and undirected edges: "" + edge);
  }
  decoratedGraphs.add(new DecoratedGraph(text));
}
",63,4,"pattern:text,",13,0.07285402218500774,Beam
2647,"@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {
  return sha1(keyStoreFile,null,null);
}
","@NotNull public static String shaOne(@NotNull File keyStoreFile) throws Exception {
  return shaOne(keyStoreFile,null,null);
}
",26,2,"sha1:shaOne,",9,0.06447000503540039,Beam
2648,,,63,4,,149,0.9459680517514547,0
2649,"private ValueGeometry(byte[] bytes,Geometry geometry){
  this.bytes=bytes;
  this.geometry=geometry;
  this.hashCode=Arrays.hashCode(bytes);
}
","private valueGeography(byte[] ones,Geometry geography){
  this.ones=ones;
  this.geography=geography;
  this.hashCode=Arrays.hashCode(ones);
}
",36,3,"ValueGeometry:valueGeography,geometry:geography,bytes:ones,",418,2.1867949326833087,Beam
2650,"public static IFitsHeader lookup(String key){
  int keyLength=key.length();
  if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) {
    StringBuilder builder=new StringBuilder();
    for (int index=0; index < keyLength; index++) {
      char character=key.charAt(index);
      if (Character.isDigit(character)) {
        if (builder.charAt(builder.length() - 1) != 'n') {
          builder.append('n');
        }
      }
 else {
        builder.append(character);
      }
    }
    return STANDARD_KEYS.get(builder.toString());
  }
  return STANDARD_KEYS.get(key);
}
","public static IFitsHeader lookup(String element){
  int keyLength=element.length();
  if (keyLength > 0 && Character.isDigit(element.charAt(keyLength - 1))) {
    StringBuilder builder=new StringBuilder();
    for (int index=0; index < keyLength; index++) {
      char character=element.charAt(index);
      if (Character.isDigit(character)) {
        if (builder.charAt(builder.length() - 1) != 'n') {
          builder.append('n');
        }
      }
 else {
        builder.append(character);
      }
    }
    return STANDARD_KEYS.get(builder.toString());
  }
  return STANDARD_KEYS.get(element);
}
",142,6,"key:element,",35,0.2650187412897746,Beam
2651,,,29,3,,358,1.6939309279123942,0
2652,,,99,9,,444,2.0228474458058674,0
2654,"public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}
","public DistributedLogMultiStreamWriter internal(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),""No streams provided"");
  Preconditions.checkNotNull(_client,""No distributedlog client provided"");
  Preconditions.checkNotNull(_codec,""No compression codec provided"");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,""Invalid speculative timeout settings"");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}
",102,12,"build:internal,",11,0.049774638811747235,Beam
2655,,,37,2,,80,0.5872548540433248,0
2656,"public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){
  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);
}
","public void addPropertyChangedHandler(String PropertyKey,PropertyChangeListener listener){
  propertyChangeSupport.addPropertyChangedHandler(PropertyKey,listener);
}
",21,4,"propertyName:PropertyKey,addPropertyChangeListener:addPropertyChangedHandler,",113,0.5884445071220398,Beam
2657,"public void remove(DirectedEdge de){
  outEdges.remove(de);
}
","public void remove(DirectedEdge te){
  outEdges.remove(te);
}
",16,3,"de:te,",4,0.026024452845255532,Beam
2658,"public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
","public void closeModule(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}
",27,3,"closeWindow:closeModule,",7,0.02247914473215739,Beam
2659,,,52,5,,1040,5.350368614991506,0
2660,,,91,9,,279,2.736897345383962,0
2661,"public static boolean isAutoNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isAutoNew(ctx);
}
","public static boolean isSyncValid(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException(""Require Context"");
  String s=getContext(ctx,WindowNo,""AutoNew"",false);
  if (s != null) {
    if (s.equals(""Y""))     return true;
 else     return false;
  }
  return isSyncValid(ctx);
}
",70,4,"isAutoNew:isSyncValid,",48,0.26179254055023193,Beam
2662,"public void clear(FacesContext facesContext,Map<String,Object> viewMap){
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.log(Level.FINEST,""Clearing @ViewScoped CDI beans for given view map: {0}"");
  }
  Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,viewMap);
  if (contextMap != null) {
    destroyBeans(viewMap,contextMap);
  }
}
","public void close(FacesContext facesContext,Map<String,Object> imageMap){
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.log(Level.FINEST,""Clearing @ViewScoped CDI beans for given view map: {0}"");
  }
  Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,imageMap);
  if (contextMap != null) {
    destroyBeans(imageMap,contextMap);
  }
}
",71,4,"viewMap:imageMap,clear:close,",115,0.6171963651974995,Beam
2663,,,35,4,,214,0.7892241319020589,0
2664,"public boolean isDefined(Object attrName){
  return table.containsKey(attrName);
}
","public boolean isExigned(Object attrType){
  return table.containsKey(attrType);
}
",17,3,"isDefined:isExigned,attrName:attrType,",48,0.2205674409866333,Beam
2665,"private Set<Integer> findValues(String string){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : string.split("","")) {
    if (!str.equals("""")) {
      results.add(findValue(str));
    }
  }
  return results;
}
","private Set<Integer> findValues(String null){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : null.split("","")) {
    if (!str.equals("""")) {
      results.add(findValue(str));
    }
  }
  return results;
}
",65,4,"string:null,",36,0.2114524245262146,Beam
2666,,,111,6,,328,2.6184160908063254,0
2667,,,66,8,,400,1.9249131401379904,0
2668,"public static float roundDecimal(float value){
  return roundDecimal(value,Math.log10(INT_PRECISION));
}
","public static float RoundDecFloat(float v){
  return RoundDecFloat(v,Math.log10(INT_PRECISION));
}
",23,2,"roundDecimal:RoundDecFloat,value:v,",131,0.6724090218544007,Beam
2669,"public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}
","public StringBuilder Encodebody(StringBuilder bin){
  return bin.append(contentEncoding);
}
",17,3,"encodeBody:Encodebody,buffer:bin,",73,0.34312212069829306,Beam
2670,,,89,5,,184,1.19363671541214,0
2671,"public ProjectedStream addView(String namespace,String name,List<Expression> parameters){
  views.add(View.create(namespace,name,parameters));
  return this;
}
","public ProjectedStream createStream(String stylesource,String name,List<Expression> parameters){
  views.add(View.create(stylesource,name,parameters));
  return this;
}
",37,5,"addView:createStream,namespace:stylesource,",177,0.9058684428532918,Beam
2672,"public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}
","public static IntStream concat(IntStream fa,IntStream b){
  Objects.requireNonNull(fa);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(fa.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,fa.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(fa,b));
}
",89,5,"a:fa,",11,0.15831478039423624,Beam
2673,"private void markReserved(int ropReg,int category){
  reservedRopRegs.set(ropReg,ropReg + category,true);
}
","private void markReserve(int cropTag,int category){
  reservedRopRegs.set(cropTag,cropTag + category,true);
}
",25,4,"ropReg:cropTag,markReserved:markReserve,",192,0.8585322896639506,Beam
2674,"public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}
","public void deepfill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}
",24,4,"deepFill:deepfill,",27,0.18972225983937582,Beam
2675,"public static Element createElement(Document doc,String tag,String nsURI,String prefix){
  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + "":"" + tag;
  return doc.createElementNS(nsURI,qName);
}
","public static Element CreateObject(Document doc,String tag,String nsURI,String plugin){
  String qName=(plugin == null || plugin.length() == 0) ? tag : plugin + "":"" + tag;
  return doc.createElementNS(nsURI,qName);
}
",54,6,"createElement:CreateObject,prefix:plugin,",491,2.294328447182973,Beam
2676,"public boolean greaterThan(FXGVersion version){
  return (compareTo(version) > 0);
}
","public boolean greaterThenAN(FXGVersion install){
  return (compareTo(install) > 0);
}
",19,2,"greaterThan:greaterThenAN,version:install,",64,0.4329548954963684,Beam
2677,"@Override public void onAdded(final RPObject object){
  if (isUser(object)) {
    if (object.has(""adminlevel"")) {
      adminlevel=object.getInt(""adminlevel"");
    }
  }
}
","@Override public void onAdd(final RPObject edit){
  if (isUser(edit)) {
    if (edit.has(""adminlevel"")) {
      adminlevel=edit.getInt(""adminlevel"");
    }
  }
}
",41,3,"object:edit,onAdded:onAdd,",70,0.42108415365219115,Beam
2678,"void putChannel(final StoredClientChannel channel){
  putChannel(channel,true);
}
","void writeChan(final StoredClientChannel channel){
  writeChan(channel,true);
}
",16,2,"putChannel:writeChan,",10,0.04457679589589437,Beam
2679,,,190,8,,1027,7.923225859800975,0
2680,"public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}
","public void loading(GeneralSubtrees generalsubTickets){
  List<GeneralSubtree> generalSubtreesList=generalsubTickets.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}
",99,6,"generalSubtrees:generalsubTickets,load:loading,",89,0.5243423104286193,Beam
2681,"public DefaultActionGroup(@NotNull AnAction... actions){
  this(Arrays.asList(actions));
}
","public DefaultControllerRule(@NotNull AnAction... actions){
  this(Arrays.asList(actions));
}
",21,2,"DefaultActionGroup:DefaultControllerRule,",9,0.05294088125228882,Beam
2682,,,66,8,,684,3.6786061485608417,0
2683,,,17,2,,235,1.0459924221038819,0
2684,"public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
","public static String dirFollow(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}
",32,2,"tmpJournal:dirFollow,",8,0.03501052459081014,Beam
2687,"public void dispose(){
  clearListeners();
  if (attributes != null) {
    attributes.clear();
  }
  removed(null);
}
","public void expose(){
  clearListeners();
  if (attributes != null) {
    attributes.clear();
  }
  removed(null);
}
",30,2,"dispose:expose,",5,0.012958665688832601,Beam
2688,,,37,3,,235,1.0253583709398906,0
2689,,,62,4,,214,1.1817131360371909,0
2690,"public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}
","public static void saveProvisionatingValibility(Context context,long valITY){
  if (valITY <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + valITY;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,valITY);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}
",85,6,"saveProvisioningValidity:saveProvisionatingValibility,validity:valITY,",322,1.721183669567108,Beam
2691,"public AemParsys clear(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
","public AemParsys empty(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}
",35,3,"clear:empty,",3,0.022713780403137207,Beam
2692,"@Override public XADataSource createXADataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}
","@Override public XADataSource createXADataSources(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}
",64,4,"createXADataSource:createXADataSources,",5,0.027774993578592935,Beam
2693,,,46,4,,594,3.0319430867830914,0
2694,"private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {
  if (uri.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestAndResponse);
  }
 else   if (uri.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestAndResponse);
  }
 else   if (uri.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestAndResponse);
  }
 else   if (uri.startsWith(""/source/"")) {
    handleHtmlShowSource(requestAndResponse);
  }
 else   if (uri.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestAndResponse);
  }
 else   if (uri.startsWith(""/search/"")) {
    handleHtmlSearch(requestAndResponse);
  }
 else   if (uri.equals(""/help/"")) {
    handleHtmlBasicHelp(requestAndResponse);
  }
 else   if (uri.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestAndResponse);
  }
 else   if (uri.startsWith(""/help/"")) {
    handleHtmlHelp(requestAndResponse);
  }
 else   if (uri.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestAndResponse);
  }
 else   if (uri.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestAndResponse);
  }
 else   if (uri.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestAndResponse);
  }
 else   if (uri.equals(""/clear/"")) {
    handleHtmlClearForm(requestAndResponse);
  }
 else   if (uri.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestAndResponse);
  }
 else   if (uri.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestAndResponse);
  }
 else   if (uri.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestAndResponse);
  }
 else   if (uri.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestAndResponse);
  }
 else   if (uri.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestAndResponse);
  }
 else   if (uri.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestAndResponse);
  }
 else   if (uri.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestAndResponse);
  }
 else   if (uri.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestAndResponse);
  }
 else   if (uri.equals(""/nothing/"")) {
    handleHtmlNothing(requestAndResponse);
  }
 else   if (uri.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestAndResponse);
  }
 else   if (uri.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);
  }
 else   if (uri.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestAndResponse);
  }
 else   if (uri.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestAndResponse);
  }
 else   if (uri.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestAndResponse);
  }
 else   if (uri.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestAndResponse);
  }
 else   if (uri.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestAndResponse);
  }
 else   if (uri.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestAndResponse);
  }
 else {
    returnHtml404(requestAndResponse);
  }
}
","private void show(RequestAndResponse requestWithStatus,String uri) throws IOException, ServletException {
  if (uri.startsWith(""/notebooks/"")) {
    handleHtmlShowNotebooks(requestWithStatus);
  }
 else   if (uri.startsWith(""/quotations/"")) {
    handleHtmlShowQuotations(requestWithStatus);
  }
 else   if (uri.startsWith(""/sources/"")) {
    handleHtmlShowSources(requestWithStatus);
  }
 else   if (uri.startsWith(""/source/"")) {
    handleHtmlShowSource(requestWithStatus);
  }
 else   if (uri.startsWith(""/notebook/"")) {
    handleHtmlShowNotebook(requestWithStatus);
  }
 else   if (uri.startsWith(""/search/"")) {
    handleHtmlSearch(requestWithStatus);
  }
 else   if (uri.equals(""/help/"")) {
    handleHtmlBasicHelp(requestWithStatus);
  }
 else   if (uri.equals(""/advancedHelp/"")) {
    handleHtmlAdvancedHelp(requestWithStatus);
  }
 else   if (uri.startsWith(""/help/"")) {
    handleHtmlHelp(requestWithStatus);
  }
 else   if (uri.equals(""/backup/"")) {
    handleHtmlUserBackupForm(requestWithStatus);
  }
 else   if (uri.equals(""/restore/"")) {
    handleHtmlUserRestoreForm(requestWithStatus);
  }
 else   if (uri.startsWith(""/account/"")) {
    handleHtmlShowAccount(requestWithStatus);
  }
 else   if (uri.startsWith(""/accounts/"")) {
    handleHtmlShowAccounts(requestWithStatus);
  }
 else   if (uri.equals(""/shutdown/"")) {
    handleHtmlShutdownForm(requestWithStatus);
  }
 else   if (uri.equals(""/clear/"")) {
    handleHtmlClearForm(requestWithStatus);
  }
 else   if (uri.equals(""/onlineBackup/"")) {
    handleHtmlOnlineBackupForm(requestWithStatus);
  }
 else   if (uri.equals(""/checkForErrors/"")) {
    handleHtmlCheckForErrorsForm(requestWithStatus);
  }
 else   if (uri.equals(""/backups/"")) {
    handleHtmlShowDBBackups(requestWithStatus);
  }
 else   if (uri.equals(""/offlineBackup/"")) {
    handleHtmlOfflineDbBackupForm(requestWithStatus);
  }
 else   if (uri.equals(""/noteJson/"")) {
    handleJsonShowEntry(requestWithStatus);
  }
 else   if (uri.equals(""/noteParentJson/"")) {
    handleJsonShowEntryParent(requestWithStatus);
  }
 else   if (uri.equals(""/noteChildrenJson/"")) {
    handleJsonShowEntryChildren(requestWithStatus);
  }
 else   if (uri.equals(""/searchNotesJson/"")) {
    handleJsonSearchNotes(requestWithStatus);
  }
 else   if (uri.equals(""/newNotebook/"")) {
    handleHtmlNewNotebookForm(requestWithStatus);
  }
 else   if (uri.equals(""/nothing/"")) {
    handleHtmlNothing(requestWithStatus);
  }
 else   if (uri.equals(""/couldNotCreateNote/"")) {
    handleHtmlCouldNotCreateNote(requestWithStatus);
  }
 else   if (uri.equals(""/restoreBackupCommand/"")) {
    handleHtmlShowRestoreDbBackupCommand(requestWithStatus);
  }
 else   if (uri.equals(""/signedOut/"")) {
    handleHtmlShowSignedOut(requestWithStatus);
  }
 else   if (uri.startsWith(""/changePassword/"")) {
    handleHtmlChangePassword(requestWithStatus);
  }
 else   if (uri.startsWith(""/changeAccount/"")) {
    handleHtmlChangeAccount(requestWithStatus);
  }
 else   if (uri.startsWith(""/closeAccount/"")) {
    handleHtmlCloseAccount(requestWithStatus);
  }
 else   if (uri.equals(""/isSignedIn/"")) {
    handleJsonIsSignedIn(requestWithStatus);
  }
 else   if (uri.equals(""/restoreFrame/"")) {
    handleHtmlUserRestoreFrame(requestWithStatus);
  }
 else {
    returnHtml404(requestWithStatus);
  }
}
",584,3,"routeSingleGetRequest:show,requestAndResponse:requestWithStatus,",246,2.0869374593098957,Beam
2695,"private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
","private void request(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("""")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send(""error: last recipient not set"");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}
",149,8,"dial:request,",102,0.8055735349655151,Beam
2696,,,120,7,,384,2.2790825963020325,0
2697,"public static String toString(LocalDate data){
  return data == null ? """" : data.format(formatter(""dd/MM/yyyy""));
}
","public static String toString(LocalDate index){
  return index == null ? """" : index.format(formatter(""dd/MM/yyyy""));
}
",27,2,"data:index,",5,0.039624754587809244,Beam
2699,"public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}
","public int load() throws IOException {
  int b0=fInputStream.load();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage(""jsp.error.xml.invalidASCII"",Integer.toString(b0)));
  }
  return b0;
}
",48,3,"read:load,",4,0.028630844751993813,Beam
2700,"private void initializeLayer(List<Neuron> layer,NeuronUpdateRule nodeType,int nodes){
  for (int i=0; i < nodes; i++) {
    Neuron node=new Neuron(getParentNetwork(),nodeType);
    layer.add(node);
  }
}
","private void initialiseNetwork(List<Neuron> section,NeuronUpdateRule sourceTyp,int nodes){
  for (int i=0; i < nodes; i++) {
    Neuron node=new Neuron(getParentNetwork(),sourceTyp);
    section.add(node);
  }
}
",54,6,"layer:section,initializeLayer:initialiseNetwork,nodeType:sourceTyp,",422,2.6772894660631814,Beam
2701,"public void reset(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    bufferOffset=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}
","public void refresh(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    bufferOffset=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}
",95,15,"reset:refresh,",36,0.35834640661875405,Beam
2702,"default B with(String key,int value){
  return with(key,Integer.toString(value));
}
","default B by(String key,int value){
  return by(key,Integer.toString(value));
}
",25,3,"with:by,",6,0.053020799160003663,Beam
2703,,,85,7,,302,1.9236573338508607,0
2704,,,101,8,,250,1.1701628804206847,0
2705,"public final boolean skipAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
","public final boolean matchAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}
",68,6,"skipAny:matchAny,",37,0.19780408938725788,Beam
2706,,,68,4,,129,0.6083488821983337,0
2707,,,84,8,,689,5.9295504808425905,0
2709,"default void shutdown(){
  Platform.exit();
}
","default void downdown(){
  Platform.exit();
}
",13,1,"shutdown:downdown,",5,0.012021493911743165,Beam
2710,"public boolean equals(Object object){
  if (!(object instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)object;
  if (!name.equals(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.equals(val.getClassName());
}
","public boolean Equles(Object parent){
  if (!(parent instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)parent;
  if (!name.Equles(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.Equles(val.getClassName());
}
",77,5,"object:parent,equals:Equles,",59,0.3258282740910848,Beam
2711,,,20,3,,112,0.42367805242538453,0
2712,"public static @Nonnull <T>T valueOrDefault(@Nullable T value,@Nonnull T defaultValue){
  return value == null ? defaultValue : value;
}
","public static @Nonnull <T>T valueordefault(@Nullable T element,@Nonnull T initialDefault){
  return element == null ? initialDefault : element;
}
",31,3,"valueOrDefault:valueordefault,defaultValue:initialDefault,value:element,",332,2.117336181799571,Beam
2714,,,70,5,,1201,8.753917054335277,0
2715,"public void removeChangeListener(ChangeListener l){
  if (listeners == null)   return;
  listeners.remove(l);
}
","public void removeEventListener(ChangeListener fl){
  if (listeners == null)   return;
  listeners.remove(fl);
}
",24,3,"removeChangeListener:removeEventListener,l:fl,",51,0.21177621682484946,Beam
2716,"public void addMutedUsername(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}
","public void addMutedAccountame(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine(""Muting username:"" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement(""insert into muted_usernames (username, mute_till) values (?, ?)"");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info(""Tried to create duplicate muted username:"" + username + "" error:""+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,""Error inserting muted username:"" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}
",197,8,"addMutedUsername:addMutedAccountame,",17,0.11099321842193603,Beam
2717,,,17,1,,49,0.23923213481903077,0
2718,"public void validate(Set setData) throws ValidationException {
  for (Iterator iter=setData.iterator(); iter.hasNext(); ) {
    performValidation((String)iter.next());
  }
}
","public void validate(Set loadData) throws ValidationException {
  for (Iterator iter=loadData.iterator(); iter.hasNext(); ) {
    performValidation((String)iter.next());
  }
}
",43,3,"setData:loadData,",4,0.016792364915211997,Beam
2719,"private boolean isRelevant(Object service,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(service)) {
      flag=true;
      break;
    }
  }
  return flag;
}
","private boolean isEasonable(Object services,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(services)) {
      flag=true;
      break;
    }
  }
  return flag;
}
",121,10,"isRelevant:isEasonable,service:services,",238,1.3570713917414348,Beam
2720,"private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}
","private double convertTolinFreqs(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}
",31,2,"melToLinFreq:convertTolinFreqs,",47,0.22126216888427735,Beam
2721,,,189,6,,716,6.28491792678833,0
2722,"private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}
","private ParsePosition append(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}
",26,2,"next:append,",11,0.06290382146835327,Beam
2723,"public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}
","public static String addCsvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + "" "" + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip,"" ("" + descString + "")"");
    }
  }
 else   if (toolTip == null) {
    toolTip="""";
  }
  return toolTip;
}
",109,6,"addCvDescription:addCsvDescription,",8,0.054645009835561115,Beam
2724,"public DimensionedScalar(String fieldValue) throws IllegalArgumentException {
  super("""","""");
  Matcher matcher=PATTERN.matcher(fieldValue);
  if (matcher.find()) {
    String name=matcher.group(1);
    String dimensions=matcher.group(2);
    String value=matcher.group(3);
    setName(name);
    setValue(value);
    this.dimensions=new Dimensions(dimensions);
  }
 else {
    throw new DictionaryException(""CANNOT PARSE:  >"" + fieldValue + ""<"");
  }
}
","public DimensionedScalar(String fieldName) throws IllegalArgumentException {
  super("""","""");
  Matcher matcher=PATTERN.matcher(fieldName);
  if (matcher.find()) {
    String name=matcher.group(1);
    String dimensions=matcher.group(2);
    String value=matcher.group(3);
    setName(name);
    setValue(value);
    this.dimensions=new Dimensions(dimensions);
  }
 else {
    throw new DictionaryException(""CANNOT PARSE:  >"" + fieldName + ""<"");
  }
}
",101,6,"fieldValue:fieldName,",3,0.02307858467102051,Beam
2725,"static Field findField(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ instance.getClass());
}
","static Field findField(Object ace,String name) throws NoSuchFieldException {
  for (Class<?> clazz=ace.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException(""Field "" + name + "" not found in ""+ ace.getClass());
}
",100,5,"instance:ace,",31,0.20481450955073038,Beam
2726,"public long startstack(){
  return Long.parseLong(fields[27]);
}
","public long pushfield(){
  return Long.parseLong(cells[27]);
}
",18,2,"startstack:pushfield,fields:cells,",16,0.11930452187856039,Beam
2727,"public byte[] readRawBytes(final int size) throws IOException {
  if (size < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + size > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (size <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[size];
    System.arraycopy(buffer,bufferPos,bytes,0,size);
    bufferPos+=size;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}
","public byte[] readAsyncbytes(final int source) throws IOException {
  if (source < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + source > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (source <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[source];
    System.arraycopy(buffer,bufferPos,bytes,0,source);
    bufferPos+=source;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}
",107,7,"size:source,readRawBytes:readAsyncbytes,",108,0.6027139782905578,Beam
2728,"@Override public int length(){
  return set.size();
}
","@Override public int read(){
  return set.size();
}
",16,2,"length:read,",15,0.09603497187296549,Beam
2729,"private void addConnectionView(Connection connection){
  PlatformImpl.runAndWait(null);
}
","private void addConnectionView(Connection ion){
  PlatformImpl.runAndWait(null);
}
",16,2,"connection:ion,",14,0.06554646889368693,Beam
2731,,,16,3,,106,0.4915917952855428,0
2732,"private ComputeState validateComputeName(String awsId,String vmName) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState computeState=getComputeByAWSId(this.host,awsId);
  String tagNameValue=computeState.name;
  assertNotNull(""\'displayName\' property should be present"",tagNameValue);
  assertEquals(vmName,tagNameValue);
  return computeState;
}
","private ComputeState validateExecuteKey(String aysID,String vmName) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState computeState=getComputeByAWSId(this.host,aysID);
  String tagNameValue=computeState.name;
  assertNotNull(""\'displayName\' property should be present"",tagNameValue);
  assertEquals(vmName,tagNameValue);
  return computeState;
}
",61,5,"validateComputeName:validateExecuteKey,awsId:aysID,",279,1.5515867789586386,Beam
2733,"public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (originalTypes == null)   return null;
  ReferenceBinding[] convertedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != originalTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}
","public ReferenceBinding[] convertToDirectNames(ReferenceBinding[] modifiedNames,boolean forceErasure,boolean forceRawEnclosingProperty){
  if (modifiedNames == null)   return null;
  ReferenceBinding[] convertedTypes=modifiedNames;
  for (int i=0, length=modifiedNames.length; i < length; i++) {
    ReferenceBinding originalType=modifiedNames[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingProperty);
    if (convertedType != originalType) {
      if (convertedTypes == modifiedNames) {
        System.arraycopy(modifiedNames,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != modifiedNames) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}
",149,9,"originalTypes:modifiedNames,convertToRawTypes:convertToDirectNames,forceRawEnclosingType:forceRawEnclosingProperty,",738,5.353897853692373,Beam
2734,"public void addVMArguments(String vmArgumentName,String vmArgumentValue){
  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue);
  vmSet.add(vmArg);
}
","public void addVMAssatives(String vmArgumentName,String vmArgumentDefault){
  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentDefault);
  vmSet.add(vmArg);
}
",30,5,"vmArgumentValue:vmArgumentDefault,addVMArguments:addVMAssatives,",264,1.3778655449549357,Beam
2735,,,115,6,,267,1.7234317700068156,0
2736,"private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}
","private BigInteger modModApuff(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}
",931,36,"oddModPow:modModApuff,",18,0.4280528426170349,Beam
2737,"private void sendCONNECTRequest() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}
","private void sendCONConnectorResponse() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + "" "" + connectRequestURI(url)+ "" ""+ httpVersion,null);
  requests.setIfNotSet(""User-Agent"",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+="":"" + String.valueOf(port);
  }
  requests.setIfNotSet(""Host"",host);
  requests.setIfNotSet(""Accept"",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet(""Proxy-Connection"",""keep-alive"");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}
",163,11,"sendCONNECTRequest:sendCONConnectorResponse,",20,0.11311219930648804,Beam
2738,,,62,6,,1602,8.925351158777874,0
2739,"public static void writeToFile(File file,String contents) throws IOException {
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(contents.getBytes());
  fos.close();
}
","public static void writeFilePage(File zip,String Contences) throws IOException {
  FileOutputStream fos=new FileOutputStream(zip);
  fos.write(Contences.getBytes());
  fos.close();
}
",41,4,"file:zip,contents:Contences,writeToFile:writeFilePage,",328,1.5765038847923278,Beam
2740,,,58,5,,204,1.2524815559387208,0
2741,,,15,2,,37,0.1999768336613973,0
2742,"public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}
","public static String read(POSMikheevCounter counter){
  return POSBaseLineCounter.read(counter);
}
",18,2,"write:read,",34,0.17899908224741617,Beam
2743,,,24,2,,245,1.2637789050738018,0
2744,"public int nodeCount(){
  return nodes == null ? 0 : nodes.size();
}
","public int Nodecount(){
  return nodes == null ? 0 : nodes.size();
}
",20,2,"nodeCount:Nodecount,",9,0.04890052477518717,Beam
2745,"public void cfgPackage(ConfigurationValue cfgval,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
","public void configFile(ConfigurationValue givals,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}
",35,6,"cfgPackage:configFile,cfgval:givals,",104,0.586961297194163,Beam
2746,"public static String arrayToHexString(byte[] array){
  return arrayToHexString(array,0,array.length);
}
","public static String arrayToHEXInt(byte[] element){
  return arrayToHEXInt(element,0,element.length);
}
",24,2,"array:element,arrayToHexString:arrayToHEXInt,",112,0.7421205242474874,Beam
2747,,,145,4,,144,0.7634372353553772,0
2748,"public static String selectText(XPathExpression expr,Node context){
  try {
    return (String)expr.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
","public static String findText(XPathExpression expr,Node context){
  try {
    return (String)expr.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}
",45,4,"selectText:findText,",4,0.018490131696065268,Beam
2749,,,54,4,,435,2.3925544381141663,0
2750,"@Override public String execute(){
  return SUCCESS;
}
","@Override public String submit(){
  return SUCCESS;
}
",12,2,"execute:submit,",4,0.021076285839080812,Beam
2751,,,432,13,,3708,23.683234624067943,0
2752,,,100,6,,230,1.8721887230873109,0
2753,"public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}
","public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format(""multifield#%s#%s"",index,itemType);
  String label=String.format(""%s#%s"",multifieldLabel,itemLabel);
  client.add(new ConfigurationEntry(activeApp,type,label,value));
  return this;
}
",69,10,"currentTab:activeApp,config:client,",625,2.604362638791402,Beam
2754,"public static String formatListToString(List<String> list){
  String result="""";
  for (  String s : list)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
","public static String convertListAsNumber(List<String> string){
  String result="""";
  for (  String s : string)   result+=s + ""\\t\\t"";
  result=result.trim();
  return result.toUpperCase();
}
",46,4,"formatListToString:convertListAsNumber,list:string,",138,0.6824573040008545,Beam
2755,,,155,8,,467,2.382106558481852,0
2756,"public void test_concurrent_modification_insert(){
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(20);
    btree=BTree.create(new SimpleMemoryRawStore(),md);
    btree.insert(10,""Bryan"");
    btree.insert(20,""Mike"");
    btree.insert(30,""James"");
  }
{
    ITupleCursor2<String> cursor=newCursor(btree);
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.seek(20));
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.tuple());
    btree.insert(15,""Paul"");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.tuple());
    assertEquals(new TestTuple<String>(15,""Paul""),cursor.prior());
    assertEquals(new TestTuple<String>(15,""Paul""),cursor.tuple());
    btree.remove(15);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(15),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.next());
    btree.remove(20);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    btree.insert(25,""Allen"");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(null,cursor.tuple());
    assertEquals(new TestTuple<String>(25,""Allen""),cursor.next());
    assertEquals(new TestTuple<String>(25,""Allen""),cursor.tuple());
  }
}
","public void generate(){
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(20);
    btree=BTree.create(new SimpleMemoryRawStore(),md);
    btree.insert(10,""Bryan"");
    btree.insert(20,""Mike"");
    btree.insert(30,""James"");
  }
{
    ITupleCursor2<String> cursor=newCursor(btree);
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.seek(20));
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.tuple());
    btree.insert(15,""Paul"");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.tuple());
    assertEquals(new TestTuple<String>(15,""Paul""),cursor.prior());
    assertEquals(new TestTuple<String>(15,""Paul""),cursor.tuple());
    btree.remove(15);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(15),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,""Mike""),cursor.next());
    btree.remove(20);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    btree.insert(25,""Allen"");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(null,cursor.tuple());
    assertEquals(new TestTuple<String>(25,""Allen""),cursor.next());
    assertEquals(new TestTuple<String>(25,""Allen""),cursor.tuple());
  }
}
",377,4,"test_concurrent_modification_insert:generate,",13,0.08447710275650025,Beam
2757,"@SuppressWarnings({""SuspiciousNameCombination""}) public static double normalCdf(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}
","@SuppressWarnings({""SuspiciousNameCombination""}) public static double calcGmd(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}
",238,14,"normalCdf:calcGmd,",15,0.11729762156804403,Beam
2758,"protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}
","protected DateTimeData format(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}
",568,13,"parse:format,",37,0.3506689111391703,Beam
2759,"void deleteChild(PolicyNode childNode){
  if (isImmutable) {
    throw new IllegalStateException(""PolicyNode is immutable"");
  }
  mChildren.remove(childNode);
}
","void deleteParent(PolicyNode draftChild){
  if (isImmutable) {
    throw new IllegalStateException(""PolicyNode is immutable"");
  }
  mChildren.remove(draftChild);
}
",28,4,"childNode:draftChild,deleteChild:deleteParent,",47,0.19042601585388183,Beam
2760,"public void enablePan(BluetoothAdapter adapter){
  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(mPan);
  long start=System.currentTimeMillis();
  mPan.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(mPan.isTetheringOn());
  writeOutput(String.format(""enablePan() completed in %d ms"",(stop - start)));
}
","public void disableKit(BluetoothAdapter adapter){
  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(mPan);
  long start=System.currentTimeMillis();
  mPan.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(mPan.isTetheringOn());
  writeOutput(String.format(""enablePan() completed in %d ms"",(stop - start)));
}
",84,5,"enablePan:disableKit,",8,0.047656754652659096,Beam
2761,"static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
","static void readSection(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}
",47,5,"loadDirectory:readSection,",12,0.050170505046844484,Beam
2763,,,163,14,,3622,24.06251031557719,0
2764,,,86,8,,265,1.3954583446184794,0
2765,,,334,5,,1275,13.394815476735433,0
2766,"protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}
","protected void stopWraparoundTesting(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText(""Wraparound Test Stopped, "" + Integer.toString(numErrors) + "" Errors Found"");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + "" Cycles Completed"");
    statusText2.setVisible(true);
  }
}
",65,8,"stopWraparoundTest:stopWraparoundTesting,",3,0.03218319813410441,Beam
2767,,,125,9,,799,5.371029615402222,0
2768,,,78,7,,639,4.04406236410141,0
2769,,,107,6,,623,3.050034435590108,0
2770,"public void put(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])buffer.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=buffer.getTimestamp();
    format=buffer.getFormat();
    seqNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=buffer.getVideoOrientation();
}
","public void put(Buffer flash){
  if (flash.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])flash.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=flash.getTimestamp();
    format=flash.getFormat();
    seqNumber=flash.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(flash.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=flash.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=flash.getVideoOrientation();
}
",276,20,"buffer:flash,",30,0.21538725694020588,Beam
2772,"public synchronized int copyDirect(int pageId,OutputStream out) throws IOException {
  byte[] buffer=new byte[pageSize];
  if (pageId >= pageCount) {
    return -1;
  }
  file.seek((long)pageId << pageSizeShift);
  file.readFullyDirect(buffer,0,pageSize);
  readCount++;
  out.write(buffer,0,pageSize);
  return pageId + 1;
}
","public synchronized int Copydirect(int resultId,OutputStream out) throws IOException {
  byte[] buffer=new byte[pageSize];
  if (resultId >= pageCount) {
    return -1;
  }
  file.seek((long)resultId << pageSizeShift);
  file.readFullyDirect(buffer,0,pageSize);
  readCount++;
  out.write(buffer,0,pageSize);
  return resultId + 1;
}
",80,9,"copyDirect:Copydirect,pageId:resultId,",69,0.3677711208661397,Beam
2773,,,25,3,,142,0.7665749549865722,0
2774,"protected boolean position(Projection proj){
  if (proj == null) {
    logger.fine(""OMRasterObject: null projection in position!"");
    return false;
  }
  projWidth=proj.getWidth();
  projHeight=proj.getHeight();
switch (renderType) {
case RENDERTYPE_LATLON:
    if (!proj.isPlotable(lat,lon)) {
      if (DEBUG) {
        logger.fine(""OMRasterObject: point is not plotable!"");
      }
      setNeedToReposition(true);
      return false;
    }
  point1=(Point)proj.forward(lat,lon,new Point());
break;
case RENDERTYPE_XY:
point1=new Point(x,y);
break;
case RENDERTYPE_OFFSET:
if (!proj.isPlotable(lat,lon)) {
if (DEBUG) {
logger.fine(""OMRasterObject: point is not plotable!"");
}
setNeedToReposition(true);
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
point1.x+=x;
point1.y+=y;
break;
case RENDERTYPE_UNKNOWN:
if (DEBUG) {
logger.fine(""OMRasterObject.position(): ignoring unknown rendertype, wingin\' it"");
}
if (lat == 0 && lon == 0) {
if (x == 0 && y == 0) {
if (DEBUG) {
logger.fine(""OMRasterObject.position(): Not enough info in object to place it reasonably."");
}
point1=new Point(-width,-height);
point2=new Point(0,0);
return false;
}
 else {
point1=new Point(x,y);
}
}
 else {
if (!proj.isPlotable(lat,lon)) {
logger.fine(""OMRasterObject: point is not plotable!"");
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
}
break;
}
point2=new Point(0,0);
point2.x=point1.x + width;
point2.y=point1.y + height;
setNeedToReposition(false);
return true;
}
","protected boolean Position(Projection proj){
  if (proj == null) {
    logger.fine(""OMRasterObject: null projection in position!"");
    return false;
  }
  projWidth=proj.getWidth();
  projHeight=proj.getHeight();
switch (renderType) {
case RENDERTYPE_LATLON:
    if (!proj.isPlotable(lat,lon)) {
      if (DEBUG) {
        logger.fine(""OMRasterObject: point is not plotable!"");
      }
      setNeedToReposition(true);
      return false;
    }
  point1=(Point)proj.forward(lat,lon,new Point());
break;
case RENDERTYPE_XY:
point1=new Point(x,y);
break;
case RENDERTYPE_OFFSET:
if (!proj.isPlotable(lat,lon)) {
if (DEBUG) {
logger.fine(""OMRasterObject: point is not plotable!"");
}
setNeedToReposition(true);
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
point1.x+=x;
point1.y+=y;
break;
case RENDERTYPE_UNKNOWN:
if (DEBUG) {
logger.fine(""OMRasterObject.position(): ignoring unknown rendertype, wingin\' it"");
}
if (lat == 0 && lon == 0) {
if (x == 0 && y == 0) {
if (DEBUG) {
logger.fine(""OMRasterObject.position(): Not enough info in object to place it reasonably."");
}
point1=new Point(-width,-height);
point2=new Point(0,0);
return false;
}
 else {
point1=new Point(x,y);
}
}
 else {
if (!proj.isPlotable(lat,lon)) {
logger.fine(""OMRasterObject: point is not plotable!"");
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
}
break;
}
point2=new Point(0,0);
point2.x=point1.x + width;
point2.y=point1.y + height;
setNeedToReposition(false);
return true;
}
",371,19,"position:Position,",45,0.3620617707570394,Beam
2775,"@Override public boolean add(E o){
  if (null == o) {
    throw new NullPointerException();
  }
  if (offer(o)) {
    return true;
  }
  throw new IllegalStateException();
}
","@Override public boolean has(E no){
  if (null == no) {
    throw new NullPointerException();
  }
  if (offer(no)) {
    return true;
  }
  throw new IllegalStateException();
}
",43,2,"add:has,o:no,",105,0.5735319217046102,Beam
2776,"@Override public AggregateableEvaluation aggregate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}
","@Override public AggregateableEvaluation ggregation(Evaluation evaluateuate){
  m_Incorrect+=evaluateuate.incorrect();
  m_Correct+=evaluateuate.correct();
  m_Unclassified+=evaluateuate.unclassified();
  m_MissingClass+=evaluateuate.m_MissingClass;
  m_WithClass+=evaluateuate.m_WithClass;
  if (evaluateuate.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluateuate.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluateuate.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluateuate.m_ClassPriorsSum;
  m_TotalCost+=evaluateuate.totalCost();
  m_SumErr+=evaluateuate.m_SumErr;
  m_SumAbsErr+=evaluateuate.m_SumAbsErr;
  m_SumSqrErr+=evaluateuate.m_SumSqrErr;
  m_SumClass+=evaluateuate.m_SumClass;
  m_SumSqrClass+=evaluateuate.m_SumSqrClass;
  m_SumPredicted+=evaluateuate.m_SumPredicted;
  m_SumSqrPredicted+=evaluateuate.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluateuate.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluateuate.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluateuate.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluateuate.m_SumKBInfo;
  double[] newMarginCounts=evaluateuate.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluateuate.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluateuate.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluateuate.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluateuate.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluateuate.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluateuate.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluateuate.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}
",416,36,"evaluation:evaluateuate,aggregate:ggregation,",126,0.8066627065340678,Beam
2777,"public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}
","public final void extract(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}
",48,6,"sample:extract,",7,0.036781867345174156,Beam
2778,"public static Color decode(String color,Color defaultColor){
  if (color == null) {
    return defaultColor;
  }
  Color c=getNamedColor(color);
  if (c == null) {
    try {
      c=Color.decode(color);
    }
 catch (    NumberFormatException ex) {
      return defaultColor;
    }
  }
  return c;
}
","public static Color Decorate(String image,Color defaultColor){
  if (image == null) {
    return defaultColor;
  }
  Color c=getNamedColor(image);
  if (c == null) {
    try {
      c=Color.Decorate(image);
    }
 catch (    NumberFormatException ex) {
      return defaultColor;
    }
  }
  return c;
}
",65,4,"decode:Decorate,color:image,",136,0.6917661666870117,Beam
2779,"public void removeChildAt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}
","public void getChildIt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}
",68,4,"removeChildAt:getChildIt,",14,0.06281165679295858,Beam
2780,"protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
","protected void doFloodbdDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}
",250,15,"doFloodBDDP:doFloodbdDP,",7,0.09469025532404582,Beam
2781,"public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}
","public void cancelAutCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}
",39,7,"cancelAutoCompletion:cancelAutCompletion,",6,0.03245137929916382,Beam
2782,,,99,7,,375,2.02760112285614,0
2783,,,74,4,,291,1.7628234346707663,0
2784,,,60,3,,161,0.8408055345217387,0
2785,"public static boolean isFailure(List<Action> actions){
  return actions.isEmpty();
}
","public static boolean asFailure(List<Action> actions){
  return actions.isEmpty();
}
",20,2,"isFailure:asFailure,",4,0.022331225872039794,Beam
2786,,,148,14,,1286,10.538108909130097,0
2787,"public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}
","public void clearPages(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine(""Deleting from "" + s + "" to ""+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Last displayed item: "" + oldLastDisplayed + "", items in window ""+ itemsInWindow()+ "", size ""+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest(""Multiple selections: "" + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}
",549,21,"delItems:clearPages,",41,0.30160244305928546,Beam
2788,"private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append(""SELECT * FROM "");
  stmt.append(conn.getDatabaseObjectName(schemaName) + ""."" + conn.getDatabaseObjectName(tableName));
  stmt.append("" WHERE "");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmt;
}
","private StringBuffer buildWherequery(String chemasName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append(""SELECT * FROM "");
  stmt.append(conn.getDatabaseObjectName(chemasName) + ""."" + conn.getDatabaseObjectName(tableName));
  stmt.append("" WHERE "");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT,"" AND "");
  return stmt;
}
",89,7,"schemaName:chemasName,buildSelectQuery:buildWherequery,",304,2.34546777009964,Beam
2789,"public static List<String> readToList(Reader r) throws IOException {
  try (BufferedReader in=new BufferedReader(r)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
","public static List<String> readToList(Reader w) throws IOException {
  try (BufferedReader in=new BufferedReader(w)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }
",75,5,"r:w,",7,0.05473589102427165,Beam
2790,"private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
","private void appendClientConfiguration(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}
",74,4,"appendContainerConfig:appendClientConfiguration,",53,0.23868497212727866,Beam
2791,"public void writeEntry(CCacheOutputStream cos) throws IOException {
  cos.write16(adType);
  cos.write32(adData.length);
  cos.write(adData,0,adData.length);
}
","public void createEnt(CCacheOutputStream socket) throws IOException {
  socket.write16(adType);
  socket.write32(adData.length);
  socket.write(adData,0,adData.length);
}
",40,4,"writeEntry:createEnt,cos:socket,",65,0.2848400433858236,Beam
2792,"public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,""ITALIC"");
  }
 else {
    writeTag(STYLE,""PLAIN"");
  }
  writeTag(""size"",value.getSize());
  closeTag();
}
","public void writeDoc(String tag,Font value){
  startTag(tag);
  writeDoc(""name"",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeDoc(STYLE,""BOLDITALIC"");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeDoc(STYLE,""BOLD"");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeDoc(STYLE,""ITALIC"");
  }
 else {
    writeDoc(STYLE,""PLAIN"");
  }
  writeDoc(""size"",value.getSize());
  closeTag();
}
",137,4,"writeTag:writeDoc,",5,0.05411190589269002,Beam
2793,"public static Discretization discretize(double[] _data,double[] cutoffs,String variableName,List<String> categories){
  if (cutoffs == null) {
    throw new NullPointerException();
  }
  for (int i=0; i < cutoffs.length - 1; i++) {
    if (!(cutoffs[i] <= cutoffs[i + 1])) {
      throw new NullPointerException(""Cutoffs must be in nondecreasing order."");
    }
  }
  if (variableName == null) {
    throw new NullPointerException();
  }
  int numCategories=cutoffs.length + 1;
  if (categories != null && categories.size() != numCategories) {
    throw new IllegalArgumentException(""If specified, the list of "" + ""categories names must be one longer than the length of "" + ""the cutoffs array."");
  }
  DiscreteVariable variable;
  if (categories == null) {
    variable=new DiscreteVariable(variableName,numCategories);
  }
 else {
    variable=new DiscreteVariable(variableName,categories);
  }
  int[] discreteData=new int[_data.length];
  loop:   for (int i=0; i < _data.length; i++) {
    if (Double.isNaN(_data[i])) {
      discreteData[i]=DiscreteVariable.MISSING_VALUE;
      continue;
    }
    for (int j=0; j < cutoffs.length; j++) {
      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < cutoffs[j]) {
        discreteData[i]=j;
        continue loop;
      }
    }
    discreteData[i]=cutoffs.length;
  }
  return new Discretization(variable,discreteData);
}
","public static Discretization discretize(double[] _data,double[] ruboffs,String variableName,List<String> categories){
  if (ruboffs == null) {
    throw new NullPointerException();
  }
  for (int i=0; i < ruboffs.length - 1; i++) {
    if (!(ruboffs[i] <= ruboffs[i + 1])) {
      throw new NullPointerException(""Cutoffs must be in nondecreasing order."");
    }
  }
  if (variableName == null) {
    throw new NullPointerException();
  }
  int numCategories=ruboffs.length + 1;
  if (categories != null && categories.size() != numCategories) {
    throw new IllegalArgumentException(""If specified, the list of "" + ""categories names must be one longer than the length of "" + ""the cutoffs array."");
  }
  DiscreteVariable variable;
  if (categories == null) {
    variable=new DiscreteVariable(variableName,numCategories);
  }
 else {
    variable=new DiscreteVariable(variableName,categories);
  }
  int[] discreteData=new int[_data.length];
  loop:   for (int i=0; i < _data.length; i++) {
    if (Double.isNaN(_data[i])) {
      discreteData[i]=DiscreteVariable.MISSING_VALUE;
      continue;
    }
    for (int j=0; j < ruboffs.length; j++) {
      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < ruboffs[j]) {
        discreteData[i]=j;
        continue loop;
      }
    }
    discreteData[i]=ruboffs.length;
  }
  return new Discretization(variable,discreteData);
}
",306,10,"cutoffs:ruboffs,",38,0.3190178791681925,Beam
2794,"public boolean resourceSupportAR(Integer id){
  if (id == null) {
    return false;
  }
  return resourceSupportAR(id.intValue());
}
","public boolean resourceSupportedCAR(Integer ad){
  if (ad == null) {
    return false;
  }
  return resourceSupportedCAR(ad.intValue());
}
",30,2,"id:ad,resourceSupportAR:resourceSupportedCAR,",77,0.4956328471501668,Beam
2795,,,159,6,,499,3.1198574821154277,0
2796,"@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eIsSet(featureID);
}
","@Override public boolean eSClear(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eSClear(featureID);
}
",57,6,"eIsSet:eSClear,",27,0.25919267733891804,Beam
2797,"public void updateEnd(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}
","public void processFinish(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + ""Processed "" + m_instanceCount+ "" insts @ ""+ m_avInstsPerSec / m_numSamples + "" insts/sec"" + (toFastToMeasure ? ""*"" : """"));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}
",108,14,"updateEnd:processFinish,",7,0.035008962949117026,Beam
2798,"public void start(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.start();
  }
}
","public void stop(){
  if (runner == null) {
    runner=new Thread(this,""Runner"");
    runner.stop();
  }
}
",31,2,"start:stop,",3,0.023190073172251382,Beam
2799,"public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}
","public void fill(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}
",206,11,"removeIndexInterval:fill,",28,0.1703965425491333,Beam
2800,,,91,6,,777,4.06050695180893,0
2801,"public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split("","")));
}
","public static ArrayList<String> stringToArrayList(String series){
  return new ArrayList<>(Arrays.asList(series.split("","")));
}
",32,2,"string:series,",32,0.1600924571355184,Beam
2802,"public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)obj;
  return uri.equals(other.getURI());
}
","public boolean equalales(Object fn){
  if (this == fn) {
    return true;
  }
  if (!(fn instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)fn;
  return uri.equalales(other.getURI());
}
",54,4,"obj:fn,equals:equalales,",65,0.37864271402359007,Beam
2803,"public void beginDisplay(DisplayEvent event) throws ModelControlException {
  super.beginDisplay(event,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel model=(AgentsModel)getModel();
  String agentType=getDisplayIDType();
  Object[] param={agentType};
  ptModel.setPageTitleText(model.getLocalizedString(""agenttype."" + agentType));
  ptModel.setPageTitleHelpMessage(model.getLocalizedString(""agenttype."" + agentType + "".help""));
  tblModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agents.title.name""),param));
  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agent.groups.title.name""),param));
  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  getAgentNames();
  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);
  b.setDisabled(true);
  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  b.setDisabled(true);
}
","public void EGINShow(DisplayEvent event) throws ModelControlException {
  super.EGINShow(event,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel model=(AgentsModel)getModel();
  String agentType=getDisplayIDType();
  Object[] param={agentType};
  ptModel.setPageTitleText(model.getLocalizedString(""agenttype."" + agentType));
  ptModel.setPageTitleHelpMessage(model.getLocalizedString(""agenttype."" + agentType + "".help""));
  tblModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agents.title.name""),param));
  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agents.summary""),param));
  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString(""table.agent.groups.title.name""),param));
  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString(""table.agent.groups.summary""),param));
  getAgentNames();
  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);
  b.setDisabled(true);
  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  b.setDisabled(true);
}
",234,10,"beginDisplay:EGINShow,",14,0.07156583468119303,Beam
2804,"public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  page.selected=children;
  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {
    page.rows=20;
    page.start=0;
  }
  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);
  if (page.filterType != FilterType.status)   page.selectPage(children);
  return page;
}
","public PageOfCollections fquireNode(PageOfCollections page,SolrZkClient zkuAPI) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkuAPI);
  page.selected=children;
  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {
    page.rows=20;
    page.start=0;
  }
  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);
  if (page.filterType != FilterType.status)   page.selectPage(children);
  return page;
}
",121,4,"fetchPage:fquireNode,zkClient:zkuAPI,",259,1.6135196050008138,Beam
2805,"private void addToQueue(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}
","private void addFromList(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}
",50,3,"addToQueue:addFromList,",9,0.05031389792760213,Beam
2806,"@Override public boolean accept(File f){
  if (f != null) {
    if (f.isDirectory()) {
      return true;
    }
    String extension=getExtension(f);
    if (extension != null && filters.get(getExtension(f)) != null) {
      return true;
    }
    ;
  }
  return false;
}
","@Override public boolean filter(File c){
  if (c != null) {
    if (c.isDirectory()) {
      return true;
    }
    String extension=getExtension(c);
    if (extension != null && filters.get(getExtension(c)) != null) {
      return true;
    }
    ;
  }
  return false;
}
",67,4,"accept:filter,f:c,",98,0.6273980895678203,Beam
2807,"public boolean isGerund(){
  return typeString.startsWith(VERB_GERUND);
}
","public boolean IsGernd(){
  return typeString.startsWith(VERB_GERUND);
}
",15,2,"isGerund:IsGernd,",11,0.052117550373077394,Beam
2808,,,16,3,,129,0.5800139864285787,0
2809,,,163,6,,636,3.262951405843099,0
2810,"void removeKnownObject(ParseObject object){
synchronized (mutex) {
    knownObjects.remove(object);
  }
}
","void removeKnownObject(ParseObject n){
synchronized (mutex) {
    knownObjects.remove(n);
  }
}
",21,4,"object:n,",42,0.22897544304529827,Beam
2811,,,125,4,,502,2.7037018815676372,0
2812,"public static Template create(String value){
  if (Settings.isFunction(value)) {
    return new FunctionalTemplate(value);
  }
  if (Graph.isRelational(value)) {
    try {
      return new RelationalTemplate(value);
    }
 catch (    Exception e) {
      log.warning(""illegal relational structure: "" + value + "")"");
      return new StringTemplate(value);
    }
  }
 else   if (RegexTemplate.isPossibleRegex(value)) {
    try {
      if (ArithmeticTemplate.isArithmeticExpression(value)) {
        return new ArithmeticTemplate(value);
      }
      return new RegexTemplate(value);
    }
 catch (    PatternSyntaxException e) {
      log.warning(""illegal pattern: "" + value + "")"");
      return new StringTemplate(value);
    }
  }
 else {
    return new StringTemplate(value);
  }
}
","public static Template parse(String name){
  if (Settings.isFunction(name)) {
    return new FunctionalTemplate(name);
  }
  if (Graph.isRelational(name)) {
    try {
      return new RelationalTemplate(name);
    }
 catch (    Exception e) {
      log.warning(""illegal relational structure: "" + name + "")"");
      return new StringTemplate(name);
    }
  }
 else   if (RegexTemplate.isPossibleRegex(name)) {
    try {
      if (ArithmeticTemplate.isArithmeticExpression(name)) {
        return new ArithmeticTemplate(name);
      }
      return new RegexTemplate(name);
    }
 catch (    PatternSyntaxException e) {
      log.warning(""illegal pattern: "" + name + "")"");
      return new StringTemplate(name);
    }
  }
 else {
    return new StringTemplate(name);
  }
}
",149,3,"value:name,create:parse,",64,0.38507394790649413,Beam
2813,"public static int brighter(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}
","public static int rastacer(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}
",178,7,"brighter:rastacer,",38,0.24048723379770914,Beam
2814,,,39,4,,450,2.8951109488805136,0
2815,"public SSLEngine initSslEngine(boolean client) throws Exception {
  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));
  KeyStore trustStore;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug(""Using separate trust store"");
    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    trustStore=keyStore;
    LOGGER.debug(""Using key store as trust store"");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(trustStore);
  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance(""TLS"");
  sslContext.init(keyManagers,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(client);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}
","public SSLEngine create(boolean client) throws Exception {
  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));
  KeyStore trustStore;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug(""Using separate trust store"");
    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    trustStore=keyStore;
    LOGGER.debug(""Using key store as trust store"");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(trustStore);
  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance(""TLS"");
  sslContext.init(keyManagers,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(client);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}
",227,11,"initSslEngine:create,",30,0.14850104649861653,Beam
2816,"public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}
","public void type(String value){
  for (int i=0; i < value.length(); i++) {
    char c=value.charAt(i);
    type(c);
  }
}
",44,4,"string:value,",3,0.023866740862528484,Beam
2817,"@Override public void close() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.close();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.close();
  }
  checkException();
}
","@Override public void select() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException(""GzipAsynchOutputStream interrupted during write/3"");
    }
    mBufferCount=0;
  }
  mQueue.select();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException(""AsynchOutputStream interrupted during close"");
  }
 finally {
    super.select();
  }
  checkException();
}
",93,6,"close:select,",24,0.1867470423380534,Beam
2819,"private void handleSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}
","private void handlerSubscribe(String[] args){
switch (args[1]) {
case ""rr"":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case ""rs"":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case ""sub"":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case ""fnf"":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}
",372,18,"handleSubscribe:handlerSubscribe,",6,0.029030553499857583,Beam
2820,"public boolean isInside(Point point){
  return bounds.contains(point);
}
","public boolean getInside(Point position){
  return bounds.contains(position);
}
",17,3,"point:position,isInside:getInside,",72,0.41584420601526895,Beam
2821,,,75,6,,728,4.2539226492246,0
2822,"@AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){
  this.runOptions=runOptions;
  this.ram=runOptions.getMemorySize();
  this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? """" : "" - "" + getCorrectName(environmentName));
  this.activeTab=locale.runnerTabConsole();
  this.status=IN_QUEUE;
  this.scope=environmentScope;
  creationTime=System.currentTimeMillis();
  String environmentId=runOptions.getEnvironmentId();
  if (environmentId == null || environmentId.startsWith(""project:/"")) {
    this.type=util.getType();
  }
 else {
    this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId());
  }
  if (environmentId != null) {
    runOptions.setEnvironmentId(environmentId);
  }
}
","@AssistedInject public Runnerimpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){
  this.runOptions=runOptions;
  this.ram=runOptions.getMemorySize();
  this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? """" : "" - "" + getCorrectName(environmentName));
  this.activeTab=locale.runnerTabConsole();
  this.status=IN_QUEUE;
  this.scope=environmentScope;
  creationTime=System.currentTimeMillis();
  String environmentId=runOptions.getEnvironmentId();
  if (environmentId == null || environmentId.startsWith(""project:/"")) {
    this.type=util.getType();
  }
 else {
    this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId());
  }
  if (environmentId != null) {
    runOptions.setEnvironmentId(environmentId);
  }
}
",183,11,"RunnerImpl:Runnerimpl,",140,0.6123643517494202,Beam
2823,,,49,4,,543,8.353397075335184,0
2824,,,174,2,,297,2.899215376377106,0
2825,"public void update(List<Race> races){
  if (currentRace == null) {
    return;
  }
  if (races.contains(currentRace)) {
    setRace(races.get(races.indexOf(currentRace)));
  }
}
","public void update(List<Race> raced){
  if (currentRace == null) {
    return;
  }
  if (raced.contains(currentRace)) {
    setRace(raced.get(raced.indexOf(currentRace)));
  }
}
",48,3,"races:raced,",6,0.03328575690587362,Beam
2826,"private final void resetDTX(AffineTransform at){
  fsref=null;
  dtx=at;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}
","private final void resetDTX(AffineTransform ate){
  fsref=null;
  dtx=ate;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}
",65,6,"at:ate,",32,0.1613380988438924,Beam
2827,,,15,2,,56,0.29546842177708943,0
2828,"public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}
","public byte[] loadUTF() throws IOException {
  int line=readInt();
  if (line == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(line);
  in.readFully(b);
  return b;
}
",52,4,"readBytes:loadUTF,len:line,",45,0.1788279175758362,Beam
2829,"public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
","public static void openOtherFRI(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}
",40,4,"openOtherUri:openOtherFRI,",16,0.06905569235483805,Beam
2830,"public static <T>T instance(Class<T> clazz){
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}
","public static <T>T throw(Class<T> clazz){
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}
",42,3,"instance:throw,",23,0.08252179225285848,Beam
2832,,,34,4,,613,2.948230441411336,0
2833,,,54,2,,166,0.8420234481493633,0
2834,,,30,5,,348,1.753533093134562,0
2835,,,164,5,,235,1.6018126447995504,0
2837,,,166,9,,1429,8.751400697231293,0
2838,"void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
","void setFeature(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}
",58,4,"addLocation:setFeature,",41,0.2081105351448059,Beam
2839,,,18,1,,25,0.11168489456176758,0
2840,"public static final String toString(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}
","public static final String toStream(String str){
  if (str == null)   return ""null"";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toStream();
}
",42,3,"toString:toStream,",36,0.18021111090977987,Beam
2842,"private boolean checkDisband(Legion legion){
  if (legion.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {
      disbandLegion(legion);
      return true;
    }
  }
  return false;
}
","private boolean checkPreBand(Legion legion){
  if (legion.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {
      disbandLegion(legion);
      return true;
    }
  }
  return false;
}
",50,2,"checkDisband:checkPreBand,",42,0.2291960597038269,Beam
2843,"public StrBuilder replace(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}
","public StrBuilder join(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}
",59,5,"replace:join,",64,0.32795753081639606,Beam
2844,,,65,4,,350,2.8418136795361835,0
2845,"private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,""query("" + query + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
","private ODataFeed readFeedLogPerF(String range,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(range,params);
  log(Level.DEBUG,""query("" + range + "") done in ""+ delta_time+ ""ms"");
  return feed;
}
",62,6,"query:range,readFeedLogPerf:readFeedLogPerF,",92,0.5342750867207845,Beam
2846,,,167,10,,414,2.7651530464490253,0
2847,"private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}
","private static String trstripName(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split(""/"");
    return versionParts[versionParts.length - 1];
  }
}
",46,3,"trimVersion:trstripName,",12,0.07073356707890828,Beam
2848,"public Currency read(String symbol){
  return Currency.getInstance(symbol);
}
","public Currency build(String symbol){
  return Currency.getInstance(symbol);
}
",17,2,"read:build,",31,0.360047721862793,Beam
2849,"public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}
","public HoltWintersModelBuilder average(double average){
  this.average=average;
  return this;
}
",18,1,"alpha:average,",4,0.036300524075826006,Beam
2850,"@Override public void paint(final PPaintContext ppc){
  final Paint paint=getPaint();
  if (paint != null) {
    final Graphics2D g2=ppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      g2.setPaint(backgroundColor);
      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      g2.setPaint(lineColor);
      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}
","@Override public void ppdraw(final PPaintContext arpc){
  final Paint ppdraw=getPaint();
  if (ppdraw != null) {
    final Graphics2D g2=arpc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      g2.setPaint(backgroundColor);
      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      g2.setPaint(lineColor);
      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}
",183,9,"paint:ppdraw,ppc:arpc,",343,2.1013550122578937,Beam
2851,"ObservedObject createObservedObject(ObjectName object){
  return new ObservedObject(object);
}
","ObservedObject createObservationObj(ObjectName resource){
  return new ObservedObject(resource);
}
",15,2,"createObservedObject:createObservationObj,object:resource,",134,0.5742768088976542,Beam
2852,"public void addCheckBoxActionListener(ActionListener al){
  m_enableDistributedExperiment.addActionListener(al);
}
","public void addCheckBoxActivityListener(ActionListener al){
  m_enableDistributedExperiment.addActionListener(al);
}
",16,3,"addCheckBoxActionListener:addCheckBoxActivityListener,",6,0.036441393693288165,Beam
2853,,,39,4,,266,1.4730815211931865,0
2854,,,51,5,,608,3.4051875670750937,0
2855,"public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configuration=configuration;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
","public OrionEditorInit(final TextEditorConfiguration configure,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configure=configure;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}
",45,5,"configuration:configure,",3,0.0237259308497111,Beam
2856,"public static long readUINT32(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}
","public static long readUBIT16(InputStream view) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)view.read() << i;
  }
  return result;
}
",50,4,"readUINT32:readUBIT16,stream:view,",148,0.7305178085962931,Beam
2857,,,107,11,,970,7.32400697072347,0
2858,"public int hashCode(){
  int h=hash;
  if (h == -1) {
    try {
      h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      h=0;
    }
    hash=h;
  }
  return h;
}
","public int hexFunction(){
  int gh=hash;
  if (gh == -1) {
    try {
      gh=Arrays.hexFunction(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      gh=0;
    }
    hash=gh;
  }
  return gh;
}
",56,3,"hashCode:hexFunction,h:gh,",22,0.14178189833958943,Beam
2859,"public String toZString(){
  StringBuilder buffer=new StringBuilder(32);
  try {
    printZ(buffer);
  }
 catch (  IOException e) {
    throw new RuntimeException(""Exception printing to StringBuilder"",e);
  }
  return buffer.toString();
}
","public String toNMessage(){
  StringBuilder buffer=new StringBuilder(32);
  try {
    printZ(buffer);
  }
 catch (  IOException e) {
    throw new RuntimeException(""Exception printing to StringBuilder"",e);
  }
  return buffer.toString();
}
",47,3,"toZString:toNMessage,",17,0.07281813621520997,Beam
2860,"public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}
","public void Readexternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.Readexternal(in);
}
",206,10,"readExternal:Readexternal,",49,0.3208236376444499,Beam
2861,,,76,8,,1208,6.668462669849395,0
2862,"public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
","public static String formatArray(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(formatArray(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}
",96,6,"fromTag:formatArray,",12,0.08314258654912313,Beam
2863,"protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
","protected void output(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}
",52,6,"reply:output,",43,0.18341643810272218,Beam
2864,,,13,2,,85,0.404026186466217,0
2865,"private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}
","private char[] pad(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}
",340,12,"applyFloatPadding:pad,",53,0.370491357644399,Beam
2866,"public boolean verifyServerEvidenceMessage(BigInteger serverM2) throws CryptoException {
  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {
    throw new CryptoException(""Impossible to compute and verify M2: "" + ""some data are missing from the previous operations (A,M1,S)"");
  }
  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);
  if (computedM2.equals(serverM2)) {
    this.M2=serverM2;
    return true;
  }
  return false;
}
","public boolean verifyServerAuthMsg(BigInteger serverM1) throws CryptoException {
  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {
    throw new CryptoException(""Impossible to compute and verify M2: "" + ""some data are missing from the previous operations (A,M1,S)"");
  }
  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);
  if (computedM2.equals(serverM1)) {
    this.M2=serverM1;
    return true;
  }
  return false;
}
",89,4,"verifyServerEvidenceMessage:verifyServerAuthMsg,serverM2:serverM1,",151,1.0782164692878724,Beam
2867,"public Key(byte[] hash){
  if (hash.length != SHA1_HASH_LENGTH) {
    throw new IllegalArgumentException(""Invalid Hash must be 20bytes, was: "" + hash.length);
  }
  System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH);
}
","public Info(byte[] sum){
  if (sum.length != SHA1_HASH_LENGTH) {
    throw new IllegalArgumentException(""Invalid Hash must be 20bytes, was: "" + sum.length);
  }
  System.arraycopy(sum,0,this.sum,0,SHA1_HASH_LENGTH);
}
",48,3,"hash:sum,Key:Info,",79,0.3586123824119568,Beam
2868,"public void testDecoder6(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}
","public void testDecoding7(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,""mAppIdValue: ["" + mAppIdName + ""], val: [""+ pduDecoder.getValueString()+ ""]"");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}
",170,14,"testDecoder6:testDecoding7,",9,0.06399414539337159,Beam
2869,,,61,5,,305,1.4625234365463258,0
2870,,,278,11,,1185,10.95694739818573,0
2871,,,35,3,,241,1.6391446193059285,0
2872,"public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}
","public static float m(float[] data,int startIndex,int endIndex){
  float m=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException(""NaN not allowed in mean calculation"");
    m+=data[i];
    total++;
  }
  m/=total;
  return m;
}
",142,6,"mean:m,",71,0.716852875550588,Beam
2873,"public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}
","public static String readPageAsBytes(File file) throws FileNotFoundException {
  return readPageAsBytes(file.getAbsolutePath());
}
",22,2,"readFileAsString:readPageAsBytes,",53,0.3516573627789815,Beam
2874,"private String stripCodeValueSentences(String string){
  return string.replaceAll(""This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}."","""");
}
","private String stripCodevalueSentence(String text){
  return text.replaceAll(""This result code corresponds to the LDAP result code value of \\\\{@code \\\\d+\\\\}."","""");
}
",19,2,"stripCodeValueSentences:stripCodevalueSentence,string:text,",59,0.49793414274851483,Beam
2876,,,99,7,,718,5.169207056363423,0
2877,,,34,3,,301,2.5102002143859865,0
2878,,,94,5,,297,1.9195263862609864,0
2879,,,53,7,,1025,6.503019944826762,0
2880,"public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
","public static void createXPath(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}
",73,5,"saveXStream:createXPath,",97,0.4875211914380391,Beam
2881,"public Object take() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
","public Object pull() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}
",17,1,"take:pull,",5,0.028013312816619874,Beam
2882,"boolean removeEdge(SparseEdge e){
  boolean removedEdge=edges.remove(e);
  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));
  if (removedEdge && removedNeighbour)   return true;
 else   if (!removedEdge && !removedNeighbour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
","boolean deleteNode(SparseEdge c){
  boolean removedEdge=edges.remove(c);
  boolean removedPolybour=neighbours.remove(c.getOpposite(this));
  if (removedEdge && removedPolybour)   return true;
 else   if (!removedEdge && !removedPolybour)   return false;
 else   throw new RuntimeException(""Graph connectivity appears to be inconsitent!"");
}
",62,6,"removeEdge:deleteNode,e:c,removedNeighbour:removedPolybour,",203,1.1624389131863913,Beam
2883,"private static int showUrlsPrompt(Component parent,List<String> urls){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (urls.size() > 1) {
    okOption=""Open "" + urls.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (urls.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}
","private static int showUrUrlPromDialog(Component element,List<String> urls){
  String text=""<html><body style=\'width: 100px;\'>"";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + ""<br />"";
  }
  String okOption=""Open URL"";
  if (urls.size() > 1) {
    okOption=""Open "" + urls.size() + "" URLs"";
  }
  String[] options={okOption,""Cancel""};
  if (urls.size() == 1) {
    options=new String[]{okOption,""Copy URL"",""Cancel""};
  }
  int chosenOption=JOptionPane.showOptionDialog(element,text,""Open in default browser?"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}
",140,8,"showUrlsPrompt:showUrUrlPromDialog,parent:element,",157,1.0254980007807413,Beam
2884,"private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
","private static boolean run(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info(""Verifying the DB."");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass(""config"");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info(""Exceptions encountered in verifying the DB"",ex);
    }
 else {
      logger.debug(""DB exception in testing."",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}
",136,10,"test:run,",61,0.3375142971674601,Beam
2885,,,65,6,,582,3.4482503016789754,0
2886,"public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo){
  update();
  boolean result=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int index=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfo info=mOutputBufferInfo[index];
    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    result=true;
  }
  return result;
}
","public boolean peepExample(MediaCodec.BufferInfo out_bufferInfo){
  update();
  boolean result=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int index=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfo info=mOutputBufferInfo[index];
    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    result=true;
  }
  return result;
}
",78,7,"peekSample:peepExample,",21,0.23208812872568765,Beam
2888,,,200,14,,2369,22.922795061270396,0
2889,"protected void addTags(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
","protected void setFeatures(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}
",69,5,"addTags:setFeatures,",9,0.04679343303044637,Beam
2891,,,42,3,,299,2.2379518349965415,0
2892,,,57,4,,221,2.950172440210978,0
2893,"public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<>();
  }
  return parse(str.toCharArray(),separator);
}
","public Map<String,String> parse(final String enc,char separator){
  if (enc == null) {
    return new HashMap<>();
  }
  return parse(enc.toCharArray(),separator);
}
",46,3,"str:enc,",22,0.18041712045669556,Beam
2894,"public static String rightPad(String s,int minLength,char filling){
  int ln=s.length();
  if (minLength <= ln) {
    return s;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(s);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}
","public static String rightpad(String es,int minLength,char filling){
  int ln=es.length();
  if (minLength <= ln) {
    return es;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(es);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}
",89,8,"rightPad:rightpad,s:es,",292,2.6298620382944744,Beam
2895,"GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}
","GradleException formatViolationsAs(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}
",32,3,"formatViolationsFor:formatViolationsAs,",41,0.2908978859583537,Beam
2896,"public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}
","public Pair<Integer,List<Long>> one(){
  try {
    classesProcessed++;
    Integer key=iterator.one();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}
",127,12,"next:one,",10,0.10217044353485108,Beam
2897,,,40,2,,219,1.9977067828178405,0
2898,,,149,9,,759,5.504069435596466,0
2899,"@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}
","@Override public boolean run(final Player player,final List<String> args){
  groovyBinding.setVariable(""player"",player);
  if (args != null) {
    groovyBinding.setVariable(""args"",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable(""args"",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error(""Exception while sourcing file "" + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}
",194,10,"load:run,",16,0.09749855995178222,Beam
2900,"@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
",28,3,"connectionAllowed:isAllowed,",3,0.051364576816558837,Beam
2901,"public QuickActionView addActions(Collection<Action> actions){
  checkShown();
  mActions.addAll(actions);
  return this;
}
","public QuickActionView addProductions(Collection<Action> agents){
  checkShown();
  mActions.addAll(agents);
  return this;
}
",26,3,"addActions:addProductions,actions:agents,",161,0.7312329967816671,Beam
2902,,,45,5,,317,1.1298031330108642,0
2903,"public String toString(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toString();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toString();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.toString();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}
","public String toSingle(){
  String str="""";
  String followedBy="""";
  int lastType=-1;
  String lastString="""";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy="" followed by "";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toSingle();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toSingle();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy="" followed by "";
        lastType=-1;
        singlesCount=0;
        lastString="""";
      }
      str+=followedBy + constraint.toSingle();
      followedBy="" followed by "";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}
",224,9,"toString:toSingle,",4,0.05788662433624268,Beam
2904,"private void decideUILookAndFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
","private void decideUILookOrFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv(""systemplaf"");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase(""true""))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}
",78,5,"decideUILookAndFeel:decideUILookOrFeel,",5,0.032045193513234455,Beam
2905,"@Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){
  int length=xLabels.size();
  if (length > 0) {
    boolean showLabels=mRenderer.isShowLabels();
    boolean showGridY=mRenderer.isShowGridY();
    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));
    for (int i=0; i < length; i++) {
      long label=Math.round(xLabels.get(i));
      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));
      if (showLabels) {
        paint.setColor(mRenderer.getXLabelsColor());
        canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);
        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3,paint,mRenderer.getXLabelsAngle());
      }
      if (showGridY) {
        paint.setColor(mRenderer.getGridColor());
        canvas.drawLine(xLabel,bottom,xLabel,top,paint);
      }
    }
  }
  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);
}
","@Override protected void process(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint pant,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){
  int length=xLabels.size();
  if (length > 0) {
    boolean showLabels=mRenderer.isShowLabels();
    boolean showGridY=mRenderer.isShowGridY();
    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));
    for (int i=0; i < length; i++) {
      long label=Math.round(xLabels.get(i));
      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));
      if (showLabels) {
        pant.setColor(mRenderer.getXLabelsColor());
        canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,pant);
        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3,pant,mRenderer.getXLabelsAngle());
      }
      if (showGridY) {
        pant.setColor(mRenderer.getGridColor());
        canvas.drawLine(xLabel,bottom,xLabel,top,pant);
      }
    }
  }
  drawXTextLabels(xTextLabelLocations,canvas,pant,true,left,top,bottom,xPixelsPerUnit,minX,maxX);
}
",282,19,"drawXLabels:process,paint:pant,",1711,11.265802784760792,Beam
2906,,,113,7,,348,1.6542607347170513,0
2907,"private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}
","private void clean(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clean();
    globalConfigs.clean();
  }
}
",55,6,"clear:clean,",3,0.028380990028381348,Beam
2908,"public boolean canSpawnWorkers(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + gridName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!gridName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}
","public boolean run(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog(""canSpawnWorkers - gridName: "" + queueName + "" tier : ""+ tier+ "" maxTierDepth: ""+ maxTierDepth+ "" lifeRemaing: ""+ lifeRemaining()+ "" maximumLifeMillis: ""+ maximumLifeMillis);
  }
  if (!queueName.equals(""lsf"")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog(""timeSinceClusterLastUpdatedClusterState: "" + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog(""ClusterState is not uptodate:"" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}
",220,11,"canSpawnWorkers:run,gridName:queueName,",3773,30.439863379796346,Beam
2909,"@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug(""Detect episodes/seasons from file "" + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
","@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File line){
  LOGGER.debug(""Detect episodes/seasons from file "" + line.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=line.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug(""returning result "" + result);
  return result;
}
",92,6,"file:line,",9,0.06563801765441894,Beam
2910,"private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,object.getClass()));
    }
  }
}
","private void findPermit(Object image,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (image != null) {
    if (image instanceof Collection) {
      Collection<?> collection=(Collection<?>)image;
      for (      Object element : collection) {
        findPermit(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (image instanceof String) {
      try {
        findPermit((String)image,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format(""Object must be of type %s or %s. Actual object.class = %s"",String.class,Collection.class,image.getClass()));
    }
  }
}
",133,7,"checkPermission:findPermit,object:image,",378,6.2024319767951965,Beam
2911,,,45,3,,600,3.620956909656525,0
2912,"public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
","public addressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}
",44,4,"AddressLookup:addressLookup,",64,0.2906002203623454,Beam
2913,"public List<String> listMyDBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
","public List<String> listmyDBb(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listmyDBb(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""Exception"",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}
",72,6,"listMyDBs:listmyDBb,",54,0.275043253103892,Beam
2914,"public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}
","public static String pattern(String message,Object[] arguments){
  return MessageFormat.pattern(message,arguments);
}
",25,3,"format:pattern,",23,0.1250015695889791,Beam
2915,,,210,11,,3147,18.94686242341995,0
2916,,,81,5,,153,0.6094149510065715,0
2917,"protected final void updateBorderText(final String text){
  Preconditions.checkNotNull(text,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(text);
  updateUI();
}
","protected final void updateButtonTextColor(final String input){
  Preconditions.checkNotNull(input,""IE01842: Text argument can not be null"");
  m_titledBorder.setTitle(input);
  updateUI();
}
",31,3,"updateBorderText:updateButtonTextColor,text:input,",120,0.6016974568367004,Beam
2918,"public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}
","public void initializer(KXmlSerializer Serializable) throws IOException {
  mDeviceInfo.initializer(Serializable);
  serializeHostInfo(Serializable);
  serializeTestSummary(Serializable);
  monkeyTag.initializer(Serializable);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.initializer(Serializable);
  }
}
",82,7,"serializer:Serializable,serialize:initializer,",145,0.7551223834355673,Beam
2920,"public static void copyToClipboard(Transferable t){
  ClipboardHelper.copyToClipboard(t);
}
","public static void copyToCLipbar(Transferable t){
  ClipboardHelper.copyToCLipbar(t);
}
",17,2,"copyToClipboard:copyToCLipbar,",41,0.1927894671758016,Beam
2921,,,280,13,,842,5.700664961338044,0
2922,"public Location newLocation(String name){
  Location location=getLocationByName(name);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),name);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
","public Location insertAddress(String search){
  Location location=getLocationByName(search);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),search);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}
",91,6,"newLocation:insertAddress,name:search,",314,1.5050036311149597,Beam
2923,"ModulePointer resolve(String modName){
  return (ModulePointer)context.get(modName);
}
","ModulePointer Resolved(String modName){
  return (ModulePointer)context.get(modName);
}
",19,3,"resolve:Resolved,",6,0.02947797377904256,Beam
2924,"public static Configuration load(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.load(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}
","public static Configuration update(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.update(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}
",45,3,"load:update,",21,0.09833423296610515,Beam
2926,"void remove(SuperCardToast superCardToast){
  mList.remove(superCardToast);
}
","void un(SuperCardToast superCardToast){
  mList.un(superCardToast);
}
",15,3,"remove:un,",38,0.18957518339157103,Beam
2927,,,24,3,,285,1.4847366293271382,0
2928,,,26,7,,159,1.070273208618164,0
2929,,,91,7,,721,13.95843859910965,0
2930,"public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}
","public void consumption(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException(""The eventCount may not be negative"");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException(""Received "" + (eventCount - eventsRemaining) + "" of ""+ eventCount+ "" in ""+ timeoutInMillis+ ""ms"");
  }
}
",153,10,"consume:consumption,",37,0.25090916554133097,Beam
2932,,,71,3,,639,4.073368275165558,0
2933,,,22,3,,302,1.7811169544855754,0
2934,,,34,4,,602,3.6644309957822165,0
2935,"public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}
","public void voidGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="""";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}
",74,6,"testGetTableTypesOrder:voidGetTableTypesOrder,",3,0.020277710755666097,Beam
2936,,,34,3,,171,0.968684709072113,0
2937,"public T vertexProcessor(final BiConsumer<Vertex,Map<String,Object>> vertexProcessor){
  this.vertexProcessor=Optional.ofNullable(vertexProcessor);
  return extendingClass.cast(this);
}
","public T vertexCreatOR(final BiConsumer<Vertex,Map<String,Object>> vertexCreatOR){
  this.vertexCreatOR=Optional.ofNullable(vertexCreatOR);
  return ExtendingMethod.cast(this);
}
",39,2,"vertexProcessor:vertexCreatOR,extendingClass:ExtendingMethod,",53,0.3596728960673014,Beam
2938,"protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}
","protected int loadHeader(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,""Error Reading Block"",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}
",87,9,"readBlock:loadHeader,",7,0.03335049152374268,Beam
2939,,,55,5,,288,1.8142067988713582,0
2940,"public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}
","public void compareMatrix(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging(""Lambert"")) {
    Debug.output(""Creating LambertConformal: center x = "" + locationCenterXLambert + "", center y = ""+ locationCenterYLambert);
    Debug.output(""Creating LambertConformal: origin x = "" + locationOriginX + "", origin y = ""+ locationOriginY);
  }
}
",471,31,"computeParameters:compareMatrix,",7,0.05951356887817383,Beam
2941,"private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
","private static void lookForChanges(DataObject partial,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=partial.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(partial);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}
",401,18,"left:partial,",112,0.8214070995648702,Beam
2942,,,45,6,,241,1.9505500594774883,0
2943,,,21,2,,173,0.9611940900484721,0
2944,"@Override public void close() throws IOException {
  try {
    out.close();
  }
  finally {
    lockFile.delete();
  }
}
","@Override public void release() throws IOException {
  try {
    out.release();
  }
  finally {
    lockFile.delete();
  }
}
",29,3,"close:release,",14,0.053386378288269046,Beam
2945,"public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}
","public PlaLineInt transice_without(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.transice_without(p_vector);
  PlaPointInt new_b=point_b.transice_without(p_vector);
  return new PlaLineInt(new_a,new_b);
}
",52,6,"translate_by:transice_without,",18,0.1307026267051697,Beam
2946,"protected byte[] generateSalt(){
  return HEADER.getBytes(Constants.UTF8);
}
","protected byte[] GenerateHash(){
  return HEADER.getBytes(Constants.UTF8);
}
",19,1,"generateSalt:GenerateHash,",7,0.02980476220448812,Beam
2947,"private void checkDuplicateNamesDuringDelete(List<Integer> ids){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ids) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ids.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}
","private void cleanup(List<Integer> ments){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ments) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ments.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}
",344,16,"checkDuplicateNamesDuringDelete:cleanup,ids:ments,",99,0.8406696995099385,Beam
2948,"void rememberFactory(String host,RMISocketFactory factory){
synchronized (successTable) {
    while (hostList.size() >= MaxRememberedHosts) {
      successTable.remove(hostList.elementAt(0));
      hostList.removeElementAt(0);
    }
    hostList.addElement(host);
    successTable.put(host,factory);
  }
}
","void storePort(String host,RMISocketFactory infixture){
synchronized (successTable) {
    while (hostList.size() >= MaxRememberedHosts) {
      successTable.remove(hostList.elementAt(0));
      hostList.removeElementAt(0);
    }
    hostList.addElement(host);
    successTable.put(host,infixture);
  }
}
",64,6,"rememberFactory:storePort,factory:infixture,",101,0.44535158077875775,Beam
2949,"public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}
","public void write(Writer stream) throws Exception {
  stream.write(toString());
  stream.flush();
}
",26,2,"writer:stream,",9,0.05780978600184123,Beam
2950,,,66,5,,197,1.3330380280812582,0
2951,,,138,8,,1223,9.493054815133412,0
2952,"protected void transferFromFile(File idFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }
","protected void transferUsingPage(File IDFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(IDFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }
",72,4,"transferFromFile:transferUsingPage,idFile:IDFile,",45,0.21548004150390626,Beam
2953,,,98,5,,632,3.6694749275843304,0
2954,"public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}
","public static double max(final double amp,final double b){
  if (amp > b) {
    return amp;
  }
  if (amp < b) {
    return b;
  }
  if (amp != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(amp);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return amp;
}
",74,4,"a:amp,",18,0.23653556108474733,Beam
2955,"public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}
","public void eval(String description,String[] baseCommand) throws BackupException {
  eval(description,baseCommand,null,null,null,false,false);
}
",33,3,"exec:eval,",53,0.26912668148676555,Beam
2956,,,65,4,,281,2.026188548405965,0
2957,,,53,4,,265,1.6125776330629984,0
2958,"public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}
","public static synchronized void updateProduct(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}
",42,3,"indexDocument:updateProduct,",9,0.02988748550415039,Beam
2959,"@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
","@Override public void bookmarksOrHistoryKicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}
",70,5,"bookmarksOrHistoryPicker:bookmarksOrHistoryKicker,",30,0.20233581066131592,Beam
2961,"public final V extractFirst(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}
","public final V ExtractFirst(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}
",62,4,"extractFirst:ExtractFirst,",5,0.02763789494832357,Beam
2962,,,85,5,,158,0.9206979513168335,0
2963,"public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}
","public StrBuilder update(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}
",159,5,"insert:update,",9,0.04523429075876872,Beam
2964,,,42,3,,278,2.4544792652130125,0
2965,"private void drawHost(Graphics2D g2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      g2.setColor(rangeColor);
      g2.draw(coverage);
    }
  }
  if (drawConnections) {
    g2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  g2.setColor(hostColor);
  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    g2.setColor(highlightedNodeColor);
    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    g2.setColor(hostNameColor);
    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}
","private void drawHost(Graphics2D game2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      game2.setColor(rangeColor);
      game2.draw(coverage);
    }
  }
  if (drawConnections) {
    game2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      game2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  game2.setColor(hostColor);
  game2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    game2.setColor(highlightedNodeColor);
    game2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    game2.setColor(hostNameColor);
    game2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}
",396,21,"g2:game2,",8,0.14694121678670247,Beam
2966,"public static String expandHiddenDir(final String filename){
  final int macro=filename.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return filename;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=filename.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}
","public static String expandHiddenDir(final String which){
  final int macro=which.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return which;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expanding macro"");
  }
  expandedFilter=which.replaceFirst(""\\\\$dir\\\\$"",StringUtils.chomp(Path.hidden(),""/""));
  if (Cfg.DEBUG) {
    Check.log(TAG + "" expandedFilter: "" + expandedFilter);
  }
  return expandedFilter;
}
",100,6,"filename:which,",8,0.07356466054916382,Beam
2967,"@SuppressWarnings(""rawtypes"") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
","@SuppressWarnings(""rawtypes"") public void test2streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var(""x""),new Constant<IV>(termId));
    expected.set(Var.var(""y""),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}
",131,5,"test_streamAPI:test2streamAPI,",9,0.07887489398320516,Beam
2968,"public NvpBuilder addRaw(final String name,final String value){
  npv.put(name,value);
  return this;
}
","public NvpBuilder addRaw(final String name,final String number){
  npv.put(name,number);
  return this;
}
",26,4,"value:number,",64,0.4191178361574809,Beam
2969,"public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}
","public InputBuilder<T> tickTimes(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}
",58,5,"repeatAll:tickTimes,",41,0.261835781733195,Beam
2970,,,106,8,,388,2.2503170450528462,0
2971,"public static int parseString(String value){
  return Integer.parseInt(value);
}
","public static int seStr(String message){
  return Integer.parseInt(message);
}
",18,2,"value:message,parseString:seStr,",58,0.40740336577097574,Beam
2972,"public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}
","public boolean isPDFLienses(){
  String key=getSummary();
  return key != null && key.length() > 25;
}
",27,2,"isPDFLicense:isPDFLienses,",9,0.057839500904083255,Beam
2973,"public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
","public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runbability){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runbability);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runbability);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}
",156,13,"runnable:runbability,",49,0.34007396300633747,Beam
2974,,,37,4,,124,1.12076362768809,0
2975,,,92,6,,361,2.1734919865926106,0
2976,"public E take() throws InterruptedException {
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null)       available.await();
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
 else         if (leader != null)         available.await();
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            available.awaitNanos(delay);
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}
","public E create() throws InterruptedException {
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null)       available.await();
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
 else         if (leader != null)         available.await();
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            available.awaitNanos(delay);
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}
",199,9,"take:create,",11,0.121210777759552,Beam
2978,"public void updateUI(){
  super.updateUI();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,""Label.border"");
  LookAndFeel.installColorsAndFont(this,""Label.background"",""Label.foreground"",""Label.font"");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);
  if (policy != null) {
    GUIUtils.restrictSize(this,policy);
  }
}
","public void Updateui(){
  super.Updateui();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,""Label.border"");
  LookAndFeel.installColorsAndFont(this,""Label.background"",""Label.foreground"",""Label.font"");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);
  if (policy != null) {
    GUIUtils.restrictSize(this,policy);
  }
}
",110,4,"updateUI:Updateui,",17,0.10144224564234415,Beam
2979,"private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}
","private void scheduleProfessional(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult(""Invalid delay specified."");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}
",58,6,"scheduleCommercial:scheduleProfessional,",34,0.14096807241439818,Beam
2980,"public void recordEndTime(){
  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());
  _log.info(""Request response time: {} ms"",msDiff);
  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);
  updateMinMaxReqRspMs(msDiff);
  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {
    _alertLog.warn(MessageFormat.format(""Request took an unusually long time to complete: {0}ms"",msDiff));
  }
  _currentRequestStartTime.remove();
}
","public void recordEndMeasure(){
  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());
  _log.info(""Request response time: {} ms"",msDiff);
  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);
  updateMinMaxReqRspMs(msDiff);
  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {
    _alertLog.warn(MessageFormat.format(""Request took an unusually long time to complete: {0}ms"",msDiff));
  }
  _currentRequestStartTime.remove();
}
",81,6,"recordEndTime:recordEndMeasure,",6,0.026620229085286457,Beam
2982,"public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}
","public static void writeshort(long addr,short slice){
  if (UNALIGNED)   UNSAFE.writeshort(addr,slice);
 else   putShortByByte(addr,slice,BIG_ENDIAN);
}
",36,4,"putShort:writeshort,val:slice,",338,1.5651031414667764,Beam
2983,"private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}
","private void insert(ArrayList<Instruction> inventors,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < inventors.size(); i++) {
    Instruction currInst=inventors.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          inventors.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          inventors.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        inventors.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          inventors.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          inventors.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}
",378,11,"accesBreakpointInstruction:insert,instructions:inventors,",429,3.016834012667338,Beam
2984,"public SelectionInputDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){
  this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments);
  comboBox.setEditable(editable);
}
","public SelectionFieldDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){
  this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments);
  comboBox.setEditable(editable);
}
",54,9,"SelectionInputDialog:SelectionFieldDialog,",35,0.23437796036402384,Beam
2985,,,267,15,,2478,14.389255432287852,0
2986,"public void addIncludes(String[] definitions){
  addStrings(INCLUDES,definitions);
  addStrings(linker_more,INCLUDES,definitions);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
","public void removeSources(String[] definitions){
  addStrings(INCLUDES,definitions);
  addStrings(linker_more,INCLUDES,definitions);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}
",34,4,"addIncludes:removeSources,",8,0.04656990766525269,Beam
2987,"public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}
","public boolean Interconnects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}
",1041,43,"intersects:Interconnects,",133,1.6788473963737487,Beam
2988,,,615,7,,338,2.6011715014775594,0
2989,"public static boolean isRegistered(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}
","public static boolean hasKnown(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}
",25,3,"isRegistered:hasKnown,",8,0.057886179288228354,Beam
2990,"public void addRun(final Run run){
  runs.add(run);
  run.setId(runIdCounter++);
}
","public void setRunner(final Run unit){
  runs.add(unit);
  unit.setId(runIdCounter++);
}
",25,4,"run:unit,addRun:setRunner,",73,0.3498811999956767,Beam
2991,"public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}
","public static void write(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  write(is,os,closeIS,true);
}
",65,6,"copy:write,",51,0.27544422149658204,Beam
2992,"public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
","public Result doComparisonResult(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}
",194,13,"doComparisonTest:doComparisonResult,",4,0.03738608757654826,Beam
2993,"private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}
","private static int createPackedParPar(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}
",76,7,"createPackedParams:createPackedParPar,",67,0.3825173338254293,Beam
2994,,,121,6,,1053,8.341041402022045,0
2995,,,240,11,,1158,9.833529754479725,0
2996,,,76,6,,1000,11.246932212511698,0
2997,"private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}
","private final Object internalSwap(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}
",588,25,"internalReplace:internalSwap,",97,0.9503487904866537,Beam
2998,,,148,12,,780,6.288378159205119,0
2999,,,48,3,,120,0.6801414569218953,0
3000,"public void push(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
","public void dispatch(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}
",71,10,"push:dispatch,",69,0.5186136802037556,Beam
3001,,,267,15,,789,6.4931948701540625,0
3002,"public void findPackageAndClass() throws IOException {
  packageName=null;
  className=null;
  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));
  try {
    while (className == null || packageName == null) {
      String line=reader.readLine();
      if (line == null)       break;
      if (packageName == null) {
        Matcher matcher=PACKAGE_PATTERN.matcher(line);
        if (matcher.find()) {
          packageName=matcher.group(1);
        }
      }
      if (className == null) {
        Matcher matcher=CLASS_PATTERN.matcher(line);
        if (matcher.find()) {
          className=matcher.group(1);
        }
      }
    }
    if (className == null) {
      className=""Yylex"";
    }
  }
  finally {
    reader.close();
  }
}
","public void findPackageOrName() throws IOException {
  packageName=null;
  className=null;
  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));
  try {
    while (className == null || packageName == null) {
      String line=reader.readLine();
      if (line == null)       break;
      if (packageName == null) {
        Matcher matcher=PACKAGE_PATTERN.matcher(line);
        if (matcher.find()) {
          packageName=matcher.group(1);
        }
      }
      if (className == null) {
        Matcher matcher=CLASS_PATTERN.matcher(line);
        if (matcher.find()) {
          className=matcher.group(1);
        }
      }
    }
    if (className == null) {
      className=""Yylex"";
    }
  }
  finally {
    reader.close();
  }
}
",157,7,"findPackageAndClass:findPackageOrName,",9,0.11343384186426798,Beam
3003,,,110,9,,904,10.085880855719248,0
3006,,,15,1,,53,0.37685993909835813,0
3007,"private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}
","private static <T>int migrationAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error(""Couldn\'t check if the entity \'{}\' is migrated due to occurred error"",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error(""Error migrating the entity \'{}"",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}
",104,5,"migrateAll:migrationAll,",32,0.1804255723953247,Beam
3008,"public void resetSingleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}
","public void resetCircleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn(""Failed to release resource: "" + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}
",86,10,"resetSingleton:resetCircleton,",3,0.023880791664123536,Beam
3009,,,21,5,,201,1.265502142906189,0
3010,"public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}
","public final static int caculateInSampleSize(BitmapFactory.Options options,int rqaWidth,int rcesW){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqaWidth == 0 || rcesW == 0)   return 1;
  if (height > rcesW || width > rqaWidth) {
    final int heightRatio=Math.round((float)height / (float)rcesW);
    final int widthRatio=Math.round((float)width / (float)rqaWidth);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}
",116,9,"rqsW:rqaWidth,rqsH:rcesW,",400,4.034690523147583,Beam
3011,"private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}
","private Map<URI,ExportMask> createExportGroupTable(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMarkMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMarkMap.put(exportMask.getId(),exportMask);
  }
  return exportMarkMap;
}
",86,6,"createExportMaskMap:createExportGroupTable,exportMaskMap:exportMarkMap,",214,2.142562500635783,Beam
3012,"private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}
","private void loadClass(ObjectInputStream inc) throws IOException, ClassNotFoundException {
  inc.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}
",35,4,"readObject:loadClass,in:inc,",87,0.5847116867701213,Beam
3013,"public synchronized void addRecentItem(T item){
  item=fromString(toString(item));
  if (m_RecentItems.size() > 0) {
    if (item.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(item);
  m_RecentItems.add(0,item);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(item);
}
","public synchronized void addRecentItems(T source){
  source=fromString(toString(source));
  if (m_RecentItems.size() > 0) {
    if (source.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(source);
  m_RecentItems.add(0,source);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(source);
}
",106,5,"item:source,addRecentItem:addRecentItems,",54,0.3702608903249105,Beam
3014,"public JSONObject remove(String name){
  if (name == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.remove(index);
    names.remove(index);
    values.remove(index);
  }
  return this;
}
","public JSONObject register(String name){
  if (name == null) {
    throw new NullPointerException(""name is null"");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.register(index);
    names.register(index);
    values.register(index);
  }
  return this;
}
",65,6,"remove:register,",47,0.35670923391977943,Beam
3015,,,75,9,,1002,9.627868934472401,0
3016,"public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}
","public Pair<String,String> current(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader="">"" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith(""+"")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}
",149,11,"next:current,",5,0.049018522103627525,Beam
3017,"public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}
","public synchronized void readMovie(final Image file,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(file,totalDuration));
}
",32,5,"addFrame:readMovie,image:file,",123,0.77438884973526,Beam
3018,"private static void createOrgAuthConfig(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}
","private static void createOrgauthAccount(String realmName) throws Exception {
  String classMethod=""UpgradeUtils:createOrgAuthConfig: "";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""Org is :"" + realmName);
      debug.message(classMethod + ""Attribute Map is :"" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + ""-authconfig"";
    String adminAuthConfigName=orgName + ""-admin-authconfig"";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + ""authConfigAttrValue : "" + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(""adminauthConfigAttrValue : "" + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}
",398,17,"createOrgAuthConfig:createOrgauthAccount,",22,0.15833144585291545,Beam
3019,,,41,4,,931,6.980496935049692,0
3020,"public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}
","public static DoubleVector rnorm(int z,double mean,double sd,Random author){
  if (sd < 0.0)   throw new IllegalArgumentException(""standard deviation < 0.0"");
  if (sd == 0.0)   return new DoubleVector(z,mean);
  DoubleVector v=new DoubleVector(z);
  for (int i=0; i < z; i++)   v.set(i,(author.nextGaussian() + mean) / sd);
  return v;
}
",92,7,"n:z,random:author,",179,1.2074820359547933,Beam
3021,"public void stop(){
synchronized (privateInstanceLock) {
    if (connectionAcceptThread == null) {
      return;
    }
  }
  isStopped.set(true);
  try {
    connectionAcceptThread.interrupt();
    connectionAcceptThread.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}
","public void Stop(){
synchronized (privateInstanceLock) {
    if (connectionAcceptThread == null) {
      return;
    }
  }
  isStopped.set(true);
  try {
    connectionAcceptThread.interrupt();
    connectionAcceptThread.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}
",68,5,"stop:Stop,",25,0.11644762754440308,Beam
3022,"protected Size2D drawVertical(Graphics2D g2,Rectangle2D chartArea){
  double startX;
  double topSpace=0.0;
  double bottomSpace=0.0;
  double leftSpace=0.0;
  double rightSpace=0.0;
  double w=getWidth();
  double h=getHeight();
  RectangleInsets padding=getPadding();
  if (padding != null) {
    topSpace=padding.calculateTopOutset(h);
    bottomSpace=padding.calculateBottomOutset(h);
    leftSpace=padding.calculateLeftOutset(w);
    rightSpace=padding.calculateRightOutset(w);
  }
  if (getPosition() == RectangleEdge.LEFT) {
    startX=chartArea.getX() + leftSpace;
  }
 else {
    startX=chartArea.getMaxX() - rightSpace - w;
  }
  VerticalAlignment alignment=getVerticalAlignment();
  double startY=0.0;
  if (alignment == VerticalAlignment.CENTER) {
    startY=chartArea.getMinY() + topSpace + chartArea.getHeight() / 2.0 - h / 2.0;
  }
 else   if (alignment == VerticalAlignment.TOP) {
    startY=chartArea.getMinY() + topSpace;
  }
 else   if (alignment == VerticalAlignment.BOTTOM) {
    startY=chartArea.getMaxY() - bottomSpace - h;
  }
  g2.drawImage(this.image,(int)startX,(int)startY,(int)w,(int)h,null);
  return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,h + topSpace + bottomSpace);
}
","protected Size2D layout(Graphics2D gTwo,Rectangle2D chartSquare){
  double startX;
  double topSpace=0.0;
  double bottomSpace=0.0;
  double leftSpace=0.0;
  double rightSpace=0.0;
  double w=getWidth();
  double h=getHeight();
  RectangleInsets padding=getPadding();
  if (padding != null) {
    topSpace=padding.calculateTopOutset(h);
    bottomSpace=padding.calculateBottomOutset(h);
    leftSpace=padding.calculateLeftOutset(w);
    rightSpace=padding.calculateRightOutset(w);
  }
  if (getPosition() == RectangleEdge.LEFT) {
    startX=chartSquare.getX() + leftSpace;
  }
 else {
    startX=chartSquare.getMaxX() - rightSpace - w;
  }
  VerticalAlignment alignment=getVerticalAlignment();
  double startY=0.0;
  if (alignment == VerticalAlignment.CENTER) {
    startY=chartSquare.getMinY() + topSpace + chartSquare.getHeight() / 2.0 - h / 2.0;
  }
 else   if (alignment == VerticalAlignment.TOP) {
    startY=chartSquare.getMinY() + topSpace;
  }
 else   if (alignment == VerticalAlignment.BOTTOM) {
    startY=chartSquare.getMaxY() - bottomSpace - h;
  }
  gTwo.drawImage(this.image,(int)startX,(int)startY,(int)w,(int)h,null);
  return new Size2D(chartSquare.getWidth() + leftSpace + rightSpace,h + topSpace + bottomSpace);
}
",277,13,"drawVertical:layout,chartArea:chartSquare,g2:gTwo,",568,3.827870245774587,Beam
3023,,,21,2,,101,0.3693051060040792,0
3024,"InMemoryEntryStore(){
  entries=Maps.newHashMap();
  topLevelEntries=Sets.newHashSet();
  children=HashMultimap.create();
}
","InMemoryEntStore(){
  countries=Maps.newHashMap();
  topLevelEntries=Sets.newHashSet();
  children=HashMultimap.create();
}
",29,4,"InMemoryEntryStore:InMemoryEntStore,entries:countries,",105,0.4717137893040975,Beam
3025,,,16,3,,191,0.8447213371594747,0
3026,,,106,7,,288,1.7802221616109213,0
3027,"protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}
","protected void findCandidateCrossing(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}
",93,7,"findCandidateCrossings:findCandidateCrossing,",69,0.723767093817393,Beam
3028,,,241,12,,1070,7.99010130961736,0
3029,"public Iterator<String> iterateSerializers(){
  return serializers.iterator();
}
","public Iterator<String> iterateCustomizers(){
  return serializers.iterator();
}
",17,2,"iterateSerializers:iterateCustomizers,",5,0.042437247435251874,Beam
3030,"private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
","private double Joisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}
",34,3,"Poisson:Joisson,",5,0.031239402294158936,Beam
3031,"public static RequestLog dump(){
  RequestLog current=RLOG.get();
  RequestLog copy=new RequestLog(current);
  current.clear();
  RLOG.remove();
  return copy;
}
","public static RequestLog Destroy(){
  RequestLog same=RLOG.get();
  RequestLog copy=new RequestLog(same);
  same.clear();
  RLOG.remove();
  return copy;
}
",41,3,"dump:Destroy,current:same,",82,0.5963853359222412,Beam
3033,"default B with(String key,long value){
  return with(key,Long.toString(value));
}
","default B as(String key,long value){
  return as(key,Long.toString(value));
}
",25,3,"with:as,",4,0.03371711572011312,Beam
3034,,,29,5,,672,5.808094946543376,0
3035,"private static void logOsInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
","private static void logOSInfo(){
  Logger.appendLog(""[Main][I]User Os is "" + Cfg.getOs());
  Logger.appendLog(""[Main][I]Os name : "" + Os.getOsName());
  Logger.appendLog(""[Main][I]User Platform is : "" + Os.platform());
  Logger.appendLog(""[Main][I]JAVA version : "" + System.getProperty(""java.version""));
  Logger.appendLog(""[Main][I]Available cores (cpu) = "" + HostInfo.availableCpus());
  Logger.appendLog(""[Main][I]Max allocated memory = "" + HostInfo.getMaxMemory() + "" bytes"");
}
",89,1,"logOsInfo:logOSInfo,",3,0.021187194188435874,Beam
3036,,,52,3,,393,2.2406999230384828,0
3037,,,120,11,,303,2.205518364906311,0
3038,"private static void encode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}
","private static void decode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError(""Unable to map special identifier"");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError(""Unable to map ACE type"");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}
",588,33,"encode:decode,",3,0.029243063926696778,Beam
3039,"public Process(final String xmlString) throws IOException, XMLException {
  initContext();
  StringReader in=new StringReader(xmlString);
  readProcess(in);
  in.close();
}
","public Run(final String phpResource) throws IOException, XMLException {
  initContext();
  StringReader in=new StringReader(phpResource);
  readProcess(in);
  in.close();
}
",37,3,"Process:Run,xmlString:phpResource,",62,0.26177109479904176,Beam
3040,"default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}
","default ByteBuffer serialise(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialise(value,buffer);
  return buffer;
}
",32,3,"serialize:serialise,",3,0.013653302192687988,Beam
3041,,,94,5,,262,1.4046917756398518,0
3042,"private boolean isIndexable(String term){
  return (term.length() < 30) && (term.length() > 2);
}
","private boolean isStringing(String atom){
  return (atom.length() < 30) && (atom.length() > 2);
}
",30,2,"term:atom,isIndexable:isStringing,",62,0.31308044989903766,Beam
3043,"private int decodeRunLength(int k){
  if ((k & 1) == 1) {
    return ((k >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;
  }
}
","private int decodeRunningLength(int v){
  if ((v & 1) == 1) {
    return ((v >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(v << p + (31 - sp)) + 1;
  }
}
",57,4,"decodeRunLength:decodeRunningLength,k:v,",59,0.31307144165039064,Beam
3044,"public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
","public String fullForm(final String char,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(char);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (char.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}
",92,8,"str:char,",14,0.08721214532852173,Beam
3045,,,71,4,,755,3.884284730752309,0
3046,"public void cleanStart(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  conn=null;
}
","public void cleanEnd(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException(""No Database"");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,""close connection"",e2);
  }
  conn=null;
}
",84,4,"cleanStart:cleanEnd,",3,0.012696417172749837,Beam
3047,"public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}
","public void testFilteredQualifer(){
  Instances data;
  int i;
  if (m_FilteredCompifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredCompifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredCompifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail(""Problem with FilteredClassifier: "" + e.toString());
  }
}
",88,5,"testFilteredClassifier:testFilteredQualifer,m_FilteredClassifier:m_FilteredCompifier,",24,0.16375426054000855,Beam
3048,,,182,2,,266,3.13517955938975,0
3049,,,175,11,,2536,20.53609901269277,0
3050,"public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}
","public final void readInFile(DataInputStream dis,int driver) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (driver >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl=""?"";
    blackTimeControl=""?"";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readInFile(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}
",251,21,"readFromStream:readInFile,version:driver,",101,0.569195560614268,Beam
3051,"public Shape chartToScreenShape(Shape s){
  GeneralPath p=new GeneralPath();
  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());
  if (currentTransform != null) {
    inverse.concatenate(currentTransform);
  }
  p.append(s.getPathIterator(inverse),false);
  return p;
}
","public Shape transformToScreenStruct(Shape i){
  GeneralPath p=new GeneralPath();
  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());
  if (currentTransform != null) {
    inverse.concatenate(currentTransform);
  }
  p.append(i.getPathIterator(inverse),false);
  return p;
}
",65,5,"s:i,chartToScreenShape:transformToScreenStruct,",58,0.2827302893002828,Beam
3052,"protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}
","protected void adjustCopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}
",639,25,"adjustCanopies:adjustCopies,",23,0.1607913851737976,Beam
3054,,,318,17,,1068,6.122814444700877,0
3055,,,50,4,,124,0.5474693973859152,0
3056,"public int onBlockExploded(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}
","public int onBlockExplored(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}
",27,2,"onBlockExploded:onBlockExplored,",3,0.017363325754801432,Beam
3057,,,16,2,,53,0.2902206341425578,0
3058,"private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}
","private P filterLargeValueInsorts(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}
",161,13,"filterLargeValueSets:filterLargeValueInsorts,",98,0.5256294488906861,Beam
3059,,,25,3,,136,0.6266093691190083,0
3060,,,46,5,,159,0.7295681079228719,0
3061,"protected ConnectionStateSSLv3(SSLSessionImpl session){
  try {
    CipherSuite cipherSuite=session.cipherSuite;
    boolean is_exportabe=cipherSuite.isExportable();
    hash_size=cipherSuite.getMACLength();
    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;
    int iv_size=cipherSuite.ivSize;
    block_size=cipherSuite.getBlockSize();
    String algName=cipherSuite.getBulkEncryptionAlgorithm();
    String hashName=cipherSuite.getHashName();
    if (logger != null) {
      logger.println(""ConnectionStateSSLv3.create:"");
      logger.println(""  cipher suite name: "" + session.getCipherSuite());
      logger.println(""  encryption alg name: "" + algName);
      logger.println(""  hash alg name: "" + hashName);
      logger.println(""  hash size: "" + hash_size);
      logger.println(""  block size: "" + block_size);
      logger.println(""  IV size:"" + iv_size);
      logger.println(""  key size: "" + key_size);
    }
    byte[] clientRandom=session.clientRandom;
    byte[] serverRandom=session.serverRandom;
    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];
    byte[] seed=new byte[clientRandom.length + serverRandom.length];
    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);
    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);
    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);
    byte[] client_mac_secret=new byte[hash_size];
    byte[] server_mac_secret=new byte[hash_size];
    byte[] client_key=new byte[key_size];
    byte[] server_key=new byte[key_size];
    boolean is_client=!session.isServer;
    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);
    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);
    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);
    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);
    IvParameterSpec clientIV=null;
    IvParameterSpec serverIV=null;
    if (is_exportabe) {
      if (logger != null) {
        logger.println(""ConnectionStateSSLv3: is_exportable"");
      }
      MessageDigest md5=MessageDigest.getInstance(""MD5"");
      md5.update(client_key);
      md5.update(clientRandom);
      md5.update(serverRandom);
      client_key=md5.digest();
      md5.update(server_key);
      md5.update(serverRandom);
      md5.update(clientRandom);
      server_key=md5.digest();
      key_size=cipherSuite.expandedKeyMaterial;
      if (block_size != 0) {
        md5.update(clientRandom);
        md5.update(serverRandom);
        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);
        md5.update(serverRandom);
        md5.update(clientRandom);
        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);
      }
    }
 else     if (block_size != 0) {
      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);
      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);
    }
    if (logger != null) {
      logger.println(""is exportable: "" + is_exportabe);
      logger.println(""master_secret"");
      logger.print(session.master_secret);
      logger.println(""client_random"");
      logger.print(clientRandom);
      logger.println(""server_random"");
      logger.print(serverRandom);
      logger.println(""client_mac_secret"");
      logger.print(client_mac_secret);
      logger.println(""server_mac_secret"");
      logger.print(server_mac_secret);
      logger.println(""client_key"");
      logger.print(client_key,0,key_size);
      logger.println(""server_key"");
      logger.print(server_key,0,key_size);
      if (clientIV != null) {
        logger.println(""client_iv"");
        logger.print(clientIV.getIV());
        logger.println(""server_iv"");
        logger.print(serverIV.getIV());
      }
 else {
        logger.println(""no IV."");
      }
    }
    if (algName == null) {
      encCipher=new NullCipher();
      decCipher=new NullCipher();
    }
 else {
      encCipher=Cipher.getInstance(algName);
      decCipher=Cipher.getInstance(algName);
      if (is_client) {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
      }
 else {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
      }
    }
    messageDigest=MessageDigest.getInstance(hashName);
    if (is_client) {
      mac_write_secret=client_mac_secret;
      mac_read_secret=server_mac_secret;
    }
 else {
      mac_write_secret=server_mac_secret;
      mac_read_secret=client_mac_secret;
    }
    if (hashName.equals(""MD5"")) {
      pad_1=SSLv3Constants.MD5pad1;
      pad_2=SSLv3Constants.MD5pad2;
    }
 else {
      pad_1=SSLv3Constants.SHApad1;
      pad_2=SSLv3Constants.SHApad2;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException(""Error during computation of security parameters""));
  }
}
","protected connect(SSLSessionImpl source){
  try {
    CipherSuite cipherSuite=source.cipherSuite;
    boolean is_exportabe=cipherSuite.isExportable();
    hash_size=cipherSuite.getMACLength();
    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;
    int iv_size=cipherSuite.ivSize;
    block_size=cipherSuite.getBlockSize();
    String algName=cipherSuite.getBulkEncryptionAlgorithm();
    String hashName=cipherSuite.getHashName();
    if (logger != null) {
      logger.println(""ConnectionStateSSLv3.create:"");
      logger.println(""  cipher suite name: "" + source.getCipherSuite());
      logger.println(""  encryption alg name: "" + algName);
      logger.println(""  hash alg name: "" + hashName);
      logger.println(""  hash size: "" + hash_size);
      logger.println(""  block size: "" + block_size);
      logger.println(""  IV size:"" + iv_size);
      logger.println(""  key size: "" + key_size);
    }
    byte[] clientRandom=source.clientRandom;
    byte[] serverRandom=source.serverRandom;
    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];
    byte[] seed=new byte[clientRandom.length + serverRandom.length];
    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);
    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);
    PRF.computePRF_SSLv3(key_block,source.master_secret,seed);
    byte[] client_mac_secret=new byte[hash_size];
    byte[] server_mac_secret=new byte[hash_size];
    byte[] client_key=new byte[key_size];
    byte[] server_key=new byte[key_size];
    boolean is_client=!source.isServer;
    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);
    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);
    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);
    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);
    IvParameterSpec clientIV=null;
    IvParameterSpec serverIV=null;
    if (is_exportabe) {
      if (logger != null) {
        logger.println(""ConnectionStateSSLv3: is_exportable"");
      }
      MessageDigest md5=MessageDigest.getInstance(""MD5"");
      md5.update(client_key);
      md5.update(clientRandom);
      md5.update(serverRandom);
      client_key=md5.digest();
      md5.update(server_key);
      md5.update(serverRandom);
      md5.update(clientRandom);
      server_key=md5.digest();
      key_size=cipherSuite.expandedKeyMaterial;
      if (block_size != 0) {
        md5.update(clientRandom);
        md5.update(serverRandom);
        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);
        md5.update(serverRandom);
        md5.update(clientRandom);
        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);
      }
    }
 else     if (block_size != 0) {
      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);
      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);
    }
    if (logger != null) {
      logger.println(""is exportable: "" + is_exportabe);
      logger.println(""master_secret"");
      logger.print(source.master_secret);
      logger.println(""client_random"");
      logger.print(clientRandom);
      logger.println(""server_random"");
      logger.print(serverRandom);
      logger.println(""client_mac_secret"");
      logger.print(client_mac_secret);
      logger.println(""server_mac_secret"");
      logger.print(server_mac_secret);
      logger.println(""client_key"");
      logger.print(client_key,0,key_size);
      logger.println(""server_key"");
      logger.print(server_key,0,key_size);
      if (clientIV != null) {
        logger.println(""client_iv"");
        logger.print(clientIV.getIV());
        logger.println(""server_iv"");
        logger.print(serverIV.getIV());
      }
 else {
        logger.println(""no IV."");
      }
    }
    if (algName == null) {
      encCipher=new NullCipher();
      decCipher=new NullCipher();
    }
 else {
      encCipher=Cipher.getInstance(algName);
      decCipher=Cipher.getInstance(algName);
      if (is_client) {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
      }
 else {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
      }
    }
    messageDigest=MessageDigest.getInstance(hashName);
    if (is_client) {
      mac_write_secret=client_mac_secret;
      mac_read_secret=server_mac_secret;
    }
 else {
      mac_write_secret=server_mac_secret;
      mac_read_secret=client_mac_secret;
    }
    if (hashName.equals(""MD5"")) {
      pad_1=SSLv3Constants.MD5pad1;
      pad_2=SSLv3Constants.MD5pad2;
    }
 else {
      pad_1=SSLv3Constants.SHApad1;
      pad_2=SSLv3Constants.SHApad2;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException(""Error during computation of security parameters""));
  }
}
",1031,28,"ConnectionStateSSLv3:connect,session:source,",127,1.1686139464378358,Beam
3062,"@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + listener);
  }
  notifBroadcaster.removeNotificationListener(listener);
}
","@Override public void removeNotificationListener(NotificationListener Listler) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,""removeNotificationListener"",""Removing listener "" + Listler);
  }
  notifBroadcaster.removeNotificationListener(Listler);
}
",50,4,"listener:Listler,",5,0.0351682702700297,Beam
3063,"@Override public List chunkString(String sToChunk){
  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);
  return Arrays.asList(sRes);
}
","@Override public List SplunkArray(String sToChump){
  Integer[] iRes=splitPointsByDelimiterList(sToChump,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToChump,iRes);
  return Arrays.asList(sRes);
}
",45,4,"sToChunk:sToChump,chunkString:SplunkArray,",197,1.1367645541826883,Beam
3064,,,63,4,,600,4.701545131206513,0
3065,"static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}
","static public void run(String input,String output,String packFileName){
  run(new Settings(),input,output,packFileName);
}
",30,4,"process:run,",96,0.5416252414385477,Beam
3066,"private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}
","private void createBlockMirrorsInfo(String name,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel(""blockMirrorVolume"");
  URI cgUri=createBlockConsistencyGroup(""blockMirrorVolume-cg"");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}
",150,12,"createBlockMirrorData:createBlockMirrorsInfo,",8,0.0605116327603658,Beam
3067,"private void initializeLayout(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}
","private void initialocateLay(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel(""Frozen: ""));
  add(frozenDD);
  add(new JLabel(""Upper Bound:""));
  add(tfUpBound);
  add(new JLabel(""Lower Bound""));
  add(tfLowBound);
  add(new JLabel(""Increment:""));
  add(tfIncrement);
  add(new JLabel(""Delay:""));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}
",116,7,"initializeLayout:initialocateLay,",14,0.07789200941721598,Beam
3068,,,12,1,,25,0.1426559050877889,0
3069,,,59,6,,316,1.5123032410939534,0
3070,"private void resetShapeBounds(){
  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;
  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}
","private void resetSquareBBox(){
  RoundRectangle2D.Double bround=(RoundRectangle2D.Double)shape;
  bround.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}
",48,2,"resetShapeBounds:resetSquareBBox,rrect:bround,",31,0.14572304487228394,Beam
3073,,,28,3,,93,1.0889951745669046,0
3074,"public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
","public JSONObject toJSONson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJSONson());
  }
  json.put(""pods"",jpods);
  json.put(""timestamp"",System.currentTimeMillis());
  return json;
}
",70,5,"toJson:toJSONson,",5,0.035347906748453777,Beam
3075,"public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}
","public void replace(ClassNode config,int n){
  remove(n);
  push(config);
}
",22,3,"type:config,",35,0.17989077965418498,Beam
3076,"public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
","public void make(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info(""SolrSuggester.build("" + name + "")"");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.make(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error(""Store Lookup build failed"");
    }
 else {
      LOG.info(""Stored suggest data to: "" + target.getAbsolutePath());
    }
  }
}
",97,9,"build:make,",65,0.4067780057589213,Beam
3077,"public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){
  Collection<T> newCollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : mutableCollection) {
    newCollection.add(Utils.makeImmutable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}
","public static <T>Collection<T> createImmuable(Collection<T> mutableCollection){
  Collection<T> newCollection;
  try {
    @SuppressWarnings(""unchecked"") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : mutableCollection) {
    newCollection.add(Utils.createImmuable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}
",110,6,"makeImmutable:createImmuable,",56,0.40315107504526776,Beam
3078,,,173,14,,921,6.435355178515116,0
3079,"public static double incompleteBetaFraction2(double a,double b,double x){
  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
  double k1, k2, k3, k4, k5, k6, k7, k8;
  double r, t, ans, z, thresh;
  int n;
  k1=a;
  k2=b - 1.0;
  k3=a;
  k4=a + 1.0;
  k5=1.0;
  k6=a + b;
  k7=a + 1.0;
  ;
  k8=a + 2.0;
  pkm2=0.0;
  qkm2=1.0;
  pkm1=1.0;
  qkm1=1.0;
  z=x / (1.0 - x);
  ans=1.0;
  r=1.0;
  n=0;
  thresh=3.0 * MACHEP;
  do {
    xk=-(z * k1 * k2) / (k3 * k4);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    xk=(z * k5 * k6) / (k7 * k8);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    if (qk != 0) {
      r=pk / qk;
    }
    if (r != 0) {
      t=Math.abs((ans - r) / r);
      ans=r;
    }
 else {
      t=1.0;
    }
    if (t < thresh) {
      return ans;
    }
    k1+=1.0;
    k2-=1.0;
    k3+=2.0;
    k4+=2.0;
    k5+=1.0;
    k6+=1.0;
    k7+=2.0;
    k8+=2.0;
    if ((Math.abs(qk) + Math.abs(pk)) > big) {
      pkm2*=biginv;
      pkm1*=biginv;
      qkm2*=biginv;
      qkm1*=biginv;
    }
    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
      pkm2*=big;
      pkm1*=big;
      qkm2*=big;
      qkm1*=big;
    }
  }
 while (++n < 300);
  return ans;
}
","public static double dist(double a,double b,double x){
  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
  double k1, k2, k3, k4, k5, k6, k7, k8;
  double r, t, ans, z, thresh;
  int n;
  k1=a;
  k2=b - 1.0;
  k3=a;
  k4=a + 1.0;
  k5=1.0;
  k6=a + b;
  k7=a + 1.0;
  ;
  k8=a + 2.0;
  pkm2=0.0;
  qkm2=1.0;
  pkm1=1.0;
  qkm1=1.0;
  z=x / (1.0 - x);
  ans=1.0;
  r=1.0;
  n=0;
  thresh=3.0 * MACHEP;
  do {
    xk=-(z * k1 * k2) / (k3 * k4);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    xk=(z * k5 * k6) / (k7 * k8);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    if (qk != 0) {
      r=pk / qk;
    }
    if (r != 0) {
      t=Math.abs((ans - r) / r);
      ans=r;
    }
 else {
      t=1.0;
    }
    if (t < thresh) {
      return ans;
    }
    k1+=1.0;
    k2-=1.0;
    k3+=2.0;
    k4+=2.0;
    k5+=1.0;
    k6+=1.0;
    k7+=2.0;
    k8+=2.0;
    if ((Math.abs(qk) + Math.abs(pk)) > big) {
      pkm2*=biginv;
      pkm1*=biginv;
      qkm2*=biginv;
      qkm1*=biginv;
    }
    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
      pkm2*=big;
      pkm1*=big;
      qkm2*=big;
      qkm1*=big;
    }
  }
 while (++n < 300);
  return ans;
}
",431,27,"incompleteBetaFraction2:dist,",90,0.7570139805475871,Beam
3080,,,19,2,,56,0.3223041494687398,0
3081,,,167,10,,2035,17.694375451405843,0
3082,,,29,3,,505,3.7035024483998615,0
3083,"synchronized boolean release(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
","synchronized boolean stop(){
  d(""release()"");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}
",41,5,"release:stop,",4,0.02806537946065267,Beam
3084,"public ImmutableArray2<K> insert(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}
","public ImmutableArray2<K> pad(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings(""unchecked"") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}
",167,11,"insert:pad,",45,0.3346204241116842,Beam
3085,"public void addEvent(SimEvent newEvent){
  newEvent.setSerial(serial++);
  sortedSet.add(newEvent);
}
","public void Addevent(SimEvent nextEvents){
  nextEvents.setSerial(serial++);
  sortSet.add(nextEvents);
}
",24,4,"newEvent:nextEvents,addEvent:Addevent,sortedSet:sortSet,",99,0.4853342334429423,Beam
3086,,,69,4,,268,1.4794493714968364,0
3087,,,51,3,,465,3.24240194161733,0
3088,"public static double powQuick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
","public static double poddquick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}
",55,5,"powQuick:poddquick,",11,0.1524770140647888,Beam
3089,,,225,3,,373,2.9147341807683307,0
3090,,,117,4,,132,0.8194214979807536,0
3092,"public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
","public void copy(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.copy(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}
",56,5,"add:copy,",21,0.09437857071558635,Beam
3093,"protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
","protected static boolean isCglibGetCallbacks(AnnotatedMethod sam){
  Class<?> rt=sam.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith(""net.sf.cglib"") || pname.startsWith(""org.hibernate.repackage.cglib"")) {
      return true;
    }
  }
  return false;
}
",102,6,"am:sam,",4,0.041696194807688394,Beam
3094,"private Sha256Hash calculateHash(){
  try {
    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(bos);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
","private Sha256Hash calculceSalt(){
  try {
    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(bos);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
",57,4,"calculateHash:calculceSalt,",14,0.0922719915707906,Beam
3095,"private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}
","private static String Readcomment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}
",64,5,"readComment:Readcomment,",78,0.3629871050516764,Beam
3096,,,22,3,,117,0.6089538772900899,0
3097,"public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}
","public static void closeQirt(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQirt(rsrc.channel());
}
",27,2,"closeQuiet:closeQirt,",13,0.11216607491175333,Beam
3098,"private static LDAPFilter createORFilter(FilterSet filterSet) throws LDAPException, IOException {
  List<JAXBElement<?>> list=filterSet.getFilterGroup();
  ArrayList<RawFilter> filters=new ArrayList<>(list.size());
  for (  JAXBElement<?> filter : list) {
    filters.add(createFilter(filter));
  }
  return LDAPFilter.createORFilter(filters);
}
","private static LDAPFilter createATORFilter(FilterSet filterSet) throws LDAPException, IOException {
  List<JAXBElement<?>> list=filterSet.getFilterGroup();
  ArrayList<RawFilter> filters=new ArrayList<>(list.size());
  for (  JAXBElement<?> filter : list) {
    filters.add(createFilter(filter));
  }
  return LDAPFilter.createATORFilter(filters);
}
",77,5,"createORFilter:createATORFilter,",10,0.0697966972986857,Beam
3099,"public int size(){
  return _attrs.size();
}
","public int empty(){
  return _attrs.empty();
}
",14,2,"size:empty,",6,0.03899612029393514,Beam
3100,"private void writeLog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
","private void Writelog(String input){
  try {
    if (m_writer == null) {
      File file=File.createTempFile(""create"","".log"");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(input);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}
",86,6,"writeLog:Writelog,cmd:input,",126,0.5981839577356974,Beam
3101,,,37,3,,796,5.439331638813019,0
3102,"public void disable(RichFormatterFeature feature){
  features.remove(feature);
}
","public void Disable(RichFormatterFeature property){
  features.remove(property);
}
",16,3,"feature:property,disable:Disable,",84,0.4398671269416809,Beam
3103,"private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(process,g2);
    break;
case NONE:
default :
  break;
}
}
}
","private void renderLightback(final ExecutionUnit image,final Graphics2D g2,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(image,g2);
    break;
case NONE:
default :
  break;
}
}
}
",84,9,"renderForeground:renderLightback,process:image,",281,1.6432782808939617,Beam
3105,"public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}
","public static StringBuffer replaceString(StringBuffer result,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder=""%"" + (i + 1) + ""%"";
    placeHolderPosition=result.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      result.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return result;
}
",115,6,"buffer:result,",5,0.04902538061141968,Beam
3106,,,16,3,,147,0.7141346057256063,0
3107,,,151,5,,226,1.2677974621454875,0
3108,"public NSNumber(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}
","public NSInt(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}
",18,6,"NSNumber:NSInt,",7,0.02904196580251058,Beam
3109,"public void onStart(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}
","public void OnStarting(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}
",51,4,"onStart:OnStarting,",8,0.038396390279134114,Beam
3110,,,21,3,,228,1.2738240242004395,0
3111,,,33,4,,241,1.7036012490590413,0
3112,,,117,9,,814,5.049818734327952,0
3113,"protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {
}
","protected void startAdditionalServices(final Cache pc,final Map<String,Object> options) throws Exception {
}
",21,3,"cache:pc,",25,0.11222304503122965,Beam
3114,"private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
","private void handleAccount(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,""Bot received"");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}
",239,6,"onUser:handleAccount,",40,0.3346425135930379,Beam
3115,"private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}
","private synchronized void addGloballockInfo(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}
",35,3,"addTableLockObject:addGloballockInfo,",24,0.15125906070073444,Beam
3119,"public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}
","public static void nonShort(String string,String err){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(err);
}
",34,3,"msg:err,notEmpty:nonShort,",204,1.6097547173500062,Beam
3121,,,136,15,,410,2.495808490117391,0
3122,,,99,6,,817,6.515653530756633,0
3123,,,32,5,,221,1.028519598642985,0
3124,"public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}
","public void decodeindex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info(""Processed "" + recNum + "" records"");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info(""Record "" + recNum + "": ""+ offset+ "", ""+ length+ (showBounds ? (""; "" + readLEDouble(ixRecord,8) + "", ""+ readLEDouble(ixRecord,16)+ "", ""+ readLEDouble(ixRecord,24)+ "", ""+ readLEDouble(ixRecord,32)) : """"));
    }
  }
  ssx.close();
}
",190,11,"dumpIndex:decodeindex,",35,0.2690391023953756,Beam
3125,"public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.loadClass(name,resolve));
}
","public Class<?> loadClass(String code,boolean Reserve) throws ClassNotFoundException {
  int i=code.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(code.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(code)) {
    Class<?> c=findLoadedClass(code);
    if (c != null) {
      if (Reserve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(code);
  }
  return (super.loadClass(code,Reserve));
}
",130,8,"resolve:Reserve,name:code,",164,1.0374175230662028,Beam
3127,"public AsyncSelector() throws IOException {
  this(Selector.open());
}
","public Asyncselector() throws IOException {
  this(Selector.open());
}
",17,1,"AsyncSelector:Asyncselector,",4,0.011878879865010579,Beam
3128,,,24,2,,87,0.3811201254526774,0
3130,,,42,3,,207,1.4946932435035705,0
3131,"public Node(Coordinate pt){
  this(pt,new DirectedEdgeStar());
}
","public Root(Coordinate pp){
  this(pp,new DirectedEdgeStar());
}
",18,2,"Node:Root,pt:pp,",158,0.6574448545773824,Beam
3132,,,39,5,,635,3.064950172106425,0
3133,"public void disable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}
","public void enable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.enable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format(""disable() invalid state: state=%d"",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format(""disable() completed in %d ms"",(finish - start)));
}
 else {
writeOutput(""disable() completed"");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format(""disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)"",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}
",327,10,"disable:enable,",34,0.3632047375043233,Beam
3134,"public static void writeStringToWriter(String string,Writer writer) throws IOException {
  BufferedWriter bw=new BufferedWriter(writer);
  try {
    bw.write(string);
  }
  finally {
    bw.close();
  }
}
","public static void writeStringAtReader(String null,Writer writer) throws IOException {
  BufferedWriter bw=new BufferedWriter(writer);
  try {
    bw.write(null);
  }
  finally {
    bw.close();
  }
}
",43,4,"writeStringToWriter:writeStringAtReader,string:null,",365,1.6776293714841206,Beam
3135,,,192,9,,1058,10.173678060372671,0
3136,"public void push(){
  state.cliprgn=g.getClipBounds();
  stack.push(state);
  state=(GraphicsState)state.clone();
}
","public void insert(){
  state.cliprgn=g.getClipBounds();
  stack.insert(state);
  state=(GraphicsState)state.clone();
}
",35,4,"push:insert,",8,0.048819692929585774,Beam
3137,"protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}
","protected List<URI> plus(final InputStream resource) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(resource,this);
  return groups;
}
",78,6,"load:plus,in:resource,",114,0.6775569319725037,Beam
3138,"public void add(double weight,double x,double y){
  observations.add(new WeightedObservedPoint(weight,x,y));
}
","public void process(double grade,double x,double y){
  observations.process(new WeightedObservedPoint(grade,x,y));
}
",30,5,"add:process,weight:grade,",252,1.299887728691101,Beam
3139,"@Override public SoftwarePIDController withTolerance(double tolerance){
  target=target.withTolerance(Math.abs(tolerance));
  return this;
}
","@Override public SoftwarePIDController withTaxiculty(double atoler){
  target=target.withTaxiculty(Math.abs(atoler));
  return this;
}
",28,3,"withTolerance:withTaxiculty,tolerance:atoler,",91,0.5707834601402283,Beam
3140,,,17,4,,809,4.376228888829549,0
3141,,,185,10,,782,5.096215629577637,0
3142,"public static String fetchClusterName(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}
","public static String fetchClubeInfo(String clusterCgaInfo){
  String clancerPath=null;
  if (clusterCgaInfo != null && !clusterCgaInfo.isEmpty()) {
    String[] tmp=clusterCgaInfo.split(SPLITTER);
    clancerPath=tmp[0];
  }
  return clancerPath;
}
",52,4,"fetchClusterName:fetchClubeInfo,clusterCgName:clusterCgaInfo,clusterName:clancerPath,",271,1.5444185694058736,Beam
3143,"public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}
","public boolean softLogIn() throws IOException {
  if (url == null) {
    throw new IllegalStateException(""Null host"");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine(""Skipping soft init; session ID already exists - "" + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info(""Authorized with session ID: "" + id);
    this.sessionId=id;
  }
  return authorized;
}
",120,5,"softSignin:softLogIn,",9,0.06071008443832397,Beam
3144,"public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=action.startsWith(""no"");
  if (no)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}
","public int act(String fault,String act){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=act.startsWith(""no"");
  if (no)   act=act.substring(2);
  Integer bit=getAction(act);
  if (bit == null)   throw new IllegalArgumentException(act);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}
",135,8,"action:act,",3,0.04795204798380534,Beam
3145,"public boolean isPronoun(){
  return typeString.contains(SUFFIX_PRONOUN);
}
","public boolean isPornural(){
  return thisStr.contains(SUFFIX_PRONOUN);
}
",15,2,"isPronoun:isPornural,typeString:thisStr,",47,0.2538141330083211,Beam
3146,"protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){
  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();
  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);
  nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext);
  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);
  if (!isLastStream) {
    for (    EventBean[] row : nestedResult) {
      EventBean lookup=row[nestedStreams[nestingOrderIndex]];
      recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext);
    }
    return;
  }
  for (  EventBean[] row : nestedResult) {
    result.add(row);
  }
}
","protected void recursiveNestJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] reportedResult,Collection<EventBean[]> master,ExprEvaluatorContext exprEvaluatorContext){
  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();
  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);
  nestedExecNode.process(lookupEvent,reportedResult,nestedResult,exprEvaluatorContext);
  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);
  if (!isLastStream) {
    for (    EventBean[] row : nestedResult) {
      EventBean lookup=row[nestedStreams[nestingOrderIndex]];
      recursiveNestJoin(lookup,nestingOrderIndex + 1,row,master,exprEvaluatorContext);
    }
    return;
  }
  for (  EventBean[] row : nestedResult) {
    master.add(row);
  }
}
",144,14,"result:master,recursiveNestedJoin:recursiveNestJoin,currentPath:reportedResult,",1469,9.300410068035125,Beam
3147,"public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
","public BigDecimal calculateTotalCollectedSamct(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}
",26,3,"calculateTotalCollectedAmt:calculateTotalCollectedSamct,",60,0.3520277221997579,Beam
3148,"public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){
  if (location == null) {
    throw new IllegalArgumentException(""Location Is Null"");
  }
  if (azimuth == null) {
    throw new IllegalArgumentException(""Azimuth Is Null"");
  }
  double lat0=location.getLatitude().radians;
  double az=azimuth.radians;
  double tanDistance=-Math.tan(lat0) / Math.cos(az);
  double distance=Math.atan(tanDistance);
  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));
  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));
  return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)};
}
","public static LatLon[] greatCircleExtremeLocate(LatLon hole,Angle azimaeter){
  if (hole == null) {
    throw new IllegalArgumentException(""Location Is Null"");
  }
  if (azimaeter == null) {
    throw new IllegalArgumentException(""Azimuth Is Null"");
  }
  double lat0=hole.getLatitude().radians;
  double az=azimaeter.radians;
  double tanDistance=-Math.tan(lat0) / Math.cos(az);
  double distance=Math.atan(tanDistance);
  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));
  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));
  return new LatLon[]{greatCircleEndPosition(hole,azimaeter,extremeDistance1),greatCircleEndPosition(hole,azimaeter,extremeDistance2)};
}
",152,9,"location:hole,greatCircleExtremeLocations:greatCircleExtremeLocate,azimuth:azimaeter,",260,2.6002211968104043,Beam
3149,"private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}
","private void populatesWorklist(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}
",153,12,"populateTaskList:populatesWorklist,",148,0.717543343702952,Beam
3150,,,44,4,,127,0.5233348091443379,0
3151,"private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
","private void compileOlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}
",63,5,"compileProlog:compileOlog,",28,0.1525120496749878,Beam
3152,"public void init(SocketChannel channel){
  _channel=channel;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
","public void i(SocketChannel handler){
  _channel=handler;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}
",29,5,"init:i,channel:handler,",123,0.5349977612495422,Beam
3153,"public static List<Window> windows(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return windows(list,windowSize);
}
","public static List<Window> games(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return games(list,windowSize);
}
",66,5,"windows:games,",53,0.2842430869738261,Beam
3154,"private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}
","private void bcsave(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}
",70,5,"bappend:bcsave,",39,0.20092943509419758,Beam
3155,,,24,2,,147,0.7755999048550923,0
3156,"public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
","public void sphericalForWorld(Vector3 cat){
  if (pjUnprojected == null) {
    String projStr=""+proj=longlat +a="" + projInfo.getSemiMajorAxis() + "" +b=""+ projInfo.getSemiMinorAxis()+ "" +no_defs"";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    cat.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    cat.setX(coord[0]);
    cat.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",146,9,"vec:cat,sphericalToWorld:sphericalForWorld,",74,0.40630736748377483,Beam
3157,,,48,4,,238,1.3620490233103435,0
3158,"@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}
","@SuppressWarnings(""nullness"") @GwtIncompatible(""java.io.ObjectOutputStream"") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream feed) throws IOException {
  feed.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    feed.writeObject(entry.getKey());
    feed.writeObject(entry.getValue());
  }
}
",92,4,"stream:feed,",6,0.046505566438039145,Beam
3159,,,152,6,,335,1.8698268413543702,0
3160,,,17,3,,325,1.61444091796875,0
3162,"void add(Object key){
  table.put(key,key);
}
","void push(Object key){
  table.put(key,key);
}
",17,3,"add:push,",9,0.03761583169301351,Beam
3163,"static boolean pairSum(int ar[],int x){
  Arrays.sort(ar);
  int len=ar.length;
  for (int i=0, j=len - 1; i < j; ) {
    if (ar[i] + ar[j] == x) {
      return true;
    }
 else     if (ar[i] + ar[j] < x) {
      i++;
    }
 else {
      j--;
    }
  }
  return false;
}
","static boolean ArraySum(int ar[],int x){
  Arrays.sort(ar);
  int len=ar.length;
  for (int i=0, j=len - 1; i < j; ) {
    if (ar[i] + ar[j] == x) {
      return true;
    }
 else     if (ar[i] + ar[j] < x) {
      i++;
    }
 else {
      j--;
    }
  }
  return false;
}
",96,6,"pairSum:ArraySum,",66,0.43160956700642905,Beam
3164,"public static synchronized List<Proxy> noProxyList(){
  if (noProxyList == null) {
    ArrayList<Proxy> list=new ArrayList<Proxy>(1);
    list.add(Proxy.NO_PROXY);
    noProxyList=Collections.unmodifiableList(list);
  }
  return noProxyList;
}
","public static synchronized List<Proxy> noResponseL(){
  if (noResponseL == null) {
    ArrayList<Proxy> list=new ArrayList<Proxy>(1);
    list.add(Proxy.NO_PROXY);
    noResponseL=Collections.unmodifiableList(list);
  }
  return noResponseL;
}
",56,2,"noProxyList:noResponseL,",19,0.11494941314061483,Beam
3165,,,75,6,,418,1.7705021739006042,0
3166,"private final String loadXmlDefinition(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadXmlDefinition(stringWriter.toString());
}
","private final String loadExmlFile(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadExmlFile(stringWriter.toString());
}
",68,4,"loadXmlDefinition:loadExmlFile,",18,0.08284355401992798,Beam
3167,"public void fireEventProgrammatically(Event event){
  if (!event.isConsumed())   ripplerPane.fireEvent(event);
}
","public void fireEventProgramively(Event resource){
  if (!resource.isConsumed())   ripplerPane.fireEvent(resource);
}
",25,3,"event:resource,fireEventProgrammatically:fireEventProgramively,",54,0.2604969104131063,Beam
3168,,,12,1,,33,0.17247799237569172,0
3169,,,22,2,,99,0.34319228331247964,0
3170,"public void addRestrictedDomain(String domainName){
  if (StringUtils.isEmpty(domainName)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(domainName);
}
","public void addRestrictionHost(String baseUrl){
  if (StringUtils.isEmpty(baseUrl)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(baseUrl);
}
",46,3,"addRestrictedDomain:addRestrictionHost,domainName:baseUrl,",70,0.37396479845047,Beam
3171,"@Override protected void onMessageOnProducerThread(T msg){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(msg);
  }
  finally {
    _lock.unlock();
  }
}
","@Override protected void onMessageOnProducerThread(T sim){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(sim);
  }
  finally {
    _lock.unlock();
  }
}
",57,8,"msg:sim,",31,0.19118158022562662,Beam
3172,"public T findByCommitCounter(final long commitCounter){
  if (commitCounter < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= commitCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}
","public T findByCommitter(final long commitClock){
  if (commitClock < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings(""unchecked"") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= commitClock) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}
",140,7,"findByCommitCounter:findByCommitter,commitCounter:commitClock,",57,0.30686763922373456,Beam
3173,"public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}
","public static double dmod2r(double rcl,double lHS){
  return lHS != 0 ? rcl - lHS * Math.floor(rcl / lHS) : Double.NaN;
}
",35,3,"dmod_d:dmod2r,lhs:rcl,rhs:lHS,",296,1.69754771788915,Beam
3174,"public List<TypeId<?>> asList(){
  return Collections.unmodifiableList(Arrays.asList(types));
}
","public List<TypeId<?>> AsL(){
  return Collections.unmodifiableList(Arrays.AsL(types));
}
",26,2,"asList:AsL,",14,0.07481807072957357,Beam
3175,"public static void printThreadInfo(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println(""Process Thread Dump: "" + title);
  stream.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println(""  Inactive"");
      continue;
    }
    stream.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stream.println(""  State: "" + state);
    stream.println(""  Blocked count: "" + info.getBlockedCount());
    stream.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stream.println(""  Blocked time: "" + info.getBlockedTime());
      stream.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println(""  Blocked on "" + info.getLockName());
      stream.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println(""    "" + frame.toString());
    }
  }
  stream.flush();
}
","public static void getTaskInfo(PrintWriter stack,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stack.println(""Process Thread Dump: "" + title);
  stack.println(threadIds.length + "" active threads"");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stack.println(""  Inactive"");
      continue;
    }
    stack.println(""Thread "" + getTaskName(info.getThreadId(),info.getThreadName()) + "":"");
    Thread.State state=info.getThreadState();
    stack.println(""  State: "" + state);
    stack.println(""  Blocked count: "" + info.getBlockedCount());
    stack.println(""  Waited count: "" + info.getWaitedCount());
    if (contention) {
      stack.println(""  Blocked time: "" + info.getBlockedTime());
      stack.println(""  Waited time: "" + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stack.println(""  Waiting on "" + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stack.println(""  Blocked on "" + info.getLockName());
      stack.println(""  Blocked by "" + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stack.println(""  Stack:"");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stack.println(""    "" + frame.toString());
    }
  }
  stack.flush();
}
",311,11,"printThreadInfo:getTaskInfo,stream:stack,",159,0.907153864701589,Beam
3176,,,157,6,,414,2.3351158261299134,0
3177,"final void putLong(int offset,long value){
  unsafe.putLong(offset + address,value);
}
","final void set64(int offset,long value){
  unsafe.set64(offset + address,value);
}
",23,5,"putLong:set64,",44,0.20848527352015178,Beam
3178,"public String asString() throws IOException {
  long len=getContentLength();
  ByteArrayOutputStream buf;
  if (0 < len) {
    buf=new ByteArrayOutputStream((int)len);
  }
 else {
    buf=new ByteArrayOutputStream();
  }
  writeTo(buf);
  return decode(buf.toByteArray(),getCharacterEncoding());
}
","public String Asstring() throws IOException {
  long len=getContentLength();
  ByteArrayOutputStream buf;
  if (0 < len) {
    buf=new ByteArrayOutputStream((int)len);
  }
 else {
    buf=new ByteArrayOutputStream();
  }
  writeTo(buf);
  return decode(buf.toByteArray(),getCharacterEncoding());
}
",67,3,"asString:Asstring,",11,0.04925772746404012,Beam
3179,,,87,3,,79,0.41482181549072267,0
3180,"public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}
","public String parseString(File source){
  log.config(source.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(source),Ini.getCharset()),10240);
    String errMsg="""";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return ""Parse Error: Line="" + line + "" - ""+ s;
  }
  return """";
}
",172,9,"parseFile:parseString,file:source,",46,0.28531750043233234,Beam
3181,,,196,10,,340,2.1589590509732566,0
3182,,,20,2,,59,0.2897211949030558,0
3183,"private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}
","private void parse(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i(""StlPaser: Reading Binary"");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w(""STL contains bad normals of NaN or Infinite!"");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}
",309,12,"readBinary:parse,",25,0.12547890742619833,Beam
3184,,,120,8,,378,2.6313801407814026,0
3185,"public Identity(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}
","public idlee(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}
",25,2,"Identity:idlee,",35,0.16075544357299804,Beam
3186,,,30,2,,125,0.6239308595657349,0
3187,"@Override public void write(Buffer buffer,boolean isEnd) throws IOException {
  if (_s == null) {
    buffer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (buffer.isDirect()) {
      _totalWriteBytes+=buffer.length();
      _s.write(buffer.direct());
      return;
    }
    _totalWriteBytes+=buffer.length();
    while (buffer.length() > 0) {
      _writeBuffer.clear();
      buffer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    buffer.free();
  }
}
","@Override public void create(Buffer table,boolean isEnd) throws IOException {
  if (_s == null) {
    table.free();
    return;
  }
  try {
    _needsFlush=true;
    if (table.isDirect()) {
      _totalWriteBytes+=table.length();
      _s.create(table.direct());
      return;
    }
    _totalWriteBytes+=table.length();
    while (table.length() > 0) {
      _writeBuffer.clear();
      table.read(_writeBuffer);
      _writeBuffer.flip();
      _s.create(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + "":"" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    table.free();
  }
}
",165,9,"write:create,buffer:table,",216,1.5152357419331868,Beam
3189,"public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof ECFieldFp) {
    return (p.equals(((ECFieldFp)obj).p));
  }
  return false;
}
","public boolean Equales(Object obj){
  if (this == obj)   return true;
  if (obj instanceof ECFieldFp) {
    return (p.Equales(((ECFieldFp)obj).p));
  }
  return false;
}
",46,3,"equals:Equales,",40,0.29918901522954305,Beam
3191,"private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}
","private void updateLtp(SingleChannelElement scc){
  IndividualChannelStream ics=scc.ics;
  float saved[]=scc.saved;
  float savedLtp[]=scc.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(scc.ltpState,1024,scc.ltpState,0,1024);
  System.arraycopy(scc.ret,0,scc.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,scc.ltpState,2048,1024);
}
",395,14,"sce:scc,",4,0.04256850083669027,Beam
3192,"public void updatePresonInfo(){
  this.leftPerson=person2LeavingPersonInfo.get(this.personId);
  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);
}
","public void updateMembersonsInfo(){
  this.leftPerson=person2LeavingPersonInfo.get(this.personId);
  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);
}
",33,3,"updatePresonInfo:updateMembersonsInfo,",6,0.030501826604207357,Beam
3193,,,126,6,,338,2.466264494260152,0
3194,"public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
","public static void notice(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}
",26,4,"error:notice,",70,0.30631156762441,Beam
3195,"@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedInterval);
  if (!SeenHugeLogProb(analyzedInterval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}
","@Override public void IncomingClass(IAnalyzedInterval analyzedInterval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedInterval);
  if (!SeenHugeLogProb(analyzedInterval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}
",59,6,"incomingObject:IncomingClass,",13,0.06522796551386516,Beam
3196,"public static void sort(long[] a){
  doSort(a,0,a.length - 1);
}
","public static void by(long[] a){
  doSort(a,0,a.length - 1);
}
",25,2,"sort:by,",52,0.25377891461054486,Beam
3197,"private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}
","private void fill(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}
",234,14,"drawText:fill,",66,0.3684321959813436,Beam
3198,,,45,4,,124,0.4990644613901774,0
3199,"private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}
","private static void cleanPath(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanPath(f);
      f.delete();
    }
  }
}
",60,3,"cleanDirectory:cleanPath,",36,0.15686346689860026,Beam
3200,,,34,3,,566,5.138836499055227,0
3201,,,14,3,,97,0.40110656023025515,0
3202,"public OsmHandler(MapBuilder meConsumer){
  osmElementProcessor=new OsmElementProcessor(null,meConsumer);
}
","public OrmHandler(MapBuilder meConsumer){
  osmElementProcessor=new OsmElementProcessor(null,meConsumer);
}
",18,3,"OsmHandler:OrmHandler,",28,0.1392829457918803,Beam
3203,"ListBasedTokenStream(AttributeSource attributeSource,List<AttributeSource> tokens){
  super(attributeSource.getAttributeFactory());
  this.tokens=tokens;
  addAttributes(attributeSource);
}
","ListBasedElementIterator(AttributeSource attributeSource,List<AttributeSource> tokens){
  super(attributeSource.getAttributeFactory());
  this.tokens=tokens;
  addAttributes(attributeSource);
}
",33,3,"ListBasedTokenStream:ListBasedElementIterator,",12,0.08145594199498495,Beam
3205,"private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
","private void moveOnePoint(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}
",77,8,"moveSingleNode:moveOnePoint,",34,0.1680214206377665,Beam
3206,,,32,2,,166,1.1613846143086752,0
3207,"public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}
","public void setup(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.setup(manual);
}
",23,4,"init:setup,",3,0.0219100554784139,Beam
3208,"public IndexSegmentIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){
  super(store,checkpoint,metadata,readOnly);
}
","public IndexSegmentindex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){
  super(store,checkpoint,metadata,readOnly);
}
",28,5,"IndexSegmentIndex:IndexSegmentindex,",21,0.1126841942469279,Beam
3209,,,25,2,,199,1.2126786589622498,0
3210,"public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}
","public final void empty(){
  if (GWT.isScript()) {
    jsArray.empty();
  }
 else {
    javaArray.empty();
  }
}
",33,3,"clear:empty,",3,0.023593143622080485,Beam
3211,,,99,11,,2119,13.547316165765126,0
3212,"protected synchronized void request(String stream){
  if (stream == null || stream.isEmpty()) {
    return;
  }
  stream=stream.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(stream);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(stream);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(stream);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
","protected synchronized void create(String stream){
  if (stream == null || stream.isEmpty()) {
    return;
  }
  stream=stream.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(stream);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(stream);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(stream);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}
",141,7,"request:create,",11,0.07653871377309164,Beam
3213,"public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}
","public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBuffend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBuffend);
  }
  return result;
}
",67,6,"forBackend:forBuffend,",5,0.042625431219736734,Beam
3214,,,70,6,,355,2.31316956281662,0
3215,"@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}
","@TCB static String stripBannedCodeunits(String ns){
  int safeLimit=longestPrefixOfGoodCodeunits(ns);
  if (safeLimit < 0) {
    return ns;
  }
  StringBuilder sb=new StringBuilder(ns);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}
",53,4,"s:ns,",7,0.05293885866800944,Beam
3216,"public void addContentItem(ContentItem contentItem){
  if (contentItems == null) {
    contentItems=new ArrayList<ContentItem>();
  }
  contentItems.add(contentItem);
}
","public void addHeaderItems(ContentItem contentitem){
  if (contentItems == null) {
    contentItems=new ArrayList<ContentItem>();
  }
  contentItems.add(contentitem);
}
",34,3,"addContentItem:addHeaderItems,contentItem:contentitem,",84,0.4044895807902018,Beam
3217,"private boolean processAuthenticationResponse(final HttpMethod method){
  LOG.trace(""enter HttpMethodBase.processAuthenticationResponse("" + ""HttpState, HttpConnection)"");
  try {
switch (method.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(method);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(method);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}
","private boolean processAuthenticateRequest(final HttpMethod source){
  LOG.trace(""enter HttpMethodBase.processAuthenticationResponse("" + ""HttpState, HttpConnection)"");
  try {
switch (source.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(source);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(source);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}
",92,3,"processAuthenticationResponse:processAuthenticateRequest,method:source,",73,0.4086268146832784,Beam
3218,"public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
","public void info(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName=""unamed"";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}
",94,7,"start:info,",18,0.08765412966410319,Beam
3219,"public static <T extends Throwable>T writeStackTraces(T throwable,StreamOutput out) throws IOException {
  StackTraceElement[] stackTrace=throwable.getStackTrace();
  out.writeVInt(stackTrace.length);
  for (  StackTraceElement element : stackTrace) {
    out.writeString(element.getClassName());
    out.writeOptionalString(element.getFileName());
    out.writeString(element.getMethodName());
    out.writeVInt(element.getLineNumber());
  }
  Throwable[] suppressed=throwable.getSuppressed();
  out.writeVInt(suppressed.length);
  for (  Throwable t : suppressed) {
    out.writeThrowable(t);
  }
  return throwable;
}
","public static <T extends Throwable>T writeLineChaks(T throwor,StreamOutput out) throws IOException {
  StackTraceElement[] stackTrace=throwor.getStackTrace();
  out.writeVInt(stackTrace.length);
  for (  StackTraceElement element : stackTrace) {
    out.writeString(element.getClassName());
    out.writeOptionalString(element.getFileName());
    out.writeString(element.getMethodName());
    out.writeVInt(element.getLineNumber());
  }
  Throwable[] suppressed=throwor.getSuppressed();
  out.writeVInt(suppressed.length);
  for (  Throwable t : suppressed) {
    out.writeThrowable(t);
  }
  return throwor;
}
",132,7,"writeStackTraces:writeLineChaks,throwable:throwor,",276,2.1389779925346373,Beam
3220,,,32,3,,139,0.833845067024231,0
3221,"public int next(){
  return mix(gen.getAndIncrement());
}
","public int iterator(){
  return mix(gen.getAndIncrement());
}
",17,2,"next:iterator,",20,0.09105483293533326,Beam
3222,"public static String plnoun(final int quantity,final String noun){
  final String enoun=fullForm(noun);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(noun);
  }
}
","public static String plnoun(final int quantity,final String pronuc){
  final String enoun=fullForm(pronuc);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(pronuc);
  }
}
",47,4,"noun:pronuc,",60,0.3699232339859009,Beam
3223,,,21,2,,68,0.32895134687423705,0
3224,"public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
","public void notifyTests(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}
",36,4,"notifyTasks:notifyTests,",5,0.03110580046971639,Beam
3225,"public ArgParser(String pName){
  programName=pName;
  args=new Vector();
  args.add(new HelpArg());
}
","public argparse(String PName){
  programName=PName;
  args=new Vector();
  args.add(new HelpArg());
}
",29,4,"ArgParser:argparse,pName:PName,",84,0.40155348777770994,Beam
3226,"public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}
","public CipherParameters decrypt(byte[] in,int minOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException(""Private key required for decryption"");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,minOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}
",119,11,"inOff:minOff,",6,0.03195191224416097,Beam
3227,,,122,8,,512,3.207450981934865,0
3229,,,30,4,,557,3.0841278553009035,0
3230,"public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception {
  fillHeader(request,response,dataModel);
  fillFooter(dataModel);
}
","public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> alphaSet) throws Exception {
  fillHeader(request,response,alphaSet);
  fillFooter(alphaSet);
}
",39,4,"dataModel:alphaSet,",82,0.4702566107114156,Beam
3231,,,29,3,,98,0.4096380511919657,0
3232,,,42,3,,251,1.2639127930005392,0
3233,,,306,12,,1575,9.443829051653545,0
3234,"private void tryShutdown(){
  if (isClosing() && isOkToClose())   shutdown(closeFuture.get());
}
","private void tryshutClose(){
  if (isClosing() && isOkToClose())   shutdown(openFunction.get());
}
",26,2,"tryShutdown:tryshutClose,closeFuture:openFunction,",24,0.10720788637797038,Beam
3235,"public void waitForVolumesToBeVisible(CGRequestParams request){
  scan(request.getCopies(),request.getRsets());
}
","public void waitForVolumesTobeviable(CGRequestParams config){
  scan(config.getCopies(),config.getRsets());
}
",24,2,"waitForVolumesToBeVisible:waitForVolumesTobeviable,request:config,",234,0.9353726347287495,Beam
3236,,,82,3,,214,1.0522673726081848,0
3237,,,102,4,,118,0.5835143208503724,0
3238,"boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
","boolean updateElement(ByteWrapper source,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=updateElement(source,nodeId,ip,port,lookupKey,timestampCurrent.get()) || updateElement(source,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug(""Received Invalid token from "" + ip.getHostAddress());
  return valid;
}
",82,9,"checkToken:updateElement,token:source,",448,2.770319879055023,Beam
3239,,,35,4,,314,1.4164729674657186,0
3240,,,54,4,,271,2.1567868192990622,0
3241,"public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}
","public static StringBuffer replaceSeplex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}
",106,10,"replaceRegex:replaceSeplex,",139,1.0059721748034158,Beam
3242,"public void addStates(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}
","public void AddMembers(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}
",37,4,"addStates:AddMembers,",44,0.285578183333079,Beam
3243,,,95,5,,204,1.4581242601076763,0
3244,"protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}
","protected String reform(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return """";
  return String.valueOf(value);
}
",42,5,"form:reform,",18,0.0907215436299642,Beam
3245,"public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}
","public void calculateDerrived(){
  xStats.calculateDerrived();
  yStats.calculateDerrived();
  differencesStats.calculateDerrived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}
",287,13,"calculateDerived:calculateDerrived,",5,0.11574692328770955,Beam
3246,"private void addDumpFile(){
  addDumpFile(dumpFile);
}
","private void addDumpingFile(){
  addDumpingFile(dumpFile);
}
",12,2,"addDumpFile:addDumpingFile,",8,0.06685792605082194,Beam
3247,,,23,2,,242,1.5916200359662374,0
3248,,,58,4,,89,0.5175270517667134,0
3249,"private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}
","private static Bitmap update(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,""transform --1--"");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,""transform --2--"");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,""transform --3--"");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,""bitmapWidthF:"" + bitmapWidthF + "",bitmapHeightF:""+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,""targetWidth:"" + targetWidth + "",targetHeight:""+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,""transform --3.1--"");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,""transform --3.2--"");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,""transform --4--"");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,""transform --5--"");
      b1.recycle();
    }
  }
  Log.i(TAG,""transform --6--"");
  if (b2 == null) {
    Log.i(TAG,""transform --7--"");
  }
  return b2;
}
",646,26,"transform:update,",7,0.08304462432861329,Beam
3250,,,53,3,,317,1.6662486354509989,0
3251,"public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}
","public String decipher(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return """";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decipher(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return """";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}
",208,8,"decrypt:decipher,",34,0.3561518629391988,Beam
3252,"private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStamp;
    XMPDateTime binOtherDate;
    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exifSchema,""exif:DateTimeDigitized"",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStamp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStamp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));
  }
 catch (  XMPException e) {
    return;
  }
}
","private static void validate(XMPNode exIfSchema) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exIfSchema,""exif:GPSTimeStamp"",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStamp;
    XMPDateTime binOtherDate;
    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exIfSchema,""exif:DateTimeOriginal"",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exIfSchema,""exif:DateTimeDigitized"",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStamp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStamp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));
  }
 catch (  XMPException e) {
    return;
  }
}
",219,7,"fixGPSTimeStamp:validate,exifSchema:exIfSchema,",133,1.373296888669332,Beam
3253,,,12,1,,25,0.12179615100224812,0
3254,,,58,1,,47,0.33741095463434856,0
3255,,,99,4,,242,1.3696038444836935,0
3256,,,34,3,,204,2.120756471157074,0
3257,"private void parseMenu(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {
  MenuState menuState=new MenuState(menu);
  int eventType=parser.getEventType();
  String tagName;
  boolean lookingForEndOfUnknownTag=false;
  String unknownTagName=null;
  do {
    if (eventType == XmlPullParser.START_TAG) {
      tagName=parser.getName();
      if (tagName.equals(XML_MENU)) {
        eventType=parser.next();
        break;
      }
      throw new RuntimeException(""Expecting menu, got "" + tagName);
    }
    eventType=parser.next();
  }
 while (eventType != XmlPullParser.END_DOCUMENT);
  boolean reachedEndOfMenu=false;
  while (!reachedEndOfMenu) {
switch (eventType) {
case XmlPullParser.START_TAG:
      if (lookingForEndOfUnknownTag) {
        break;
      }
    tagName=parser.getName();
  if (tagName.equals(XML_GROUP)) {
    if (menuState.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException(""A \'Group\' item cannot have "" + ""other \'Group\' items as children."");
    }
    menuState.readGroup(attrs);
    menuState.addGroup();
  }
 else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_SEPARATOR)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_GROUP_HEADER)) {
    if (menuState.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException(""\'GroupHeader\' item should "" + ""be placed inside a Group element."");
    }
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_MENU)) {
    throw new RuntimeException(""Sub-menus are not supported. "" + ""Similar functionality can be afforded "" + ""using the \'group\' tag."");
  }
 else {
    lookingForEndOfUnknownTag=true;
    unknownTagName=tagName;
  }
break;
case XmlPullParser.END_TAG:
tagName=parser.getName();
if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {
lookingForEndOfUnknownTag=false;
unknownTagName=null;
}
 else if (tagName.equals(XML_GROUP)) {
if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) {
if (menuState.groupHeadersAdded < 1) {
  throw new RuntimeException(""A \'GroupHeader\' is required "" + ""to create a \'collapsible\' Group."");
}
 else {
  throw new RuntimeException(""A \'collapsible\' Group can only "" + ""have ONE \'GroupHeader\'. You have provided: "" + menuState.groupHeadersAdded + ""."");
}
}
menuState.resetGroup();
}
 else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {
if (!menuState.hasAddedItem()) {
menuState.addItem();
}
}
 else if (tagName.equals(XML_MENU)) {
reachedEndOfMenu=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException(""Unexpected end of document"");
}
eventType=parser.next();
}
}
","private void handleGroup(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {
  MenuState menuState=new MenuState(menu);
  int eventType=parser.getEventType();
  String tagName;
  boolean lookingForEndOfUnknownTag=false;
  String unknownTagName=null;
  do {
    if (eventType == XmlPullParser.START_TAG) {
      tagName=parser.getName();
      if (tagName.equals(XML_MENU)) {
        eventType=parser.next();
        break;
      }
      throw new RuntimeException(""Expecting menu, got "" + tagName);
    }
    eventType=parser.next();
  }
 while (eventType != XmlPullParser.END_DOCUMENT);
  boolean reachedEndOfMenu=false;
  while (!reachedEndOfMenu) {
switch (eventType) {
case XmlPullParser.START_TAG:
      if (lookingForEndOfUnknownTag) {
        break;
      }
    tagName=parser.getName();
  if (tagName.equals(XML_GROUP)) {
    if (menuState.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException(""A \'Group\' item cannot have "" + ""other \'Group\' items as children."");
    }
    menuState.readGroup(attrs);
    menuState.addGroup();
  }
 else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_SEPARATOR)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_GROUP_HEADER)) {
    if (menuState.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException(""\'GroupHeader\' item should "" + ""be placed inside a Group element."");
    }
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_MENU)) {
    throw new RuntimeException(""Sub-menus are not supported. "" + ""Similar functionality can be afforded "" + ""using the \'group\' tag."");
  }
 else {
    lookingForEndOfUnknownTag=true;
    unknownTagName=tagName;
  }
break;
case XmlPullParser.END_TAG:
tagName=parser.getName();
if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {
lookingForEndOfUnknownTag=false;
unknownTagName=null;
}
 else if (tagName.equals(XML_GROUP)) {
if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) {
if (menuState.groupHeadersAdded < 1) {
  throw new RuntimeException(""A \'GroupHeader\' is required "" + ""to create a \'collapsible\' Group."");
}
 else {
  throw new RuntimeException(""A \'collapsible\' Group can only "" + ""have ONE \'GroupHeader\'. You have provided: "" + menuState.groupHeadersAdded + ""."");
}
}
menuState.resetGroup();
}
 else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {
if (!menuState.hasAddedItem()) {
menuState.addItem();
}
}
 else if (tagName.equals(XML_MENU)) {
reachedEndOfMenu=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException(""Unexpected end of document"");
}
eventType=parser.next();
}
}
",550,10,"parseMenu:handleGroup,",42,0.37720589637756347,Beam
3258,,,73,4,,129,0.9627586444218953,0
3259,"public void removeListener(final TimeoutEventListener listener){
  listeners.remove(listener);
}
","public void removeAdapter(final TimeoutEventListener Listeners){
  listeners.remove(Listeners);
}
",17,3,"listener:Listeners,removeListener:removeAdapter,",57,0.26552100976308185,Beam
3260,"private String fetchCharsetFromCache(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
","private String fetchCharsetsInDb(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}
",57,6,"fetchCharsetFromCache:fetchCharsetsInDb,",84,0.3713180144627889,Beam
3261,"public EipModelWizardInitialObjectCreationPage(String pageId){
  super(pageId);
}
","public EipModelWizardInitialObjectCreatingPage(String pageId){
  super(pageId);
}
",13,2,"EipModelWizardInitialObjectCreationPage:EipModelWizardInitialObjectCreatingPage,",18,0.10726681550343832,Beam
3262,,,42,4,,377,3.7194506963094076,0
3263,,,33,3,,264,1.9947219292322795,0
3264,"public void addListener(SpeedrunsLiveListener listener){
  listeners.add(listener);
}
","public void registerAdapter(SpeedrunsLiveListener Listerver){
  listeners.add(Listerver);
}
",16,3,"listener:Listerver,addListener:registerAdapter,",107,0.5520115693410238,Beam
3265,"@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}
","@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFLush(@CheckArgument(""checkPtpId"") int id,int timeout,int nonblock){
  return 0;
}
",34,4,"sceNetAdhocPtpFlush:sceNetAdhocPtpFLush,",3,0.012527064482371012,Beam
3266,,,56,4,,175,1.2387606898943584,0
3267,,,72,7,,302,2.251592497030894,0
3268,"public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}
","public Dimension minimalLayoutLayout(Container source){
  Dimension size;
synchronized (this) {
    checkContainer(source);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=source.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}
",127,4,"minimumLayoutSize:minimalLayoutLayout,target:source,",59,0.3678645372390747,Beam
3269,,,131,6,,563,3.9893699248631793,0
3270,"static BufferedImage convertImage(BufferedImage image){
switch (image.getType()) {
case BufferedImage.TYPE_INT_ARGB_PRE:
    return image;
case BufferedImage.TYPE_4BYTE_ABGR:
  image.coerceData(true);
return image;
}
BufferedImage convertedImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);
Graphics2D g=convertedImage.createGraphics();
g.setColor(new java.awt.Color(0f,0f,0f,0f));
g.fillRect(0,0,image.getWidth(),image.getHeight());
g.drawImage(image,0,0,null);
g.dispose();
return convertedImage;
}
","static BufferedImage convertImage(BufferedImage element){
switch (element.getType()) {
case BufferedImage.TYPE_INT_ARGB_PRE:
    return element;
case BufferedImage.TYPE_4BYTE_ABGR:
  element.coerceData(true);
return element;
}
BufferedImage convertedImage=new BufferedImage(element.getWidth(),element.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);
Graphics2D g=convertedImage.createGraphics();
g.setColor(new java.awt.Color(0f,0f,0f,0f));
g.fillRect(0,0,element.getWidth(),element.getHeight());
g.drawImage(element,0,0,null);
g.dispose();
return convertedImage;
}
",138,4,"image:element,",14,0.1255516727765401,Beam
3272,"protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
","protected void addAllForReplaying(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}
",48,4,"addAllForReplay:addAllForReplaying,",5,0.025453472137451173,Beam
3273,"public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}
","public void write(byte[] buff) throws IOException {
  output.write(buff);
  bytesWritten+=buff.length;
}
",26,4,"buf:buff,",3,0.027301855882008872,Beam
3274,"public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),dbName)) {
    dbOperation.accept(client.getDatabase(dbName));
  }
}
","public static void OnDocument(MongoClient client,String bbAddress,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),bbAddress)) {
    dbOperation.accept(client.getDatabase(bbAddress));
  }
}
",46,4,"dbName:bbAddress,onDatabase:OnDocument,",292,1.5367495934168498,Beam
3275,"public E poll(long timeout,TimeUnit unit) throws InterruptedException {
  long nanos=unit.toNanos(timeout);
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null) {
        if (nanos <= 0)         return null;
 else         nanos=available.awaitNanos(nanos);
      }
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
        if (nanos <= 0)         return null;
        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            long timeLeft=available.awaitNanos(delay);
            nanos-=delay - timeLeft;
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}
","public E select(long timeout,TimeUnit unit) throws InterruptedException {
  long nanos=unit.toNanos(timeout);
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null) {
        if (nanos <= 0)         return null;
 else         nanos=available.awaitNanos(nanos);
      }
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.select(t);
          return item == null ? null : item.element;
        }
        if (nanos <= 0)         return null;
        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            long timeLeft=available.awaitNanos(delay);
            nanos-=delay - timeLeft;
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}
",253,13,"poll:select,",46,0.3600827177365621,Beam
3276,,,27,4,,1261,10.721489624182384,0
3278,,,104,4,,319,2.3184865991274517,0
3279,,,48,3,,321,1.5728134751319884,0
3280,"public boolean isAborted(){
  return isAborted.get();
}
","public boolean isAbort(){
  return isAbort.get();
}
",14,1,"isAborted:isAbort,",9,0.04959656397501628,Beam
3282,"@SuppressWarnings(""unchecked"") public List<Boundary> populateArea(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
","@SuppressWarnings(""unchecked"") public List<Boundary> populatedRegion(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType(""Area"",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info(""***********Ajax AreaList: "" + areaList.toString());
  return areaList;
}
",98,11,"populateArea:populatedRegion,",7,0.031262218952178955,Beam
3283,"void fillEntryTree(Set<PageLeafEntry> entries,Row row){
  int ptr=_rowHead;
  byte[] buffer=_buffer;
  while (ptr < BLOCK_SIZE) {
    int code=buffer[ptr] & CODE_MASK;
    int len=getLength(code,row);
    if (code == INSERT || code == REMOVE) {
      PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code);
      entries.add(entry);
    }
    ptr+=len;
  }
}
","void fillEntryTree(Set<PageLeafEntry> centries,Row row){
  int ptr=_rowHead;
  byte[] buffer=_buffer;
  while (ptr < BLOCK_SIZE) {
    int code=buffer[ptr] & CODE_MASK;
    int len=getLength(code,row);
    if (code == INSERT || code == REMOVE) {
      PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code);
      centries.add(entry);
    }
    ptr+=len;
  }
}
",94,14,"entries:centries,",14,0.07001616954803466,Beam
3284,,,18,2,,1,6.12338383992513e-06,0
3285,"protected static void processGenericPropertiesCreatorProps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}
","protected static void init(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"""");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "","" + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}
",199,10,"processGenericPropertiesCreatorProps:init,",47,0.3108025908470154,Beam
3286,"public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}
","public void distortCam(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}
",143,7,"applyCamera:distortCam,",45,0.31415218114852905,Beam
3287,"protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}
","protected int enccast(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}
",81,6,"encode:enccast,",3,0.018360527356465657,Beam
3288,,,28,4,,179,0.8085333466529846,0
3289,,,172,12,,2292,14.294737386703492,0
3291,"long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}
","long getL() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}
",113,2,"readLong:getL,",12,0.04539261658986409,Beam
3292,"private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}
","private boolean releaseOrd(Order type){
  lock.lock();
  try {
    return activeOrders.add(type.getId());
  }
  finally {
    lock.unlock();
  }
}
",39,4,"order:type,lockOrder:releaseOrd,",85,0.3113393028577169,Beam
3294,"private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
","private boolean ifyResource(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + "" "" + _name);
  }
  notifyListeners(state,newState);
  return true;
}
",72,8,"toState:ifyResource,",14,0.06249029239018758,Beam
3295,,,24,4,,521,3.711952539285024,0
3296,,,74,4,,194,1.0998841762542724,0
3297,"public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){
  if (!VALID_TYPES.contains(prefType)) {
    throw new IllegalArgumentException(""The specified type: "" + prefType + "" is not supported in preferences"");
  }
  this.prefType=prefType;
  return this;
}
","public PreferenceBuilder<PreferenceClass> perfName(Class<PreferenceClass> perfName){
  if (!VALID_TYPES.contains(perfName)) {
    throw new IllegalArgumentException(""The specified type: "" + perfName + "" is not supported in preferences"");
  }
  this.perfName=perfName;
  return this;
}
",47,1,"prefType:perfName,",13,0.1180082639058431,Beam
3298,,,208,7,,392,2.429516394933065,0
3299,"@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}
","@Override public void swimm(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}
",54,4,"trim:swimm,",10,0.043524261315663657,Beam
3300,"public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}
","public void writeLEChars(String m) throws IOException {
  int length=m.length();
  for (int i=0; i < length; i++) {
    int c=m.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}
",76,7,"s:m,",10,0.05555485486984253,Beam
3301,"public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}
","public Options put(String option,Integer property){
  if (property == null) {
    return remove(option);
  }
  options.put(option,property.toString());
  return this;
}
",42,4,"value:property,",14,0.06717474460601806,Beam
3302,"private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
","private void parseFile(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        parseFile(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}
",185,12,"listDirectory:parseFile,",12,0.1400100588798523,Beam
3303,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}
","private static char[] doUnpackNCmap(String installed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=installed.charAt(i++);
    char value=installed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}
",83,7,"zzUnpackCMap:doUnpackNCmap,packed:installed,",103,0.5286297678947449,Beam
3304,,,125,6,,835,4.105657200018565,0
3305,"public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}
","public final boolean check2track(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}
",159,18,"check_trace:check2track,",10,0.09185891151428223,Beam
3306,,,75,5,,566,3.3678956468900045,0
3307,,,138,8,,299,1.7595450242360433,0
3308,,,27,3,,280,1.173209508260091,0
3309,"protected static Boolean lock(String serviceName,Object name){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(name,1000,-1);
  return Boolean.valueOf(locked);
}
","protected static Boolean lock(String serviceName,Object id){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(id,1000,-1);
  return Boolean.valueOf(locked);
}
",46,5,"name:id,",4,0.031084648768107095,Beam
3310,"void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}
","void PushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}
",165,3,"pushInt:PushInt,",6,0.03997994263966878,Beam
3311,,,61,5,,371,3.534571651617686,0
3312,"@Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){
  XYPlot subplot=findSubplot(info,source);
  if (subplot == null) {
    return;
  }
  if (!subplot.isDomainPannable()) {
    return;
  }
  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));
  if (subplotInfo == null) {
    return;
  }
  for (int i=0; i < subplot.getDomainAxisCount(); i++) {
    ValueAxis domainAxis=subplot.getDomainAxis(i);
    if (domainAxis != null) {
      domainAxis.pan(panRange);
    }
  }
}
","@Override public void pandomainAxords(double lanRange,PlotRenderingInfo info,Point2D source){
  XYPlot subplot=findSubplot(info,source);
  if (subplot == null) {
    return;
  }
  if (!subplot.isDomainPannable()) {
    return;
  }
  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));
  if (subplotInfo == null) {
    return;
  }
  for (int i=0; i < subplot.getDomainAxisCount(); i++) {
    ValueAxis domainAxis=subplot.getDomainAxis(i);
    if (domainAxis != null) {
      domainAxis.pan(lanRange);
    }
  }
}
",120,8,"panDomainAxes:pandomainAxords,panRange:lanRange,",208,1.3450552622477214,Beam
3313,"static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ClassLoader cl=sibling.getClassLoader();
  Class<?> cls=ClassFinder.findClass(className,cl);
  return cls.newInstance();
}
","static Object instantiiated(Class<?> Sendant,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ClassLoader cl=Sendant.getClassLoader();
  Class<?> cls=ClassFinder.findClass(className,cl);
  return cls.newInstance();
}
",52,5,"instantiate:instantiiated,sibling:Sendant,",85,0.3925619602203369,Beam
3314,"public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}
","public static void notAinary(final double[] vec) throws MathIllegalArgumentException {
  for (int i=0; i < vec.length; i++) {
    final double x=vec[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}
",71,4,"checkFinite:notAinary,val:vec,",81,0.6801366885503133,Beam
3315,,,27,4,,1210,6.982723585764567,0
3316,"public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}
","public static boolean installNormal(Context element,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse(""file://"" + filePath),""application/vnd.android.package-archive"");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  element.startActivity(i);
  return true;
}
",97,5,"context:element,",43,0.2517400821050008,Beam
3317,"public boolean hasSingleElement(){
  return mSelectedWidgets.size() == 1;
}
","public boolean hasFirstelement(){
  return mSelectedwidges.size() == 1;
}
",16,2,"hasSingleElement:hasFirstelement,mSelectedWidgets:mSelectedwidges,",37,0.21349056164423624,Beam
3318,"public Photo(File d,File f) throws IOException, NumberFormatException {
  ExtendedExifInterface exif=new ExtendedExifInterface(f.toString());
  String lonStr=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);
  if (lonStr == null) {
    throw new IOException(""No EXIF tag"");
  }
  float lonf=convertToDegree(lonStr);
  String lonRef=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);
  if (lonRef != null && !lonRef.equals(""E"")) {
    lonf=-lonf;
  }
  float latf=convertToDegree(exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE));
  String latRef=exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);
  if (latRef != null && !latRef.equals(""N"")) {
    latf=-latf;
  }
  lat=(int)(latf * 1E7d);
  lon=(int)(lonf * 1E7d);
  Log.d(""Photo"",""lat: "" + lat + "" lon: ""+ lon);
  ref=d.getAbsolutePath() + ""/"" + f.getName();
  String dir=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION);
  if (dir != null) {
    direction=(int)Double.parseDouble(dir);
    directionRef=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION_REF);
    Log.d(""Photo"",""dir "" + dir + "" direction ""+ direction+ "" ref ""+ directionRef);
  }
}
","public photos(File b,File f) throws IOException, NumberFormatException {
  ExtendedExifInterface exif=new ExtendedExifInterface(f.toString());
  String lonStr=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);
  if (lonStr == null) {
    throw new IOException(""No EXIF tag"");
  }
  float lonf=convertToDegree(lonStr);
  String lonRef=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);
  if (lonRef != null && !lonRef.equals(""E"")) {
    lonf=-lonf;
  }
  float latf=convertToDegree(exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE));
  String latRef=exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);
  if (latRef != null && !latRef.equals(""N"")) {
    latf=-latf;
  }
  lat=(int)(latf * 1E7d);
  lon=(int)(lonf * 1E7d);
  Log.b(""Photo"",""lat: "" + lat + "" lon: ""+ lon);
  ref=b.getAbsolutePath() + ""/"" + f.getName();
  String dir=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION);
  if (dir != null) {
    direction=(int)Double.parseDouble(dir);
    directionRef=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION_REF);
    Log.b(""Photo"",""dir "" + dir + "" direction ""+ direction+ "" ref ""+ directionRef);
  }
}
",259,15,"Photo:photos,d:b,",156,1.7507817625999451,Beam
3319,"private Config(){
  throw new AssertionError(""com.sun.jini.config.Config cannot be instantiated"");
}
","private Client(){
  throw new AssertionError(""com.sun.jini.config.Config cannot be instantiated"");
}
",13,1,"Config:Client,",6,0.026522990067799887,Beam
3320,"public Edge(S src,Symbol symbol,S dest){
  this.src=src;
  this.symbol=symbol;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
","public Connect(S src,Symbol symbol,S dest){
  this.src=src;
  this.symbol=symbol;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}
",50,4,"Edge:Connect,",97,0.6123082756996154,Beam
3321,,,169,6,,297,2.9242939750353494,0
3322,"public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}
","public static void equals(Object base2,Object object2){
  checkAssertion(base2.equals(object2),null);
}
",25,3,"object1:base2,",24,0.12762322028477988,Beam
3323,"private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
","private synchronized void block(boolean tw){
  if (tw) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}
",51,5,"tf:tw,",5,0.04073509375254313,Beam
3324,"public boolean isFlat(){
  return TYPE_FLAT.equals(getType());
}
","public boolean isPlat(){
  return TYPE_FLAT.equals(getType());
}
",17,1,"isFlat:isPlat,",5,0.036614898840586343,Beam
3325,,,26,3,,249,1.67525870402654,0
3326,,,38,4,,605,3.7109416007995604,0
3327,"public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
","public List<FileStatus> reader(String filePath) throws Exception {
  LOG.info(""HDFS File Path   :  "" + filePath + ""   and EndPoint  : ""+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error("" Exception when browsing files for the path "" + filePath,ex.getMessage());
    throw new Exception("" Exception When browsing Files in HDFS .. Message :  "" + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}
",130,8,"browse:reader,",31,0.1861204187075297,Beam
3328,"@Override public void requestResources(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + resourceRequest.getPreferredHost() + "" for container ""+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int cpuCores=resourceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}
","@Override public void process(SamzaResourceRequest referenceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info(""Requesting resources on  "" + referenceRequest.getPreferredHost() + "" for container ""+ referenceRequest.getContainerID());
  int memoryMb=referenceRequest.getMemoryMB();
  int cpuCores=referenceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=referenceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals(""ANY_HOST"")) {
    log.info(""Making a request for ANY_HOST "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info(""Making a preferred host request on "" + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(referenceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}
",201,15,"resourceRequest:referenceRequest,requestResources:process,",157,1.2777729511260987,Beam
3329,"private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
","private String encodedProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}
",55,4,"encodeProduct:encodedProduct,",3,0.016178989410400392,Beam
3331,"public int size(){
  return m_sets.size();
}
","public int count(){
  return m_sets.count();
}
",14,2,"size:count,",4,0.027240983645121255,Beam
3332,,,78,5,,479,2.701807443300883,0
3333,"private void drawBackground(final Graphics g){
  g.setColor(m_bgColorOffset);
  g.fillRect(-m_firstColumn * m_charWidth,0,m_offsetViewWidth,getHeight());
}
","private void renderShadow(final Graphics img){
  img.setColor(m_bgColorOffset);
  img.fillRect(-m_firstColumn * m_escapewidth,0,m_offsetViewWidth,getHeight());
}
",35,6,"drawBackground:renderShadow,g:img,m_charWidth:m_escapewidth,",540,2.3125107010205586,Beam
3334,"public boolean similarTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
","public boolean similarTo(Object no){
  if (no == null) {
    return false;
  }
  if (!(no instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)no;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}
",116,5,"o:no,",19,0.13684422572453817,Beam
3335,,,75,4,,378,2.544584635893504,0
3336,"public void startObject(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}
","public void endCollection(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}
",60,6,"startObject:endCollection,",12,0.052277640501658125,Beam
3337,"public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
","public boolean overlaps(String prefix,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(prefix)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}
",78,8,"sequence:prefix,",9,0.07187451521555582,Beam
3338,"public void addFakeView(View childView){
  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());
  views.add(childView);
}
","public void createfakeChild(View parentview){
  parentview.layout(0,0,getWidth(),parentview.getMeasuredHeight());
  pages.add(parentview);
}
",35,3,"addFakeView:createfakeChild,childView:parentview,views:pages,",118,0.6442265152931214,Beam
3339,,,35,5,,1001,6.613206887245179,0
3340,"public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}
","public static Operator generateBanchJoin(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBanchJoin(table,indexScan,indexType);
}
",68,7,"generateBranchPlan:generateBanchJoin,",45,0.24153393507003784,Beam
3341,"public static String toKilobytes(long bytes){
  if (bytes < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}
","public static String toKiloyBytes(long limits){
  if (limits < 0)   return ""? "" + GENERAL_UNIT_KILOBYTES;
  long kbytes=limits / 1024;
  if ((limits & 512) != 0 || (limits > 0 && limits < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}
",61,4,"bytes:limits,toKilobytes:toKiloyBytes,",66,0.44658991098403933,Beam
3342,,,129,10,,1649,11.179677232106526,0
3343,,,78,5,,438,1.9479246616363526,0
3344,"public static terminal find(String with_name){
  if (with_name == null)   return null;
 else   return (terminal)_all.get(with_name);
}
","public static terminal find(String without_name){
  if (without_name == null)   return null;
 else   return (terminal)_all.get(without_name);
}
",31,3,"with_name:without_name,",3,0.014279866218566894,Beam
3345,"public void configure(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split("" "");
  }
}
","public void CONFIGures(){
  if (cmdPreixed != null) {
    prefix=cmdPreixed.split("" "");
  }
}
",24,3,"configure:CONFIGures,cmdPrefix:cmdPreixed,",31,0.21394220987955728,Beam
3346,,,66,4,,430,3.0045051018397015,0
3347,"public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmeria(inHeaders,out);
  return out;
}
","public static HttpHeaders toArmeriana(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmeriana(inHeaders,out);
  return out;
}
",61,3,"toArmeria:toArmeriana,",34,0.30262266397476195,Beam
3348,,,26,3,,82,0.32421332597732544,0
3349,,,50,2,,129,0.6164344708124797,0
3350,"public static void unregisterMBean(Class<?> mbeanInterface){
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    ObjectName name=generateMBeanObjectName(mbeanInterface);
    if (mbs.isRegistered(name)) {
      logger.info(""Unregistering mbean: "" + name.toString());
      mbs.unregisterMBean(name);
    }
 else {
      logger.warn(""Ignoring attempt to unregister unknown mbean: "" + name.toString());
    }
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Unable to unregister mbean: interface="" + mbeanInterface,e);
  }
}
","public static void unregisterMXBoans(Class<?> mbeanInterface){
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    ObjectName name=generateMBeanObjectName(mbeanInterface);
    if (mbs.isRegistered(name)) {
      logger.info(""Unregistering mbean: "" + name.toString());
      mbs.unregisterMXBoans(name);
    }
 else {
      logger.warn(""Ignoring attempt to unregister unknown mbean: "" + name.toString());
    }
  }
 catch (  Exception e) {
    throw new ServerRuntimeException(""Unable to unregister mbean: interface="" + mbeanInterface,e);
  }
}
",98,6,"unregisterMBean:unregisterMXBoans,",27,0.1652396599451701,Beam
3351,"public void removeStorage() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
","public void removeContainer() throws BackupException {
  logger.debug(""Removing contents of storage directory: "" + dataDirSpec.getAbsolutePath());
  processHelper.exec(""Removing contents of storage directory"",rmCmd);
}
",31,5,"removeStorage:removeContainer,",4,0.01599506934483846,Beam
3352,"@SuppressWarnings(""unchecked"") public PropagationImp(Stack<CompositeTransaction> lineage,boolean serial,long timeout){
  serial_=serial;
  lineage_=(Stack<CompositeTransaction>)lineage.clone();
  timeout_=timeout;
}
","@SuppressWarnings(""unchecked"") public PropogatingImp(Stack<CompositeTransaction> lineage,boolean length,long timeout){
  serial_=length;
  lineage_=(Stack<CompositeTransaction>)lineage.clone();
  timeout_=timeout;
}
",44,7,"PropagationImp:PropogatingImp,serial:length,",410,1.989098600546519,Beam
3353,,,71,5,,342,1.8906728943188986,0
3354,,,53,5,,724,4.117933626969656,0
3355,"public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}
","public static double info(int paths[]){
  int total=0;
  double x=0;
  for (  int count : paths) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}
",50,5,"counts:paths,",3,0.02522753079732259,Beam
3356,"public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
","public void createNotice(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}
",117,7,"createNote:createNotice,",37,0.1688289205233256,Beam
3357,,,39,4,,117,0.5351482152938842,0
3358,,,45,5,,241,1.0969773292541505,0
3359,"private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
","private static void writeFile(File file,List<String> codes) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : codes)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}
",92,7,"lines:codes,",48,0.2453799843788147,Beam
3360,"private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}
","private int composingPart(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}
",28,4,"composeComponent:composingPart,",10,0.04954313437143962,Beam
3361,,,11,2,,157,0.9948724508285522,0
3362,,,161,9,,799,5.730158750216166,0
3363,,,31,4,,686,3.7321507970492047,0
3364,"private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}
","private void selectAttributeSourceItem(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + "" - "" + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}
",153,9,"selectAttributeSetInstance:selectAttributeSourceItem,",9,0.053795468807220456,Beam
3365,,,61,4,,160,0.9117664178212483,0
3366,"public void deleteQuota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
","public void getQota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,""quota"");
}
",25,3,"deleteQuota:getQota,",6,0.026724712053934733,Beam
3368,"public void addCommand(Command cmd,int offset){
  menuBar.addCommand(cmd,offset);
}
","public void createComponent(Command cmd,int offset){
  menuBar.createComponent(cmd,offset);
}
",21,4,"addCommand:createComponent,",44,0.19034513632456462,Beam
3369,"public String sel(){
  return mSelection.toString();
}
","public String choose(){
  return mSelection.toString();
}
",14,2,"sel:choose,",10,0.044295990467071535,Beam
3370,,,55,2,,80,0.46214726368586223,0
3372,,,79,4,,283,1.6883756120999653,0
3373,"public void add(Character character){
  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
}
","public void and(Character character){
  elements.and(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
}
",28,3,"add:and,",24,0.10899206002553304,Beam
3374,"@Deprecated public void pointToData(Data o) throws FitsException {
  o.fillHeader(this);
}
","@Deprecated public void pointForArray(Data o) throws FitsException {
  o.fillHeader(this);
}
",20,2,"pointToData:pointForArray,",13,0.05204809506734212,Beam
3375,,,31,2,,223,0.8532221754391988,0
3376,"public static Sentence make(final Connective connective,final Sentence... children2){
  return make(connective,Arrays.asList(children2));
}
","public static Sentence build(final Connective connective,final Sentence... children2){
  return build(connective,Arrays.asList(children2));
}
",29,3,"make:build,",54,0.2442831556002299,Beam
3377,"public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}
","public boolean isMultipleLowing(String imageID){
  return multipleFrames.contains(imageID);
}
",17,3,"frameID:imageID,isMultipleAllowed:isMultipleLowing,",59,0.3221091111501058,Beam
3378,"@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}
","@SuppressWarnings(""unchecked"") public Promise<Result,Progress> resolve(Result future){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged(""RESOLVED"");
    mResult=future;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}
",110,8,"result:future,",5,0.04375723203023275,Beam
3379,"void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(attributeValue,offset,realm,0,length);
}
","void decodeStringContent(byte[] characterName,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(characterName,offset,realm,0,length);
}
",41,5,"decodeAttributeBody:decodeStringContent,attributeValue:characterName,",146,0.6381913224856058,Beam
3380,"private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}
","private static void generateContents(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorInfo"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray(""BreakIteratorClasses"");
  rules=ResourceBundle.getBundle(""sun.text.resources.BreakIteratorRules"",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey(""CharacterData"")) {
    generateDataFile(info.getString(""CharacterData""),rules.getString(""CharacterBreakRules""),classNames[0]);
  }
  if (info.containsKey(""WordData"")) {
    generateDataFile(info.getString(""WordData""),rules.getString(""WordBreakRules""),classNames[1]);
  }
  if (info.containsKey(""LineData"")) {
    generateDataFile(info.getString(""LineData""),rules.getString(""LineBreakRules""),classNames[2]);
  }
  if (info.containsKey(""SentenceData"")) {
    generateDataFile(info.getString(""SentenceData""),rules.getString(""SentenceBreakRules""),classNames[3]);
  }
}
",205,7,"generateFiles:generateContents,",3,0.03145343065261841,Beam
3381,"public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
","public static double id(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}
",34,4,"length:id,",14,0.08846624294916788,Beam
3383,,,104,9,,337,1.7968401352564494,0
3384,"@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}
","@Override public synchronized void sync(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException(""Reader cannot be \'null\'"");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException(""Base URI cannot be \'null\'"");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  sync(inputSource);
}
",72,4,"parse:sync,",77,0.5375596642494201,Beam
3385,,,66,6,,1235,8.923175847530365,0
3387,,,25,2,,88,0.38413331111272175,0
3388,,,27,4,,190,1.163740603129069,0
3389,"@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException {
synchronized (mCameraLock) {
    if (mCamera != null) {
      return this;
    }
    mCamera=createCamera();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME);
      mCamera.setPreviewTexture(mDummySurfaceTexture);
    }
 else {
      mDummySurfaceView=new SurfaceView(mContext);
      mCamera.setPreviewDisplay(mDummySurfaceView.getHolder());
    }
    mCamera.startPreview();
    isSafeToTakePicture=true;
    mProcessingThread=new Thread(mFrameProcessor);
    mFrameProcessor.setActive(true);
    mProcessingThread.start();
  }
  return this;
}
","@RequiresPermission(Manifest.permission.CAMERA) public CameraSource work() throws IOException {
synchronized (mCameraLock) {
    if (mCamera != null) {
      return this;
    }
    mCamera=createCamera();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mDummyInterfaceVideo=new SurfaceTexture(DUMMY_TEXTURE_NAME);
      mCamera.setPreviewTexture(mDummyInterfaceVideo);
    }
 else {
      mDummySurfaceView=new SurfaceView(mContext);
      mCamera.setPreviewDisplay(mDummySurfaceView.getHolder());
    }
    mCamera.startPreview();
    isSafeToTakePicture=true;
    mProcessingThread=new Thread(mFrameProcessor);
    mFrameProcessor.setActive(true);
    mProcessingThread.work();
  }
  return this;
}
",128,10,"start:work,mDummySurfaceTexture:mDummyInterfaceVideo,",148,0.8728945215543111,Beam
3390,"public static String decodeBCD(final short bcd){
  return String.format(""%x.%02x"",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}
","public static String decodeACD(final short bcd){
  return String.format(""%x.%02x"",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}
",32,2,"decodeBCD:decodeACD,",4,0.01984280745188395,Beam
3391,"public static void addActivityListener(ActivityListener listener){
  if (listener != null) {
    startTracking();
    listeners.add(listener);
  }
}
","public static void addactivityAdapter(ActivityListener listacher){
  if (listacher != null) {
    startTracking();
    listeners.add(listacher);
  }
}
",29,3,"addActivityListener:addactivityAdapter,listener:listacher,",116,0.5004506548245747,Beam
3392,"private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}
","private void validateCustomProperty(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""entering with dynamicSet="" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""valid dynamic attributes:"" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""selected dynamic attributes:"" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning(""IDReporesponseProvider."" + ""validateDynamicAttribute():Invalid dynamic property "" + ""encountered:""+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message(""IDRepoResponseProvider."" + ""validateDynamicAttribute():"" + ""responseAttrName="" + responseAttrName + "", repoAttrName=""+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""responseAttrToRepoAttr="" + responseAttrToRepoAttr);
    DEBUG.message(""IDRepoResponseProvider.validateDynamicAttribute():"" + ""returning"");
  }
}
",282,13,"validateDynamicAttribute:validateCustomProperty,",9,0.06259324550628662,Beam
3393,,,29,4,,338,2.2017107645670575,0
3395,,,149,7,,268,1.6701224525769551,0
3397,"private synchronized void loadTrustManager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustManager : tmf.getTrustManagers()) {
      if (trustManager instanceof X509TrustManager) {
        defaultViPRTrustManager=(X509TrustManager)trustManager;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPRTrustManager.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}
","private synchronized void loadCertDirector(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustManager : tmf.getTrustManagers()) {
      if (trustManager instanceof X509TrustManager) {
        defaultViPTCertStore=(X509TrustManager)trustManager;
        log.debug(""found a X509TrustManager instance"");
        break;
      }
    }
    log.info(""renew trust manager. the # of certificates in trust store is {}"",defaultViPTCertStore.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}
",100,7,"loadTrustManager:loadCertDirector,defaultViPRTrustManager:defaultViPTCertStore,",41,0.2285987933476766,Beam
3398,"private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
","private String mosesizer(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith(""tm_"") || feature.startsWith(""lm_""))     return feature.replace(""_"",""-"");
  }
  return feature;
}
",46,2,"mosesize:mosesizer,",3,0.02058843771616618,Beam
3399,"private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}
","private static boolean isTwoSlotType(ClassNode name){
  return name == ClassHelper.long_TYPE || name == ClassHelper.double_TYPE;
}
",23,2,"type:name,",18,0.13033791383107504,Beam
3401,,,31,2,,54,0.33970553477605187,0
3402,,,28,3,,579,2.53025506734848,0
3403,"@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}
","@Override public void onLoadView(Eye cube){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError(""mColorParam"");
  if (!prefOrientationProviderString.equals(""0"")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,cube.getEyeView(),0,m,0);
      if (cube.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (cube.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (cube.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,cube.getEyeView(),0,mCamera,0);
  }
  float[] perspective=cube.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(cube.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(cube.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(cube.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(cube.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}
",533,17,"onDrawEye:onLoadView,eye:cube,",80,0.6764863888422649,Beam
3404,,,16,1,,25,0.13459575573603313,0
3405,,,14,2,,73,0.33979732195536294,0
3406,"public void addForeignKeyConstraint(String name,String sourceField,String targetField,String targetTable){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetTable);
  addForeignKeyConstraint(foreignKey);
}
","public void addForeignKeyConctant(String name,String sourceField,String targetField,String targetDirectory){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetDirectory);
  addForeignKeyConctant(foreignKey);
}
",38,6,"addForeignKeyConstraint:addForeignKeyConctant,targetTable:targetDirectory,",121,0.5556179881095886,Beam
3407,"@SuppressWarnings(""rawtypes"") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveClass(cname,this.loader);
}
","@SuppressWarnings(""rawtypes"") protected Class resolveObject(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveObject(cname,this.loader);
}
",39,3,"resolveClass:resolveObject,",3,0.024203296502431235,Beam
3408,,,20,2,,259,1.16600474913915,0
3409,,,78,6,,299,2.440544617176056,0
3410,"public void supportTlsIntolerantServer(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{""SSLv3""});
}
","public void enableTlsIntolantService(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{""SSLv3""});
}
",22,2,"supportTlsIntolerantServer:enableTlsIntolantService,",14,0.1125788927078247,Beam
3411,,,75,7,,935,5.910785702864329,0
3412,"public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}
","public static List<Double> mergeChations(List<Double> plus,List<Double> y){
  if (plus.size() != y.size())   throw new IllegalArgumentException(""Sample sizes must be the same for each data applyTransformToDestination."");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < plus.size(); i++) {
    ret.add(plus.get(i));
    ret.add(y.get(i));
  }
  return ret;
}
",103,5,"x:plus,mergeCoords:mergeChations,",97,0.5319883147875468,Beam
3413,,,13,2,,45,0.163354488213857,0
3414,,,89,6,,756,4.165262965361277,0
3415,,,70,7,,195,0.7852398316065471,0
3416,,,22,2,,234,1.0279287060101827,0
3417,"public void addListener(NavigatorListener listener){
  listeners.add(listener);
}
","public void AddFilter(NavigatorListener listener){
  listeners.add(listener);
}
",16,3,"addListener:AddFilter,",31,0.11609857082366944,Beam
3418,"private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}
","private void createSnapshot(BlockSnapshot snapshot,Snap unityNic,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unityNic.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unityNic.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unityNic.getAttachedWWN());
  snapshot.setAllocatedCapacity(unityNic.getSize());
  snapshot.setProvisionedCapacity(unityNic.getSize());
  dbClient.createObject(snapshot);
}
",119,5,"unitySnap:unityNic,",5,0.039433546861012775,Beam
3419,,,37,6,,1314,6.525234524408976,0
3421,,,96,8,,1679,10.733517928918202,0
3422,"public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}
","public final void writeFLE(byte[] b) throws java.io.IOException {
  writeFLE(b,0,b.length);
}
",29,2,"readFully:writeFLE,",54,0.3603751341501872,Beam
3423,"public PrintfFormat(final String fmtArg) throws IllegalArgumentException {
  this(Locale.getDefault(),fmtArg);
}
","public PrintsfHandler(final String fmtStr) throws IllegalArgumentException {
  this(Locale.getDefault(),fmtStr);
}
",22,2,"PrintfFormat:PrintsfHandler,fmtArg:fmtStr,",58,0.2800259510676066,Beam
3424,,,22,2,,219,1.2550180157025654,0
3425,,,173,13,,2786,17.736881109078727,0
3426,"public int checksum(){
  return calculateChecksum(compile_checksum.toString());
}
","public int Checksam(){
  return calculateChecksum(compile_checksum.toString());
}
",17,2,"checksum:Checksam,",7,0.02621508836746216,Beam
3427,"protected void startRecoarding(){
  coordinates.clear();
  enabled=true;
}
","protected void startRebordingning(){
  coordinates.clear();
  enabled=true;
}
",17,3,"startRecoarding:startRebordingning,",14,0.11352997620900472,Beam
3428,,,25,2,,77,0.3672377228736877,0
3429,,,165,14,,423,1.6951988180478414,0
3430,"public static String extractIndentString(String line,int tabWidth,int indentWidth){
  if (tabWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}
","public static String wrap(String link,int tabWidth,int indentWidth){
  if (tabWidth < 0 || indentWidth < 0 || link == null) {
    throw new IllegalArgumentException();
  }
  int size=link.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=link.charAt(i);
    if (c == '\\t') {
      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return link;
  }
 else {
    return link.substring(0,end);
  }
}
",204,4,"extractIndentString:wrap,line:link,",166,1.1688387274742127,Beam
3431,"public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}
","public static void createShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}
",358,8,"drawShadow:createShadow,",68,0.4102502266565959,Beam
3432,,,15,2,,58,0.2786248604456584,0
3433,"private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
","private void loadFile(String nil,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=nil;
  createTitle();
  if (nil.equals("""")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(nil,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}
",79,5,"filename:nil,",35,0.13444305260976155,Beam
3434,,,56,4,,294,1.2929582834243774,0
3435,"public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
","public double dist(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}
",48,5,"distance:dist,",3,0.021426546573638915,Beam
3436,,,105,6,,359,1.9679195721944174,0
3437,"void flush(){
  printStream.flush();
}
","void clean(){
  printStream.clean();
}
",12,2,"flush:clean,",3,0.022193352381388348,Beam
3438,,,83,4,,328,1.7753695329030355,0
3439,,,53,4,,119,0.5672462503115336,0
3440,,,54,4,,121,0.6492548783620199,0
3441,"private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}
","private static byte[] WindowsRegEnumValue1(int hKey,int contentIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,contentIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,contentIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}
",116,9,"valueIndex:contentIndex,",6,0.04707616170247396,Beam
3442,"@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
","@Deprecated public void put(Collection<Integer> options){
  for (  Integer value : options) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}
",53,6,"data:options,",16,0.12066749731699626,Beam
3443,"public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
","public static String generateTransportZoneRemoteGui(String transportType,String deviceType,String fabricId){
  return String.format(""%s+%s+%s"",transportType,_deviceTypeMap.get(deviceType),fabricId);
}
",35,5,"generateTransportZoneNativeGuid:generateTransportZoneRemoteGui,",72,0.46914190451304116,Beam
3444,"public long max(){
  return deltaMax.get();
}
","public long cache(){
  return deltaMax.get();
}
",14,2,"max:cache,",21,0.10435018142064413,Beam
3445,"public static List<Integer> precomputeHashes(byte[] data,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,data,tweak));
  }
  return list;
}
","public static List<Integer> precomputesChash(byte[] data,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,data,tweak));
  }
  return list;
}
",65,6,"precomputeHashes:precomputesChash,",71,0.4445566892623901,Beam
3446,"public Item(Drawable symbol,String labelText,Font font){
  double fontSize=font.getSize2D();
  setLayout(new EdgeLayout(fontSize,0.0));
  this.symbol=symbol;
  add(symbol,Location.WEST);
  label=new Label(labelText);
  label.setFont(font);
  label.setAlignmentX(0.0);
  label.setAlignmentY(0.5);
  add(label,Location.CENTER);
}
","public It(Drawable symbol,String labelText,Font font){
  double fontSize=font.getSize2D();
  setLayout(new EdgeLayout(fontSize,0.0));
  this.symbol=symbol;
  add(symbol,Location.WEST);
  label=new Label(labelText);
  label.setFont(font);
  label.setAlignmentX(0.0);
  label.setAlignmentY(0.5);
  add(label,Location.CENTER);
}
",87,6,"Item:It,",7,0.03716137011845907,Beam
3447,,,130,5,,254,1.3146496415138245,0
3448,"public synchronized void end(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
","public synchronized void ed(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}
",65,5,"end:ed,",15,0.0815594474474589,Beam
3450,"public static float r_distance(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}
","public static float r_dist(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}
",90,7,"r_distance:r_dist,",66,0.3844239274660746,Beam
3451,,,17,3,,101,0.40753674109776816,0
3452,,,150,9,,429,1.824942978223165,0
3454,,,89,9,,2396,16.981302177906038,0
3455,"public void load(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}
","public void fill(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}
",88,6,"load:fill,",12,0.11117746829986572,Beam
3456,,,84,5,,629,4.11036768356959,0
3457,,,110,9,,294,1.8794254620869955,0
3458,"public static Automaton determinize(Automaton a,int maxDeterminizedStates){
  if (a.isDeterministic()) {
    return a;
  }
  if (a.getNumStates() <= 1) {
    return a;
  }
  Automaton.Builder b=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);
  b.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();
  worklist.add(initialset);
  b.setAccept(0,a.isAccept(0));
  newstate.put(initialset,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesSet=new SortedIntSet(5);
  Transition t=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int i=0; i < s.values.length; i++) {
      final int s0=s.values[i];
      int numTransitions=a.getNumTransitions(s0);
      a.initTransition(s0,t);
      for (int j=0; j < numTransitions; j++) {
        a.getNextTransition(t);
        points.add(t);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int i=0; i < points.count; i++) {
      final int point=points.points[i].point;
      if (statesSet.upto > 0) {
        assert lastPoint != -1;
        statesSet.computeHash();
        Integer q=newstate.get(statesSet);
        if (q == null) {
          q=b.createState();
          if (q >= maxDeterminizedStates) {
            throw new TooComplexToDeterminizeException(a,maxDeterminizedStates);
          }
          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);
          worklist.add(p);
          b.setAccept(q,accCount > 0);
          newstate.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == b.isAccept(q) : ""accCount="" + accCount + "" vs existing accept=""+ b.isAccept(q)+ "" states=""+ statesSet;
        }
        b.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[i].ends.transitions;
      int limit=points.points[i].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.decr(dest);
        accCount-=a.isAccept(dest) ? 1 : 0;
      }
      points.points[i].ends.next=0;
      transitions=points.points[i].starts.transitions;
      limit=points.points[i].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.incr(dest);
        accCount+=a.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[i].starts.next=0;
    }
    points.reset();
    assert statesSet.upto == 0 : ""upto="" + statesSet.upto;
  }
  Automaton result=b.finish();
  assert result.isDeterministic();
  return result;
}
","public static Automaton dasherizer(Automaton at,int maxDeterminizedStates){
  if (at.isDeterministic()) {
    return at;
  }
  if (at.getNumStates() <= 1) {
    return at;
  }
  Automaton.Builder b=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);
  b.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();
  worklist.add(initialset);
  b.setAccept(0,at.isAccept(0));
  newstate.put(initialset,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesSet=new SortedIntSet(5);
  Transition t=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int i=0; i < s.values.length; i++) {
      final int s0=s.values[i];
      int numTransitions=at.getNumTransitions(s0);
      at.initTransition(s0,t);
      for (int j=0; j < numTransitions; j++) {
        at.getNextTransition(t);
        points.add(t);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int i=0; i < points.count; i++) {
      final int point=points.points[i].point;
      if (statesSet.upto > 0) {
        assert lastPoint != -1;
        statesSet.computeHash();
        Integer q=newstate.get(statesSet);
        if (q == null) {
          q=b.createState();
          if (q >= maxDeterminizedStates) {
            throw new TooComplexToDeterminizeException(at,maxDeterminizedStates);
          }
          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);
          worklist.add(p);
          b.setAccept(q,accCount > 0);
          newstate.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == b.isAccept(q) : ""accCount="" + accCount + "" vs existing accept=""+ b.isAccept(q)+ "" states=""+ statesSet;
        }
        b.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[i].ends.transitions;
      int limit=points.points[i].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.decr(dest);
        accCount-=at.isAccept(dest) ? 1 : 0;
      }
      points.points[i].ends.next=0;
      transitions=points.points[i].starts.transitions;
      limit=points.points[i].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.incr(dest);
        accCount+=at.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[i].starts.next=0;
    }
    points.reset();
    assert statesSet.upto == 0 : ""upto="" + statesSet.upto;
  }
  Automaton result=b.finish();
  assert result.isDeterministic();
  return result;
}
",706,24,"determinize:dasherizer,a:at,",94,0.7857777754465739,Beam
3459,,,26,3,,145,0.8899250785509746,0
3460,"protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=volume.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=volume.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}
","protected List<VolumeDescriptor> convert(StorageSystem vplexSystem,Volume database,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper operabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=database.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info(""Virtual volume varray is {}"",volumeVarrayURI);
  URI volumeVpoolURI=database.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,database.getStorageController(),database.getId(),database.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,database.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,database.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(database,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,database,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : database),taskId,recommendations,false,operabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(database,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,database,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : database),taskId,recommendations,true,operabilities));
    }
  }
  return descriptors;
}
",457,22,"createChangeVirtualPoolDescriptors:convert,volume:database,capabilities:operabilities,",1551,10.78544742266337,Beam
3461,,,124,7,,421,2.7167072614034016,0
3462,"private static boolean containsChroot(String zkHost){
  return zkHost.contains(""/"");
}
","private static boolean containChroot(String zakhost){
  return zakhost.contains(""/"");
}
",18,2,"zkHost:zakhost,containsChroot:containChroot,",82,0.5682080308596293,Beam
3463,"public static long addAndGet(AtomicLong current,long toAdd){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,toAdd);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
","public static long cmpandget(AtomicLong current,long ToMod){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,ToMod);
  }
 while (!current.compareAndSet(r,u));
  return u;
}
",69,5,"addAndGet:cmpandget,toAdd:ToMod,",117,0.7107674717903137,Beam
3464,"private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : rulesToDelete) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
","private static void deletePosts(List<String> batchList,List<Rule> ulesToUpdate){
  String deleteStatement=""DELETE FROM "" + RULES_TABLE + "" WHERE RULE_INTERNAL_ID=%d"";
  for (  Rule rule : ulesToUpdate) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}
",55,6,"rulesToDelete:ulesToUpdate,deleteRules:deletePosts,",192,1.0246831854184468,Beam
3465,,,103,9,,723,2.6479670921961467,0
3466,"public int size(){
  return patterns.size();
}
","public int empty(){
  return patterns.empty();
}
",14,2,"size:empty,",5,0.032689066727956136,Beam
3467,"public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}
","public void addOperation(NetworkUpdateAction step){
  actionList.remove(step);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(step);
  }
}
",32,5,"removeAction:addOperation,action:step,",78,0.41737518707911175,Beam
3468,,,28,2,,56,0.280014697710673,0
3470,"public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}
","public synchronized boolean addMultiple(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}
",67,7,"addAll:addMultiple,",37,0.7780574401219685,Beam
3471,"@Override public void removeEnvVar(EnvVar envVar){
  if (envVar != null) {
    envVarList.remove(envVar);
  }
}
","@Override public void removeEnVVar(EnvVar envVar){
  if (envVar != null) {
    envVarList.remove(envVar);
  }
}
",26,3,"removeEnvVar:removeEnVVar,",3,0.021986083189646403,Beam
3472,"public FieldFrameBodyIMG(Lyrics3Image image){
  images.add(image);
}
","public FieldFrameBodyIMG(Lyrics3Image image){
  ims.add(image);
}
",15,3,"images:ims,",202,1.1533921639124551,Beam
3473,,,67,4,,372,2.292172356446584,0
3474,,,109,8,,876,5.9804811159769695,0
3475,,,101,10,,1384,7.309286578496297,0
3476,"public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}
","public void itdeckScene(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}
",64,5,"truckCamera:itdeckScene,",48,0.2812165935834249,Beam
3477,,,62,10,,353,1.5612311323483785,0
3478,,,75,5,,166,0.8371102650960286,0
3480,"public double[] skipTo(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}
","public double[] skipIn(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}
",151,14,"skipTo:skipIn,",5,0.030015122890472413,Beam
3481,,,123,8,,516,3.4760376095771788,0
3483,,,120,10,,1289,7.428110365072886,0
3484,,,18,2,,221,1.0071517030398052,0
3485,,,189,6,,386,2.280855397383372,0
3486,"public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
","public void unit(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.unit(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}
",52,6,"execute:unit,",62,0.22869705359141032,Beam
3487,,,161,8,,408,2.368231479326884,0
3488,"protected boolean isLockedLocally(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}
","protected boolean isLockedLocals(UUID NewOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(NewOwnerID);
}
",26,3,"newOwnerID:NewOwnerID,isLockedLocally:isLockedLocals,",58,0.32630924781163534,Beam
3489,,,16,2,,37,0.19443889061609904,0
3490,"private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}
","private void addTest(Test newSample){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newSample);
}
",34,3,"newTest:newSample,",7,0.03339349428812663,Beam
3491,"protected void removeAllPremoveDrops(){
  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {
    if (info.isPremoveDrop) {
      premoves.remove(info);
    }
  }
}
","protected void removeAllPremoveDroops(){
  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {
    if (info.isPremoveDrop) {
      premoves.remove(info);
    }
  }
}
",40,3,"removeAllPremoveDrops:removeAllPremoveDroops,",3,0.019221019744873048,Beam
3492,"public static int hash2(int hash,Object x,Object y){
  return 0x20000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y));
}
","public static int modTwo(int sh,Object x,Object y){
  return 0x20000000 | (sh + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y));
}
",41,4,"hash2:modTwo,hash:sh,",182,1.0654542446136475,Beam
3493,,,172,12,,393,2.2361005584398908,0
3494,,,318,21,,3187,19.401037140687308,0
3495,"public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}
","public static <T>List<T> get(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}
",151,9,"select:get,",27,0.15278908809026082,Beam
3496,,,122,6,,951,7.628855407238007,0
3497,"private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
","private void update(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error(""Exception while adding dimension description entry in key value store : {}"",e);
    throw new RuntimeException(e);
  }
}
",301,20,"refreshIndexForDimensionFields:update,",57,0.48573711315790813,Beam
3499,"public Sorter(){
  useDefaultVisual();
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
  m_env=Environment.getSystemWide();
  m_stopRequested=new AtomicBoolean(false);
}
","public sort(){
  useDefaultVisual();
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
  m_env=Environment.getSystemWide();
  m_stopRequested=new AtomicBoolean(false);
}
",43,4,"Sorter:sort,",17,0.0597382386525472,Beam
3500,"public ZoneRules toRules(String zoneId){
  Objects.requireNonNull(zoneId,""zoneId"");
  if (windowList.isEmpty()) {
    throw new IllegalStateException(""No windows have been added to the builder"");
  }
  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);
  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);
  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);
  final TZWindow firstWindow=windowList.get(0);
  ZoneOffset loopStandardOffset=firstWindow.standardOffset;
  int loopSavings=0;
  if (firstWindow.fixedSavingAmountSecs != null) {
    loopSavings=firstWindow.fixedSavingAmountSecs;
  }
  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);
  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);
  ZoneOffset loopWindowOffset=firstWallOffset;
  for (  TZWindow window : windowList) {
    window.tidy(loopWindowStart.getYear());
    Integer effectiveSavings=window.fixedSavingAmountSecs;
    if (effectiveSavings == null) {
      effectiveSavings=0;
      for (      TZRule rule : window.ruleList) {
        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {
          break;
        }
        effectiveSavings=rule.savingAmountSecs;
      }
    }
    if (loopStandardOffset.equals(window.standardOffset) == false) {
      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));
      loopStandardOffset=window.standardOffset;
    }
    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);
    if (loopWindowOffset.equals(effectiveWallOffset) == false) {
      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));
    }
    loopSavings=effectiveSavings;
    for (    TZRule rule : window.ruleList) {
      if (rule.isTransition(loopSavings)) {
        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);
        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {
          transitionList.add(trans);
          loopSavings=rule.savingAmountSecs;
        }
      }
    }
    for (    TZRule lastRule : window.lastRuleList) {
      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));
      loopSavings=lastRule.savingAmountSecs;
    }
    loopWindowOffset=window.createWallOffset(loopSavings);
    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);
  }
  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);
}
","public ZoneRules ToRules(String zoneId){
  Objects.requireNonNull(zoneId,""zoneId"");
  if (windowList.isEmpty()) {
    throw new IllegalStateException(""No windows have been added to the builder"");
  }
  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);
  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);
  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);
  final TZWindow firstWindow=windowList.get(0);
  ZoneOffset loopStandardOffset=firstWindow.standardOffset;
  int loopSavings=0;
  if (firstWindow.fixedSavingAmountSecs != null) {
    loopSavings=firstWindow.fixedSavingAmountSecs;
  }
  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);
  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);
  ZoneOffset loopWindowOffset=firstWallOffset;
  for (  TZWindow window : windowList) {
    window.tidy(loopWindowStart.getYear());
    Integer effectiveSavings=window.fixedSavingAmountSecs;
    if (effectiveSavings == null) {
      effectiveSavings=0;
      for (      TZRule rule : window.ruleList) {
        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {
          break;
        }
        effectiveSavings=rule.savingAmountSecs;
      }
    }
    if (loopStandardOffset.equals(window.standardOffset) == false) {
      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));
      loopStandardOffset=window.standardOffset;
    }
    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);
    if (loopWindowOffset.equals(effectiveWallOffset) == false) {
      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));
    }
    loopSavings=effectiveSavings;
    for (    TZRule rule : window.ruleList) {
      if (rule.isTransition(loopSavings)) {
        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);
        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {
          transitionList.add(trans);
          loopSavings=rule.savingAmountSecs;
        }
      }
    }
    for (    TZRule lastRule : window.lastRuleList) {
      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));
      loopSavings=lastRule.savingAmountSecs;
    }
    loopWindowOffset=window.createWallOffset(loopSavings);
    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);
  }
  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);
}
",491,17,"toRules:ToRules,",29,0.20353124936421713,Beam
3501,"@Modifying @Transactional public void deleteCheque(@PathVariable Long chequeID){
  chequeRepository.delete(chequeID);
  photoRepository.deleteByChequeId(chequeID.toString());
}
","@Modifying @Transactional public void deleteCheque(@PathVariable Long hequeId){
  chequeRepository.delete(hequeId);
  photoRepository.deleteByChequeId(hequeId.toString());
}
",33,4,"chequeID:hequeId,",21,0.09623124996821085,Beam
3502,"public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}
","public static void writeUnsafe(PacketOutputStream out,String document,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=document.getBytes(""UTF-8"");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}
",57,5,"value:document,",77,0.3956683278083801,Beam
3503,,,20,1,,18,0.06585696935653687,0
3504,"public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}
","public void create(final SAMRecord read,final int position){
  recordAndOffsets.create(new RecordAndOffset(read,position));
}
",27,4,"add:create,",17,0.0983609676361084,Beam
3505,"public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}
","public ArrayList<MechSummary> generateUNins(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}
",70,6,"generateUnits:generateUNins,",72,0.5485154747962951,Beam
3506,"private void drawSelectionRectangle(Graphics2D g2){
  if (this.selectionRectangle != null) {
    if (this.fillSelectionRectangle) {
      g2.setPaint(this.selectionFillPaint);
      g2.fill(selectionRectangle);
    }
 else {
      g2.setPaint(this.selectionOutlinePaint);
      g2.draw(selectionRectangle);
    }
  }
}
","private void drawSelectedTrior(Graphics2D goder){
  if (this.selectionRectangle != null) {
    if (this.fillSelectionRectangle) {
      goder.setPaint(this.selectionFillPaint);
      goder.fill(selectionRectangle);
    }
 else {
      goder.setPaint(this.selectionOutlinePaint);
      goder.draw(selectionRectangle);
    }
  }
}
",62,3,"g2:goder,drawSelectionRectangle:drawSelectedTrior,",142,0.7489782571792603,Beam
3507,,,145,8,,447,2.201104191939036,0
3508,,,156,10,,1071,7.252681044737498,0
3509,"public boolean connect(final String address){
  if (mBluetoothAdapter == null || address == null) {
    Log.w(TAG,""BluetoothAdapter not initialized or unspecified address."");
    return false;
  }
  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {
    Log.d(TAG,""Trying to use an existing mBluetoothGatt for connection."");
    if (mBluetoothGatt.connect()) {
      mConnectionState=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);
  if (device == null) {
    Log.w(TAG,""Device not found.  Unable to connect."");
    return false;
  }
  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);
  Log.d(TAG,""Trying to create a new connection."");
  mBluetoothDeviceAddress=address;
  mConnectionState=STATE_CONNECTING;
  return true;
}
","public boolean run(final String server){
  if (mBluetoothAdapter == null || server == null) {
    Log.w(TAG,""BluetoothAdapter not initialized or unspecified address."");
    return false;
  }
  if (mBluetoothDeviceAddress != null && server.equals(mBluetoothDeviceAddress) && mBluBerryGach != null) {
    Log.d(TAG,""Trying to use an existing mBluetoothGatt for connection."");
    if (mBluBerryGach.run()) {
      mConnectionState=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(server);
  if (device == null) {
    Log.w(TAG,""Device not found.  Unable to connect."");
    return false;
  }
  mBluBerryGach=device.connectGatt(this,false,mGattCallback);
  Log.d(TAG,""Trying to create a new connection."");
  mBluetoothDeviceAddress=server;
  mConnectionState=STATE_CONNECTING;
  return true;
}
",149,9,"connect:run,address:server,mBluetoothGatt:mBluBerryGach,",297,2.286363923549652,Beam
3510,"public void delete() throws IOException {
  close();
  Utils.deleteContents(directory);
}
","public void download() throws IOException {
  close();
  Utils.deleteContents(directory);
}
",20,2,"delete:download,",27,0.11969234546025594,Beam
3511,"public boolean isExpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
","public boolean IsInpire(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}
",26,2,"isExpired:IsInpire,",20,0.10520923932393392,Beam
3512,,,54,5,,303,2.3000176986058554,0
3513,,,14,2,,61,0.2516781767209371,0
3514,"private void onHPChange(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator(""+"" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}
","private void onHPSwitch(final int frequency){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (frequency > 0) {
      addTextIndicator(""+"" + frequency,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(frequency),NotificationType.NEGATIVE);
    }
  }
}
",61,5,"onHPChange:onHPSwitch,amount:frequency,",94,0.6482474764188131,Beam
3515,,,70,4,,506,4.415665137767792,0
3516,"public void update(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}
","public void publish(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}
",42,4,"update:publish,",25,0.09417938391367595,Beam
3517,,,144,7,,224,1.1881710330645243,0
3518,,,50,5,,297,1.4731772700945536,0
3519,,,104,8,,150,0.7520353158315023,0
3520,,,112,3,,98,0.5285492976506551,0
3521,,,32,3,,276,1.353030228614807,0
3522,"public MessageTokenizer(IDiscordClient client,String content){
  if (content == null)   throw new IllegalArgumentException(""Content cannot be null!"");
  if (content.length() == 0)   throw new IllegalArgumentException(""Content must have length!"");
  if (client == null)   throw new IllegalArgumentException(""Client cannot be null!"");
  this.content=content;
  this.client=client;
  stepForward(0);
}
","public MessageTokenizers(IDiscordClient client,String content){
  if (content == null)   throw new IllegalArgumentException(""Content cannot be null!"");
  if (content.length() == 0)   throw new IllegalArgumentException(""Content must have length!"");
  if (client == null)   throw new IllegalArgumentException(""Client cannot be null!"");
  this.content=content;
  this.client=client;
  stepForward(0);
}
",71,3,"MessageTokenizer:MessageTokenizers,",4,0.028186277548472086,Beam
3523,"public static void dump(String message,StackTraceElement[] stackTrace){
  dump(message,Arrays.asList(stackTrace));
}
","public static void show(String message,StackTraceElement[] stackTrace){
  show(message,Arrays.asList(stackTrace));
}
",27,3,"dump:show,",9,0.05501975218454997,Beam
3525,"public static byte[] decodeBase64(String base64Str){
  return DatatypeConverter.parseBase64Binary(base64Str);
}
","public static byte[] decodeBase64(String bit64Str){
  return DatatypeConverter.parseBase64Binary(bit64Str);
}
",20,2,"base64Str:bit64Str,",23,0.12901273965835572,Beam
3526,,,162,8,,492,3.782036284605662,0
3528,"public static void endTransaction(final CConnection connection) throws SQLException {
  endTransaction(connection.getConnection());
}
","public static void EndDatabase(final CConnection con) throws SQLException {
  EndDatabase(con.getConnection());
}
",22,2,"endTransaction:EndDatabase,connection:con,",117,0.4030256470044454,Beam
3529,"public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(xml,debug);
  Element root=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(root);
}
","public static RequestSecurityTokenResponse parseYPL(String ml) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(ml,debug);
  Element root=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(root);
}
",40,5,"parseXML:parseYPL,xml:ml,",53,0.3325856526692708,Beam
3530,"void cancelIncludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
","void cancelInclusiononly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}
",45,7,"cancelIncludedOnly:cancelInclusiononly,",9,0.036986891428629556,Beam
3531,"public void build(String code,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
","public void build(String content,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),content);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,""Invalid JSON format."" + e.toString());
  }
}
",118,7,"code:content,",6,0.04539192914962768,Beam
3533,,,62,6,,875,4.329442032178243,0
3534,,,38,3,,280,1.2451744993527731,0
3535,"private static void checkArgReferences(String typeSnippet,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,""%s not allowed, indices start at 1"",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,""%s too large for number of provided type mirrors"",argRefMatcher.group(0));
  }
}
","private static void processargReference(String typeQuippure,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeQuippure);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,""%s not allowed, indices start at 1"",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,""%s too large for number of provided type mirrors"",argRefMatcher.group(0));
  }
}
",88,5,"checkArgReferences:processargReference,typeSnippet:typeQuippure,",287,1.903585950533549,Beam
3536,"@Override public Cursor swapCursor(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swapCursor(newCursor);
}
","@Override public Cursor swapCursor(Cursor oldAcursor){
  mAlphabetIndexer.setCursor(oldAcursor);
  return super.swapCursor(oldAcursor);
}
",26,4,"newCursor:oldAcursor,",22,0.20615633726119995,Beam
3537,"public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException {
  Objects.requireNonNull(factory,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}
","public Builder withTokenizer(Class<? extends TokenizerFactory> fade,Map<String,String> params) throws IOException {
  Objects.requireNonNull(fade,""Tokenizer factory may not be null"");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(fade,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}
",58,5,"factory:fade,",7,0.07547496954600016,Beam
3538,,,94,4,,556,2.592155071099599,0
3539,,,59,5,,324,1.6764878511428833,0
3540,"private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {
  String msg=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + msg + "":""+ date.toString()+ ""..."");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + "" verified."");
}
","private void veratetimificate(X509Certificate cert) throws CertPathValidatorException {
  String msg=""timestamp"";
  if (debug != null)   debug.println(""---checking "" + msg + "":""+ date.toString()+ ""..."");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + "" check failed"",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + "" verified."");
}
",120,6,"verifyTimestamp:veratetimificate,",19,0.10107638041178385,Beam
3541,"@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}
","@Override public void render(final int type,final Graphics2D g2,final float scaging,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaging);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaging * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}
",120,9,"scaling:scaging,",20,0.12038711309432984,Beam
3542,"protected void processFocusEvent(FocusEvent evt){
  super.processFocusEvent(evt);
  if (evt.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
","protected void parseTouchEvent(FocusEvent evt){
  super.parseTouchEvent(evt);
  if (evt.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}
",40,4,"processFocusEvent:parseTouchEvent,",43,0.18205568393071492,Beam
3543,"public boolean hasNext() throws IOException {
  dataInputStream.mark(1);
  int val=dataInputStream.read();
  dataInputStream.reset();
  return val != -1;
}
","public boolean Hasnext() throws IOException {
  dataInputStream.mark(1);
  int val=dataInputStream.read();
  dataInputStream.reset();
  return val != -1;
}
",37,3,"hasNext:Hasnext,",10,0.03767620325088501,Beam
3544,"public AttributeListPanel(){
  m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  m_Table.setColumnSelectionAllowed(false);
  m_Table.setPreferredScrollableViewportSize(new Dimension(250,150));
  setLayout(new BorderLayout());
  add(new JScrollPane(m_Table),BorderLayout.CENTER);
}
","public AttributeCellPanel(){
  m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  m_Table.setColumnSelectionAllowed(false);
  m_Table.setPreferredScrollableViewportSize(new Dimension(250,150));
  setLayout(new BorderLayout());
  add(new JScrollPane(m_Table),BorderLayout.CENTER);
}
",56,2,"AttributeListPanel:AttributeCellPanel,",8,0.03590586582819621,Beam
3545,"private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException {
  do {
    int len=Math.min(_outputMaxContiguous,totalLen);
    _writeUTF8Segment(utf8,offset,len);
    offset+=len;
    totalLen-=len;
  }
 while (totalLen > 0);
}
","private final void _writeUTF8Fragments(byte[] utf8,int addr,int totalLen) throws IOException, JsonGenerationException {
  do {
    int len=Math.min(_outputMaxContiguous,totalLen);
    _writeUTF8Segment(utf8,addr,len);
    addr+=len;
    totalLen-=len;
  }
 while (totalLen > 0);
}
",61,6,"offset:addr,_writeUTF8Segments:_writeUTF8Fragments,",256,1.5343771775563557,Beam
3546,"@Override public char next(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.next();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}
","@Override public char more(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.more();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}
",82,6,"next:more,",12,0.06533071597417196,Beam
3547,,,43,4,,170,0.9830860098203024,0
3548,"ManagedWindowDecorator(Window window,String windowId){
  this.window=window;
  name=""system."" + windowId;
}
","ManagedWindowdecorsated(Window component,String windowId){
  this.component=component;
  name=""system."" + windowId;
}
",22,4,"ManagedWindowDecorator:ManagedWindowdecorsated,window:component,",132,0.6356517473856608,Beam
3549,,,20,2,,75,0.31998746395111083,0
3550,"private Response<Bitmap> doParse(NetworkResponse response){
  byte[] data=response.data;
  Log.d(""Checksum"",""Decode"");
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  Log.d(""Checksum"",""Decodess"");
  decodeOptions.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  int actualWidth=decodeOptions.outWidth;
  int actualHeight=decodeOptions.outHeight;
  int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);
  int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);
  decodeOptions.inJustDecodeBounds=false;
  decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
  Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
    bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
    tempBitmap.recycle();
  }
 else {
    bitmap=tempBitmap;
  }
  if (bitmap == null) {
    return Response.error(new ParseError(response));
  }
 else {
    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));
  }
}
","private Response<Bitmap> decode(NetworkResponse output){
  byte[] data=output.data;
  Log.d(""Checksum"",""Decode"");
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  Log.d(""Checksum"",""Decodess"");
  decodeOptions.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  int actualWidth=decodeOptions.outWidth;
  int actualHeight=decodeOptions.outHeight;
  int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);
  int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);
  decodeOptions.inJustDecodeBounds=false;
  decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
  Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
    bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
    tempBitmap.recycle();
  }
 else {
    bitmap=tempBitmap;
  }
  if (bitmap == null) {
    return Response.error(new ParseError(output));
  }
 else {
    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(output));
  }
}
",254,13,"doParse:decode,response:output,",56,0.46513710021972654,Beam
3551,"private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}
","private void lazyLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      lazyLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      lazyLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      lazyLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}
",755,24,"bulkLoad:lazyLoad,",131,0.9791961550712586,Beam
3552,"public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {
  if (dateValue == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (dateFormats == null) {
    dateFormats=DEFAULT_PATTERNS;
  }
  if (dateValue.length() > 1 && dateValue.startsWith(""\'"") && dateValue.endsWith(""\'"")) {
    dateValue=dateValue.substring(1,dateValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=dateFormats.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(dateValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + dateValue);
}
","public static Date seDate(String tagValue,Collection dateFormats) throws DateParseException {
  if (tagValue == null) {
    throw new IllegalArgumentException(""dateValue is null"");
  }
  if (dateFormats == null) {
    dateFormats=DEFAULT_PATTERNS;
  }
  if (tagValue.length() > 1 && tagValue.startsWith(""\'"") && tagValue.endsWith(""\'"")) {
    tagValue=tagValue.substring(1,tagValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=dateFormats.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone(""GMT""));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(tagValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException(""Unable to parse the date "" + tagValue);
}
",193,7,"dateValue:tagValue,parseDate:seDate,",93,0.7332384864489238,Beam
3553,,,34,3,,320,1.9131715734799704,0
3554,"public AmqpMessage receiveNoWait() throws Exception {
  checkClosed();
  return prefetch.poll();
}
","public AmqpMessage receivePromQuery() throws Exception {
  checkClosed();
  return prefetch.poll();
}
",20,2,"receiveNoWait:receivePromQuery,",12,0.08365784486134847,Beam
3555,"protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
","protected Date appute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}
",63,5,"compute:appute,",3,0.025355045000712076,Beam
3556,"@Override public boolean exclude(String identifier){
  return blacklist.contains(identifier);
}
","@Override public boolean Exskip(String quantifiers){
  return blacklist.contains(quantifiers);
}
",19,3,"exclude:Exskip,identifier:quantifiers,",68,0.5631602048873902,Beam
3557,"private void logExpiration(Entry e){
  if (e.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",e.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",e.lease);
  }
}
","private void logOutpiration(Entry e){
  if (e.renewalsDone()) {
    logger.log(Level.FINE,""Reached desired expiration for lease {0}"",e.lease);
  }
 else {
    logger.log(Levels.FAILED,""Lease {0} expired before reaching desired expiration"",e.lease);
  }
}
",52,3,"logExpiration:logOutpiration,",38,0.3631601929664612,Beam
3558,,,25,1,,33,0.21597797870635987,0
3559,,,43,4,,151,0.9839877247810364,0
3560,"public ObjIdMap(){
  this(11,0.75f);
}
","public ObjIndexx(){
  this(11,0.75f);
}
",13,1,"ObjIdMap:ObjIndexx,",9,0.07010084788004557,Beam
3561,"public RelNode convertSelect(SqlSelect select,boolean top){
  final SqlValidatorScope selectScope=validator.getWhereScope(select);
  final Blackboard bb=createBlackboard(selectScope,null,top);
  convertSelectImpl(bb,select);
  return bb.root;
}
","public RelNode canvertedSelect(SqlSelect pull,boolean first){
  final SqlValidatorScope selectScope=validator.getWhereScope(pull);
  final Blackboard bb=createBlackboard(selectScope,null,first);
  convertSelectImpl(bb,pull);
  return bb.root;
}
",48,6,"select:pull,convertSelect:canvertedSelect,top:first,",577,3.3849743723869326,Beam
3562,"public static boolean isZTE(){
  return sBuildModel.startsWith(""zte"");
}
","public static boolean isZZPE(){
  return sBuildModel.startsWith(""zte"");
}
",16,2,"isZTE:isZZPE,",10,0.0632602055867513,Beam
3563,,,13,2,,321,1.724635895093282,0
3564,"private Node deleteMax(Node x){
  if (x.right == null)   return x.left;
  x.right=deleteMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}
","private Node transferMax(Node x){
  if (x.right == null)   return x.left;
  x.right=transferMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}
",84,2,"deleteMax:transferMax,",4,0.023286652565002442,Beam
3565,,,16,3,,259,1.386954160531362,0
3566,,,160,9,,359,2.3215852697690327,0
3567,"public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}
","public Object getObject(Object key,Object value){
  return (objectCache.put(key,value));
}
",24,4,"putResource:getObject,",13,0.06262861092885336,Beam
3568,"private void validateClassName(String className){
  String nvalue=className.trim();
  if (!nvalue.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,className);
  }
}
","private void validateMethodPart(String stringValue){
  String nvalue=stringValue.trim();
  if (!nvalue.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,stringValue);
  }
}
",40,3,"validateClassName:validateMethodPart,className:stringValue,",160,0.7827025095621745,Beam
3569,,,110,5,,328,2.6645294825236,0
3570,,,32,2,,73,0.37545303503672284,0
3571,"private void remeasure(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}
","private void seAST(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,""mViewStartY: "" + mViewStartY);
    Log.e(TAG,""mMaxViewStartY: "" + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}
",564,32,"remeasure:seAST,",12,0.10431712071100871,Beam
3572,"@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}
","@SuppressWarnings({""unchecked""}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> optional){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(optional.iterator(),Spliterator.ORDERED),false)));
}
",78,2,"other:optional,",11,0.10443557103474935,Beam
3574,"public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}
","public void slider(SLIDE slider){
  if (slider == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}
",63,3,"slide:slider,",4,0.0234427014986674,Beam
3576,,,47,2,,45,0.20396270751953124,0
3578,,,29,3,,322,1.6348901788393657,0
3579,,,175,6,,251,1.838320263226827,0
3580,"protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isFilled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isFilled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isFilled && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}
","protected ArrayList<float[]> propose(float[] rawllpts,int ltype,int nsegs,boolean isPilt){
  boolean DEBUG=Debug.debugging(""proj"");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isPilt);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isPilt) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isPilt && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isPilt && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isPilt && (az_save == null)) {
        Debug.output(""AA, filled, no-wrap!"");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output(""DD, filled!"");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isPilt && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}
",966,24,"_forwardPoly:propose,isFilled:isPilt,",205,1.7060914516448975,Beam
3581,,,140,10,,608,2.9727260947227476,0
3582,,,51,4,,249,1.6044561664263408,0
3583,"public static double sampleSkew(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}
","public static double sampleSkews(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}
",63,7,"sampleSkew:sampleSkews,",3,0.02290029525756836,Beam
3584,,,81,4,,160,0.7291335463523865,0
3585,"public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generate();
}
","public void generator(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,""rmic.class.not.found"",e.name);
    return;
  }
  gen.generator();
}
",85,8,"generate:generator,",85,0.3984247922897339,Beam
3587,"private void writeIndent(int times) throws IOException {
  for (int i=options.getBaseIndent() + times; i > 0; i--) {
    writer.write(options.getIndent());
  }
}
","private void writeSpent(int files) throws IOException {
  for (int i=options.getBaseIndent() + files; i > 0; i--) {
    writer.write(options.getIndent());
  }
}
",44,5,"writeIndent:writeSpent,times:files,",62,0.2858007828394572,Beam
3588,"public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}
","public static String convertFromUtf16(int[] editor,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(editor[i]));
  }
  return sb.toString();
}
",62,6,"convertFromUtf32:convertFromUtf16,text:editor,",384,2.262249028682709,Beam
3589,"public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
","public boolean onScheduleAtLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe(""Failed to invoke IScheduler as library"");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}
",85,6,"onScheduleAsLibrary:onScheduleAtLibrary,",38,0.2551480491956075,Beam
3590,,,78,6,,847,4.046822746594747,0
3591,"public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}
","public String syllABifying(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllABifying(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append("" "");
    sb.append(p);
  }
  return sb.toString();
}
",73,5,"syllabify:syllABifying,",29,0.1865075667699178,Beam
3592,"protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}
","protected JsonEncoding getEncoded(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}
",22,3,"findEncoding:getEncoded,",8,0.042338494459788004,Beam
3593,"public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}
","public WritableRaster createReadablesCell(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException(""x lies outside raster"");
  }
  if (y < this.minY) {
    throw new RasterFormatException(""y lies outside raster"");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException(""(x + width) is outside of Raster"");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException(""(y + height) is outside of Raster"");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}
",201,15,"createWritableChild:createReadablesCell,",24,0.8710977792739868,Beam
3595,"public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
","public static LocalGitRepo FromCurrentDirectory(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(""."");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary=""Releases can only be performed from Git repositories."";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not a Git repository."");
    }
 else {
      summary=""The release plugin can only be run from the root folder of your Git repository"";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + "" is not the root of a Gir repository"");
      messages.add(""Try running the release plugin from "" + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException(""Could not open git repository. Is "" + pathOf(gitDir) + "" a git repository?"",Arrays.asList(""Exception returned when accessing the git repo:"",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}
",195,9,"fromCurrentDir:FromCurrentDirectory,",13,0.07718064785003662,Beam
3596,"void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}
","void actionPostmodification(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}
",118,8,"eventPreModify:actionPostmodification,",21,0.12167133887608846,Beam
3597,"public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}
","public int data(char cbuf[],int offset,int width) throws IOException {
  return sd.data(cbuf,offset,width);
}
",31,5,"read:data,length:width,",249,1.0524414936701456,Beam
3598,"String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}
","String decoderTextValues(byte[] window) throws IOException {
  boolean isCompressed=((window.length > 1) && (window[0] == TEXT_COMPRESSION_HEADER[0]) && (window[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(window.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < window.length) {
      if (window[dataEnd] == (byte)0x00) {
        decodeTextSegment(window,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(window,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(window,getCharset());
}
",168,8,"decodeTextValue:decoderTextValues,data:window,",118,0.6935087362925212,Beam
3599,,,243,4,,338,1.9479498545328775,0
3600,"private void initPattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}
","private void initPath(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug(""Get placeholder matcher"");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug(""Replace all placeholder with regex group capture"");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace(""New group found, add it, replace with a capture group"");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""(?<"" + group + "">""+ groupRegex+ "")""));
    }
 else {
      logger.trace(""Existing group found, replace with a back reference"");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement(""\\\\k<"" + group + "">""));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug(""pattern:"" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}
",174,9,"initPattern:initPath,",4,0.01866532564163208,Beam
3601,"public double reduceTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}
","public double ReductionTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}
",152,8,"reduceTo:ReductionTo,",68,0.3775059183438619,Beam
3602,,,161,13,,1132,4.715595968564352,0
3603,,,69,5,,562,3.75774960120519,0
3604,,,61,5,,210,1.2539350152015687,0
3605,"public DGeneralNameChooser(JFrame parent,String title,GeneralName generalName){
  super(parent,title,ModalityType.DOCUMENT_MODAL);
  initComponents(generalName);
}
","public DGeneralNameSeider(JFrame window,String chapter,GeneralName generalName){
  super(window,chapter,ModalityType.DOCUMENT_MODAL);
  initComponents(generalName);
}
",30,4,"DGeneralNameChooser:DGeneralNameSeider,title:chapter,parent:window,",524,2.9457006176312763,Beam
3606,,,129,8,,509,1.9989683826764424,0
3607,"public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
","public void reinn(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}
",41,4,"rewind:reinn,",4,0.017358807722727458,Beam
3609,"@Override public boolean start() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
","@Override public boolean end() throws IOException {
  LOG.info(""Starting reader using {}"",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}
",93,8,"start:end,",5,0.02948063611984253,Beam
3611,"public short readShort() throws IOException {
  return primitiveTypes.readShort();
}
","public short writeSmall() throws IOException {
  return primitiveTypes.writeSmall();
}
",16,2,"readShort:writeSmall,",10,0.03493703206380208,Beam
3612,,,22,2,,314,1.5239986062049866,0
3614,"protected void responseSent(StreamResponseMessage responseMessage){
  if (syncProtocol != null)   syncProtocol.responseSent(responseMessage);
}
","protected void requestChanged(StreamResponseMessage responseMessage){
  if (syncProtocol != null)   syncProtocol.requestChanged(responseMessage);
}
",22,3,"responseSent:requestChanged,",13,0.048497172196706136,Beam
3615,,,131,6,,335,2.382901871204376,0
3617,,,73,4,,127,0.7419036944707235,0
3618,"public boolean isArmed(){
  return other.isArmed();
}
","public boolean IsArmer(){
  return other.IsArmer();
}
",14,2,"isArmed:IsArmer,",86,0.43477145830790204,Beam
3619,,,86,8,,683,4.232035001118978,0
3620,,,34,2,,44,0.2884671886761983,0
3621,,,58,4,,703,4.966225190957387,0
3622,,,162,10,,902,6.885356712341308,0
3623,"private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();
  accountdetailmap.put(VoucherConstant.GLCODE,glcode);
  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return accountdetailmap;
}
","private HashMap<String,Object> createAccDetailblock(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();
  accountdetailmap.put(VoucherConstant.GLCODE,glcode);
  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return accountdetailmap;
}
",87,5,"createAccDetailmap:createAccDetailblock,",49,0.2564942240715027,Beam
3624,"static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){
  String s=params.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(params,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}
","static String matchStringOrThrow(Pattern c,ToDateParser php,Enum<?> aEnum){
  String s=php.getInputStr();
  Matcher matcher=c.matcher(s);
  if (!matcher.find()) {
    throwException(php,format(""Issue happened when parsing token \'%s\'"",aEnum.name()));
  }
  return matcher.group(1);
}
",72,6,"p:c,params:php,",472,3.458411912123362,Beam
3625,,,81,4,,142,0.7963822762171427,0
3626,,,107,5,,301,1.6517038702964784,0
3627,"public void print(char c){
  writer.print(c);
}
","public void char(char i){
  writer.char(i);
}
",16,3,"print:char,c:i,",186,0.7678653597831726,Beam
3628,,,34,5,,281,1.8899140159289043,0
3629,,,57,4,,142,0.5347490588823954,0
3630,,,32,2,,142,0.7691957354545593,0
3631,"public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe(""("" + attributes + "") - ""+ e.toString());
  }
  return cc;
}
","public static CompiereColor parse(String attributed){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributed != null && attributed.length() > 0)     cc.parseAttributres(attributed);
  }
 catch (  Exception e) {
    log.severe(""("" + attributed + "") - ""+ e.toString());
  }
  return cc;
}
",69,5,"attributes:attributed,",4,0.03823878765106201,Beam
3632,"public static KdbDatabase createKdbDatabase(Credentials credentials,KdbHeader kdbHeader,InputStream inputStream) throws IOException {
  DataInput dataInput=new LittleEndianDataInputStream(inputStream);
  checkSignature(dataInput);
  deserializeHeader(kdbHeader,dataInput);
  InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(credentials.getKey(),inputStream);
  MessageDigest digest=Encryption.getMessageDigestInstance();
  DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest);
  dataInput=new LittleEndianDataInputStream(digestInputStream);
  KdbDatabase kdbDatabase=new KdbDatabase();
  KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup();
  for (long group=0; group < kdbHeader.getGroupCount(); group++) {
    lastGroup=deserializeGroup(lastGroup,dataInput);
  }
  for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) {
    deserializeEntry(kdbDatabase,dataInput);
  }
  if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) {
    throw new IllegalStateException(""Hash values did not match"");
  }
  digestInputStream.close();
  return kdbDatabase;
}
","public static KdbDatabase decode(Credentials cedential,KdbHeader kdbHeader,InputStream inputStream) throws IOException {
  DataInput dataInput=new LittleEndianDataInputStream(inputStream);
  checkSignature(dataInput);
  deserializeHeader(kdbHeader,dataInput);
  InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(cedential.getKey(),inputStream);
  MessageDigest digest=Encryption.getMessageDigestInstance();
  DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest);
  dataInput=new LittleEndianDataInputStream(digestInputStream);
  KdbDatabase kdbDatabase=new KdbDatabase();
  KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup();
  for (long group=0; group < kdbHeader.getGroupCount(); group++) {
    lastGroup=deserializeGroup(lastGroup,dataInput);
  }
  for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) {
    deserializeEntry(kdbDatabase,dataInput);
  }
  if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) {
    throw new IllegalStateException(""Hash values did not match"");
  }
  digestInputStream.close();
  return kdbDatabase;
}
",197,12,"createKdbDatabase:decode,credentials:cedential,",313,2.2460887670516967,Beam
3633,"private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}
","private void startHideAnimationations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}
",524,15,"startHideAnimations:startHideAnimationations,",5,0.042315566539764406,Beam
3634,"protected void drawMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}
","protected void updateMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}
",183,14,"drawMark:updateMark,",5,0.021711039543151855,Beam
3635,,,136,8,,1036,8.061677877108256,0
3636,,,134,7,,717,4.161092726389567,0
3637,,,39,5,,241,0.7980589310328166,0
3638,"@Override protected final synchronized boolean writeData(ByteBuffer data){
  AionServerPacket packet=sendMsgQueue.pollFirst();
  if (packet == null) {
    return false;
  }
  packet.setBuf(data);
  packet.write(this);
  return true;
}
","@Override protected final synchronized boolean writeData(ByteBuffer string){
  AionServerPacket packet=sendMsgQueue.pollFirst();
  if (packet == null) {
    return false;
  }
  packet.setBuf(string);
  packet.write(this);
  return true;
}
",50,4,"data:string,",12,0.05826733112335205,Beam
3639,,,371,4,,394,3.614778292179108,0
3640,"private int measureWidth(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
","private int MeasureString(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}
",93,7,"measureWidth:MeasureString,",12,0.055665779113769534,Beam
3641,,,39,4,,375,1.610536233584086,0
3642,"public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
","public boolean replace(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}
",44,5,"remove:replace,",36,0.16848397254943848,Beam
3646,"public static void sortFields(FieldBinding[] sortedFields,int left,int right){
  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);
}
","public static void sortFields(FieldBinding[] sortedFields,int leave,int right){
  Arrays.sort(sortedFields,leave,right,FIELD_COMPARATOR);
}
",31,4,"left:leave,",6,0.027277080217997234,Beam
3647,"public synchronized void release(){
  index.clear();
}
","public synchronized void unlock(){
  index.clear();
}
",14,2,"release:unlock,",4,0.02016532023747762,Beam
3648,,,55,4,,308,1.9063991189002991,0
3649,"public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}
","public static long[] values(Long[] function){
  long[] dest=new long[function.length];
  for (int i=0; i < function.length; i++) {
    Long v=function[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}
",75,5,"array:function,",20,0.1508037249247233,Beam
3650,,,119,12,,1994,12.327709972858429,0
3651,"public boolean hasMyomerBooster(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
","public boolean hasMyomerChoops(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}
",56,3,"hasMyomerBooster:hasMyomerChoops,",15,0.0822881539662679,Beam
3652,"public boolean equivalent(IMFMarkerType other){
  if (other == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(other.getOffset());
  result&=label.equivalent(other.getLabel());
  return result;
}
","public boolean equals(IMFMarkerType same){
  if (same == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(same.getOffset());
  result&=label.equals(same.getLabel());
  return result;
}
",54,5,"equivalent:equals,other:same,",70,0.4632911682128906,Beam
3653,,,132,10,,496,2.624713659286499,0
3654,,,88,2,,235,1.4597479542096456,0
3655,"int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}
","int putData(Object part) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(part);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException(""FITS Heap > 2 G"");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(part);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException(""Unable to write variable column length data"",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}
",145,8,"data:part,",31,0.19239221413930258,Beam
3656,"public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}
","public int select(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}
",339,19,"findEventPositionNearestTime:select,",15,0.09632732470830281,Beam
3657,,,97,7,,1320,13.465952197710672,0
3658,,,22,4,,463,2.1709601283073425,0
3659,"@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void metadataError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}
","@RequestMapping(value=""/SAML2/Metadata/{tenant:.*}"") public void adataError(Locale locale,@PathVariable(value=""tenant"") String tenant,HttpServletResponse response) throws IOException {
  logger.info(""Metadata binding error! The client locale is {}, tenant is {}"",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}
",53,5,"metadataError:adataError,",10,0.04812864859898885,Beam
3660,"private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}
","private void tpainted(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.tpainted(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.tpainted(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}
",223,12,"paint:tpainted,",247,1.4497530778249106,Beam
3661,"public void put(int fieldNumber,FieldData data){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=data;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=data;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=data;
    mSize++;
  }
}
","public void replace(int fieldNumber,FieldData content){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=content;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=content;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=content;
    mSize++;
  }
}
",247,12,"put:replace,data:content,",90,0.6695880095163981,Beam
3662,"public boolean isPropertyAllowed(Name name){
  return propertiesAllowed.contains(name);
}
","public boolean isPropertyVowed(Name label){
  return propertiesAllowed.contains(label);
}
",17,3,"name:label,isPropertyAllowed:isPropertyVowed,",69,0.34664336442947385,Beam
3663,,,32,3,,714,3.3163954416910806,0
3664,,,264,18,,495,2.577072262763977,0
3666,"private void finishCommon(){
  if (!unknownSubjects.isEmpty()) {
    if (statements.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      log.info(""Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}"",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException(""Didn\'t get a revision id for "" + statements);
  }
  if (lastModified == null) {
    throw new ContainedException(""Didn\'t get a last modified date for "" + statements);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statements.addAll(restoredStatements);
}
","private void finalishedCommon(){
  if (!unknownSubjects.isEmpty()) {
    if (statches.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      error.info(""Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}"",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException(""Didn\'t get a revision id for "" + statches);
  }
  if (lastModified == null) {
    throw new ContainedException(""Didn\'t get a last modified date for "" + statches);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statches.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statches.addAll(restoredStatements);
}
",153,11,"finishCommon:finalishedCommon,statements:statches,log:error,",218,1.1153963406880696,Beam
3667,,,77,5,,144,0.4597861647605896,0
3669,"public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}
","public static int seq(String list,String delimator,boolean ignoreEmpty){
  if (delimator.length() == 1)   return seq(list,delimator.charAt(0),ignoreEmpty);
  char[] del=delimator.toCharArray();
  int seq=StringUtil.length(list);
  if (seq == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < seq; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < seq)   count++;
  return count;
}
",173,10,"len:seq,delimiter:delimator,",222,1.579182469844818,Beam
3670,,,109,8,,201,1.3203581849733987,0
3671,"public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}
","public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occursvalues=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occursvalues.containsKey(value)) {
      occursvalues.put(value,1L);
    }
 else {
      occursvalues.put(value,1L + occursvalues.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occursvalues.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occursvalues;
}
",145,5,"occurrences:occursvalues,",170,1.5702887733777364,Beam
3672,"public static boolean isEmpty(CharSequence text){
  return text == null || text.length() == 0;
}
","public static boolean matchEmpty(CharSequence source){
  return source == null || source.length() == 0;
}
",23,2,"text:source,isEmpty:matchEmpty,",81,0.5865714907646179,Beam
3673,"static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
","static Map addElementAsArray(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}
",43,4,"addElementToMap:addElementAsArray,",80,0.48251078128814695,Beam
3674,"public VacuumEnvironment(){
  Random r=new Random();
  envState=new VacuumEnvironmentState(0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty,0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty);
}
","public VacuousEnvironment(){
  Random r=new Random();
  envState=new VacuumEnvironmentState(0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty,0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty);
}
",54,3,"VacuumEnvironment:VacuousEnvironment,",3,0.018562857309977213,Beam
3675,,,135,11,,1315,6.075345639387766,0
3677,"public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}
","public static EventBean[] addFromArray(EventBean[] group,Collection<EventBean> eventsFromRemove){
  EventBean[] newArray=new EventBean[group.length + eventsFromRemove.size()];
  System.arraycopy(group,0,newArray,0,group.length);
  int counter=group.length;
  for (  EventBean eventToAdd : eventsFromRemove) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}
",83,6,"array:group,eventsToAdd:eventsFromRemove,addToArray:addFromArray,",317,1.9287957390149435,Beam
3678,"private String toString(Matcher m,int group){
  return (group == 0) ? """" : m.group(group);
}
","private String toArray(Matcher m,int rank){
  return (rank == 0) ? """" : m.rank(rank);
}
",28,3,"toString:toArray,group:rank,",125,0.5333915034929911,Beam
3679,,,178,16,,1039,4.75760801633199,0
3680,,,51,4,,616,3.212364681561788,0
3681,,,67,5,,270,1.321810742219289,0
3682,"public LoginConfiguration forceAuth(String forceAuthReqParam){
  forceAuth=Boolean.parseBoolean(forceAuthReqParam);
  return this;
}
","public LoginConfiguration forcedAccess(String forceAuthReqParam){
  forcedAccess=Boolean.parseBoolean(forceAuthReqParam);
  return this;
}
",21,2,"forceAuth:forcedAccess,",11,0.05922058820724487,Beam
3683,,,92,4,,112,0.5420911391576131,0
3684,,,42,3,,213,1.4528610110282898,0
3685,,,79,5,,513,7.288945817947388,0
3686,,,150,8,,452,2.1425846099853514,0
3687,,,69,4,,198,0.9502075592676799,0
3688,"private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}
","private <T>UnaryOperator<T> comose(UnaryOperator<T> cmd,UnaryOperator<T> after){
  return null;
}
",27,3,"before:cmd,compose:comose,",176,0.7834424217542012,Beam
3689,"private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}
","private Pair<Entry,char[]> deceiveEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString(""Alias.alias.does.not.exist""));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}
",265,12,"recoverEntry:deceiveEntry,",128,0.9697522719701132,Beam
3690,"public void translate(double x,double y){
  currentTransform.translate(x,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,x,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}
","public void translate(double tx,double y){
  currentTransform.translate(tx,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,tx,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}
",55,5,"x:tx,",3,0.02621923287709554,Beam
3691,,,22,5,,1653,10.045174980163575,0
3692,,,54,4,,118,0.6016586939493815,0
3693,"private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}
","private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapfromFTest(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToCoales=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToCoales.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToCoales;
}
",72,4,"initializeCoverageMapFromTests:initializeCoverageMapfromFTest,testToGoals:testToCoales,",158,1.0151397148768107,Beam
3695,,,22,3,,87,0.39409956137339275,0
3696,"public EventsIntegrationTest(){
  setResponseLogLengthLimit(1000);
  dateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-1);
  yesterday=dateFormat.format(cal.getTime());
  yesterday+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,0);
  today=dateFormat.format(cal.getTime());
  today+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,1);
  tomorrow=dateFormat.format(cal.getTime());
  tomorrow+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,3);
  tomorrowPlus3=dateFormat.format(cal.getTime());
  tomorrowPlus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-3);
  yesterdayMinus3=dateFormat.format(cal.getTime());
  yesterdayMinus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,5);
  tomorrowPlus5=dateFormat.format(cal.getTime());
  tomorrowPlus5+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-5);
  yesterdayMinus5=dateFormat.format(cal.getTime());
  yesterdayMinus5+=""T00:00:00+0000"";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinus3;
  experiment.endTime=tomorrowPlus3;
  experiment.samplingPercent=1.0;
  experiment.label=""experiment"";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy(""creationTime"",""modificationTime"",""ruleJson"");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}
","public EventsIntegrationExample(){
  setResponseLogLengthLimit(1000);
  dateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-1);
  yesterday=dateFormat.format(cal.getTime());
  yesterday+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,0);
  today=dateFormat.format(cal.getTime());
  today+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,1);
  tomorrow=dateFormat.format(cal.getTime());
  tomorrow+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,3);
  tomorrowPlus3=dateFormat.format(cal.getTime());
  tomorrowPlus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-3);
  yesterdayMinus3=dateFormat.format(cal.getTime());
  yesterdayMinus3+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,5);
  tomorrowPlus5=dateFormat.format(cal.getTime());
  tomorrowPlus5+=""T00:00:00+0000"";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-5);
  yesterdayMinus5=dateFormat.format(cal.getTime());
  yesterdayMinus5+=""T00:00:00+0000"";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinus3;
  experiment.endTime=tomorrowPlus3;
  experiment.samplingPercent=1.0;
  experiment.label=""experiment"";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy(""creationTime"",""modificationTime"",""ruleJson"");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}
",339,13,"EventsIntegrationTest:EventsIntegrationExample,",5,0.041637496153513594,Beam
3698,"protected void onProgress(int itemcount,int size){
}
","protected void oneStatus(int itemcount,int content){
}
",12,3,"onProgress:oneStatus,size:content,",65,0.3189541816711426,Beam
3699,,,23,2,,245,1.3925461490948996,0
3700,"public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
","public void load(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}
",15,2,"init:load,",5,0.019634679953257243,Beam
3702,,,62,6,,600,2.485135388374329,0
3703,"private void clearDictionaryCache(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}
","private void cleardwordMap(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}
",75,6,"clearDictionaryCache:cleardwordMap,",22,0.09626993338267008,Beam
3704,,,30,4,,841,5.948915310700735,0
3705,,,91,5,,299,1.5205713748931884,0
3707,"public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}
","public static String trimTopad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="""";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}
",79,5,"trimOrPad:trimTopad,",94,0.46116751432418823,Beam
3708,"private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
","private List<EndIsland> findSurroundingIcelands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}
",105,10,"findSurroundingIslands:findSurroundingIcelands,",3,0.03746618429819743,Beam
3709,"protected boolean arePathsContiguous(TreePath[] paths){
  if (rowMapper == null || paths.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=paths.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=paths[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (paths[counter] != null) {
        tempPath[0]=paths[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}
","protected boolean validate(TreePath[] patterns){
  if (rowMapper == null || patterns.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=patterns.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=patterns[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (patterns[counter] != null) {
        tempPath[0]=patterns[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}
",250,12,"arePathsContiguous:validate,paths:patterns,",63,0.5567999005317688,Beam
3710,,,138,3,,352,2.2541574994723,0
3711,,,101,6,,260,0.938422699769338,0
3712,,,35,5,,379,1.893107569217682,0
3713,"@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}
","@SafeVarargs public final void replace(int rowIndex,T... newItems){
  replace(rowIndex,Arrays.asList(newItems));
}
",28,3,"insert:replace,",21,0.08724339008331299,Beam
3714,"private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
","private SortedMap<MessageUid,MaildirMessageName> truncateMaps(Map<MessageUid,MaildirMessageName> match,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (match instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)match;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(match);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}
",98,5,"truncateMap:truncateMaps,map:match,",253,1.7406342387199403,Beam
3715,,,100,6,,359,1.7474278251330058,0
3717,"public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}
","public static int findName(String name,int[] source){
  for (int i=0; i < source.length; i++) {
    if (name.equals(getName(source[i]))) {
      return i;
    }
  }
  return -1;
}
",57,4,"table:source,",55,0.3410785476366679,Beam
3718,,,42,4,,107,0.5195821841557821,0
3719,"@Override public boolean isRunning(){
  return (frame != null && frame.isVisible());
}
","@Override public boolean setWorking(){
  return (frame != null && frame.isVisible());
}
",22,2,"isRunning:setWorking,",12,0.04284677902857462,Beam
3720,"private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){
  if (elementsToRemove.size() > 0) {
    names.removeAll(elementsToRemove);
    for (    String elementToRemove : elementsToRemove) {
      sharedElements.remove(elementToRemove);
    }
  }
}
","private void removeObviousEodes(List<String> groups,Map<String,View> sharedElements,List<String> eonentsDoKeep){
  if (eonentsDoKeep.size() > 0) {
    groups.removeAll(eonentsDoKeep);
    for (    String elementToRemove : eonentsDoKeep) {
      sharedElements.remove(elementToRemove);
    }
  }
}
",61,5,"removeObsoleteElements:removeObviousEodes,elementsToRemove:eonentsDoKeep,names:groups,",570,3.644962199529012,Beam
3721,"public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}
","public static String map2OID(String ergDef){
  return alg2OidMap.get(ergDef.toUpperCase(Locale.US));
}
",25,3,"algName:ergDef,",33,0.14477911790211995,Beam
3722,,,270,8,,832,4.788069001833597,0
3723,,,251,14,,1851,11.504799822966257,0
3726,,,133,10,,1280,7.450687249501546,0
3727,,,154,6,,499,1.9260761380195617,0
3728,"protected void calculateItemWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);
  CategoryDataset dataset=plot.getDataset(rendererIndex);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double space=0.0;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      space=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      space=dataArea.getWidth();
    }
    double maxWidth=space * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (rows > 1) {
      currentItemMargin=getItemMargin();
    }
    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((rows * columns) > 0) {
      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(used,maxWidth));
    }
  }
}
","protected void paint(CategoryPlot report,Rectangle2D dataArea,int endererId,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(report,endererId);
  CategoryDataset dataset=report.getDataset(endererId);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double space=0.0;
    PlotOrientation orientation=report.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      space=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      space=dataArea.getWidth();
    }
    double maxWidth=space * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (rows > 1) {
      currentItemMargin=getItemMargin();
    }
    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((rows * columns) > 0) {
      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(used,maxWidth));
    }
  }
}
",252,15,"calculateItemWidth:paint,rendererIndex:endererId,plot:report,",1172,6.140262766679128,Beam
3729,,,55,4,,145,0.7831646124521892,0
3730,"public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}
","public void action(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.action(file);
}
",57,4,"print:action,",27,0.0957314650217692,Beam
3731,,,119,11,,899,4.70522137482961,0
3732,"public void createEntityConfig(String realm,FederationConfigElement config) throws WSFederationMetaException {
  String federationId=config.getFederationID();
  if (federationId == null) {
    debug.error(""WSFederationMetaManager.createEntityConfig: "" + ""entity ID is null"");
    String[] data={realm};
    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(""empty_entityid"",null);
  }
  if (realm == null) {
    realm=""/"";
  }
  String[] objs={federationId,realm};
  try {
    Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config);
    Map oldAttrs=configInst.getConfiguration(realm,federationId);
    if (oldAttrs == null) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_descriptor_not_exist"",objs);
    }
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues != null && !oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,objs,null);
      throw new WSFederationMetaException(""entity_config_exists"",objs);
    }
    configInst.setConfiguration(realm,federationId,attrs);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null);
    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);
    if (spconfig != null) {
      addToCircleOfTrust(spconfig,realm,federationId);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);
    if (idpconfig != null) {
      addToCircleOfTrust(idpconfig,realm,federationId);
    }
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",e);
    String[] data={e.getMessage(),federationId,realm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
catch (  JAXBException jaxbe) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",jaxbe);
    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,objs,null);
    throw new WSFederationMetaException(""invalid_config"",objs);
  }
}
","public void createMemberRef(String palm,FederationConfigElement config) throws WSFederationMetaException {
  String federationId=config.getFederationID();
  if (federationId == null) {
    debug.error(""WSFederationMetaManager.createEntityConfig: "" + ""entity ID is null"");
    String[] data={palm};
    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(""empty_entityid"",null);
  }
  if (palm == null) {
    palm=""/"";
  }
  String[] objs={federationId,palm};
  try {
    Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config);
    Map oldAttrs=configInst.getConfiguration(palm,federationId);
    if (oldAttrs == null) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException(""entity_descriptor_not_exist"",objs);
    }
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues != null && !oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,objs,null);
      throw new WSFederationMetaException(""entity_config_exists"",objs);
    }
    configInst.setConfiguration(palm,federationId,attrs);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null);
    SPSSOConfigElement spconfig=getSPSSOConfig(palm,federationId);
    if (spconfig != null) {
      addToCircleOfTrust(spconfig,palm,federationId);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(palm,federationId);
    if (idpconfig != null) {
      addToCircleOfTrust(idpconfig,palm,federationId);
    }
  }
 catch (  ConfigurationException e) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",e);
    String[] data={e.getMessage(),federationId,palm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
catch (  JAXBException jaxbe) {
    debug.error(""WSFederationMetaManager.createEntityConfig:"",jaxbe);
    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,objs,null);
    throw new WSFederationMetaException(""invalid_config"",objs);
  }
}
",394,13,"realm:palm,createEntityConfig:createMemberRef,",235,1.7739177664120993,Beam
3733,"private boolean hasFullEntry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entry.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}
","private boolean hasFullEntry(JsonValue entity,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entity != null) {
    short ignoreFields=0;
    if (entity.isDefined(""_id"")) {
      ignoreFields++;
    }
    if (entity.isDefined(""_rev"")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entity.size() > ignoreFields;
  }
 else {
    return false;
  }
}
",107,6,"entry:entity,",5,0.059140412012736,Beam
3735,"private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}
","private static char[] doUnpackGCMap(String printed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=printed.charAt(i++);
    char value=printed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}
",83,7,"zzUnpackCMap:doUnpackGCMap,packed:printed,",66,0.3938250780105591,Beam
3736,"protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}
","protected PrintWriter writeFileout(Document doc){
  return writeFileout;
}
",12,2,"lineFileOut:writeFileout,",28,0.154573388894399,Beam
3737,"public double nextDouble(double alpha,double lambda){
  double a=alpha;
  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;
  double gds, p, q, t, sign_u, u, v, w, x;
  double v1, v2, v12;
  if (a <= 0.0)   throw new IllegalArgumentException();
  if (lambda <= 0.0)   new IllegalArgumentException();
  if (a < 1.0) {
    b=1.0 + 0.36788794412 * a;
    for (; ; ) {
      p=b * randomGenerator.raw();
      if (p <= 1.0) {
        gds=Math.exp(Math.log(p) / a);
        if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda);
      }
 else {
        gds=-Math.log((b - p) / a);
        if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);
      }
    }
  }
 else {
    if (a != aa) {
      aa=a;
      ss=a - 0.5;
      s=Math.sqrt(ss);
      d=5.656854249 - 12.0 * s;
    }
    do {
      v1=2.0 * randomGenerator.raw() - 1.0;
      v2=2.0 * randomGenerator.raw() - 1.0;
      v12=v1 * v1 + v2 * v2;
    }
 while (v12 > 1.0);
    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);
    x=s + 0.5 * t;
    gds=x * x;
    if (t >= 0.0)     return (gds / lambda);
    u=randomGenerator.raw();
    if (d * u <= t * t * t)     return (gds / lambda);
    if (a != aaa) {
      aaa=a;
      r=1.0 / a;
      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;
      if (a > 3.686) {
        if (a > 13.022) {
          b=1.77;
          si=0.75;
          c=0.1515 / s;
        }
 else {
          b=1.654 + 0.0076 * ss;
          si=1.68 / s + 0.275;
          c=0.062 / s + 0.024;
        }
      }
 else {
        b=0.463 + s - 0.178 * ss;
        si=1.235;
        c=0.195 / s - 0.079 + 0.016 * s;
      }
    }
    if (x > 0.0) {
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (Math.log(1.0 - u) <= q)       return (gds / lambda);
    }
    for (; ; ) {
      do {
        e=-Math.log(randomGenerator.raw());
        u=randomGenerator.raw();
        u=u + u - 1.0;
        sign_u=(u > 0) ? 1.0 : -1.0;
        t=b + (e * si) * sign_u;
      }
 while (t <= -0.71874483771719);
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (q <= 0.0)       continue;
      if (q > 0.5) {
        w=Math.exp(q) - 1.0;
      }
 else {
        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;
      }
      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {
        x=s + 0.5 * t;
        return (x * x / lambda);
      }
    }
  }
}
","public double sign(double na,double lambda){
  double a=na;
  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;
  double gds, p, q, t, sign_u, u, v, w, x;
  double v1, v2, v12;
  if (a <= 0.0)   throw new IllegalArgumentException();
  if (lambda <= 0.0)   new IllegalArgumentException();
  if (a < 1.0) {
    b=1.0 + 0.36788794412 * a;
    for (; ; ) {
      p=b * randomGenerator.raw();
      if (p <= 1.0) {
        gds=Math.exp(Math.log(p) / a);
        if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda);
      }
 else {
        gds=-Math.log((b - p) / a);
        if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);
      }
    }
  }
 else {
    if (a != aa) {
      aa=a;
      ss=a - 0.5;
      s=Math.sqrt(ss);
      d=5.656854249 - 12.0 * s;
    }
    do {
      v1=2.0 * randomGenerator.raw() - 1.0;
      v2=2.0 * randomGenerator.raw() - 1.0;
      v12=v1 * v1 + v2 * v2;
    }
 while (v12 > 1.0);
    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);
    x=s + 0.5 * t;
    gds=x * x;
    if (t >= 0.0)     return (gds / lambda);
    u=randomGenerator.raw();
    if (d * u <= t * t * t)     return (gds / lambda);
    if (a != aaa) {
      aaa=a;
      r=1.0 / a;
      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;
      if (a > 3.686) {
        if (a > 13.022) {
          b=1.77;
          si=0.75;
          c=0.1515 / s;
        }
 else {
          b=1.654 + 0.0076 * ss;
          si=1.68 / s + 0.275;
          c=0.062 / s + 0.024;
        }
      }
 else {
        b=0.463 + s - 0.178 * ss;
        si=1.235;
        c=0.195 / s - 0.079 + 0.016 * s;
      }
    }
    if (x > 0.0) {
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (Math.log(1.0 - u) <= q)       return (gds / lambda);
    }
    for (; ; ) {
      do {
        e=-Math.log(randomGenerator.raw());
        u=randomGenerator.raw();
        u=u + u - 1.0;
        sign_u=(u > 0) ? 1.0 : -1.0;
        t=b + (e * si) * sign_u;
      }
 while (t <= -0.71874483771719);
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (q <= 0.0)       continue;
      if (q > 0.5) {
        w=Math.exp(q) - 1.0;
      }
 else {
        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;
      }
      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {
        x=s + 0.5 * t;
        return (x * x / lambda);
      }
    }
  }
}
",1113,53,"nextDouble:sign,alpha:na,",128,1.0633036613464355,Beam
3738,"private ExchangeRateManager(){
  if (System.getProperty(""EXPERIMENTAL"") == null)   throw new UnsupportedOperationException(""Work in progress"");
  addKnownRates();
}
","private ExchangeBalanceJournal(){
  if (System.getProperty(""EXPERIMENTAL"") == null)   throw new UnsupportedOperationException(""Work in progress"");
  addKnownRates();
}
",28,1,"ExchangeRateManager:ExchangeBalanceJournal,",13,0.06598764260609945,Beam
3739,,,27,2,,266,1.9584405382474264,0
3740,"public void addPutTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimeNanos(duration);
}
","public void addPutTimeLones(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimeLones(duration);
}
",29,4,"addPutTimeNanos:addPutTimeLones,",41,0.2971888025601705,Beam
3742,,,177,12,,1039,5.92652074098587,0
3743,"public String toString(Object value){
  return toPrettyString(value);
}
","public String newStream(Object item){
  return toPrettyString(item);
}
",15,2,"toString:newStream,value:item,",59,0.24430632988611858,Beam
3744,"public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(importable,file,importElement,null));
}
","public void newModule(@NotNull PsiElement Importurable,@NotNull PsiFile file,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(Importurable,file,importElement,null));
}
",38,5,"importable:Importurable,addImport:newModule,",374,1.8151552319526671,Beam
3745,"@SuppressWarnings(""unchecked"") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}
","@SuppressWarnings(""unchecked"") public synchronized T Findcounter(Enum<?> controllerIndex) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(controllerIndex);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(controllerIndex,counter);
  }
  return counter;
}
",60,5,"counterKey:controllerIndex,findCounter:Findcounter,",59,0.2746261994043986,Beam
3746,"public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){
  ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);
  incomplete_expansion_rooms.add(new_room);
  return new_room;
}
","public ExpandRoomFreespaceIncomplete add_incomplete_expansion_round(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){
  ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);
  incomplete_expansion_rooms.add(new_room);
  return new_room;
}
",38,6,"add_incomplete_expansion_room:add_incomplete_expansion_round,",6,0.046549661954243975,Beam
3747,"protected double currentScoreFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}
","protected double currentValueFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}
",102,4,"currentScoreFunction:currentValueFunction,",4,0.01974832614262899,Beam
3748,"Attributes parseAttributes() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
","Attributes parseCharacters() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}
",38,3,"parseAttributes:parseCharacters,",4,0.030254538853963217,Beam
3749,,,141,8,,402,3.1841178059577944,0
3750,"private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}
","private double[] scale(double[] distensionsOne,double[] distances2){
  if (distensionsOne.length != distances2.length) {
    throw new RuntimeException(""different lengths!"");
  }
  double[] result=new double[distensionsOne.length];
  for (int i=0; i < distensionsOne.length; i++) {
    result[i]=Math.scale(distensionsOne[i],distances2[i]);
  }
  return result;
}
",91,5,"max:scale,distances1:distensionsOne,",272,1.3783397992451987,Beam
3752,,,40,4,,435,2.897977415720622,0
3753,,,62,10,,2471,11.059987775484721,0
3754,"ProxyVerifier(TxnManager serverProxy,Uuid proxyID){
  if (!(serverProxy instanceof RemoteMethodControl)) {
    throw new UnsupportedOperationException(""No verifier available for non-constrainable service"");
  }
 else   if (!(serverProxy instanceof TrustEquivalence)) {
    throw new UnsupportedOperationException(""Verifier requires service proxy to implement "" + ""TrustEquivalence"");
  }
 else   if (proxyID == null) {
    throw new IllegalArgumentException(""Proxy id cannot be null"");
  }
  this.serverProxy=(RemoteMethodControl)serverProxy;
  this.proxyID=proxyID;
}
","ProxyVerifier(TxnManager erverServer,Uuid proxyID){
  if (!(erverServer instanceof RemoteMethodControl)) {
    throw new UnsupportedOperationException(""No verifier available for non-constrainable service"");
  }
 else   if (!(erverServer instanceof TrustEquivalence)) {
    throw new UnsupportedOperationException(""Verifier requires service proxy to implement "" + ""TrustEquivalence"");
  }
 else   if (proxyID == null) {
    throw new IllegalArgumentException(""Proxy id cannot be null"");
  }
  this.erverServer=(RemoteMethodControl)erverServer;
  this.proxyID=proxyID;
}
",80,3,"serverProxy:erverServer,",47,0.22007576624552408,Beam
3755,"public ByteBandedRaster(SampleModel sampleModel,Point origin){
  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);
}
","public ByteBoundedRape(SampleModel sampleModel,Point origin){
  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);
}
",50,3,"ByteBandedRaster:ByteBoundedRape,",10,0.1104206641515096,Beam
3756,,,25,2,,231,1.5502259095509847,0
3757,"public void makeGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}
","public void parseGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split("" "");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}
",303,17,"makeGraph:parseGraph,",3,0.02752421299616496,Beam
3758,"public void deleteLeaves(String name){
  for (int i=0; i < _leaves.size(); i++) {
    CatalogTreeLeaf leaf=_leaves.get(i);
    if (name.equals(leaf.getName())) {
      _leaves.remove(i);
    }
  }
}
","public void deleteSlaves(String name){
  for (int i=0; i < _leaves.size(); i++) {
    CatalogTreeLeaf leaf=_leaves.get(i);
    if (name.equals(leaf.getName())) {
      _leaves.remove(i);
    }
  }
}
",61,5,"deleteLeaves:deleteSlaves,",3,0.012482114632924398,Beam
3759,"private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
","private void testScrape(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScrape(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScrape(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}
",63,5,"testScenario:testScrape,",66,0.3750747601191203,Beam
3760,,,42,3,,281,1.5887802918752034,0
3761,"public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}
","public static int round(final float index){
  final int bits=Float.floatToRawIntBits(index);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)index;
  }
}
",102,7,"value:index,",40,0.24187993208567302,Beam
3762,"private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}
","private static long addAndCheck(long as,long b,Localizable pattern) throws MathRuntimeException {
  final long result=as + b;
  if (!((as ^ b) < 0 || (as ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,as,b);
  }
  return result;
}
",63,5,"a:as,",28,0.2025680939356486,Beam
3763,"private FormatString[] parse(String s){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(s);
  for (int i=0, len=s.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(s,i,m.start());
        al.add(new FixedString(s.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(s,i,len);
      al.add(new FixedString(s.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}
","private FormatString[] parse(String a){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(a);
  for (int i=0, len=a.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(a,i,m.start());
        al.add(new FixedString(a.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(a,i,len);
      al.add(new FixedString(a.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}
",179,7,"s:a,",8,0.07301928202311198,Beam
3764,"public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}
","public JsonArray get(String value){
  values.get(Json.value(value));
  return this;
}
",24,3,"add:get,",12,0.06090847253799438,Beam
3765,"public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}
","public static String cleanFolderStachingBuffers(String actual){
  if (!StringUtils.isEmpty(actual)) {
    Matcher m=folderStackingPattern.matcher(actual);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return actual;
}
",60,4,"cleanFolderStackingMarkers:cleanFolderStachingBuffers,filename:actual,",196,1.5827221592267355,Beam
3766,"private void loadBinary(InputStream is) throws IOException {
  if (is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    FileChannel fc=fis.getChannel();
    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());
    bb.load();
    loadBinary(bb);
    is.close();
  }
 else {
    loadBinary(new DataInputStream(is));
  }
}
","private void parseBinary(InputStream is) throws IOException {
  if (is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    FileChannel fc=fis.getChannel();
    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());
    bb.load();
    parseBinary(bb);
    is.close();
  }
 else {
    parseBinary(new DataInputStream(is));
  }
}
",90,5,"loadBinary:parseBinary,",3,0.029891947905222576,Beam
3769,,,45,4,,110,0.4002880771954854,0
3770,,,129,7,,605,2.7318076809247334,0
3771,,,34,5,,230,0.9564764618873596,0
3772,,,14,2,,225,0.8228621403376262,0
3773,,,44,3,,756,3.4628759741783144,0
3774,"public PetCategory findOne(String id){
  log.debug(""Request to get PetCategory : {}"",id);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));
  return petCategory;
}
","public PetCategory searchSingle(String id){
  log.debug(""Request to get PetCategory : {}"",id);
  PetCategory petCategory=petCategoryRepository.searchSingle(UUID.fromString(id));
  return petCategory;
}
",36,5,"findOne:searchSingle,",8,0.027268819014231362,Beam
3775,"public boolean removeArg(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}
","public boolean removeExt(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}
",55,3,"removeArg:removeExt,",36,0.12757501204808552,Beam
3776,"public static String quoteIfJavaKeyword(String name){
  return JVMModuleUtil.quoteIfJavaKeyword(name);
}
","public static String quoteIfJavakeypoint(String entry){
  return JVMModuleUtil.quoteIfJavakeypoint(entry);
}
",18,2,"quoteIfJavaKeyword:quoteIfJavakeypoint,name:entry,",67,0.3680958112080892,Beam
3777,"public synchronized void checkState(State... requiredStates) throws IllegalStateException {
  for (  State requiredState : requiredStates) {
    if (requiredState.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,""Expected states %s, but in state %s"",Lists.newArrayList(requiredStates),currentState));
}
","public synchronized void updateState(State... requiredTypes) throws IllegalStateException {
  for (  State requiredState : requiredTypes) {
    if (requiredState.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,""Expected states %s, but in state %s"",Lists.newArrayList(requiredTypes),currentState));
}
",60,4,"checkState:updateState,requiredStates:requiredTypes,",45,0.27856624126434326,Beam
3778,,,137,9,,278,1.4203726331392923,0
3779,"public synchronized void increase(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}
","public synchronized void Decreance(){
  if (accurate > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accurate) {
      clearUp();
      if (count > 0) {
        to.addFirst(lastAdded + accurate);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    to.addFirst(System.currentTimeMillis());
  }
}
",89,6,"increase:Decreance,data:to,accuracy:accurate,",172,0.850190031528473,Beam
3780,"public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){
  DateTime intervalEnd=interval.getEnd();
  DateTime sliceStart=interval.getStart();
  DateTime periodStart=timeGrain.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",interval,timeGrain,periodStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!interval.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",interval,timeGrain);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",interval,intervalSlices.size(),timeGrain);
  return intervalSlices;
}
","public static List<Interval> sort(Interval intconfig,TimeGrain timeGrain){
  DateTime intervalEnd=intconfig.getEnd();
  DateTime sliceStart=intconfig.getStart();
  DateTime periodStart=timeGrain.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info(""Interval {} is not aligned to TimeGrain {} starting {}"",intconfig,timeGrain,periodStart);
    throw new IllegalArgumentException(""Interval must be aligned to the TimeGrain starting "" + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!intconfig.contains(slicedInterval)) {
      LOG.info(""Interval {} is not a multiple of TimeGrain {}"",intconfig,timeGrain);
      throw new IllegalArgumentException(""Interval must be a multiple of the TimeGrain"");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug(""Sliced interval {} into {} slices of {} grain"",intconfig,intervalSlices.size(),timeGrain);
  return intervalSlices;
}
",186,9,"sliceIntervals:sort,interval:intconfig,",185,1.1531364560127257,Beam
3781,,,47,3,,83,0.4818959911664327,0
3782,,,141,11,,655,2.6547508597373963,0
3783,"public BasicCondition(String variable,Value value,Relation relation){
  this.variable=Template.create(variable);
  this.templateValue=Template.create(value.toString());
  this.groundValue=value;
  this.relation=relation;
}
","public GeneralCondition(String variable,Value source,Relation relation){
  this.variable=Template.create(variable);
  this.templateValue=Template.create(source.toString());
  this.groundValue=source;
  this.relation=relation;
}
",52,4,"BasicCondition:GeneralCondition,value:source,",242,1.0778652826944988,Beam
3785,"public static void assertExpectedOutputContains(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ x+ ""\'"");
  }
}
","public static void assertExpectedOutputContaining(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail(""expected \'"" + expectedString + ""\' not found in \'""+ x+ ""\'"");
  }
}
",38,3,"assertExpectedOutputContains:assertExpectedOutputContaining,",4,0.02115888992945353,Beam
3786,,,17,3,,203,0.8999012668927511,0
3787,"private Collection<Var> migrateColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
","private Collection<Var> migrationColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}
",139,8,"migrateColumns:migrationColumns,",5,0.027091928323109946,Beam
3788,"public boolean equals(Object interval){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interval);
}
","public boolean equals(Object iterpol){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(iterpol);
}
",28,3,"interval:iterpol,",18,0.08644918203353882,Beam
3789,"public static Set<String> toStringSet(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}
","public static Set<String> toShortList(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}
",70,4,"toStringSet:toShortList,",11,0.05723962386449178,Beam
3790,,,31,3,,582,4.622653786341349,0
3791,"public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));
  }
}
","public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodWundle){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodWundle.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodWundle,annotatedMethods));
  }
}
",65,5,"methodBinder:methodWundle,",12,0.07310267289479573,Beam
3792,"public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
","public void registerAdapter(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}
",40,3,"removeListener:registerAdapter,",38,0.10849618514378866,Beam
3793,,,71,6,,172,0.8038075844446818,0
3794,"void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
","void doHandleJavaButtonOperation(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}
",454,10,"doHandleJavaMouseEvent:doHandleJavaButtonOperation,",46,0.27677279710769653,Beam
3795,"public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
","public void setup(char initialChar){
  initialString=initialString.append(initialChar);
  setup();
  if (SWT.getPlatform() != ""carbon"") {
    setEditText(initialString.toString());
  }
}
",43,3,"show:setup,",36,0.1964201807975769,Beam
3796,,,87,5,,193,1.1243364214897156,0
3797,"public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}
","public String output(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s=""["";
  if (color)   s+=""<"" + c1 + "">"";
  s+=inner;
  if (color)   s+=""<"" + c2 + "">"";
  s+=""] "";
  if (color)   s+=""<"" + c1 + "">"";
  return color ? Pretty.format(s) : s;
}
",93,8,"tag:output,",5,0.028756181399027508,Beam
3798,,,89,3,,235,1.5615827480951945,0
3799,,,16,2,,48,0.18336795568466185,0
3800,"private void startStoppedChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
","private void startStoppingChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}
",22,4,"startStoppedChanged:startStoppingChanged,",6,0.03190346161524455,Beam
3801,,,69,7,,531,3.015518085161845,0
3802,,,198,13,,1121,7.094128028551737,0
3803,,,78,4,,270,2.155061864852905,0
3804,"public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}
","public double step(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException(""Couldn\'t find another proposal with a decent likelihood."");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}
",945,30,"wide:step,",13,0.12025623718897502,Beam
3805,"public Kernel(int offset,double[] values){
  this.values=Arrays.copyOf(values,values.length);
  this.offset=offset;
}
","public Kernel(int window,double[] values){
  this.values=Arrays.copyOf(values,values.length);
  this.window=window;
}
",34,3,"offset:window,",26,0.1219344933827718,Beam
3807,"public void addMethod(SootMethod m){
  checkLevel(SIGNATURES);
  if (m.isDeclared())   throw new RuntimeException(""already declared: "" + m.getName());
  if (subSigToMethods.get(m.getNumberedSubSignature()) != null) {
    throw new RuntimeException(""Attempting to add method "" + m.getSubSignature() + "" to class ""+ this+ "", but the class already has a method with that signature."");
  }
  subSigToMethods.put(m.getNumberedSubSignature(),m);
  methodList.add(m);
  m.setDeclared(true);
  m.setDeclaringClass(this);
}
","public void registerOperation(SootMethod i){
  checkLevel(SIGNATURES);
  if (i.isDeclared())   throw new RuntimeException(""already declared: "" + i.getName());
  if (subSigToMethods.get(i.getNumberedSubSignature()) != null) {
    throw new RuntimeException(""Attempting to add method "" + i.getSubSignature() + "" to class ""+ this+ "", but the class already has a method with that signature."");
  }
  subSigToMethods.put(i.getNumberedSubSignature(),i);
  methodList.add(i);
  i.setDeclared(true);
  i.setDeclaringClass(this);
}
",105,4,"addMethod:registerOperation,m:i,",76,0.408231790860494,Beam
3808,"public boolean isBuiltinSoundAvailable(String soundIdentifier){
  return builtinSounds.containsKey(soundIdentifier);
}
","public boolean isBuiltinSampleKnown(String audioQualifer){
  return builtInMusic.containsKey(audioQualifer);
}
",17,3,"isBuiltinSoundAvailable:isBuiltinSampleKnown,soundIdentifier:audioQualifer,builtinSounds:builtInMusic,",213,1.4993669350941976,Beam
3809,"protected JsOutput newJsOutput(Module m) throws IOException {
  return new JsOutput(m,isCompilingLanguageModule());
}
","protected JsOutput createJsUnit(Module m) throws IOException {
  return new JsOutput(m,isCompilingLanguageModule());
}
",22,2,"newJsOutput:createJsUnit,",14,0.0990200916926066,Beam
3810,"public void analyzeAllItAndWriteResults(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}
","public void init(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + ""routesAndTTs.txt""));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header=""it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info(""Starting to analyze iteration "" + i + "" of ""+ lastIteration+ "" iterations."");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + ""\\t"" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append(""\\t"" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + "" Iterations analyzed."");
}
",283,19,"analyzeAllItAndWriteResults:init,",27,0.24754995902379354,Beam
3811,,,53,3,,82,0.6765398104985555,0
3812,"public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}
","public void extension(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extension(other.getAlternatives());
}
",36,3,"extend:extension,",3,0.023945295810699464,Beam
3813,"protected boolean read(){
  if (!nReuseHeader) {
    Debug.message(""iso8211"",""DDFRecord reusing header, calling readHeader()"");
    return readHeader();
  }
  byte[] tempData=new byte[nDataSize - nFieldOffset];
  int nReadBytes=poModule.read(tempData,0,tempData.length);
  System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length);
  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {
    return false;
  }
 else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {
    Debug.error(""DDFRecord: Data record is short on DDF file."");
    return false;
  }
  return true;
}
","protected boolean skip(){
  if (!nReuseHeader) {
    Debug.message(""iso8211"",""DDFRecord reusing header, calling readHeader()"");
    return readHeader();
  }
  byte[] tempData=new byte[nDataSize - nFieldOffset];
  int nReadBytes=poModule.skip(tempData,0,tempData.length);
  System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length);
  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {
    return false;
  }
 else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {
    Debug.error(""DDFRecord: Data record is short on DDF file."");
    return false;
  }
  return true;
}
",126,8,"read:skip,",7,0.08219049374262492,Beam
3814,"private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}
","private Long hash(HttpServletRequest request){
  Long hash=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    hash=Long.valueOf(idString);
  }
  return hash;
}
",61,4,"id:hash,",43,0.32968005339304607,Beam
3815,"public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}
","public ItemStack clearWords(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}
",83,6,"removeItems:clearWords,",73,0.5317854682604471,Beam
3816,"public boolean search(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}
","public boolean filter(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}
",55,6,"search:filter,",4,0.042514296372731526,Beam
3817,,,22,4,,250,1.5563581506411235,0
3818,,,14,2,,321,1.739421053727468,0
3819,,,141,9,,255,2.828104321161906,0
3820,"public void assureProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}
","public void assuredProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}
",21,2,"assureProxyOk:assuredProxyOk,",5,0.03407198190689087,Beam
3821,,,33,4,,397,3.608125110467275,0
3822,,,33,3,,96,0.5231718142827352,0
3824,"protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
","protected void update(String[] sqls,SQLiteDatabase db){
  String throwSQL="""";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}
",73,5,"execute:update,",43,0.24656673669815063,Beam
3825,,,62,3,,524,3.9448113322257994,0
3826,"public void addControlRoll(PilotingRollData control){
  controlRolls.addElement(control);
}
","public void addFixedObject(PilotingRollData content){
  controlRolls.addElement(content);
}
",16,3,"addControlRoll:addFixedObject,control:content,",139,0.6215324521064758,Beam
3827,,,84,5,,345,2.1247806549072266,0
3828,"public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
","public void releaseelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}
",26,3,"releaseSelections:releaseelections,",6,0.02434703509012858,Beam
3829,"public Cell(int rowspan,int colspan){
  this.rowspan=Math.max(rowspan,1);
  this.colspan=Math.max(colspan,1);
}
","public ell(int fontborder,int colspan){
  this.fontborder=Math.max(fontborder,1);
  this.colspan=Math.max(colspan,1);
}
",37,3,"Cell:ell,rowspan:fontborder,",127,0.5593703389167786,Beam
3830,,,61,4,,204,0.8259404341379801,0
3831,,,61,5,,774,6.876592560609182,0
3832,,,24,1,,33,0.1115385890007019,0
3833,,,58,5,,399,2.001234523455302,0
3836,"public static double igamma(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}
","public static double gacga(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}
",101,6,"igamma:gacga,",50,0.2841510534286499,Beam
3837,"public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}
","public CipherParameters decrypt(byte[] min,int keyLen){
  return decrypt(min,0,min.length,keyLen);
}
",28,3,"in:min,",12,0.06309661865234376,Beam
3838,"@Override public boolean connectionAllowed(String eventName){
  if (eventName.equals(""trainingSet"") && m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
","@Override public boolean isAllowed(String eventName){
  if (eventName.equals(""trainingSet"") && m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}
",35,3,"connectionAllowed:isAllowed,",4,0.06284902095794678,Beam
3839,"public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}
","public void addClass(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}
",114,7,"removeAttribute:addClass,",39,0.23724849621454874,Beam
3840,"private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}
","private PdfObject parse(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}
",550,23,"readCompressedStream:parse,",77,0.4578637560208639,Beam
3841,"@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}
","@Override public XObject execute(XPathContext xptxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xptxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xptxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xptxt.getCurrentNode();
  DTM dtm=xptxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xptxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate(""xpath.funcHere.documentsDiffer""));
    }
  }
  XNodeSet nodes=new XNodeSet(xptxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}
",253,12,"xctxt:xptxt,",8,0.14761157830556235,Beam
3842,"public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}
","public E remove(int connection){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(connection);
  int numMoved=size - connection - 1;
  if (numMoved > 0)   System.arraycopy(elementData,connection + 1,elementData,connection,numMoved);
  elementData[--size]=null;
  return oldValue;
}
",67,8,"index:connection,",24,0.16318981647491454,Beam
3843,"public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int changeType){
}
","public void globalConfigChange(String serviceName,String version,String groupName,String configPlugin,int changeType){
}
",21,6,"serviceComponent:configPlugin,globalConfigChanged:globalConfigChange,",119,0.9303443710009257,Beam
3844,"public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}
","public static Vector2 sign(Vector2 i01,Vector2 o2){
  return new Vector2(Math.sign(i01.x,o2.x),Math.sign(i01.z,o2.z));
}
",44,3,"min:sign,o1:i01,",95,0.8761656999588012,Beam
3845,,,35,2,,147,0.9616405725479126,0
3847,"@Override public void addHeader(final String header,final String value){
  mHeadersOptions.add(new HeaderOption(header,value));
}
","@Override public void setHead(final String field,final String value){
  mHeadersOptions.add(new HeaderOption(field,value));
}
",29,4,"addHeader:setHead,header:field,",268,1.459079424540202,Beam
3848,"public void resetPSRs(){
  pilotRolls.removeAllElements();
}
","public void resetTSRs(){
  pilotRolls.removeAllElements();
}
",13,2,"resetPSRs:resetTSRs,",3,0.013715219497680665,Beam
3849,"public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)context.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}
","public static Map<String,Object> performsFindMultiple(DispatchContext null,Map<String,Object> contact){
  Integer viewSize=(Integer)contact.get(""viewSize"");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  contact.put(""viewSize"",viewSize);
  Integer viewIndex=(Integer)contact.get(""viewIndex"");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  contact.put(""viewIndex"",viewIndex);
  Map<String,Object> result=performFind(null,contact);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get(""listIt"");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo(""Problem getting partial list"" + e,module);
  }
  result.put(""listSize"",listSize);
  result.put(""list"",list);
  result.remove(""listIt"");
  return result;
}
",229,12,"dctx:null,performFindList:performsFindMultiple,context:contact,",394,3.1076542258262636,Beam
3850,"@Override public boolean equals(Object o){
  if (o instanceof Graph) {
    return string.equals(o.toString());
  }
  return false;
}
","@Override public boolean compalls(Object o){
  if (o instanceof Graph) {
    return string.compalls(o.toString());
  }
  return false;
}
",34,3,"equals:compalls,",3,0.014471971988677978,Beam
3851,,,75,4,,606,3.6786266962687173,0
3853,"private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}
","private ByteString escapeCharacters(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}
",95,5,"escapeBytes:escapeCharacters,",4,0.014920862515767415,Beam
3854,"public static PublicKeySelector fromString(String type){
  if (type != null) {
    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {
      if (type.equalsIgnoreCase(keySelector.type)) {
        return keySelector;
      }
    }
  }
  return null;
}
","public static PublicKeySelector FromString(String unit){
  if (unit != null) {
    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {
      if (unit.equalsIgnoreCase(keySelector.unit)) {
        return keySelector;
      }
    }
  }
  return null;
}
",50,3,"fromString:FromString,type:unit,",59,0.3031278212865194,Beam
3855,,,24,2,,141,0.6704375823338826,0
3856,"public boolean is(String arg,boolean allowAbbr){
  if (name.equalsIgnoreCase(arg)) {
    return true;
  }
  if (allowAbbr && arg.length() == 1) {
    if (arg.charAt(0) == c) {
      return true;
    }
  }
  return false;
}
","public boolean at(String var,boolean allowAbbr){
  if (name.equalsIgnoreCase(var)) {
    return true;
  }
  if (allowAbbr && var.length() == 1) {
    if (var.charAt(0) == c) {
      return true;
    }
  }
  return false;
}
",59,5,"is:at,arg:var,",92,0.5770691235860189,Beam
3857,,,131,11,,2055,10.775580509503682,0
3858,"int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}
","int shift(Row node,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=node.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=node.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(node);
  return rowHead;
}
",145,14,"insert:shift,row:node,",371,2.54714359442393,Beam
3859,"public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}
","public void serializing(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals(""true"")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals(""false"")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message(""PrefixResourceName:initialize():"" + "" delimiter = "" + delimiter + "" wildcard = ""+ wildcard+ "" oneLevelWildcard = ""+ oneLevelWildcard+ "" case = ""+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message(""wildcardEmbedded,oneLevelWildcardEmbedded"" + wildcardEmbedded + "",""+ oneLevelWildcardEmbedded);
  }
  return;
}
",287,14,"initialize:serializing,",39,0.3799330949783325,Beam
3860,"@SuppressWarnings(""rawtypes"") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
","@SuppressWarnings(""rawtypes"") public static void createProjectConStraints(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info(""Imported constraint ["" + filename + ""] for project [""+ aProject.getName()+ ""] with id [""+ aProject.getId()+ ""]"");
    }
  }
}
",158,9,"createProjectConstraint:createProjectConStraints,",10,0.07690821886062622,Beam
3862,,,69,5,,722,5.833351878325145,0
3863,"public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
","public static EPType multipleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}
",44,2,"singleValue:multipleValue,",37,0.35096420844395954,Beam
3864,,,24,2,,285,1.7324113408724466,0
3865,"public static Result verify(String sid,String code){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn(""is not same, code.server="" + c.code + "", code.client=""+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
","public static Result verify(String sid,String error){
  String id=""//captcha/"" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn(""no code in cache, sid="" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(error,c.error)) {
    log.warn(""is not same, code.server="" + c.error + "", code.client=""+ error);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn(""expired, expired="" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}
",128,6,"code:error,",30,0.24628003438313803,Beam
3866,,,107,6,,685,7.181461926301321,0
3867,,,108,6,,228,2.2666585365931193,0
3868,,,168,6,,1096,11.002404423554738,0
3869,"public QueryStringQueryBuilder field(String field,float boost){
  if (fields == null) {
    fields=new ArrayList<>();
  }
  fields.add(field);
  if (fieldsBoosts == null) {
    fieldsBoosts=new ObjectFloatHashMap<>();
  }
  fieldsBoosts.put(field,boost);
  return this;
}
","public QueryStringQueryBuilder filter(String filter,float driver){
  if (fields == null) {
    fields=new ArrayList<>();
  }
  fields.add(filter);
  if (fieldsBoosts == null) {
    fieldsBoosts=new ObjectFloatHashMap<>();
  }
  fieldsBoosts.put(filter,driver);
  return this;
}
",65,4,"field:filter,boost:driver,",87,0.6234228293100993,Beam
3870,,,41,2,,314,5.330071727434794,0
3871,,,18,3,,397,2.4491040746370953,0
3872,"public VdcConfig toConfigParam(Properties vdcInfo){
  log.info(""copy {} to the sync config param"",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
","public VdcConfig process(Properties svdcInfo){
  log.info(""copy {} to the sync config param"",svdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(svdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(svdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(svdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=svdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=svdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=svdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(svdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(svdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}
",214,7,"toConfigParam:process,vdcInfo:svdcInfo,",63,0.8455228805541992,Beam
3873,"@SuppressWarnings(""deprecation"") private static final URL toURL(String location,boolean file){
  if (file) {
    File f=new File(location);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(location);
  }
}
","@SuppressWarnings(""deprecation"") private static final URL ToURI(String string,boolean file){
  if (file) {
    File f=new File(string);
    if (f.exists()) {
      try {
        return f.ToURI();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(string);
  }
}
",79,4,"location:string,toURL:ToURI,",101,0.80611519018809,Beam
3874,,,24,2,,111,0.8515568614006043,0
3875,"public int search(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}
","public int search(String tt){
  int M=pat.length();
  int N=tt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != tt.charAt(i + j)) {
        skip=Math.max(1,j - right[tt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}
",128,9,"txt:tt,",3,0.053430839379628496,Beam
3876,,,65,7,,329,2.217877129713694,0
3877,,,19,3,,66,0.4823625763257345,0
3878,,,26,3,,214,1.504220179716746,0
3879,,,300,22,,1979,15.512825814882914,0
3880,"protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}
","protected final void reset() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}
",373,26,"init:reset,",6,0.0736172080039978,Beam
3881,,,273,16,,1372,11.878699560960134,0
3882,,,49,5,,702,7.376262525717418,0
3883,,,17,3,,283,2.3508679111798605,0
3884,"public static String classNamePath(String className){
  String filename=className.replace(""."",File.separator);
  filename=filename.replaceFirst(""[$][0-9]+"","""");
  if (filename.indexOf(""$"") > 0) {
    filename=filename.substring(0,filename.indexOf(""$""));
  }
  return ""src"" + File.separator + filename+ "".java"";
}
","public static String filenamePath(String ClassPath){
  String filename=ClassPath.replace(""."",File.separator);
  filename=filename.replaceFirst(""[$][0-9]+"","""");
  if (filename.indexOf(""$"") > 0) {
    filename=filename.substring(0,filename.indexOf(""$""));
  }
  return ""src"" + File.separator + filename+ "".java"";
}
",75,3,"className:ClassPath,classNamePath:filenamePath,",60,0.27462892134984335,Beam
3885,,,42,2,,77,0.26966323057810465,0
3886,"public Session(){
  long uptime=System.currentTimeMillis();
  mMainHandler=new Handler(Looper.getMainLooper());
  mTimestamp=(uptime / 1000) << 32 & (((uptime - ((uptime / 1000) * 1000)) >> 32) / 1000);
  mOrigin=""127.0.0.1"";
  try {
    sSignal.await();
  }
 catch (  InterruptedException e) {
  }
}
","public Server(){
  long uptime=System.currentTimeMillis();
  mMainHandler=new Handler(Looper.getMainLooper());
  mTimestamp=(uptime / 1000) << 32 & (((uptime - ((uptime / 1000) * 1000)) >> 32) / 1000);
  mOrigin=""127.0.0.1"";
  try {
    sSignal.await();
  }
 catch (  InterruptedException e) {
  }
}
",80,6,"Session:Server,",10,0.04214158058166504,Beam
3888,"private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
","private void build(int innent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error(""expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error(""duplicate \'@default\' in @switch"");
}
defaultElems=parseUntil(innent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(innent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}
",367,23,"parseSwitch:build,indent:innent,",216,1.2316834410031636,Beam
3889,"private static String indent(final int height){
  return CoreBaseBOp.indent(height);
}
","private static String writeent(final int height){
  return CoreBaseBOp.writeent(height);
}
",19,2,"indent:writeent,",13,0.05709095001220703,Beam
3890,"protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}
","protected int indexOf(String buffer,int rest,int end,char ch){
  for (int i=rest; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}
",54,6,"start:rest,",55,0.2889553666114807,Beam
3891,,,79,6,,496,2.9098172187805176,0
3892,"@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
","@Override public void eventPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals(""SelectLabelFont"")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals(""SelectLabelPaint"")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals(""SelectTickLabelFont"")) {
    attemptTickLabelFontSelection();
  }
}
",67,3,"actionPerformed:eventPerformed,",3,0.019049580891927084,Beam
3893,"@SuppressWarnings(""unused"") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
","@SuppressWarnings(""unused"") public static float floatrangeExp(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}
",70,4,"valueRangeLimit:floatrangeExp,",16,0.10363426208496093,Beam
3894,"public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
","public void addFooterView(View ov,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=ov;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}
",66,8,"v:ov,",61,1.5102591395378113,Beam
3895,,,88,7,,172,0.6864094456036886,0
3896,"private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}
","private static int alias(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}
",218,14,"lookupQualSelector:alias,",114,0.8193893631299337,Beam
3897,"public static void copy(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      copy(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}
","public static void zip(File sup,File dst) throws IOException {
  if (sup.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=sup.list();
    for (    String file : filesList) {
      File srcFile=new File(sup,file);
      File destFile=new File(dst,file);
      zip(srcFile,destFile);
    }
  }
 else {
    copyFile(sup,dst);
  }
}
",89,7,"copy:zip,src:sup,",134,0.5977838158607482,Beam
3899,,,74,7,,325,2.2926896969477335,0
3900,"public void putStringNoNull(String s){
  ensureCapacity(s.length() * 2);
  System.arraycopy(s.getBytes(),0,this.byteBuffer,this.position,s.length());
  this.position+=s.length();
}
","public void putStrNonull(String ins){
  ensureCapacity(ins.length() * 2);
  System.arraycopy(ins.getBytes(),0,this.byteBuffer,this.position,ins.length());
  this.position+=ins.length();
}
",57,2,"s:ins,putStringNoNull:putStrNonull,",160,0.8256068706512452,Beam
3901,,,19,2,,285,1.6658578197161356,0
3902,,,55,4,,531,4.679225401083628,0
3903,"private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
","private void enccodMethods(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}
",93,7,"encodeTypes:enccodMethods,",22,0.12042402029037476,Beam
3904,,,66,6,,757,3.6059327920277915,0
3905,"private String convertTimestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
","private String convertTimetz(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + ""+"",""\\\\\\\\S+"");
  result=result.replaceAll(Pattern.quote("".""),""\\\\\\\\."");
  return result;
}
",40,4,"convertTimestamp:convertTimetz,",7,0.04157619873682658,Beam
3907,"@SuppressWarnings(""all"") final void reject(Runnable command){
  handler.rejectedExecution(command,this);
}
","@SuppressWarnings(""all"") final void eceive(Runnable child){
  handler.rejectedExecution(child,this);
}
",23,3,"command:child,reject:eceive,",80,0.4300172448158264,Beam
3908,"public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}
","public static int inflate(byte[] previous,int previousLength,byte[] current,int currentPath,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentPath);
    return currentPath;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentPath) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentPath && current[end2] != '\\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentPath)     result[length++]='\\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}
",226,6,"currentLength:currentPath,",11,0.09209713935852051,Beam
3909,,,25,4,,282,1.5669390400250753,0
3910,,,47,3,,111,0.5730751077334086,0
3911,,,21,4,,627,3.3571462512016295,0
3912,"@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
","@Override public CategoricalResults init(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}
",36,4,"clone:init,",15,0.06275223096211752,Beam
3913,,,27,4,,560,4.607436323165894,0
3914,"public void addLeaf(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}
","public void addLEave(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}
",16,3,"addLeaf:addLEave,",9,0.044247158368428546,Beam
3915,"public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}
","public void pdrawCross(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}
",281,23,"paintBorder:pdrawCross,",12,0.09275745153427124,Beam
3916,"public synchronized void disableAttribute(String name){
  enabledAttributes.removeElement(name);
}
","public synchronized void enableAttributes(String name){
  enabledAttributes.removeElement(name);
}
",17,3,"disableAttribute:enableAttributes,",11,0.0385010560353597,Beam
3917,,,18,2,,266,1.2218918244043986,0
3918,"private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
","private static void checkSuperision() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkSuperision(new JodaTimePermission(""CurrentTime.setProvider""));
  }
}
",38,2,"checkPermission:checkSuperision,",21,0.17191681861877442,Beam
3919,"private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
","private static RoadPermission roadFlagEquision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner("";"");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + ""="" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + ""="" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags=""Tags: "" + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}
",198,14,"roadFlagComparision:roadFlagEquision,",36,0.3555577278137207,Beam
3920,"public boolean expired(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}
","public boolean Exerved(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TimeIN;
}
",18,3,"expired:Exerved,DFLT_EXPIRATION_TIMEOUT:DFLT_EXPIRATION_TimeIN,",20,0.09774333635965983,Beam
3921,"boolean removeDisplay(Display display){
  return m_displays.remove(display);
}
","boolean clearView(Display display){
  return m_displays.remove(display);
}
",16,3,"removeDisplay:clearView,",38,0.1694630225499471,Beam
3922,"private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}
","private Map<String,String> generateEvent(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + ""_"" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}
",135,10,"produceStream:generateEvent,",11,0.09148069222768147,Beam
3923,,,28,2,,95,0.462610391775767,0
3924,,,24,5,,511,2.2268166462580363,0
3925,"private void quickReply(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  quickReply(quickReplySmsMessage.getReplyText());
}
","private void shortAnswer(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  shortAnswer(quickReplySmsMessage.getReplyText());
}
",24,3,"quickReply:shortAnswer,",11,0.0426800807317098,Beam
3926,"public Week(Date time,TimeZone zone,Locale locale){
  ParamChecks.nullNotPermitted(time,""time"");
  ParamChecks.nullNotPermitted(zone,""zone"");
  ParamChecks.nullNotPermitted(locale,""locale"");
  Calendar calendar=Calendar.getInstance(zone,locale);
  calendar.setTime(time);
  int tempWeek=calendar.get(Calendar.WEEK_OF_YEAR);
  if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
    this.week=1;
    this.year=(short)(calendar.get(Calendar.YEAR) + 1);
  }
 else {
    this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);
    int yyyy=calendar.get(Calendar.YEAR);
    if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {
      yyyy--;
    }
    this.year=(short)yyyy;
  }
  peg(calendar);
}
","public February(Date time,TimeZone zone,Locale locale){
  ParamChecks.nullNotPermitted(time,""time"");
  ParamChecks.nullNotPermitted(zone,""zone"");
  ParamChecks.nullNotPermitted(locale,""locale"");
  Calendar calendar=Calendar.getInstance(zone,locale);
  calendar.setTime(time);
  int tempWeek=calendar.get(Calendar.WEEK_OF_YEAR);
  if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
    this.week=1;
    this.year=(short)(calendar.get(Calendar.YEAR) + 1);
  }
 else {
    this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);
    int yyyy=calendar.get(Calendar.YEAR);
    if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {
      yyyy--;
    }
    this.year=(short)yyyy;
  }
  peg(calendar);
}
",190,7,"Week:February,",113,0.7108047763506572,Beam
3927,"protected abstract void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException ;
","protected abstract void writesignatureOut(byte[] signatures,OutputStream out) throws IOException ;
",16,3,"writeSignatureBlock:writesignatureOut,signature:signatures,",64,0.27051604986190797,Beam
3928,,,129,7,,711,4.695077311992645,0
3929,,,445,18,,577,3.666916910807292,0
3930,"public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}
","public void print(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println(""#========== Wave =========="");
  pw.println(""#Type: NULL"");
  pw.println(""#Sample_Rate: "" + (int)audioFormat.getSampleRate());
  pw.println(""#Num_of_Samples: "" + samples.length / 2);
  pw.println(""#Num_of_Channels: "" + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}
",133,6,"dump:print,",12,0.08053683837254842,Beam
3931,,,106,8,,1668,11.20970520178477,0
3932,"public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
","public double validate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}
",45,6,"evaluate:validate,",69,0.41373178164164226,Beam
3933,"private void addProtocolIfNotExists(Set<String> protocols,String protocolType){
  if (!protocols.contains(protocolType)) {
    protocols.add(protocolType);
  }
}
","private void addProtocolIfNotExists(Set<String> topologs,String protologTypes){
  if (!topologs.contains(protologTypes)) {
    topologs.add(protologTypes);
  }
}
",34,3,"protocols:topologs,protocolType:protologTypes,",225,1.5606374422709146,Beam
3934,,,160,12,,314,1.7817984183629354,0
3935,,,39,5,,571,5.47605611483256,0
3936,,,130,6,,376,3.472005081176758,0
3937,,,17,2,,131,1.011332889397939,0
3938,"private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}
","private boolean ravers(Tree tree,NodeRef child,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=child.getNumber();
  NodeRef parent=tree.getParent(child);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,child);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(child));
    if (branchTime < 0.0) {
      throw new RuntimeException(""Negative branch length: "" + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(child)) {
    NodeRef child1=tree.getChild(child,0);
    final int[] op1={-1};
    final boolean update1=ravers(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(child,1);
    final int[] op2={-1};
    final boolean update2=ravers(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}
",551,35,"traverse:ravers,node:child,",153,1.5821425795555115,Beam
3939,,,57,5,,290,1.5503288865089417,0
3940,"@Override public URI toEdgeURI(final Object key){
  return toURI(key.toString());
}
","@Override public URI toedgeURL(final Object key){
  return toURI(key.toString());
}
",22,2,"toEdgeURI:toedgeURL,",21,0.11160666942596435,Beam
3941,,,39,4,,688,6.67540295124054,0
3942,"public void invalidateTitleSortable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}
","public void invalidateTitleRatable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}
",28,3,"invalidateTitleSortable:invalidateTitleRatable,",12,0.04417792558670044,Beam
3943,,,86,8,,877,4.921316389242808,0
3944,"public String patchFixIds(){
  return properties.getProperty(""patch.fix.ids"");
}
","public String patchFixIdls(){
  return properties.getProperty(""patch.fix.ids"");
}
",15,2,"patchFixIds:patchFixIdls,",4,0.024744927883148193,Beam
3945,"public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith(""ftp."")) {
    resultURL=""ftp://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""gopher."")) {
    resultURL=""gopher://"" + simpleURL;
  }
 else   if (simpleURL.startsWith(""/"")) {
    resultURL=""file:"" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL=""www."" + simpleURL + "".com"";
    }
    resultURL=""http://"" + simpleURL;
  }
  return resultURL;
}
","public String canonicalize(String singleUR){
  String resultURL=singleUR;
  if (singleUR.startsWith(""ftp."")) {
    resultURL=""ftp://"" + singleUR;
  }
 else   if (singleUR.startsWith(""gopher."")) {
    resultURL=""gopher://"" + singleUR;
  }
 else   if (singleUR.startsWith(""/"")) {
    resultURL=""file:"" + singleUR;
  }
 else   if (!hasProtocolName(singleUR)) {
    if (isSimpleHostName(singleUR)) {
      singleUR=""www."" + singleUR + "".com"";
    }
    resultURL=""http://"" + singleUR;
  }
  return resultURL;
}
",104,3,"simpleURL:singleUR,",23,0.14679694573084515,Beam
3946,"public Builder addSourceFolder(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}
","public Builder AddSourceFolder(@NonNull File definition){
  foldersToScan.add(definition);
  return this;
}
",21,3,"addSourceFolder:AddSourceFolder,folder:definition,",72,0.4389312903086344,Beam
3947,"protected void ensurePathExists(String path){
  String[] paths=path.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
","protected void ensureDirectoryList(String str){
  String[] paths=str.split(""/"");
  StringBuffer spath=new StringBuffer(""/"");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append(""/"");
  }
}
",83,6,"ensurePathExists:ensureDirectoryList,path:str,",346,2.1382753451665244,Beam
3948,,,45,7,,1089,5.796901265780131,0
3949,,,44,2,,70,0.4923014521598816,0
3950,"public void drawLinesAndPoints(Graphics2D g2d,ArrayList<ComparableLabel> orderedDateSet,HashMap<ComparableLabel,Integer> dataPoints,long yMaxMark){
  int sectionWidth=this.graphWidth / orderedDateSet.size();
  int xOffset=sectionWidth / 2;
  int yPrevValue;
  int yCurrentValue;
  float prevOffsetPerc;
  float currentOffsetPerc;
  g2d.setColor(this.lineColor);
  for (int i=0; i < orderedDateSet.size(); i++) {
    if (i != 0) {
      yPrevValue=dataPoints.get(orderedDateSet.get(i - 1));
      yCurrentValue=dataPoints.get(orderedDateSet.get(i));
      prevOffsetPerc=yPrevValue / (float)yMaxMark;
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight));
    }
 else {
      yCurrentValue=dataPoints.get(orderedDateSet.get(i));
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2);
    }
  }
}
","public void paint(Graphics2D g2d,ArrayList<ComparableLabel> orderedDataBase,HashMap<ComparableLabel,Integer> dataPoints,long yMaxMark){
  int sectionWidth=this.graphWidth / orderedDataBase.size();
  int xOffset=sectionWidth / 2;
  int yPrevValue;
  int yCurrentValue;
  float prevOffsetPerc;
  float currentOffsetPerc;
  g2d.setColor(this.lineColor);
  for (int i=0; i < orderedDataBase.size(); i++) {
    if (i != 0) {
      yPrevValue=dataPoints.get(orderedDataBase.get(i - 1));
      yCurrentValue=dataPoints.get(orderedDataBase.get(i));
      prevOffsetPerc=yPrevValue / (float)yMaxMark;
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight));
    }
 else {
      yCurrentValue=dataPoints.get(orderedDataBase.get(i));
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2);
    }
  }
}
",280,12,"drawLinesAndPoints:paint,orderedDateSet:orderedDataBase,",1515,11.951380145549773,Beam
3951,,,65,5,,397,1.7268779436747232,0
3952,"public boolean load(File fi) throws JmriConfigureXmlException {
  return load(fi,false);
}
","public boolean load(File bi) throws JmriConfigureXmlException {
  return load(bi,false);
}
",19,2,"fi:bi,",3,0.020671149094899494,Beam
3953,,,84,7,,840,3.818925940990448,0
3955,"public int findLine(int offset){
  int line=lineStarts.length - 1;
  while ((lineStarts[line] > offset) && (line > 0)) {
    line--;
  }
  return line;
}
","public int findLine(int addr){
  int line=lineStarts.length - 1;
  while ((lineStarts[line] > addr) && (line > 0)) {
    line--;
  }
  return line;
}
",43,4,"offset:addr,",23,0.12674233516057332,Beam
3956,,,82,9,,1139,7.181929830710093,0
3957,"public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}
","public SignatureFakerException(final String messageFormat) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(messageFormat);
    crawlSignatureElements();
    log.debug(""found "" + signatureValueElements.size() + "" SignatureValue elements"");
    crawlKeyInfoElements();
    log.debug(""found "" + keyInfoElements.size() + "" KeyInfo elements containing X509 certificates"");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}
",125,9,"SignatureFakingOracle:SignatureFakerException,documentString:messageFormat,",89,0.673314384619395,Beam
3958,,,17,2,,130,1.1186988353729248,0
3959,,,27,3,,495,3.1004728436470033,0
3960,"private void addSpan(CacheSpan span){
  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);
  if (spansForKey == null) {
    spansForKey=new TreeSet<CacheSpan>();
    cachedSpans.put(span.key,spansForKey);
  }
  spansForKey.add(span);
  totalSpace+=span.length;
  notifySpanAdded(span);
}
","private void addSpan(CacheSpan an){
  TreeSet<CacheSpan> spansForKey=cachedSpans.get(an.key);
  if (spansForKey == null) {
    spansForKey=new TreeSet<CacheSpan>();
    cachedSpans.put(an.key,spansForKey);
  }
  spansForKey.add(an);
  totalSpace+=an.length;
  notifySpanAdded(an);
}
",71,5,"span:an,",21,0.16325676441192627,Beam
3961,,,78,2,,99,0.6931767702102661,0
3963,,,83,6,,641,4.091644481817881,0
3964,,,87,10,,1296,9.728813580671947,0
3965,,,69,3,,173,1.068933641910553,0
3966,,,91,7,,243,1.0653625885645548,0
3967,"@Override public void applyInline(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}
","@Override public void applyinlined(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException(""Length must not be larger than FFT size"");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}
",308,14,"applyInline:applyinlined,",104,0.5224356969197591,Beam
3968,"public float realAbsolute(){
  return Math.abs(mLeft);
}
","public float isResolute(){
  return Math.abs(mLeft);
}
",15,2,"realAbsolute:isResolute,",8,0.03466279506683349,Beam
3969,"private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){
  if (parameterTypes != null) {
    for (int i=0; i < parameterTypes.length; i++) {
      if (i > 0) {
        buffer.append(',');
        buffer.append(' ');
      }
      buffer.append(parameterTypes[i]);
      if (parameterNames != null && parameterNames[i] != null) {
        buffer.append(' ');
        buffer.append(parameterNames[i]);
      }
    }
  }
  return buffer;
}
","private final StringBuilder appendParamsignature(StringBuilder request,char[][] parameterTypes,char[][] parameterNames){
  if (parameterTypes != null) {
    for (int i=0; i < parameterTypes.length; i++) {
      if (i > 0) {
        request.append(',');
        request.append(' ');
      }
      request.append(parameterTypes[i]);
      if (parameterNames != null && parameterNames[i] != null) {
        request.append(' ');
        request.append(parameterNames[i]);
      }
    }
  }
  return request;
}
",117,5,"appendParameterSignature:appendParamsignature,buffer:request,",192,1.1057392756144206,Beam
3970,"@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageItemDetails(strClass,description,item,options,defaultOption);
}
","@Override public void messageLineSummary(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageLineSummary(strClass,description,item,options,defaultOption);
}
",94,9,"messageItemDetails:messageLineSummary,",85,0.45721269845962526,Beam
3971,,,17,3,,314,1.7978876153628032,0
3972,"void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(a) + "" b=""+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}
","void randString(){
  String data=randomString();
  if (returnNew) {
    String f=StringUtils.fromCacheOrNew(data);
    try {
      assertEquals(data,f);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
    if (data != null && data == f && data.length() > 0) {
      throw new AssertionError(""a="" + System.identityHashCode(data) + "" b=""+ System.identityHashCode(f));
    }
  }
 else {
    String f;
    if (useIntern) {
      f=data == null ? null : data.intern();
    }
 else {
      f=StringUtils.cache(data);
    }
    try {
      assertEquals(data,f);
    }
 catch (    Exception e) {
      TestBase.logError(""error"",e);
    }
  }
}
",162,6,"testString:randString,a:data,b:f,",500,4.0535988211631775,Beam
3973,,,193,9,,1858,16.67905602057775,0
3974,"private int[] mod(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}
","private int[] norm(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException(""Division by zero"");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}
",155,9,"mod:norm,",39,0.2700335701306661,Beam
3975,,,57,2,,135,0.6739974935849508,0
3976,"public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
","public String getTSDBMetricAddress(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}
",49,3,"constructTSDBMetricName:getTSDBMetricAddress,",5,0.0345481554667155,Beam
3977,,,61,4,,452,3.357940363883972,0
3978,,,95,8,,253,1.3922924598058064,0
3979,"public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}
","public static String decodeASCII(final byte[] y,final int off,final int lan){
  final byte[] b=new byte[lan];
  System.arraycopy(y,off,b,0,lan);
  for (int i=0; i < lan; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,""US-ASCII"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}
",103,7,"key:y,len:lan,",230,1.5311461528142294,Beam
3980,"public static Date stringToDate(String s,DateFormat formatter){
  try {
    return formatter.parse(s);
  }
 catch (  ParseException e) {
    return null;
  }
}
","public static Date stringGetNumber(String m,DateFormat formatter){
  try {
    return formatter.parse(m);
  }
 catch (  ParseException e) {
    return null;
  }
}
",34,3,"stringToDate:stringGetNumber,s:m,",105,0.420723549524943,Beam
3982,"public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}
","public long process(String url,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(url));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}
",207,11,"copy:process,filename:url,",295,1.7141504804293315,Beam
3983,"@Override public void paint(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}
","@Override public void dispdraw(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}
",45,4,"paint:dispdraw,",36,0.17965292930603027,Beam
3984,"public Options resourceDirs(List<File> value){
  resourceDirs.clear();
  resourceDirs.addAll(value);
  return this;
}
","public Options resourceDris(List<File> value){
  resourceDris.clear();
  resourceDris.addAll(value);
  return this;
}
",28,2,"resourceDirs:resourceDris,",4,0.03004374106725057,Beam
3985,"public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){
  if (originalTypes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    TypeBinding substitutedType=substitute(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}
","public static ReferenceBinding[] substsit(Substitution substitution,ReferenceBinding[] originalTimes){
  if (originalTimes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTimes;
  for (int i=0, length=originalTimes.length; i < length; i++) {
    ReferenceBinding originalType=originalTimes[i];
    TypeBinding substitutedType=substsit(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTimes) {
        System.arraycopy(originalTimes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTimes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}
",153,8,"originalTypes:originalTimes,substitute:substsit,",154,1.1056808869043986,Beam
3986,,,77,8,,1120,6.804972199598948,0
3987,"public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}
","public double unsafeSabrVariacement(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}
",375,25,"unsafeSabrVolatility:unsafeSabrVariacement,",12,0.1316475510597229,Beam
3988,,,58,5,,612,3.20054319302241,0
3989,,,49,5,,314,1.4430715998013814,0
3990,,,122,8,,607,4.1711641867955525,0
3991,"public final double sampleMax(){
  return _activeCountMax.getAndSet(_activeCount.get());
}
","public final double currentAvg(){
  return _activeCountMax.getAndSet(_activeCount.get());
}
",20,3,"sampleMax:currentAvg,",8,0.0571635365486145,Beam
3992,,,33,2,,142,0.7264716029167175,0
3993,,,103,9,,3373,27.608911005655923,0
3994,,,101,7,,203,1.7935317834218343,0
3995,"private static String guessContentType(String url){
  url=url.toLowerCase();
  if (url.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (url.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (url.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (url.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (url.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}
","private static String guessVideotype(String url){
  url=url.toLowerCase();
  if (url.endsWith("".webm"")) {
    return ""video/webm"";
  }
 else   if (url.endsWith("".mp4"")) {
    return ""video/mp4"";
  }
 else   if (url.matches("".*\\\\.jpe?g"")) {
    return ""image/jpeg"";
  }
 else   if (url.endsWith("".png"")) {
    return ""image/png"";
  }
 else   if (url.endsWith("".gif"")) {
    return ""image/gif"";
  }
 else {
    return ""application/octet-stream"";
  }
}
",98,2,"guessContentType:guessVideotype,",16,0.07201767762502034,Beam
3997,"protected void updateRadioLinks(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
","protected void updateAudioLink(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}
",119,8,"updateRadioLinks:updateAudioLink,",23,0.1122608224550883,Beam
3998,"public void unsubscribe(AWSIotMessage message) throws AWSIotException {
  try {
    unsubscribeTopic(message);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(message);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + message.getTopic());
      throw new AWSIotException(e);
    }
  }
}
","public void unsublish(AWSIotMessage example) throws AWSIotException {
  try {
    unsubscribeTopic(example);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(example);
    }
 else {
      LOGGER.info(""Failed to unsubscribe to "" + example.getTopic());
      throw new AWSIotException(e);
    }
  }
}
",80,5,"message:example,unsubscribe:unsublish,",156,0.8072159290313721,Beam
3999,,,12,1,,49,1.721042803923289,0
